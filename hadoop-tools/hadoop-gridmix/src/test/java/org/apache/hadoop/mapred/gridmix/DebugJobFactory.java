begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_comment
comment|/**  * Component generating random job traces for testing on a single node.  */
end_comment

begin_class
DECL|class|DebugJobFactory
specifier|public
class|class
name|DebugJobFactory
block|{
DECL|interface|Debuggable
interface|interface
name|Debuggable
block|{
DECL|method|getSubmitted ()
name|ArrayList
argument_list|<
name|JobStory
argument_list|>
name|getSubmitted
parameter_list|()
function_decl|;
block|}
DECL|method|getFactory ( JobSubmitter submitter, Path scratch, int numJobs, Configuration conf, CountDownLatch startFlag, UserResolver resolver)
specifier|public
specifier|static
name|JobFactory
argument_list|<
name|?
argument_list|>
name|getFactory
parameter_list|(
name|JobSubmitter
name|submitter
parameter_list|,
name|Path
name|scratch
parameter_list|,
name|int
name|numJobs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CountDownLatch
name|startFlag
parameter_list|,
name|UserResolver
name|resolver
parameter_list|)
throws|throws
name|IOException
block|{
name|GridmixJobSubmissionPolicy
name|policy
init|=
name|GridmixJobSubmissionPolicy
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|,
name|GridmixJobSubmissionPolicy
operator|.
name|STRESS
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|==
name|GridmixJobSubmissionPolicy
operator|.
name|REPLAY
condition|)
block|{
return|return
operator|new
name|DebugReplayJobFactory
argument_list|(
name|submitter
argument_list|,
name|scratch
argument_list|,
name|numJobs
argument_list|,
name|conf
argument_list|,
name|startFlag
argument_list|,
name|resolver
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|policy
operator|==
name|GridmixJobSubmissionPolicy
operator|.
name|STRESS
condition|)
block|{
return|return
operator|new
name|DebugStressJobFactory
argument_list|(
name|submitter
argument_list|,
name|scratch
argument_list|,
name|numJobs
argument_list|,
name|conf
argument_list|,
name|startFlag
argument_list|,
name|resolver
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|policy
operator|==
name|GridmixJobSubmissionPolicy
operator|.
name|SERIAL
condition|)
block|{
return|return
operator|new
name|DebugSerialJobFactory
argument_list|(
name|submitter
argument_list|,
name|scratch
argument_list|,
name|numJobs
argument_list|,
name|conf
argument_list|,
name|startFlag
argument_list|,
name|resolver
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|class|DebugReplayJobFactory
specifier|static
class|class
name|DebugReplayJobFactory
extends|extends
name|ReplayJobFactory
implements|implements
name|Debuggable
block|{
DECL|method|DebugReplayJobFactory ( JobSubmitter submitter, Path scratch, int numJobs, Configuration conf, CountDownLatch startFlag, UserResolver resolver)
specifier|public
name|DebugReplayJobFactory
parameter_list|(
name|JobSubmitter
name|submitter
parameter_list|,
name|Path
name|scratch
parameter_list|,
name|int
name|numJobs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CountDownLatch
name|startFlag
parameter_list|,
name|UserResolver
name|resolver
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|submitter
argument_list|,
operator|new
name|DebugJobProducer
argument_list|(
name|numJobs
argument_list|,
name|conf
argument_list|)
argument_list|,
name|scratch
argument_list|,
name|conf
argument_list|,
name|startFlag
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSubmitted ()
specifier|public
name|ArrayList
argument_list|<
name|JobStory
argument_list|>
name|getSubmitted
parameter_list|()
block|{
return|return
operator|(
operator|(
name|DebugJobProducer
operator|)
name|jobProducer
operator|)
operator|.
name|submitted
return|;
block|}
block|}
DECL|class|DebugSerialJobFactory
specifier|static
class|class
name|DebugSerialJobFactory
extends|extends
name|SerialJobFactory
implements|implements
name|Debuggable
block|{
DECL|method|DebugSerialJobFactory ( JobSubmitter submitter, Path scratch, int numJobs, Configuration conf, CountDownLatch startFlag, UserResolver resolver)
specifier|public
name|DebugSerialJobFactory
parameter_list|(
name|JobSubmitter
name|submitter
parameter_list|,
name|Path
name|scratch
parameter_list|,
name|int
name|numJobs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CountDownLatch
name|startFlag
parameter_list|,
name|UserResolver
name|resolver
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|submitter
argument_list|,
operator|new
name|DebugJobProducer
argument_list|(
name|numJobs
argument_list|,
name|conf
argument_list|)
argument_list|,
name|scratch
argument_list|,
name|conf
argument_list|,
name|startFlag
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSubmitted ()
specifier|public
name|ArrayList
argument_list|<
name|JobStory
argument_list|>
name|getSubmitted
parameter_list|()
block|{
return|return
operator|(
operator|(
name|DebugJobProducer
operator|)
name|jobProducer
operator|)
operator|.
name|submitted
return|;
block|}
block|}
DECL|class|DebugStressJobFactory
specifier|static
class|class
name|DebugStressJobFactory
extends|extends
name|StressJobFactory
implements|implements
name|Debuggable
block|{
DECL|method|DebugStressJobFactory ( JobSubmitter submitter, Path scratch, int numJobs, Configuration conf, CountDownLatch startFlag, UserResolver resolver)
specifier|public
name|DebugStressJobFactory
parameter_list|(
name|JobSubmitter
name|submitter
parameter_list|,
name|Path
name|scratch
parameter_list|,
name|int
name|numJobs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CountDownLatch
name|startFlag
parameter_list|,
name|UserResolver
name|resolver
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|submitter
argument_list|,
operator|new
name|DebugJobProducer
argument_list|(
name|numJobs
argument_list|,
name|conf
argument_list|)
argument_list|,
name|scratch
argument_list|,
name|conf
argument_list|,
name|startFlag
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSubmitted ()
specifier|public
name|ArrayList
argument_list|<
name|JobStory
argument_list|>
name|getSubmitted
parameter_list|()
block|{
return|return
operator|(
operator|(
name|DebugJobProducer
operator|)
name|jobProducer
operator|)
operator|.
name|submitted
return|;
block|}
block|}
block|}
end_class

end_unit

