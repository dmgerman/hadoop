begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_class
DECL|class|GridmixRecord
class|class
name|GridmixRecord
implements|implements
name|WritableComparable
argument_list|<
name|GridmixRecord
argument_list|>
block|{
DECL|field|FIXED_BYTES
specifier|private
specifier|static
specifier|final
name|int
name|FIXED_BYTES
init|=
literal|1
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|seed
specifier|private
name|long
name|seed
decl_stmt|;
DECL|field|dib
specifier|private
specifier|final
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
DECL|field|dob
specifier|private
specifier|final
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|(
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
argument_list|)
decl_stmt|;
DECL|field|literal
specifier|private
name|byte
index|[]
name|literal
init|=
name|dob
operator|.
name|getData
argument_list|()
decl_stmt|;
DECL|field|compressible
specifier|private
name|boolean
name|compressible
init|=
literal|false
decl_stmt|;
DECL|field|compressionRatio
specifier|private
name|float
name|compressionRatio
init|=
name|CompressionEmulationUtil
operator|.
name|DEFAULT_COMPRESSION_RATIO
decl_stmt|;
DECL|field|rtg
specifier|private
name|RandomTextDataGenerator
name|rtg
init|=
literal|null
decl_stmt|;
DECL|method|GridmixRecord ()
name|GridmixRecord
parameter_list|()
block|{
name|this
argument_list|(
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|GridmixRecord (int size, long seed)
name|GridmixRecord
parameter_list|(
name|int
name|size
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
name|setSizeInternal
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|getSize ()
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|setSize (int size)
specifier|public
name|void
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|setSizeInternal
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|setCompressibility (boolean compressible, float ratio)
name|void
name|setCompressibility
parameter_list|(
name|boolean
name|compressible
parameter_list|,
name|float
name|ratio
parameter_list|)
block|{
name|this
operator|.
name|compressible
operator|=
name|compressible
expr_stmt|;
name|this
operator|.
name|compressionRatio
operator|=
name|ratio
expr_stmt|;
comment|// Initialize the RandomTextDataGenerator once for every GridMix record
comment|// Note that RandomTextDataGenerator is needed only when the GridMix record
comment|// is configured to generate compressible text data.
if|if
condition|(
name|compressible
condition|)
block|{
name|rtg
operator|=
name|CompressionEmulationUtil
operator|.
name|getRandomTextDataGenerator
argument_list|(
name|ratio
argument_list|,
name|RandomTextDataGenerator
operator|.
name|DEFAULT_SEED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setSizeInternal (int size)
specifier|private
name|void
name|setSizeInternal
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
expr_stmt|;
try|try
block|{
name|seed
operator|=
name|maskSeed
argument_list|(
name|seed
argument_list|,
name|this
operator|.
name|size
argument_list|)
expr_stmt|;
name|dob
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dob
operator|.
name|writeLong
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|setSeed (long seed)
specifier|public
specifier|final
name|void
name|setSeed
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
block|}
comment|/** Marsaglia, 2003. */
DECL|method|nextRand (long x)
name|long
name|nextRand
parameter_list|(
name|long
name|x
parameter_list|)
block|{
name|x
operator|^=
operator|(
name|x
operator|<<
literal|13
operator|)
expr_stmt|;
name|x
operator|^=
operator|(
name|x
operator|>>>
literal|7
operator|)
expr_stmt|;
return|return
operator|(
name|x
operator|^=
operator|(
name|x
operator|<<
literal|17
operator|)
operator|)
return|;
block|}
comment|/**    * Generate random text data that can be compressed. If the record is marked    * compressible (via {@link FileOutputFormat#COMPRESS}), only then the     * random data will be text data else     * {@link GridmixRecord#writeRandom(DataOutput, int)} will be invoked.    */
DECL|method|writeRandomText (DataOutput out, final int size)
specifier|private
name|void
name|writeRandomText
parameter_list|(
name|DataOutput
name|out
parameter_list|,
specifier|final
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|tmp
init|=
name|seed
decl_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|size
operator|-
operator|(
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
decl_stmt|;
comment|//TODO Should we use long for size. What if the data is more than 4G?
name|String
name|randomWord
init|=
name|rtg
operator|.
name|getRandomWord
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|randomWord
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|long
name|randomWordSize
init|=
name|bytes
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|i
operator|>=
name|randomWordSize
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|i
operator|-=
name|randomWordSize
expr_stmt|;
comment|// get the next random word
name|randomWord
operator|=
name|rtg
operator|.
name|getRandomWord
argument_list|()
expr_stmt|;
name|bytes
operator|=
name|randomWord
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|// determine the random word size
name|randomWordSize
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
block|}
comment|// pad the remaining bytes
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeRandom (DataOutput out, final int size)
specifier|public
name|void
name|writeRandom
parameter_list|(
name|DataOutput
name|out
parameter_list|,
specifier|final
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|tmp
init|=
name|seed
decl_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|size
operator|-
operator|(
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
decl_stmt|;
while|while
condition|(
name|i
operator|>
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|-
literal|1
condition|)
block|{
name|tmp
operator|=
name|nextRand
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|i
operator|-=
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
expr_stmt|;
block|}
for|for
control|(
name|tmp
operator|=
name|nextRand
argument_list|(
name|tmp
argument_list|)
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
call|(
name|int
call|)
argument_list|(
name|tmp
operator|&
literal|0xFF
argument_list|)
argument_list|)
expr_stmt|;
name|tmp
operator|>>>=
name|Byte
operator|.
name|SIZE
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|size
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|payload
init|=
name|size
operator|-
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|payload
operator|>
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
condition|)
block|{
name|seed
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|payload
operator|-=
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
expr_stmt|;
block|}
else|else
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|literal
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|literal
argument_list|,
literal|0
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|literal
argument_list|,
literal|0
argument_list|,
name|literal
operator|.
name|length
argument_list|)
expr_stmt|;
name|seed
operator|=
name|dib
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|payload
operator|=
literal|0
expr_stmt|;
block|}
specifier|final
name|int
name|vBytes
init|=
name|in
operator|.
name|skipBytes
argument_list|(
name|payload
argument_list|)
decl_stmt|;
if|if
condition|(
name|vBytes
operator|!=
name|payload
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Expected "
operator|+
name|payload
operator|+
literal|", read "
operator|+
name|vBytes
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// data bytes including vint encoding
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|size
argument_list|)
expr_stmt|;
specifier|final
name|int
name|payload
init|=
name|size
operator|-
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|payload
operator|>
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
condition|)
block|{
if|if
condition|(
name|compressible
condition|)
block|{
name|writeRandomText
argument_list|(
name|out
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeRandom
argument_list|(
name|out
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|payload
operator|>
literal|0
condition|)
block|{
comment|//TODO What is compressible is turned on? LOG is a bad idea!
name|out
operator|.
name|write
argument_list|(
name|literal
argument_list|,
literal|0
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareTo (GridmixRecord other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|GridmixRecord
name|other
parameter_list|)
block|{
return|return
name|compareSeed
argument_list|(
name|other
operator|.
name|seed
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|other
operator|.
name|getSize
argument_list|()
operator|-
name|other
operator|.
name|fixedBytes
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fixedBytes ()
name|int
name|fixedBytes
parameter_list|()
block|{
comment|// min vint size
return|return
name|FIXED_BYTES
return|;
block|}
DECL|method|maskSeed (long sd, int sz)
specifier|private
specifier|static
name|long
name|maskSeed
parameter_list|(
name|long
name|sd
parameter_list|,
name|int
name|sz
parameter_list|)
block|{
comment|// Don't use fixedBytes here; subclasses will set intended random len
if|if
condition|(
name|sz
operator|<=
name|FIXED_BYTES
condition|)
block|{
name|sd
operator|=
literal|0L
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sz
operator|<
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|+
name|FIXED_BYTES
condition|)
block|{
specifier|final
name|int
name|tmp
init|=
name|sz
operator|-
name|FIXED_BYTES
decl_stmt|;
specifier|final
name|long
name|mask
init|=
operator|(
literal|1L
operator|<<
operator|(
name|Byte
operator|.
name|SIZE
operator|*
name|tmp
operator|)
operator|)
operator|-
literal|1
decl_stmt|;
name|sd
operator|&=
name|mask
operator|<<
operator|(
name|Byte
operator|.
name|SIZE
operator|*
operator|(
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|-
name|tmp
operator|)
operator|)
expr_stmt|;
block|}
return|return
name|sd
return|;
block|}
DECL|method|compareSeed (long jSeed, int jSize)
name|int
name|compareSeed
parameter_list|(
name|long
name|jSeed
parameter_list|,
name|int
name|jSize
parameter_list|)
block|{
specifier|final
name|int
name|iSize
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|getSize
argument_list|()
operator|-
name|fixedBytes
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|seedLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|iSize
argument_list|,
name|jSize
argument_list|)
operator|+
name|FIXED_BYTES
decl_stmt|;
name|jSeed
operator|=
name|maskSeed
argument_list|(
name|jSeed
argument_list|,
name|seedLen
argument_list|)
expr_stmt|;
name|long
name|iSeed
init|=
name|maskSeed
argument_list|(
name|seed
argument_list|,
name|seedLen
argument_list|)
decl_stmt|;
specifier|final
name|int
name|cmplen
init|=
name|Math
operator|.
name|min
argument_list|(
name|iSize
argument_list|,
name|jSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cmplen
condition|;
name|i
operator|+=
name|Byte
operator|.
name|SIZE
control|)
block|{
specifier|final
name|int
name|k
init|=
name|cmplen
operator|-
name|i
decl_stmt|;
for|for
control|(
name|long
name|j
init|=
name|Long
operator|.
name|SIZE
operator|-
name|Byte
operator|.
name|SIZE
init|;
name|j
operator|>=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|-
name|k
argument_list|)
operator|*
name|Byte
operator|.
name|SIZE
condition|;
name|j
operator|-=
name|Byte
operator|.
name|SIZE
control|)
block|{
specifier|final
name|int
name|xi
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|iSeed
operator|>>>
name|j
operator|)
operator|&
literal|0xFFL
argument_list|)
decl_stmt|;
specifier|final
name|int
name|xj
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|jSeed
operator|>>>
name|j
operator|)
operator|&
literal|0xFFL
argument_list|)
decl_stmt|;
if|if
condition|(
name|xi
operator|!=
name|xj
condition|)
block|{
return|return
name|xi
operator|-
name|xj
return|;
block|}
block|}
name|iSeed
operator|=
name|nextRand
argument_list|(
name|iSeed
argument_list|)
expr_stmt|;
name|jSeed
operator|=
name|nextRand
argument_list|(
name|jSeed
argument_list|)
expr_stmt|;
block|}
return|return
name|iSize
operator|-
name|jSize
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|!=
literal|null
operator|&&
name|other
operator|.
name|getClass
argument_list|()
operator|==
name|getClass
argument_list|()
condition|)
block|{
specifier|final
name|GridmixRecord
name|o
init|=
operator|(
operator|(
name|GridmixRecord
operator|)
name|other
operator|)
decl_stmt|;
return|return
name|getSize
argument_list|()
operator|==
name|o
operator|.
name|getSize
argument_list|()
operator|&&
name|seed
operator|==
name|o
operator|.
name|seed
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|seed
operator|*
name|getSize
argument_list|()
argument_list|)
return|;
block|}
DECL|class|Comparator
specifier|public
specifier|static
class|class
name|Comparator
extends|extends
name|WritableComparator
block|{
DECL|method|Comparator ()
specifier|public
name|Comparator
parameter_list|()
block|{
name|super
argument_list|(
name|GridmixRecord
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|Comparator (Class<? extends WritableComparable<?>> sub)
specifier|public
name|Comparator
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|sub
parameter_list|)
block|{
name|super
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (byte[] b1, int s1, int l1, byte[] b2, int s2, int l2)
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
name|int
name|n1
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|b1
index|[
name|s1
index|]
argument_list|)
decl_stmt|;
name|int
name|n2
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|b2
index|[
name|s2
index|]
argument_list|)
decl_stmt|;
name|n1
operator|-=
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|n1
argument_list|)
expr_stmt|;
name|n2
operator|-=
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|n2
argument_list|)
expr_stmt|;
return|return
name|compareBytes
argument_list|(
name|b1
argument_list|,
name|s1
operator|+
name|n1
argument_list|,
name|l1
operator|-
name|n1
argument_list|,
name|b2
argument_list|,
name|s2
operator|+
name|n2
argument_list|,
name|l2
operator|-
name|n2
argument_list|)
return|;
block|}
static|static
block|{
name|WritableComparator
operator|.
name|define
argument_list|(
name|GridmixRecord
operator|.
name|class
argument_list|,
operator|new
name|Comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

