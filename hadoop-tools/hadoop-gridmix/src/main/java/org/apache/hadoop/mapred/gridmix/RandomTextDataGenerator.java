begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * A random text generator. The words are simply sequences of alphabets.  */
end_comment

begin_class
DECL|class|RandomTextDataGenerator
class|class
name|RandomTextDataGenerator
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RandomTextDataGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Configuration key for random text data generator's list size.    */
DECL|field|GRIDMIX_DATAGEN_RANDOMTEXT_LISTSIZE
specifier|static
specifier|final
name|String
name|GRIDMIX_DATAGEN_RANDOMTEXT_LISTSIZE
init|=
literal|"gridmix.datagenerator.randomtext.listsize"
decl_stmt|;
comment|/**    * Configuration key for random text data generator's word size.    */
DECL|field|GRIDMIX_DATAGEN_RANDOMTEXT_WORDSIZE
specifier|static
specifier|final
name|String
name|GRIDMIX_DATAGEN_RANDOMTEXT_WORDSIZE
init|=
literal|"gridmix.datagenerator.randomtext.wordsize"
decl_stmt|;
comment|/**    * Default random text data generator's list size.    */
DECL|field|DEFAULT_LIST_SIZE
specifier|static
specifier|final
name|int
name|DEFAULT_LIST_SIZE
init|=
literal|200
decl_stmt|;
comment|/**    * Default random text data generator's word size.    */
DECL|field|DEFAULT_WORD_SIZE
specifier|static
specifier|final
name|int
name|DEFAULT_WORD_SIZE
init|=
literal|10
decl_stmt|;
comment|/**    * Default random text data generator's seed.    */
DECL|field|DEFAULT_SEED
specifier|static
specifier|final
name|long
name|DEFAULT_SEED
init|=
literal|0L
decl_stmt|;
comment|/**    * A list of random words    */
DECL|field|words
specifier|private
name|String
index|[]
name|words
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
decl_stmt|;
comment|/**    * Constructor for {@link RandomTextDataGenerator} with default seed.    * @param size the total number of words to consider.    * @param wordSize Size of each word    */
DECL|method|RandomTextDataGenerator (int size, int wordSize)
name|RandomTextDataGenerator
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|wordSize
parameter_list|)
block|{
name|this
argument_list|(
name|size
argument_list|,
name|DEFAULT_SEED
argument_list|,
name|wordSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor for {@link RandomTextDataGenerator}.    * @param size the total number of words to consider.    * @param seed Random number generator seed for repeatability    * @param wordSize Size of each word    */
DECL|method|RandomTextDataGenerator (int size, Long seed, int wordSize)
name|RandomTextDataGenerator
parameter_list|(
name|int
name|size
parameter_list|,
name|Long
name|seed
parameter_list|,
name|int
name|wordSize
parameter_list|)
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|words
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
comment|//TODO change the default with the actual stats
comment|//TODO do u need varied sized words?
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|words
index|[
name|i
index|]
operator|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
name|wordSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the configured random text data generator's list size.    */
DECL|method|getRandomTextDataGeneratorListSize (Configuration conf)
specifier|static
name|int
name|getRandomTextDataGeneratorListSize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|GRIDMIX_DATAGEN_RANDOMTEXT_LISTSIZE
argument_list|,
name|DEFAULT_LIST_SIZE
argument_list|)
return|;
block|}
comment|/**    * Set the random text data generator's list size.    */
DECL|method|setRandomTextDataGeneratorListSize (Configuration conf, int listSize)
specifier|static
name|void
name|setRandomTextDataGeneratorListSize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|listSize
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Random text data generator is configured to use a dictionary "
operator|+
literal|" with "
operator|+
name|listSize
operator|+
literal|" words"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|GRIDMIX_DATAGEN_RANDOMTEXT_LISTSIZE
argument_list|,
name|listSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the configured random text data generator word size.    */
DECL|method|getRandomTextDataGeneratorWordSize (Configuration conf)
specifier|static
name|int
name|getRandomTextDataGeneratorWordSize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|GRIDMIX_DATAGEN_RANDOMTEXT_WORDSIZE
argument_list|,
name|DEFAULT_WORD_SIZE
argument_list|)
return|;
block|}
comment|/**    * Set the random text data generator word size.    */
DECL|method|setRandomTextDataGeneratorWordSize (Configuration conf, int wordSize)
specifier|static
name|void
name|setRandomTextDataGeneratorWordSize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|wordSize
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Random text data generator is configured to use a dictionary "
operator|+
literal|" with words of length "
operator|+
name|wordSize
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|GRIDMIX_DATAGEN_RANDOMTEXT_WORDSIZE
argument_list|,
name|wordSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a randomly selected word from a list of random words.    */
DECL|method|getRandomWord ()
name|String
name|getRandomWord
parameter_list|()
block|{
name|int
name|index
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|words
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|words
index|[
name|index
index|]
return|;
block|}
comment|/**    * This is mainly for testing.    */
DECL|method|getRandomWords ()
name|List
argument_list|<
name|String
argument_list|>
name|getRandomWords
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|words
argument_list|)
return|;
block|}
block|}
end_class

end_unit

