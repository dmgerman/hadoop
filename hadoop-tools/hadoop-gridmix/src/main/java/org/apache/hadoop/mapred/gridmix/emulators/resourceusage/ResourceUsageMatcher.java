begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix.emulators.resourceusage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|emulators
operator|.
name|resourceusage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|Progressive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ResourceUsageMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
import|;
end_import

begin_comment
comment|/**  *<p>This is the driver class for managing all the resource usage emulators.  * {@link ResourceUsageMatcher} expects a comma separated list of   * {@link ResourceUsageEmulatorPlugin} implementations specified using   * {@link #RESOURCE_USAGE_EMULATION_PLUGINS} as the configuration parameter.</p>  *   *<p>Note that the order in which the emulators are invoked is same as the   * order in which they are configured.  */
end_comment

begin_class
DECL|class|ResourceUsageMatcher
specifier|public
class|class
name|ResourceUsageMatcher
implements|implements
name|Progressive
block|{
comment|/**    * Configuration key to set resource usage emulators.    */
DECL|field|RESOURCE_USAGE_EMULATION_PLUGINS
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCE_USAGE_EMULATION_PLUGINS
init|=
literal|"gridmix.emulators.resource-usage.plugins"
decl_stmt|;
DECL|field|emulationPlugins
specifier|private
name|List
argument_list|<
name|ResourceUsageEmulatorPlugin
argument_list|>
name|emulationPlugins
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceUsageEmulatorPlugin
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Configure the {@link ResourceUsageMatcher} to load the configured plugins    * and initialize them.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|configure (Configuration conf, ResourceCalculatorPlugin monitor, ResourceUsageMetrics metrics, Progressive progress)
specifier|public
name|void
name|configure
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ResourceCalculatorPlugin
name|monitor
parameter_list|,
name|ResourceUsageMetrics
name|metrics
parameter_list|,
name|Progressive
name|progress
parameter_list|)
block|{
name|Class
index|[]
name|plugins
init|=
name|conf
operator|.
name|getClasses
argument_list|(
name|RESOURCE_USAGE_EMULATION_PLUGINS
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugins
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No resource usage emulator plugins configured."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Class
name|clazz
range|:
name|plugins
control|)
block|{
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ResourceUsageEmulatorPlugin
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|ResourceUsageEmulatorPlugin
name|plugin
init|=
operator|(
name|ResourceUsageEmulatorPlugin
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|emulationPlugins
operator|.
name|add
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Misconfigured resource usage plugins. "
operator|+
literal|"Class "
operator|+
name|clazz
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is not a resource "
operator|+
literal|"usage plugin as it does not extend "
operator|+
name|ResourceUsageEmulatorPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|// initialize the emulators once all the configured emulator plugins are
comment|// loaded
for|for
control|(
name|ResourceUsageEmulatorPlugin
name|emulator
range|:
name|emulationPlugins
control|)
block|{
name|emulator
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|metrics
argument_list|,
name|monitor
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|matchResourceUsage ()
specifier|public
name|void
name|matchResourceUsage
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|ResourceUsageEmulatorPlugin
name|emulator
range|:
name|emulationPlugins
control|)
block|{
comment|// match the resource usage
name|emulator
operator|.
name|emulate
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the average progress.    */
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
if|if
condition|(
name|emulationPlugins
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// return the average progress
name|float
name|progress
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|ResourceUsageEmulatorPlugin
name|emulator
range|:
name|emulationPlugins
control|)
block|{
comment|// consider weighted progress of each emulator
name|progress
operator|+=
name|emulator
operator|.
name|getProgress
argument_list|()
expr_stmt|;
block|}
return|return
name|progress
operator|/
name|emulationPlugins
operator|.
name|size
argument_list|()
return|;
block|}
comment|// if no emulators are configured then return 1
return|return
literal|1f
return|;
block|}
block|}
end_class

end_unit

