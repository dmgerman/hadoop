begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStoryProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|ReplayJobFactory
class|class
name|ReplayJobFactory
extends|extends
name|JobFactory
argument_list|<
name|Statistics
operator|.
name|ClusterStats
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplayJobFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Creating a new instance does not start the thread.    *    * @param submitter   Component to which deserialized jobs are passed    * @param jobProducer Job story producer    *                    {@link org.apache.hadoop.tools.rumen.ZombieJobProducer}    * @param scratch     Directory into which to write output from simulated jobs    * @param conf        Config passed to all jobs to be submitted    * @param startFlag   Latch released from main to start pipeline    * @param resolver    * @throws java.io.IOException    */
DECL|method|ReplayJobFactory ( JobSubmitter submitter, JobStoryProducer jobProducer, Path scratch, Configuration conf, CountDownLatch startFlag, UserResolver resolver)
specifier|public
name|ReplayJobFactory
parameter_list|(
name|JobSubmitter
name|submitter
parameter_list|,
name|JobStoryProducer
name|jobProducer
parameter_list|,
name|Path
name|scratch
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CountDownLatch
name|startFlag
parameter_list|,
name|UserResolver
name|resolver
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|submitter
argument_list|,
name|jobProducer
argument_list|,
name|scratch
argument_list|,
name|conf
argument_list|,
name|startFlag
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createReaderThread ()
specifier|public
name|Thread
name|createReaderThread
parameter_list|()
block|{
return|return
operator|new
name|ReplayReaderThread
argument_list|(
literal|"ReplayJobFactory"
argument_list|)
return|;
block|}
comment|/**     * @param item     */
DECL|method|update (Statistics.ClusterStats item)
specifier|public
name|void
name|update
parameter_list|(
name|Statistics
operator|.
name|ClusterStats
name|item
parameter_list|)
block|{    }
DECL|class|ReplayReaderThread
specifier|private
class|class
name|ReplayReaderThread
extends|extends
name|Thread
block|{
DECL|method|ReplayReaderThread (String threadName)
specifier|public
name|ReplayReaderThread
parameter_list|(
name|String
name|threadName
parameter_list|)
block|{
name|super
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startFlag
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|initTime
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"START REPLAY @ "
operator|+
name|initTime
argument_list|)
expr_stmt|;
name|long
name|first
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|last
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|JobStory
name|job
init|=
name|getNextJobFiltered
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|job
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|first
operator|<
literal|0
condition|)
block|{
name|first
operator|=
name|job
operator|.
name|getSubmissionTime
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|current
init|=
name|job
operator|.
name|getSubmissionTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|<
name|last
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Job "
operator|+
name|job
operator|.
name|getJobID
argument_list|()
operator|+
literal|" out of order"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|last
operator|=
name|current
expr_stmt|;
name|submitter
operator|.
name|add
argument_list|(
name|jobCreator
operator|.
name|createGridmixJob
argument_list|(
name|conf
argument_list|,
name|initTime
operator|+
name|Math
operator|.
name|round
argument_list|(
name|rateFactor
operator|*
operator|(
name|current
operator|-
name|first
operator|)
argument_list|)
argument_list|,
name|job
argument_list|,
name|scratch
argument_list|,
name|userResolver
operator|.
name|getTargetUgi
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|job
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|sequence
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// exit thread; ignore any jobs remaining in the trace
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|jobProducer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**     * Start the reader thread, wait for latch if necessary.     */
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|this
operator|.
name|rThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

