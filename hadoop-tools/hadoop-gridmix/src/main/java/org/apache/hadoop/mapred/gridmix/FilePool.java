begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|RandomAlgorithms
operator|.
name|Selector
import|;
end_import

begin_comment
comment|/**  * Class for caching a pool of input data to be used by synthetic jobs for  * simulating read traffic.  */
end_comment

begin_class
DECL|class|FilePool
class|class
name|FilePool
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FilePool
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The minimum file size added to the pool. Default 128MiB.    */
DECL|field|GRIDMIX_MIN_FILE
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_MIN_FILE
init|=
literal|"gridmix.min.file.size"
decl_stmt|;
comment|/**    * The maximum size for files added to the pool. Defualts to 100TiB.    */
DECL|field|GRIDMIX_MAX_TOTAL
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_MAX_TOTAL
init|=
literal|"gridmix.max.total.scan"
decl_stmt|;
DECL|field|root
specifier|private
name|Node
name|root
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|updateLock
specifier|private
specifier|final
name|ReadWriteLock
name|updateLock
decl_stmt|;
comment|/**    * Initialize a filepool under the path provided, but do not populate the    * cache.    */
DECL|method|FilePool (Configuration conf, Path input)
specifier|public
name|FilePool
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|root
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|updateLock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gather a collection of files at least as large as minSize.    * @return The total size of files returned.    */
DECL|method|getInputFiles (long minSize, Collection<FileStatus> files)
specifier|public
name|long
name|getInputFiles
parameter_list|(
name|long
name|minSize
parameter_list|,
name|Collection
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|updateLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|root
operator|.
name|selectFiles
argument_list|(
name|minSize
argument_list|,
name|files
argument_list|)
return|;
block|}
finally|finally
block|{
name|updateLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * (Re)generate cache of input FileStatus objects.    */
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
throws|throws
name|IOException
block|{
name|updateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|root
operator|=
operator|new
name|InnerDesc
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
argument_list|,
operator|new
name|MinFileFilter
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|GRIDMIX_MIN_FILE
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|GRIDMIX_MAX_TOTAL
argument_list|,
literal|100L
operator|*
operator|(
literal|1L
operator|<<
literal|40
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|root
operator|.
name|getSize
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found no satisfactory file in "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|updateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get a set of locations for the given file.    */
DECL|method|locationsFor (FileStatus stat, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|locationsFor
parameter_list|(
name|FileStatus
name|stat
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO cache
return|return
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|stat
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
return|;
block|}
DECL|class|Node
specifier|static
specifier|abstract
class|class
name|Node
block|{
DECL|field|rand
specifier|protected
specifier|final
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**      * Total size of files and directories under the current node.      */
DECL|method|getSize ()
specifier|abstract
name|long
name|getSize
parameter_list|()
function_decl|;
comment|/**      * Return a set of files whose cumulative size is at least      *<tt>targetSize</tt>.      * TODO Clearly size is not the only criterion, e.g. refresh from      * generated data without including running task output, tolerance      * for permission issues, etc.      */
DECL|method|selectFiles (long targetSize, Collection<FileStatus> files)
specifier|abstract
name|long
name|selectFiles
parameter_list|(
name|long
name|targetSize
parameter_list|,
name|Collection
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Files in current directory of this Node.    */
DECL|class|LeafDesc
specifier|static
class|class
name|LeafDesc
extends|extends
name|Node
block|{
DECL|field|size
specifier|final
name|long
name|size
decl_stmt|;
DECL|field|curdir
specifier|final
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|curdir
decl_stmt|;
DECL|method|LeafDesc (ArrayList<FileStatus> curdir, long size)
name|LeafDesc
parameter_list|(
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|curdir
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|curdir
operator|=
name|curdir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSize ()
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|selectFiles (long targetSize, Collection<FileStatus> files)
specifier|public
name|long
name|selectFiles
parameter_list|(
name|long
name|targetSize
parameter_list|,
name|Collection
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|targetSize
operator|>=
name|getSize
argument_list|()
condition|)
block|{
name|files
operator|.
name|addAll
argument_list|(
name|curdir
argument_list|)
expr_stmt|;
return|return
name|getSize
argument_list|()
return|;
block|}
name|Selector
name|selector
init|=
operator|new
name|Selector
argument_list|(
name|curdir
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|double
operator|)
name|targetSize
operator|/
name|getSize
argument_list|()
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|selected
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|ret
init|=
literal|0L
decl_stmt|;
do|do
block|{
name|int
name|index
init|=
name|selector
operator|.
name|next
argument_list|()
decl_stmt|;
name|selected
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|ret
operator|+=
name|curdir
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|<
name|targetSize
condition|)
do|;
for|for
control|(
name|Integer
name|i
range|:
name|selected
control|)
block|{
name|files
operator|.
name|add
argument_list|(
name|curdir
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
comment|/**    * A subdirectory of the current Node.    */
DECL|class|InnerDesc
specifier|static
class|class
name|InnerDesc
extends|extends
name|Node
block|{
DECL|field|size
specifier|final
name|long
name|size
decl_stmt|;
DECL|field|dist
specifier|final
name|double
index|[]
name|dist
decl_stmt|;
DECL|field|subdir
specifier|final
name|Node
index|[]
name|subdir
decl_stmt|;
DECL|field|nodeComparator
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Node
argument_list|>
name|nodeComparator
init|=
operator|new
name|Comparator
argument_list|<
name|Node
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Node
name|n1
parameter_list|,
name|Node
name|n2
parameter_list|)
block|{
return|return
name|n1
operator|.
name|getSize
argument_list|()
operator|<
name|n2
operator|.
name|getSize
argument_list|()
condition|?
operator|-
literal|1
else|:
name|n1
operator|.
name|getSize
argument_list|()
operator|>
name|n2
operator|.
name|getSize
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
block|}
decl_stmt|;
DECL|method|InnerDesc (final FileSystem fs, FileStatus thisDir, MinFileFilter filter)
name|InnerDesc
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|thisDir
parameter_list|,
name|MinFileFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|fileSum
init|=
literal|0L
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|curFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|curDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|thisDir
operator|.
name|getPath
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|curDirs
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|stat
argument_list|)
condition|)
block|{
name|curFiles
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|fileSum
operator|+=
name|stat
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
block|}
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|subdirList
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|curFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|subdirList
operator|.
name|add
argument_list|(
operator|new
name|LeafDesc
argument_list|(
name|curFiles
argument_list|,
name|fileSum
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|FileStatus
argument_list|>
name|i
init|=
name|curDirs
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|filter
operator|.
name|done
argument_list|()
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|// add subdirectories
specifier|final
name|Node
name|d
init|=
operator|new
name|InnerDesc
argument_list|(
name|fs
argument_list|,
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|filter
argument_list|)
decl_stmt|;
specifier|final
name|long
name|dSize
init|=
name|d
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|dSize
operator|>
literal|0
condition|)
block|{
name|fileSum
operator|+=
name|dSize
expr_stmt|;
name|subdirList
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
name|size
operator|=
name|fileSum
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|size
operator|+
literal|" bytes in "
operator|+
name|thisDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|subdir
operator|=
name|subdirList
operator|.
name|toArray
argument_list|(
operator|new
name|Node
index|[
name|subdirList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|subdir
argument_list|,
name|nodeComparator
argument_list|)
expr_stmt|;
name|dist
operator|=
operator|new
name|double
index|[
name|subdir
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|dist
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|fileSum
operator|-=
name|subdir
index|[
name|i
index|]
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|dist
index|[
name|i
index|]
operator|=
name|fileSum
operator|/
operator|(
literal|1.0
operator|*
name|size
operator|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSize ()
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|selectFiles (long targetSize, Collection<FileStatus> files)
specifier|public
name|long
name|selectFiles
parameter_list|(
name|long
name|targetSize
parameter_list|,
name|Collection
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|ret
init|=
literal|0L
decl_stmt|;
if|if
condition|(
name|targetSize
operator|>=
name|getSize
argument_list|()
condition|)
block|{
comment|// request larger than all subdirs; add everything
for|for
control|(
name|Node
name|n
range|:
name|subdir
control|)
block|{
name|long
name|added
init|=
name|n
operator|.
name|selectFiles
argument_list|(
name|targetSize
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|ret
operator|+=
name|added
expr_stmt|;
name|targetSize
operator|-=
name|added
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|// can satisfy request in proper subset of contents
comment|// select random set, weighted by size
specifier|final
name|HashSet
argument_list|<
name|Node
argument_list|>
name|sub
init|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
do|do
block|{
assert|assert
name|sub
operator|.
name|size
argument_list|()
operator|<
name|subdir
operator|.
name|length
assert|;
specifier|final
name|double
name|r
init|=
name|rand
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|Math
operator|.
name|abs
argument_list|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|dist
argument_list|,
name|r
argument_list|)
operator|+
literal|1
argument_list|)
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|sub
operator|.
name|contains
argument_list|(
name|subdir
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|=
operator|(
name|pos
operator|+
literal|1
operator|)
operator|%
name|subdir
operator|.
name|length
expr_stmt|;
block|}
name|long
name|added
init|=
name|subdir
index|[
name|pos
index|]
operator|.
name|selectFiles
argument_list|(
name|targetSize
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|ret
operator|+=
name|added
expr_stmt|;
name|targetSize
operator|-=
name|added
expr_stmt|;
name|sub
operator|.
name|add
argument_list|(
name|subdir
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|targetSize
operator|>
literal|0
condition|)
do|;
return|return
name|ret
return|;
block|}
block|}
comment|/**    * Filter enforcing the minFile/maxTotal parameters of the scan.    */
DECL|class|MinFileFilter
specifier|private
specifier|static
class|class
name|MinFileFilter
block|{
DECL|field|totalScan
specifier|private
name|long
name|totalScan
decl_stmt|;
DECL|field|minFileSize
specifier|private
specifier|final
name|long
name|minFileSize
decl_stmt|;
DECL|method|MinFileFilter (long minFileSize, long totalScan)
specifier|public
name|MinFileFilter
parameter_list|(
name|long
name|minFileSize
parameter_list|,
name|long
name|totalScan
parameter_list|)
block|{
name|this
operator|.
name|minFileSize
operator|=
name|minFileSize
expr_stmt|;
name|this
operator|.
name|totalScan
operator|=
name|totalScan
expr_stmt|;
block|}
DECL|method|done ()
specifier|public
name|boolean
name|done
parameter_list|()
block|{
return|return
name|totalScan
operator|<=
literal|0
return|;
block|}
DECL|method|accept (FileStatus stat)
specifier|public
name|boolean
name|accept
parameter_list|(
name|FileStatus
name|stat
parameter_list|)
block|{
specifier|final
name|boolean
name|done
init|=
name|done
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|done
operator|&&
name|stat
operator|.
name|getLen
argument_list|()
operator|>=
name|minFileSize
condition|)
block|{
name|totalScan
operator|-=
name|stat
operator|.
name|getLen
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

