begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Partitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|util
operator|.
name|MapReduceJobPropertiesParser
operator|.
name|extractMaxHeapOpts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Synthetic job generated from a trace description.  */
end_comment

begin_class
DECL|class|GridmixJob
specifier|abstract
class|class
name|GridmixJob
implements|implements
name|Callable
argument_list|<
name|Job
argument_list|>
implements|,
name|Delayed
block|{
comment|// Gridmix job name format is GRIDMIX<6 digit sequence number>
DECL|field|JOB_NAME_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|JOB_NAME_PREFIX
init|=
literal|"GRIDMIX"
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GridmixJob
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nameFormat
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Formatter
argument_list|>
name|nameFormat
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Formatter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Formatter
name|initialValue
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|JOB_NAME_PREFIX
operator|.
name|length
argument_list|()
operator|+
literal|6
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|JOB_NAME_PREFIX
argument_list|)
expr_stmt|;
return|return
operator|new
name|Formatter
argument_list|(
name|sb
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|submitted
specifier|private
name|boolean
name|submitted
decl_stmt|;
DECL|field|seq
specifier|protected
specifier|final
name|int
name|seq
decl_stmt|;
DECL|field|outdir
specifier|protected
specifier|final
name|Path
name|outdir
decl_stmt|;
DECL|field|job
specifier|protected
specifier|final
name|Job
name|job
decl_stmt|;
DECL|field|jobdesc
specifier|protected
specifier|final
name|JobStory
name|jobdesc
decl_stmt|;
DECL|field|ugi
specifier|protected
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|field|submissionTimeNanos
specifier|protected
specifier|final
name|long
name|submissionTimeNanos
decl_stmt|;
DECL|field|descCache
specifier|private
specifier|static
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|InputSplit
argument_list|>
argument_list|>
name|descCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|InputSplit
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|GRIDMIX_JOB_SEQ
specifier|protected
specifier|static
specifier|final
name|String
name|GRIDMIX_JOB_SEQ
init|=
literal|"gridmix.job.seq"
decl_stmt|;
DECL|field|GRIDMIX_USE_QUEUE_IN_TRACE
specifier|protected
specifier|static
specifier|final
name|String
name|GRIDMIX_USE_QUEUE_IN_TRACE
init|=
literal|"gridmix.job-submission.use-queue-in-trace"
decl_stmt|;
DECL|field|GRIDMIX_DEFAULT_QUEUE
specifier|protected
specifier|static
specifier|final
name|String
name|GRIDMIX_DEFAULT_QUEUE
init|=
literal|"gridmix.job-submission.default-queue"
decl_stmt|;
comment|// configuration key to enable/disable High-Ram feature emulation
DECL|field|GRIDMIX_HIGHRAM_EMULATION_ENABLE
specifier|static
specifier|final
name|String
name|GRIDMIX_HIGHRAM_EMULATION_ENABLE
init|=
literal|"gridmix.highram-emulation.enable"
decl_stmt|;
comment|// configuration key to enable/disable task jvm options
DECL|field|GRIDMIX_TASK_JVM_OPTIONS_ENABLE
specifier|static
specifier|final
name|String
name|GRIDMIX_TASK_JVM_OPTIONS_ENABLE
init|=
literal|"gridmix.task.jvm-options.enable"
decl_stmt|;
DECL|method|setJobQueue (Job job, String queue)
specifier|private
specifier|static
name|void
name|setJobQueue
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|QUEUE_NAME
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|GridmixJob (final Configuration conf, long submissionMillis, final JobStory jobdesc, Path outRoot, UserGroupInformation ugi, final int seq)
specifier|public
name|GridmixJob
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|long
name|submissionMillis
parameter_list|,
specifier|final
name|JobStory
name|jobdesc
parameter_list|,
name|Path
name|outRoot
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|int
name|seq
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
name|this
operator|.
name|jobdesc
operator|=
name|jobdesc
expr_stmt|;
name|this
operator|.
name|seq
operator|=
name|seq
expr_stmt|;
operator|(
operator|(
name|StringBuilder
operator|)
name|nameFormat
operator|.
name|get
argument_list|()
operator|.
name|out
argument_list|()
operator|)
operator|.
name|setLength
argument_list|(
name|JOB_NAME_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|job
operator|=
name|this
operator|.
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Job
argument_list|>
argument_list|()
block|{
specifier|public
name|Job
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|jobId
init|=
literal|null
operator|==
name|jobdesc
operator|.
name|getJobID
argument_list|()
condition|?
literal|"<unknown>"
else|:
name|jobdesc
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Job
name|ret
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|nameFormat
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
literal|"%06d"
argument_list|,
name|seq
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|GRIDMIX_JOB_SEQ
argument_list|,
name|seq
argument_list|)
expr_stmt|;
name|ret
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|Gridmix
operator|.
name|ORIGINAL_JOB_ID
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
name|ret
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|Gridmix
operator|.
name|ORIGINAL_JOB_NAME
argument_list|,
name|jobdesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|GRIDMIX_USE_QUEUE_IN_TRACE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|setJobQueue
argument_list|(
name|ret
argument_list|,
name|jobdesc
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setJobQueue
argument_list|(
name|ret
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|GRIDMIX_DEFAULT_QUEUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check if the job can emulate compression
if|if
condition|(
name|canEmulateCompression
argument_list|()
condition|)
block|{
comment|// set the compression related configs if compression emulation is
comment|// enabled
if|if
condition|(
name|CompressionEmulationUtil
operator|.
name|isCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|CompressionEmulationUtil
operator|.
name|configureCompressionEmulation
argument_list|(
name|jobdesc
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|ret
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// configure high ram properties if enabled
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|GRIDMIX_HIGHRAM_EMULATION_ENABLE
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|configureHighRamProperties
argument_list|(
name|jobdesc
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|ret
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// configure task jvm options if enabled
comment|// this knob can be turned off if there is a mismatch between the
comment|// target (simulation) cluster and the original cluster. Such a
comment|// mismatch can result in job failures (due to memory issues) on the
comment|// target (simulated) cluster.
comment|//
comment|// TODO If configured, scale the original task's JVM (heap related)
comment|//      options to suit the target (simulation) cluster
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|GRIDMIX_TASK_JVM_OPTIONS_ENABLE
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|configureTaskJVMOptions
argument_list|(
name|jobdesc
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|ret
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|submissionTimeNanos
operator|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|submissionMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|outdir
operator|=
operator|new
name|Path
argument_list|(
name|outRoot
argument_list|,
literal|""
operator|+
name|seq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|configureTaskJVMOptions (Configuration originalJobConf, Configuration simulatedJobConf)
specifier|protected
specifier|static
name|void
name|configureTaskJVMOptions
parameter_list|(
name|Configuration
name|originalJobConf
parameter_list|,
name|Configuration
name|simulatedJobConf
parameter_list|)
block|{
comment|// Get the heap related java opts used for the original job and set the
comment|// same for the simulated job.
comment|//    set task task heap options
name|configureTaskJVMMaxHeapOptions
argument_list|(
name|originalJobConf
argument_list|,
name|simulatedJobConf
argument_list|,
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|)
expr_stmt|;
comment|//  set map task heap options
name|configureTaskJVMMaxHeapOptions
argument_list|(
name|originalJobConf
argument_list|,
name|simulatedJobConf
argument_list|,
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|)
expr_stmt|;
comment|//  set reduce task heap options
name|configureTaskJVMMaxHeapOptions
argument_list|(
name|originalJobConf
argument_list|,
name|simulatedJobConf
argument_list|,
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
argument_list|)
expr_stmt|;
block|}
comment|// Configures the task's max heap options using the specified key
DECL|method|configureTaskJVMMaxHeapOptions (Configuration srcConf, Configuration destConf, String key)
specifier|private
specifier|static
name|void
name|configureTaskJVMMaxHeapOptions
parameter_list|(
name|Configuration
name|srcConf
parameter_list|,
name|Configuration
name|destConf
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|srcHeapOpts
init|=
name|srcConf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcHeapOpts
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|srcMaxOptsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// extract the max heap options and ignore the rest
name|extractMaxHeapOpts
argument_list|(
name|srcHeapOpts
argument_list|,
name|srcMaxOptsList
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcMaxOptsList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|destOtherOptsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// extract the other heap options and ignore the max options in the
comment|// destination configuration
name|String
name|destHeapOpts
init|=
name|destConf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|destHeapOpts
operator|!=
literal|null
condition|)
block|{
name|extractMaxHeapOpts
argument_list|(
name|destHeapOpts
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|destOtherOptsList
argument_list|)
expr_stmt|;
block|}
comment|// the source configuration might have some task level max heap opts set
comment|// remove these opts from the destination configuration and replace
comment|// with the options set in the original configuration
name|StringBuilder
name|newHeapOpts
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|otherOpt
range|:
name|destOtherOptsList
control|)
block|{
name|newHeapOpts
operator|.
name|append
argument_list|(
name|otherOpt
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|opts
range|:
name|srcMaxOptsList
control|)
block|{
name|newHeapOpts
operator|.
name|append
argument_list|(
name|opts
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
comment|// set the final heap opts
name|destConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|newHeapOpts
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Scales the desired job-level configuration parameter. This API makes sure
comment|// that the ratio of the job level configuration parameter to the cluster
comment|// level configuration parameter is maintained in the simulated run. Hence
comment|// the values are scaled from the original cluster's configuration to the
comment|// simulated cluster's configuration for higher emulation accuracy.
comment|// This kind of scaling is useful for memory parameters.
DECL|method|scaleConfigParameter (Configuration sourceConf, Configuration destConf, String clusterValueKey, String jobValueKey, long defaultValue)
specifier|private
specifier|static
name|void
name|scaleConfigParameter
parameter_list|(
name|Configuration
name|sourceConf
parameter_list|,
name|Configuration
name|destConf
parameter_list|,
name|String
name|clusterValueKey
parameter_list|,
name|String
name|jobValueKey
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
name|long
name|simulatedClusterDefaultValue
init|=
name|destConf
operator|.
name|getLong
argument_list|(
name|clusterValueKey
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
name|long
name|originalClusterDefaultValue
init|=
name|sourceConf
operator|.
name|getLong
argument_list|(
name|clusterValueKey
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
name|long
name|originalJobValue
init|=
name|sourceConf
operator|.
name|getLong
argument_list|(
name|jobValueKey
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
name|double
name|scaleFactor
init|=
operator|(
name|double
operator|)
name|originalJobValue
operator|/
name|originalClusterDefaultValue
decl_stmt|;
name|long
name|simulatedJobValue
init|=
call|(
name|long
call|)
argument_list|(
name|scaleFactor
operator|*
name|simulatedClusterDefaultValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"For the job configuration parameter '"
operator|+
name|jobValueKey
operator|+
literal|"' and the cluster configuration parameter '"
operator|+
name|clusterValueKey
operator|+
literal|"', the original job's configuration value"
operator|+
literal|" is scaled from '"
operator|+
name|originalJobValue
operator|+
literal|"' to '"
operator|+
name|simulatedJobValue
operator|+
literal|"' using the default (unit) value of "
operator|+
literal|"'"
operator|+
name|originalClusterDefaultValue
operator|+
literal|"' for the original "
operator|+
literal|" cluster and '"
operator|+
name|simulatedClusterDefaultValue
operator|+
literal|"' for the"
operator|+
literal|" simulated cluster."
argument_list|)
expr_stmt|;
block|}
name|destConf
operator|.
name|setLong
argument_list|(
name|jobValueKey
argument_list|,
name|simulatedJobValue
argument_list|)
expr_stmt|;
block|}
comment|// Checks if the scaling of original job's memory parameter value is
comment|// valid
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|checkMemoryUpperLimits (String jobKey, String limitKey, Configuration conf, boolean convertLimitToMB)
specifier|private
specifier|static
name|boolean
name|checkMemoryUpperLimits
parameter_list|(
name|String
name|jobKey
parameter_list|,
name|String
name|limitKey
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|convertLimitToMB
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|limitKey
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|long
name|limit
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|limitKey
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
comment|// scale only if the max memory limit is set.
if|if
condition|(
name|limit
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|convertLimitToMB
condition|)
block|{
name|limit
operator|/=
operator|(
literal|1024
operator|*
literal|1024
operator|)
expr_stmt|;
comment|//Converting to MB
block|}
name|long
name|scaledConfigValue
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|jobKey
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
comment|// check now
if|if
condition|(
name|scaledConfigValue
operator|>
name|limit
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Simulated job's configuration"
operator|+
literal|" parameter '"
operator|+
name|jobKey
operator|+
literal|"' got scaled to a value '"
operator|+
name|scaledConfigValue
operator|+
literal|"' which exceeds the upper limit of '"
operator|+
name|limit
operator|+
literal|"' defined for the simulated cluster by the key '"
operator|+
name|limitKey
operator|+
literal|"'. To disable High-Ram feature emulation, set '"
operator|+
name|GRIDMIX_HIGHRAM_EMULATION_ENABLE
operator|+
literal|"' to 'false'."
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// Check if the parameter scaling does not exceed the cluster limits.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|validateTaskMemoryLimits (Configuration conf, String jobKey, String clusterMaxKey)
specifier|private
specifier|static
name|void
name|validateTaskMemoryLimits
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|jobKey
parameter_list|,
name|String
name|clusterMaxKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkMemoryUpperLimits
argument_list|(
name|jobKey
argument_list|,
name|JobConf
operator|.
name|UPPER_LIMIT_ON_TASK_VMEM_PROPERTY
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|checkMemoryUpperLimits
argument_list|(
name|jobKey
argument_list|,
name|clusterMaxKey
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the high ram job properties in the simulated job's configuration.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|configureHighRamProperties (Configuration sourceConf, Configuration destConf)
specifier|static
name|void
name|configureHighRamProperties
parameter_list|(
name|Configuration
name|sourceConf
parameter_list|,
name|Configuration
name|destConf
parameter_list|)
block|{
comment|// set the memory per map task
name|scaleConfigParameter
argument_list|(
name|sourceConf
argument_list|,
name|destConf
argument_list|,
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
name|MRJobConfig
operator|.
name|MAP_MEMORY_MB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAP_MEMORY_MB
argument_list|)
expr_stmt|;
comment|// validate and fail early
name|validateTaskMemoryLimits
argument_list|(
name|destConf
argument_list|,
name|MRJobConfig
operator|.
name|MAP_MEMORY_MB
argument_list|,
name|JTConfig
operator|.
name|JT_MAX_MAPMEMORY_MB
argument_list|)
expr_stmt|;
comment|// set the memory per reduce task
name|scaleConfigParameter
argument_list|(
name|sourceConf
argument_list|,
name|destConf
argument_list|,
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
name|MRJobConfig
operator|.
name|REDUCE_MEMORY_MB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_REDUCE_MEMORY_MB
argument_list|)
expr_stmt|;
comment|// validate and fail early
name|validateTaskMemoryLimits
argument_list|(
name|destConf
argument_list|,
name|MRJobConfig
operator|.
name|REDUCE_MEMORY_MB
argument_list|,
name|JTConfig
operator|.
name|JT_MAX_REDUCEMEMORY_MB
argument_list|)
expr_stmt|;
block|}
comment|/**    * Indicates whether this {@link GridmixJob} supports compression emulation.    */
DECL|method|canEmulateCompression ()
specifier|protected
specifier|abstract
name|boolean
name|canEmulateCompression
parameter_list|()
function_decl|;
DECL|method|GridmixJob (final Configuration conf, long submissionMillis, final String name)
specifier|protected
name|GridmixJob
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|long
name|submissionMillis
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|submissionTimeNanos
operator|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|submissionMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|jobdesc
operator|=
literal|null
expr_stmt|;
name|outdir
operator|=
literal|null
expr_stmt|;
name|seq
operator|=
operator|-
literal|1
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
try|try
block|{
name|job
operator|=
name|this
operator|.
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Job
argument_list|>
argument_list|()
block|{
specifier|public
name|Job
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|Job
name|ret
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|ret
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|GRIDMIX_JOB_SEQ
argument_list|,
name|seq
argument_list|)
expr_stmt|;
name|setJobQueue
argument_list|(
name|ret
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|GRIDMIX_DEFAULT_QUEUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getUgi ()
specifier|public
name|UserGroupInformation
name|getUgi
parameter_list|()
block|{
return|return
name|ugi
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|job
operator|.
name|getJobName
argument_list|()
return|;
block|}
DECL|method|getDelay (TimeUnit unit)
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|submissionTimeNanos
operator|-
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Delayed other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|GridmixJob
condition|)
block|{
specifier|final
name|long
name|otherNanos
init|=
operator|(
operator|(
name|GridmixJob
operator|)
name|other
operator|)
operator|.
name|submissionTimeNanos
decl_stmt|;
if|if
condition|(
name|otherNanos
operator|<
name|submissionTimeNanos
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|otherNanos
operator|>
name|submissionTimeNanos
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|id
argument_list|()
operator|-
operator|(
operator|(
name|GridmixJob
operator|)
name|other
operator|)
operator|.
name|id
argument_list|()
return|;
block|}
specifier|final
name|long
name|diff
init|=
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|-
name|other
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
return|return
literal|0
operator|==
name|diff
condition|?
literal|0
else|:
operator|(
name|diff
operator|>
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// not possible unless job is cloned; all jobs should be unique
return|return
name|other
operator|instanceof
name|GridmixJob
operator|&&
name|id
argument_list|()
operator|==
operator|(
operator|(
name|GridmixJob
operator|)
name|other
operator|)
operator|.
name|id
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
argument_list|()
return|;
block|}
DECL|method|id ()
name|int
name|id
parameter_list|()
block|{
return|return
name|seq
return|;
block|}
DECL|method|getJob ()
name|Job
name|getJob
parameter_list|()
block|{
return|return
name|job
return|;
block|}
DECL|method|getJobDesc ()
name|JobStory
name|getJobDesc
parameter_list|()
block|{
return|return
name|jobdesc
return|;
block|}
DECL|method|setSubmitted ()
name|void
name|setSubmitted
parameter_list|()
block|{
name|submitted
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|isSubmitted ()
name|boolean
name|isSubmitted
parameter_list|()
block|{
return|return
name|submitted
return|;
block|}
DECL|method|pushDescription (int seq, List<InputSplit> splits)
specifier|static
name|void
name|pushDescription
parameter_list|(
name|int
name|seq
parameter_list|,
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|descCache
operator|.
name|putIfAbsent
argument_list|(
name|seq
argument_list|,
name|splits
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Description exists for id "
operator|+
name|seq
argument_list|)
throw|;
block|}
block|}
DECL|method|pullDescription (JobContext jobCtxt)
specifier|static
name|List
argument_list|<
name|InputSplit
argument_list|>
name|pullDescription
parameter_list|(
name|JobContext
name|jobCtxt
parameter_list|)
block|{
return|return
name|pullDescription
argument_list|(
name|GridmixJob
operator|.
name|getJobSeqId
argument_list|(
name|jobCtxt
argument_list|)
argument_list|)
return|;
block|}
DECL|method|pullDescription (int seq)
specifier|static
name|List
argument_list|<
name|InputSplit
argument_list|>
name|pullDescription
parameter_list|(
name|int
name|seq
parameter_list|)
block|{
return|return
name|descCache
operator|.
name|remove
argument_list|(
name|seq
argument_list|)
return|;
block|}
DECL|method|clearAll ()
specifier|static
name|void
name|clearAll
parameter_list|()
block|{
name|descCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|buildSplits (FilePool inputDir)
name|void
name|buildSplits
parameter_list|(
name|FilePool
name|inputDir
parameter_list|)
throws|throws
name|IOException
block|{    }
DECL|method|getJobSeqId (JobContext job)
specifier|static
name|int
name|getJobSeqId
parameter_list|(
name|JobContext
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|GRIDMIX_JOB_SEQ
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|class|DraftPartitioner
specifier|public
specifier|static
class|class
name|DraftPartitioner
parameter_list|<
name|V
parameter_list|>
extends|extends
name|Partitioner
argument_list|<
name|GridmixKey
argument_list|,
name|V
argument_list|>
block|{
DECL|method|getPartition (GridmixKey key, V value, int numReduceTasks)
specifier|public
name|int
name|getPartition
parameter_list|(
name|GridmixKey
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|int
name|numReduceTasks
parameter_list|)
block|{
return|return
name|key
operator|.
name|getPartition
argument_list|()
return|;
block|}
block|}
DECL|class|SpecGroupingComparator
specifier|public
specifier|static
class|class
name|SpecGroupingComparator
implements|implements
name|RawComparator
argument_list|<
name|GridmixKey
argument_list|>
block|{
DECL|field|di
specifier|private
specifier|final
name|DataInputBuffer
name|di
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
DECL|field|reset
specifier|private
specifier|final
name|byte
index|[]
name|reset
init|=
name|di
operator|.
name|getData
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|compare (GridmixKey g1, GridmixKey g2)
specifier|public
name|int
name|compare
parameter_list|(
name|GridmixKey
name|g1
parameter_list|,
name|GridmixKey
name|g2
parameter_list|)
block|{
specifier|final
name|byte
name|t1
init|=
name|g1
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|t2
init|=
name|g2
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t1
operator|==
name|GridmixKey
operator|.
name|REDUCE_SPEC
operator|||
name|t2
operator|==
name|GridmixKey
operator|.
name|REDUCE_SPEC
condition|)
block|{
return|return
name|t1
operator|-
name|t2
return|;
block|}
assert|assert
name|t1
operator|==
name|GridmixKey
operator|.
name|DATA
assert|;
assert|assert
name|t2
operator|==
name|GridmixKey
operator|.
name|DATA
assert|;
return|return
name|g1
operator|.
name|compareTo
argument_list|(
name|g2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compare (byte[] b1, int s1, int l1, byte[] b2, int s2, int l2)
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
try|try
block|{
specifier|final
name|int
name|ret
decl_stmt|;
name|di
operator|.
name|reset
argument_list|(
name|b1
argument_list|,
name|s1
argument_list|,
name|l1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|x1
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|di
argument_list|)
decl_stmt|;
name|di
operator|.
name|reset
argument_list|(
name|b2
argument_list|,
name|s2
argument_list|,
name|l2
argument_list|)
expr_stmt|;
specifier|final
name|int
name|x2
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|di
argument_list|)
decl_stmt|;
specifier|final
name|int
name|t1
init|=
name|b1
index|[
name|s1
operator|+
name|x1
index|]
decl_stmt|;
specifier|final
name|int
name|t2
init|=
name|b2
index|[
name|s2
operator|+
name|x2
index|]
decl_stmt|;
if|if
condition|(
name|t1
operator|==
name|GridmixKey
operator|.
name|REDUCE_SPEC
operator|||
name|t2
operator|==
name|GridmixKey
operator|.
name|REDUCE_SPEC
condition|)
block|{
name|ret
operator|=
name|t1
operator|-
name|t2
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|t1
operator|==
name|GridmixKey
operator|.
name|DATA
assert|;
assert|assert
name|t2
operator|==
name|GridmixKey
operator|.
name|DATA
assert|;
name|ret
operator|=
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|b1
argument_list|,
name|s1
argument_list|,
name|x1
argument_list|,
name|b2
argument_list|,
name|s2
argument_list|,
name|x2
argument_list|)
expr_stmt|;
block|}
name|di
operator|.
name|reset
argument_list|(
name|reset
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|RawBytesOutputFormat
specifier|static
class|class
name|RawBytesOutputFormat
parameter_list|<
name|K
parameter_list|>
extends|extends
name|FileOutputFormat
argument_list|<
name|K
argument_list|,
name|GridmixRecord
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getRecordWriter ( TaskAttemptContext job)
specifier|public
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|GridmixRecord
argument_list|>
name|getRecordWriter
parameter_list|(
name|TaskAttemptContext
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
name|getDefaultWorkFile
argument_list|(
name|job
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|DataOutputStream
name|fileOut
decl_stmt|;
name|fileOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|CompressionEmulationUtil
operator|.
name|getPossiblyCompressedOutputStream
argument_list|(
name|file
argument_list|,
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|GridmixRecord
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|K
name|ignored
parameter_list|,
name|GridmixRecord
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Let the Gridmix record fill itself.
name|value
operator|.
name|write
argument_list|(
name|fileOut
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|ctxt
parameter_list|)
throws|throws
name|IOException
block|{
name|fileOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

