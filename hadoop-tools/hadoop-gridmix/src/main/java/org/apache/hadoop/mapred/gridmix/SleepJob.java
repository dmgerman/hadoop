begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|RandomAlgorithms
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ReduceTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|SleepJob
specifier|public
class|class
name|SleepJob
extends|extends
name|GridmixJob
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SleepJob
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rand
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Random
argument_list|>
name|rand
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Random
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Random
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Random
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|SLEEPJOB_MAPTASK_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|SLEEPJOB_MAPTASK_ONLY
init|=
literal|"gridmix.sleep.maptask-only"
decl_stmt|;
DECL|field|mapTasksOnly
specifier|private
specifier|final
name|boolean
name|mapTasksOnly
decl_stmt|;
DECL|field|fakeLocations
specifier|private
specifier|final
name|int
name|fakeLocations
decl_stmt|;
DECL|field|hosts
specifier|private
specifier|final
name|String
index|[]
name|hosts
decl_stmt|;
DECL|field|selector
specifier|private
specifier|final
name|Selector
name|selector
decl_stmt|;
comment|/**    * Interval at which to report progress, in seconds.    */
DECL|field|GRIDMIX_SLEEP_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_SLEEP_INTERVAL
init|=
literal|"gridmix.sleep.interval"
decl_stmt|;
DECL|field|GRIDMIX_SLEEP_MAX_MAP_TIME
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_SLEEP_MAX_MAP_TIME
init|=
literal|"gridmix.sleep.max-map-time"
decl_stmt|;
DECL|field|GRIDMIX_SLEEP_MAX_REDUCE_TIME
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_SLEEP_MAX_REDUCE_TIME
init|=
literal|"gridmix.sleep.max-reduce-time"
decl_stmt|;
DECL|field|mapMaxSleepTime
DECL|field|reduceMaxSleepTime
specifier|private
specifier|final
name|long
name|mapMaxSleepTime
decl_stmt|,
name|reduceMaxSleepTime
decl_stmt|;
DECL|method|SleepJob (Configuration conf, long submissionMillis, JobStory jobdesc, Path outRoot, UserGroupInformation ugi, int seq, int numLocations, String[] hosts)
specifier|public
name|SleepJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|submissionMillis
parameter_list|,
name|JobStory
name|jobdesc
parameter_list|,
name|Path
name|outRoot
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|int
name|seq
parameter_list|,
name|int
name|numLocations
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|submissionMillis
argument_list|,
name|jobdesc
argument_list|,
name|outRoot
argument_list|,
name|ugi
argument_list|,
name|seq
argument_list|)
expr_stmt|;
name|this
operator|.
name|fakeLocations
operator|=
name|numLocations
expr_stmt|;
name|this
operator|.
name|hosts
operator|=
name|hosts
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|selector
operator|=
operator|(
name|fakeLocations
operator|>
literal|0
operator|)
condition|?
operator|new
name|Selector
argument_list|(
name|hosts
operator|.
name|length
argument_list|,
operator|(
name|float
operator|)
name|fakeLocations
operator|/
name|hosts
operator|.
name|length
argument_list|,
name|rand
operator|.
name|get
argument_list|()
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|mapTasksOnly
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SLEEPJOB_MAPTASK_ONLY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mapMaxSleepTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|GRIDMIX_SLEEP_MAX_MAP_TIME
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|reduceMaxSleepTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|GRIDMIX_SLEEP_MAX_REDUCE_TIME
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|canEmulateCompression ()
specifier|protected
name|boolean
name|canEmulateCompression
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Job
name|call
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Job
argument_list|>
argument_list|()
block|{
specifier|public
name|Job
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
block|{
name|job
operator|.
name|setMapperClass
argument_list|(
name|SleepMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|SleepReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
operator|(
name|mapTasksOnly
operator|)
condition|?
literal|0
else|:
name|jobdesc
operator|.
name|getNumberReduces
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|GridmixKey
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setSortComparatorClass
argument_list|(
name|GridmixKey
operator|.
name|Comparator
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setGroupingComparatorClass
argument_list|(
name|SpecGroupingComparator
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|SleepInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|DraftPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|SleepJob
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|Job
operator|.
name|USED_GENERIC_PARSER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
return|return
name|job
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|class|SleepMapper
specifier|public
specifier|static
class|class
name|SleepMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|,
name|GridmixKey
argument_list|,
name|NullWritable
argument_list|>
block|{
annotation|@
name|Override
DECL|method|map (LongWritable key, LongWritable value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|LongWritable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|context
operator|.
name|setStatus
argument_list|(
literal|"Sleeping... "
operator|+
name|value
operator|.
name|get
argument_list|()
operator|+
literal|" ms left"
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|<
name|key
operator|.
name|get
argument_list|()
condition|)
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|key
operator|.
name|get
argument_list|()
operator|-
name|now
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cleanup (Context context)
specifier|public
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|int
name|nReds
init|=
name|context
operator|.
name|getNumReduceTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|nReds
operator|>
literal|0
condition|)
block|{
specifier|final
name|SleepSplit
name|split
init|=
operator|(
name|SleepSplit
operator|)
name|context
operator|.
name|getInputSplit
argument_list|()
decl_stmt|;
name|int
name|id
init|=
name|split
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|int
name|nMaps
init|=
name|split
operator|.
name|getNumMaps
argument_list|()
decl_stmt|;
comment|//This is a hack to pass the sleep duration via Gridmix key
comment|//TODO: We need to come up with better solution for this.
specifier|final
name|GridmixKey
name|key
init|=
operator|new
name|GridmixKey
argument_list|(
name|GridmixKey
operator|.
name|REDUCE_SPEC
argument_list|,
literal|0
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|id
init|,
name|idx
init|=
literal|0
init|;
name|i
operator|<
name|nReds
condition|;
name|i
operator|+=
name|nMaps
control|)
block|{
name|key
operator|.
name|setPartition
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|key
operator|.
name|setReduceOutputBytes
argument_list|(
name|split
operator|.
name|getReduceDurations
argument_list|(
name|idx
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|+=
name|nReds
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|SleepReducer
specifier|public
specifier|static
class|class
name|SleepReducer
extends|extends
name|Reducer
argument_list|<
name|GridmixKey
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|field|duration
specifier|private
name|long
name|duration
init|=
literal|0L
decl_stmt|;
annotation|@
name|Override
DECL|method|setup (Context context)
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|nextKey
argument_list|()
operator|||
name|context
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|GridmixKey
operator|.
name|REDUCE_SPEC
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing reduce spec"
argument_list|)
throw|;
block|}
for|for
control|(
name|NullWritable
name|ignored
range|:
name|context
operator|.
name|getValues
argument_list|()
control|)
block|{
specifier|final
name|GridmixKey
name|spec
init|=
name|context
operator|.
name|getCurrentKey
argument_list|()
decl_stmt|;
name|duration
operator|+=
name|spec
operator|.
name|getReduceOutputBytes
argument_list|()
expr_stmt|;
block|}
name|long
name|sleepInterval
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|GRIDMIX_SLEEP_INTERVAL
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|long
name|RINTERVAL
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|sleepInterval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
comment|//This is to stop accumulating deviation from expected sleep time
comment|//over a period of time.
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|slept
init|=
literal|0L
decl_stmt|;
name|long
name|sleep
init|=
literal|0L
decl_stmt|;
while|while
condition|(
name|slept
operator|<
name|duration
condition|)
block|{
specifier|final
name|long
name|rem
init|=
name|duration
operator|-
name|slept
decl_stmt|;
name|sleep
operator|=
name|Math
operator|.
name|min
argument_list|(
name|rem
argument_list|,
name|RINTERVAL
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStatus
argument_list|(
literal|"Sleeping... "
operator|+
name|rem
operator|+
literal|" ms left"
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
name|slept
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cleanup (Context context)
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|msg
init|=
literal|"Slept for "
operator|+
name|duration
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStatus
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SleepInputFormat
specifier|public
specifier|static
class|class
name|SleepInputFormat
extends|extends
name|InputFormat
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getSplits (JobContext jobCtxt)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|jobCtxt
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|pullDescription
argument_list|(
name|jobCtxt
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createRecordReader ( InputSplit split, final TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
specifier|final
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|long
name|duration
init|=
name|split
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|long
name|sleepInterval
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|GRIDMIX_SLEEP_INTERVAL
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|long
name|RINTERVAL
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|sleepInterval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|RINTERVAL
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid "
operator|+
name|GRIDMIX_SLEEP_INTERVAL
operator|+
literal|": "
operator|+
name|RINTERVAL
argument_list|)
throw|;
block|}
return|return
operator|new
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
argument_list|()
block|{
name|long
name|start
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|slept
init|=
literal|0L
decl_stmt|;
name|long
name|sleep
init|=
literal|0L
decl_stmt|;
specifier|final
name|LongWritable
name|key
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
specifier|final
name|LongWritable
name|val
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|start
operator|==
operator|-
literal|1
condition|)
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|slept
operator|+=
name|sleep
expr_stmt|;
name|sleep
operator|=
name|Math
operator|.
name|min
argument_list|(
name|duration
operator|-
name|slept
argument_list|,
name|RINTERVAL
argument_list|)
expr_stmt|;
name|key
operator|.
name|set
argument_list|(
name|slept
operator|+
name|sleep
operator|+
name|start
argument_list|)
expr_stmt|;
name|val
operator|.
name|set
argument_list|(
name|duration
operator|-
name|slept
argument_list|)
expr_stmt|;
return|return
name|slept
operator|<
name|duration
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|slept
operator|/
operator|(
operator|(
name|float
operator|)
name|duration
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LongWritable
name|getCurrentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|LongWritable
name|getCurrentValue
parameter_list|()
block|{
return|return
name|val
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|msg
init|=
literal|"Slept for "
operator|+
name|duration
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|ctxt
parameter_list|)
block|{         }
block|}
return|;
block|}
block|}
DECL|class|SleepSplit
specifier|public
specifier|static
class|class
name|SleepSplit
extends|extends
name|InputSplit
implements|implements
name|Writable
block|{
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|field|nSpec
specifier|private
name|int
name|nSpec
decl_stmt|;
DECL|field|nMaps
specifier|private
name|int
name|nMaps
decl_stmt|;
DECL|field|sleepDuration
specifier|private
name|long
name|sleepDuration
decl_stmt|;
DECL|field|reduceDurations
specifier|private
name|long
index|[]
name|reduceDurations
init|=
operator|new
name|long
index|[
literal|0
index|]
decl_stmt|;
DECL|field|locations
specifier|private
name|String
index|[]
name|locations
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
DECL|method|SleepSplit ()
specifier|public
name|SleepSplit
parameter_list|()
block|{     }
DECL|method|SleepSplit ( int id, long sleepDuration, long[] reduceDurations, int nMaps, String[] locations)
specifier|public
name|SleepSplit
parameter_list|(
name|int
name|id
parameter_list|,
name|long
name|sleepDuration
parameter_list|,
name|long
index|[]
name|reduceDurations
parameter_list|,
name|int
name|nMaps
parameter_list|,
name|String
index|[]
name|locations
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|sleepDuration
operator|=
name|sleepDuration
expr_stmt|;
name|nSpec
operator|=
name|reduceDurations
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|reduceDurations
operator|=
name|reduceDurations
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|nMaps
operator|=
name|nMaps
expr_stmt|;
name|this
operator|.
name|locations
operator|=
name|locations
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|sleepDuration
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|nMaps
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|nSpec
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nSpec
condition|;
operator|++
name|i
control|)
block|{
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|reduceDurations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|locations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|id
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|sleepDuration
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|nMaps
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|nSpec
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|reduceDurations
operator|.
name|length
operator|<
name|nSpec
condition|)
block|{
name|reduceDurations
operator|=
operator|new
name|long
index|[
name|nSpec
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nSpec
condition|;
operator|++
name|i
control|)
block|{
name|reduceDurations
index|[
name|i
index|]
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|nLoc
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|nLoc
operator|!=
name|locations
operator|.
name|length
condition|)
block|{
name|locations
operator|=
operator|new
name|String
index|[
name|nLoc
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nLoc
condition|;
operator|++
name|i
control|)
block|{
name|locations
index|[
name|i
index|]
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|sleepDuration
return|;
block|}
DECL|method|getId ()
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getNumMaps ()
specifier|public
name|int
name|getNumMaps
parameter_list|()
block|{
return|return
name|nMaps
return|;
block|}
DECL|method|getReduceDurations (int i)
specifier|public
name|long
name|getReduceDurations
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|reduceDurations
index|[
name|i
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
name|locations
operator|.
name|clone
argument_list|()
return|;
block|}
block|}
DECL|method|getSuccessfulAttemptInfo (TaskType type, int task)
specifier|private
name|TaskAttemptInfo
name|getSuccessfulAttemptInfo
parameter_list|(
name|TaskType
name|type
parameter_list|,
name|int
name|task
parameter_list|)
block|{
name|TaskAttemptInfo
name|ret
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
literal|true
condition|;
operator|++
name|i
control|)
block|{
comment|// Rumen should make up an attempt if it's missing. Or this won't work
comment|// at all. It's hard to discern what is happening in there.
name|ret
operator|=
name|jobdesc
operator|.
name|getTaskAttemptInfo
argument_list|(
name|type
argument_list|,
name|task
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|getRunState
argument_list|()
operator|==
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|getRunState
argument_list|()
operator|!=
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No sucessful attempts tasktype "
operator|+
name|type
operator|+
literal|" task "
operator|+
name|task
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|buildSplits (FilePool inputDir)
name|void
name|buildSplits
parameter_list|(
name|FilePool
name|inputDir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|reds
init|=
operator|(
name|mapTasksOnly
operator|)
condition|?
literal|0
else|:
name|jobdesc
operator|.
name|getNumberReduces
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maps
init|=
name|jobdesc
operator|.
name|getNumberMaps
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maps
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|nSpec
init|=
name|reds
operator|/
name|maps
operator|+
operator|(
operator|(
name|reds
operator|%
name|maps
operator|)
operator|>
name|i
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
specifier|final
name|long
index|[]
name|redDurations
init|=
operator|new
name|long
index|[
name|nSpec
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nSpec
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|ReduceTaskAttemptInfo
name|info
init|=
operator|(
name|ReduceTaskAttemptInfo
operator|)
name|getSuccessfulAttemptInfo
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|i
operator|+
name|j
operator|*
name|maps
argument_list|)
decl_stmt|;
comment|// Include only merge/reduce time
name|redDurations
index|[
name|j
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|reduceMaxSleepTime
argument_list|,
name|info
operator|.
name|getMergeRuntime
argument_list|()
operator|+
name|info
operator|.
name|getReduceRuntime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SPEC(%d) %d -> %d %d/%d"
argument_list|,
name|id
argument_list|()
argument_list|,
name|i
argument_list|,
name|i
operator|+
name|j
operator|*
name|maps
argument_list|,
name|redDurations
index|[
name|j
index|]
argument_list|,
name|info
operator|.
name|getRuntime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|TaskAttemptInfo
name|info
init|=
name|getSuccessfulAttemptInfo
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|fakeLocations
argument_list|)
decl_stmt|;
if|if
condition|(
name|fakeLocations
operator|>
literal|0
condition|)
block|{
name|selector
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|fakeLocations
condition|;
operator|++
name|k
control|)
block|{
name|int
name|index
init|=
name|selector
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
break|break;
name|locations
operator|.
name|add
argument_list|(
name|hosts
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|splits
operator|.
name|add
argument_list|(
operator|new
name|SleepSplit
argument_list|(
name|i
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|info
operator|.
name|getRuntime
argument_list|()
argument_list|,
name|mapMaxSleepTime
argument_list|)
argument_list|,
name|redDurations
argument_list|,
name|maps
argument_list|,
name|locations
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|locations
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pushDescription
argument_list|(
name|id
argument_list|()
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

