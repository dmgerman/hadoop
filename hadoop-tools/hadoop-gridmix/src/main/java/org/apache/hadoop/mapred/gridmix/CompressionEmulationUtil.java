begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CodecPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|GzipCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|GenerateData
operator|.
name|DataStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|GenerateData
operator|.
name|GenDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * This is a utility class for all the compression related modules.  */
end_comment

begin_class
DECL|class|CompressionEmulationUtil
class|class
name|CompressionEmulationUtil
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompressionEmulationUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Enable compression usage in GridMix runs.    */
DECL|field|COMPRESSION_EMULATION_ENABLE
specifier|private
specifier|static
specifier|final
name|String
name|COMPRESSION_EMULATION_ENABLE
init|=
literal|"gridmix.compression-emulation.enable"
decl_stmt|;
comment|/**    * Enable input data decompression.    */
DECL|field|INPUT_DECOMPRESSION_EMULATION_ENABLE
specifier|private
specifier|static
specifier|final
name|String
name|INPUT_DECOMPRESSION_EMULATION_ENABLE
init|=
literal|"gridmix.compression-emulation.input-decompression.enable"
decl_stmt|;
comment|/**    * Configuration property for setting the compression ratio for map input     * data.    */
DECL|field|GRIDMIX_MAP_INPUT_COMPRESSION_RATIO
specifier|private
specifier|static
specifier|final
name|String
name|GRIDMIX_MAP_INPUT_COMPRESSION_RATIO
init|=
literal|"gridmix.compression-emulation.map-input.decompression-ratio"
decl_stmt|;
comment|/**    * Configuration property for setting the compression ratio of map output.    */
DECL|field|GRIDMIX_MAP_OUTPUT_COMPRESSION_RATIO
specifier|private
specifier|static
specifier|final
name|String
name|GRIDMIX_MAP_OUTPUT_COMPRESSION_RATIO
init|=
literal|"gridmix.compression-emulation.map-output.compression-ratio"
decl_stmt|;
comment|/**    * Configuration property for setting the compression ratio of job output.    */
DECL|field|GRIDMIX_JOB_OUTPUT_COMPRESSION_RATIO
specifier|private
specifier|static
specifier|final
name|String
name|GRIDMIX_JOB_OUTPUT_COMPRESSION_RATIO
init|=
literal|"gridmix.compression-emulation.job-output.compression-ratio"
decl_stmt|;
comment|/**    * Default compression ratio.    */
DECL|field|DEFAULT_COMPRESSION_RATIO
specifier|static
specifier|final
name|float
name|DEFAULT_COMPRESSION_RATIO
init|=
literal|0.5F
decl_stmt|;
DECL|field|COMPRESSION_LOOKUP_TABLE
specifier|private
specifier|static
specifier|final
name|CompressionRatioLookupTable
name|COMPRESSION_LOOKUP_TABLE
init|=
operator|new
name|CompressionRatioLookupTable
argument_list|()
decl_stmt|;
DECL|field|charsetUTF8
specifier|private
specifier|static
specifier|final
name|Charset
name|charsetUTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|/**    * This is a {@link Mapper} implementation for generating random text data.    * It uses {@link RandomTextDataGenerator} for generating text data and the    * output files are compressed.    */
DECL|class|RandomTextDataMapper
specifier|public
specifier|static
class|class
name|RandomTextDataMapper
extends|extends
name|Mapper
argument_list|<
name|NullWritable
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|rtg
specifier|private
name|RandomTextDataGenerator
name|rtg
decl_stmt|;
annotation|@
name|Override
DECL|method|setup (Context context)
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|int
name|listSize
init|=
name|RandomTextDataGenerator
operator|.
name|getRandomTextDataGeneratorListSize
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|wordSize
init|=
name|RandomTextDataGenerator
operator|.
name|getRandomTextDataGeneratorWordSize
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rtg
operator|=
operator|new
name|RandomTextDataGenerator
argument_list|(
name|listSize
argument_list|,
name|wordSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * Emits random words sequence of desired size. Note that the desired output      * size is passed as the value parameter to this map.      */
annotation|@
name|Override
DECL|method|map (NullWritable key, LongWritable value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|LongWritable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|//TODO Control the extra data written ..
comment|//TODO Should the key\tvalue\n be considered for measuring size?
comment|//     Can counters like BYTES_WRITTEN be used? What will be the value of
comment|//     such counters in LocalJobRunner?
for|for
control|(
name|long
name|bytes
init|=
name|value
operator|.
name|get
argument_list|()
init|;
name|bytes
operator|>
literal|0
condition|;
control|)
block|{
name|String
name|randomKey
init|=
name|rtg
operator|.
name|getRandomWord
argument_list|()
decl_stmt|;
name|String
name|randomValue
init|=
name|rtg
operator|.
name|getRandomWord
argument_list|()
decl_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|Text
argument_list|(
name|randomKey
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|randomValue
argument_list|)
argument_list|)
expr_stmt|;
name|bytes
operator|-=
operator|(
name|randomValue
operator|.
name|getBytes
argument_list|(
name|charsetUTF8
argument_list|)
operator|.
name|length
operator|+
name|randomKey
operator|.
name|getBytes
argument_list|(
name|charsetUTF8
argument_list|)
operator|.
name|length
operator|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Configure the {@link Job} for enabling compression emulation.    */
DECL|method|configure (final Job job)
specifier|static
name|void
name|configure
parameter_list|(
specifier|final
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
comment|// set the random text mapper
name|job
operator|.
name|setMapperClass
argument_list|(
name|RandomTextDataMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|GenDataFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|GenerateData
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// set the output compression true
name|FileOutputFormat
operator|.
name|setCompressOutput
argument_list|(
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
literal|"ignored"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while adding input path "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This is the lookup table for mapping compression ratio to the size of the     * word in the {@link RandomTextDataGenerator}'s dictionary.     *     * Note that this table is computed (empirically) using a dictionary of     * default length i.e {@value RandomTextDataGenerator#DEFAULT_LIST_SIZE}.    */
DECL|class|CompressionRatioLookupTable
specifier|private
specifier|static
class|class
name|CompressionRatioLookupTable
block|{
DECL|field|map
specifier|private
specifier|static
name|Map
argument_list|<
name|Float
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Float
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|60
argument_list|)
decl_stmt|;
DECL|field|MIN_RATIO
specifier|private
specifier|static
specifier|final
name|float
name|MIN_RATIO
init|=
literal|0.07F
decl_stmt|;
DECL|field|MAX_RATIO
specifier|private
specifier|static
specifier|final
name|float
name|MAX_RATIO
init|=
literal|0.68F
decl_stmt|;
comment|// add the empirically obtained data points in the lookup table
DECL|method|CompressionRatioLookupTable ()
name|CompressionRatioLookupTable
parameter_list|()
block|{
name|map
operator|.
name|put
argument_list|(
literal|.07F
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.08F
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.09F
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.10F
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.11F
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.12F
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.13F
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.14F
argument_list|,
literal|85
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.15F
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.16F
argument_list|,
literal|95
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.17F
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.18F
argument_list|,
literal|105
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.19F
argument_list|,
literal|110
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.20F
argument_list|,
literal|115
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.21F
argument_list|,
literal|120
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.22F
argument_list|,
literal|125
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.23F
argument_list|,
literal|130
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.24F
argument_list|,
literal|140
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.25F
argument_list|,
literal|145
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.26F
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.27F
argument_list|,
literal|155
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.28F
argument_list|,
literal|160
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.29F
argument_list|,
literal|170
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.30F
argument_list|,
literal|175
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.31F
argument_list|,
literal|180
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.32F
argument_list|,
literal|190
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.33F
argument_list|,
literal|195
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.34F
argument_list|,
literal|205
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.35F
argument_list|,
literal|215
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.36F
argument_list|,
literal|225
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.37F
argument_list|,
literal|230
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.38F
argument_list|,
literal|240
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.39F
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.40F
argument_list|,
literal|260
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.41F
argument_list|,
literal|270
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.42F
argument_list|,
literal|280
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.43F
argument_list|,
literal|295
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.44F
argument_list|,
literal|310
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.45F
argument_list|,
literal|325
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.46F
argument_list|,
literal|335
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.47F
argument_list|,
literal|355
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.48F
argument_list|,
literal|375
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.49F
argument_list|,
literal|395
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.50F
argument_list|,
literal|420
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.51F
argument_list|,
literal|440
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.52F
argument_list|,
literal|465
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.53F
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.54F
argument_list|,
literal|525
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.55F
argument_list|,
literal|550
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.56F
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.57F
argument_list|,
literal|640
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.58F
argument_list|,
literal|680
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.59F
argument_list|,
literal|734
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.60F
argument_list|,
literal|813
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.61F
argument_list|,
literal|905
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.62F
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.63F
argument_list|,
literal|1055
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.64F
argument_list|,
literal|1160
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.65F
argument_list|,
literal|1355
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.66F
argument_list|,
literal|1510
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.67F
argument_list|,
literal|1805
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|.68F
argument_list|,
literal|2170
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the size of the word in {@link RandomTextDataGenerator}'s       * dictionary that can generate text with the desired compression ratio.      *       * @throws RuntimeException If ratio is less than {@value #MIN_RATIO} or       *                          greater than {@value #MAX_RATIO}.      */
DECL|method|getWordSizeForRatio (float ratio)
name|int
name|getWordSizeForRatio
parameter_list|(
name|float
name|ratio
parameter_list|)
block|{
name|ratio
operator|=
name|standardizeCompressionRatio
argument_list|(
name|ratio
argument_list|)
expr_stmt|;
if|if
condition|(
name|ratio
operator|>=
name|MIN_RATIO
operator|&&
name|ratio
operator|<=
name|MAX_RATIO
condition|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|ratio
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Compression ratio should be in the range ["
operator|+
name|MIN_RATIO
operator|+
literal|","
operator|+
name|MAX_RATIO
operator|+
literal|"]. Configured compression ratio is "
operator|+
name|ratio
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Setup the data generator's configuration to generate compressible random     * text data with the desired compression ratio.    * Note that the compression ratio, if configured, will set the     * {@link RandomTextDataGenerator}'s list-size and word-size based on     * empirical values using the compression ratio set in the configuration.     *     * Hence to achieve the desired compression ratio,     * {@link RandomTextDataGenerator}'s list-size will be set to the default     * value i.e {@value RandomTextDataGenerator#DEFAULT_LIST_SIZE}.    */
DECL|method|setupDataGeneratorConfig (Configuration conf)
specifier|static
name|void
name|setupDataGeneratorConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|compress
init|=
name|isCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|compress
condition|)
block|{
name|float
name|ratio
init|=
name|getMapInputCompressionEmulationRatio
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"GridMix is configured to generate compressed input data with "
operator|+
literal|" a compression ratio of "
operator|+
name|ratio
argument_list|)
expr_stmt|;
name|int
name|wordSize
init|=
name|COMPRESSION_LOOKUP_TABLE
operator|.
name|getWordSizeForRatio
argument_list|(
name|ratio
argument_list|)
decl_stmt|;
name|RandomTextDataGenerator
operator|.
name|setRandomTextDataGeneratorWordSize
argument_list|(
name|conf
argument_list|,
name|wordSize
argument_list|)
expr_stmt|;
comment|// since the compression ratios are computed using the default value of
comment|// list size
name|RandomTextDataGenerator
operator|.
name|setRandomTextDataGeneratorListSize
argument_list|(
name|conf
argument_list|,
name|RandomTextDataGenerator
operator|.
name|DEFAULT_LIST_SIZE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns a {@link RandomTextDataGenerator} that generates random     * compressible text with the desired compression ratio.    */
DECL|method|getRandomTextDataGenerator (float ratio, long seed)
specifier|static
name|RandomTextDataGenerator
name|getRandomTextDataGenerator
parameter_list|(
name|float
name|ratio
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
name|int
name|wordSize
init|=
name|COMPRESSION_LOOKUP_TABLE
operator|.
name|getWordSizeForRatio
argument_list|(
name|ratio
argument_list|)
decl_stmt|;
name|RandomTextDataGenerator
name|rtg
init|=
operator|new
name|RandomTextDataGenerator
argument_list|(
name|RandomTextDataGenerator
operator|.
name|DEFAULT_LIST_SIZE
argument_list|,
name|seed
argument_list|,
name|wordSize
argument_list|)
decl_stmt|;
return|return
name|rtg
return|;
block|}
comment|/** Publishes compression related data statistics. Following statistics are    * published    *<ul>    *<li>Total compressed input data size</li>    *<li>Number of compressed input data files</li>    *<li>Compression Ratio</li>    *<li>Text data dictionary size</li>    *<li>Random text word size</li>    *</ul>    */
DECL|method|publishCompressedDataStatistics (Path inputDir, Configuration conf, long uncompressedDataSize)
specifier|static
name|DataStatistics
name|publishCompressedDataStatistics
parameter_list|(
name|Path
name|inputDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|uncompressedDataSize
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|inputDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompressionCodecFactory
name|compressionCodecs
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// iterate over compressed files and sum up the compressed file sizes
name|long
name|compressedDataSize
init|=
literal|0
decl_stmt|;
name|int
name|numCompressedFiles
init|=
literal|0
decl_stmt|;
comment|// obtain input data file statuses
name|FileStatus
index|[]
name|outFileStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|inputDir
argument_list|,
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|outFileStatuses
control|)
block|{
comment|// check if the input file is compressed
if|if
condition|(
name|compressionCodecs
operator|!=
literal|null
condition|)
block|{
name|CompressionCodec
name|codec
init|=
name|compressionCodecs
operator|.
name|getCodec
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
operator|++
name|numCompressedFiles
expr_stmt|;
name|compressedDataSize
operator|+=
name|status
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Gridmix is configured to use compressed input data."
argument_list|)
expr_stmt|;
comment|// publish the input data size
name|LOG
operator|.
name|info
argument_list|(
literal|"Total size of compressed input data : "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|compressedDataSize
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total number of compressed input data files : "
operator|+
name|numCompressedFiles
argument_list|)
expr_stmt|;
if|if
condition|(
name|numCompressedFiles
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No compressed file found in the input"
operator|+
literal|" directory : "
operator|+
name|inputDir
operator|.
name|toString
argument_list|()
operator|+
literal|". To enable compression"
operator|+
literal|" emulation, run Gridmix either with "
operator|+
literal|" an input directory containing compressed input file(s) or"
operator|+
literal|" use the -generate option to (re)generate it. If compression"
operator|+
literal|" emulation is not desired, disable it by setting '"
operator|+
name|COMPRESSION_EMULATION_ENABLE
operator|+
literal|"' to 'false'."
argument_list|)
throw|;
block|}
comment|// publish compression ratio only if its generated in this gridmix run
if|if
condition|(
name|uncompressedDataSize
operator|>
literal|0
condition|)
block|{
comment|// compute the compression ratio
name|double
name|ratio
init|=
operator|(
operator|(
name|double
operator|)
name|compressedDataSize
operator|)
operator|/
name|uncompressedDataSize
decl_stmt|;
comment|// publish the compression ratio
name|LOG
operator|.
name|info
argument_list|(
literal|"Input Data Compression Ratio : "
operator|+
name|ratio
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DataStatistics
argument_list|(
name|compressedDataSize
argument_list|,
name|numCompressedFiles
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Enables/Disables compression emulation.    * @param conf Target configuration where the parameter     * {@value #COMPRESSION_EMULATION_ENABLE} will be set.     * @param val The value to be set.    */
DECL|method|setCompressionEmulationEnabled (Configuration conf, boolean val)
specifier|static
name|void
name|setCompressionEmulationEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|val
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|COMPRESSION_EMULATION_ENABLE
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if compression emulation is enabled or not. Default is {@code true}.    */
DECL|method|isCompressionEmulationEnabled (Configuration conf)
specifier|static
name|boolean
name|isCompressionEmulationEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|COMPRESSION_EMULATION_ENABLE
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Enables/Disables input decompression emulation.    * @param conf Target configuration where the parameter     * {@value #INPUT_DECOMPRESSION_EMULATION_ENABLE} will be set.     * @param val The value to be set.    */
DECL|method|setInputCompressionEmulationEnabled (Configuration conf, boolean val)
specifier|static
name|void
name|setInputCompressionEmulationEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|val
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|INPUT_DECOMPRESSION_EMULATION_ENABLE
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if input decompression emulation is enabled or not.     * Default is {@code false}.    */
DECL|method|isInputCompressionEmulationEnabled (Configuration conf)
specifier|static
name|boolean
name|isInputCompressionEmulationEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|INPUT_DECOMPRESSION_EMULATION_ENABLE
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Set the map input data compression ratio in the given conf.    */
DECL|method|setMapInputCompressionEmulationRatio (Configuration conf, float ratio)
specifier|static
name|void
name|setMapInputCompressionEmulationRatio
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|float
name|ratio
parameter_list|)
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|GRIDMIX_MAP_INPUT_COMPRESSION_RATIO
argument_list|,
name|ratio
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the map input data compression ratio using the given configuration.    * If the compression ratio is not set in the configuration then use the     * default value i.e {@value #DEFAULT_COMPRESSION_RATIO}.    */
DECL|method|getMapInputCompressionEmulationRatio (Configuration conf)
specifier|static
name|float
name|getMapInputCompressionEmulationRatio
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getFloat
argument_list|(
name|GRIDMIX_MAP_INPUT_COMPRESSION_RATIO
argument_list|,
name|DEFAULT_COMPRESSION_RATIO
argument_list|)
return|;
block|}
comment|/**    * Set the map output data compression ratio in the given configuration.    */
DECL|method|setMapOutputCompressionEmulationRatio (Configuration conf, float ratio)
specifier|static
name|void
name|setMapOutputCompressionEmulationRatio
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|float
name|ratio
parameter_list|)
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|GRIDMIX_MAP_OUTPUT_COMPRESSION_RATIO
argument_list|,
name|ratio
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the map output data compression ratio using the given configuration.    * If the compression ratio is not set in the configuration then use the     * default value i.e {@value #DEFAULT_COMPRESSION_RATIO}.    */
DECL|method|getMapOutputCompressionEmulationRatio (Configuration conf)
specifier|static
name|float
name|getMapOutputCompressionEmulationRatio
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getFloat
argument_list|(
name|GRIDMIX_MAP_OUTPUT_COMPRESSION_RATIO
argument_list|,
name|DEFAULT_COMPRESSION_RATIO
argument_list|)
return|;
block|}
comment|/**    * Set the job output data compression ratio in the given configuration.    */
DECL|method|setJobOutputCompressionEmulationRatio (Configuration conf, float ratio)
specifier|static
name|void
name|setJobOutputCompressionEmulationRatio
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|float
name|ratio
parameter_list|)
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|GRIDMIX_JOB_OUTPUT_COMPRESSION_RATIO
argument_list|,
name|ratio
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the job output data compression ratio using the given configuration.    * If the compression ratio is not set in the configuration then use the     * default value i.e {@value #DEFAULT_COMPRESSION_RATIO}.    */
DECL|method|getJobOutputCompressionEmulationRatio (Configuration conf)
specifier|static
name|float
name|getJobOutputCompressionEmulationRatio
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getFloat
argument_list|(
name|GRIDMIX_JOB_OUTPUT_COMPRESSION_RATIO
argument_list|,
name|DEFAULT_COMPRESSION_RATIO
argument_list|)
return|;
block|}
comment|/**    * Standardize the compression ratio i.e round off the compression ratio to    * only 2 significant digits.    */
DECL|method|standardizeCompressionRatio (float ratio)
specifier|static
name|float
name|standardizeCompressionRatio
parameter_list|(
name|float
name|ratio
parameter_list|)
block|{
comment|// round off to 2 significant digits
name|int
name|significant
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|ratio
operator|*
literal|100
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|float
operator|)
name|significant
operator|)
operator|/
literal|100
return|;
block|}
comment|/**    * Returns a {@link InputStream} for a file that might be compressed.    */
DECL|method|getPossiblyDecompressedInputStream (Path file, Configuration conf, long offset)
specifier|static
name|InputStream
name|getPossiblyDecompressedInputStream
parameter_list|(
name|Path
name|file
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|)
operator|&&
name|isInputCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|CompressionCodecFactory
name|compressionCodecs
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|compressionCodecs
operator|.
name|getCodec
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
name|Decompressor
name|decompressor
init|=
name|CodecPool
operator|.
name|getDecompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
if|if
condition|(
name|decompressor
operator|!=
literal|null
condition|)
block|{
name|CompressionInputStream
name|in
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
argument_list|,
name|decompressor
argument_list|)
decl_stmt|;
comment|//TODO Seek doesnt work with compressed input stream.
comment|//     Use SplittableCompressionCodec?
return|return
operator|(
name|InputStream
operator|)
name|in
return|;
block|}
block|}
block|}
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
return|return
operator|(
name|InputStream
operator|)
name|in
return|;
block|}
comment|/**    * Returns a {@link OutputStream} for a file that might need     * compression.    */
DECL|method|getPossiblyCompressedOutputStream (Path file, Configuration conf)
specifier|static
name|OutputStream
name|getPossiblyCompressedOutputStream
parameter_list|(
name|Path
name|file
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
operator|.
name|getCompressOutput
argument_list|(
name|jConf
argument_list|)
condition|)
block|{
comment|// get the codec class
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|codecClass
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
operator|.
name|getOutputCompressorClass
argument_list|(
name|jConf
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// get the codec implementation
name|CompressionCodec
name|codec
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// add the appropriate extension
name|file
operator|=
name|file
operator|.
name|suffix
argument_list|(
name|codec
operator|.
name|getDefaultExtension
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|FSDataOutputStream
name|fileOut
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|DataOutputStream
argument_list|(
name|codec
operator|.
name|createOutputStream
argument_list|(
name|fileOut
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Extracts compression/decompression related configuration parameters from     * the source configuration to the target configuration.    */
DECL|method|configureCompressionEmulation (Configuration source, Configuration target)
specifier|static
name|void
name|configureCompressionEmulation
parameter_list|(
name|Configuration
name|source
parameter_list|,
name|Configuration
name|target
parameter_list|)
block|{
comment|// enable output compression
name|target
operator|.
name|setBoolean
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS
argument_list|,
name|source
operator|.
name|getBoolean
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the job output compression codec
name|String
name|jobOutputCompressionCodec
init|=
name|source
operator|.
name|get
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_CODEC
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobOutputCompressionCodec
operator|!=
literal|null
condition|)
block|{
name|target
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_CODEC
argument_list|,
name|jobOutputCompressionCodec
argument_list|)
expr_stmt|;
block|}
comment|// set the job output compression type
name|String
name|jobOutputCompressionType
init|=
name|source
operator|.
name|get
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobOutputCompressionType
operator|!=
literal|null
condition|)
block|{
name|target
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_TYPE
argument_list|,
name|jobOutputCompressionType
argument_list|)
expr_stmt|;
block|}
comment|// enable map output compression
name|target
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS
argument_list|,
name|source
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the map output compression codecs
name|String
name|mapOutputCompressionCodec
init|=
name|source
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS_CODEC
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapOutputCompressionCodec
operator|!=
literal|null
condition|)
block|{
name|target
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS_CODEC
argument_list|,
name|mapOutputCompressionCodec
argument_list|)
expr_stmt|;
block|}
comment|// enable input decompression
comment|//TODO replace with mapInputBytes and hdfsBytesRead
name|Path
index|[]
name|inputs
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
operator|new
name|JobConf
argument_list|(
name|source
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|needsCompressedInput
init|=
literal|false
decl_stmt|;
name|CompressionCodecFactory
name|compressionCodecs
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|source
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|input
range|:
name|inputs
control|)
block|{
name|CompressionCodec
name|codec
init|=
name|compressionCodecs
operator|.
name|getCodec
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
name|needsCompressedInput
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|setInputCompressionEmulationEnabled
argument_list|(
name|target
argument_list|,
name|needsCompressedInput
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the uncompressed input bytes count from the given possibly compressed    * input bytes count.    * @param possiblyCompressedInputBytes input bytes count. This is compressed    *        input size if compression emulation is on.    * @param conf configuration of the Gridmix simulated job    * @return uncompressed input bytes count. Compute this in case if compressed    *         input was used    */
DECL|method|getUncompressedInputBytes (long possiblyCompressedInputBytes, Configuration conf)
specifier|static
name|long
name|getUncompressedInputBytes
parameter_list|(
name|long
name|possiblyCompressedInputBytes
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|uncompressedInputBytes
init|=
name|possiblyCompressedInputBytes
decl_stmt|;
if|if
condition|(
name|CompressionEmulationUtil
operator|.
name|isInputCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|float
name|inputCompressionRatio
init|=
name|CompressionEmulationUtil
operator|.
name|getMapInputCompressionEmulationRatio
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|uncompressedInputBytes
operator|/=
name|inputCompressionRatio
expr_stmt|;
block|}
return|return
name|uncompressedInputBytes
return|;
block|}
block|}
end_class

end_unit

