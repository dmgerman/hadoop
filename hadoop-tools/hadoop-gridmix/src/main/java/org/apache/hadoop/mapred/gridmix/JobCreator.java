begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|enum|JobCreator
specifier|public
enum|enum
name|JobCreator
block|{
DECL|enumConstant|LOADJOB
name|LOADJOB
block|{
annotation|@
name|Override
specifier|public
name|GridmixJob
name|createGridmixJob
parameter_list|(
name|Configuration
name|gridmixConf
parameter_list|,
name|long
name|submissionMillis
parameter_list|,
name|JobStory
name|jobdesc
parameter_list|,
name|Path
name|outRoot
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|int
name|seq
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Build configuration for this simulated job
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|gridmixConf
argument_list|)
decl_stmt|;
name|dce
operator|.
name|configureDistCacheFiles
argument_list|(
name|conf
argument_list|,
name|jobdesc
operator|.
name|getJobConf
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|LoadJob
argument_list|(
name|conf
argument_list|,
name|submissionMillis
argument_list|,
name|jobdesc
argument_list|,
name|outRoot
argument_list|,
name|ugi
argument_list|,
name|seq
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canEmulateDistCacheLoad
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|,
DECL|enumConstant|SLEEPJOB
name|SLEEPJOB
block|{
specifier|private
name|String
index|[]
name|hosts
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GridmixJob
name|createGridmixJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|submissionMillis
parameter_list|,
name|JobStory
name|jobdesc
parameter_list|,
name|Path
name|outRoot
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|int
name|seq
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numLocations
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SLEEPJOB_RANDOM_LOCATIONS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|numLocations
operator|<
literal|0
condition|)
name|numLocations
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|hosts
operator|==
literal|null
condition|)
block|{
specifier|final
name|JobClient
name|client
init|=
operator|new
name|JobClient
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterStatus
name|stat
init|=
name|client
operator|.
name|getClusterStatus
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nTrackers
init|=
name|stat
operator|.
name|getTaskTrackers
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|hostList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|nTrackers
argument_list|)
decl_stmt|;
specifier|final
name|Pattern
name|trackerPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"tracker_([^:]*):.*"
argument_list|)
decl_stmt|;
specifier|final
name|Matcher
name|m
init|=
name|trackerPattern
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tracker
range|:
name|stat
operator|.
name|getActiveTrackerNames
argument_list|()
control|)
block|{
name|m
operator|.
name|reset
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
continue|continue;
block|}
specifier|final
name|String
name|name
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|hostList
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|hosts
operator|=
name|hostList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|hostList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SleepJob
argument_list|(
name|conf
argument_list|,
name|submissionMillis
argument_list|,
name|jobdesc
argument_list|,
name|outRoot
argument_list|,
name|ugi
argument_list|,
name|seq
argument_list|,
name|numLocations
argument_list|,
name|hosts
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canEmulateDistCacheLoad
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|;
DECL|field|GRIDMIX_JOB_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_JOB_TYPE
init|=
literal|"gridmix.job.type"
decl_stmt|;
DECL|field|SLEEPJOB_RANDOM_LOCATIONS
specifier|public
specifier|static
specifier|final
name|String
name|SLEEPJOB_RANDOM_LOCATIONS
init|=
literal|"gridmix.sleep.fake-locations"
decl_stmt|;
comment|/**    * Create Gridmix simulated job.    * @param conf configuration of simulated job    * @param submissionMillis At what time submission of this simulated job be    *                         done    * @param jobdesc JobStory obtained from trace    * @param outRoot gridmix output directory    * @param ugi UGI of job submitter of this simulated job    * @param seq job sequence number    * @return the created simulated job    * @throws IOException    */
DECL|method|createGridmixJob ( final Configuration conf, long submissionMillis, final JobStory jobdesc, Path outRoot, UserGroupInformation ugi, final int seq)
specifier|public
specifier|abstract
name|GridmixJob
name|createGridmixJob
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|long
name|submissionMillis
parameter_list|,
specifier|final
name|JobStory
name|jobdesc
parameter_list|,
name|Path
name|outRoot
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|int
name|seq
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getPolicy ( Configuration conf, JobCreator defaultPolicy)
specifier|public
specifier|static
name|JobCreator
name|getPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|JobCreator
name|defaultPolicy
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getEnum
argument_list|(
name|GRIDMIX_JOB_TYPE
argument_list|,
name|defaultPolicy
argument_list|)
return|;
block|}
comment|/**    * @return true if gridmix simulated jobs of this job type can emulate    *         distributed cache load    */
DECL|method|canEmulateDistCacheLoad ()
specifier|abstract
name|boolean
name|canEmulateDistCacheLoad
parameter_list|()
function_decl|;
DECL|field|dce
name|DistributedCacheEmulator
name|dce
decl_stmt|;
comment|/**    * This method is to be called before calling any other method in JobCreator    * except canEmulateDistCacheLoad(), especially if canEmulateDistCacheLoad()    * returns true for that job type.    * @param e Distributed Cache Emulator    */
DECL|method|setDistCacheEmulator (DistributedCacheEmulator e)
name|void
name|setDistCacheEmulator
parameter_list|(
name|DistributedCacheEmulator
name|e
parameter_list|)
block|{
name|this
operator|.
name|dce
operator|=
name|e
expr_stmt|;
block|}
block|}
end_enum

end_unit

