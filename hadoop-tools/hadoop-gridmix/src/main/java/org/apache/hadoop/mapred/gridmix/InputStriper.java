begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|CombineFileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Given a {@link #FilePool}, obtain a set of files capable of satisfying  * a full set of splits, then iterate over each source to fill the request.  */
end_comment

begin_class
DECL|class|InputStriper
class|class
name|InputStriper
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|InputStriper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|idx
name|int
name|idx
decl_stmt|;
DECL|field|currentStart
name|long
name|currentStart
decl_stmt|;
DECL|field|current
name|FileStatus
name|current
decl_stmt|;
DECL|field|files
specifier|final
name|List
argument_list|<
name|FileStatus
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|/**    * @param inputDir Pool from which files are requested.    * @param mapBytes Sum of all expected split requests.    */
DECL|method|InputStriper (FilePool inputDir, long mapBytes)
name|InputStriper
parameter_list|(
name|FilePool
name|inputDir
parameter_list|,
name|long
name|mapBytes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|inputBytes
init|=
name|inputDir
operator|.
name|getInputFiles
argument_list|(
name|mapBytes
argument_list|,
name|files
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapBytes
operator|>
name|inputBytes
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using "
operator|+
name|inputBytes
operator|+
literal|"/"
operator|+
name|mapBytes
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
operator|&&
name|mapBytes
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to satisfy request for "
operator|+
name|mapBytes
argument_list|)
throw|;
block|}
name|current
operator|=
name|files
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param inputDir Pool used to resolve block locations.    * @param bytes Target byte count    * @param nLocs Number of block locations per split.    * @return A set of files satisfying the byte count, with locations weighted    *         to the dominating proportion of input bytes.    */
DECL|method|splitFor (FilePool inputDir, long bytes, int nLocs)
name|CombineFileSplit
name|splitFor
parameter_list|(
name|FilePool
name|inputDir
parameter_list|,
name|long
name|bytes
parameter_list|,
name|int
name|nLocs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|start
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|length
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|sb
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
do|do
block|{
name|paths
operator|.
name|add
argument_list|(
name|current
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|start
operator|.
name|add
argument_list|(
name|currentStart
argument_list|)
expr_stmt|;
specifier|final
name|long
name|fromFile
init|=
name|Math
operator|.
name|min
argument_list|(
name|bytes
argument_list|,
name|current
operator|.
name|getLen
argument_list|()
operator|-
name|currentStart
argument_list|)
decl_stmt|;
name|length
operator|.
name|add
argument_list|(
name|fromFile
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockLocation
name|loc
range|:
name|inputDir
operator|.
name|locationsFor
argument_list|(
name|current
argument_list|,
name|currentStart
argument_list|,
name|fromFile
argument_list|)
control|)
block|{
specifier|final
name|double
name|tedium
init|=
name|loc
operator|.
name|getLength
argument_list|()
operator|/
operator|(
literal|1.0
operator|*
name|bytes
operator|)
decl_stmt|;
for|for
control|(
name|String
name|l
range|:
name|loc
operator|.
name|getHosts
argument_list|()
control|)
block|{
name|Double
name|j
init|=
name|sb
operator|.
name|get
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|j
condition|)
block|{
name|sb
operator|.
name|put
argument_list|(
name|l
argument_list|,
name|tedium
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|put
argument_list|(
name|l
argument_list|,
name|j
operator|.
name|doubleValue
argument_list|()
operator|+
name|tedium
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|currentStart
operator|+=
name|fromFile
expr_stmt|;
name|bytes
operator|-=
name|fromFile
expr_stmt|;
comment|// Switch to a new file if
comment|//  - the current file is uncompressed and completely used
comment|//  - the current file is compressed
name|CompressionCodecFactory
name|compressionCodecs
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|compressionCodecs
operator|.
name|getCodec
argument_list|(
name|current
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getLen
argument_list|()
operator|-
name|currentStart
operator|==
literal|0
operator|||
name|codec
operator|!=
literal|null
condition|)
block|{
name|current
operator|=
name|files
operator|.
name|get
argument_list|(
operator|++
name|idx
operator|%
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|currentStart
operator|=
literal|0
expr_stmt|;
block|}
block|}
do|while
condition|(
name|bytes
operator|>
literal|0
condition|)
do|;
specifier|final
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|sort
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|(
name|sb
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sort
argument_list|,
name|hostRank
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[
name|Math
operator|.
name|min
argument_list|(
name|nLocs
argument_list|,
name|sort
operator|.
name|size
argument_list|()
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nLocs
operator|&&
name|i
operator|<
name|sort
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|hosts
index|[
name|i
index|]
operator|=
name|sort
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|CombineFileSplit
argument_list|(
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|toLongArray
argument_list|(
name|start
argument_list|)
argument_list|,
name|toLongArray
argument_list|(
name|length
argument_list|)
argument_list|,
name|hosts
argument_list|)
return|;
block|}
DECL|method|toLongArray (final ArrayList<Long> sigh)
specifier|private
name|long
index|[]
name|toLongArray
parameter_list|(
specifier|final
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|sigh
parameter_list|)
block|{
specifier|final
name|long
index|[]
name|ret
init|=
operator|new
name|long
index|[
name|sigh
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ret
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|sigh
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|field|hostRank
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|hostRank
init|=
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|a
parameter_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|b
parameter_list|)
block|{
return|return
name|Double
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getValue
argument_list|()
argument_list|,
name|b
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

