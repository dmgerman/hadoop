begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedByInterruptException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|Statistics
operator|.
name|JobStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_comment
comment|/**  * Component accepting submitted, running {@link Statistics.JobStats} and   * responsible for monitoring jobs for success and failure. Once a job is   * submitted, it is polled for status until complete. If a job is complete,   * then the monitor thread returns immediately to the queue. If not, the monitor  * will sleep for some duration.  *   * {@link JobMonitor} can be configured to use multiple threads for polling  * the job statuses. Use {@link Gridmix#GRIDMIX_JOBMONITOR_THREADS} to specify  * the total number of monitoring threads.   *   * The duration for which a monitoring thread sleeps if the first job in the   * queue is running can also be configured. Use   * {@link Gridmix#GRIDMIX_JOBMONITOR_SLEEPTIME_MILLIS} to specify a custom   * value.  */
end_comment

begin_class
DECL|class|JobMonitor
class|class
name|JobMonitor
implements|implements
name|Gridmix
operator|.
name|Component
argument_list|<
name|JobStats
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JobMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mJobs
specifier|private
specifier|final
name|Queue
argument_list|<
name|JobStats
argument_list|>
name|mJobs
decl_stmt|;
DECL|field|executor
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
DECL|field|numPollingThreads
specifier|private
name|int
name|numPollingThreads
decl_stmt|;
DECL|field|runningJobs
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|JobStats
argument_list|>
name|runningJobs
decl_stmt|;
DECL|field|pollDelayMillis
specifier|private
specifier|final
name|long
name|pollDelayMillis
decl_stmt|;
DECL|field|statistics
specifier|private
name|Statistics
name|statistics
decl_stmt|;
DECL|field|graceful
specifier|private
name|boolean
name|graceful
init|=
literal|false
decl_stmt|;
DECL|field|shutdown
specifier|private
name|boolean
name|shutdown
init|=
literal|false
decl_stmt|;
comment|/**    * Create a JobMonitor that sleeps for the specified duration after    * polling a still-running job.    * @param pollDelay Delay after polling a running job    * @param unit Time unit for pollDelaySec (rounded to milliseconds)    * @param statistics StatCollector , listener to job completion.    */
DECL|method|JobMonitor (int pollDelay, TimeUnit unit, Statistics statistics, int numPollingThreads)
specifier|public
name|JobMonitor
parameter_list|(
name|int
name|pollDelay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|Statistics
name|statistics
parameter_list|,
name|int
name|numPollingThreads
parameter_list|)
block|{
name|executor
operator|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
expr_stmt|;
name|this
operator|.
name|numPollingThreads
operator|=
name|numPollingThreads
expr_stmt|;
name|runningJobs
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|JobStats
argument_list|>
argument_list|()
expr_stmt|;
name|mJobs
operator|=
operator|new
name|LinkedList
argument_list|<
name|JobStats
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|pollDelayMillis
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|pollDelay
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|this
operator|.
name|statistics
operator|=
name|statistics
expr_stmt|;
block|}
comment|/**    * Add a running job's status to the polling queue.    */
DECL|method|add (JobStats job)
specifier|public
name|void
name|add
parameter_list|(
name|JobStats
name|job
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|runningJobs
operator|.
name|put
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a submission failed job's status, such that it can be communicated    * back to serial.    * TODO: Cleaner solution for this problem    * @param job    */
DECL|method|submissionFailed (JobStats job)
specifier|public
name|void
name|submissionFailed
parameter_list|(
name|JobStats
name|job
parameter_list|)
block|{
name|String
name|jobID
init|=
name|job
operator|.
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|Gridmix
operator|.
name|ORIGINAL_JOB_ID
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Job submission failed notification for job "
operator|+
name|jobID
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|statistics
init|)
block|{
name|this
operator|.
name|statistics
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Temporary hook for recording job success.    */
DECL|method|onSuccess (Job job)
specifier|protected
name|void
name|onSuccess
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|job
operator|.
name|getJobName
argument_list|()
operator|+
literal|" ("
operator|+
name|job
operator|.
name|getJobID
argument_list|()
operator|+
literal|")"
operator|+
literal|" success"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Temporary hook for recording job failure.    */
DECL|method|onFailure (Job job)
specifier|protected
name|void
name|onFailure
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|job
operator|.
name|getJobName
argument_list|()
operator|+
literal|" ("
operator|+
name|job
operator|.
name|getJobID
argument_list|()
operator|+
literal|")"
operator|+
literal|" failure"
argument_list|)
expr_stmt|;
block|}
comment|/**    * If shutdown before all jobs have completed, any still-running jobs    * may be extracted from the component.    * @throws IllegalStateException If monitoring thread is still running.    * @return Any jobs submitted and not known to have completed.    */
DECL|method|getRemainingJobs ()
name|List
argument_list|<
name|JobStats
argument_list|>
name|getRemainingJobs
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mJobs
init|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|JobStats
argument_list|>
argument_list|(
name|mJobs
argument_list|)
return|;
block|}
block|}
comment|/**    * Monitoring thread pulling running jobs from the component and into    * a queue to be polled for status.    */
DECL|class|MonitorThread
specifier|private
class|class
name|MonitorThread
extends|extends
name|Thread
block|{
DECL|method|MonitorThread (int i)
specifier|public
name|MonitorThread
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
literal|"GridmixJobMonitor-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|graceful
decl_stmt|;
name|boolean
name|shutdown
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|mJobs
init|)
block|{
name|graceful
operator|=
name|JobMonitor
operator|.
name|this
operator|.
name|graceful
expr_stmt|;
name|shutdown
operator|=
name|JobMonitor
operator|.
name|this
operator|.
name|shutdown
expr_stmt|;
name|runningJobs
operator|.
name|drainTo
argument_list|(
name|mJobs
argument_list|)
expr_stmt|;
block|}
comment|// shutdown conditions; either shutdown requested and all jobs
comment|// have completed or abort requested and there are recently
comment|// submitted jobs not in the monitored set
if|if
condition|(
name|shutdown
condition|)
block|{
if|if
condition|(
operator|!
name|graceful
condition|)
block|{
while|while
condition|(
operator|!
name|runningJobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|mJobs
init|)
block|{
name|runningJobs
operator|.
name|drainTo
argument_list|(
name|mJobs
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
synchronized|synchronized
init|(
name|mJobs
init|)
block|{
if|if
condition|(
name|graceful
operator|&&
name|mJobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
name|JobStats
name|jobStats
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|mJobs
init|)
block|{
name|jobStats
operator|=
name|mJobs
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|jobStats
operator|!=
literal|null
condition|)
block|{
name|Job
name|job
init|=
name|jobStats
operator|.
name|getJob
argument_list|()
decl_stmt|;
try|try
block|{
comment|// get the job status
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|JobStatus
name|status
init|=
name|job
operator|.
name|getStatus
argument_list|()
decl_stmt|;
comment|// cache the job status
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Status polling for job "
operator|+
name|job
operator|.
name|getJobID
argument_list|()
operator|+
literal|" took "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
comment|// update the job progress
name|jobStats
operator|.
name|updateJobStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// if the job is complete, let others know
if|if
condition|(
name|status
operator|.
name|isJobComplete
argument_list|()
condition|)
block|{
if|if
condition|(
name|status
operator|.
name|getState
argument_list|()
operator|==
name|JobStatus
operator|.
name|State
operator|.
name|SUCCEEDED
condition|)
block|{
name|onSuccess
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onFailure
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|statistics
init|)
block|{
name|statistics
operator|.
name|add
argument_list|(
name|jobStats
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// add the running job back and break
synchronized|synchronized
init|(
name|mJobs
init|)
block|{
if|if
condition|(
operator|!
name|mJobs
operator|.
name|offer
argument_list|(
name|jobStats
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Lost job "
operator|+
operator|(
literal|null
operator|==
name|job
operator|.
name|getJobName
argument_list|()
condition|?
literal|"<unknown>"
else|:
name|job
operator|.
name|getJobName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
comment|// should never
comment|// happen
block|}
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ClosedByInterruptException
condition|)
block|{
comment|// Job doesn't throw InterruptedException, but RPC socket layer
comment|// is blocking and may throw a wrapped Exception if this thread
comment|// is interrupted. Since the lower level cleared the flag,
comment|// reset it here
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Lost job "
operator|+
operator|(
literal|null
operator|==
name|job
operator|.
name|getJobName
argument_list|()
condition|?
literal|"<unknown>"
else|:
name|job
operator|.
name|getJobName
argument_list|()
operator|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|statistics
init|)
block|{
name|statistics
operator|.
name|add
argument_list|(
name|jobStats
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// get the next job
synchronized|synchronized
init|(
name|mJobs
init|)
block|{
name|jobStats
operator|=
name|mJobs
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
comment|// sleep for a while before checking again
try|try
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|pollDelayMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Start the internal, monitoring thread.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPollingThreads
condition|;
operator|++
name|i
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|MonitorThread
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait for the monitor to halt, assuming shutdown or abort have been    * called. Note that, since submission may be sporatic, this will hang    * if no form of shutdown has been requested.    */
DECL|method|join (long millis)
specifier|public
name|void
name|join
parameter_list|(
name|long
name|millis
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|executor
operator|.
name|awaitTermination
argument_list|(
name|millis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drain all submitted jobs to a queue and stop the monitoring thread.    * Upstream submitter is assumed dead.    */
DECL|method|abort ()
specifier|public
name|void
name|abort
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mJobs
init|)
block|{
name|graceful
operator|=
literal|false
expr_stmt|;
name|shutdown
operator|=
literal|true
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * When all monitored jobs have completed, stop the monitoring thread.    * Upstream submitter is assumed dead.    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mJobs
init|)
block|{
name|graceful
operator|=
literal|true
expr_stmt|;
name|shutdown
operator|=
literal|true
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

