begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|GenerateData
operator|.
name|DataStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|Statistics
operator|.
name|JobStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStoryProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ZombieJobProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Driver class for the Gridmix3 benchmark. Gridmix accepts a timestamped  * stream (trace) of job/task descriptions. For each job in the trace, the  * client will submit a corresponding, synthetic job to the target cluster at  * the rate in the original trace. The intent is to provide a benchmark that  * can be configured and extended to closely match the measured resource  * profile of actual, production loads.  */
end_comment

begin_class
DECL|class|Gridmix
specifier|public
class|class
name|Gridmix
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Gridmix
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Output (scratch) directory for submitted jobs. Relative paths are    * resolved against the path provided as input and absolute paths remain    * independent of it. The default is&quot;gridmix&quot;.    */
DECL|field|GRIDMIX_OUT_DIR
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_OUT_DIR
init|=
literal|"gridmix.output.directory"
decl_stmt|;
comment|/**    * Number of submitting threads at the client and upper bound for    * in-memory split data. Submitting threads precompute InputSplits for    * submitted jobs. This limits the number of splits held in memory waiting    * for submission and also permits parallel computation of split data.    */
DECL|field|GRIDMIX_SUB_THR
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_SUB_THR
init|=
literal|"gridmix.client.submit.threads"
decl_stmt|;
comment|/**    * The depth of the queue of job descriptions. Before splits are computed,    * a queue of pending descriptions is stored in memoory. This parameter    * limits the depth of that queue.    */
DECL|field|GRIDMIX_QUE_DEP
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_QUE_DEP
init|=
literal|"gridmix.client.pending.queue.depth"
decl_stmt|;
comment|/**    * Multiplier to accelerate or decelerate job submission. As a crude means of    * sizing a job trace to a cluster, the time separating two jobs is    * multiplied by this factor.    */
DECL|field|GRIDMIX_SUB_MUL
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_SUB_MUL
init|=
literal|"gridmix.submit.multiplier"
decl_stmt|;
comment|/**    * Class used to resolve users in the trace to the list of target users    * on the cluster.    */
DECL|field|GRIDMIX_USR_RSV
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_USR_RSV
init|=
literal|"gridmix.user.resolve.class"
decl_stmt|;
comment|/**    * The configuration key which determines the duration for which the     * job-monitor sleeps while polling for job status.    * This value should be specified in milliseconds.    */
DECL|field|GRIDMIX_JOBMONITOR_SLEEPTIME_MILLIS
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_JOBMONITOR_SLEEPTIME_MILLIS
init|=
literal|"gridmix.job-monitor.sleep-time-ms"
decl_stmt|;
comment|/**    * Default value for {@link #GRIDMIX_JOBMONITOR_SLEEPTIME_MILLIS}.    */
DECL|field|GRIDMIX_JOBMONITOR_SLEEPTIME_MILLIS_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|GRIDMIX_JOBMONITOR_SLEEPTIME_MILLIS_DEFAULT
init|=
literal|500
decl_stmt|;
comment|/**    * The configuration key which determines the total number of job-status    * monitoring threads.    */
DECL|field|GRIDMIX_JOBMONITOR_THREADS
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_JOBMONITOR_THREADS
init|=
literal|"gridmix.job-monitor.thread-count"
decl_stmt|;
comment|/**    * Default value for {@link #GRIDMIX_JOBMONITOR_THREADS}.    */
DECL|field|GRIDMIX_JOBMONITOR_THREADS_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|GRIDMIX_JOBMONITOR_THREADS_DEFAULT
init|=
literal|1
decl_stmt|;
comment|/**    * Configuration property set in simulated job's configuration whose value is    * set to the corresponding original job's name. This is not configurable by    * gridmix user.    */
DECL|field|ORIGINAL_JOB_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ORIGINAL_JOB_NAME
init|=
literal|"gridmix.job.original-job-name"
decl_stmt|;
comment|/**    * Configuration property set in simulated job's configuration whose value is    * set to the corresponding original job's id. This is not configurable by    * gridmix user.    */
DECL|field|ORIGINAL_JOB_ID
specifier|public
specifier|static
specifier|final
name|String
name|ORIGINAL_JOB_ID
init|=
literal|"gridmix.job.original-job-id"
decl_stmt|;
DECL|field|distCacheEmulator
specifier|private
name|DistributedCacheEmulator
name|distCacheEmulator
decl_stmt|;
comment|// Submit data structures
DECL|field|factory
specifier|private
name|JobFactory
name|factory
decl_stmt|;
DECL|field|submitter
specifier|private
name|JobSubmitter
name|submitter
decl_stmt|;
DECL|field|monitor
specifier|private
name|JobMonitor
name|monitor
decl_stmt|;
DECL|field|statistics
specifier|private
name|Statistics
name|statistics
decl_stmt|;
DECL|field|summarizer
specifier|private
name|Summarizer
name|summarizer
decl_stmt|;
comment|// Shutdown hook
DECL|field|sdh
specifier|private
specifier|final
name|Shutdown
name|sdh
init|=
operator|new
name|Shutdown
argument_list|()
decl_stmt|;
comment|/** Error while parsing/analyzing the arguments to Gridmix */
DECL|field|ARGS_ERROR
specifier|static
specifier|final
name|int
name|ARGS_ERROR
init|=
literal|1
decl_stmt|;
comment|/** Error while trying to start/setup the Gridmix run */
DECL|field|STARTUP_FAILED_ERROR
specifier|static
specifier|final
name|int
name|STARTUP_FAILED_ERROR
init|=
literal|2
decl_stmt|;
comment|/**    * If at least 1 distributed cache file is missing in the expected    * distributed cache dir, Gridmix cannot proceed with emulation of    * distributed cache load.    */
DECL|field|MISSING_DIST_CACHE_FILES_ERROR
specifier|static
specifier|final
name|int
name|MISSING_DIST_CACHE_FILES_ERROR
init|=
literal|3
decl_stmt|;
DECL|method|Gridmix (String[] args)
name|Gridmix
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|summarizer
operator|=
operator|new
name|Summarizer
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|Gridmix ()
specifier|public
name|Gridmix
parameter_list|()
block|{
name|summarizer
operator|=
operator|new
name|Summarizer
argument_list|()
expr_stmt|;
block|}
comment|// Get the input data directory for Gridmix. Input directory is
comment|//<io-path>/input
DECL|method|getGridmixInputDataPath (Path ioPath)
specifier|static
name|Path
name|getGridmixInputDataPath
parameter_list|(
name|Path
name|ioPath
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|ioPath
argument_list|,
literal|"input"
argument_list|)
return|;
block|}
comment|/**    * Write random bytes at the path&lt;inputDir&gt; if needed.    * @see org.apache.hadoop.mapred.gridmix.GenerateData    * @return exit status    */
DECL|method|writeInputData (long genbytes, Path inputDir)
specifier|protected
name|int
name|writeInputData
parameter_list|(
name|long
name|genbytes
parameter_list|,
name|Path
name|inputDir
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|genbytes
operator|>
literal|0
condition|)
block|{
specifier|final
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|inputDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Gridmix input data directory "
operator|+
name|inputDir
operator|+
literal|" already exists when -generate option is used.\n"
argument_list|)
expr_stmt|;
return|return
name|STARTUP_FAILED_ERROR
return|;
block|}
comment|// configure the compression ratio if needed
name|CompressionEmulationUtil
operator|.
name|setupDataGeneratorConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|GenerateData
name|genData
init|=
operator|new
name|GenerateData
argument_list|(
name|conf
argument_list|,
name|inputDir
argument_list|,
name|genbytes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generating "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|genbytes
argument_list|)
operator|+
literal|" of test data..."
argument_list|)
expr_stmt|;
name|launchGridmixJob
argument_list|(
name|genData
argument_list|)
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Changing the permissions for inputPath "
operator|+
name|inputDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-chmod"
block|,
literal|"-R"
block|,
literal|"777"
block|,
name|inputDir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldnt change the file permissions "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Input data generation successful."
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Write random bytes in the distributed cache files that will be used by all    * simulated jobs of current gridmix run, if files are to be generated.    * Do this as part of the MapReduce job {@link GenerateDistCacheData#JOB_NAME}    * @see org.apache.hadoop.mapred.gridmix.GenerateDistCacheData    */
DECL|method|writeDistCacheData (Configuration conf)
specifier|protected
name|void
name|writeDistCacheData
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|fileCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|GenerateDistCacheData
operator|.
name|GRIDMIX_DISTCACHE_FILE_COUNT
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileCount
operator|>
literal|0
condition|)
block|{
comment|// generate distributed cache files
specifier|final
name|GridmixJob
name|genDistCacheData
init|=
operator|new
name|GenerateDistCacheData
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generating distributed cache data of size "
operator|+
name|conf
operator|.
name|getLong
argument_list|(
name|GenerateDistCacheData
operator|.
name|GRIDMIX_DISTCACHE_BYTE_COUNT
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|launchGridmixJob
argument_list|(
name|genDistCacheData
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Launch Input/DistCache Data Generation job and wait for completion
DECL|method|launchGridmixJob (GridmixJob job)
name|void
name|launchGridmixJob
parameter_list|(
name|GridmixJob
name|job
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|submitter
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// TODO add listeners, use for job dependencies
try|try
block|{
while|while
condition|(
operator|!
name|job
operator|.
name|isSubmitted
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// sleep
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
block|}
comment|// wait for completion
name|job
operator|.
name|getJob
argument_list|()
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Internal error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|job
operator|.
name|getJob
argument_list|()
operator|.
name|isSuccessful
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|job
operator|.
name|getJob
argument_list|()
operator|.
name|getJobName
argument_list|()
operator|+
literal|" job failed!"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create an appropriate {@code JobStoryProducer} object for the    * given trace.    *     * @param traceIn the path to the trace file. The special path    *&quot;-&quot; denotes the standard input stream.    *    * @param conf the configuration to be used.    *    * @throws IOException if there was an error.    */
DECL|method|createJobStoryProducer (String traceIn, Configuration conf)
specifier|protected
name|JobStoryProducer
name|createJobStoryProducer
parameter_list|(
name|String
name|traceIn
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"-"
operator|.
name|equals
argument_list|(
name|traceIn
argument_list|)
condition|)
block|{
return|return
operator|new
name|ZombieJobProducer
argument_list|(
name|System
operator|.
name|in
argument_list|,
literal|null
argument_list|)
return|;
block|}
return|return
operator|new
name|ZombieJobProducer
argument_list|(
operator|new
name|Path
argument_list|(
name|traceIn
argument_list|)
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|// get the gridmix job submission policy
DECL|method|getJobSubmissionPolicy ( Configuration conf)
specifier|protected
specifier|static
name|GridmixJobSubmissionPolicy
name|getJobSubmissionPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|GridmixJobSubmissionPolicy
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|,
name|GridmixJobSubmissionPolicy
operator|.
name|STRESS
argument_list|)
return|;
block|}
comment|/**    * Create each component in the pipeline and start it.    * @param conf Configuration data, no keys specific to this context    * @param traceIn Either a Path to the trace data or&quot;-&quot; for    *                stdin    * @param ioPath&lt;ioPath&gt;/input/ is the dir from which input data is    *               read and&lt;ioPath&gt;/distributedCache/ is the gridmix    *               distributed cache directory.    * @param scratchDir Path into which job output is written    * @param startFlag Semaphore for starting job trace pipeline    */
DECL|method|startThreads (Configuration conf, String traceIn, Path ioPath, Path scratchDir, CountDownLatch startFlag, UserResolver userResolver)
specifier|private
name|void
name|startThreads
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|traceIn
parameter_list|,
name|Path
name|ioPath
parameter_list|,
name|Path
name|scratchDir
parameter_list|,
name|CountDownLatch
name|startFlag
parameter_list|,
name|UserResolver
name|userResolver
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Path
name|inputDir
init|=
name|getGridmixInputDataPath
argument_list|(
name|ioPath
argument_list|)
decl_stmt|;
name|GridmixJobSubmissionPolicy
name|policy
init|=
name|getJobSubmissionPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Submission policy is "
operator|+
name|policy
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|statistics
operator|=
operator|new
name|Statistics
argument_list|(
name|conf
argument_list|,
name|policy
operator|.
name|getPollingInterval
argument_list|()
argument_list|,
name|startFlag
argument_list|)
expr_stmt|;
name|monitor
operator|=
name|createJobMonitor
argument_list|(
name|statistics
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|noOfSubmitterThreads
init|=
operator|(
name|policy
operator|==
name|GridmixJobSubmissionPolicy
operator|.
name|SERIAL
operator|)
condition|?
literal|1
else|:
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|+
literal|1
decl_stmt|;
name|int
name|numThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|GRIDMIX_SUB_THR
argument_list|,
name|noOfSubmitterThreads
argument_list|)
decl_stmt|;
name|int
name|queueDep
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|GRIDMIX_QUE_DEP
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|submitter
operator|=
name|createJobSubmitter
argument_list|(
name|monitor
argument_list|,
name|numThreads
argument_list|,
name|queueDep
argument_list|,
operator|new
name|FilePool
argument_list|(
name|conf
argument_list|,
name|inputDir
argument_list|)
argument_list|,
name|userResolver
argument_list|,
name|statistics
argument_list|)
expr_stmt|;
name|distCacheEmulator
operator|=
operator|new
name|DistributedCacheEmulator
argument_list|(
name|conf
argument_list|,
name|ioPath
argument_list|)
expr_stmt|;
name|factory
operator|=
name|createJobFactory
argument_list|(
name|submitter
argument_list|,
name|traceIn
argument_list|,
name|scratchDir
argument_list|,
name|conf
argument_list|,
name|startFlag
argument_list|,
name|userResolver
argument_list|)
expr_stmt|;
name|factory
operator|.
name|jobCreator
operator|.
name|setDistCacheEmulator
argument_list|(
name|distCacheEmulator
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|==
name|GridmixJobSubmissionPolicy
operator|.
name|SERIAL
condition|)
block|{
name|statistics
operator|.
name|addJobStatsListeners
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statistics
operator|.
name|addClusterStatsObservers
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
comment|// add the gridmix run summarizer to the statistics
name|statistics
operator|.
name|addJobStatsListeners
argument_list|(
name|summarizer
operator|.
name|getExecutionSummarizer
argument_list|()
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|addClusterStatsObservers
argument_list|(
name|summarizer
operator|.
name|getClusterSummarizer
argument_list|()
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|submitter
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|" Exception at start "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createJobMonitor (Statistics stats, Configuration conf)
specifier|protected
name|JobMonitor
name|createJobMonitor
parameter_list|(
name|Statistics
name|stats
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|delay
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|GRIDMIX_JOBMONITOR_SLEEPTIME_MILLIS
argument_list|,
name|GRIDMIX_JOBMONITOR_SLEEPTIME_MILLIS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|numThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|GRIDMIX_JOBMONITOR_THREADS
argument_list|,
name|GRIDMIX_JOBMONITOR_THREADS_DEFAULT
argument_list|)
decl_stmt|;
return|return
operator|new
name|JobMonitor
argument_list|(
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|stats
argument_list|,
name|numThreads
argument_list|)
return|;
block|}
DECL|method|createJobSubmitter (JobMonitor monitor, int threads, int queueDepth, FilePool pool, UserResolver resolver, Statistics statistics)
specifier|protected
name|JobSubmitter
name|createJobSubmitter
parameter_list|(
name|JobMonitor
name|monitor
parameter_list|,
name|int
name|threads
parameter_list|,
name|int
name|queueDepth
parameter_list|,
name|FilePool
name|pool
parameter_list|,
name|UserResolver
name|resolver
parameter_list|,
name|Statistics
name|statistics
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JobSubmitter
argument_list|(
name|monitor
argument_list|,
name|threads
argument_list|,
name|queueDepth
argument_list|,
name|pool
argument_list|,
name|statistics
argument_list|)
return|;
block|}
DECL|method|createJobFactory (JobSubmitter submitter, String traceIn, Path scratchDir, Configuration conf, CountDownLatch startFlag, UserResolver resolver)
specifier|protected
name|JobFactory
name|createJobFactory
parameter_list|(
name|JobSubmitter
name|submitter
parameter_list|,
name|String
name|traceIn
parameter_list|,
name|Path
name|scratchDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CountDownLatch
name|startFlag
parameter_list|,
name|UserResolver
name|resolver
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|GridmixJobSubmissionPolicy
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|,
name|GridmixJobSubmissionPolicy
operator|.
name|STRESS
argument_list|)
operator|.
name|createJobFactory
argument_list|(
name|submitter
argument_list|,
name|createJobStoryProducer
argument_list|(
name|traceIn
argument_list|,
name|conf
argument_list|)
argument_list|,
name|scratchDir
argument_list|,
name|conf
argument_list|,
name|startFlag
argument_list|,
name|resolver
argument_list|)
return|;
block|}
DECL|field|userResolver
specifier|private
specifier|static
name|UserResolver
name|userResolver
decl_stmt|;
DECL|method|getCurrentUserResolver ()
specifier|public
name|UserResolver
name|getCurrentUserResolver
parameter_list|()
block|{
return|return
name|userResolver
return|;
block|}
DECL|method|run (final String[] argv)
specifier|public
name|int
name|run
parameter_list|(
specifier|final
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|val
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|runJob
argument_list|(
name|conf
argument_list|,
name|argv
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// print the gridmix summary if the run was successful
if|if
condition|(
name|val
operator|==
literal|0
condition|)
block|{
comment|// print the run summary
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|summarizer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
DECL|method|runJob (Configuration conf, String[] argv)
specifier|private
name|int
name|runJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Too few arguments to Gridmix.\n"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
name|ARGS_ERROR
return|;
block|}
name|long
name|genbytes
init|=
operator|-
literal|1L
decl_stmt|;
name|String
name|traceIn
init|=
literal|null
decl_stmt|;
name|Path
name|ioPath
init|=
literal|null
decl_stmt|;
name|URI
name|userRsrc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|userResolver
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|GRIDMIX_USR_RSV
argument_list|,
name|SubmitterUserResolver
operator|.
name|class
argument_list|,
name|UserResolver
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argv
operator|.
name|length
operator|-
literal|2
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
literal|"-generate"
operator|.
name|equals
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|genbytes
operator|=
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|genbytes
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"size of input data to be generated specified using "
operator|+
literal|"-generate option should be nonnegative.\n"
argument_list|)
expr_stmt|;
return|return
name|ARGS_ERROR
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-users"
operator|.
name|equals
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|userRsrc
operator|=
operator|new
name|URI
argument_list|(
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown option "
operator|+
name|argv
index|[
name|i
index|]
operator|+
literal|" specified.\n"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
name|ARGS_ERROR
return|;
block|}
block|}
if|if
condition|(
name|userResolver
operator|.
name|needsTargetUsersList
argument_list|()
condition|)
block|{
if|if
condition|(
name|userRsrc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|userResolver
operator|.
name|setTargetUsers
argument_list|(
name|userRsrc
argument_list|,
name|conf
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring the user resource '"
operator|+
name|userRsrc
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|userResolver
operator|.
name|getClass
argument_list|()
operator|+
literal|" needs target user list. Use -users option.\n"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
name|ARGS_ERROR
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|userRsrc
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring the user resource '"
operator|+
name|userRsrc
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|ioPath
operator|=
operator|new
name|Path
argument_list|(
name|argv
index|[
name|argv
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
expr_stmt|;
name|traceIn
operator|=
name|argv
index|[
name|argv
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|printUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
name|ARGS_ERROR
return|;
block|}
comment|// Create<ioPath> with 777 permissions
specifier|final
name|FileSystem
name|inputFs
init|=
name|ioPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ioPath
operator|=
name|ioPath
operator|.
name|makeQualified
argument_list|(
name|inputFs
argument_list|)
expr_stmt|;
name|boolean
name|succeeded
init|=
literal|false
decl_stmt|;
try|try
block|{
name|succeeded
operator|=
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|inputFs
argument_list|,
name|ioPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// No need to emit this exception message
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|succeeded
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed creation of<ioPath> directory "
operator|+
name|ioPath
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|STARTUP_FAILED_ERROR
return|;
block|}
block|}
return|return
name|start
argument_list|(
name|conf
argument_list|,
name|traceIn
argument_list|,
name|ioPath
argument_list|,
name|genbytes
argument_list|,
name|userResolver
argument_list|)
return|;
block|}
comment|/**    *     * @param conf gridmix configuration    * @param traceIn trace file path(if it is '-', then trace comes from the    *                stream stdin)    * @param ioPath Working directory for gridmix. GenerateData job    *               will generate data in the directory&lt;ioPath&gt;/input/ and    *               distributed cache data is generated in the directory    *&lt;ioPath&gt;/distributedCache/, if -generate option is    *               specified.    * @param genbytes size of input data to be generated under the directory    *&lt;ioPath&gt;/input/    * @param userResolver gridmix user resolver    * @return exit code    * @throws IOException    * @throws InterruptedException    */
DECL|method|start (Configuration conf, String traceIn, Path ioPath, long genbytes, UserResolver userResolver)
name|int
name|start
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|traceIn
parameter_list|,
name|Path
name|ioPath
parameter_list|,
name|long
name|genbytes
parameter_list|,
name|UserResolver
name|userResolver
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|DataStatistics
name|stats
init|=
literal|null
decl_stmt|;
name|InputStream
name|trace
init|=
literal|null
decl_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
try|try
block|{
name|Path
name|scratchDir
init|=
operator|new
name|Path
argument_list|(
name|ioPath
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|GRIDMIX_OUT_DIR
argument_list|,
literal|"gridmix"
argument_list|)
argument_list|)
decl_stmt|;
comment|// add shutdown hook for SIGINT, etc.
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|sdh
argument_list|)
expr_stmt|;
name|CountDownLatch
name|startFlag
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Create, start job submission threads
name|startThreads
argument_list|(
name|conf
argument_list|,
name|traceIn
argument_list|,
name|ioPath
argument_list|,
name|scratchDir
argument_list|,
name|startFlag
argument_list|,
name|userResolver
argument_list|)
expr_stmt|;
name|Path
name|inputDir
init|=
name|getGridmixInputDataPath
argument_list|(
name|ioPath
argument_list|)
decl_stmt|;
comment|// Write input data if specified
name|exitCode
operator|=
name|writeInputData
argument_list|(
name|genbytes
argument_list|,
name|inputDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
return|return
name|exitCode
return|;
block|}
comment|// publish the data statistics
name|stats
operator|=
name|GenerateData
operator|.
name|publishDataStatistics
argument_list|(
name|inputDir
argument_list|,
name|genbytes
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// scan input dir contents
name|submitter
operator|.
name|refreshFilePool
argument_list|()
expr_stmt|;
name|boolean
name|shouldGenerate
init|=
operator|(
name|genbytes
operator|>
literal|0
operator|)
decl_stmt|;
comment|// set up the needed things for emulation of various loads
name|exitCode
operator|=
name|setupEmulation
argument_list|(
name|conf
argument_list|,
name|traceIn
argument_list|,
name|scratchDir
argument_list|,
name|ioPath
argument_list|,
name|shouldGenerate
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
return|return
name|exitCode
return|;
block|}
comment|// start the summarizer
name|summarizer
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|factory
operator|.
name|start
argument_list|()
expr_stmt|;
name|statistics
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Startup failed. "
operator|+
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
name|factory
operator|.
name|abort
argument_list|()
expr_stmt|;
comment|// abort pipeline
name|exitCode
operator|=
name|STARTUP_FAILED_ERROR
expr_stmt|;
block|}
finally|finally
block|{
comment|// signal for factory to start; sets start time
name|startFlag
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
comment|// wait for input exhaustion
name|factory
operator|.
name|join
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
specifier|final
name|Throwable
name|badTraceException
init|=
name|factory
operator|.
name|error
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|badTraceException
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in trace"
argument_list|,
name|badTraceException
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error in trace"
argument_list|,
name|badTraceException
argument_list|)
throw|;
block|}
comment|// wait for pending tasks to be submitted
name|submitter
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|submitter
operator|.
name|join
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// wait for running tasks to complete
name|monitor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|monitor
operator|.
name|join
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|statistics
operator|.
name|join
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|summarizer
operator|.
name|finalize
argument_list|(
name|factory
argument_list|,
name|traceIn
argument_list|,
name|genbytes
argument_list|,
name|userResolver
argument_list|,
name|stats
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|trace
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
comment|/**    * Create gridmix output directory. Setup things for emulation of    * various loads, if needed.    * @param conf gridmix configuration    * @param traceIn trace file path(if it is '-', then trace comes from the    *                stream stdin)    * @param scratchDir gridmix output directory    * @param ioPath Working directory for gridmix.    * @param generate true if -generate option was specified    * @return exit code    * @throws IOException    * @throws InterruptedException     */
DECL|method|setupEmulation (Configuration conf, String traceIn, Path scratchDir, Path ioPath, boolean generate)
specifier|private
name|int
name|setupEmulation
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|traceIn
parameter_list|,
name|Path
name|scratchDir
parameter_list|,
name|Path
name|ioPath
parameter_list|,
name|boolean
name|generate
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// create scratch directory(output directory of gridmix)
specifier|final
name|FileSystem
name|scratchFs
init|=
name|scratchDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|scratchFs
argument_list|,
name|scratchDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup things needed for emulation of distributed cache load
return|return
name|setupDistCacheEmulation
argument_list|(
name|conf
argument_list|,
name|traceIn
argument_list|,
name|ioPath
argument_list|,
name|generate
argument_list|)
return|;
comment|// Setup emulation of other loads like CPU load, Memory load
block|}
comment|/**    * Setup gridmix for emulation of distributed cache load. This includes    * generation of distributed cache files, if needed.    * @param conf gridmix configuration    * @param traceIn trace file path(if it is '-', then trace comes from the    *                stream stdin)    * @param ioPath&lt;ioPath&gt;/input/ is the dir where input data (a) exists    *               or (b) is generated.&lt;ioPath&gt;/distributedCache/ is the    *               folder where distributed cache data (a) exists or (b) is to be    *               generated by gridmix.    * @param generate true if -generate option was specified    * @return exit code    * @throws IOException    * @throws InterruptedException    */
DECL|method|setupDistCacheEmulation (Configuration conf, String traceIn, Path ioPath, boolean generate)
specifier|private
name|int
name|setupDistCacheEmulation
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|traceIn
parameter_list|,
name|Path
name|ioPath
parameter_list|,
name|boolean
name|generate
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|distCacheEmulator
operator|.
name|init
argument_list|(
name|traceIn
argument_list|,
name|factory
operator|.
name|jobCreator
argument_list|,
name|generate
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|distCacheEmulator
operator|.
name|shouldGenerateDistCacheData
argument_list|()
operator|||
name|distCacheEmulator
operator|.
name|shouldEmulateDistCacheLoad
argument_list|()
condition|)
block|{
name|JobStoryProducer
name|jsp
init|=
name|createJobStoryProducer
argument_list|(
name|traceIn
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|exitCode
operator|=
name|distCacheEmulator
operator|.
name|setupGenerateDistCacheData
argument_list|(
name|jsp
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
operator|==
literal|0
condition|)
block|{
comment|// If there are files to be generated, run a MapReduce job to generate
comment|// these distributed cache files of all the simulated jobs of this trace.
name|writeDistCacheData
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exitCode
return|;
block|}
comment|/**    * Handles orderly shutdown by requesting that each component in the    * pipeline abort its progress, waiting for each to exit and killing    * any jobs still running on the cluster.    */
DECL|class|Shutdown
class|class
name|Shutdown
extends|extends
name|Thread
block|{
DECL|field|FAC_SLEEP
specifier|static
specifier|final
name|long
name|FAC_SLEEP
init|=
literal|1000
decl_stmt|;
DECL|field|SUB_SLEEP
specifier|static
specifier|final
name|long
name|SUB_SLEEP
init|=
literal|4000
decl_stmt|;
DECL|field|MON_SLEEP
specifier|static
specifier|final
name|long
name|MON_SLEEP
init|=
literal|15000
decl_stmt|;
DECL|method|killComponent (Component<?> component, long maxwait)
specifier|private
name|void
name|killComponent
parameter_list|(
name|Component
argument_list|<
name|?
argument_list|>
name|component
parameter_list|,
name|long
name|maxwait
parameter_list|)
block|{
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|component
operator|.
name|abort
argument_list|()
expr_stmt|;
try|try
block|{
name|component
operator|.
name|join
argument_list|(
name|maxwait
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted waiting for "
operator|+
name|component
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exiting..."
argument_list|)
expr_stmt|;
try|try
block|{
name|killComponent
argument_list|(
name|factory
argument_list|,
name|FAC_SLEEP
argument_list|)
expr_stmt|;
comment|// read no more tasks
name|killComponent
argument_list|(
name|submitter
argument_list|,
name|SUB_SLEEP
argument_list|)
expr_stmt|;
comment|// submit no more tasks
name|killComponent
argument_list|(
name|monitor
argument_list|,
name|MON_SLEEP
argument_list|)
expr_stmt|;
comment|// process remaining jobs here
name|killComponent
argument_list|(
name|statistics
argument_list|,
name|MON_SLEEP
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|monitor
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|JobStats
argument_list|>
name|remainingJobs
init|=
name|monitor
operator|.
name|getRemainingJobs
argument_list|()
decl_stmt|;
if|if
condition|(
name|remainingJobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing running jobs..."
argument_list|)
expr_stmt|;
for|for
control|(
name|JobStats
name|stats
range|:
name|remainingJobs
control|)
block|{
name|Job
name|job
init|=
name|stats
operator|.
name|getJob
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Killed "
operator|+
name|job
operator|.
name|getJobName
argument_list|()
operator|+
literal|" ("
operator|+
name|job
operator|.
name|getJobID
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|job
operator|.
name|isSuccessful
argument_list|()
condition|)
block|{
name|monitor
operator|.
name|onSuccess
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|monitor
operator|.
name|onFailure
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure killing "
operator|+
name|job
operator|.
name|getJobName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexcpected exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Done."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|Gridmix
argument_list|(
name|argv
argument_list|)
argument_list|,
name|argv
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getEnumValues (Enum<?>[] e)
specifier|private
name|String
name|getEnumValues
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
index|[]
name|e
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|sep
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Enum
argument_list|<
name|?
argument_list|>
name|v
range|:
name|e
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|sep
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|v
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|sep
operator|=
literal|"|"
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getJobTypes ()
specifier|private
name|String
name|getJobTypes
parameter_list|()
block|{
return|return
name|getEnumValues
argument_list|(
name|JobCreator
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getSubmissionPolicies ()
specifier|private
name|String
name|getSubmissionPolicies
parameter_list|()
block|{
return|return
name|getEnumValues
argument_list|(
name|GridmixJobSubmissionPolicy
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|method|printUsage (PrintStream out)
specifier|protected
name|void
name|printUsage
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Usage: gridmix [-generate<MiB>] [-users URI] [-Dname=value ...]<iopath><trace>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"  e.g. gridmix -generate 100m foo -"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   -generate<MiB> : Generate input data of size MiB under "
operator|+
literal|"<iopath>/input/ and generate\n\t\t     distributed cache data under "
operator|+
literal|"<iopath>/distributedCache/."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   -users<usersResourceURI> : URI that contains the users list."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Configuration parameters:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   General parameters:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Output directory\n"
argument_list|,
name|GRIDMIX_OUT_DIR
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Submitting threads\n"
argument_list|,
name|GRIDMIX_SUB_THR
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Queued job desc\n"
argument_list|,
name|GRIDMIX_QUE_DEP
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : User resolution class\n"
argument_list|,
name|GRIDMIX_USR_RSV
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Job types (%s)\n"
argument_list|,
name|JobCreator
operator|.
name|GRIDMIX_JOB_TYPE
argument_list|,
name|getJobTypes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   Parameters related to job submission:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Default queue\n"
argument_list|,
name|GridmixJob
operator|.
name|GRIDMIX_DEFAULT_QUEUE
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Enable/disable using queues in trace\n"
argument_list|,
name|GridmixJob
operator|.
name|GRIDMIX_USE_QUEUE_IN_TRACE
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Job submission policy (%s)\n"
argument_list|,
name|GridmixJobSubmissionPolicy
operator|.
name|JOB_SUBMISSION_POLICY
argument_list|,
name|getSubmissionPolicies
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   Parameters specific for LOADJOB:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Key fraction of rec\n"
argument_list|,
name|AvgRecordFactory
operator|.
name|GRIDMIX_KEY_FRC
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   Parameters specific for SLEEPJOB:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Whether to ignore reduce tasks\n"
argument_list|,
name|SleepJob
operator|.
name|SLEEPJOB_MAPTASK_ONLY
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Number of fake locations for map tasks\n"
argument_list|,
name|JobCreator
operator|.
name|SLEEPJOB_RANDOM_LOCATIONS
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Maximum map task runtime in mili-sec\n"
argument_list|,
name|SleepJob
operator|.
name|GRIDMIX_SLEEP_MAX_MAP_TIME
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : Maximum reduce task runtime in mili-sec (merge+reduce)\n"
argument_list|,
name|SleepJob
operator|.
name|GRIDMIX_SLEEP_MAX_REDUCE_TIME
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   Parameters specific for STRESS submission throttling policy:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : jobs vs task-tracker ratio\n"
argument_list|,
name|StressJobFactory
operator|.
name|CONF_MAX_JOB_TRACKER_RATIO
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : maps vs map-slot ratio\n"
argument_list|,
name|StressJobFactory
operator|.
name|CONF_OVERLOAD_MAPTASK_MAPSLOT_RATIO
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : reduces vs reduce-slot ratio\n"
argument_list|,
name|StressJobFactory
operator|.
name|CONF_OVERLOAD_REDUCETASK_REDUCESLOT_RATIO
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : map-slot share per job\n"
argument_list|,
name|StressJobFactory
operator|.
name|CONF_MAX_MAPSLOT_SHARE_PER_JOB
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"       %-48s : reduce-slot share per job\n"
argument_list|,
name|StressJobFactory
operator|.
name|CONF_MAX_REDUCESLOT_SHARE_PER_JOB
argument_list|)
expr_stmt|;
block|}
comment|/**    * Components in the pipeline must support the following operations for    * orderly startup and shutdown.    */
DECL|interface|Component
interface|interface
name|Component
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      * Accept an item into this component from an upstream component. If      * shutdown or abort have been called, this may fail, depending on the      * semantics for the component.      */
DECL|method|add (T item)
name|void
name|add
parameter_list|(
name|T
name|item
parameter_list|)
throws|throws
name|InterruptedException
function_decl|;
comment|/**      * Attempt to start the service.      */
DECL|method|start ()
name|void
name|start
parameter_list|()
function_decl|;
comment|/**      * Wait until the service completes. It is assumed that either a      * {@link #shutdown} or {@link #abort} has been requested.      */
DECL|method|join (long millis)
name|void
name|join
parameter_list|(
name|long
name|millis
parameter_list|)
throws|throws
name|InterruptedException
function_decl|;
comment|/**      * Shut down gracefully, finishing all pending work. Reject new requests.      */
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
function_decl|;
comment|/**      * Shut down immediately, aborting any work in progress and discarding      * all pending work. It is legal to store pending work for another      * thread to process.      */
DECL|method|abort ()
name|void
name|abort
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

