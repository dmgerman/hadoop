begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The purpose of this class is to generate new random seeds from a master  * seed. This is needed to make the Random().next*() calls in rumen and mumak  * deterministic so that mumak simulations become deterministically replayable.  *  * In these tools we need many independent streams of random numbers, some of  * which are created dynamically. We seed these streams with the sub-seeds   * returned by RandomSeedGenerator.  *   * For a slightly more complicated approach to generating multiple streams of   * random numbers with better theoretical guarantees, see  * P. L'Ecuyer, R. Simard, E. J. Chen, and W. D. Kelton,   * ``An Objected-Oriented Random-Number Package with Many Long Streams and   * Substreams'', Operations Research, 50, 6 (2002), 1073--1075  * http://www.iro.umontreal.ca/~lecuyer/papers.html  * http://www.iro.umontreal.ca/~lecuyer/myftp/streams00/  */
end_comment

begin_class
DECL|class|RandomSeedGenerator
specifier|public
class|class
name|RandomSeedGenerator
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RandomSeedGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF_8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|/** MD5 algorithm instance, one for each thread. */
DECL|field|md5Holder
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|MessageDigest
argument_list|>
name|md5Holder
init|=
operator|new
name|ThreadLocal
argument_list|<
name|MessageDigest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|MessageDigest
name|initialValue
parameter_list|()
block|{
name|MessageDigest
name|md5
init|=
literal|null
decl_stmt|;
try|try
block|{
name|md5
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|nsae
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't create MD5 digests"
argument_list|,
name|nsae
argument_list|)
throw|;
block|}
return|return
name|md5
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Generates a new random seed.    *    * @param streamId a string identifying the stream of random numbers    * @param masterSeed higher level master random seed    * @return the random seed. Different (streamId, masterSeed) pairs result in    *         (vastly) different random seeds.    */
DECL|method|getSeed (String streamId, long masterSeed)
specifier|public
specifier|static
name|long
name|getSeed
parameter_list|(
name|String
name|streamId
parameter_list|,
name|long
name|masterSeed
parameter_list|)
block|{
name|MessageDigest
name|md5
init|=
name|md5Holder
operator|.
name|get
argument_list|()
decl_stmt|;
name|md5
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//'/' : make sure that we don't get the same str from ('11',0) and ('1',10)
comment|// We could have fed the bytes of masterSeed one by one to md5.update()
comment|// instead
name|String
name|str
init|=
name|streamId
operator|+
literal|'/'
operator|+
name|masterSeed
decl_stmt|;
name|byte
index|[]
name|digest
init|=
name|md5
operator|.
name|digest
argument_list|(
name|str
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
comment|// Create a long from the first 8 bytes of the digest
comment|// This is fine as MD5 has the avalanche property.
comment|// Paranoids could have XOR folded the other 8 bytes in too.
name|long
name|seed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|seed
operator|=
operator|(
name|seed
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
name|int
operator|)
name|digest
index|[
name|i
index|]
operator|+
literal|128
operator|)
expr_stmt|;
block|}
return|return
name|seed
return|;
block|}
block|}
end_class

end_unit

