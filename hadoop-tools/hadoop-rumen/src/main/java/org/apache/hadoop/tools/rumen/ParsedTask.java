begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JhCounters
import|;
end_import

begin_comment
comment|/**  * This is a wrapper class around {@link LoggedTask}. This provides also the  * extra information about the task obtained from job history which is not  * written to the JSON trace file.  */
end_comment

begin_class
DECL|class|ParsedTask
specifier|public
class|class
name|ParsedTask
extends|extends
name|LoggedTask
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ParsedTask
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|diagnosticInfo
specifier|private
name|String
name|diagnosticInfo
decl_stmt|;
DECL|field|failedDueToAttempt
specifier|private
name|String
name|failedDueToAttempt
decl_stmt|;
DECL|field|countersMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|countersMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ParsedTask ()
name|ParsedTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|incorporateCounters (JhCounters counters)
specifier|public
name|void
name|incorporateCounters
parameter_list|(
name|JhCounters
name|counters
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|countersMap
init|=
name|JobHistoryUtils
operator|.
name|extractCounters
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|putCounters
argument_list|(
name|countersMap
argument_list|)
expr_stmt|;
name|super
operator|.
name|incorporateCounters
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
comment|/** Set the task counters */
DECL|method|putCounters (Map<String, Long> counters)
specifier|public
name|void
name|putCounters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|counters
parameter_list|)
block|{
name|this
operator|.
name|countersMap
operator|=
name|counters
expr_stmt|;
block|}
comment|/**    * @return the task counters    */
DECL|method|obtainCounters ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|obtainCounters
parameter_list|()
block|{
return|return
name|countersMap
return|;
block|}
comment|/** Set the task diagnostic-info */
DECL|method|putDiagnosticInfo (String msg)
specifier|public
name|void
name|putDiagnosticInfo
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|diagnosticInfo
operator|=
name|msg
expr_stmt|;
block|}
comment|/**    * @return the diagnostic-info of this task.    *         If the task is successful, returns null.    */
DECL|method|obtainDiagnosticInfo ()
specifier|public
name|String
name|obtainDiagnosticInfo
parameter_list|()
block|{
return|return
name|diagnosticInfo
return|;
block|}
comment|/**    * Set the failed-due-to-attemptId info of this task.    */
DECL|method|putFailedDueToAttemptId (String attempt)
specifier|public
name|void
name|putFailedDueToAttemptId
parameter_list|(
name|String
name|attempt
parameter_list|)
block|{
name|failedDueToAttempt
operator|=
name|attempt
expr_stmt|;
block|}
comment|/**    * @return the failed-due-to-attemptId info of this task.    *         If the task is successful, returns null.    */
DECL|method|obtainFailedDueToAttemptId ()
specifier|public
name|String
name|obtainFailedDueToAttemptId
parameter_list|()
block|{
return|return
name|failedDueToAttempt
return|;
block|}
comment|/**    * @return the list of attempts of this task.    */
DECL|method|obtainTaskAttempts ()
specifier|public
name|List
argument_list|<
name|ParsedTaskAttempt
argument_list|>
name|obtainTaskAttempts
parameter_list|()
block|{
name|List
argument_list|<
name|LoggedTaskAttempt
argument_list|>
name|attempts
init|=
name|getAttempts
argument_list|()
decl_stmt|;
return|return
name|convertTaskAttempts
argument_list|(
name|attempts
argument_list|)
return|;
block|}
DECL|method|convertTaskAttempts ( List<LoggedTaskAttempt> attempts)
name|List
argument_list|<
name|ParsedTaskAttempt
argument_list|>
name|convertTaskAttempts
parameter_list|(
name|List
argument_list|<
name|LoggedTaskAttempt
argument_list|>
name|attempts
parameter_list|)
block|{
name|List
argument_list|<
name|ParsedTaskAttempt
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ParsedTaskAttempt
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LoggedTaskAttempt
name|t
range|:
name|attempts
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|ParsedTaskAttempt
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|ParsedTaskAttempt
operator|)
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected type of taskAttempts in the list..."
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** Dump the extra info of ParsedTask */
DECL|method|dumpParsedTask ()
name|void
name|dumpParsedTask
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ParsedTask details:"
operator|+
name|obtainCounters
argument_list|()
operator|+
literal|"\n"
operator|+
name|obtainFailedDueToAttemptId
argument_list|()
operator|+
literal|"\nPreferred Locations are:"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LoggedLocation
argument_list|>
name|loc
init|=
name|getPreferredLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|LoggedLocation
name|l
range|:
name|loc
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|l
operator|.
name|getLayers
argument_list|()
operator|+
literal|";"
operator|+
name|l
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ParsedTaskAttempt
argument_list|>
name|attempts
init|=
name|obtainTaskAttempts
argument_list|()
decl_stmt|;
for|for
control|(
name|ParsedTaskAttempt
name|attempt
range|:
name|attempts
control|)
block|{
name|attempt
operator|.
name|dumpParsedTaskAttempt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

