begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * {@link ZombieCluster} rebuilds the cluster topology using the information  * obtained from job history logs.  */
end_comment

begin_class
DECL|class|ZombieCluster
specifier|public
class|class
name|ZombieCluster
extends|extends
name|AbstractClusterStory
block|{
DECL|field|root
specifier|private
name|Node
name|root
decl_stmt|;
comment|/**    * Construct a homogeneous cluster. We assume that the leaves on the topology    * are {@link MachineNode}s, and the parents of {@link MachineNode}s are    * {@link RackNode}s. We also expect all leaf nodes are on the same level.    *     * @param topology    *          The network topology.    * @param defaultNode    *          The default node setting.    */
DECL|method|ZombieCluster (LoggedNetworkTopology topology, MachineNode defaultNode)
specifier|public
name|ZombieCluster
parameter_list|(
name|LoggedNetworkTopology
name|topology
parameter_list|,
name|MachineNode
name|defaultNode
parameter_list|)
block|{
name|buildCluster
argument_list|(
name|topology
argument_list|,
name|defaultNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a homogeneous cluster. We assume that the leaves on the topology    * are {@link MachineNode}s, and the parents of {@link MachineNode}s are    * {@link RackNode}s. We also expect all leaf nodes are on the same level.    *     * @param path Path to the JSON-encoded topology file.    * @param conf    * @param defaultNode    *          The default node setting.    * @throws IOException     */
DECL|method|ZombieCluster (Path path, MachineNode defaultNode, Configuration conf)
specifier|public
name|ZombieCluster
parameter_list|(
name|Path
name|path
parameter_list|,
name|MachineNode
name|defaultNode
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|ClusterTopologyReader
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|defaultNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a homogeneous cluster. We assume that the leaves on the topology    * are {@link MachineNode}s, and the parents of {@link MachineNode}s are    * {@link RackNode}s. We also expect all leaf nodes are on the same level.    *     * @param input The input stream for the JSON-encoded topology file.    * @param defaultNode    *          The default node setting.    * @throws IOException     */
DECL|method|ZombieCluster (InputStream input, MachineNode defaultNode)
specifier|public
name|ZombieCluster
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|MachineNode
name|defaultNode
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|ClusterTopologyReader
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|defaultNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getClusterTopology ()
specifier|public
name|Node
name|getClusterTopology
parameter_list|()
block|{
return|return
name|root
return|;
block|}
DECL|method|buildCluster (LoggedNetworkTopology topology, MachineNode defaultNode)
specifier|private
specifier|final
name|void
name|buildCluster
parameter_list|(
name|LoggedNetworkTopology
name|topology
parameter_list|,
name|MachineNode
name|defaultNode
parameter_list|)
block|{
name|Map
argument_list|<
name|LoggedNetworkTopology
argument_list|,
name|Integer
argument_list|>
name|levelMapping
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|LoggedNetworkTopology
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Deque
argument_list|<
name|LoggedNetworkTopology
argument_list|>
name|unvisited
init|=
operator|new
name|ArrayDeque
argument_list|<
name|LoggedNetworkTopology
argument_list|>
argument_list|()
decl_stmt|;
name|unvisited
operator|.
name|add
argument_list|(
name|topology
argument_list|)
expr_stmt|;
name|levelMapping
operator|.
name|put
argument_list|(
name|topology
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// building levelMapping and determine leafLevel
name|int
name|leafLevel
init|=
operator|-
literal|1
decl_stmt|;
comment|// -1 means leafLevel unknown.
for|for
control|(
name|LoggedNetworkTopology
name|n
init|=
name|unvisited
operator|.
name|poll
argument_list|()
init|;
name|n
operator|!=
literal|null
condition|;
name|n
operator|=
name|unvisited
operator|.
name|poll
argument_list|()
control|)
block|{
name|int
name|level
init|=
name|levelMapping
operator|.
name|get
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LoggedNetworkTopology
argument_list|>
name|children
init|=
name|n
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
operator|||
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|leafLevel
operator|==
operator|-
literal|1
condition|)
block|{
name|leafLevel
operator|=
name|level
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|leafLevel
operator|!=
name|level
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Leaf nodes are not on the same level"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
for|for
control|(
name|LoggedNetworkTopology
name|child
range|:
name|children
control|)
block|{
name|levelMapping
operator|.
name|put
argument_list|(
name|child
argument_list|,
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
name|unvisited
operator|.
name|addFirst
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * A second-pass dfs traverse of topology tree. path[i] contains the parent      * of the node at level i+1.      */
name|Node
index|[]
name|path
init|=
operator|new
name|Node
index|[
name|leafLevel
index|]
decl_stmt|;
name|unvisited
operator|.
name|add
argument_list|(
name|topology
argument_list|)
expr_stmt|;
for|for
control|(
name|LoggedNetworkTopology
name|n
init|=
name|unvisited
operator|.
name|poll
argument_list|()
init|;
name|n
operator|!=
literal|null
condition|;
name|n
operator|=
name|unvisited
operator|.
name|poll
argument_list|()
control|)
block|{
name|int
name|level
init|=
name|levelMapping
operator|.
name|get
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|Node
name|current
decl_stmt|;
if|if
condition|(
name|level
operator|==
name|leafLevel
condition|)
block|{
comment|// a machine node
name|MachineNode
operator|.
name|Builder
name|builder
init|=
operator|new
name|MachineNode
operator|.
name|Builder
argument_list|(
name|n
operator|.
name|getName
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|level
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultNode
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|cloneFrom
argument_list|(
name|defaultNode
argument_list|)
expr_stmt|;
block|}
name|current
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
operator|(
name|level
operator|==
name|leafLevel
operator|-
literal|1
operator|)
condition|?
operator|new
name|RackNode
argument_list|(
name|n
operator|.
name|getName
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|level
argument_list|)
else|:
operator|new
name|Node
argument_list|(
name|n
operator|.
name|getName
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|path
index|[
name|level
index|]
operator|=
name|current
expr_stmt|;
comment|// Add all children to the front of the queue.
for|for
control|(
name|LoggedNetworkTopology
name|child
range|:
name|n
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|unvisited
operator|.
name|addFirst
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|level
operator|!=
literal|0
condition|)
block|{
name|path
index|[
name|level
operator|-
literal|1
index|]
operator|.
name|addChild
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|=
name|path
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
end_class

end_unit

