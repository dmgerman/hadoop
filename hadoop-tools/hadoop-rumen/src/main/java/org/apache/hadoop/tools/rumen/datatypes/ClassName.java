begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen.datatypes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Represents a class name.  */
end_comment

begin_class
DECL|class|ClassName
specifier|public
class|class
name|ClassName
extends|extends
name|DefaultAnonymizableDataType
block|{
DECL|field|CLASSNAME_PRESERVE_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|CLASSNAME_PRESERVE_CONFIG
init|=
literal|"rumen.data-types.classname.preserve"
decl_stmt|;
DECL|field|className
specifier|private
specifier|final
name|String
name|className
decl_stmt|;
DECL|method|ClassName (String className)
specifier|public
name|ClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|className
return|;
block|}
annotation|@
name|Override
DECL|method|getPrefix ()
specifier|protected
name|String
name|getPrefix
parameter_list|()
block|{
return|return
literal|"class"
return|;
block|}
annotation|@
name|Override
DECL|method|needsAnonymization (Configuration conf)
specifier|protected
name|boolean
name|needsAnonymization
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
index|[]
name|preserves
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|CLASSNAME_PRESERVE_CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|preserves
operator|!=
literal|null
condition|)
block|{
comment|// do a simple starts with check
for|for
control|(
name|String
name|p
range|:
name|preserves
control|)
block|{
if|if
condition|(
name|className
operator|.
name|startsWith
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

