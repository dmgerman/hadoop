begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|HistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_comment
comment|/**  * {@link JobHistoryParser} to parse job histories for hadoop 0.20 (META=1).  */
end_comment

begin_class
DECL|class|Hadoop20JHParser
specifier|public
class|class
name|Hadoop20JHParser
implements|implements
name|JobHistoryParser
block|{
DECL|field|reader
specifier|final
name|LineReader
name|reader
decl_stmt|;
DECL|field|endLineString
specifier|static
specifier|final
name|String
name|endLineString
init|=
literal|" ."
decl_stmt|;
DECL|field|internalVersion
specifier|static
specifier|final
name|int
name|internalVersion
init|=
literal|1
decl_stmt|;
comment|/**    * Can this parser parse the input?    *     * @param input    * @return Whether this parser can parse the input.    * @throws IOException    *     *           We will deem a stream to be a good 0.20 job history stream if the    *           first line is exactly "Meta VERSION=\"1\" ."    */
DECL|method|canParse (InputStream input)
specifier|public
specifier|static
name|boolean
name|canParse
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|LineReader
name|reader
init|=
operator|new
name|LineReader
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Text
name|buffer
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
return|return
name|reader
operator|.
name|readLine
argument_list|(
name|buffer
argument_list|)
operator|!=
literal|0
operator|&&
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Meta VERSION=\"1\" ."
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|Hadoop20JHParser (InputStream input)
specifier|public
name|Hadoop20JHParser
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|LineReader
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|Hadoop20JHParser (LineReader reader)
specifier|public
name|Hadoop20JHParser
parameter_list|(
name|LineReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
block|}
DECL|field|liveEmitters
name|Map
argument_list|<
name|String
argument_list|,
name|HistoryEventEmitter
argument_list|>
name|liveEmitters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HistoryEventEmitter
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|remainingEvents
name|Queue
argument_list|<
name|HistoryEvent
argument_list|>
name|remainingEvents
init|=
operator|new
name|LinkedList
argument_list|<
name|HistoryEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|enum|LineType
enum|enum
name|LineType
block|{
DECL|enumConstant|JOB
name|JOB
argument_list|(
literal|"Job"
argument_list|,
literal|"JOBID"
argument_list|)
block|{
name|HistoryEventEmitter
name|createEmitter
parameter_list|()
block|{
return|return
operator|new
name|Job20LineHistoryEventEmitter
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|TASK
name|TASK
argument_list|(
literal|"Task"
argument_list|,
literal|"TASKID"
argument_list|)
block|{
name|HistoryEventEmitter
name|createEmitter
parameter_list|()
block|{
return|return
operator|new
name|Task20LineHistoryEventEmitter
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|MAP_ATTEMPT
name|MAP_ATTEMPT
argument_list|(
literal|"MapAttempt"
argument_list|,
literal|"TASK_ATTEMPT_ID"
argument_list|)
block|{
name|HistoryEventEmitter
name|createEmitter
parameter_list|()
block|{
return|return
operator|new
name|MapAttempt20LineHistoryEventEmitter
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|REDUCE_ATTEMPT
name|REDUCE_ATTEMPT
argument_list|(
literal|"ReduceAttempt"
argument_list|,
literal|"TASK_ATTEMPT_ID"
argument_list|)
block|{
name|HistoryEventEmitter
name|createEmitter
parameter_list|()
block|{
return|return
operator|new
name|ReduceAttempt20LineHistoryEventEmitter
argument_list|()
return|;
block|}
block|}
block|;
DECL|field|type
specifier|private
name|LogRecordType
name|type
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|LineType (String s, String name)
name|LineType
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|type
operator|=
name|LogRecordType
operator|.
name|intern
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|recordType ()
name|LogRecordType
name|recordType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getName (ParsedLine line)
name|String
name|getName
parameter_list|(
name|ParsedLine
name|line
parameter_list|)
block|{
return|return
name|line
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|createEmitter ()
specifier|abstract
name|HistoryEventEmitter
name|createEmitter
parameter_list|()
function_decl|;
DECL|method|findLineType (LogRecordType lrt)
specifier|static
name|LineType
name|findLineType
parameter_list|(
name|LogRecordType
name|lrt
parameter_list|)
block|{
for|for
control|(
name|LineType
name|lt
range|:
name|LineType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|lt
operator|.
name|type
operator|==
name|lrt
condition|)
block|{
return|return
name|lt
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|nextEvent ()
specifier|public
name|HistoryEvent
name|nextEvent
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|remainingEvents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ParsedLine
name|line
init|=
operator|new
name|ParsedLine
argument_list|(
name|getFullLine
argument_list|()
argument_list|,
name|internalVersion
argument_list|)
decl_stmt|;
name|LineType
name|type
init|=
name|LineType
operator|.
name|findLineType
argument_list|(
name|line
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|type
operator|.
name|getName
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|HistoryEventEmitter
name|emitter
init|=
name|findOrMakeEmitter
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|Queue
argument_list|<
name|HistoryEvent
argument_list|>
argument_list|,
name|HistoryEventEmitter
operator|.
name|PostEmitAction
argument_list|>
name|pair
init|=
name|emitter
operator|.
name|emitterCore
argument_list|(
name|line
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|second
argument_list|()
operator|==
name|HistoryEventEmitter
operator|.
name|PostEmitAction
operator|.
name|REMOVE_HEE
condition|)
block|{
name|liveEmitters
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|remainingEvents
operator|=
name|pair
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
return|return
name|remainingEvents
operator|.
name|poll
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|findOrMakeEmitter (String name, LineType type)
name|HistoryEventEmitter
name|findOrMakeEmitter
parameter_list|(
name|String
name|name
parameter_list|,
name|LineType
name|type
parameter_list|)
block|{
name|HistoryEventEmitter
name|result
init|=
name|liveEmitters
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|type
operator|.
name|createEmitter
argument_list|()
expr_stmt|;
name|liveEmitters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getOneLine ()
specifier|private
name|String
name|getOneLine
parameter_list|()
throws|throws
name|IOException
block|{
name|Text
name|resultText
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|readLine
argument_list|(
name|resultText
argument_list|)
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"apparent bad line"
argument_list|)
throw|;
block|}
return|return
name|resultText
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getFullLine ()
specifier|private
name|String
name|getFullLine
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|line
init|=
name|getOneLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|.
name|length
argument_list|()
operator|<
name|endLineString
operator|.
name|length
argument_list|()
condition|)
block|{
name|line
operator|=
name|getOneLine
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
name|endLineString
argument_list|)
condition|)
block|{
return|return
name|line
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|addedLine
decl_stmt|;
do|do
block|{
name|addedLine
operator|=
name|getOneLine
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|addedLine
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|addedLine
operator|.
name|length
argument_list|()
operator|<
name|endLineString
operator|.
name|length
argument_list|()
operator|||
operator|!
name|endLineString
operator|.
name|equals
argument_list|(
name|addedLine
operator|.
name|substring
argument_list|(
name|addedLine
operator|.
name|length
argument_list|()
operator|-
name|endLineString
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
condition|)
do|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

