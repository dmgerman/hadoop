begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  *   */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CodecPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_comment
comment|/**  * This is the main class for rumen log mining functionality.  *   * It reads a directory of job tracker logs, and computes various information  * about it. See {@code usage()}, below.  *   */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|HadoopLogsAnalyzer
specifier|public
class|class
name|HadoopLogsAnalyzer
extends|extends
name|Configured
implements|implements
name|Tool
block|{
comment|// output streams
DECL|field|statusOutput
specifier|private
name|PrintStream
name|statusOutput
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|field|statisticalOutput
specifier|private
name|PrintStream
name|statisticalOutput
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|field|staticDebugOutput
specifier|private
specifier|static
name|PrintStream
name|staticDebugOutput
init|=
name|System
operator|.
name|err
decl_stmt|;
comment|/**    * The number of splits a task can have, before we ignore them all.    */
DECL|field|MAXIMUM_PREFERRED_LOCATIONS
specifier|private
specifier|final
specifier|static
name|int
name|MAXIMUM_PREFERRED_LOCATIONS
init|=
literal|25
decl_stmt|;
comment|/**    * This element is to compensate for the fact that our percentiles engine    * rounds up for the expected sample count, so if the total number of readings    * is small enough we need to compensate slightly when aggregating the spread    * data from jobs with few reducers together with jobs with many reducers.    */
DECL|field|SMALL_SPREAD_COMPENSATION_THRESHOLD
specifier|private
specifier|static
specifier|final
name|long
name|SMALL_SPREAD_COMPENSATION_THRESHOLD
init|=
literal|5L
decl_stmt|;
comment|/**    * {@code MAXIMUM_CLOCK_SKEW} is the maximum plausible difference between the    * clocks of machines in the same cluster. This is important because an event    * that logically must follow a second event will be considered non-anomalous    * if it precedes that second event, provided they happen on different    * machines.    */
DECL|field|MAXIMUM_CLOCK_SKEW
specifier|private
specifier|static
specifier|final
name|long
name|MAXIMUM_CLOCK_SKEW
init|=
literal|10000L
decl_stmt|;
comment|/**    * The regular expression used to parse task attempt IDs in job tracker logs    */
DECL|field|taskAttemptIDPattern
specifier|private
specifier|final
specifier|static
name|Pattern
name|taskAttemptIDPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*_([0-9]+)"
argument_list|)
decl_stmt|;
DECL|field|xmlFilePrefix
specifier|private
specifier|final
specifier|static
name|Pattern
name|xmlFilePrefix
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[ \t]*<"
argument_list|)
decl_stmt|;
DECL|field|confFileHeader
specifier|private
specifier|final
specifier|static
name|Pattern
name|confFileHeader
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"_conf.xml!!"
argument_list|)
decl_stmt|;
DECL|field|counterPatterns
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
name|counterPatterns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The unpaired job config file. Currently only used to glean the {@code -Xmx}    * field of the JRE options    */
DECL|field|jobconf
specifier|private
name|ParsedConfigFile
name|jobconf
init|=
literal|null
decl_stmt|;
comment|/**    * Set by {@code -omit-task-details}. If true, we<i>only</i> emit the job    * digest [statistical info], not the detailed job trace.    */
DECL|field|omitTaskDetails
specifier|private
name|boolean
name|omitTaskDetails
init|=
literal|false
decl_stmt|;
DECL|field|jobTraceGen
specifier|private
name|Outputter
argument_list|<
name|LoggedJob
argument_list|>
name|jobTraceGen
init|=
literal|null
decl_stmt|;
DECL|field|prettyprintTrace
specifier|private
name|boolean
name|prettyprintTrace
init|=
literal|true
decl_stmt|;
DECL|field|jobBeingTraced
specifier|private
name|LoggedJob
name|jobBeingTraced
init|=
literal|null
decl_stmt|;
DECL|field|tasksInCurrentJob
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LoggedTask
argument_list|>
name|tasksInCurrentJob
decl_stmt|;
DECL|field|attemptsInCurrentJob
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LoggedTaskAttempt
argument_list|>
name|attemptsInCurrentJob
decl_stmt|;
DECL|field|successfulMapAttemptTimes
specifier|private
name|Histogram
index|[]
name|successfulMapAttemptTimes
decl_stmt|;
DECL|field|successfulReduceAttemptTimes
specifier|private
name|Histogram
name|successfulReduceAttemptTimes
decl_stmt|;
DECL|field|failedMapAttemptTimes
specifier|private
name|Histogram
index|[]
name|failedMapAttemptTimes
decl_stmt|;
DECL|field|failedReduceAttemptTimes
specifier|private
name|Histogram
name|failedReduceAttemptTimes
decl_stmt|;
DECL|field|successfulNthMapperAttempts
specifier|private
name|Histogram
name|successfulNthMapperAttempts
decl_stmt|;
DECL|field|successfulNthReducerAttempts
specifier|private
name|Histogram
name|successfulNthReducerAttempts
decl_stmt|;
DECL|field|mapperLocality
specifier|private
name|Histogram
name|mapperLocality
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HadoopLogsAnalyzer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|attemptTimesPercentiles
specifier|private
name|int
index|[]
name|attemptTimesPercentiles
decl_stmt|;
DECL|field|topologyGen
specifier|private
name|Outputter
argument_list|<
name|LoggedNetworkTopology
argument_list|>
name|topologyGen
init|=
literal|null
decl_stmt|;
DECL|field|allHosts
specifier|private
name|HashSet
argument_list|<
name|ParsedHost
argument_list|>
name|allHosts
init|=
operator|new
name|HashSet
argument_list|<
name|ParsedHost
argument_list|>
argument_list|()
decl_stmt|;
comment|// number of ticks per second
DECL|field|collecting
specifier|private
name|boolean
name|collecting
init|=
literal|false
decl_stmt|;
DECL|field|lineNumber
specifier|private
name|long
name|lineNumber
init|=
literal|0
decl_stmt|;
DECL|field|rereadableLine
specifier|private
name|String
name|rereadableLine
init|=
literal|null
decl_stmt|;
DECL|field|inputFilename
specifier|private
name|String
name|inputFilename
decl_stmt|;
DECL|field|inputIsDirectory
specifier|private
name|boolean
name|inputIsDirectory
init|=
literal|false
decl_stmt|;
DECL|field|inputDirectoryPath
specifier|private
name|Path
name|inputDirectoryPath
init|=
literal|null
decl_stmt|;
DECL|field|inputDirectoryFiles
specifier|private
name|String
index|[]
name|inputDirectoryFiles
init|=
literal|null
decl_stmt|;
DECL|field|inputDirectoryCursor
specifier|private
name|int
name|inputDirectoryCursor
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|input
specifier|private
name|LineReader
name|input
init|=
literal|null
decl_stmt|;
DECL|field|inputCodec
specifier|private
name|CompressionCodec
name|inputCodec
init|=
literal|null
decl_stmt|;
DECL|field|inputDecompressor
specifier|private
name|Decompressor
name|inputDecompressor
init|=
literal|null
decl_stmt|;
DECL|field|inputLineText
specifier|private
name|Text
name|inputLineText
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
DECL|field|debug
specifier|private
name|boolean
name|debug
init|=
literal|false
decl_stmt|;
DECL|field|version
specifier|private
name|int
name|version
init|=
literal|0
decl_stmt|;
DECL|field|numberBuckets
specifier|private
name|int
name|numberBuckets
init|=
literal|99
decl_stmt|;
DECL|field|spreadMin
specifier|private
name|int
name|spreadMin
decl_stmt|;
DECL|field|spreadMax
specifier|private
name|int
name|spreadMax
decl_stmt|;
DECL|field|spreading
specifier|private
name|boolean
name|spreading
init|=
literal|false
decl_stmt|;
DECL|field|delays
specifier|private
name|boolean
name|delays
init|=
literal|false
decl_stmt|;
DECL|field|runtimes
specifier|private
name|boolean
name|runtimes
init|=
literal|false
decl_stmt|;
DECL|field|collectTaskTimes
specifier|private
name|boolean
name|collectTaskTimes
init|=
literal|false
decl_stmt|;
DECL|field|canonicalJob
specifier|private
name|LogRecordType
name|canonicalJob
init|=
name|LogRecordType
operator|.
name|intern
argument_list|(
literal|"Job"
argument_list|)
decl_stmt|;
DECL|field|canonicalMapAttempt
specifier|private
name|LogRecordType
name|canonicalMapAttempt
init|=
name|LogRecordType
operator|.
name|intern
argument_list|(
literal|"MapAttempt"
argument_list|)
decl_stmt|;
DECL|field|canonicalReduceAttempt
specifier|private
name|LogRecordType
name|canonicalReduceAttempt
init|=
name|LogRecordType
operator|.
name|intern
argument_list|(
literal|"ReduceAttempt"
argument_list|)
decl_stmt|;
DECL|field|canonicalTask
specifier|private
name|LogRecordType
name|canonicalTask
init|=
name|LogRecordType
operator|.
name|intern
argument_list|(
literal|"Task"
argument_list|)
decl_stmt|;
DECL|field|streamingJobnamePattern
specifier|private
specifier|static
name|Pattern
name|streamingJobnamePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"streamjob\\d+.jar"
argument_list|)
decl_stmt|;
DECL|field|hostNames
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|hostNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|fileFirstLine
specifier|private
name|boolean
name|fileFirstLine
init|=
literal|true
decl_stmt|;
DECL|field|currentFileName
specifier|private
name|String
name|currentFileName
init|=
literal|null
decl_stmt|;
comment|// Here are the cumulative statistics.
DECL|enum|JobOutcome
enum|enum
name|JobOutcome
block|{
DECL|enumConstant|SUCCESS
DECL|enumConstant|FAILURE
DECL|enumConstant|OVERALL
name|SUCCESS
block|,
name|FAILURE
block|,
name|OVERALL
block|}
empty_stmt|;
comment|/**    * These rectangular arrays of {@link Histogram}s are indexed by the job type    * [java, streaming, pig or pipes] and then by the outcome [success or    * failure]    */
DECL|field|runTimeDists
specifier|private
name|Histogram
name|runTimeDists
index|[]
index|[]
decl_stmt|;
DECL|field|delayTimeDists
specifier|private
name|Histogram
name|delayTimeDists
index|[]
index|[]
decl_stmt|;
DECL|field|mapTimeSpreadDists
specifier|private
name|Histogram
name|mapTimeSpreadDists
index|[]
index|[]
decl_stmt|;
DECL|field|shuffleTimeSpreadDists
specifier|private
name|Histogram
name|shuffleTimeSpreadDists
index|[]
index|[]
decl_stmt|;
DECL|field|sortTimeSpreadDists
specifier|private
name|Histogram
name|sortTimeSpreadDists
index|[]
index|[]
decl_stmt|;
DECL|field|reduceTimeSpreadDists
specifier|private
name|Histogram
name|reduceTimeSpreadDists
index|[]
index|[]
decl_stmt|;
DECL|field|mapTimeDists
specifier|private
name|Histogram
name|mapTimeDists
index|[]
index|[]
decl_stmt|;
DECL|field|shuffleTimeDists
specifier|private
name|Histogram
name|shuffleTimeDists
index|[]
index|[]
decl_stmt|;
DECL|field|sortTimeDists
specifier|private
name|Histogram
name|sortTimeDists
index|[]
index|[]
decl_stmt|;
DECL|field|reduceTimeDists
specifier|private
name|Histogram
name|reduceTimeDists
index|[]
index|[]
decl_stmt|;
DECL|field|taskAttemptStartTimes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|taskAttemptStartTimes
decl_stmt|;
DECL|field|taskReduceAttemptShuffleEndTimes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|taskReduceAttemptShuffleEndTimes
decl_stmt|;
DECL|field|taskReduceAttemptSortEndTimes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|taskReduceAttemptSortEndTimes
decl_stmt|;
DECL|field|taskMapAttemptFinishTimes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|taskMapAttemptFinishTimes
decl_stmt|;
DECL|field|taskReduceAttemptFinishTimes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|taskReduceAttemptFinishTimes
decl_stmt|;
DECL|field|submitTimeCurrentJob
specifier|private
name|long
name|submitTimeCurrentJob
decl_stmt|;
DECL|field|launchTimeCurrentJob
specifier|private
name|long
name|launchTimeCurrentJob
decl_stmt|;
DECL|field|currentJobID
specifier|private
name|String
name|currentJobID
decl_stmt|;
comment|// TODO this is currently not being set correctly. We should fix it.
comment|// That only matters for statistics extraction.
DECL|field|thisJobType
specifier|private
name|LoggedJob
operator|.
name|JobType
name|thisJobType
decl_stmt|;
DECL|method|newDistributionBlock ()
specifier|private
name|Histogram
index|[]
index|[]
name|newDistributionBlock
parameter_list|()
block|{
return|return
name|newDistributionBlock
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|newDistributionBlock (String blockname)
specifier|private
name|Histogram
index|[]
index|[]
name|newDistributionBlock
parameter_list|(
name|String
name|blockname
parameter_list|)
block|{
name|Histogram
index|[]
index|[]
name|result
init|=
operator|new
name|Histogram
index|[
name|JobOutcome
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|JobOutcome
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|Histogram
index|[
name|LoggedJob
operator|.
name|JobType
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|LoggedJob
operator|.
name|JobType
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|result
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|blockname
operator|==
literal|null
condition|?
operator|new
name|Histogram
argument_list|()
else|:
operator|new
name|Histogram
argument_list|(
name|blockname
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|getDistribution (Histogram[][] block, JobOutcome outcome, LoggedJob.JobType type)
specifier|private
name|Histogram
name|getDistribution
parameter_list|(
name|Histogram
index|[]
index|[]
name|block
parameter_list|,
name|JobOutcome
name|outcome
parameter_list|,
name|LoggedJob
operator|.
name|JobType
name|type
parameter_list|)
block|{
return|return
name|block
index|[
name|outcome
operator|.
name|ordinal
argument_list|()
index|]
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
return|;
block|}
DECL|method|usage ()
specifier|private
name|void
name|usage
parameter_list|()
block|{
name|statusOutput
operator|.
name|print
argument_list|(
literal|"Usage: \n"
operator|+
literal|"administrative subcommands:\n"
operator|+
literal|"-v1                  specify version 1 of the jt logs\n"
operator|+
literal|"-h or -help          print this message\n"
operator|+
literal|"-d or -debug         print voluminous debug info during processing\n"
operator|+
literal|"-collect-prefixes    collect the prefixes of log lines\n\n"
operator|+
literal|"  job trace subcommands\n"
operator|+
literal|"-write-job-trace     takes a filename.\n"
operator|+
literal|"                     writes job trace in JSON to that filename\n"
operator|+
literal|"-single-line-job-traces  omit prettyprinting of job trace\n"
operator|+
literal|"-omit-task-details   leave out info about each task and attempt,\n"
operator|+
literal|"                     so only statistical info is added to each job\n"
operator|+
literal|"-write-topology      takes a filename.\n"
operator|+
literal|"                     writes JSON file giving network topology\n"
operator|+
literal|"-job-digest-spectra  takes a list of percentile points\n"
operator|+
literal|"                     writes CDFs with min, max, and those percentiles\n\n"
operator|+
literal|"subcommands for task statistical info\n"
operator|+
literal|"-spreads             we have a mode where, for each job, we can\n"
operator|+
literal|"                     develop the ratio of percentile B to percentile A\n"
operator|+
literal|"                     of task run times.  Having developed that ratio,\n"
operator|+
literal|"                     we can consider it to be a datum and we can\n"
operator|+
literal|"                     build a CDF of those ratios.  -spreads turns\n"
operator|+
literal|"                     this option on, and takes A and B\n"
operator|+
literal|"-delays              tells us to gather and print CDFs for delays\n"
operator|+
literal|"                     from job submit to job start\n"
operator|+
literal|"-runtimes            prints CDFs of job wallclock times [launch\n"
operator|+
literal|"                     to finish]\n"
operator|+
literal|"-tasktimes           prints CDFs of job wallclock times [launch\n"
operator|+
literal|"                     to finish]\n\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|HadoopLogsAnalyzer ()
specifier|public
name|HadoopLogsAnalyzer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|pathIsDirectory (Path p)
specifier|private
name|boolean
name|pathIsDirectory
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isDirectory
argument_list|()
return|;
block|}
comment|/**    * @param args    *          string arguments. See {@code usage()}    * @throws FileNotFoundException    * @throws IOException    */
DECL|method|initializeHadoopLogsAnalyzer (String[] args)
specifier|private
name|int
name|initializeHadoopLogsAnalyzer
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Path
name|jobTraceFilename
init|=
literal|null
decl_stmt|;
name|Path
name|topologyFilename
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
operator|||
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No input specified."
argument_list|)
throw|;
block|}
else|else
block|{
name|inputFilename
operator|=
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
operator|-
operator|(
name|inputFilename
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-h"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
operator|||
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-help"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-c"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
operator|||
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-collect-prefixes"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|collecting
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
comment|// these control the job digest
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-write-job-trace"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|jobTraceFilename
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-single-line-job-traces"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|prettyprintTrace
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-omit-task-details"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|omitTaskDetails
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-write-topology"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|topologyFilename
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-job-digest-spectra"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
operator|++
name|i
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|args
operator|.
name|length
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|args
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Empty -job-digest-spectra list"
argument_list|)
throw|;
block|}
name|attemptTimesPercentiles
operator|=
operator|new
name|int
index|[
name|values
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|lastValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|attemptTimesPercentiles
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|values
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|<=
name|lastValue
operator|||
name|values
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|>=
literal|100
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad -job-digest-spectra percentiles list"
argument_list|)
throw|;
block|}
name|attemptTimesPercentiles
index|[
name|j
index|]
operator|=
name|values
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
operator|--
name|i
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-d"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
operator|||
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-debug"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|debug
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-spreads"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|int
name|min
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
operator|+
literal|2
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|<
name|max
operator|&&
name|min
operator|<
literal|1000
operator|&&
name|max
operator|<
literal|1000
condition|)
block|{
name|spreadMin
operator|=
name|min
expr_stmt|;
name|spreadMax
operator|=
name|max
expr_stmt|;
name|spreading
operator|=
literal|true
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
continue|continue;
block|}
comment|// These control log-wide CDF outputs
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-delays"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|delays
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-runtimes"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|runtimes
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-tasktimes"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|collectTaskTimes
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-v1"
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|version
operator|=
literal|1
expr_stmt|;
continue|continue;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized argument: "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
throw|;
block|}
name|runTimeDists
operator|=
name|newDistributionBlock
argument_list|()
expr_stmt|;
name|delayTimeDists
operator|=
name|newDistributionBlock
argument_list|()
expr_stmt|;
name|mapTimeSpreadDists
operator|=
name|newDistributionBlock
argument_list|(
literal|"map-time-spreads"
argument_list|)
expr_stmt|;
name|shuffleTimeSpreadDists
operator|=
name|newDistributionBlock
argument_list|()
expr_stmt|;
name|sortTimeSpreadDists
operator|=
name|newDistributionBlock
argument_list|()
expr_stmt|;
name|reduceTimeSpreadDists
operator|=
name|newDistributionBlock
argument_list|()
expr_stmt|;
name|mapTimeDists
operator|=
name|newDistributionBlock
argument_list|()
expr_stmt|;
name|shuffleTimeDists
operator|=
name|newDistributionBlock
argument_list|()
expr_stmt|;
name|sortTimeDists
operator|=
name|newDistributionBlock
argument_list|()
expr_stmt|;
name|reduceTimeDists
operator|=
name|newDistributionBlock
argument_list|()
expr_stmt|;
name|taskAttemptStartTimes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|taskReduceAttemptShuffleEndTimes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|taskReduceAttemptSortEndTimes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|taskMapAttemptFinishTimes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|taskReduceAttemptFinishTimes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|inputFilename
argument_list|)
decl_stmt|;
name|inputIsDirectory
operator|=
name|pathIsDirectory
argument_list|(
name|inputPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobTraceFilename
operator|!=
literal|null
operator|&&
name|attemptTimesPercentiles
operator|==
literal|null
condition|)
block|{
name|attemptTimesPercentiles
operator|=
operator|new
name|int
index|[
literal|19
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
operator|++
name|i
control|)
block|{
name|attemptTimesPercentiles
index|[
name|i
index|]
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|5
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|inputIsDirectory
condition|)
block|{
name|input
operator|=
name|maybeUncompressedPath
argument_list|(
name|inputPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inputDirectoryPath
operator|=
name|inputPath
expr_stmt|;
name|FileSystem
name|fs
init|=
name|inputPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|inputPath
argument_list|)
decl_stmt|;
name|inputDirectoryFiles
operator|=
operator|new
name|String
index|[
name|statuses
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|statuses
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|inputDirectoryFiles
index|[
name|i
index|]
operator|=
name|statuses
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
comment|// filter out the .crc files, if any
name|int
name|dropPoint
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputDirectoryFiles
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|String
name|name
init|=
name|inputDirectoryFiles
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|name
operator|.
name|length
argument_list|()
operator|>=
literal|4
operator|&&
literal|".crc"
operator|.
name|equals
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|inputDirectoryFiles
index|[
name|dropPoint
operator|++
index|]
operator|=
name|name
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"We dropped "
operator|+
operator|(
name|inputDirectoryFiles
operator|.
name|length
operator|-
name|dropPoint
operator|)
operator|+
literal|" crc files."
argument_list|)
expr_stmt|;
name|String
index|[]
name|new_inputDirectoryFiles
init|=
operator|new
name|String
index|[
name|dropPoint
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|inputDirectoryFiles
argument_list|,
literal|0
argument_list|,
name|new_inputDirectoryFiles
argument_list|,
literal|0
argument_list|,
name|dropPoint
argument_list|)
expr_stmt|;
name|inputDirectoryFiles
operator|=
name|new_inputDirectoryFiles
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|inputDirectoryFiles
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|setNextDirectoryInputStream
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Empty directory specified."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|jobTraceFilename
operator|!=
literal|null
condition|)
block|{
name|jobTraceGen
operator|=
operator|new
name|DefaultOutputter
argument_list|<
name|LoggedJob
argument_list|>
argument_list|()
expr_stmt|;
name|jobTraceGen
operator|.
name|init
argument_list|(
name|jobTraceFilename
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|topologyFilename
operator|!=
literal|null
condition|)
block|{
name|topologyGen
operator|=
operator|new
name|DefaultOutputter
argument_list|<
name|LoggedNetworkTopology
argument_list|>
argument_list|()
expr_stmt|;
name|topologyGen
operator|.
name|init
argument_list|(
name|topologyFilename
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|maybeUncompressedPath (Path p)
specifier|private
name|LineReader
name|maybeUncompressedPath
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|CompressionCodecFactory
name|codecs
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|inputCodec
operator|=
name|codecs
operator|.
name|getCodec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fileIn
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputCodec
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|LineReader
argument_list|(
name|fileIn
argument_list|,
name|getConf
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|inputDecompressor
operator|=
name|CodecPool
operator|.
name|getDecompressor
argument_list|(
name|inputCodec
argument_list|)
expr_stmt|;
return|return
operator|new
name|LineReader
argument_list|(
name|inputCodec
operator|.
name|createInputStream
argument_list|(
name|fileIn
argument_list|,
name|inputDecompressor
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|setNextDirectoryInputStream ()
specifier|private
name|boolean
name|setNextDirectoryInputStream
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"File closed: "
operator|+
name|currentFileName
argument_list|)
expr_stmt|;
name|input
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|inputCodec
operator|!=
literal|null
condition|)
block|{
name|CodecPool
operator|.
name|returnDecompressor
argument_list|(
name|inputDecompressor
argument_list|)
expr_stmt|;
name|inputDecompressor
operator|=
literal|null
expr_stmt|;
name|inputCodec
operator|=
literal|null
expr_stmt|;
block|}
operator|++
name|inputDirectoryCursor
expr_stmt|;
if|if
condition|(
name|inputDirectoryCursor
operator|>=
name|inputDirectoryFiles
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
name|fileFirstLine
operator|=
literal|true
expr_stmt|;
name|currentFileName
operator|=
name|inputDirectoryFiles
index|[
name|inputDirectoryCursor
index|]
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"\nOpening file "
operator|+
name|currentFileName
operator|+
literal|"  *************************** ."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"This file, "
operator|+
operator|(
name|inputDirectoryCursor
operator|+
literal|1
operator|)
operator|+
literal|"/"
operator|+
name|inputDirectoryFiles
operator|.
name|length
operator|+
literal|", starts with line "
operator|+
name|lineNumber
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|input
operator|=
name|maybeUncompressedPath
argument_list|(
operator|new
name|Path
argument_list|(
name|inputDirectoryPath
argument_list|,
name|currentFileName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|readInputLine ()
specifier|private
name|String
name|readInputLine
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|inputLineText
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|readLine
argument_list|(
name|inputLineText
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|inputLineText
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|readCountedLine ()
specifier|private
name|String
name|readCountedLine
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|rereadableLine
operator|!=
literal|null
condition|)
block|{
name|String
name|result
init|=
name|rereadableLine
decl_stmt|;
name|rereadableLine
operator|=
literal|null
expr_stmt|;
return|return
name|result
return|;
block|}
name|String
name|result
init|=
name|readInputLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fileFirstLine
operator|&&
operator|(
name|result
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|result
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'\f'
operator|)
condition|)
block|{
name|fileFirstLine
operator|=
literal|false
expr_stmt|;
name|rereadableLine
operator|=
name|result
expr_stmt|;
return|return
literal|"\f!!FILE "
operator|+
name|currentFileName
operator|+
literal|"!!\n"
return|;
block|}
name|fileFirstLine
operator|=
literal|false
expr_stmt|;
operator|++
name|lineNumber
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputIsDirectory
operator|&&
name|setNextDirectoryInputStream
argument_list|()
condition|)
block|{
name|result
operator|=
name|readCountedLine
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|unreadCountedLine (String unreadee)
specifier|private
name|void
name|unreadCountedLine
parameter_list|(
name|String
name|unreadee
parameter_list|)
block|{
if|if
condition|(
name|rereadableLine
operator|==
literal|null
condition|)
block|{
name|rereadableLine
operator|=
name|unreadee
expr_stmt|;
block|}
block|}
DECL|method|apparentConfFileHeader (String header)
specifier|private
name|boolean
name|apparentConfFileHeader
parameter_list|(
name|String
name|header
parameter_list|)
block|{
return|return
name|confFileHeader
operator|.
name|matcher
argument_list|(
name|header
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
DECL|method|apparentXMLFileStart (String line)
specifier|private
name|boolean
name|apparentXMLFileStart
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|xmlFilePrefix
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|lookingAt
argument_list|()
return|;
block|}
comment|// This can return either the Pair of the !!file line and the XMLconf
comment|// file, or null and an ordinary line. Returns just null if there's
comment|// no more input.
DECL|method|readBalancedLine ()
specifier|private
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readBalancedLine
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|line
init|=
name|readCountedLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
while|while
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|'\f'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
name|line
operator|.
name|indexOf
argument_list|(
literal|'\f'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|&&
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\f'
condition|)
block|{
name|String
name|subjectLine
init|=
name|readCountedLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjectLine
operator|!=
literal|null
operator|&&
name|subjectLine
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|&&
name|apparentConfFileHeader
argument_list|(
name|line
argument_list|)
operator|&&
name|apparentXMLFileStart
argument_list|(
name|subjectLine
argument_list|)
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|subjectLine
operator|!=
literal|null
operator|&&
name|subjectLine
operator|.
name|indexOf
argument_list|(
literal|'\f'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|subjectLine
operator|=
name|subjectLine
operator|.
name|substring
argument_list|(
name|subjectLine
operator|.
name|indexOf
argument_list|(
literal|'\f'
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|subjectLine
operator|!=
literal|null
operator|&&
operator|(
name|subjectLine
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|subjectLine
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'\f'
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|subjectLine
argument_list|)
expr_stmt|;
name|subjectLine
operator|=
name|readCountedLine
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|subjectLine
operator|!=
literal|null
condition|)
block|{
name|unreadCountedLine
argument_list|(
name|subjectLine
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|line
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|// here we had a file line, but it introduced a log segment, not
comment|// a conf file. We want to just ignore the file line.
return|return
name|readBalancedLine
argument_list|()
return|;
block|}
name|String
name|endlineString
init|=
operator|(
name|version
operator|==
literal|0
condition|?
literal|" "
else|:
literal|" ."
operator|)
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|<
name|endlineString
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|null
argument_list|,
name|line
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|endlineString
operator|.
name|equals
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|line
operator|.
name|length
argument_list|()
operator|-
name|endlineString
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|addedLine
decl_stmt|;
do|do
block|{
name|addedLine
operator|=
name|readCountedLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|addedLine
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|null
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
while|while
condition|(
name|addedLine
operator|.
name|indexOf
argument_list|(
literal|'\f'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|addedLine
operator|=
name|addedLine
operator|.
name|substring
argument_list|(
name|addedLine
operator|.
name|indexOf
argument_list|(
literal|'\f'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addedLine
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|addedLine
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\f'
condition|)
block|{
name|unreadCountedLine
argument_list|(
name|addedLine
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|null
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|addedLine
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|endlineString
operator|.
name|equals
argument_list|(
name|addedLine
operator|.
name|substring
argument_list|(
name|addedLine
operator|.
name|length
argument_list|()
operator|-
name|endlineString
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
condition|)
do|;
name|line
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|null
argument_list|,
name|line
argument_list|)
return|;
block|}
DECL|method|incorporateSpread (Histogram taskTimes, Histogram[][] spreadTo, JobOutcome outcome, LoggedJob.JobType jtype)
specifier|private
name|void
name|incorporateSpread
parameter_list|(
name|Histogram
name|taskTimes
parameter_list|,
name|Histogram
index|[]
index|[]
name|spreadTo
parameter_list|,
name|JobOutcome
name|outcome
parameter_list|,
name|LoggedJob
operator|.
name|JobType
name|jtype
parameter_list|)
block|{
if|if
condition|(
operator|!
name|spreading
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|taskTimes
operator|.
name|getTotalCount
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return;
block|}
comment|// there are some literals here that probably should be options
name|int
index|[]
name|endpoints
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
name|endpoints
index|[
literal|0
index|]
operator|=
name|spreadMin
expr_stmt|;
name|endpoints
index|[
literal|1
index|]
operator|=
name|spreadMax
expr_stmt|;
name|long
index|[]
name|endpointKeys
init|=
name|taskTimes
operator|.
name|getCDF
argument_list|(
literal|1000
argument_list|,
name|endpoints
argument_list|)
decl_stmt|;
name|int
name|smallResultOffset
init|=
operator|(
name|taskTimes
operator|.
name|getTotalCount
argument_list|()
operator|<
name|SMALL_SPREAD_COMPENSATION_THRESHOLD
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|Histogram
name|myTotal
init|=
name|spreadTo
index|[
name|outcome
operator|.
name|ordinal
argument_list|()
index|]
index|[
name|jtype
operator|.
name|ordinal
argument_list|()
index|]
decl_stmt|;
name|long
name|dividend
init|=
name|endpointKeys
index|[
literal|2
operator|+
name|smallResultOffset
index|]
decl_stmt|;
name|long
name|divisor
init|=
name|endpointKeys
index|[
literal|1
operator|-
name|smallResultOffset
index|]
decl_stmt|;
if|if
condition|(
name|divisor
operator|>
literal|0
condition|)
block|{
name|long
name|mytotalRatio
init|=
name|dividend
operator|*
literal|1000000L
operator|/
name|divisor
decl_stmt|;
name|myTotal
operator|.
name|enter
argument_list|(
name|mytotalRatio
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|canonicalDistributionsEnter (Histogram[][] block, JobOutcome outcome, LoggedJob.JobType type, long value)
specifier|private
name|void
name|canonicalDistributionsEnter
parameter_list|(
name|Histogram
index|[]
index|[]
name|block
parameter_list|,
name|JobOutcome
name|outcome
parameter_list|,
name|LoggedJob
operator|.
name|JobType
name|type
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|getDistribution
argument_list|(
name|block
argument_list|,
name|outcome
argument_list|,
name|type
argument_list|)
operator|.
name|enter
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|getDistribution
argument_list|(
name|block
argument_list|,
name|JobOutcome
operator|.
name|OVERALL
argument_list|,
name|type
argument_list|)
operator|.
name|enter
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|getDistribution
argument_list|(
name|block
argument_list|,
name|outcome
argument_list|,
name|LoggedJob
operator|.
name|JobType
operator|.
name|OVERALL
argument_list|)
operator|.
name|enter
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|getDistribution
argument_list|(
name|block
argument_list|,
name|JobOutcome
operator|.
name|OVERALL
argument_list|,
name|LoggedJob
operator|.
name|JobType
operator|.
name|OVERALL
argument_list|)
operator|.
name|enter
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|processJobLine (ParsedLine line)
specifier|private
name|void
name|processJobLine
parameter_list|(
name|ParsedLine
name|line
parameter_list|)
throws|throws
name|JsonProcessingException
throws|,
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|version
operator|==
literal|0
operator|||
name|version
operator|==
literal|1
condition|)
block|{
comment|// determine the job type if this is the declaration line
name|String
name|jobID
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOBID"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|line
operator|.
name|get
argument_list|(
literal|"USER"
argument_list|)
decl_stmt|;
name|String
name|jobPriority
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOB_PRIORITY"
argument_list|)
decl_stmt|;
name|String
name|submitTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"SUBMIT_TIME"
argument_list|)
decl_stmt|;
name|String
name|jobName
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOBNAME"
argument_list|)
decl_stmt|;
name|String
name|launchTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"LAUNCH_TIME"
argument_list|)
decl_stmt|;
name|String
name|finishTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FINISH_TIME"
argument_list|)
decl_stmt|;
name|String
name|status
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOB_STATUS"
argument_list|)
decl_stmt|;
name|String
name|totalMaps
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TOTAL_MAPS"
argument_list|)
decl_stmt|;
name|String
name|totalReduces
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TOTAL_REDUCES"
argument_list|)
decl_stmt|;
comment|/*          * If the job appears new [the ID is different from the most recent one,          * if any] we make a new LoggedJob.          */
if|if
condition|(
name|jobID
operator|!=
literal|null
operator|&&
name|jobTraceGen
operator|!=
literal|null
operator|&&
operator|(
name|jobBeingTraced
operator|==
literal|null
operator|||
operator|!
name|jobID
operator|.
name|equals
argument_list|(
name|jobBeingTraced
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// push out the old job if there is one, even though it did't get
comment|// mated
comment|// with a conf.
name|finalizeJob
argument_list|()
expr_stmt|;
name|jobBeingTraced
operator|=
operator|new
name|LoggedJob
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
name|tasksInCurrentJob
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LoggedTask
argument_list|>
argument_list|()
expr_stmt|;
name|attemptsInCurrentJob
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LoggedTaskAttempt
argument_list|>
argument_list|()
expr_stmt|;
comment|// initialize all the per-job statistics gathering places
name|successfulMapAttemptTimes
operator|=
operator|new
name|Histogram
index|[
name|ParsedHost
operator|.
name|numberOfDistances
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|successfulMapAttemptTimes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|successfulMapAttemptTimes
index|[
name|i
index|]
operator|=
operator|new
name|Histogram
argument_list|()
expr_stmt|;
block|}
name|successfulReduceAttemptTimes
operator|=
operator|new
name|Histogram
argument_list|()
expr_stmt|;
name|failedMapAttemptTimes
operator|=
operator|new
name|Histogram
index|[
name|ParsedHost
operator|.
name|numberOfDistances
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|failedMapAttemptTimes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|failedMapAttemptTimes
index|[
name|i
index|]
operator|=
operator|new
name|Histogram
argument_list|()
expr_stmt|;
block|}
name|failedReduceAttemptTimes
operator|=
operator|new
name|Histogram
argument_list|()
expr_stmt|;
name|successfulNthMapperAttempts
operator|=
operator|new
name|Histogram
argument_list|()
expr_stmt|;
name|successfulNthReducerAttempts
operator|=
operator|new
name|Histogram
argument_list|()
expr_stmt|;
name|mapperLocality
operator|=
operator|new
name|Histogram
argument_list|()
expr_stmt|;
block|}
comment|// here we fill in all the stuff the trace might need
if|if
condition|(
name|jobBeingTraced
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|jobBeingTraced
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jobPriority
operator|!=
literal|null
condition|)
block|{
name|jobBeingTraced
operator|.
name|setPriority
argument_list|(
name|LoggedJob
operator|.
name|JobPriority
operator|.
name|valueOf
argument_list|(
name|jobPriority
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|totalMaps
operator|!=
literal|null
condition|)
block|{
name|jobBeingTraced
operator|.
name|setTotalMaps
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|totalMaps
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|totalReduces
operator|!=
literal|null
condition|)
block|{
name|jobBeingTraced
operator|.
name|setTotalReduces
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|totalReduces
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|submitTime
operator|!=
literal|null
condition|)
block|{
name|jobBeingTraced
operator|.
name|setSubmitTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|submitTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|launchTime
operator|!=
literal|null
condition|)
block|{
name|jobBeingTraced
operator|.
name|setLaunchTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|launchTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|finishTime
operator|!=
literal|null
condition|)
block|{
name|jobBeingTraced
operator|.
name|setFinishTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|finishTime
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|jobBeingTraced
operator|.
name|setOutcome
argument_list|(
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|valueOf
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|maybeMateJobAndConf
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jobName
operator|!=
literal|null
condition|)
block|{
comment|// we'll make it java unless the name parses out
name|Matcher
name|m
init|=
name|streamingJobnamePattern
operator|.
name|matcher
argument_list|(
name|jobName
argument_list|)
decl_stmt|;
name|thisJobType
operator|=
name|LoggedJob
operator|.
name|JobType
operator|.
name|JAVA
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|thisJobType
operator|=
name|LoggedJob
operator|.
name|JobType
operator|.
name|STREAMING
expr_stmt|;
block|}
block|}
if|if
condition|(
name|submitTime
operator|!=
literal|null
condition|)
block|{
name|submitTimeCurrentJob
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|submitTime
argument_list|)
expr_stmt|;
name|currentJobID
operator|=
name|jobID
expr_stmt|;
name|taskAttemptStartTimes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|taskReduceAttemptShuffleEndTimes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|taskReduceAttemptSortEndTimes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|taskMapAttemptFinishTimes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|taskReduceAttemptFinishTimes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|launchTimeCurrentJob
operator|=
literal|0L
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|launchTime
operator|!=
literal|null
operator|&&
name|jobID
operator|!=
literal|null
operator|&&
name|currentJobID
operator|.
name|equals
argument_list|(
name|jobID
argument_list|)
condition|)
block|{
name|launchTimeCurrentJob
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|launchTime
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|finishTime
operator|!=
literal|null
operator|&&
name|jobID
operator|!=
literal|null
operator|&&
name|currentJobID
operator|.
name|equals
argument_list|(
name|jobID
argument_list|)
condition|)
block|{
name|long
name|endTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|finishTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|launchTimeCurrentJob
operator|!=
literal|0
condition|)
block|{
name|String
name|jobResultText
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOB_STATUS"
argument_list|)
decl_stmt|;
name|JobOutcome
name|thisOutcome
init|=
operator|(
operator|(
name|jobResultText
operator|!=
literal|null
operator|&&
literal|"SUCCESS"
operator|.
name|equals
argument_list|(
name|jobResultText
argument_list|)
operator|)
condition|?
name|JobOutcome
operator|.
name|SUCCESS
else|:
name|JobOutcome
operator|.
name|FAILURE
operator|)
decl_stmt|;
if|if
condition|(
name|submitTimeCurrentJob
operator|!=
literal|0L
condition|)
block|{
name|canonicalDistributionsEnter
argument_list|(
name|delayTimeDists
argument_list|,
name|thisOutcome
argument_list|,
name|thisJobType
argument_list|,
name|launchTimeCurrentJob
operator|-
name|submitTimeCurrentJob
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|launchTimeCurrentJob
operator|!=
literal|0L
condition|)
block|{
name|canonicalDistributionsEnter
argument_list|(
name|runTimeDists
argument_list|,
name|thisOutcome
argument_list|,
name|thisJobType
argument_list|,
name|endTime
operator|-
name|launchTimeCurrentJob
argument_list|)
expr_stmt|;
block|}
comment|// Now we process the hash tables with successful task attempts
name|Histogram
name|currentJobMapTimes
init|=
operator|new
name|Histogram
argument_list|()
decl_stmt|;
name|Histogram
name|currentJobShuffleTimes
init|=
operator|new
name|Histogram
argument_list|()
decl_stmt|;
name|Histogram
name|currentJobSortTimes
init|=
operator|new
name|Histogram
argument_list|()
decl_stmt|;
name|Histogram
name|currentJobReduceTimes
init|=
operator|new
name|Histogram
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|taskIter
init|=
name|taskAttemptStartTimes
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|taskIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
init|=
name|taskIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Map processing
name|Long
name|mapEndTime
init|=
name|taskMapAttemptFinishTimes
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapEndTime
operator|!=
literal|null
condition|)
block|{
name|currentJobMapTimes
operator|.
name|enter
argument_list|(
name|mapEndTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
name|canonicalDistributionsEnter
argument_list|(
name|mapTimeDists
argument_list|,
name|thisOutcome
argument_list|,
name|thisJobType
argument_list|,
name|mapEndTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
comment|// Reduce processing
name|Long
name|shuffleEnd
init|=
name|taskReduceAttemptShuffleEndTimes
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|sortEnd
init|=
name|taskReduceAttemptSortEndTimes
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|reduceEnd
init|=
name|taskReduceAttemptFinishTimes
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shuffleEnd
operator|!=
literal|null
operator|&&
name|sortEnd
operator|!=
literal|null
operator|&&
name|reduceEnd
operator|!=
literal|null
condition|)
block|{
name|currentJobShuffleTimes
operator|.
name|enter
argument_list|(
name|shuffleEnd
operator|-
name|startTime
argument_list|)
expr_stmt|;
name|currentJobSortTimes
operator|.
name|enter
argument_list|(
name|sortEnd
operator|-
name|shuffleEnd
argument_list|)
expr_stmt|;
name|currentJobReduceTimes
operator|.
name|enter
argument_list|(
name|reduceEnd
operator|-
name|sortEnd
argument_list|)
expr_stmt|;
name|canonicalDistributionsEnter
argument_list|(
name|shuffleTimeDists
argument_list|,
name|thisOutcome
argument_list|,
name|thisJobType
argument_list|,
name|shuffleEnd
operator|-
name|startTime
argument_list|)
expr_stmt|;
name|canonicalDistributionsEnter
argument_list|(
name|sortTimeDists
argument_list|,
name|thisOutcome
argument_list|,
name|thisJobType
argument_list|,
name|sortEnd
operator|-
name|shuffleEnd
argument_list|)
expr_stmt|;
name|canonicalDistributionsEnter
argument_list|(
name|reduceTimeDists
argument_list|,
name|thisOutcome
argument_list|,
name|thisJobType
argument_list|,
name|reduceEnd
operator|-
name|sortEnd
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Here we save out the task information
name|incorporateSpread
argument_list|(
name|currentJobMapTimes
argument_list|,
name|mapTimeSpreadDists
argument_list|,
name|thisOutcome
argument_list|,
name|thisJobType
argument_list|)
expr_stmt|;
name|incorporateSpread
argument_list|(
name|currentJobShuffleTimes
argument_list|,
name|shuffleTimeSpreadDists
argument_list|,
name|thisOutcome
argument_list|,
name|thisJobType
argument_list|)
expr_stmt|;
name|incorporateSpread
argument_list|(
name|currentJobSortTimes
argument_list|,
name|sortTimeSpreadDists
argument_list|,
name|thisOutcome
argument_list|,
name|thisJobType
argument_list|)
expr_stmt|;
name|incorporateSpread
argument_list|(
name|currentJobReduceTimes
argument_list|,
name|reduceTimeSpreadDists
argument_list|,
name|thisOutcome
argument_list|,
name|thisJobType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"HadoopLogsAnalyzer.processJobLine: bad numerical format, at line "
operator|+
name|lineNumber
operator|+
literal|"."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processTaskLine (ParsedLine line)
specifier|private
name|void
name|processTaskLine
parameter_list|(
name|ParsedLine
name|line
parameter_list|)
block|{
if|if
condition|(
name|jobBeingTraced
operator|!=
literal|null
condition|)
block|{
comment|// these fields are in both the start and finish record
name|String
name|taskID
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TASKID"
argument_list|)
decl_stmt|;
name|String
name|taskType
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TASK_TYPE"
argument_list|)
decl_stmt|;
comment|// this field is only in the start record
name|String
name|startTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"START_TIME"
argument_list|)
decl_stmt|;
comment|// these fields only exist or are only relevant in the finish record
name|String
name|status
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TASK_STATUS"
argument_list|)
decl_stmt|;
name|String
name|finishTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FINISH_TIME"
argument_list|)
decl_stmt|;
name|String
name|splits
init|=
name|line
operator|.
name|get
argument_list|(
literal|"SPLITS"
argument_list|)
decl_stmt|;
name|LoggedTask
name|task
init|=
name|tasksInCurrentJob
operator|.
name|get
argument_list|(
name|taskID
argument_list|)
decl_stmt|;
name|boolean
name|taskAlreadyLogged
init|=
name|task
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|task
operator|=
operator|new
name|LoggedTask
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|splits
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|LoggedLocation
argument_list|>
name|locations
init|=
literal|null
decl_stmt|;
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|splits
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|countTokens
argument_list|()
operator|<=
name|MAXIMUM_PREFERRED_LOCATIONS
condition|)
block|{
name|locations
operator|=
operator|new
name|ArrayList
argument_list|<
name|LoggedLocation
argument_list|>
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|nextSplit
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|ParsedHost
name|node
init|=
name|getAndRecordParsedHost
argument_list|(
name|nextSplit
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|node
operator|!=
literal|null
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|node
operator|.
name|makeLoggedLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|task
operator|.
name|setPreferredLocations
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|setTaskID
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
if|if
condition|(
name|startTime
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|setStartTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|finishTime
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|setFinishTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|finishTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Pre21JobHistoryConstants
operator|.
name|Values
name|typ
decl_stmt|;
name|Pre21JobHistoryConstants
operator|.
name|Values
name|stat
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|status
operator|==
literal|null
condition|?
literal|null
else|:
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|valueOf
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A task status you don't know about is \""
operator|+
name|status
operator|+
literal|"\"."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stat
operator|=
literal|null
expr_stmt|;
block|}
name|task
operator|.
name|setTaskStatus
argument_list|(
name|stat
argument_list|)
expr_stmt|;
try|try
block|{
name|typ
operator|=
name|taskType
operator|==
literal|null
condition|?
literal|null
else|:
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|valueOf
argument_list|(
name|taskType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A task type you don't know about is \""
operator|+
name|taskType
operator|+
literal|"\"."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|typ
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|typ
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|task
operator|.
name|setTaskType
argument_list|(
name|typ
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|vec
init|=
name|typ
operator|==
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|MAP
condition|?
name|jobBeingTraced
operator|.
name|getMapTasks
argument_list|()
else|:
name|typ
operator|==
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|REDUCE
condition|?
name|jobBeingTraced
operator|.
name|getReduceTasks
argument_list|()
else|:
name|jobBeingTraced
operator|.
name|getOtherTasks
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|taskAlreadyLogged
condition|)
block|{
name|vec
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|tasksInCurrentJob
operator|.
name|put
argument_list|(
name|taskID
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|counterPattern (String counterName)
specifier|private
name|Pattern
name|counterPattern
parameter_list|(
name|String
name|counterName
parameter_list|)
block|{
name|Pattern
name|result
init|=
name|counterPatterns
operator|.
name|get
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|String
name|namePatternRegex
init|=
literal|"\\[\\("
operator|+
name|counterName
operator|+
literal|"\\)\\([^)]+\\)\\(([0-9]+)\\)\\]"
decl_stmt|;
name|result
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|namePatternRegex
argument_list|)
expr_stmt|;
name|counterPatterns
operator|.
name|put
argument_list|(
name|counterName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|parseCounter (String counterString, String counterName)
specifier|private
name|String
name|parseCounter
parameter_list|(
name|String
name|counterString
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
if|if
condition|(
name|counterString
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Matcher
name|mat
init|=
name|counterPattern
argument_list|(
name|counterName
argument_list|)
operator|.
name|matcher
argument_list|(
name|counterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|class|SetField
specifier|abstract
class|class
name|SetField
block|{
DECL|field|attempt
name|LoggedTaskAttempt
name|attempt
decl_stmt|;
DECL|method|SetField (LoggedTaskAttempt attempt)
name|SetField
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|)
block|{
name|this
operator|.
name|attempt
operator|=
name|attempt
expr_stmt|;
block|}
DECL|method|set (long value)
specifier|abstract
name|void
name|set
parameter_list|(
name|long
name|value
parameter_list|)
function_decl|;
block|}
DECL|method|incorporateCounter (SetField thunk, String counterString, String counterName)
specifier|private
name|void
name|incorporateCounter
parameter_list|(
name|SetField
name|thunk
parameter_list|,
name|String
name|counterString
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
name|String
name|valueString
init|=
name|parseCounter
argument_list|(
name|counterString
argument_list|,
name|counterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueString
operator|!=
literal|null
condition|)
block|{
name|thunk
operator|.
name|set
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|valueString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|incorporateCounters (LoggedTaskAttempt attempt2, String counterString)
specifier|private
name|void
name|incorporateCounters
parameter_list|(
name|LoggedTaskAttempt
name|attempt2
parameter_list|,
name|String
name|counterString
parameter_list|)
block|{
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|hdfsBytesRead
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"HDFS_BYTES_READ"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|hdfsBytesWritten
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"HDFS_BYTES_WRITTEN"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|fileBytesRead
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"FILE_BYTES_READ"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|fileBytesWritten
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"FILE_BYTES_WRITTEN"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|mapInputBytes
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"MAP_INPUT_BYTES"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|mapInputRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"MAP_INPUT_RECORDS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|mapOutputBytes
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"MAP_OUTPUT_BYTES"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|mapOutputRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"MAP_OUTPUT_RECORDS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|combineInputRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"COMBINE_INPUT_RECORDS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|reduceInputGroups
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"REDUCE_INPUT_GROUPS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|reduceInputRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"REDUCE_INPUT_RECORDS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|reduceShuffleBytes
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"REDUCE_SHUFFLE_BYTES"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|reduceOutputRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"REDUCE_OUTPUT_RECORDS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|spilledRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"SPILLED_RECORDS"
argument_list|)
expr_stmt|;
comment|// incorporate CPU usage
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|getResourceUsageMetrics
argument_list|()
operator|.
name|setCumulativeCpuUsage
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"CPU_MILLISECONDS"
argument_list|)
expr_stmt|;
comment|// incorporate virtual memory usage
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|getResourceUsageMetrics
argument_list|()
operator|.
name|setVirtualMemoryUsage
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"VIRTUAL_MEMORY_BYTES"
argument_list|)
expr_stmt|;
comment|// incorporate physical memory usage
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|getResourceUsageMetrics
argument_list|()
operator|.
name|setPhysicalMemoryUsage
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"PHYSICAL_MEMORY_BYTES"
argument_list|)
expr_stmt|;
comment|// incorporate heap usage
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|attempt2
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|getResourceUsageMetrics
argument_list|()
operator|.
name|setHeapUsage
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|counterString
argument_list|,
literal|"COMMITTED_HEAP_BYTES"
argument_list|)
expr_stmt|;
block|}
DECL|method|getAndRecordParsedHost (String hostName)
specifier|private
name|ParsedHost
name|getAndRecordParsedHost
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|ParsedHost
name|result
init|=
name|ParsedHost
operator|.
name|parse
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|allHosts
operator|.
name|contains
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|allHosts
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|processMapAttemptLine (ParsedLine line)
specifier|private
name|void
name|processMapAttemptLine
parameter_list|(
name|ParsedLine
name|line
parameter_list|)
block|{
name|String
name|attemptID
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TASK_ATTEMPT_ID"
argument_list|)
decl_stmt|;
name|String
name|taskID
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TASKID"
argument_list|)
decl_stmt|;
name|String
name|status
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TASK_STATUS"
argument_list|)
decl_stmt|;
name|String
name|attemptStartTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"START_TIME"
argument_list|)
decl_stmt|;
name|String
name|attemptFinishTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FINISH_TIME"
argument_list|)
decl_stmt|;
name|String
name|hostName
init|=
name|line
operator|.
name|get
argument_list|(
literal|"HOSTNAME"
argument_list|)
decl_stmt|;
name|String
name|counters
init|=
name|line
operator|.
name|get
argument_list|(
literal|"COUNTERS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobBeingTraced
operator|!=
literal|null
operator|&&
name|taskID
operator|!=
literal|null
condition|)
block|{
name|LoggedTask
name|task
init|=
name|tasksInCurrentJob
operator|.
name|get
argument_list|(
name|taskID
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|task
operator|=
operator|new
name|LoggedTask
argument_list|()
expr_stmt|;
name|task
operator|.
name|setTaskID
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|getMapTasks
argument_list|()
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|tasksInCurrentJob
operator|.
name|put
argument_list|(
name|taskID
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|setTaskID
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
name|LoggedTaskAttempt
name|attempt
init|=
name|attemptsInCurrentJob
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
name|boolean
name|attemptAlreadyExists
init|=
name|attempt
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
name|attempt
operator|=
operator|new
name|LoggedTaskAttempt
argument_list|()
expr_stmt|;
name|attempt
operator|.
name|setAttemptID
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|attemptAlreadyExists
condition|)
block|{
name|attemptsInCurrentJob
operator|.
name|put
argument_list|(
name|attemptID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|add
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
name|Pre21JobHistoryConstants
operator|.
name|Values
name|stat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|status
operator|==
literal|null
condition|?
literal|null
else|:
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|valueOf
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A map attempt status you don't know about is \""
operator|+
name|status
operator|+
literal|"\"."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stat
operator|=
literal|null
expr_stmt|;
block|}
name|incorporateCounters
argument_list|(
name|attempt
argument_list|,
name|counters
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|setResult
argument_list|(
name|stat
argument_list|)
expr_stmt|;
if|if
condition|(
name|attemptStartTime
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setStartTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptStartTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attemptFinishTime
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setFinishTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptFinishTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|distance
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|hostName
operator|!=
literal|null
condition|)
block|{
name|ParsedHost
name|host
init|=
name|getAndRecordParsedHost
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setHostName
argument_list|(
name|host
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|host
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|setLocation
argument_list|(
name|host
operator|.
name|makeLoggedLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attempt
operator|.
name|setHostName
argument_list|(
name|hostName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|LoggedLocation
argument_list|>
name|locs
init|=
name|task
operator|.
name|getPreferredLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
operator|&&
name|locs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LoggedLocation
name|loc
range|:
name|locs
control|)
block|{
name|ParsedHost
name|preferedLoc
init|=
operator|new
name|ParsedHost
argument_list|(
name|loc
argument_list|)
decl_stmt|;
name|distance
operator|=
name|Math
operator|.
name|min
argument_list|(
name|distance
argument_list|,
name|preferedLoc
operator|.
name|distance
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|mapperLocality
operator|.
name|enter
argument_list|(
name|distance
argument_list|)
expr_stmt|;
block|}
name|distance
operator|=
name|Math
operator|.
name|min
argument_list|(
name|distance
argument_list|,
name|successfulMapAttemptTimes
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getStartTime
argument_list|()
operator|>
literal|0
operator|&&
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|long
name|runtime
init|=
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat
operator|==
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|SUCCESS
condition|)
block|{
name|successfulMapAttemptTimes
index|[
name|distance
index|]
operator|.
name|enter
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stat
operator|==
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|FAILED
condition|)
block|{
name|failedMapAttemptTimes
index|[
name|distance
index|]
operator|.
name|enter
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attemptID
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|matcher
init|=
name|taskAttemptIDPattern
operator|.
name|matcher
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|attemptNumberString
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptNumberString
operator|!=
literal|null
condition|)
block|{
name|int
name|attemptNumber
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|attemptNumberString
argument_list|)
decl_stmt|;
name|successfulNthMapperAttempts
operator|.
name|enter
argument_list|(
name|attemptNumber
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
try|try
block|{
if|if
condition|(
name|attemptStartTime
operator|!=
literal|null
condition|)
block|{
name|long
name|startTimeValue
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptStartTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTimeValue
operator|!=
literal|0
operator|&&
name|startTimeValue
operator|+
name|MAXIMUM_CLOCK_SKEW
operator|>=
name|launchTimeCurrentJob
condition|)
block|{
name|taskAttemptStartTimes
operator|.
name|put
argument_list|(
name|attemptID
argument_list|,
name|startTimeValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskAttemptStartTimes
operator|.
name|remove
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|attemptFinishTime
operator|!=
literal|null
condition|)
block|{
name|long
name|finishTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptFinishTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
literal|"SUCCESS"
argument_list|)
condition|)
block|{
name|taskMapAttemptFinishTimes
operator|.
name|put
argument_list|(
name|attemptID
argument_list|,
name|finishTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"HadoopLogsAnalyzer.processMapAttemptLine: bad numerical format, at line"
operator|+
name|lineNumber
operator|+
literal|"."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processReduceAttemptLine (ParsedLine line)
specifier|private
name|void
name|processReduceAttemptLine
parameter_list|(
name|ParsedLine
name|line
parameter_list|)
block|{
name|String
name|attemptID
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TASK_ATTEMPT_ID"
argument_list|)
decl_stmt|;
name|String
name|taskID
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TASKID"
argument_list|)
decl_stmt|;
name|String
name|status
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TASK_STATUS"
argument_list|)
decl_stmt|;
name|String
name|attemptStartTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"START_TIME"
argument_list|)
decl_stmt|;
name|String
name|attemptFinishTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FINISH_TIME"
argument_list|)
decl_stmt|;
name|String
name|attemptShuffleFinished
init|=
name|line
operator|.
name|get
argument_list|(
literal|"SHUFFLE_FINISHED"
argument_list|)
decl_stmt|;
name|String
name|attemptSortFinished
init|=
name|line
operator|.
name|get
argument_list|(
literal|"SORT_FINISHED"
argument_list|)
decl_stmt|;
name|String
name|counters
init|=
name|line
operator|.
name|get
argument_list|(
literal|"COUNTERS"
argument_list|)
decl_stmt|;
name|String
name|hostName
init|=
name|line
operator|.
name|get
argument_list|(
literal|"HOSTNAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostName
operator|!=
literal|null
operator|&&
operator|!
name|hostNames
operator|.
name|contains
argument_list|(
name|hostName
argument_list|)
condition|)
block|{
name|hostNames
operator|.
name|add
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jobBeingTraced
operator|!=
literal|null
operator|&&
name|taskID
operator|!=
literal|null
condition|)
block|{
name|LoggedTask
name|task
init|=
name|tasksInCurrentJob
operator|.
name|get
argument_list|(
name|taskID
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|task
operator|=
operator|new
name|LoggedTask
argument_list|()
expr_stmt|;
name|task
operator|.
name|setTaskID
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|getReduceTasks
argument_list|()
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|tasksInCurrentJob
operator|.
name|put
argument_list|(
name|taskID
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|setTaskID
argument_list|(
name|taskID
argument_list|)
expr_stmt|;
name|LoggedTaskAttempt
name|attempt
init|=
name|attemptsInCurrentJob
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
name|boolean
name|attemptAlreadyExists
init|=
name|attempt
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
name|attempt
operator|=
operator|new
name|LoggedTaskAttempt
argument_list|()
expr_stmt|;
name|attempt
operator|.
name|setAttemptID
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|attemptAlreadyExists
condition|)
block|{
name|attemptsInCurrentJob
operator|.
name|put
argument_list|(
name|attemptID
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|add
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
name|Pre21JobHistoryConstants
operator|.
name|Values
name|stat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|status
operator|==
literal|null
condition|?
literal|null
else|:
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|valueOf
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"A map attempt status you don't know about is \""
operator|+
name|status
operator|+
literal|"\"."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stat
operator|=
literal|null
expr_stmt|;
block|}
name|incorporateCounters
argument_list|(
name|attempt
argument_list|,
name|counters
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|setResult
argument_list|(
name|stat
argument_list|)
expr_stmt|;
if|if
condition|(
name|attemptStartTime
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setStartTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptStartTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attemptFinishTime
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setFinishTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptFinishTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attemptShuffleFinished
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setShuffleFinished
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptShuffleFinished
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attemptSortFinished
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setSortFinished
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptSortFinished
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attempt
operator|.
name|getStartTime
argument_list|()
operator|>
literal|0
operator|&&
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|long
name|runtime
init|=
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat
operator|==
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|SUCCESS
condition|)
block|{
name|successfulReduceAttemptTimes
operator|.
name|enter
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stat
operator|==
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|FAILED
condition|)
block|{
name|failedReduceAttemptTimes
operator|.
name|enter
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hostName
operator|!=
literal|null
condition|)
block|{
name|ParsedHost
name|host
init|=
name|getAndRecordParsedHost
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setHostName
argument_list|(
name|host
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|host
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attempt
operator|.
name|setHostName
argument_list|(
name|hostName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attemptID
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|matcher
init|=
name|taskAttemptIDPattern
operator|.
name|matcher
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|attemptNumberString
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptNumberString
operator|!=
literal|null
condition|)
block|{
name|int
name|attemptNumber
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|attemptNumberString
argument_list|)
decl_stmt|;
name|successfulNthReducerAttempts
operator|.
name|enter
argument_list|(
name|attemptNumber
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
try|try
block|{
if|if
condition|(
name|attemptStartTime
operator|!=
literal|null
condition|)
block|{
name|long
name|startTimeValue
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptStartTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTimeValue
operator|!=
literal|0
operator|&&
name|startTimeValue
operator|+
name|MAXIMUM_CLOCK_SKEW
operator|>=
name|launchTimeCurrentJob
condition|)
block|{
name|taskAttemptStartTimes
operator|.
name|put
argument_list|(
name|attemptID
argument_list|,
name|startTimeValue
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|equals
argument_list|(
literal|"SUCCESS"
argument_list|)
operator|&&
name|attemptFinishTime
operator|!=
literal|null
condition|)
block|{
name|long
name|finishTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptFinishTime
argument_list|)
decl_stmt|;
name|taskReduceAttemptFinishTimes
operator|.
name|put
argument_list|(
name|attemptID
argument_list|,
name|finishTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|attemptShuffleFinished
operator|!=
literal|null
condition|)
block|{
name|taskReduceAttemptShuffleEndTimes
operator|.
name|put
argument_list|(
name|attemptID
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptShuffleFinished
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attemptSortFinished
operator|!=
literal|null
condition|)
block|{
name|taskReduceAttemptSortEndTimes
operator|.
name|put
argument_list|(
name|attemptID
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|attemptSortFinished
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"HadoopLogsAnalyzer.processReduceAttemptLine: bad numerical format, at line"
operator|+
name|lineNumber
operator|+
literal|"."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processParsedLine (ParsedLine line)
specifier|private
name|void
name|processParsedLine
parameter_list|(
name|ParsedLine
name|line
parameter_list|)
throws|throws
name|JsonProcessingException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|collecting
condition|)
block|{
comment|// "Job", "MapAttempt", "ReduceAttempt", "Task"
name|LogRecordType
name|myType
init|=
name|line
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|myType
operator|==
name|canonicalJob
condition|)
block|{
name|processJobLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|myType
operator|==
name|canonicalTask
condition|)
block|{
name|processTaskLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|myType
operator|==
name|canonicalMapAttempt
condition|)
block|{
name|processMapAttemptLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|myType
operator|==
name|canonicalReduceAttempt
condition|)
block|{
name|processReduceAttemptLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{       }
block|}
block|}
DECL|method|printDistributionSet (String title, Histogram[][] distSet)
specifier|private
name|void
name|printDistributionSet
parameter_list|(
name|String
name|title
parameter_list|,
name|Histogram
index|[]
index|[]
name|distSet
parameter_list|)
block|{
name|statisticalOutput
operator|.
name|print
argument_list|(
name|title
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
comment|// print out buckets
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|JobOutcome
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|LoggedJob
operator|.
name|JobType
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|JobOutcome
name|thisOutcome
init|=
name|JobOutcome
operator|.
name|values
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|LoggedJob
operator|.
name|JobType
name|thisType
init|=
name|LoggedJob
operator|.
name|JobType
operator|.
name|values
argument_list|()
index|[
name|j
index|]
decl_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
literal|"outcome = "
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
name|thisOutcome
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
literal|", and type = "
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
name|thisType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
literal|".\n\n"
argument_list|)
expr_stmt|;
name|Histogram
name|dist
init|=
name|distSet
index|[
name|i
index|]
index|[
name|j
index|]
decl_stmt|;
name|printSingleDistributionData
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|printSingleDistributionData (Histogram dist)
specifier|private
name|void
name|printSingleDistributionData
parameter_list|(
name|Histogram
name|dist
parameter_list|)
block|{
name|int
index|[]
name|percentiles
init|=
operator|new
name|int
index|[
name|numberBuckets
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numberBuckets
condition|;
operator|++
name|k
control|)
block|{
name|percentiles
index|[
name|k
index|]
operator|=
name|k
operator|+
literal|1
expr_stmt|;
block|}
name|long
index|[]
name|cdf
init|=
name|dist
operator|.
name|getCDF
argument_list|(
name|numberBuckets
operator|+
literal|1
argument_list|,
name|percentiles
argument_list|)
decl_stmt|;
if|if
condition|(
name|cdf
operator|==
literal|null
condition|)
block|{
name|statisticalOutput
operator|.
name|print
argument_list|(
literal|"(No data)\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statisticalOutput
operator|.
name|print
argument_list|(
literal|"min:  "
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
name|cdf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numberBuckets
condition|;
operator|++
name|k
control|)
block|{
name|statisticalOutput
operator|.
name|print
argument_list|(
name|percentiles
index|[
name|k
index|]
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
literal|"%   "
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
name|cdf
index|[
name|k
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|statisticalOutput
operator|.
name|print
argument_list|(
literal|"max:  "
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
name|cdf
index|[
name|numberBuckets
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|maybeMateJobAndConf ()
specifier|private
name|void
name|maybeMateJobAndConf
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|jobBeingTraced
operator|!=
literal|null
operator|&&
name|jobconf
operator|!=
literal|null
operator|&&
name|jobBeingTraced
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|jobconf
operator|.
name|jobID
argument_list|)
condition|)
block|{
name|jobBeingTraced
operator|.
name|setHeapMegabytes
argument_list|(
name|jobconf
operator|.
name|heapMegabytes
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setQueue
argument_list|(
name|jobconf
operator|.
name|queue
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setJobName
argument_list|(
name|jobconf
operator|.
name|jobName
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setClusterMapMB
argument_list|(
name|jobconf
operator|.
name|clusterMapMB
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setClusterReduceMB
argument_list|(
name|jobconf
operator|.
name|clusterReduceMB
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setJobMapMB
argument_list|(
name|jobconf
operator|.
name|jobMapMB
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setJobReduceMB
argument_list|(
name|jobconf
operator|.
name|jobReduceMB
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setJobProperties
argument_list|(
name|jobconf
operator|.
name|properties
argument_list|)
expr_stmt|;
name|jobconf
operator|=
literal|null
expr_stmt|;
name|finalizeJob
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|mapCDFArrayList (Histogram[] data)
specifier|private
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|mapCDFArrayList
parameter_list|(
name|Histogram
index|[]
name|data
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Histogram
name|hist
range|:
name|data
control|)
block|{
name|LoggedDiscreteCDF
name|discCDF
init|=
operator|new
name|LoggedDiscreteCDF
argument_list|()
decl_stmt|;
name|discCDF
operator|.
name|setCDF
argument_list|(
name|hist
argument_list|,
name|attemptTimesPercentiles
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|discCDF
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|finalizeJob ()
specifier|private
name|void
name|finalizeJob
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|jobBeingTraced
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|omitTaskDetails
condition|)
block|{
name|jobBeingTraced
operator|.
name|setMapTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setReduceTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setOtherTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// add digest info to the job
name|jobBeingTraced
operator|.
name|setSuccessfulMapAttemptCDFs
argument_list|(
name|mapCDFArrayList
argument_list|(
name|successfulMapAttemptTimes
argument_list|)
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setFailedMapAttemptCDFs
argument_list|(
name|mapCDFArrayList
argument_list|(
name|failedMapAttemptTimes
argument_list|)
argument_list|)
expr_stmt|;
name|LoggedDiscreteCDF
name|discCDF
init|=
operator|new
name|LoggedDiscreteCDF
argument_list|()
decl_stmt|;
name|discCDF
operator|.
name|setCDF
argument_list|(
name|successfulReduceAttemptTimes
argument_list|,
name|attemptTimesPercentiles
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setSuccessfulReduceAttemptCDF
argument_list|(
name|discCDF
argument_list|)
expr_stmt|;
name|discCDF
operator|=
operator|new
name|LoggedDiscreteCDF
argument_list|()
expr_stmt|;
name|discCDF
operator|.
name|setCDF
argument_list|(
name|failedReduceAttemptTimes
argument_list|,
name|attemptTimesPercentiles
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|.
name|setFailedReduceAttemptCDF
argument_list|(
name|discCDF
argument_list|)
expr_stmt|;
name|long
name|totalSuccessfulAttempts
init|=
literal|0L
decl_stmt|;
name|long
name|maxTriesToSucceed
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|ent
range|:
name|successfulNthMapperAttempts
control|)
block|{
name|totalSuccessfulAttempts
operator|+=
name|ent
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|maxTriesToSucceed
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxTriesToSucceed
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|totalSuccessfulAttempts
operator|>
literal|0L
condition|)
block|{
name|double
index|[]
name|successAfterI
init|=
operator|new
name|double
index|[
operator|(
name|int
operator|)
name|maxTriesToSucceed
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|successAfterI
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|successAfterI
index|[
name|i
index|]
operator|=
literal|0.0D
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|ent
range|:
name|successfulNthMapperAttempts
control|)
block|{
name|successAfterI
index|[
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
operator|=
operator|(
operator|(
name|double
operator|)
name|ent
operator|.
name|getValue
argument_list|()
operator|)
operator|/
name|totalSuccessfulAttempts
expr_stmt|;
block|}
name|jobBeingTraced
operator|.
name|setMapperTriesToSucceed
argument_list|(
name|successAfterI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jobBeingTraced
operator|.
name|setMapperTriesToSucceed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|jobTraceGen
operator|.
name|output
argument_list|(
name|jobBeingTraced
argument_list|)
expr_stmt|;
name|jobBeingTraced
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|initializeHadoopLogsAnalyzer
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
name|run
argument_list|()
return|;
block|}
DECL|method|run ()
name|int
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|line
init|=
name|readBalancedLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|debug
operator|&&
operator|(
name|lineNumber
operator|<
literal|1000000L
operator|&&
name|lineNumber
operator|%
literal|1000L
operator|==
literal|0
operator|||
name|lineNumber
operator|%
literal|1000000L
operator|==
literal|0
operator|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|""
operator|+
name|lineNumber
operator|+
literal|" "
operator|+
name|line
operator|.
name|second
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|first
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// HACK ALERT!! It's possible for a Job end line to end a
comment|// job for which we have a config file
comment|// image [ a ParsedConfigFile ] in jobconf.
comment|//
comment|// processParsedLine handles this.
name|processParsedLine
argument_list|(
operator|new
name|ParsedLine
argument_list|(
name|line
operator|.
name|second
argument_list|()
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StringIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"anomalous line #"
operator|+
name|lineNumber
operator|+
literal|":"
operator|+
name|line
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|jobconf
operator|=
operator|new
name|ParsedConfigFile
argument_list|(
name|line
operator|.
name|first
argument_list|()
argument_list|,
name|line
operator|.
name|second
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobconf
operator|.
name|valid
operator|==
literal|false
condition|)
block|{
name|jobconf
operator|=
literal|null
expr_stmt|;
block|}
name|maybeMateJobAndConf
argument_list|()
expr_stmt|;
block|}
name|line
operator|=
name|readBalancedLine
argument_list|()
expr_stmt|;
block|}
name|finalizeJob
argument_list|()
expr_stmt|;
if|if
condition|(
name|collecting
condition|)
block|{
name|String
index|[]
name|typeNames
init|=
name|LogRecordType
operator|.
name|lineTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|statisticalOutput
operator|.
name|print
argument_list|(
name|typeNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|statisticalOutput
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|delays
condition|)
block|{
name|printDistributionSet
argument_list|(
literal|"Job start delay spectrum:"
argument_list|,
name|delayTimeDists
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runtimes
condition|)
block|{
name|printDistributionSet
argument_list|(
literal|"Job run time spectrum:"
argument_list|,
name|runTimeDists
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spreading
condition|)
block|{
name|String
name|ratioDescription
init|=
literal|"("
operator|+
name|spreadMax
operator|+
literal|"/1000 %ile) to ("
operator|+
name|spreadMin
operator|+
literal|"/1000 %ile) scaled by 1000000"
decl_stmt|;
name|printDistributionSet
argument_list|(
literal|"Map task success times "
operator|+
name|ratioDescription
operator|+
literal|":"
argument_list|,
name|mapTimeSpreadDists
argument_list|)
expr_stmt|;
name|printDistributionSet
argument_list|(
literal|"Shuffle success times "
operator|+
name|ratioDescription
operator|+
literal|":"
argument_list|,
name|shuffleTimeSpreadDists
argument_list|)
expr_stmt|;
name|printDistributionSet
argument_list|(
literal|"Sort success times "
operator|+
name|ratioDescription
operator|+
literal|":"
argument_list|,
name|sortTimeSpreadDists
argument_list|)
expr_stmt|;
name|printDistributionSet
argument_list|(
literal|"Reduce success times "
operator|+
name|ratioDescription
operator|+
literal|":"
argument_list|,
name|reduceTimeSpreadDists
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collectTaskTimes
condition|)
block|{
name|printDistributionSet
argument_list|(
literal|"Global map task success times:"
argument_list|,
name|mapTimeDists
argument_list|)
expr_stmt|;
name|printDistributionSet
argument_list|(
literal|"Global shuffle task success times:"
argument_list|,
name|shuffleTimeDists
argument_list|)
expr_stmt|;
name|printDistributionSet
argument_list|(
literal|"Global sort task success times:"
argument_list|,
name|sortTimeDists
argument_list|)
expr_stmt|;
name|printDistributionSet
argument_list|(
literal|"Global reduce task success times:"
argument_list|,
name|reduceTimeDists
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|topologyGen
operator|!=
literal|null
condition|)
block|{
name|LoggedNetworkTopology
name|topo
init|=
operator|new
name|LoggedNetworkTopology
argument_list|(
name|allHosts
argument_list|,
literal|"<root>"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|topologyGen
operator|.
name|output
argument_list|(
name|topo
argument_list|)
expr_stmt|;
name|topologyGen
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jobTraceGen
operator|!=
literal|null
condition|)
block|{
name|jobTraceGen
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|input
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|inputCodec
operator|!=
literal|null
condition|)
block|{
name|CodecPool
operator|.
name|returnDecompressor
argument_list|(
name|inputDecompressor
argument_list|)
expr_stmt|;
name|inputDecompressor
operator|=
literal|null
expr_stmt|;
name|inputCodec
operator|=
literal|null
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * @param args    *     *          Last arg is the input file. That file can be a directory, in which    *          case you get all the files in sorted order. We will decompress    *          files whose nmes end in .gz .    *     *          switches: -c collect line types.    *     *          -d debug mode    *     *          -delays print out the delays [interval between job submit time and    *          launch time]    *     *          -runtimes print out the job runtimes    *     *          -spreads print out the ratio of 10%ile and 90%ile, of both the    *          successful map task attempt run times and the the successful    *          reduce task attempt run times    *     *          -tasktimes prints out individual task time distributions    *     *          collects all the line types and prints the first example of each    *          one    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|HadoopLogsAnalyzer
name|analyzer
init|=
operator|new
name|HadoopLogsAnalyzer
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|analyzer
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|System
operator|.
name|exit
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|staticDebugOutput
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|staticDebugOutput
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|staticDebugOutput
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

