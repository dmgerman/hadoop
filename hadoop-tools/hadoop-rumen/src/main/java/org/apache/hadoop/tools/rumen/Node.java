begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * {@link Node} represents a node in the cluster topology. A node can be a  * {@link MachineNode}, or a {@link RackNode}, etc.  */
end_comment

begin_class
DECL|class|Node
specifier|public
class|class
name|Node
implements|implements
name|Comparable
argument_list|<
name|Node
argument_list|>
block|{
DECL|field|EMPTY_SET
specifier|private
specifier|static
specifier|final
name|SortedSet
argument_list|<
name|Node
argument_list|>
name|EMPTY_SET
init|=
name|Collections
operator|.
name|unmodifiableSortedSet
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|parent
specifier|private
name|Node
name|parent
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|level
specifier|private
specifier|final
name|int
name|level
decl_stmt|;
DECL|field|children
specifier|private
name|SortedSet
argument_list|<
name|Node
argument_list|>
name|children
decl_stmt|;
comment|/**    * @param name    *          A unique name to identify a node in the cluster.    * @param level    *          The level of the node in the cluster    */
DECL|method|Node (String name, int level)
specifier|public
name|Node
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Node name cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|level
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Level cannot be negative"
argument_list|)
throw|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
comment|/**    * Get the name of the node.    *     * @return The name of the node.    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Get the level of the node.    * @return The level of the node.    */
DECL|method|getLevel ()
specifier|public
name|int
name|getLevel
parameter_list|()
block|{
return|return
name|level
return|;
block|}
DECL|method|checkChildren ()
specifier|private
name|void
name|checkChildren
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
operator|new
name|TreeSet
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Add a child node to this node.    * @param child The child node to be added. The child node should currently not be belong to another cluster topology.    * @return Boolean indicating whether the node is successfully added.    */
DECL|method|addChild (Node child)
specifier|public
specifier|synchronized
name|boolean
name|addChild
parameter_list|(
name|Node
name|child
parameter_list|)
block|{
if|if
condition|(
name|child
operator|.
name|parent
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The child is already under another node:"
operator|+
name|child
operator|.
name|parent
argument_list|)
throw|;
block|}
name|checkChildren
argument_list|()
expr_stmt|;
name|boolean
name|retval
init|=
name|children
operator|.
name|add
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
condition|)
name|child
operator|.
name|parent
operator|=
name|this
expr_stmt|;
return|return
name|retval
return|;
block|}
comment|/**    * Does this node have any children?    * @return Boolean indicate whether this node has any children.    */
DECL|method|hasChildren ()
specifier|public
specifier|synchronized
name|boolean
name|hasChildren
parameter_list|()
block|{
return|return
name|children
operator|!=
literal|null
operator|&&
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Get the children of this node.    *     * @return The children of this node. If no child, an empty set will be    *         returned. The returned set is read-only.    */
DECL|method|getChildren ()
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|Node
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
operator|(
name|children
operator|==
literal|null
operator|)
condition|?
name|EMPTY_SET
else|:
name|Collections
operator|.
name|unmodifiableSortedSet
argument_list|(
name|children
argument_list|)
return|;
block|}
comment|/**    * Get the parent node.    * @return the parent node. If root node, return null.    */
DECL|method|getParent ()
specifier|public
name|Node
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Node
name|other
init|=
operator|(
name|Node
operator|)
name|obj
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"("
operator|+
name|name
operator|+
literal|", "
operator|+
name|level
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Node o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Node
name|o
parameter_list|)
block|{
return|return
name|name
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

