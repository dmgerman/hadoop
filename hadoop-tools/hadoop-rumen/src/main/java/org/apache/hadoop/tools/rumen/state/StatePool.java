begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen.state
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonEncoding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|module
operator|.
name|SimpleModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|Anonymizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|DataType
import|;
end_import

begin_comment
comment|/**  * A pool of states. States used by {@link DataType}'s can be managed the   * {@link StatePool}. {@link StatePool} also supports persistence. Persistence  * is key to share states across multiple {@link Anonymizer} runs.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|StatePool
specifier|public
class|class
name|StatePool
block|{
DECL|field|VERSION
specifier|private
specifier|static
specifier|final
name|long
name|VERSION
init|=
literal|1L
decl_stmt|;
DECL|field|isUpdated
specifier|private
name|boolean
name|isUpdated
init|=
literal|false
decl_stmt|;
DECL|field|isInitialized
specifier|private
name|boolean
name|isInitialized
init|=
literal|false
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|// persistence configuration
DECL|field|DIR_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|DIR_CONFIG
init|=
literal|"rumen.anonymization.states.dir"
decl_stmt|;
DECL|field|RELOAD_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|RELOAD_CONFIG
init|=
literal|"rumen.anonymization.states.reload"
decl_stmt|;
DECL|field|PERSIST_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|PERSIST_CONFIG
init|=
literal|"rumen.anonymization.states.persist"
decl_stmt|;
comment|// internal state management configs
DECL|field|COMMIT_STATE_FILENAME
specifier|private
specifier|static
specifier|final
name|String
name|COMMIT_STATE_FILENAME
init|=
literal|"latest"
decl_stmt|;
DECL|field|CURRENT_STATE_FILENAME
specifier|private
specifier|static
specifier|final
name|String
name|CURRENT_STATE_FILENAME
init|=
literal|"temp"
decl_stmt|;
DECL|field|timeStamp
specifier|private
name|String
name|timeStamp
decl_stmt|;
DECL|field|persistDirPath
specifier|private
name|Path
name|persistDirPath
decl_stmt|;
DECL|field|reload
specifier|private
name|boolean
name|reload
decl_stmt|;
DECL|field|persist
specifier|private
name|boolean
name|persist
decl_stmt|;
comment|/**    * A wrapper class that binds the state implementation to its implementing     * class name.    */
DECL|class|StatePair
specifier|public
specifier|static
class|class
name|StatePair
block|{
DECL|field|className
specifier|private
name|String
name|className
decl_stmt|;
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
DECL|method|StatePair (State state)
specifier|public
name|StatePair
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|state
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
DECL|method|getClassName ()
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
DECL|method|setClassName (String className)
specifier|public
name|void
name|setClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
block|}
DECL|method|getState ()
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|setState (State state)
specifier|public
name|void
name|setState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
block|}
comment|/**    * Identifies to identify and cache {@link State}s.    */
DECL|field|pool
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|StatePair
argument_list|>
name|pool
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|StatePair
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addState (Class id, State state)
specifier|public
name|void
name|addState
parameter_list|(
name|Class
name|id
parameter_list|,
name|State
name|state
parameter_list|)
block|{
if|if
condition|(
name|pool
operator|.
name|containsKey
argument_list|(
name|id
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"State '"
operator|+
name|state
operator|.
name|getName
argument_list|()
operator|+
literal|"' added for the"
operator|+
literal|" class "
operator|+
name|id
operator|.
name|getName
argument_list|()
operator|+
literal|" already exists!"
argument_list|)
throw|;
block|}
name|isUpdated
operator|=
literal|true
expr_stmt|;
name|pool
operator|.
name|put
argument_list|(
name|id
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|StatePair
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getState (Class clazz)
specifier|public
name|State
name|getState
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
return|return
name|pool
operator|.
name|containsKey
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
name|pool
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
else|:
literal|null
return|;
block|}
comment|// For testing
annotation|@
name|JsonIgnore
DECL|method|isUpdated ()
specifier|public
name|boolean
name|isUpdated
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isUpdated
condition|)
block|{
for|for
control|(
name|StatePair
name|statePair
range|:
name|pool
operator|.
name|values
argument_list|()
control|)
block|{
comment|// if one of the states have changed, then the pool is dirty
if|if
condition|(
name|statePair
operator|.
name|getState
argument_list|()
operator|.
name|isUpdated
argument_list|()
condition|)
block|{
name|isUpdated
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
name|isUpdated
return|;
block|}
comment|/**    * Initialized the {@link StatePool}. This API also reloads the previously    * persisted state. Note that the {@link StatePool} should be initialized only    * once.    */
DECL|method|initialize (Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isInitialized
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"StatePool is already initialized!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|persistDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|DIR_CONFIG
argument_list|)
decl_stmt|;
name|reload
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|RELOAD_CONFIG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|persist
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|PERSIST_CONFIG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// reload if configured
if|if
condition|(
name|reload
operator|||
name|persist
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"State Manager initializing. State directory : "
operator|+
name|persistDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Reload:"
operator|+
name|reload
operator|+
literal|" Persist:"
operator|+
name|persist
argument_list|)
expr_stmt|;
if|if
condition|(
name|persistDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No state persist directory configured!"
operator|+
literal|" Disable persistence."
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|persistDirPath
operator|=
operator|new
name|Path
argument_list|(
name|persistDir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"State Manager disabled."
argument_list|)
expr_stmt|;
block|}
comment|// reload
name|reload
argument_list|()
expr_stmt|;
comment|// now set the timestamp
name|DateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"dd-MMM-yyyy-hh'H'-mm'M'-ss'S'"
argument_list|)
decl_stmt|;
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|setTimeInMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|timeStamp
operator|=
name|formatter
operator|.
name|format
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|isInitialized
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|reload ()
specifier|private
name|void
name|reload
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|reload
condition|)
block|{
comment|// Reload persisted entries
name|Path
name|stateFilename
init|=
operator|new
name|Path
argument_list|(
name|persistDirPath
argument_list|,
name|COMMIT_STATE_FILENAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reloadState
argument_list|(
name|stateFilename
argument_list|,
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No latest state persist directory found!"
operator|+
literal|" Disable persistence and run."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|reloadState (Path stateFile, Configuration configuration)
specifier|private
name|boolean
name|reloadState
parameter_list|(
name|Path
name|stateFile
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|stateFile
operator|.
name|getFileSystem
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|stateFile
argument_list|)
init|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Reading state from "
operator|+
name|stateFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No state information found for "
operator|+
name|stateFile
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|read (DataInput in)
specifier|private
name|void
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
comment|// define a module
name|SimpleModule
name|module
init|=
operator|new
name|SimpleModule
argument_list|(
literal|"State Serializer"
argument_list|,
operator|new
name|Version
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"FINAL"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
comment|// add the state deserializer
name|module
operator|.
name|addDeserializer
argument_list|(
name|StatePair
operator|.
name|class
argument_list|,
operator|new
name|StateDeserializer
argument_list|()
argument_list|)
expr_stmt|;
comment|// register the module with the object-mapper
name|mapper
operator|.
name|registerModule
argument_list|(
name|module
argument_list|)
expr_stmt|;
name|JsonParser
name|parser
init|=
name|mapper
operator|.
name|getFactory
argument_list|()
operator|.
name|createParser
argument_list|(
operator|(
name|DataInputStream
operator|)
name|in
argument_list|)
decl_stmt|;
name|StatePool
name|statePool
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|parser
argument_list|,
name|StatePool
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|setStates
argument_list|(
name|statePool
operator|.
name|getStates
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Persists the current state to the state directory. The state will be     * persisted to the 'latest' file in the state directory.    */
DECL|method|persist ()
specifier|public
name|void
name|persist
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|persist
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isUpdated
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"State is updated! Committing."
argument_list|)
expr_stmt|;
name|Path
name|currStateFile
init|=
operator|new
name|Path
argument_list|(
name|persistDirPath
argument_list|,
name|CURRENT_STATE_FILENAME
argument_list|)
decl_stmt|;
name|Path
name|commitStateFile
init|=
operator|new
name|Path
argument_list|(
name|persistDirPath
argument_list|,
name|COMMIT_STATE_FILENAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|currStateFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting the persist phase. Persisting to "
operator|+
name|currStateFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// persist current state
comment|//  write the contents of the current state to the current(temp) directory
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|currStateFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Persist phase over. The best known un-committed state"
operator|+
literal|" is located at "
operator|+
name|currStateFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// commit (phase-1)
comment|//  copy the previous commit file to the relocation file
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|commitStateFile
argument_list|)
condition|)
block|{
name|Path
name|commitRelocationFile
init|=
operator|new
name|Path
argument_list|(
name|persistDirPath
argument_list|,
name|timeStamp
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting the pre-commit phase. Moving the previous "
operator|+
literal|"best known state to "
operator|+
name|commitRelocationFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// copy the commit file to the relocation file
name|FileUtil
operator|.
name|copy
argument_list|(
name|fs
argument_list|,
name|commitStateFile
argument_list|,
name|fs
argument_list|,
name|commitRelocationFile
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// commit (phase-2)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting the commit phase. Committing the states in "
operator|+
name|currStateFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|fs
argument_list|,
name|currStateFile
argument_list|,
name|fs
argument_list|,
name|commitStateFile
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Commit phase successful! The best known committed "
operator|+
literal|"state is located at "
operator|+
name|commitStateFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"State not updated! No commit required."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|write (DataOutput out)
specifier|private
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This is just a JSON experiment
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dumping the StatePool's in JSON format."
argument_list|)
expr_stmt|;
name|ObjectMapper
name|outMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
comment|// define a module
name|SimpleModule
name|module
init|=
operator|new
name|SimpleModule
argument_list|(
literal|"State Serializer"
argument_list|,
operator|new
name|Version
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"FINAL"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
comment|// add the state serializer
comment|//module.addSerializer(State.class, new StateSerializer());
comment|// register the module with the object-mapper
name|outMapper
operator|.
name|registerModule
argument_list|(
name|module
argument_list|)
expr_stmt|;
name|JsonFactory
name|outFactory
init|=
name|outMapper
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|JsonGenerator
name|jGen
init|=
name|outFactory
operator|.
name|createGenerator
argument_list|(
operator|(
name|DataOutputStream
operator|)
name|out
argument_list|,
name|JsonEncoding
operator|.
name|UTF8
argument_list|)
decl_stmt|;
name|jGen
operator|.
name|useDefaultPrettyPrinter
argument_list|()
expr_stmt|;
name|jGen
operator|.
name|writeObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|jGen
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Getters and setters for JSON serialization    */
comment|/**    * To be invoked only by the Jackson JSON serializer.    */
DECL|method|getVersion ()
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|VERSION
return|;
block|}
comment|/**    * To be invoked only by the Jackson JSON deserializer.    */
DECL|method|setVersion (long version)
specifier|public
name|void
name|setVersion
parameter_list|(
name|long
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|!=
name|VERSION
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Version mismatch! Expected "
operator|+
name|VERSION
operator|+
literal|" got "
operator|+
name|version
argument_list|)
throw|;
block|}
block|}
comment|/**    * To be invoked only by the Jackson JSON serializer.    */
DECL|method|getStates ()
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|StatePair
argument_list|>
name|getStates
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
comment|/**    * To be invoked only by the Jackson JSON deserializer.    */
DECL|method|setStates (HashMap<String, StatePair> states)
specifier|public
name|void
name|setStates
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|StatePair
argument_list|>
name|states
parameter_list|)
block|{
if|if
condition|(
name|pool
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Pool not empty!"
argument_list|)
throw|;
block|}
comment|//TODO Should we do a clone?
name|this
operator|.
name|pool
operator|=
name|states
expr_stmt|;
block|}
block|}
end_class

end_unit

