begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonEncoding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|module
operator|.
name|SimpleModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CodecPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|serializers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
operator|.
name|*
import|;
end_import

begin_class
DECL|class|Anonymizer
specifier|public
class|class
name|Anonymizer
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|anonymizeTrace
specifier|private
name|boolean
name|anonymizeTrace
init|=
literal|false
decl_stmt|;
DECL|field|inputTracePath
specifier|private
name|Path
name|inputTracePath
init|=
literal|null
decl_stmt|;
DECL|field|outputTracePath
specifier|private
name|Path
name|outputTracePath
init|=
literal|null
decl_stmt|;
DECL|field|anonymizeTopology
specifier|private
name|boolean
name|anonymizeTopology
init|=
literal|false
decl_stmt|;
DECL|field|inputTopologyPath
specifier|private
name|Path
name|inputTopologyPath
init|=
literal|null
decl_stmt|;
DECL|field|outputTopologyPath
specifier|private
name|Path
name|outputTopologyPath
init|=
literal|null
decl_stmt|;
comment|//TODO Make this final if not using JSON
comment|// private final StatePool statePool = new StatePool();
DECL|field|statePool
specifier|private
name|StatePool
name|statePool
decl_stmt|;
DECL|field|outMapper
specifier|private
name|ObjectMapper
name|outMapper
init|=
literal|null
decl_stmt|;
DECL|field|outFactory
specifier|private
name|JsonFactory
name|outFactory
init|=
literal|null
decl_stmt|;
DECL|method|initialize (String[] args)
specifier|private
name|void
name|initialize
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
literal|"-trace"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|anonymizeTrace
operator|=
literal|true
expr_stmt|;
name|inputTracePath
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|outputTracePath
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|i
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
literal|"-topology"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|anonymizeTopology
operator|=
literal|true
expr_stmt|;
name|inputTopologyPath
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|outputTopologyPath
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|i
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal arguments list!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|anonymizeTopology
operator|&&
operator|!
name|anonymizeTrace
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid arguments list!"
argument_list|)
throw|;
block|}
name|statePool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
comment|// initialize the state manager after the anonymizers are registered
name|statePool
operator|.
name|initialize
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|outMapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
comment|// define a module
name|SimpleModule
name|module
init|=
operator|new
name|SimpleModule
argument_list|(
literal|"Anonymization Serializer"
argument_list|,
operator|new
name|Version
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"FINAL"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
comment|// add various serializers to the module
comment|// use the default (as-is) serializer for default data types
name|module
operator|.
name|addSerializer
argument_list|(
name|DataType
operator|.
name|class
argument_list|,
operator|new
name|DefaultRumenSerializer
argument_list|()
argument_list|)
expr_stmt|;
comment|// use a blocking serializer for Strings as they can contain sensitive
comment|// information
name|module
operator|.
name|addSerializer
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|BlockingSerializer
argument_list|()
argument_list|)
expr_stmt|;
comment|// use object.toString() for object of type ID
name|module
operator|.
name|addSerializer
argument_list|(
name|ID
operator|.
name|class
argument_list|,
operator|new
name|ObjectStringSerializer
argument_list|<
name|ID
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// use getAnonymizedValue() for data types that have the anonymizing
comment|// feature
name|module
operator|.
name|addSerializer
argument_list|(
name|AnonymizableDataType
operator|.
name|class
argument_list|,
operator|new
name|DefaultAnonymizingRumenSerializer
argument_list|(
name|statePool
argument_list|,
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// register the module with the object-mapper
name|outMapper
operator|.
name|registerModule
argument_list|(
name|module
argument_list|)
expr_stmt|;
name|outFactory
operator|=
name|outMapper
operator|.
name|getFactory
argument_list|()
expr_stmt|;
block|}
comment|// anonymize the job trace file
DECL|method|anonymizeTrace ()
specifier|private
name|void
name|anonymizeTrace
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|anonymizeTrace
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Anonymizing trace file: "
operator|+
name|inputTracePath
argument_list|)
expr_stmt|;
name|JobTraceReader
name|reader
init|=
literal|null
decl_stmt|;
name|JsonGenerator
name|outGen
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create a generator
name|outGen
operator|=
name|createJsonGenerator
argument_list|(
name|conf
argument_list|,
name|outputTracePath
argument_list|)
expr_stmt|;
comment|// define the input trace reader
name|reader
operator|=
operator|new
name|JobTraceReader
argument_list|(
name|inputTracePath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// read the plain unanonymized logged job
name|LoggedJob
name|job
init|=
name|reader
operator|.
name|getNext
argument_list|()
decl_stmt|;
while|while
condition|(
name|job
operator|!=
literal|null
condition|)
block|{
comment|// write it via an anonymizing channel
name|outGen
operator|.
name|writeObject
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// read the next job
name|job
operator|=
name|reader
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Anonymized trace file: "
operator|+
name|outputTracePath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|outGen
operator|!=
literal|null
condition|)
block|{
name|outGen
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// anonymize the cluster topology file
DECL|method|anonymizeTopology ()
specifier|private
name|void
name|anonymizeTopology
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|anonymizeTopology
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Anonymizing topology file: "
operator|+
name|inputTopologyPath
argument_list|)
expr_stmt|;
name|ClusterTopologyReader
name|reader
init|=
literal|null
decl_stmt|;
name|JsonGenerator
name|outGen
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create a generator
name|outGen
operator|=
name|createJsonGenerator
argument_list|(
name|conf
argument_list|,
name|outputTopologyPath
argument_list|)
expr_stmt|;
comment|// define the input cluster topology reader
name|reader
operator|=
operator|new
name|ClusterTopologyReader
argument_list|(
name|inputTopologyPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// read the plain unanonymized logged job
name|LoggedNetworkTopology
name|job
init|=
name|reader
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// write it via an anonymizing channel
name|outGen
operator|.
name|writeObject
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Anonymized topology file: "
operator|+
name|outputTopologyPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|outGen
operator|!=
literal|null
condition|)
block|{
name|outGen
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Creates a JSON generator
DECL|method|createJsonGenerator (Configuration conf, Path path)
specifier|private
name|JsonGenerator
name|createJsonGenerator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|outFS
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
operator|.
name|getCodec
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|OutputStream
name|output
decl_stmt|;
name|Compressor
name|compressor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
name|compressor
operator|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|output
operator|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|outFS
operator|.
name|create
argument_list|(
name|path
argument_list|)
argument_list|,
name|compressor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|=
name|outFS
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|JsonGenerator
name|outGen
init|=
name|outFactory
operator|.
name|createGenerator
argument_list|(
name|output
argument_list|,
name|JsonEncoding
operator|.
name|UTF8
argument_list|)
decl_stmt|;
name|outGen
operator|.
name|useDefaultPrettyPrinter
argument_list|()
expr_stmt|;
return|return
name|outGen
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|initialize
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|run
argument_list|()
return|;
block|}
comment|/**    * Runs the actual anonymization tool.    */
DECL|method|run ()
specifier|public
name|int
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|anonymizeTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error running the trace anonymizer!"
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n\nAnonymization unsuccessful!"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
name|anonymizeTopology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error running the cluster topology anonymizer!"
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n\nAnonymization unsuccessful!"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|statePool
operator|.
name|persist
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Anonymization completed successfully!"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|printUsage ()
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nUsage:-"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  Anonymizer"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" [-trace<input-trace-path><output-trace-path>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" [-topology<input-topology-path> "
operator|+
literal|"<output-topology-path>] "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|/**    * The main driver program to use the anonymization utility.    * @param args    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Anonymizer
name|instance
init|=
operator|new
name|Anonymizer
argument_list|()
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
try|try
block|{
name|result
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|instance
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
end_class

end_unit

