begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|AMStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|HistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobFinished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobInfoChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobInitedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobPriorityChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobStatusChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobSubmittedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobQueueChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobUnsuccessfulCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|MapAttemptFinished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|MapAttemptFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|NormalizedResourceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|ReduceAttemptFinished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|ReduceAttemptFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptFinished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptUnsuccessfulCompletion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptUnsuccessfulCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskFailed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskFinished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskUpdatedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|Pre21JobHistoryConstants
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * {@link JobBuilder} builds one job. It processes a sequence of  * {@link HistoryEvent}s.  */
end_comment

begin_class
DECL|class|JobBuilder
specifier|public
class|class
name|JobBuilder
block|{
DECL|field|BYTES_IN_MEG
specifier|private
specifier|static
specifier|final
name|long
name|BYTES_IN_MEG
init|=
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
literal|"1m"
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JobBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|jobID
specifier|private
name|String
name|jobID
decl_stmt|;
DECL|field|finalized
specifier|private
name|boolean
name|finalized
init|=
literal|false
decl_stmt|;
DECL|field|result
specifier|private
name|ParsedJob
name|result
init|=
operator|new
name|ParsedJob
argument_list|()
decl_stmt|;
DECL|field|mapTasks
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ParsedTask
argument_list|>
name|mapTasks
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ParsedTask
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reduceTasks
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ParsedTask
argument_list|>
name|reduceTasks
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ParsedTask
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|otherTasks
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ParsedTask
argument_list|>
name|otherTasks
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ParsedTask
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|attempts
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ParsedTaskAttempt
argument_list|>
name|attempts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ParsedTaskAttempt
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|allHosts
specifier|private
name|Map
argument_list|<
name|ParsedHost
argument_list|,
name|ParsedHost
argument_list|>
name|allHosts
init|=
operator|new
name|HashMap
argument_list|<
name|ParsedHost
argument_list|,
name|ParsedHost
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|EMPTY_COUNTERS
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JhCounters
name|EMPTY_COUNTERS
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JhCounters
argument_list|()
decl_stmt|;
comment|/**    * The number of splits a task can have, before we ignore them all.    */
DECL|field|MAXIMUM_PREFERRED_LOCATIONS
specifier|private
specifier|final
specifier|static
name|int
name|MAXIMUM_PREFERRED_LOCATIONS
init|=
literal|25
decl_stmt|;
DECL|field|attemptTimesPercentiles
specifier|private
name|int
index|[]
name|attemptTimesPercentiles
init|=
literal|null
decl_stmt|;
comment|// Use this to search within the java options to get heap sizes.
comment|// The heap size number is in Capturing Group 1.
comment|// The heap size order-of-magnitude suffix is in Capturing Group 2
DECL|field|heapPattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|heapPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-Xmx([0-9]+[kKmMgGtT])"
argument_list|)
decl_stmt|;
DECL|field|jobConfigurationParameters
specifier|private
name|Properties
name|jobConfigurationParameters
init|=
literal|null
decl_stmt|;
DECL|method|JobBuilder (String jobID)
specifier|public
name|JobBuilder
parameter_list|(
name|String
name|jobID
parameter_list|)
block|{
name|this
operator|.
name|jobID
operator|=
name|jobID
expr_stmt|;
block|}
DECL|method|getJobID ()
specifier|public
name|String
name|getJobID
parameter_list|()
block|{
return|return
name|jobID
return|;
block|}
block|{
if|if
condition|(
name|attemptTimesPercentiles
operator|==
literal|null
condition|)
block|{
name|attemptTimesPercentiles
operator|=
operator|new
name|int
index|[
literal|19
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
operator|++
name|i
control|)
block|{
name|attemptTimesPercentiles
index|[
name|i
index|]
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|5
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Process one {@link HistoryEvent}    *     * @param event    *          The {@link HistoryEvent} to be processed.    */
DECL|method|process (HistoryEvent event)
specifier|public
name|void
name|process
parameter_list|(
name|HistoryEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|finalized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"JobBuilder.process(HistoryEvent event) called after ParsedJob built"
argument_list|)
throw|;
block|}
comment|// these are in lexicographical order by class name.
if|if
condition|(
name|event
operator|instanceof
name|AMStartedEvent
condition|)
block|{
comment|// ignore this event as Rumen currently doesnt need this event
comment|//TODO Enhance Rumen to process this event and capture restarts
return|return;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|NormalizedResourceEvent
condition|)
block|{
comment|// Log an warn message as NormalizedResourceEvent shouldn't be written.
name|LOG
operator|.
name|warn
argument_list|(
literal|"NormalizedResourceEvent should be ignored in history server."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobFinishedEvent
condition|)
block|{
name|processJobFinishedEvent
argument_list|(
operator|(
name|JobFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobInfoChangeEvent
condition|)
block|{
name|processJobInfoChangeEvent
argument_list|(
operator|(
name|JobInfoChangeEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobInitedEvent
condition|)
block|{
name|processJobInitedEvent
argument_list|(
operator|(
name|JobInitedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobPriorityChangeEvent
condition|)
block|{
name|processJobPriorityChangeEvent
argument_list|(
operator|(
name|JobPriorityChangeEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobQueueChangeEvent
condition|)
block|{
name|processJobQueueChangeEvent
argument_list|(
operator|(
name|JobQueueChangeEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobStatusChangedEvent
condition|)
block|{
name|processJobStatusChangedEvent
argument_list|(
operator|(
name|JobStatusChangedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobSubmittedEvent
condition|)
block|{
name|processJobSubmittedEvent
argument_list|(
operator|(
name|JobSubmittedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|JobUnsuccessfulCompletionEvent
condition|)
block|{
name|processJobUnsuccessfulCompletionEvent
argument_list|(
operator|(
name|JobUnsuccessfulCompletionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|MapAttemptFinishedEvent
condition|)
block|{
name|processMapAttemptFinishedEvent
argument_list|(
operator|(
name|MapAttemptFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ReduceAttemptFinishedEvent
condition|)
block|{
name|processReduceAttemptFinishedEvent
argument_list|(
operator|(
name|ReduceAttemptFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptFinishedEvent
condition|)
block|{
name|processTaskAttemptFinishedEvent
argument_list|(
operator|(
name|TaskAttemptFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptStartedEvent
condition|)
block|{
name|processTaskAttemptStartedEvent
argument_list|(
operator|(
name|TaskAttemptStartedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptUnsuccessfulCompletionEvent
condition|)
block|{
name|processTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
operator|(
name|TaskAttemptUnsuccessfulCompletionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskFailedEvent
condition|)
block|{
name|processTaskFailedEvent
argument_list|(
operator|(
name|TaskFailedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskFinishedEvent
condition|)
block|{
name|processTaskFinishedEvent
argument_list|(
operator|(
name|TaskFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskStartedEvent
condition|)
block|{
name|processTaskStartedEvent
argument_list|(
operator|(
name|TaskStartedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskUpdatedEvent
condition|)
block|{
name|processTaskUpdatedEvent
argument_list|(
operator|(
name|TaskUpdatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JobBuilder.process(HistoryEvent): unknown event type:"
operator|+
name|event
operator|.
name|getEventType
argument_list|()
operator|+
literal|" for event:"
operator|+
name|event
argument_list|)
throw|;
block|}
DECL|method|extract (Properties conf, String[] names, String defaultValue)
specifier|static
name|String
name|extract
parameter_list|(
name|Properties
name|conf
parameter_list|,
name|String
index|[]
name|names
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|result
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
DECL|method|extractMegabytes (Properties conf, String[] names)
specifier|private
name|Integer
name|extractMegabytes
parameter_list|(
name|Properties
name|conf
parameter_list|,
name|String
index|[]
name|names
parameter_list|)
block|{
name|String
name|javaOptions
init|=
name|extract
argument_list|(
name|conf
argument_list|,
name|names
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaOptions
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Matcher
name|matcher
init|=
name|heapPattern
operator|.
name|matcher
argument_list|(
name|javaOptions
argument_list|)
decl_stmt|;
name|Integer
name|heapMegabytes
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|heapSize
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|heapMegabytes
operator|=
operator|(
call|(
name|int
call|)
argument_list|(
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|heapSize
argument_list|)
operator|/
name|BYTES_IN_MEG
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|heapMegabytes
return|;
block|}
DECL|method|maybeSetHeapMegabytes (Integer megabytes)
specifier|private
name|void
name|maybeSetHeapMegabytes
parameter_list|(
name|Integer
name|megabytes
parameter_list|)
block|{
if|if
condition|(
name|megabytes
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setHeapMegabytes
argument_list|(
name|megabytes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|maybeSetJobMapMB (Integer megabytes)
specifier|private
name|void
name|maybeSetJobMapMB
parameter_list|(
name|Integer
name|megabytes
parameter_list|)
block|{
if|if
condition|(
name|megabytes
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setJobMapMB
argument_list|(
name|megabytes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|maybeSetJobReduceMB (Integer megabytes)
specifier|private
name|void
name|maybeSetJobReduceMB
parameter_list|(
name|Integer
name|megabytes
parameter_list|)
block|{
if|if
condition|(
name|megabytes
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setJobReduceMB
argument_list|(
name|megabytes
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Process a collection of JobConf {@link Properties}. We do not restrict it    * to be called once. It is okay to process a conf before, during or after the    * events.    *     * @param conf    *          The job conf properties to be added.    */
DECL|method|process (Properties conf)
specifier|public
name|void
name|process
parameter_list|(
name|Properties
name|conf
parameter_list|)
block|{
if|if
condition|(
name|finalized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"JobBuilder.process(Properties conf) called after ParsedJob built"
argument_list|)
throw|;
block|}
comment|//TODO remove this once the deprecate APIs in LoggedJob are removed
name|String
name|queue
init|=
name|extract
argument_list|(
name|conf
argument_list|,
name|JobConfPropertyNames
operator|.
name|QUEUE_NAMES
operator|.
name|getCandidates
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// set the queue name if existing
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|setJobName
argument_list|(
name|extract
argument_list|(
name|conf
argument_list|,
name|JobConfPropertyNames
operator|.
name|JOB_NAMES
operator|.
name|getCandidates
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSetHeapMegabytes
argument_list|(
name|extractMegabytes
argument_list|(
name|conf
argument_list|,
name|JobConfPropertyNames
operator|.
name|TASK_JAVA_OPTS_S
operator|.
name|getCandidates
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSetJobMapMB
argument_list|(
name|extractMegabytes
argument_list|(
name|conf
argument_list|,
name|JobConfPropertyNames
operator|.
name|MAP_JAVA_OPTS_S
operator|.
name|getCandidates
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSetJobReduceMB
argument_list|(
name|extractMegabytes
argument_list|(
name|conf
argument_list|,
name|JobConfPropertyNames
operator|.
name|REDUCE_JAVA_OPTS_S
operator|.
name|getCandidates
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobConfigurationParameters
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Request the builder to build the final object. Once called, the    * {@link JobBuilder} would accept no more events or job-conf properties.    *     * @return Parsed {@link ParsedJob} object.    */
DECL|method|build ()
specifier|public
name|ParsedJob
name|build
parameter_list|()
block|{
comment|// The main job here is to build CDFs and manage the conf
name|finalized
operator|=
literal|true
expr_stmt|;
comment|// set the conf
if|if
condition|(
name|jobConfigurationParameters
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setJobProperties
argument_list|(
name|jobConfigurationParameters
argument_list|)
expr_stmt|;
block|}
comment|// initialize all the per-job statistics gathering places
name|Histogram
index|[]
name|successfulMapAttemptTimes
init|=
operator|new
name|Histogram
index|[
name|ParsedHost
operator|.
name|numberOfDistances
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|successfulMapAttemptTimes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|successfulMapAttemptTimes
index|[
name|i
index|]
operator|=
operator|new
name|Histogram
argument_list|()
expr_stmt|;
block|}
name|Histogram
name|successfulReduceAttemptTimes
init|=
operator|new
name|Histogram
argument_list|()
decl_stmt|;
name|Histogram
index|[]
name|failedMapAttemptTimes
init|=
operator|new
name|Histogram
index|[
name|ParsedHost
operator|.
name|numberOfDistances
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|failedMapAttemptTimes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|failedMapAttemptTimes
index|[
name|i
index|]
operator|=
operator|new
name|Histogram
argument_list|()
expr_stmt|;
block|}
name|Histogram
name|failedReduceAttemptTimes
init|=
operator|new
name|Histogram
argument_list|()
decl_stmt|;
name|Histogram
name|successfulNthMapperAttempts
init|=
operator|new
name|Histogram
argument_list|()
decl_stmt|;
comment|// Histogram successfulNthReducerAttempts = new Histogram();
comment|// Histogram mapperLocality = new Histogram();
for|for
control|(
name|LoggedTask
name|task
range|:
name|result
operator|.
name|getMapTasks
argument_list|()
control|)
block|{
for|for
control|(
name|LoggedTaskAttempt
name|attempt
range|:
name|task
operator|.
name|getAttempts
argument_list|()
control|)
block|{
name|int
name|distance
init|=
name|successfulMapAttemptTimes
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|Long
name|runtime
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|>
literal|0
operator|&&
name|attempt
operator|.
name|getStartTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|runtime
operator|=
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getResult
argument_list|()
operator|==
name|Values
operator|.
name|SUCCESS
condition|)
block|{
name|LoggedLocation
name|host
init|=
name|attempt
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LoggedLocation
argument_list|>
name|locs
init|=
name|task
operator|.
name|getPreferredLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
operator|&&
name|locs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LoggedLocation
name|loc
range|:
name|locs
control|)
block|{
name|ParsedHost
name|preferedLoc
init|=
operator|new
name|ParsedHost
argument_list|(
name|loc
argument_list|)
decl_stmt|;
name|distance
operator|=
name|Math
operator|.
name|min
argument_list|(
name|distance
argument_list|,
name|preferedLoc
operator|.
name|distance
argument_list|(
operator|new
name|ParsedHost
argument_list|(
name|host
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// mapperLocality.enter(distance);
block|}
if|if
condition|(
name|attempt
operator|.
name|getStartTime
argument_list|()
operator|>
literal|0
operator|&&
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|runtime
operator|!=
literal|null
condition|)
block|{
name|successfulMapAttemptTimes
index|[
name|distance
index|]
operator|.
name|enter
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
block|}
block|}
name|TaskAttemptID
name|attemptID
init|=
name|attempt
operator|.
name|getAttemptID
argument_list|()
decl_stmt|;
if|if
condition|(
name|attemptID
operator|!=
literal|null
condition|)
block|{
name|successfulNthMapperAttempts
operator|.
name|enter
argument_list|(
name|attemptID
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|attempt
operator|.
name|getResult
argument_list|()
operator|==
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|FAILED
condition|)
block|{
if|if
condition|(
name|runtime
operator|!=
literal|null
condition|)
block|{
name|failedMapAttemptTimes
index|[
name|distance
index|]
operator|.
name|enter
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|LoggedTask
name|task
range|:
name|result
operator|.
name|getReduceTasks
argument_list|()
control|)
block|{
for|for
control|(
name|LoggedTaskAttempt
name|attempt
range|:
name|task
operator|.
name|getAttempts
argument_list|()
control|)
block|{
name|Long
name|runtime
init|=
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|>
literal|0
operator|&&
name|attempt
operator|.
name|getStartTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|runtime
operator|=
name|attempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|attempt
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|attempt
operator|.
name|getResult
argument_list|()
operator|==
name|Values
operator|.
name|SUCCESS
condition|)
block|{
if|if
condition|(
name|runtime
operator|!=
literal|null
condition|)
block|{
name|successfulReduceAttemptTimes
operator|.
name|enter
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|attempt
operator|.
name|getResult
argument_list|()
operator|==
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|FAILED
condition|)
block|{
name|failedReduceAttemptTimes
operator|.
name|enter
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|result
operator|.
name|setFailedMapAttemptCDFs
argument_list|(
name|mapCDFArrayList
argument_list|(
name|failedMapAttemptTimes
argument_list|)
argument_list|)
expr_stmt|;
name|LoggedDiscreteCDF
name|failedReduce
init|=
operator|new
name|LoggedDiscreteCDF
argument_list|()
decl_stmt|;
name|failedReduce
operator|.
name|setCDF
argument_list|(
name|failedReduceAttemptTimes
argument_list|,
name|attemptTimesPercentiles
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|result
operator|.
name|setFailedReduceAttemptCDF
argument_list|(
name|failedReduce
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessfulMapAttemptCDFs
argument_list|(
name|mapCDFArrayList
argument_list|(
name|successfulMapAttemptTimes
argument_list|)
argument_list|)
expr_stmt|;
name|LoggedDiscreteCDF
name|succReduce
init|=
operator|new
name|LoggedDiscreteCDF
argument_list|()
decl_stmt|;
name|succReduce
operator|.
name|setCDF
argument_list|(
name|successfulReduceAttemptTimes
argument_list|,
name|attemptTimesPercentiles
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessfulReduceAttemptCDF
argument_list|(
name|succReduce
argument_list|)
expr_stmt|;
name|long
name|totalSuccessfulAttempts
init|=
literal|0L
decl_stmt|;
name|long
name|maxTriesToSucceed
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|ent
range|:
name|successfulNthMapperAttempts
control|)
block|{
name|totalSuccessfulAttempts
operator|+=
name|ent
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|maxTriesToSucceed
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxTriesToSucceed
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|totalSuccessfulAttempts
operator|>
literal|0L
condition|)
block|{
name|double
index|[]
name|successAfterI
init|=
operator|new
name|double
index|[
operator|(
name|int
operator|)
name|maxTriesToSucceed
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|successAfterI
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|successAfterI
index|[
name|i
index|]
operator|=
literal|0.0D
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|ent
range|:
name|successfulNthMapperAttempts
control|)
block|{
name|successAfterI
index|[
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
operator|=
operator|(
operator|(
name|double
operator|)
name|ent
operator|.
name|getValue
argument_list|()
operator|)
operator|/
name|totalSuccessfulAttempts
expr_stmt|;
block|}
name|result
operator|.
name|setMapperTriesToSucceed
argument_list|(
name|successAfterI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setMapperTriesToSucceed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|mapCDFArrayList (Histogram[] data)
specifier|private
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|mapCDFArrayList
parameter_list|(
name|Histogram
index|[]
name|data
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Histogram
name|hist
range|:
name|data
control|)
block|{
name|LoggedDiscreteCDF
name|discCDF
init|=
operator|new
name|LoggedDiscreteCDF
argument_list|()
decl_stmt|;
name|discCDF
operator|.
name|setCDF
argument_list|(
name|hist
argument_list|,
name|attemptTimesPercentiles
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|discCDF
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getPre21Value (String name)
specifier|private
specifier|static
name|Values
name|getPre21Value
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JOB_CLEANUP"
argument_list|)
condition|)
block|{
return|return
name|Values
operator|.
name|CLEANUP
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JOB_SETUP"
argument_list|)
condition|)
block|{
return|return
name|Values
operator|.
name|SETUP
return|;
block|}
comment|// Note that pre-21, the task state of a successful task was logged as
comment|// SUCCESS while from 21 onwards, its logged as SUCCEEDED.
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Values
operator|.
name|SUCCESS
return|;
block|}
return|return
name|Values
operator|.
name|valueOf
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
DECL|method|processTaskUpdatedEvent (TaskUpdatedEvent event)
specifier|private
name|void
name|processTaskUpdatedEvent
parameter_list|(
name|TaskUpdatedEvent
name|event
parameter_list|)
block|{
name|ParsedTask
name|task
init|=
name|getTask
argument_list|(
name|event
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|task
operator|.
name|setFinishTime
argument_list|(
name|event
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processTaskStartedEvent (TaskStartedEvent event)
specifier|private
name|void
name|processTaskStartedEvent
parameter_list|(
name|TaskStartedEvent
name|event
parameter_list|)
block|{
name|ParsedTask
name|task
init|=
name|getOrMakeTask
argument_list|(
name|event
operator|.
name|getTaskType
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|task
operator|.
name|setStartTime
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|setPreferredLocations
argument_list|(
name|preferredLocationForSplits
argument_list|(
name|event
operator|.
name|getSplitLocations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|processTaskFinishedEvent (TaskFinishedEvent event)
specifier|private
name|void
name|processTaskFinishedEvent
parameter_list|(
name|TaskFinishedEvent
name|event
parameter_list|)
block|{
name|ParsedTask
name|task
init|=
name|getOrMakeTask
argument_list|(
name|event
operator|.
name|getTaskType
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|task
operator|.
name|setFinishTime
argument_list|(
name|event
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|setTaskStatus
argument_list|(
name|getPre21Value
argument_list|(
name|event
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|task
operator|.
name|incorporateCounters
argument_list|(
operator|(
operator|(
name|TaskFinished
operator|)
name|event
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|counters
argument_list|)
expr_stmt|;
block|}
DECL|method|processTaskFailedEvent (TaskFailedEvent event)
specifier|private
name|void
name|processTaskFailedEvent
parameter_list|(
name|TaskFailedEvent
name|event
parameter_list|)
block|{
name|ParsedTask
name|task
init|=
name|getOrMakeTask
argument_list|(
name|event
operator|.
name|getTaskType
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|task
operator|.
name|setFinishTime
argument_list|(
name|event
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|setTaskStatus
argument_list|(
name|getPre21Value
argument_list|(
name|event
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TaskFailed
name|t
init|=
call|(
name|TaskFailed
call|)
argument_list|(
name|event
operator|.
name|getDatum
argument_list|()
argument_list|)
decl_stmt|;
name|task
operator|.
name|putDiagnosticInfo
argument_list|(
name|t
operator|.
name|error
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// killed task wouldn't have failed attempt.
if|if
condition|(
name|t
operator|.
name|getFailedDueToAttempt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|putFailedDueToAttemptId
argument_list|(
name|t
operator|.
name|getFailedDueToAttempt
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JhCounters
name|counters
init|=
operator|(
operator|(
name|TaskFailed
operator|)
name|event
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|task
operator|.
name|incorporateCounters
argument_list|(
name|counters
operator|==
literal|null
condition|?
name|EMPTY_COUNTERS
else|:
name|counters
argument_list|)
expr_stmt|;
block|}
DECL|method|processTaskAttemptUnsuccessfulCompletionEvent ( TaskAttemptUnsuccessfulCompletionEvent event)
specifier|private
name|void
name|processTaskAttemptUnsuccessfulCompletionEvent
parameter_list|(
name|TaskAttemptUnsuccessfulCompletionEvent
name|event
parameter_list|)
block|{
name|ParsedTaskAttempt
name|attempt
init|=
name|getOrMakeTaskAttempt
argument_list|(
name|event
operator|.
name|getTaskType
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|attempt
operator|.
name|setResult
argument_list|(
name|getPre21Value
argument_list|(
name|event
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|setHostName
argument_list|(
name|event
operator|.
name|getHostname
argument_list|()
argument_list|,
name|event
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedHost
name|pHost
init|=
name|getAndRecordParsedHost
argument_list|(
name|event
operator|.
name|getRackName
argument_list|()
argument_list|,
name|event
operator|.
name|getHostname
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pHost
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setLocation
argument_list|(
name|pHost
operator|.
name|makeLoggedLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|attempt
operator|.
name|setFinishTime
argument_list|(
name|event
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JhCounters
name|counters
init|=
operator|(
operator|(
name|TaskAttemptUnsuccessfulCompletion
operator|)
name|event
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|attempt
operator|.
name|incorporateCounters
argument_list|(
name|counters
operator|==
literal|null
condition|?
name|EMPTY_COUNTERS
else|:
name|counters
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetClockSplits
argument_list|(
name|event
operator|.
name|getClockSplits
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetCpuUsages
argument_list|(
name|event
operator|.
name|getCpuUsages
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetVMemKbytes
argument_list|(
name|event
operator|.
name|getVMemKbytes
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetPhysMemKbytes
argument_list|(
name|event
operator|.
name|getPhysMemKbytes
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptUnsuccessfulCompletion
name|t
init|=
call|(
name|TaskAttemptUnsuccessfulCompletion
call|)
argument_list|(
name|event
operator|.
name|getDatum
argument_list|()
argument_list|)
decl_stmt|;
name|attempt
operator|.
name|putDiagnosticInfo
argument_list|(
name|t
operator|.
name|getError
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processTaskAttemptStartedEvent (TaskAttemptStartedEvent event)
specifier|private
name|void
name|processTaskAttemptStartedEvent
parameter_list|(
name|TaskAttemptStartedEvent
name|event
parameter_list|)
block|{
name|ParsedTaskAttempt
name|attempt
init|=
name|getOrMakeTaskAttempt
argument_list|(
name|event
operator|.
name|getTaskType
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|attempt
operator|.
name|setStartTime
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|putTrackerName
argument_list|(
name|event
operator|.
name|getTrackerName
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|putHttpPort
argument_list|(
name|event
operator|.
name|getHttpPort
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|putShufflePort
argument_list|(
name|event
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processTaskAttemptFinishedEvent (TaskAttemptFinishedEvent event)
specifier|private
name|void
name|processTaskAttemptFinishedEvent
parameter_list|(
name|TaskAttemptFinishedEvent
name|event
parameter_list|)
block|{
name|ParsedTaskAttempt
name|attempt
init|=
name|getOrMakeTaskAttempt
argument_list|(
name|event
operator|.
name|getTaskType
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|attempt
operator|.
name|setResult
argument_list|(
name|getPre21Value
argument_list|(
name|event
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedHost
name|pHost
init|=
name|getAndRecordParsedHost
argument_list|(
name|event
operator|.
name|getRackName
argument_list|()
argument_list|,
name|event
operator|.
name|getHostname
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pHost
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setLocation
argument_list|(
name|pHost
operator|.
name|makeLoggedLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|attempt
operator|.
name|setFinishTime
argument_list|(
name|event
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|incorporateCounters
argument_list|(
operator|(
operator|(
name|TaskAttemptFinished
operator|)
name|event
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|counters
argument_list|)
expr_stmt|;
block|}
DECL|method|processReduceAttemptFinishedEvent ( ReduceAttemptFinishedEvent event)
specifier|private
name|void
name|processReduceAttemptFinishedEvent
parameter_list|(
name|ReduceAttemptFinishedEvent
name|event
parameter_list|)
block|{
name|ParsedTaskAttempt
name|attempt
init|=
name|getOrMakeTaskAttempt
argument_list|(
name|event
operator|.
name|getTaskType
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|attempt
operator|.
name|setResult
argument_list|(
name|getPre21Value
argument_list|(
name|event
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|setHostName
argument_list|(
name|event
operator|.
name|getHostname
argument_list|()
argument_list|,
name|event
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedHost
name|pHost
init|=
name|getAndRecordParsedHost
argument_list|(
name|event
operator|.
name|getRackName
argument_list|()
argument_list|,
name|event
operator|.
name|getHostname
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pHost
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setLocation
argument_list|(
name|pHost
operator|.
name|makeLoggedLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// XXX There may be redundant location info available in the event.
comment|// We might consider extracting it from this event. Currently this
comment|// is redundant, but making this will add future-proofing.
name|attempt
operator|.
name|setFinishTime
argument_list|(
name|event
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|setShuffleFinished
argument_list|(
name|event
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|setSortFinished
argument_list|(
name|event
operator|.
name|getSortFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|incorporateCounters
argument_list|(
operator|(
operator|(
name|ReduceAttemptFinished
operator|)
name|event
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|counters
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetClockSplits
argument_list|(
name|event
operator|.
name|getClockSplits
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetCpuUsages
argument_list|(
name|event
operator|.
name|getCpuUsages
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetVMemKbytes
argument_list|(
name|event
operator|.
name|getVMemKbytes
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetPhysMemKbytes
argument_list|(
name|event
operator|.
name|getPhysMemKbytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processMapAttemptFinishedEvent (MapAttemptFinishedEvent event)
specifier|private
name|void
name|processMapAttemptFinishedEvent
parameter_list|(
name|MapAttemptFinishedEvent
name|event
parameter_list|)
block|{
name|ParsedTaskAttempt
name|attempt
init|=
name|getOrMakeTaskAttempt
argument_list|(
name|event
operator|.
name|getTaskType
argument_list|()
argument_list|,
name|event
operator|.
name|getTaskId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|attempt
operator|.
name|setResult
argument_list|(
name|getPre21Value
argument_list|(
name|event
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|setHostName
argument_list|(
name|event
operator|.
name|getHostname
argument_list|()
argument_list|,
name|event
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedHost
name|pHost
init|=
name|getAndRecordParsedHost
argument_list|(
name|event
operator|.
name|getRackName
argument_list|()
argument_list|,
name|event
operator|.
name|getHostname
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pHost
operator|!=
literal|null
condition|)
block|{
name|attempt
operator|.
name|setLocation
argument_list|(
name|pHost
operator|.
name|makeLoggedLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// XXX There may be redundant location info available in the event.
comment|// We might consider extracting it from this event. Currently this
comment|// is redundant, but making this will add future-proofing.
name|attempt
operator|.
name|setFinishTime
argument_list|(
name|event
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|incorporateCounters
argument_list|(
operator|(
operator|(
name|MapAttemptFinished
operator|)
name|event
operator|.
name|getDatum
argument_list|()
operator|)
operator|.
name|counters
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetClockSplits
argument_list|(
name|event
operator|.
name|getClockSplits
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetCpuUsages
argument_list|(
name|event
operator|.
name|getCpuUsages
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetVMemKbytes
argument_list|(
name|event
operator|.
name|getVMemKbytes
argument_list|()
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|arraySetPhysMemKbytes
argument_list|(
name|event
operator|.
name|getPhysMemKbytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processJobUnsuccessfulCompletionEvent ( JobUnsuccessfulCompletionEvent event)
specifier|private
name|void
name|processJobUnsuccessfulCompletionEvent
parameter_list|(
name|JobUnsuccessfulCompletionEvent
name|event
parameter_list|)
block|{
name|result
operator|.
name|setOutcome
argument_list|(
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|valueOf
argument_list|(
name|event
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setFinishTime
argument_list|(
name|event
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// No counters in JobUnsuccessfulCompletionEvent
block|}
DECL|method|processJobSubmittedEvent (JobSubmittedEvent event)
specifier|private
name|void
name|processJobSubmittedEvent
parameter_list|(
name|JobSubmittedEvent
name|event
parameter_list|)
block|{
name|result
operator|.
name|setJobID
argument_list|(
name|event
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setJobName
argument_list|(
name|event
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setUser
argument_list|(
name|event
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSubmitTime
argument_list|(
name|event
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|putJobConfPath
argument_list|(
name|event
operator|.
name|getJobConfPath
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|putJobAcls
argument_list|(
name|event
operator|.
name|getJobAcls
argument_list|()
argument_list|)
expr_stmt|;
comment|// set the queue name if existing
name|String
name|queue
init|=
name|event
operator|.
name|getJobQueueName
argument_list|()
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processJobQueueChangeEvent (JobQueueChangeEvent event)
specifier|private
name|void
name|processJobQueueChangeEvent
parameter_list|(
name|JobQueueChangeEvent
name|event
parameter_list|)
block|{
comment|// set the queue name if existing
name|String
name|queue
init|=
name|event
operator|.
name|getJobQueueName
argument_list|()
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processJobStatusChangedEvent (JobStatusChangedEvent event)
specifier|private
name|void
name|processJobStatusChangedEvent
parameter_list|(
name|JobStatusChangedEvent
name|event
parameter_list|)
block|{
name|result
operator|.
name|setOutcome
argument_list|(
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|valueOf
argument_list|(
name|event
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|processJobPriorityChangeEvent (JobPriorityChangeEvent event)
specifier|private
name|void
name|processJobPriorityChangeEvent
parameter_list|(
name|JobPriorityChangeEvent
name|event
parameter_list|)
block|{
name|result
operator|.
name|setPriority
argument_list|(
name|LoggedJob
operator|.
name|JobPriority
operator|.
name|valueOf
argument_list|(
name|event
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|processJobInitedEvent (JobInitedEvent event)
specifier|private
name|void
name|processJobInitedEvent
parameter_list|(
name|JobInitedEvent
name|event
parameter_list|)
block|{
name|result
operator|.
name|setLaunchTime
argument_list|(
name|event
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setTotalMaps
argument_list|(
name|event
operator|.
name|getTotalMaps
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setTotalReduces
argument_list|(
name|event
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processJobInfoChangeEvent (JobInfoChangeEvent event)
specifier|private
name|void
name|processJobInfoChangeEvent
parameter_list|(
name|JobInfoChangeEvent
name|event
parameter_list|)
block|{
name|result
operator|.
name|setLaunchTime
argument_list|(
name|event
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processJobFinishedEvent (JobFinishedEvent event)
specifier|private
name|void
name|processJobFinishedEvent
parameter_list|(
name|JobFinishedEvent
name|event
parameter_list|)
block|{
name|result
operator|.
name|setFinishTime
argument_list|(
name|event
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setJobID
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
name|result
operator|.
name|setOutcome
argument_list|(
name|Values
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|JobFinished
name|job
init|=
operator|(
name|JobFinished
operator|)
name|event
operator|.
name|getDatum
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|countersMap
init|=
name|JobHistoryUtils
operator|.
name|extractCounters
argument_list|(
name|job
operator|.
name|totalCounters
argument_list|)
decl_stmt|;
name|result
operator|.
name|putTotalCounters
argument_list|(
name|countersMap
argument_list|)
expr_stmt|;
name|countersMap
operator|=
name|JobHistoryUtils
operator|.
name|extractCounters
argument_list|(
name|job
operator|.
name|mapCounters
argument_list|)
expr_stmt|;
name|result
operator|.
name|putMapCounters
argument_list|(
name|countersMap
argument_list|)
expr_stmt|;
name|countersMap
operator|=
name|JobHistoryUtils
operator|.
name|extractCounters
argument_list|(
name|job
operator|.
name|reduceCounters
argument_list|)
expr_stmt|;
name|result
operator|.
name|putReduceCounters
argument_list|(
name|countersMap
argument_list|)
expr_stmt|;
block|}
DECL|method|getTask (String taskIDname)
specifier|private
name|ParsedTask
name|getTask
parameter_list|(
name|String
name|taskIDname
parameter_list|)
block|{
name|ParsedTask
name|result
init|=
name|mapTasks
operator|.
name|get
argument_list|(
name|taskIDname
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
name|result
operator|=
name|reduceTasks
operator|.
name|get
argument_list|(
name|taskIDname
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
name|otherTasks
operator|.
name|get
argument_list|(
name|taskIDname
argument_list|)
return|;
block|}
comment|/**    * @param type    *          the task type    * @param taskIDname    *          the task ID name, as a string    * @param allowCreate    *          if true, we can create a task.    * @return    */
DECL|method|getOrMakeTask (TaskType type, String taskIDname, boolean allowCreate)
specifier|private
name|ParsedTask
name|getOrMakeTask
parameter_list|(
name|TaskType
name|type
parameter_list|,
name|String
name|taskIDname
parameter_list|,
name|boolean
name|allowCreate
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ParsedTask
argument_list|>
name|taskMap
init|=
name|otherTasks
decl_stmt|;
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|tasks
init|=
name|this
operator|.
name|result
operator|.
name|getOtherTasks
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|MAP
case|:
name|taskMap
operator|=
name|mapTasks
expr_stmt|;
name|tasks
operator|=
name|this
operator|.
name|result
operator|.
name|getMapTasks
argument_list|()
expr_stmt|;
break|break;
case|case
name|REDUCE
case|:
name|taskMap
operator|=
name|reduceTasks
expr_stmt|;
name|tasks
operator|=
name|this
operator|.
name|result
operator|.
name|getReduceTasks
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|// no code
block|}
name|ParsedTask
name|result
init|=
name|taskMap
operator|.
name|get
argument_list|(
name|taskIDname
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|allowCreate
condition|)
block|{
name|result
operator|=
operator|new
name|ParsedTask
argument_list|()
expr_stmt|;
name|result
operator|.
name|setTaskType
argument_list|(
name|getPre21Value
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setTaskID
argument_list|(
name|taskIDname
argument_list|)
expr_stmt|;
name|taskMap
operator|.
name|put
argument_list|(
name|taskIDname
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getOrMakeTaskAttempt (TaskType type, String taskIDName, String taskAttemptName)
specifier|private
name|ParsedTaskAttempt
name|getOrMakeTaskAttempt
parameter_list|(
name|TaskType
name|type
parameter_list|,
name|String
name|taskIDName
parameter_list|,
name|String
name|taskAttemptName
parameter_list|)
block|{
name|ParsedTask
name|task
init|=
name|getOrMakeTask
argument_list|(
name|type
argument_list|,
name|taskIDName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ParsedTaskAttempt
name|result
init|=
name|attempts
operator|.
name|get
argument_list|(
name|taskAttemptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|task
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ParsedTaskAttempt
argument_list|()
expr_stmt|;
name|result
operator|.
name|setAttemptID
argument_list|(
name|taskAttemptName
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|taskAttemptName
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|task
operator|.
name|getAttempts
argument_list|()
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getAndRecordParsedHost (String hostName)
specifier|private
name|ParsedHost
name|getAndRecordParsedHost
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
return|return
name|getAndRecordParsedHost
argument_list|(
literal|null
argument_list|,
name|hostName
argument_list|)
return|;
block|}
DECL|method|getAndRecordParsedHost (String rackName, String hostName)
specifier|private
name|ParsedHost
name|getAndRecordParsedHost
parameter_list|(
name|String
name|rackName
parameter_list|,
name|String
name|hostName
parameter_list|)
block|{
name|ParsedHost
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rackName
operator|==
literal|null
condition|)
block|{
comment|// for old (pre-23) job history files where hostname was represented as
comment|// /rackname/hostname
name|result
operator|=
name|ParsedHost
operator|.
name|parse
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for new (post-23) job history files
name|result
operator|=
operator|new
name|ParsedHost
argument_list|(
name|rackName
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|ParsedHost
name|canonicalResult
init|=
name|allHosts
operator|.
name|get
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|canonicalResult
operator|!=
literal|null
condition|)
block|{
return|return
name|canonicalResult
return|;
block|}
name|allHosts
operator|.
name|put
argument_list|(
name|result
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|preferredLocationForSplits (String splits)
specifier|private
name|ArrayList
argument_list|<
name|LoggedLocation
argument_list|>
name|preferredLocationForSplits
parameter_list|(
name|String
name|splits
parameter_list|)
block|{
if|if
condition|(
name|splits
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|LoggedLocation
argument_list|>
name|locations
init|=
literal|null
decl_stmt|;
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|splits
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|countTokens
argument_list|()
operator|<=
name|MAXIMUM_PREFERRED_LOCATIONS
condition|)
block|{
name|locations
operator|=
operator|new
name|ArrayList
argument_list|<
name|LoggedLocation
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|nextSplit
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|ParsedHost
name|node
init|=
name|getAndRecordParsedHost
argument_list|(
name|nextSplit
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|node
operator|!=
literal|null
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|node
operator|.
name|makeLoggedLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|locations
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

