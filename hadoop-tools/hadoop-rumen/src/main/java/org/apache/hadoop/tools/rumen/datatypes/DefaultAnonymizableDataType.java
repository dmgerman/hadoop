begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen.datatypes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|anonymization
operator|.
name|WordList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|anonymization
operator|.
name|WordListAnonymizerUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
operator|.
name|StatePool
import|;
end_import

begin_comment
comment|/**  * Represents a default anonymizable Rumen data-type. It uses   * {@link WordListAnonymizerUtility} for anonymization.  */
end_comment

begin_class
DECL|class|DefaultAnonymizableDataType
specifier|public
specifier|abstract
class|class
name|DefaultAnonymizableDataType
implements|implements
name|AnonymizableDataType
argument_list|<
name|String
argument_list|>
block|{
DECL|field|DEFAULT_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PREFIX
init|=
literal|"data"
decl_stmt|;
DECL|method|getPrefix ()
specifier|protected
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|DEFAULT_PREFIX
return|;
block|}
comment|// Determines if the contained data needs anonymization
DECL|method|needsAnonymization (Configuration conf)
specifier|protected
name|boolean
name|needsAnonymization
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getAnonymizedValue (StatePool statePool, Configuration conf)
specifier|public
specifier|final
name|String
name|getAnonymizedValue
parameter_list|(
name|StatePool
name|statePool
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|needsAnonymization
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|WordList
name|state
init|=
operator|(
name|WordList
operator|)
name|statePool
operator|.
name|getState
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
operator|new
name|WordList
argument_list|(
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|statePool
operator|.
name|addState
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
return|return
name|anonymize
argument_list|(
name|getValue
argument_list|()
argument_list|,
name|state
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getValue
argument_list|()
return|;
block|}
block|}
DECL|method|anonymize (String data, WordList wordList)
specifier|private
specifier|static
name|String
name|anonymize
parameter_list|(
name|String
name|data
parameter_list|,
name|WordList
name|wordList
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|wordList
operator|.
name|contains
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|wordList
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|wordList
operator|.
name|getName
argument_list|()
operator|+
name|wordList
operator|.
name|indexOf
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
end_class

end_unit

