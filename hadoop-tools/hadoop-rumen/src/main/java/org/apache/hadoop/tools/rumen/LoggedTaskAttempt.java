begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonAnySetter
import|;
end_import

begin_comment
comment|// HACK ALERT!!!  This "should" have have two subclasses, which might be called
end_comment

begin_comment
comment|//                LoggedMapTaskAttempt and LoggedReduceTaskAttempt, but
end_comment

begin_comment
comment|//                the Jackson implementation of JSON doesn't handle a
end_comment

begin_comment
comment|//                superclass-valued field.
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JhCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JhCounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JhCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|NodeName
import|;
end_import

begin_comment
comment|/**  * A {@link LoggedTaskAttempt} represents an attempt to run an hadoop task in a  * hadoop job. Note that a task can have several attempts.  *   * All of the public methods are simply accessors for the instance variables we  * want to write out in the JSON files.  *   */
end_comment

begin_class
DECL|class|LoggedTaskAttempt
specifier|public
class|class
name|LoggedTaskAttempt
implements|implements
name|DeepCompare
block|{
DECL|field|attemptID
name|TaskAttemptID
name|attemptID
decl_stmt|;
DECL|field|result
name|Pre21JobHistoryConstants
operator|.
name|Values
name|result
decl_stmt|;
DECL|field|startTime
name|long
name|startTime
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|finishTime
name|long
name|finishTime
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|hostName
name|NodeName
name|hostName
decl_stmt|;
DECL|field|hdfsBytesRead
name|long
name|hdfsBytesRead
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|hdfsBytesWritten
name|long
name|hdfsBytesWritten
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|fileBytesRead
name|long
name|fileBytesRead
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|fileBytesWritten
name|long
name|fileBytesWritten
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|mapInputRecords
name|long
name|mapInputRecords
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|mapInputBytes
name|long
name|mapInputBytes
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|mapOutputBytes
name|long
name|mapOutputBytes
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|mapOutputRecords
name|long
name|mapOutputRecords
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|combineInputRecords
name|long
name|combineInputRecords
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|reduceInputGroups
name|long
name|reduceInputGroups
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|reduceInputRecords
name|long
name|reduceInputRecords
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|reduceShuffleBytes
name|long
name|reduceShuffleBytes
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|reduceOutputRecords
name|long
name|reduceOutputRecords
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|spilledRecords
name|long
name|spilledRecords
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|shuffleFinished
name|long
name|shuffleFinished
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|sortFinished
name|long
name|sortFinished
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|location
name|LoggedLocation
name|location
decl_stmt|;
comment|// Initialize to default object for backward compatibility
DECL|field|metrics
name|ResourceUsageMetrics
name|metrics
init|=
operator|new
name|ResourceUsageMetrics
argument_list|()
decl_stmt|;
DECL|field|clockSplits
name|List
argument_list|<
name|Integer
argument_list|>
name|clockSplits
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|cpuUsages
name|List
argument_list|<
name|Integer
argument_list|>
name|cpuUsages
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|vMemKbytes
name|List
argument_list|<
name|Integer
argument_list|>
name|vMemKbytes
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|physMemKbytes
name|List
argument_list|<
name|Integer
argument_list|>
name|physMemKbytes
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|LoggedTaskAttempt ()
name|LoggedTaskAttempt
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|// carries the kinds of splits vectors a LoggedTaskAttempt holds.
comment|//
comment|// Each enumeral has the following methods:
comment|//   get(LoggedTaskAttempt attempt)
comment|//    returns a List<Integer> with the corresponding value field
comment|//   set(LoggedTaskAttempt attempt, List<Integer> newValue)
comment|//    sets the value
comment|// There is also a pair of methods get(List<List<Integer>>) and
comment|//  set(List<List<Integer>>, List<Integer>) which correspondingly
comment|//  delivers or sets the appropriate element of the
comment|//  List<List<Integer>> .
comment|// This makes it easier to add another kind in the future.
DECL|enum|SplitVectorKind
specifier|public
enum|enum
name|SplitVectorKind
block|{
DECL|enumConstant|WALLCLOCK_TIME
name|WALLCLOCK_TIME
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|)
block|{
return|return
name|attempt
operator|.
name|getClockSplits
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|newValue
parameter_list|)
block|{
name|attempt
operator|.
name|setClockSplits
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|CPU_USAGE
name|CPU_USAGE
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|)
block|{
return|return
name|attempt
operator|.
name|getCpuUsages
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|newValue
parameter_list|)
block|{
name|attempt
operator|.
name|setCpuUsages
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|VIRTUAL_MEMORY_KBYTES
name|VIRTUAL_MEMORY_KBYTES
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|)
block|{
return|return
name|attempt
operator|.
name|getVMemKbytes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|newValue
parameter_list|)
block|{
name|attempt
operator|.
name|setVMemKbytes
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|PHYSICAL_MEMORY_KBYTES
name|PHYSICAL_MEMORY_KBYTES
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|)
block|{
return|return
name|attempt
operator|.
name|getPhysMemKbytes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|newValue
parameter_list|)
block|{
name|attempt
operator|.
name|setPhysMemKbytes
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|;
DECL|field|NULL_SPLITS_VECTOR
specifier|static
specifier|private
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|NULL_SPLITS_VECTOR
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|SplitVectorKind
name|kind
range|:
name|SplitVectorKind
operator|.
name|values
argument_list|()
control|)
block|{
name|NULL_SPLITS_VECTOR
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|get (LoggedTaskAttempt attempt)
specifier|abstract
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|)
function_decl|;
DECL|method|set (LoggedTaskAttempt attempt, List<Integer> newValue)
specifier|abstract
specifier|public
name|void
name|set
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|newValue
parameter_list|)
function_decl|;
DECL|method|get (List<List<Integer>> listSplits)
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|listSplits
parameter_list|)
block|{
return|return
name|listSplits
operator|.
name|get
argument_list|(
name|this
operator|.
name|ordinal
argument_list|()
argument_list|)
return|;
block|}
DECL|method|set (List<List<Integer>> listSplits, List<Integer> newValue)
specifier|public
name|void
name|set
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|listSplits
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|newValue
parameter_list|)
block|{
name|listSplits
operator|.
name|set
argument_list|(
name|this
operator|.
name|ordinal
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
DECL|method|getNullSplitsVector ()
specifier|static
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getNullSplitsVector
parameter_list|()
block|{
return|return
name|NULL_SPLITS_VECTOR
return|;
block|}
block|}
comment|/**    *    * @return a list of all splits vectors, ordered in enumeral order    *           within {@link SplitVectorKind} .  Do NOT use hard-coded    *           indices within the return for this with a hard-coded    *           index to get individual values; use    *           {@code SplitVectorKind.get(LoggedTaskAttempt)} instead.    */
DECL|method|allSplitVectors ()
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|allSplitVectors
parameter_list|()
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|SplitVectorKind
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|SplitVectorKind
name|kind
range|:
name|SplitVectorKind
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|kind
operator|.
name|get
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|field|alreadySeenAnySetterAttributes
specifier|static
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|alreadySeenAnySetterAttributes
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// for input parameter ignored.
annotation|@
name|JsonAnySetter
DECL|method|setUnknownAttribute (String attributeName, Object ignored)
specifier|public
name|void
name|setUnknownAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|Object
name|ignored
parameter_list|)
block|{
if|if
condition|(
operator|!
name|alreadySeenAnySetterAttributes
operator|.
name|contains
argument_list|(
name|attributeName
argument_list|)
condition|)
block|{
name|alreadySeenAnySetterAttributes
operator|.
name|add
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"In LoggedJob, we saw the unknown attribute "
operator|+
name|attributeName
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getClockSplits ()
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getClockSplits
parameter_list|()
block|{
return|return
name|clockSplits
return|;
block|}
DECL|method|setClockSplits (List<Integer> clockSplits)
name|void
name|setClockSplits
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|clockSplits
parameter_list|)
block|{
name|this
operator|.
name|clockSplits
operator|=
name|clockSplits
expr_stmt|;
block|}
DECL|method|arraySetClockSplits (int[] clockSplits)
name|void
name|arraySetClockSplits
parameter_list|(
name|int
index|[]
name|clockSplits
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clockSplits
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|clockSplits
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|clockSplits
operator|=
name|result
expr_stmt|;
block|}
DECL|method|getCpuUsages ()
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getCpuUsages
parameter_list|()
block|{
return|return
name|cpuUsages
return|;
block|}
DECL|method|setCpuUsages (List<Integer> cpuUsages)
name|void
name|setCpuUsages
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|cpuUsages
parameter_list|)
block|{
name|this
operator|.
name|cpuUsages
operator|=
name|cpuUsages
expr_stmt|;
block|}
DECL|method|arraySetCpuUsages (int[] cpuUsages)
name|void
name|arraySetCpuUsages
parameter_list|(
name|int
index|[]
name|cpuUsages
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cpuUsages
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|cpuUsages
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cpuUsages
operator|=
name|result
expr_stmt|;
block|}
DECL|method|getVMemKbytes ()
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getVMemKbytes
parameter_list|()
block|{
return|return
name|vMemKbytes
return|;
block|}
DECL|method|setVMemKbytes (List<Integer> vMemKbytes)
name|void
name|setVMemKbytes
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|vMemKbytes
parameter_list|)
block|{
name|this
operator|.
name|vMemKbytes
operator|=
name|vMemKbytes
expr_stmt|;
block|}
DECL|method|arraySetVMemKbytes (int[] vMemKbytes)
name|void
name|arraySetVMemKbytes
parameter_list|(
name|int
index|[]
name|vMemKbytes
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vMemKbytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|vMemKbytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|vMemKbytes
operator|=
name|result
expr_stmt|;
block|}
DECL|method|getPhysMemKbytes ()
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getPhysMemKbytes
parameter_list|()
block|{
return|return
name|physMemKbytes
return|;
block|}
DECL|method|setPhysMemKbytes (List<Integer> physMemKbytes)
name|void
name|setPhysMemKbytes
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|physMemKbytes
parameter_list|)
block|{
name|this
operator|.
name|physMemKbytes
operator|=
name|physMemKbytes
expr_stmt|;
block|}
DECL|method|arraySetPhysMemKbytes (int[] physMemKbytes)
name|void
name|arraySetPhysMemKbytes
parameter_list|(
name|int
index|[]
name|physMemKbytes
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|physMemKbytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|physMemKbytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|physMemKbytes
operator|=
name|result
expr_stmt|;
block|}
DECL|method|adjustTimes (long adjustment)
name|void
name|adjustTimes
parameter_list|(
name|long
name|adjustment
parameter_list|)
block|{
name|startTime
operator|+=
name|adjustment
expr_stmt|;
name|finishTime
operator|+=
name|adjustment
expr_stmt|;
comment|// For reduce attempts, adjust the different phases' finish times also
if|if
condition|(
name|sortFinished
operator|>=
literal|0
condition|)
block|{
name|shuffleFinished
operator|+=
name|adjustment
expr_stmt|;
name|sortFinished
operator|+=
name|adjustment
expr_stmt|;
block|}
block|}
DECL|method|getShuffleFinished ()
specifier|public
name|long
name|getShuffleFinished
parameter_list|()
block|{
return|return
name|shuffleFinished
return|;
block|}
DECL|method|setShuffleFinished (long shuffleFinished)
name|void
name|setShuffleFinished
parameter_list|(
name|long
name|shuffleFinished
parameter_list|)
block|{
name|this
operator|.
name|shuffleFinished
operator|=
name|shuffleFinished
expr_stmt|;
block|}
DECL|method|getSortFinished ()
specifier|public
name|long
name|getSortFinished
parameter_list|()
block|{
return|return
name|sortFinished
return|;
block|}
DECL|method|setSortFinished (long sortFinished)
name|void
name|setSortFinished
parameter_list|(
name|long
name|sortFinished
parameter_list|)
block|{
name|this
operator|.
name|sortFinished
operator|=
name|sortFinished
expr_stmt|;
block|}
DECL|method|getAttemptID ()
specifier|public
name|TaskAttemptID
name|getAttemptID
parameter_list|()
block|{
return|return
name|attemptID
return|;
block|}
DECL|method|setAttemptID (String attemptID)
name|void
name|setAttemptID
parameter_list|(
name|String
name|attemptID
parameter_list|)
block|{
name|this
operator|.
name|attemptID
operator|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
block|}
DECL|method|getResult ()
specifier|public
name|Pre21JobHistoryConstants
operator|.
name|Values
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
DECL|method|setResult (Pre21JobHistoryConstants.Values result)
name|void
name|setResult
parameter_list|(
name|Pre21JobHistoryConstants
operator|.
name|Values
name|result
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
DECL|method|setStartTime (long startTime)
name|void
name|setStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
return|return
name|finishTime
return|;
block|}
DECL|method|setFinishTime (long finishTime)
name|void
name|setFinishTime
parameter_list|(
name|long
name|finishTime
parameter_list|)
block|{
name|this
operator|.
name|finishTime
operator|=
name|finishTime
expr_stmt|;
block|}
DECL|method|getHostName ()
specifier|public
name|NodeName
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
comment|// This is needed for JSON deserialization
DECL|method|setHostName (String hostName)
name|void
name|setHostName
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|this
operator|.
name|hostName
operator|=
name|hostName
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|NodeName
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
block|}
comment|// In job-history, hostName is saved in the format rackName/NodeName
comment|//TODO this is a hack! The '/' handling needs fixing.
DECL|method|setHostName (String hostName, String rackName)
name|void
name|setHostName
parameter_list|(
name|String
name|hostName
parameter_list|,
name|String
name|rackName
parameter_list|)
block|{
if|if
condition|(
name|hostName
operator|==
literal|null
operator|||
name|hostName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid entry! Missing hostname"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|rackName
operator|==
literal|null
operator|||
name|rackName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|setHostName
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// make sure that the rackname is prefixed with a '/'
if|if
condition|(
operator|!
name|rackName
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|rackName
operator|=
literal|"/"
operator|+
name|rackName
expr_stmt|;
block|}
comment|// make sure that the hostname is prefixed with a '/'
if|if
condition|(
operator|!
name|hostName
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|hostName
operator|=
literal|"/"
operator|+
name|hostName
expr_stmt|;
block|}
name|setHostName
argument_list|(
name|rackName
operator|.
name|intern
argument_list|()
operator|+
name|hostName
operator|.
name|intern
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHdfsBytesRead ()
specifier|public
name|long
name|getHdfsBytesRead
parameter_list|()
block|{
return|return
name|hdfsBytesRead
return|;
block|}
DECL|method|setHdfsBytesRead (long hdfsBytesRead)
name|void
name|setHdfsBytesRead
parameter_list|(
name|long
name|hdfsBytesRead
parameter_list|)
block|{
name|this
operator|.
name|hdfsBytesRead
operator|=
name|hdfsBytesRead
expr_stmt|;
block|}
DECL|method|getHdfsBytesWritten ()
specifier|public
name|long
name|getHdfsBytesWritten
parameter_list|()
block|{
return|return
name|hdfsBytesWritten
return|;
block|}
DECL|method|setHdfsBytesWritten (long hdfsBytesWritten)
name|void
name|setHdfsBytesWritten
parameter_list|(
name|long
name|hdfsBytesWritten
parameter_list|)
block|{
name|this
operator|.
name|hdfsBytesWritten
operator|=
name|hdfsBytesWritten
expr_stmt|;
block|}
DECL|method|getFileBytesRead ()
specifier|public
name|long
name|getFileBytesRead
parameter_list|()
block|{
return|return
name|fileBytesRead
return|;
block|}
DECL|method|setFileBytesRead (long fileBytesRead)
name|void
name|setFileBytesRead
parameter_list|(
name|long
name|fileBytesRead
parameter_list|)
block|{
name|this
operator|.
name|fileBytesRead
operator|=
name|fileBytesRead
expr_stmt|;
block|}
DECL|method|getFileBytesWritten ()
specifier|public
name|long
name|getFileBytesWritten
parameter_list|()
block|{
return|return
name|fileBytesWritten
return|;
block|}
DECL|method|setFileBytesWritten (long fileBytesWritten)
name|void
name|setFileBytesWritten
parameter_list|(
name|long
name|fileBytesWritten
parameter_list|)
block|{
name|this
operator|.
name|fileBytesWritten
operator|=
name|fileBytesWritten
expr_stmt|;
block|}
DECL|method|getMapInputRecords ()
specifier|public
name|long
name|getMapInputRecords
parameter_list|()
block|{
return|return
name|mapInputRecords
return|;
block|}
DECL|method|setMapInputRecords (long mapInputRecords)
name|void
name|setMapInputRecords
parameter_list|(
name|long
name|mapInputRecords
parameter_list|)
block|{
name|this
operator|.
name|mapInputRecords
operator|=
name|mapInputRecords
expr_stmt|;
block|}
DECL|method|getMapOutputBytes ()
specifier|public
name|long
name|getMapOutputBytes
parameter_list|()
block|{
return|return
name|mapOutputBytes
return|;
block|}
DECL|method|setMapOutputBytes (long mapOutputBytes)
name|void
name|setMapOutputBytes
parameter_list|(
name|long
name|mapOutputBytes
parameter_list|)
block|{
name|this
operator|.
name|mapOutputBytes
operator|=
name|mapOutputBytes
expr_stmt|;
block|}
DECL|method|getMapOutputRecords ()
specifier|public
name|long
name|getMapOutputRecords
parameter_list|()
block|{
return|return
name|mapOutputRecords
return|;
block|}
DECL|method|setMapOutputRecords (long mapOutputRecords)
name|void
name|setMapOutputRecords
parameter_list|(
name|long
name|mapOutputRecords
parameter_list|)
block|{
name|this
operator|.
name|mapOutputRecords
operator|=
name|mapOutputRecords
expr_stmt|;
block|}
DECL|method|getCombineInputRecords ()
specifier|public
name|long
name|getCombineInputRecords
parameter_list|()
block|{
return|return
name|combineInputRecords
return|;
block|}
DECL|method|setCombineInputRecords (long combineInputRecords)
name|void
name|setCombineInputRecords
parameter_list|(
name|long
name|combineInputRecords
parameter_list|)
block|{
name|this
operator|.
name|combineInputRecords
operator|=
name|combineInputRecords
expr_stmt|;
block|}
DECL|method|getReduceInputGroups ()
specifier|public
name|long
name|getReduceInputGroups
parameter_list|()
block|{
return|return
name|reduceInputGroups
return|;
block|}
DECL|method|setReduceInputGroups (long reduceInputGroups)
name|void
name|setReduceInputGroups
parameter_list|(
name|long
name|reduceInputGroups
parameter_list|)
block|{
name|this
operator|.
name|reduceInputGroups
operator|=
name|reduceInputGroups
expr_stmt|;
block|}
DECL|method|getReduceInputRecords ()
specifier|public
name|long
name|getReduceInputRecords
parameter_list|()
block|{
return|return
name|reduceInputRecords
return|;
block|}
DECL|method|setReduceInputRecords (long reduceInputRecords)
name|void
name|setReduceInputRecords
parameter_list|(
name|long
name|reduceInputRecords
parameter_list|)
block|{
name|this
operator|.
name|reduceInputRecords
operator|=
name|reduceInputRecords
expr_stmt|;
block|}
DECL|method|getReduceShuffleBytes ()
specifier|public
name|long
name|getReduceShuffleBytes
parameter_list|()
block|{
return|return
name|reduceShuffleBytes
return|;
block|}
DECL|method|setReduceShuffleBytes (long reduceShuffleBytes)
name|void
name|setReduceShuffleBytes
parameter_list|(
name|long
name|reduceShuffleBytes
parameter_list|)
block|{
name|this
operator|.
name|reduceShuffleBytes
operator|=
name|reduceShuffleBytes
expr_stmt|;
block|}
DECL|method|getReduceOutputRecords ()
specifier|public
name|long
name|getReduceOutputRecords
parameter_list|()
block|{
return|return
name|reduceOutputRecords
return|;
block|}
DECL|method|setReduceOutputRecords (long reduceOutputRecords)
name|void
name|setReduceOutputRecords
parameter_list|(
name|long
name|reduceOutputRecords
parameter_list|)
block|{
name|this
operator|.
name|reduceOutputRecords
operator|=
name|reduceOutputRecords
expr_stmt|;
block|}
DECL|method|getSpilledRecords ()
specifier|public
name|long
name|getSpilledRecords
parameter_list|()
block|{
return|return
name|spilledRecords
return|;
block|}
DECL|method|setSpilledRecords (long spilledRecords)
name|void
name|setSpilledRecords
parameter_list|(
name|long
name|spilledRecords
parameter_list|)
block|{
name|this
operator|.
name|spilledRecords
operator|=
name|spilledRecords
expr_stmt|;
block|}
DECL|method|getLocation ()
specifier|public
name|LoggedLocation
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
DECL|method|setLocation (LoggedLocation location)
name|void
name|setLocation
parameter_list|(
name|LoggedLocation
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
DECL|method|getMapInputBytes ()
specifier|public
name|long
name|getMapInputBytes
parameter_list|()
block|{
return|return
name|mapInputBytes
return|;
block|}
DECL|method|setMapInputBytes (long mapInputBytes)
name|void
name|setMapInputBytes
parameter_list|(
name|long
name|mapInputBytes
parameter_list|)
block|{
name|this
operator|.
name|mapInputBytes
operator|=
name|mapInputBytes
expr_stmt|;
block|}
comment|// incorporate event counters
DECL|method|incorporateCounters (JhCounters counters)
specifier|public
name|void
name|incorporateCounters
parameter_list|(
name|JhCounters
name|counters
parameter_list|)
block|{
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|hdfsBytesRead
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"HDFS_BYTES_READ"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|hdfsBytesWritten
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"HDFS_BYTES_WRITTEN"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|fileBytesRead
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"FILE_BYTES_READ"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|fileBytesWritten
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"FILE_BYTES_WRITTEN"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|mapInputBytes
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"MAP_INPUT_BYTES"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|mapInputRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"MAP_INPUT_RECORDS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|mapOutputBytes
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"MAP_OUTPUT_BYTES"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|mapOutputRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"MAP_OUTPUT_RECORDS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|combineInputRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"COMBINE_INPUT_RECORDS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|reduceInputGroups
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"REDUCE_INPUT_GROUPS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|reduceInputRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"REDUCE_INPUT_RECORDS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|reduceShuffleBytes
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"REDUCE_SHUFFLE_BYTES"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|reduceOutputRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"REDUCE_OUTPUT_RECORDS"
argument_list|)
expr_stmt|;
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|attempt
operator|.
name|spilledRecords
operator|=
name|val
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"SPILLED_RECORDS"
argument_list|)
expr_stmt|;
comment|// incorporate CPU usage
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|metrics
operator|.
name|setCumulativeCpuUsage
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"CPU_MILLISECONDS"
argument_list|)
expr_stmt|;
comment|// incorporate virtual memory usage
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|metrics
operator|.
name|setVirtualMemoryUsage
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"VIRTUAL_MEMORY_BYTES"
argument_list|)
expr_stmt|;
comment|// incorporate physical memory usage
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|metrics
operator|.
name|setPhysicalMemoryUsage
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"PHYSICAL_MEMORY_BYTES"
argument_list|)
expr_stmt|;
comment|// incorporate heap usage
name|incorporateCounter
argument_list|(
operator|new
name|SetField
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|void
name|set
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|metrics
operator|.
name|setHeapUsage
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|counters
argument_list|,
literal|"COMMITTED_HEAP_BYTES"
argument_list|)
expr_stmt|;
block|}
comment|// Get the resource usage metrics
DECL|method|getResourceUsageMetrics ()
specifier|public
name|ResourceUsageMetrics
name|getResourceUsageMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
comment|// Set the resource usage metrics
DECL|method|setResourceUsageMetrics (ResourceUsageMetrics metrics)
name|void
name|setResourceUsageMetrics
parameter_list|(
name|ResourceUsageMetrics
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
block|}
DECL|method|canonicalizeCounterName (String nonCanonicalName)
specifier|private
specifier|static
name|String
name|canonicalizeCounterName
parameter_list|(
name|String
name|nonCanonicalName
parameter_list|)
block|{
name|String
name|result
init|=
name|nonCanonicalName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'|'
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'|'
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'|'
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'|'
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|class|SetField
specifier|private
specifier|abstract
class|class
name|SetField
block|{
DECL|field|attempt
name|LoggedTaskAttempt
name|attempt
decl_stmt|;
DECL|method|SetField (LoggedTaskAttempt attempt)
name|SetField
parameter_list|(
name|LoggedTaskAttempt
name|attempt
parameter_list|)
block|{
name|this
operator|.
name|attempt
operator|=
name|attempt
expr_stmt|;
block|}
DECL|method|set (long value)
specifier|abstract
name|void
name|set
parameter_list|(
name|long
name|value
parameter_list|)
function_decl|;
block|}
DECL|method|incorporateCounter (SetField thunk, JhCounters counters, String counterName)
specifier|private
specifier|static
name|void
name|incorporateCounter
parameter_list|(
name|SetField
name|thunk
parameter_list|,
name|JhCounters
name|counters
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
name|counterName
operator|=
name|canonicalizeCounterName
argument_list|(
name|counterName
argument_list|)
expr_stmt|;
for|for
control|(
name|JhCounterGroup
name|group
range|:
name|counters
operator|.
name|groups
control|)
block|{
for|for
control|(
name|JhCounter
name|counter
range|:
name|group
operator|.
name|counts
control|)
block|{
if|if
condition|(
name|counterName
operator|.
name|equals
argument_list|(
name|canonicalizeCounterName
argument_list|(
name|counter
operator|.
name|name
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|thunk
operator|.
name|set
argument_list|(
name|counter
operator|.
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
DECL|method|compare1 (String c1, String c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|String
name|c1
parameter_list|,
name|String
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
operator|||
operator|!
name|c1
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (NodeName c1, NodeName c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|NodeName
name|c1
parameter_list|,
name|NodeName
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
name|compare1
argument_list|(
name|c1
operator|.
name|getValue
argument_list|()
argument_list|,
name|c2
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
DECL|method|compare1 (long c1, long c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|long
name|c1
parameter_list|,
name|long
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (Pre21JobHistoryConstants.Values c1, Pre21JobHistoryConstants.Values c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|Pre21JobHistoryConstants
operator|.
name|Values
name|c1
parameter_list|,
name|Pre21JobHistoryConstants
operator|.
name|Values
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (LoggedLocation c1, LoggedLocation c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|LoggedLocation
name|c1
parameter_list|,
name|LoggedLocation
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TreePath
name|recurse
init|=
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
name|recurse
argument_list|)
throw|;
block|}
name|c1
operator|.
name|deepCompare
argument_list|(
name|c2
argument_list|,
name|recurse
argument_list|)
expr_stmt|;
block|}
DECL|method|compare1 (List<Integer> c1, List<Integer> c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|c1
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
operator|||
name|c1
operator|.
name|size
argument_list|()
operator|!=
name|c2
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c1
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|c1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
literal|""
operator|+
name|c1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" != "
operator|+
name|c2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|,
name|i
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|deepCompare (DeepCompare comparand, TreePath loc)
specifier|public
name|void
name|deepCompare
parameter_list|(
name|DeepCompare
name|comparand
parameter_list|,
name|TreePath
name|loc
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
operator|!
operator|(
name|comparand
operator|instanceof
name|LoggedTaskAttempt
operator|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
literal|"comparand has wrong type"
argument_list|,
name|loc
argument_list|)
throw|;
block|}
name|LoggedTaskAttempt
name|other
init|=
operator|(
name|LoggedTaskAttempt
operator|)
name|comparand
decl_stmt|;
name|compare1
argument_list|(
name|attemptID
operator|.
name|toString
argument_list|()
argument_list|,
name|other
operator|.
name|attemptID
operator|.
name|toString
argument_list|()
argument_list|,
name|loc
argument_list|,
literal|"attemptID"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|result
argument_list|,
name|other
operator|.
name|result
argument_list|,
name|loc
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|startTime
argument_list|,
name|other
operator|.
name|startTime
argument_list|,
name|loc
argument_list|,
literal|"startTime"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|finishTime
argument_list|,
name|other
operator|.
name|finishTime
argument_list|,
name|loc
argument_list|,
literal|"finishTime"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|hostName
argument_list|,
name|other
operator|.
name|hostName
argument_list|,
name|loc
argument_list|,
literal|"hostName"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|hdfsBytesRead
argument_list|,
name|other
operator|.
name|hdfsBytesRead
argument_list|,
name|loc
argument_list|,
literal|"hdfsBytesRead"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|hdfsBytesWritten
argument_list|,
name|other
operator|.
name|hdfsBytesWritten
argument_list|,
name|loc
argument_list|,
literal|"hdfsBytesWritten"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|fileBytesRead
argument_list|,
name|other
operator|.
name|fileBytesRead
argument_list|,
name|loc
argument_list|,
literal|"fileBytesRead"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|fileBytesWritten
argument_list|,
name|other
operator|.
name|fileBytesWritten
argument_list|,
name|loc
argument_list|,
literal|"fileBytesWritten"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|mapInputBytes
argument_list|,
name|other
operator|.
name|mapInputBytes
argument_list|,
name|loc
argument_list|,
literal|"mapInputBytes"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|mapInputRecords
argument_list|,
name|other
operator|.
name|mapInputRecords
argument_list|,
name|loc
argument_list|,
literal|"mapInputRecords"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|mapOutputBytes
argument_list|,
name|other
operator|.
name|mapOutputBytes
argument_list|,
name|loc
argument_list|,
literal|"mapOutputBytes"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|mapOutputRecords
argument_list|,
name|other
operator|.
name|mapOutputRecords
argument_list|,
name|loc
argument_list|,
literal|"mapOutputRecords"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|combineInputRecords
argument_list|,
name|other
operator|.
name|combineInputRecords
argument_list|,
name|loc
argument_list|,
literal|"combineInputRecords"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|reduceInputGroups
argument_list|,
name|other
operator|.
name|reduceInputGroups
argument_list|,
name|loc
argument_list|,
literal|"reduceInputGroups"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|reduceInputRecords
argument_list|,
name|other
operator|.
name|reduceInputRecords
argument_list|,
name|loc
argument_list|,
literal|"reduceInputRecords"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|reduceShuffleBytes
argument_list|,
name|other
operator|.
name|reduceShuffleBytes
argument_list|,
name|loc
argument_list|,
literal|"reduceShuffleBytes"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|reduceOutputRecords
argument_list|,
name|other
operator|.
name|reduceOutputRecords
argument_list|,
name|loc
argument_list|,
literal|"reduceOutputRecords"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|spilledRecords
argument_list|,
name|other
operator|.
name|spilledRecords
argument_list|,
name|loc
argument_list|,
literal|"spilledRecords"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|shuffleFinished
argument_list|,
name|other
operator|.
name|shuffleFinished
argument_list|,
name|loc
argument_list|,
literal|"shuffleFinished"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|sortFinished
argument_list|,
name|other
operator|.
name|sortFinished
argument_list|,
name|loc
argument_list|,
literal|"sortFinished"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|location
argument_list|,
name|other
operator|.
name|location
argument_list|,
name|loc
argument_list|,
literal|"location"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|clockSplits
argument_list|,
name|other
operator|.
name|clockSplits
argument_list|,
name|loc
argument_list|,
literal|"clockSplits"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|cpuUsages
argument_list|,
name|other
operator|.
name|cpuUsages
argument_list|,
name|loc
argument_list|,
literal|"cpuUsages"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|vMemKbytes
argument_list|,
name|other
operator|.
name|vMemKbytes
argument_list|,
name|loc
argument_list|,
literal|"vMemKbytes"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|physMemKbytes
argument_list|,
name|other
operator|.
name|physMemKbytes
argument_list|,
name|loc
argument_list|,
literal|"physMemKbytes"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

