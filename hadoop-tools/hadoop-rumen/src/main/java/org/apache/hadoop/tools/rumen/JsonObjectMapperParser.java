begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * A simple wrapper for parsing JSON-encoded data using ObjectMapper.  *   * @param<T>  *          The (base) type of the object(s) to be parsed by this parser.  */
end_comment

begin_class
DECL|class|JsonObjectMapperParser
class|class
name|JsonObjectMapperParser
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Closeable
block|{
DECL|field|mapper
specifier|private
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
DECL|field|clazz
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
decl_stmt|;
DECL|field|jsonParser
specifier|private
specifier|final
name|JsonParser
name|jsonParser
decl_stmt|;
comment|/**    * Constructor.    *     * @param path    *          Path to the JSON data file, possibly compressed.    * @param conf    * @throws IOException    */
DECL|method|JsonObjectMapperParser (Path path, Class<? extends T> clazz, Configuration conf)
specifier|public
name|JsonObjectMapperParser
parameter_list|(
name|Path
name|path
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|InputStream
name|input
init|=
operator|new
name|PossiblyDecompressedInputStream
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|jsonParser
operator|=
name|mapper
operator|.
name|getFactory
argument_list|()
operator|.
name|createParser
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor.    *     * @param input    *          The input stream for the JSON data.    */
DECL|method|JsonObjectMapperParser (InputStream input, Class<? extends T> clazz)
specifier|public
name|JsonObjectMapperParser
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
block|{
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|jsonParser
operator|=
name|mapper
operator|.
name|getFactory
argument_list|()
operator|.
name|createParser
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the next object from the trace.    *     * @return The next instance of the object. Or null if we reach the end of    *         stream.    * @throws IOException    */
DECL|method|getNext ()
specifier|public
name|T
name|getNext
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonParser
argument_list|,
name|clazz
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JsonMappingException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|jsonParser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

