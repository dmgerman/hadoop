begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JhCounters
import|;
end_import

begin_comment
comment|/**  * This is a wrapper class around {@link LoggedTaskAttempt}. This provides  * also the extra information about the task attempt obtained from  * job history which is not written to the JSON trace file.  */
end_comment

begin_class
DECL|class|ParsedTaskAttempt
specifier|public
class|class
name|ParsedTaskAttempt
extends|extends
name|LoggedTaskAttempt
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ParsedTaskAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|diagnosticInfo
specifier|private
name|String
name|diagnosticInfo
decl_stmt|;
DECL|field|trackerName
specifier|private
name|String
name|trackerName
decl_stmt|;
DECL|field|httpPort
DECL|field|shufflePort
specifier|private
name|Integer
name|httpPort
decl_stmt|,
name|shufflePort
decl_stmt|;
DECL|field|countersMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|countersMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ParsedTaskAttempt ()
name|ParsedTaskAttempt
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** incorporate event counters */
DECL|method|incorporateCounters (JhCounters counters)
specifier|public
name|void
name|incorporateCounters
parameter_list|(
name|JhCounters
name|counters
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|countersMap
init|=
name|JobHistoryUtils
operator|.
name|extractCounters
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|putCounters
argument_list|(
name|countersMap
argument_list|)
expr_stmt|;
name|super
operator|.
name|incorporateCounters
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
comment|/** Set the task attempt counters */
DECL|method|putCounters (Map<String, Long> counters)
specifier|public
name|void
name|putCounters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|counters
parameter_list|)
block|{
name|this
operator|.
name|countersMap
operator|=
name|counters
expr_stmt|;
block|}
comment|/**    * @return the task attempt counters    */
DECL|method|obtainCounters ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|obtainCounters
parameter_list|()
block|{
return|return
name|countersMap
return|;
block|}
comment|/** Set the task attempt diagnostic-info */
DECL|method|putDiagnosticInfo (String msg)
specifier|public
name|void
name|putDiagnosticInfo
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|diagnosticInfo
operator|=
name|msg
expr_stmt|;
block|}
comment|/**    * @return the diagnostic-info of this task attempt.    *         If the attempt is successful, returns null.    */
DECL|method|obtainDiagnosticInfo ()
specifier|public
name|String
name|obtainDiagnosticInfo
parameter_list|()
block|{
return|return
name|diagnosticInfo
return|;
block|}
DECL|method|putTrackerName (String trackerName)
name|void
name|putTrackerName
parameter_list|(
name|String
name|trackerName
parameter_list|)
block|{
name|this
operator|.
name|trackerName
operator|=
name|trackerName
expr_stmt|;
block|}
DECL|method|obtainTrackerName ()
specifier|public
name|String
name|obtainTrackerName
parameter_list|()
block|{
return|return
name|trackerName
return|;
block|}
DECL|method|putHttpPort (int port)
name|void
name|putHttpPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|httpPort
operator|=
name|port
expr_stmt|;
block|}
comment|/**    * @return http port if set. Returns null otherwise.    */
DECL|method|obtainHttpPort ()
specifier|public
name|Integer
name|obtainHttpPort
parameter_list|()
block|{
return|return
name|httpPort
return|;
block|}
DECL|method|putShufflePort (int port)
name|void
name|putShufflePort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|shufflePort
operator|=
name|port
expr_stmt|;
block|}
comment|/**    * @return shuffle port if set. Returns null otherwise.    */
DECL|method|obtainShufflePort ()
specifier|public
name|Integer
name|obtainShufflePort
parameter_list|()
block|{
return|return
name|shufflePort
return|;
block|}
comment|/** Dump the extra info of ParsedTaskAttempt */
DECL|method|dumpParsedTaskAttempt ()
name|void
name|dumpParsedTaskAttempt
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ParsedTaskAttempt details:"
operator|+
name|obtainCounters
argument_list|()
operator|+
literal|";DiagnosticInfo="
operator|+
name|obtainDiagnosticInfo
argument_list|()
operator|+
literal|"\n"
operator|+
name|obtainTrackerName
argument_list|()
operator|+
literal|";"
operator|+
name|obtainHttpPort
argument_list|()
operator|+
literal|";"
operator|+
name|obtainShufflePort
argument_list|()
operator|+
literal|";rack="
operator|+
name|getHostName
argument_list|()
operator|.
name|getRackName
argument_list|()
operator|+
literal|";host="
operator|+
name|getHostName
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

