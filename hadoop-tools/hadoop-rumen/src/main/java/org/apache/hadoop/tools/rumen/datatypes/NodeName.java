begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen.datatypes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ParsedHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|anonymization
operator|.
name|WordList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
operator|.
name|StatePool
import|;
end_import

begin_comment
comment|/**  * Represents the cluster host.  */
end_comment

begin_class
DECL|class|NodeName
specifier|public
class|class
name|NodeName
implements|implements
name|AnonymizableDataType
argument_list|<
name|String
argument_list|>
block|{
DECL|field|hostName
specifier|private
name|String
name|hostName
decl_stmt|;
DECL|field|rackName
specifier|private
name|String
name|rackName
decl_stmt|;
DECL|field|nodeName
specifier|private
name|String
name|nodeName
decl_stmt|;
DECL|field|anonymizedNodeName
specifier|private
name|String
name|anonymizedNodeName
decl_stmt|;
DECL|field|ROOT
specifier|public
specifier|static
specifier|final
name|NodeName
name|ROOT
init|=
operator|new
name|NodeName
argument_list|(
literal|"<root>"
argument_list|)
decl_stmt|;
comment|/**    * A composite state for node-name.    */
DECL|class|NodeNameState
specifier|public
specifier|static
class|class
name|NodeNameState
implements|implements
name|State
block|{
DECL|field|rackNameState
specifier|private
name|WordList
name|rackNameState
init|=
operator|new
name|WordList
argument_list|(
literal|"rack"
argument_list|)
decl_stmt|;
DECL|field|hostNameState
specifier|private
name|WordList
name|hostNameState
init|=
operator|new
name|WordList
argument_list|(
literal|"host"
argument_list|)
decl_stmt|;
annotation|@
name|Override
annotation|@
name|JsonIgnore
DECL|method|isUpdated ()
specifier|public
name|boolean
name|isUpdated
parameter_list|()
block|{
return|return
name|rackNameState
operator|.
name|isUpdated
argument_list|()
operator|||
name|hostNameState
operator|.
name|isUpdated
argument_list|()
return|;
block|}
DECL|method|getRackNameState ()
specifier|public
name|WordList
name|getRackNameState
parameter_list|()
block|{
return|return
name|rackNameState
return|;
block|}
DECL|method|getHostNameState ()
specifier|public
name|WordList
name|getHostNameState
parameter_list|()
block|{
return|return
name|hostNameState
return|;
block|}
DECL|method|setRackNameState (WordList state)
specifier|public
name|void
name|setRackNameState
parameter_list|(
name|WordList
name|state
parameter_list|)
block|{
name|this
operator|.
name|rackNameState
operator|=
name|state
expr_stmt|;
block|}
DECL|method|setHostNameState (WordList state)
specifier|public
name|void
name|setHostNameState
parameter_list|(
name|WordList
name|state
parameter_list|)
block|{
name|this
operator|.
name|hostNameState
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"node"
return|;
block|}
annotation|@
name|Override
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// for now, simply assert since this class has a hardcoded name
if|if
condition|(
operator|!
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"State name mismatch! Expected '"
operator|+
name|getName
argument_list|()
operator|+
literal|"' but found '"
operator|+
name|name
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|NodeName (String nodeName)
specifier|public
name|NodeName
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|ParsedHost
name|pHost
init|=
name|ParsedHost
operator|.
name|parse
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pHost
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rackName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|nodeName
expr_stmt|;
block|}
else|else
block|{
comment|//TODO check for null and improve .. possibly call NodeName(r,h)
name|this
operator|.
name|rackName
operator|=
name|pHost
operator|.
name|getRackName
argument_list|()
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|pHost
operator|.
name|getNodeName
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|NodeName (String rName, String hName)
specifier|public
name|NodeName
parameter_list|(
name|String
name|rName
parameter_list|,
name|String
name|hName
parameter_list|)
block|{
name|rName
operator|=
operator|(
name|rName
operator|==
literal|null
operator|||
name|rName
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
name|rName
expr_stmt|;
name|hName
operator|=
operator|(
name|hName
operator|==
literal|null
operator|||
name|hName
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
name|hName
expr_stmt|;
if|if
condition|(
name|hName
operator|==
literal|null
condition|)
block|{
name|nodeName
operator|=
name|rName
expr_stmt|;
name|rackName
operator|=
name|rName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rName
operator|==
literal|null
condition|)
block|{
name|nodeName
operator|=
name|hName
expr_stmt|;
name|ParsedHost
name|pHost
init|=
name|ParsedHost
operator|.
name|parse
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pHost
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rackName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|hName
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|rackName
operator|=
name|pHost
operator|.
name|getRackName
argument_list|()
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|pHost
operator|.
name|getNodeName
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|rackName
operator|=
name|rName
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|hName
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
literal|"/"
operator|+
name|rName
operator|+
literal|"/"
operator|+
name|hName
expr_stmt|;
block|}
block|}
DECL|method|getHostName ()
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
DECL|method|getRackName ()
specifier|public
name|String
name|getRackName
parameter_list|()
block|{
return|return
name|rackName
return|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|nodeName
return|;
block|}
annotation|@
name|Override
DECL|method|getAnonymizedValue (StatePool statePool, Configuration conf)
specifier|public
name|String
name|getAnonymizedValue
parameter_list|(
name|StatePool
name|statePool
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|ROOT
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getValue
argument_list|()
return|;
block|}
if|if
condition|(
name|anonymizedNodeName
operator|==
literal|null
condition|)
block|{
name|anonymize
argument_list|(
name|statePool
argument_list|)
expr_stmt|;
block|}
return|return
name|anonymizedNodeName
return|;
block|}
DECL|method|anonymize (StatePool pool)
specifier|private
name|void
name|anonymize
parameter_list|(
name|StatePool
name|pool
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|NodeNameState
name|state
init|=
operator|(
name|NodeNameState
operator|)
name|pool
operator|.
name|getState
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
operator|new
name|NodeNameState
argument_list|()
expr_stmt|;
name|pool
operator|.
name|addState
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rackName
operator|!=
literal|null
operator|&&
name|hostName
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|anonymize
argument_list|(
name|rackName
argument_list|,
name|state
operator|.
name|getRackNameState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|anonymize
argument_list|(
name|hostName
argument_list|,
name|state
operator|.
name|getHostNameState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|state
operator|.
name|getRackNameState
argument_list|()
operator|.
name|contains
argument_list|(
name|nodeName
argument_list|)
operator|||
name|rackName
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|anonymize
argument_list|(
name|nodeName
argument_list|,
name|state
operator|.
name|getRackNameState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|anonymize
argument_list|(
name|nodeName
argument_list|,
name|state
operator|.
name|getHostNameState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|anonymizedNodeName
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|//TODO There is no caching for saving memory.
DECL|method|anonymize (String data, WordList wordList)
specifier|private
specifier|static
name|String
name|anonymize
parameter_list|(
name|String
name|data
parameter_list|,
name|WordList
name|wordList
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|wordList
operator|.
name|contains
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|wordList
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|wordList
operator|.
name|getName
argument_list|()
operator|+
name|wordList
operator|.
name|indexOf
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
end_class

end_unit

