begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|appmaster
operator|.
name|DAGAMSimulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
operator|.
name|ContainerSimulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests for DagAMSimulator.  */
end_comment

begin_class
DECL|class|TestDagAMSimulator
specifier|public
class|class
name|TestDagAMSimulator
block|{
comment|/**    * Test to check whether containers are scheduled based on request delay.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testGetToBeScheduledContainers ()
specifier|public
name|void
name|testGetToBeScheduledContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|DAGAMSimulator
name|dagamSimulator
init|=
operator|new
name|DAGAMSimulator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|containerSimulators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// containers are requested with 0, 1000, 1500 and 4000ms delay.
name|containerSimulators
operator|.
name|add
argument_list|(
name|createContainerSim
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|containerSimulators
operator|.
name|add
argument_list|(
name|createContainerSim
argument_list|(
literal|2
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|containerSimulators
operator|.
name|add
argument_list|(
name|createContainerSim
argument_list|(
literal|3
argument_list|,
literal|1500
argument_list|)
argument_list|)
expr_stmt|;
name|containerSimulators
operator|.
name|add
argument_list|(
name|createContainerSim
argument_list|(
literal|4
argument_list|,
literal|4000
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|res
init|=
name|dagamSimulator
operator|.
name|getToBeScheduledContainers
argument_list|(
name|containerSimulators
argument_list|,
name|startTime
argument_list|)
decl_stmt|;
comment|// we should get only one container with request delay set to 0
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|startTime
operator|-=
literal|1000
expr_stmt|;
name|res
operator|=
name|dagamSimulator
operator|.
name|getToBeScheduledContainers
argument_list|(
name|containerSimulators
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
comment|// we should get containers with request delay set< 1000
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|startTime
operator|-=
literal|2000
expr_stmt|;
name|res
operator|=
name|dagamSimulator
operator|.
name|getToBeScheduledContainers
argument_list|(
name|containerSimulators
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
comment|// we should get containers with request delay set< 2000
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainerSim (long allocationId, long requestDelay)
specifier|private
name|ContainerSimulator
name|createContainerSim
parameter_list|(
name|long
name|allocationId
parameter_list|,
name|long
name|requestDelay
parameter_list|)
block|{
return|return
operator|new
name|ContainerSimulator
argument_list|(
literal|null
argument_list|,
literal|1000
argument_list|,
literal|"*"
argument_list|,
literal|1
argument_list|,
literal|"Map"
argument_list|,
literal|null
argument_list|,
name|allocationId
argument_list|,
name|requestDelay
argument_list|)
return|;
block|}
block|}
end_class

end_unit

