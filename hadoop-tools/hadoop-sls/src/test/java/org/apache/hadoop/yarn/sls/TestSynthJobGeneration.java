begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
operator|.
name|SynthJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
operator|.
name|SynthTraceJobProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Simple test class driving the {@code SynthTraceJobProducer}, and validating  * jobs produce are within expected range.  */
end_comment

begin_class
DECL|class|TestSynthJobGeneration
specifier|public
class|class
name|TestSynthJobGeneration
block|{
DECL|field|LOG
specifier|public
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TestSynthJobGeneration
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SynthTraceJobProducer
operator|.
name|SLS_SYNTHETIC_TRACE_FILE
argument_list|,
literal|"src/test/resources/syn.json"
argument_list|)
expr_stmt|;
name|SynthTraceJobProducer
name|stjp
init|=
operator|new
name|SynthTraceJobProducer
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SynthJob
name|js
init|=
operator|(
name|SynthJob
operator|)
name|stjp
operator|.
name|getNextJob
argument_list|()
decl_stmt|;
name|int
name|jobCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|js
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|(
name|jobCount
operator|++
operator|)
operator|+
literal|" "
operator|+
name|js
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" -- "
operator|+
name|js
operator|.
name|getJobClass
argument_list|()
operator|.
name|getClassName
argument_list|()
operator|+
literal|" (conf: "
operator|+
name|js
operator|.
name|getJobConf
argument_list|()
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|QUEUE_NAME
argument_list|)
operator|+
literal|") "
operator|+
literal|" submission: "
operator|+
name|js
operator|.
name|getSubmissionTime
argument_list|()
operator|+
literal|", "
operator|+
literal|" duration: "
operator|+
name|js
operator|.
name|getDuration
argument_list|()
operator|+
literal|" numMaps: "
operator|+
name|js
operator|.
name|getNumberMaps
argument_list|()
operator|+
literal|" numReduces: "
operator|+
name|js
operator|.
name|getNumberReduces
argument_list|()
argument_list|)
expr_stmt|;
name|validateJob
argument_list|(
name|js
argument_list|)
expr_stmt|;
name|js
operator|=
operator|(
name|SynthJob
operator|)
name|stjp
operator|.
name|getNextJob
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stjp
operator|.
name|getNumJobs
argument_list|()
argument_list|,
name|jobCount
argument_list|)
expr_stmt|;
block|}
DECL|method|validateJob (SynthJob js)
specifier|private
name|void
name|validateJob
parameter_list|(
name|SynthJob
name|js
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|js
operator|.
name|getSubmissionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|js
operator|.
name|getDuration
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|js
operator|.
name|getNumberMaps
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|js
operator|.
name|getNumberReduces
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|js
operator|.
name|getNumberMaps
argument_list|()
operator|+
name|js
operator|.
name|getNumberReduces
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|js
operator|.
name|getTotalSlotTime
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|js
operator|.
name|getNumberMaps
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TaskAttemptInfo
name|tai
init|=
name|js
operator|.
name|getTaskAttemptInfo
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tai
operator|.
name|getRuntime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|js
operator|.
name|getNumberReduces
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TaskAttemptInfo
name|tai
init|=
name|js
operator|.
name|getTaskAttemptInfo
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tai
operator|.
name|getRuntime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|js
operator|.
name|hasDeadline
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|js
operator|.
name|getDeadline
argument_list|()
operator|>
name|js
operator|.
name|getSubmissionTime
argument_list|()
operator|+
name|js
operator|.
name|getDuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

