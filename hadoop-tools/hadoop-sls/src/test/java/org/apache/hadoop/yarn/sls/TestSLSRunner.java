begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_class
DECL|class|TestSLSRunner
specifier|public
class|class
name|TestSLSRunner
block|{
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
DECL|method|testSimulatorRunning ()
specifier|public
name|void
name|testSimulatorRunning
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tempDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|exceptionList
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|Thread
operator|.
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|exceptionList
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// start the simulator
name|File
name|slsOutputDir
init|=
operator|new
name|File
argument_list|(
name|tempDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/slsoutput/"
argument_list|)
decl_stmt|;
name|String
name|args
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"-inputrumen"
block|,
literal|"src/main/data/2jobs2min-rumen-jh.json"
block|,
literal|"-output"
block|,
name|slsOutputDir
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|SLSRunner
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// wait for 20 seconds before stop
name|int
name|count
init|=
literal|20
decl_stmt|;
while|while
condition|(
name|count
operator|>=
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exceptionList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SLSRunner
operator|.
name|getRunner
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestSLSRunner catched exception from child thread "
operator|+
literal|"(TaskRunner.Task): "
operator|+
name|exceptionList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|count
operator|--
expr_stmt|;
block|}
name|SLSRunner
operator|.
name|getRunner
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

