begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
package|;
end_package

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|invariants
operator|.
name|MetricsInvariantChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * This is a base class to ease the implementation of SLS-based tests.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|NotThreadSafe
annotation|@
name|SuppressWarnings
argument_list|(
literal|"VisibilityModifier"
argument_list|)
DECL|class|BaseSLSRunnerTest
specifier|public
specifier|abstract
class|class
name|BaseSLSRunnerTest
block|{
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|0
argument_list|)
DECL|field|schedulerType
specifier|public
name|String
name|schedulerType
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
DECL|field|traceType
specifier|public
name|String
name|traceType
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|2
argument_list|)
DECL|field|traceLocation
specifier|public
name|String
name|traceLocation
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|3
argument_list|)
DECL|field|nodeFile
specifier|public
name|String
name|nodeFile
decl_stmt|;
DECL|field|sls
specifier|protected
name|SLSRunner
name|sls
decl_stmt|;
DECL|field|ongoingInvariantFile
specifier|protected
name|String
name|ongoingInvariantFile
decl_stmt|;
DECL|field|exitInvariantFile
specifier|protected
name|String
name|exitInvariantFile
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
specifier|abstract
name|void
name|setup
parameter_list|()
function_decl|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|sls
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|runSLS (Configuration conf, long timeout)
specifier|public
name|void
name|runSLS
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|tempDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|exceptionList
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|Thread
operator|.
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptionList
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// start the simulator
name|File
name|slsOutputDir
init|=
operator|new
name|File
argument_list|(
name|tempDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/slsoutput/"
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
decl_stmt|;
switch|switch
condition|(
name|traceType
condition|)
block|{
case|case
literal|"OLD_SLS"
case|:
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-inputsls"
block|,
name|traceLocation
block|,
literal|"-output"
block|,
name|slsOutputDir
operator|.
name|getAbsolutePath
argument_list|()
block|}
expr_stmt|;
break|break;
case|case
literal|"OLD_RUMEN"
case|:
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-inputrumen"
block|,
name|traceLocation
block|,
literal|"-output"
block|,
name|slsOutputDir
operator|.
name|getAbsolutePath
argument_list|()
block|}
expr_stmt|;
break|break;
default|default:
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-tracetype"
block|,
name|traceType
block|,
literal|"-tracelocation"
block|,
name|traceLocation
block|,
literal|"-output"
block|,
name|slsOutputDir
operator|.
name|getAbsolutePath
argument_list|()
block|}
expr_stmt|;
block|}
if|if
condition|(
name|nodeFile
operator|!=
literal|null
condition|)
block|{
name|args
operator|=
name|ArrayUtils
operator|.
name|addAll
argument_list|(
name|args
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-nodes"
block|,
name|nodeFile
block|}
argument_list|)
expr_stmt|;
block|}
comment|// enable continuous invariant checks
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|schedulerType
argument_list|)
expr_stmt|;
if|if
condition|(
name|ongoingInvariantFile
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MONITOR_POLICIES
argument_list|,
name|MetricsInvariantChecker
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MetricsInvariantChecker
operator|.
name|INVARIANTS_FILE
argument_list|,
name|ongoingInvariantFile
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MetricsInvariantChecker
operator|.
name|THROW_ON_VIOLATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|sls
operator|=
operator|new
name|SLSRunner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|sls
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// wait for timeout seconds before stop, unless there is an uncaught
comment|// exception in which
comment|// case fail fast.
while|while
condition|(
name|timeout
operator|>=
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exceptionList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sls
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestSLSRunner catched exception from child thread "
operator|+
literal|"(TaskRunner.TaskDefinition): "
operator|+
name|exceptionList
argument_list|)
expr_stmt|;
break|break;
block|}
name|timeout
operator|--
expr_stmt|;
block|}
name|shutdownHookInvariantCheck
argument_list|()
expr_stmt|;
block|}
comment|/**    * Checks exit invariants (e.g., number of apps submitted, completed, etc.).    */
DECL|method|shutdownHookInvariantCheck ()
specifier|private
name|void
name|shutdownHookInvariantCheck
parameter_list|()
block|{
if|if
condition|(
name|exitInvariantFile
operator|!=
literal|null
condition|)
block|{
name|MetricsInvariantChecker
name|ic
init|=
operator|new
name|MetricsInvariantChecker
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MetricsInvariantChecker
operator|.
name|INVARIANTS_FILE
argument_list|,
name|exitInvariantFile
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MetricsInvariantChecker
operator|.
name|THROW_ON_VIOLATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ic
operator|.
name|init
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ic
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

