begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|TestTaskRunner
specifier|public
class|class
name|TestTaskRunner
block|{
DECL|field|runner
specifier|private
name|TaskRunner
name|runner
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|runner
operator|=
operator|new
name|TaskRunner
argument_list|()
expr_stmt|;
name|runner
operator|.
name|setQueueSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|runner
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|class|SingleTask
specifier|public
specifier|static
class|class
name|SingleTask
extends|extends
name|TaskRunner
operator|.
name|Task
block|{
DECL|field|latch
specifier|public
specifier|static
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|first
specifier|public
specifier|static
name|boolean
name|first
decl_stmt|;
DECL|method|SingleTask (long startTime)
specifier|public
name|SingleTask
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|firstStep ()
specifier|public
name|void
name|firstStep
parameter_list|()
block|{
if|if
condition|(
name|first
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|first
operator|=
literal|true
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|middleStep ()
specifier|public
name|void
name|middleStep
parameter_list|()
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lastStep ()
specifier|public
name|void
name|lastStep
parameter_list|()
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleTask ()
specifier|public
name|void
name|testSingleTask
parameter_list|()
throws|throws
name|Exception
block|{
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
name|runner
operator|.
name|schedule
argument_list|(
operator|new
name|SingleTask
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SingleTask
operator|.
name|latch
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|SingleTask
operator|.
name|first
argument_list|)
expr_stmt|;
block|}
DECL|class|DualTask
specifier|public
specifier|static
class|class
name|DualTask
extends|extends
name|TaskRunner
operator|.
name|Task
block|{
DECL|field|latch
specifier|public
specifier|static
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|first
specifier|public
specifier|static
name|boolean
name|first
decl_stmt|;
DECL|field|last
specifier|public
specifier|static
name|boolean
name|last
decl_stmt|;
DECL|method|DualTask (long startTime, long endTime, long interval)
specifier|public
name|DualTask
parameter_list|(
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|firstStep ()
specifier|public
name|void
name|firstStep
parameter_list|()
block|{
if|if
condition|(
name|first
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|first
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|middleStep ()
specifier|public
name|void
name|middleStep
parameter_list|()
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lastStep ()
specifier|public
name|void
name|lastStep
parameter_list|()
block|{
if|if
condition|(
name|last
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|last
operator|=
literal|true
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDualTask ()
specifier|public
name|void
name|testDualTask
parameter_list|()
throws|throws
name|Exception
block|{
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
name|runner
operator|.
name|schedule
argument_list|(
operator|new
name|DualTask
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|DualTask
operator|.
name|latch
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DualTask
operator|.
name|first
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DualTask
operator|.
name|last
argument_list|)
expr_stmt|;
block|}
DECL|class|TriTask
specifier|public
specifier|static
class|class
name|TriTask
extends|extends
name|TaskRunner
operator|.
name|Task
block|{
DECL|field|latch
specifier|public
specifier|static
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|first
specifier|public
specifier|static
name|boolean
name|first
decl_stmt|;
DECL|field|middle
specifier|public
specifier|static
name|boolean
name|middle
decl_stmt|;
DECL|field|last
specifier|public
specifier|static
name|boolean
name|last
decl_stmt|;
DECL|method|TriTask (long startTime, long endTime, long interval)
specifier|public
name|TriTask
parameter_list|(
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|firstStep ()
specifier|public
name|void
name|firstStep
parameter_list|()
block|{
if|if
condition|(
name|first
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|first
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|middleStep ()
specifier|public
name|void
name|middleStep
parameter_list|()
block|{
if|if
condition|(
name|middle
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|middle
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lastStep ()
specifier|public
name|void
name|lastStep
parameter_list|()
block|{
if|if
condition|(
name|last
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|last
operator|=
literal|true
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTriTask ()
specifier|public
name|void
name|testTriTask
parameter_list|()
throws|throws
name|Exception
block|{
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
name|runner
operator|.
name|schedule
argument_list|(
operator|new
name|TriTask
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|TriTask
operator|.
name|latch
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|TriTask
operator|.
name|first
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|TriTask
operator|.
name|middle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|TriTask
operator|.
name|last
argument_list|)
expr_stmt|;
block|}
DECL|class|MultiTask
specifier|public
specifier|static
class|class
name|MultiTask
extends|extends
name|TaskRunner
operator|.
name|Task
block|{
DECL|field|latch
specifier|public
specifier|static
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|first
specifier|public
specifier|static
name|boolean
name|first
decl_stmt|;
DECL|field|middle
specifier|public
specifier|static
name|int
name|middle
decl_stmt|;
DECL|field|last
specifier|public
specifier|static
name|boolean
name|last
decl_stmt|;
DECL|method|MultiTask (long startTime, long endTime, long interval)
specifier|public
name|MultiTask
parameter_list|(
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|firstStep ()
specifier|public
name|void
name|firstStep
parameter_list|()
block|{
if|if
condition|(
name|first
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|first
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|middleStep ()
specifier|public
name|void
name|middleStep
parameter_list|()
block|{
name|middle
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lastStep ()
specifier|public
name|void
name|lastStep
parameter_list|()
block|{
if|if
condition|(
name|last
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|last
operator|=
literal|true
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiTask ()
specifier|public
name|void
name|testMultiTask
parameter_list|()
throws|throws
name|Exception
block|{
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
name|runner
operator|.
name|schedule
argument_list|(
operator|new
name|MultiTask
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|MultiTask
operator|.
name|latch
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|MultiTask
operator|.
name|first
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
literal|20
operator|-
literal|0
operator|)
operator|/
literal|5
operator|-
literal|2
operator|+
literal|1
argument_list|,
name|MultiTask
operator|.
name|middle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|MultiTask
operator|.
name|last
argument_list|)
expr_stmt|;
block|}
DECL|class|PreStartTask
specifier|public
specifier|static
class|class
name|PreStartTask
extends|extends
name|TaskRunner
operator|.
name|Task
block|{
DECL|field|latch
specifier|public
specifier|static
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|first
specifier|public
specifier|static
name|boolean
name|first
decl_stmt|;
DECL|method|PreStartTask (long startTime)
specifier|public
name|PreStartTask
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|firstStep ()
specifier|public
name|void
name|firstStep
parameter_list|()
block|{
if|if
condition|(
name|first
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|first
operator|=
literal|true
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|middleStep ()
specifier|public
name|void
name|middleStep
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|lastStep ()
specifier|public
name|void
name|lastStep
parameter_list|()
block|{     }
block|}
annotation|@
name|Test
DECL|method|testPreStartQueueing ()
specifier|public
name|void
name|testPreStartQueueing
parameter_list|()
throws|throws
name|Exception
block|{
name|runner
operator|.
name|schedule
argument_list|(
operator|new
name|PreStartTask
argument_list|(
literal|210
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|210
argument_list|)
expr_stmt|;
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|startedAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|PreStartTask
operator|.
name|latch
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|long
name|runAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PreStartTask
operator|.
name|first
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|runAt
operator|-
name|startedAt
operator|>=
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

