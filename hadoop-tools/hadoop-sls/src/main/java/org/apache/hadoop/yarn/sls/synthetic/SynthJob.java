begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.synthetic
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|random
operator|.
name|JDKRandomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|MapTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ReduceTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|Pre21JobHistoryConstants
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|appmaster
operator|.
name|MRAMSimulator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
operator|.
name|QUEUE_NAME
import|;
end_import

begin_comment
comment|/**  * Generates random task data for a synthetic job.  */
end_comment

begin_class
DECL|class|SynthJob
specifier|public
class|class
name|SynthJob
implements|implements
name|JobStory
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StaticVariableName"
argument_list|)
DECL|field|LOG
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SynthJob
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MIN_MEMORY
specifier|private
specifier|static
specifier|final
name|long
name|MIN_MEMORY
init|=
literal|1024
decl_stmt|;
DECL|field|MIN_VCORES
specifier|private
specifier|static
specifier|final
name|long
name|MIN_VCORES
init|=
literal|1
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ConstantName"
argument_list|)
DECL|field|sequence
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|sequence
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|queueName
specifier|private
specifier|final
name|String
name|queueName
decl_stmt|;
DECL|field|jobDef
specifier|private
specifier|final
name|SynthTraceJobProducer
operator|.
name|JobDefinition
name|jobDef
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
comment|// job timing
DECL|field|submitTime
specifier|private
specifier|final
name|long
name|submitTime
decl_stmt|;
DECL|field|duration
specifier|private
specifier|final
name|long
name|duration
decl_stmt|;
DECL|field|deadline
specifier|private
specifier|final
name|long
name|deadline
decl_stmt|;
DECL|field|params
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
DECL|field|totalSlotTime
specifier|private
name|long
name|totalSlotTime
init|=
literal|0
decl_stmt|;
comment|// task information
DECL|field|tasks
specifier|private
name|List
argument_list|<
name|SynthTask
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|taskByType
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SynthTask
argument_list|>
argument_list|>
name|taskByType
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|taskCounts
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|taskCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|taskMemory
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|taskMemory
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|taskVcores
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|taskVcores
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Nested class used to represent a task instance in a job. Each task    * corresponds to one container allocation for the job.    */
DECL|class|SynthTask
specifier|public
specifier|static
specifier|final
class|class
name|SynthTask
block|{
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|time
specifier|private
name|long
name|time
decl_stmt|;
DECL|field|maxMemory
specifier|private
name|long
name|maxMemory
decl_stmt|;
DECL|field|maxVcores
specifier|private
name|long
name|maxVcores
decl_stmt|;
DECL|field|priority
specifier|private
name|int
name|priority
decl_stmt|;
DECL|field|executionType
specifier|private
name|ExecutionType
name|executionType
decl_stmt|;
DECL|method|SynthTask (String type, long time, long maxMemory, long maxVcores, int priority, ExecutionType executionType)
specifier|private
name|SynthTask
parameter_list|(
name|String
name|type
parameter_list|,
name|long
name|time
parameter_list|,
name|long
name|maxMemory
parameter_list|,
name|long
name|maxVcores
parameter_list|,
name|int
name|priority
parameter_list|,
name|ExecutionType
name|executionType
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
name|this
operator|.
name|maxMemory
operator|=
name|maxMemory
expr_stmt|;
name|this
operator|.
name|maxVcores
operator|=
name|maxVcores
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|executionType
operator|=
name|executionType
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getTime ()
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|time
return|;
block|}
DECL|method|getMemory ()
specifier|public
name|long
name|getMemory
parameter_list|()
block|{
return|return
name|maxMemory
return|;
block|}
DECL|method|getVcores ()
specifier|public
name|long
name|getVcores
parameter_list|()
block|{
return|return
name|maxVcores
return|;
block|}
DECL|method|getPriority ()
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
DECL|method|getExecutionType ()
specifier|public
name|ExecutionType
name|getExecutionType
parameter_list|()
block|{
return|return
name|executionType
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[task]\ttype: %1$-10s\ttime: %2$3s\tmemory: "
operator|+
literal|"%3$4s\tvcores: %4$2s\texecution_type: %5$-10s%n"
argument_list|,
name|getType
argument_list|()
argument_list|,
name|getTime
argument_list|()
argument_list|,
name|getMemory
argument_list|()
argument_list|,
name|getVcores
argument_list|()
argument_list|,
name|getExecutionType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|SynthJob (JDKRandomGenerator rand, Configuration conf, SynthTraceJobProducer.JobDefinition jobDef, String queue, long actualSubmissionTime)
specifier|protected
name|SynthJob
parameter_list|(
name|JDKRandomGenerator
name|rand
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SynthTraceJobProducer
operator|.
name|JobDefinition
name|jobDef
parameter_list|,
name|String
name|queue
parameter_list|,
name|long
name|actualSubmissionTime
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|jobDef
operator|=
name|jobDef
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|duration
operator|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|jobDef
operator|.
name|duration
operator|.
name|getInt
argument_list|()
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|boolean
name|hasDeadline
init|=
operator|(
name|rand
operator|.
name|nextDouble
argument_list|()
operator|<=
name|jobDef
operator|.
name|reservation
operator|.
name|getDouble
argument_list|()
operator|)
decl_stmt|;
name|double
name|deadlineFactorSample
init|=
name|jobDef
operator|.
name|deadline_factor
operator|.
name|getDouble
argument_list|()
decl_stmt|;
name|this
operator|.
name|type
operator|=
name|jobDef
operator|.
name|type
expr_stmt|;
name|this
operator|.
name|submitTime
operator|=
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|actualSubmissionTime
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|deadline
operator|=
name|hasDeadline
condition|?
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|actualSubmissionTime
argument_list|,
name|SECONDS
argument_list|)
operator|+
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|deadlineFactorSample
operator|*
name|duration
argument_list|)
else|:
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|jobDef
operator|.
name|params
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|QUEUE_NAME
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
comment|// name and initialize job randomness
specifier|final
name|long
name|seed
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|rand
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|id
operator|=
name|sequence
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|name
operator|=
name|String
operator|.
name|format
argument_list|(
name|jobDef
operator|.
name|class_name
operator|+
literal|"_%06d"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|name
operator|+
literal|" ("
operator|+
name|seed
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JOB TIMING`: job: "
operator|+
name|name
operator|+
literal|" submission:"
operator|+
name|submitTime
operator|+
literal|" deadline:"
operator|+
name|deadline
operator|+
literal|" duration:"
operator|+
name|duration
operator|+
literal|" deadline-submission: "
operator|+
operator|(
name|deadline
operator|-
name|submitTime
operator|)
argument_list|)
expr_stmt|;
comment|// Expand tasks
for|for
control|(
name|SynthTraceJobProducer
operator|.
name|TaskDefinition
name|task
range|:
name|jobDef
operator|.
name|tasks
control|)
block|{
name|int
name|num
init|=
name|task
operator|.
name|count
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|String
name|taskType
init|=
name|task
operator|.
name|type
decl_stmt|;
name|long
name|memory
init|=
name|task
operator|.
name|max_memory
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|memory
operator|=
name|memory
operator|<
name|MIN_MEMORY
condition|?
name|MIN_MEMORY
else|:
name|memory
expr_stmt|;
name|long
name|vcores
init|=
name|task
operator|.
name|max_vcores
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|vcores
operator|=
name|vcores
operator|<
name|MIN_VCORES
condition|?
name|MIN_VCORES
else|:
name|vcores
expr_stmt|;
name|int
name|priority
init|=
name|task
operator|.
name|priority
decl_stmt|;
name|ExecutionType
name|executionType
init|=
name|task
operator|.
name|executionType
operator|==
literal|null
condition|?
name|ExecutionType
operator|.
name|GUARANTEED
else|:
name|ExecutionType
operator|.
name|valueOf
argument_list|(
name|task
operator|.
name|executionType
argument_list|)
decl_stmt|;
comment|// Save task information by type
name|taskByType
operator|.
name|put
argument_list|(
name|taskType
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|taskCounts
operator|.
name|put
argument_list|(
name|taskType
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|taskMemory
operator|.
name|put
argument_list|(
name|taskType
argument_list|,
name|memory
argument_list|)
expr_stmt|;
name|taskVcores
operator|.
name|put
argument_list|(
name|taskType
argument_list|,
name|vcores
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
operator|++
name|i
control|)
block|{
name|long
name|time
init|=
name|task
operator|.
name|time
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|totalSlotTime
operator|+=
name|time
expr_stmt|;
name|SynthTask
name|t
init|=
operator|new
name|SynthTask
argument_list|(
name|taskType
argument_list|,
name|time
argument_list|,
name|memory
argument_list|,
name|vcores
argument_list|,
name|priority
argument_list|,
name|executionType
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|taskByType
operator|.
name|get
argument_list|(
name|taskType
argument_list|)
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getTasks ()
specifier|public
name|List
argument_list|<
name|SynthTask
argument_list|>
name|getTasks
parameter_list|()
block|{
return|return
name|tasks
return|;
block|}
DECL|method|hasDeadline ()
specifier|public
name|boolean
name|hasDeadline
parameter_list|()
block|{
return|return
name|deadline
operator|>
literal|0
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|jobDef
operator|.
name|user_name
return|;
block|}
DECL|method|getJobID ()
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
operator|new
name|JobID
argument_list|(
literal|"job_mock_"
operator|+
name|name
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|getSubmissionTime ()
specifier|public
name|long
name|getSubmissionTime
parameter_list|()
block|{
return|return
name|submitTime
return|;
block|}
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|res
init|=
literal|"\nSynthJob ["
operator|+
name|jobDef
operator|.
name|class_name
operator|+
literal|"]: \n"
operator|+
literal|"\tname: "
operator|+
name|getName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"\ttype: "
operator|+
name|getType
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"\tid: "
operator|+
name|id
operator|+
literal|"\n"
operator|+
literal|"\tqueue: "
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"\tsubmission: "
operator|+
name|getSubmissionTime
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"\tduration: "
operator|+
name|getDuration
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"\tdeadline: "
operator|+
name|getDeadline
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|int
name|taskno
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SynthJob
operator|.
name|SynthTask
name|t
range|:
name|getTasks
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|taskno
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|": \t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|taskno
operator|++
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getTotalSlotTime ()
specifier|public
name|long
name|getTotalSlotTime
parameter_list|()
block|{
return|return
name|totalSlotTime
return|;
block|}
DECL|method|getDuration ()
specifier|public
name|long
name|getDuration
parameter_list|()
block|{
return|return
name|duration
return|;
block|}
DECL|method|getDeadline ()
specifier|public
name|long
name|getDeadline
parameter_list|()
block|{
return|return
name|deadline
return|;
block|}
DECL|method|getParams ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|SynthJob
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SynthJob
name|o
init|=
operator|(
name|SynthJob
operator|)
name|other
decl_stmt|;
return|return
name|tasks
operator|.
name|equals
argument_list|(
name|o
operator|.
name|tasks
argument_list|)
operator|&&
name|submitTime
operator|==
name|o
operator|.
name|submitTime
operator|&&
name|type
operator|.
name|equals
argument_list|(
name|o
operator|.
name|type
argument_list|)
operator|&&
name|queueName
operator|.
name|equals
argument_list|(
name|o
operator|.
name|queueName
argument_list|)
operator|&&
name|jobDef
operator|.
name|class_name
operator|.
name|equals
argument_list|(
name|o
operator|.
name|jobDef
operator|.
name|class_name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|jobDef
operator|.
name|class_name
operator|.
name|hashCode
argument_list|()
operator|*
operator|(
name|int
operator|)
name|submitTime
operator|*
operator|(
name|int
operator|)
name|duration
return|;
block|}
annotation|@
name|Override
DECL|method|getJobConf ()
specifier|public
name|JobConf
name|getJobConf
parameter_list|()
block|{
return|return
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberMaps ()
specifier|public
name|int
name|getNumberMaps
parameter_list|()
block|{
return|return
name|taskCounts
operator|.
name|get
argument_list|(
name|MRAMSimulator
operator|.
name|MAP_TYPE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberReduces ()
specifier|public
name|int
name|getNumberReduces
parameter_list|()
block|{
return|return
name|taskCounts
operator|.
name|get
argument_list|(
name|MRAMSimulator
operator|.
name|REDUCE_TYPE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInputSplits ()
specifier|public
name|InputSplit
index|[]
name|getInputSplits
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getTaskInfo (TaskType taskType, int taskNumber)
specifier|public
name|TaskInfo
name|getTaskInfo
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|int
name|taskNumber
parameter_list|)
block|{
switch|switch
condition|(
name|taskType
condition|)
block|{
case|case
name|MAP
case|:
return|return
operator|new
name|TaskInfo
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|taskMemory
operator|.
name|get
argument_list|(
name|MRAMSimulator
operator|.
name|MAP_TYPE
argument_list|)
argument_list|,
name|taskVcores
operator|.
name|get
argument_list|(
name|MRAMSimulator
operator|.
name|MAP_TYPE
argument_list|)
argument_list|)
return|;
case|case
name|REDUCE
case|:
return|return
operator|new
name|TaskInfo
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|taskMemory
operator|.
name|get
argument_list|(
name|MRAMSimulator
operator|.
name|REDUCE_TYPE
argument_list|)
argument_list|,
name|taskVcores
operator|.
name|get
argument_list|(
name|MRAMSimulator
operator|.
name|REDUCE_TYPE
argument_list|)
argument_list|)
return|;
default|default:
break|break;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getTaskAttemptInfo (TaskType taskType, int taskNumber, int taskAttemptNumber)
specifier|public
name|TaskAttemptInfo
name|getTaskAttemptInfo
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|int
name|taskNumber
parameter_list|,
name|int
name|taskAttemptNumber
parameter_list|)
block|{
switch|switch
condition|(
name|taskType
condition|)
block|{
case|case
name|MAP
case|:
return|return
operator|new
name|MapTaskAttemptInfo
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|getTaskInfo
argument_list|(
name|taskType
argument_list|,
name|taskNumber
argument_list|)
argument_list|,
name|taskByType
operator|.
name|get
argument_list|(
name|MRAMSimulator
operator|.
name|MAP_TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|taskNumber
argument_list|)
operator|.
name|time
argument_list|,
literal|null
argument_list|)
return|;
case|case
name|REDUCE
case|:
comment|// We assume uniform split between pull/sort/reduce
comment|// aligned with naive progress reporting assumptions
return|return
operator|new
name|ReduceTaskAttemptInfo
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|getTaskInfo
argument_list|(
name|taskType
argument_list|,
name|taskNumber
argument_list|)
argument_list|,
name|taskByType
operator|.
name|get
argument_list|(
name|MRAMSimulator
operator|.
name|MAP_TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|taskNumber
argument_list|)
operator|.
name|time
operator|/
literal|3
argument_list|,
name|taskByType
operator|.
name|get
argument_list|(
name|MRAMSimulator
operator|.
name|MAP_TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|taskNumber
argument_list|)
operator|.
name|time
operator|/
literal|3
argument_list|,
name|taskByType
operator|.
name|get
argument_list|(
name|MRAMSimulator
operator|.
name|MAP_TYPE
argument_list|)
operator|.
name|get
argument_list|(
name|taskNumber
argument_list|)
operator|.
name|time
operator|/
literal|3
argument_list|,
literal|null
argument_list|)
return|;
default|default:
break|break;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getMapTaskAttemptInfoAdjusted (int taskNumber, int taskAttemptNumber, int locality)
specifier|public
name|TaskAttemptInfo
name|getMapTaskAttemptInfoAdjusted
parameter_list|(
name|int
name|taskNumber
parameter_list|,
name|int
name|taskAttemptNumber
parameter_list|,
name|int
name|locality
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getOutcome ()
specifier|public
name|Values
name|getOutcome
parameter_list|()
block|{
return|return
name|Values
operator|.
name|SUCCESS
return|;
block|}
block|}
end_class

end_unit

