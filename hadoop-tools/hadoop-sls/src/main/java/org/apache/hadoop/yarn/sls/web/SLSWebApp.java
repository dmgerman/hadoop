begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|SLSRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
operator|.
name|FairSchedulerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
operator|.
name|SchedulerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
operator|.
name|SchedulerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|AbstractHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ResourceHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SLSWebApp
specifier|public
class|class
name|SLSWebApp
extends|extends
name|HttpServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1905162041950251407L
decl_stmt|;
DECL|field|server
specifier|private
specifier|transient
name|Server
name|server
decl_stmt|;
DECL|field|wrapper
specifier|private
specifier|transient
name|SchedulerWrapper
name|wrapper
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|transient
name|MetricRegistry
name|metrics
decl_stmt|;
DECL|field|schedulerMetrics
specifier|private
specifier|transient
name|SchedulerMetrics
name|schedulerMetrics
decl_stmt|;
comment|// metrics objects
DECL|field|jvmFreeMemoryGauge
specifier|private
specifier|transient
name|Gauge
name|jvmFreeMemoryGauge
decl_stmt|;
DECL|field|jvmMaxMemoryGauge
specifier|private
specifier|transient
name|Gauge
name|jvmMaxMemoryGauge
decl_stmt|;
DECL|field|jvmTotalMemoryGauge
specifier|private
specifier|transient
name|Gauge
name|jvmTotalMemoryGauge
decl_stmt|;
DECL|field|numRunningAppsGauge
specifier|private
specifier|transient
name|Gauge
name|numRunningAppsGauge
decl_stmt|;
DECL|field|numRunningContainersGauge
specifier|private
specifier|transient
name|Gauge
name|numRunningContainersGauge
decl_stmt|;
DECL|field|allocatedMemoryGauge
specifier|private
specifier|transient
name|Gauge
name|allocatedMemoryGauge
decl_stmt|;
DECL|field|allocatedVCoresGauge
specifier|private
specifier|transient
name|Gauge
name|allocatedVCoresGauge
decl_stmt|;
DECL|field|availableMemoryGauge
specifier|private
specifier|transient
name|Gauge
name|availableMemoryGauge
decl_stmt|;
DECL|field|availableVCoresGauge
specifier|private
specifier|transient
name|Gauge
name|availableVCoresGauge
decl_stmt|;
DECL|field|allocateTimecostHistogram
specifier|private
specifier|transient
name|Histogram
name|allocateTimecostHistogram
decl_stmt|;
DECL|field|handleTimecostHistogram
specifier|private
specifier|transient
name|Histogram
name|handleTimecostHistogram
decl_stmt|;
specifier|private
specifier|transient
name|Map
argument_list|<
name|SchedulerEventType
argument_list|,
name|Histogram
argument_list|>
DECL|field|handleOperTimecostHistogramMap
name|handleOperTimecostHistogramMap
decl_stmt|;
DECL|field|queueAllocatedMemoryCounterMap
specifier|private
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|queueAllocatedMemoryCounterMap
decl_stmt|;
DECL|field|queueAllocatedVCoresCounterMap
specifier|private
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|queueAllocatedVCoresCounterMap
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|ajaxUpdateTimeMS
specifier|private
name|int
name|ajaxUpdateTimeMS
init|=
literal|1000
decl_stmt|;
comment|// html page templates
DECL|field|simulateInfoTemplate
specifier|private
name|String
name|simulateInfoTemplate
decl_stmt|;
DECL|field|simulateTemplate
specifier|private
name|String
name|simulateTemplate
decl_stmt|;
DECL|field|trackTemplate
specifier|private
name|String
name|trackTemplate
decl_stmt|;
block|{
comment|// load templates
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|simulateInfoTemplate
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|cl
operator|.
name|getResourceAsStream
argument_list|(
literal|"html/simulate.info.html.template"
argument_list|)
argument_list|)
expr_stmt|;
name|simulateTemplate
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|cl
operator|.
name|getResourceAsStream
argument_list|(
literal|"html/simulate.html.template"
argument_list|)
argument_list|)
expr_stmt|;
name|trackTemplate
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|cl
operator|.
name|getResourceAsStream
argument_list|(
literal|"html/track.html.template"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readObject (ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|in
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|handleOperTimecostHistogramMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|queueAllocatedMemoryCounterMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|queueAllocatedVCoresCounterMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|SLSWebApp (SchedulerWrapper wrapper, int metricsAddressPort)
specifier|public
name|SLSWebApp
parameter_list|(
name|SchedulerWrapper
name|wrapper
parameter_list|,
name|int
name|metricsAddressPort
parameter_list|)
block|{
name|this
operator|.
name|wrapper
operator|=
name|wrapper
expr_stmt|;
name|handleOperTimecostHistogramMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|queueAllocatedMemoryCounterMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|queueAllocatedVCoresCounterMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|schedulerMetrics
operator|=
name|wrapper
operator|.
name|getSchedulerMetrics
argument_list|()
expr_stmt|;
name|metrics
operator|=
name|schedulerMetrics
operator|.
name|getMetrics
argument_list|()
expr_stmt|;
name|port
operator|=
name|metricsAddressPort
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ResourceHandler
name|staticHandler
init|=
operator|new
name|ResourceHandler
argument_list|()
decl_stmt|;
name|staticHandler
operator|.
name|setMimeTypes
argument_list|(
operator|new
name|MimeTypes
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|webRootDir
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"html"
argument_list|)
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|staticHandler
operator|.
name|setResourceBase
argument_list|(
name|webRootDir
argument_list|)
expr_stmt|;
name|Handler
name|handler
init|=
operator|new
name|AbstractHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|String
name|target
parameter_list|,
name|Request
name|baseRequest
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
try|try
block|{
comment|// timeunit
name|int
name|timeunit
init|=
literal|1000
decl_stmt|;
comment|// second, divide millionsecond / 1000
name|String
name|timeunitLabel
init|=
literal|"second"
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"u"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"u"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"m"
argument_list|)
condition|)
block|{
name|timeunit
operator|=
literal|1000
operator|*
literal|60
expr_stmt|;
name|timeunitLabel
operator|=
literal|"minute"
expr_stmt|;
block|}
comment|// http request
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|printPageIndex
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
literal|"/simulate"
argument_list|)
condition|)
block|{
name|printPageSimulate
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|timeunit
argument_list|,
name|timeunitLabel
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
literal|"/track"
argument_list|)
condition|)
block|{
name|printPageTrack
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|timeunit
argument_list|,
name|timeunitLabel
argument_list|)
expr_stmt|;
block|}
elseif|else
comment|// js/css request
if|if
condition|(
name|target
operator|.
name|startsWith
argument_list|(
literal|"/js"
argument_list|)
operator|||
name|target
operator|.
name|startsWith
argument_list|(
literal|"/css"
argument_list|)
condition|)
block|{
name|response
operator|.
name|setCharacterEncoding
argument_list|(
literal|"utf-8"
argument_list|)
expr_stmt|;
name|staticHandler
operator|.
name|handle
argument_list|(
name|target
argument_list|,
name|baseRequest
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
elseif|else
comment|// json request
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
literal|"/simulateMetrics"
argument_list|)
condition|)
block|{
name|printJsonMetrics
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
literal|"/trackMetrics"
argument_list|)
condition|)
block|{
name|printJsonTrack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * index html page, show simulation info    * path ""    * @param request http request    * @param response http response    * @throws java.io.IOException    */
DECL|method|printPageIndex (HttpServletRequest request, HttpServletResponse response)
specifier|private
name|void
name|printPageIndex
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|String
name|simulateInfo
decl_stmt|;
if|if
condition|(
name|SLSRunner
operator|.
name|getSimulateInfoMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|empty
init|=
literal|"<tr><td colspan='2' align='center'>"
operator|+
literal|"No information available</td></tr>"
decl_stmt|;
name|simulateInfo
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|simulateInfoTemplate
argument_list|,
name|empty
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|info
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|SLSRunner
operator|.
name|getSimulateInfoMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|info
operator|.
name|append
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
literal|"<td class='td1'>"
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
literal|"<td class='td2'>"
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
name|simulateInfo
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|simulateInfoTemplate
argument_list|,
name|info
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|println
argument_list|(
name|simulateInfo
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Request
operator|)
name|request
operator|)
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * simulate html page, show several real-runtime chart    * path "/simulate"    * use d3.js    * @param request http request    * @param response http response    * @throws java.io.IOException    */
DECL|method|printPageSimulate (HttpServletRequest request, HttpServletResponse response, int timeunit, String timeunitLabel)
specifier|private
name|void
name|printPageSimulate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|int
name|timeunit
parameter_list|,
name|String
name|timeunitLabel
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
comment|// queues {0}
name|Set
argument_list|<
name|String
argument_list|>
name|queues
init|=
name|wrapper
operator|.
name|getTracker
argument_list|()
operator|.
name|getQueueSet
argument_list|()
decl_stmt|;
name|StringBuilder
name|queueInfo
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|queue
range|:
name|queues
control|)
block|{
name|queueInfo
operator|.
name|append
argument_list|(
literal|"legends[4]["
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"] = 'queue."
argument_list|)
operator|.
name|append
argument_list|(
name|queue
argument_list|)
operator|.
name|append
argument_list|(
literal|".allocated.memory';"
argument_list|)
expr_stmt|;
name|queueInfo
operator|.
name|append
argument_list|(
literal|"legends[5]["
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"] = 'queue."
argument_list|)
operator|.
name|append
argument_list|(
name|queue
argument_list|)
operator|.
name|append
argument_list|(
literal|".allocated.vcores';"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
comment|// time unit label {1}
comment|// time unit {2}
comment|// ajax update time interval {3}
name|String
name|simulateInfo
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|simulateTemplate
argument_list|,
name|queueInfo
operator|.
name|toString
argument_list|()
argument_list|,
name|timeunitLabel
argument_list|,
literal|""
operator|+
name|timeunit
argument_list|,
literal|""
operator|+
name|ajaxUpdateTimeMS
argument_list|)
decl_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|println
argument_list|(
name|simulateInfo
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Request
operator|)
name|request
operator|)
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * html page for tracking one queue or job    * use d3.js    * @param request http request    * @param response http response    * @throws java.io.IOException    */
DECL|method|printPageTrack (HttpServletRequest request, HttpServletResponse response, int timeunit, String timeunitLabel)
specifier|private
name|void
name|printPageTrack
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|int
name|timeunit
parameter_list|,
name|String
name|timeunitLabel
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
comment|// tracked queues {0}
name|StringBuilder
name|trackedQueueInfo
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|trackedQueues
init|=
name|wrapper
operator|.
name|getTracker
argument_list|()
operator|.
name|getQueueSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|queue
range|:
name|trackedQueues
control|)
block|{
name|trackedQueueInfo
operator|.
name|append
argument_list|(
literal|"<option value='Queue "
argument_list|)
operator|.
name|append
argument_list|(
name|queue
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|queue
argument_list|)
operator|.
name|append
argument_list|(
literal|"</option>"
argument_list|)
expr_stmt|;
block|}
comment|// tracked apps {1}
name|StringBuilder
name|trackedAppInfo
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|trackedApps
init|=
name|wrapper
operator|.
name|getTracker
argument_list|()
operator|.
name|getTrackedAppSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|job
range|:
name|trackedApps
control|)
block|{
name|trackedAppInfo
operator|.
name|append
argument_list|(
literal|"<option value='Job "
argument_list|)
operator|.
name|append
argument_list|(
name|job
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|job
argument_list|)
operator|.
name|append
argument_list|(
literal|"</option>"
argument_list|)
expr_stmt|;
block|}
comment|// timeunit label {2}
comment|// time unit {3}
comment|// ajax update time {4}
comment|// final html
name|String
name|trackInfo
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|trackTemplate
argument_list|,
name|trackedQueueInfo
operator|.
name|toString
argument_list|()
argument_list|,
name|trackedAppInfo
operator|.
name|toString
argument_list|()
argument_list|,
name|timeunitLabel
argument_list|,
literal|""
operator|+
name|timeunit
argument_list|,
literal|""
operator|+
name|ajaxUpdateTimeMS
argument_list|)
decl_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|println
argument_list|(
name|trackInfo
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Request
operator|)
name|request
operator|)
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * package metrics information in a json and return    * @param request http request    * @param response http response    * @throws java.io.IOException    */
DECL|method|printJsonMetrics (HttpServletRequest request, HttpServletResponse response)
specifier|private
name|void
name|printJsonMetrics
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/json"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|println
argument_list|(
name|generateRealTimeTrackingMetrics
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Request
operator|)
name|request
operator|)
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|generateRealTimeTrackingMetrics ()
specifier|public
name|String
name|generateRealTimeTrackingMetrics
parameter_list|()
block|{
comment|// JVM
name|double
name|jvmFreeMemoryGB
decl_stmt|,
name|jvmMaxMemoryGB
decl_stmt|,
name|jvmTotalMemoryGB
decl_stmt|;
if|if
condition|(
name|jvmFreeMemoryGauge
operator|==
literal|null
operator|&&
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"variable.jvm.free.memory"
argument_list|)
condition|)
block|{
name|jvmFreeMemoryGauge
operator|=
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
literal|"variable.jvm.free.memory"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jvmMaxMemoryGauge
operator|==
literal|null
operator|&&
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"variable.jvm.max.memory"
argument_list|)
condition|)
block|{
name|jvmMaxMemoryGauge
operator|=
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
literal|"variable.jvm.max.memory"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jvmTotalMemoryGauge
operator|==
literal|null
operator|&&
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"variable.jvm.total.memory"
argument_list|)
condition|)
block|{
name|jvmTotalMemoryGauge
operator|=
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
literal|"variable.jvm.total.memory"
argument_list|)
expr_stmt|;
block|}
name|jvmFreeMemoryGB
operator|=
name|jvmFreeMemoryGauge
operator|==
literal|null
condition|?
literal|0
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|jvmFreeMemoryGauge
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|/
literal|1024
operator|/
literal|1024
operator|/
literal|1024
expr_stmt|;
name|jvmMaxMemoryGB
operator|=
name|jvmMaxMemoryGauge
operator|==
literal|null
condition|?
literal|0
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|jvmMaxMemoryGauge
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|/
literal|1024
operator|/
literal|1024
operator|/
literal|1024
expr_stmt|;
name|jvmTotalMemoryGB
operator|=
name|jvmTotalMemoryGauge
operator|==
literal|null
condition|?
literal|0
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|jvmTotalMemoryGauge
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|/
literal|1024
operator|/
literal|1024
operator|/
literal|1024
expr_stmt|;
comment|// number of running applications/containers
name|String
name|numRunningApps
decl_stmt|,
name|numRunningContainers
decl_stmt|;
if|if
condition|(
name|numRunningAppsGauge
operator|==
literal|null
operator|&&
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"variable.running.application"
argument_list|)
condition|)
block|{
name|numRunningAppsGauge
operator|=
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
literal|"variable.running.application"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numRunningContainersGauge
operator|==
literal|null
operator|&&
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"variable.running.container"
argument_list|)
condition|)
block|{
name|numRunningContainersGauge
operator|=
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
literal|"variable.running.container"
argument_list|)
expr_stmt|;
block|}
name|numRunningApps
operator|=
name|numRunningAppsGauge
operator|==
literal|null
condition|?
literal|"0"
else|:
name|numRunningAppsGauge
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|numRunningContainers
operator|=
name|numRunningContainersGauge
operator|==
literal|null
condition|?
literal|"0"
else|:
name|numRunningContainersGauge
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// cluster available/allocate resource
name|double
name|allocatedMemoryGB
decl_stmt|,
name|allocatedVCoresGB
decl_stmt|,
name|availableMemoryGB
decl_stmt|,
name|availableVCoresGB
decl_stmt|;
if|if
condition|(
name|allocatedMemoryGauge
operator|==
literal|null
operator|&&
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"variable.cluster.allocated.memory"
argument_list|)
condition|)
block|{
name|allocatedMemoryGauge
operator|=
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
literal|"variable.cluster.allocated.memory"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocatedVCoresGauge
operator|==
literal|null
operator|&&
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"variable.cluster.allocated.vcores"
argument_list|)
condition|)
block|{
name|allocatedVCoresGauge
operator|=
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
literal|"variable.cluster.allocated.vcores"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|availableMemoryGauge
operator|==
literal|null
operator|&&
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"variable.cluster.available.memory"
argument_list|)
condition|)
block|{
name|availableMemoryGauge
operator|=
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
literal|"variable.cluster.available.memory"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|availableVCoresGauge
operator|==
literal|null
operator|&&
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"variable.cluster.available.vcores"
argument_list|)
condition|)
block|{
name|availableVCoresGauge
operator|=
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
literal|"variable.cluster.available.vcores"
argument_list|)
expr_stmt|;
block|}
name|allocatedMemoryGB
operator|=
name|allocatedMemoryGauge
operator|==
literal|null
condition|?
literal|0
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|allocatedMemoryGauge
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|/
literal|1024
expr_stmt|;
name|allocatedVCoresGB
operator|=
name|allocatedVCoresGauge
operator|==
literal|null
condition|?
literal|0
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|allocatedVCoresGauge
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|availableMemoryGB
operator|=
name|availableMemoryGauge
operator|==
literal|null
condition|?
literal|0
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|availableMemoryGauge
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|/
literal|1024
expr_stmt|;
name|availableVCoresGB
operator|=
name|availableVCoresGauge
operator|==
literal|null
condition|?
literal|0
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|availableVCoresGauge
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// scheduler operation
name|double
name|allocateTimecost
decl_stmt|,
name|handleTimecost
decl_stmt|;
if|if
condition|(
name|allocateTimecostHistogram
operator|==
literal|null
operator|&&
name|metrics
operator|.
name|getHistograms
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"sampler.scheduler.operation.allocate.timecost"
argument_list|)
condition|)
block|{
name|allocateTimecostHistogram
operator|=
name|metrics
operator|.
name|getHistograms
argument_list|()
operator|.
name|get
argument_list|(
literal|"sampler.scheduler.operation.allocate.timecost"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handleTimecostHistogram
operator|==
literal|null
operator|&&
name|metrics
operator|.
name|getHistograms
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"sampler.scheduler.operation.handle.timecost"
argument_list|)
condition|)
block|{
name|handleTimecostHistogram
operator|=
name|metrics
operator|.
name|getHistograms
argument_list|()
operator|.
name|get
argument_list|(
literal|"sampler.scheduler.operation.handle.timecost"
argument_list|)
expr_stmt|;
block|}
name|allocateTimecost
operator|=
name|allocateTimecostHistogram
operator|==
literal|null
condition|?
literal|0.0
else|:
name|allocateTimecostHistogram
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getMean
argument_list|()
operator|/
literal|1000000
expr_stmt|;
name|handleTimecost
operator|=
name|handleTimecostHistogram
operator|==
literal|null
condition|?
literal|0.0
else|:
name|handleTimecostHistogram
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getMean
argument_list|()
operator|/
literal|1000000
expr_stmt|;
comment|// various handle operation
name|Map
argument_list|<
name|SchedulerEventType
argument_list|,
name|Double
argument_list|>
name|handleOperTimecostMap
init|=
operator|new
name|HashMap
argument_list|<
name|SchedulerEventType
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulerEventType
name|e
range|:
name|SchedulerEventType
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|key
init|=
literal|"sampler.scheduler.operation.handle."
operator|+
name|e
operator|+
literal|".timecost"
decl_stmt|;
if|if
condition|(
operator|!
name|handleOperTimecostHistogramMap
operator|.
name|containsKey
argument_list|(
name|e
argument_list|)
operator|&&
name|metrics
operator|.
name|getHistograms
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|handleOperTimecostHistogramMap
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|metrics
operator|.
name|getHistograms
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|timecost
init|=
name|handleOperTimecostHistogramMap
operator|.
name|containsKey
argument_list|(
name|e
argument_list|)
condition|?
name|handleOperTimecostHistogramMap
operator|.
name|get
argument_list|(
name|e
argument_list|)
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getMean
argument_list|()
operator|/
literal|1000000
else|:
literal|0
decl_stmt|;
name|handleOperTimecostMap
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|timecost
argument_list|)
expr_stmt|;
block|}
comment|// allocated resource for each queue
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|queueAllocatedMemoryMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|queueAllocatedVCoresMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|queue
range|:
name|wrapper
operator|.
name|getTracker
argument_list|()
operator|.
name|getQueueSet
argument_list|()
control|)
block|{
comment|// memory
name|String
name|key
init|=
literal|"counter.queue."
operator|+
name|queue
operator|+
literal|".allocated.memory"
decl_stmt|;
if|if
condition|(
operator|!
name|queueAllocatedMemoryCounterMap
operator|.
name|containsKey
argument_list|(
name|queue
argument_list|)
operator|&&
name|metrics
operator|.
name|getCounters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|queueAllocatedMemoryCounterMap
operator|.
name|put
argument_list|(
name|queue
argument_list|,
name|metrics
operator|.
name|getCounters
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|queueAllocatedMemoryGB
init|=
name|queueAllocatedMemoryCounterMap
operator|.
name|containsKey
argument_list|(
name|queue
argument_list|)
condition|?
name|queueAllocatedMemoryCounterMap
operator|.
name|get
argument_list|(
name|queue
argument_list|)
operator|.
name|getCount
argument_list|()
operator|/
literal|1024.0
else|:
literal|0
decl_stmt|;
name|queueAllocatedMemoryMap
operator|.
name|put
argument_list|(
name|queue
argument_list|,
name|queueAllocatedMemoryGB
argument_list|)
expr_stmt|;
comment|// vCores
name|key
operator|=
literal|"counter.queue."
operator|+
name|queue
operator|+
literal|".allocated.cores"
expr_stmt|;
if|if
condition|(
operator|!
name|queueAllocatedVCoresCounterMap
operator|.
name|containsKey
argument_list|(
name|queue
argument_list|)
operator|&&
name|metrics
operator|.
name|getCounters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|queueAllocatedVCoresCounterMap
operator|.
name|put
argument_list|(
name|queue
argument_list|,
name|metrics
operator|.
name|getCounters
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|queueAllocatedVCores
init|=
name|queueAllocatedVCoresCounterMap
operator|.
name|containsKey
argument_list|(
name|queue
argument_list|)
condition|?
name|queueAllocatedVCoresCounterMap
operator|.
name|get
argument_list|(
name|queue
argument_list|)
operator|.
name|getCount
argument_list|()
else|:
literal|0
decl_stmt|;
name|queueAllocatedVCoresMap
operator|.
name|put
argument_list|(
name|queue
argument_list|,
name|queueAllocatedVCores
argument_list|)
expr_stmt|;
block|}
comment|// package results
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"time\":"
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|",\"jvm.free.memory\":"
argument_list|)
operator|.
name|append
argument_list|(
name|jvmFreeMemoryGB
argument_list|)
operator|.
name|append
argument_list|(
literal|",\"jvm.max.memory\":"
argument_list|)
operator|.
name|append
argument_list|(
name|jvmMaxMemoryGB
argument_list|)
operator|.
name|append
argument_list|(
literal|",\"jvm.total.memory\":"
argument_list|)
operator|.
name|append
argument_list|(
name|jvmTotalMemoryGB
argument_list|)
operator|.
name|append
argument_list|(
literal|",\"running.applications\":"
argument_list|)
operator|.
name|append
argument_list|(
name|numRunningApps
argument_list|)
operator|.
name|append
argument_list|(
literal|",\"running.containers\":"
argument_list|)
operator|.
name|append
argument_list|(
name|numRunningContainers
argument_list|)
operator|.
name|append
argument_list|(
literal|",\"cluster.allocated.memory\":"
argument_list|)
operator|.
name|append
argument_list|(
name|allocatedMemoryGB
argument_list|)
operator|.
name|append
argument_list|(
literal|",\"cluster.allocated.vcores\":"
argument_list|)
operator|.
name|append
argument_list|(
name|allocatedVCoresGB
argument_list|)
operator|.
name|append
argument_list|(
literal|",\"cluster.available.memory\":"
argument_list|)
operator|.
name|append
argument_list|(
name|availableMemoryGB
argument_list|)
operator|.
name|append
argument_list|(
literal|",\"cluster.available.vcores\":"
argument_list|)
operator|.
name|append
argument_list|(
name|availableVCoresGB
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|queue
range|:
name|wrapper
operator|.
name|getTracker
argument_list|()
operator|.
name|getQueueSet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",\"queue."
argument_list|)
operator|.
name|append
argument_list|(
name|queue
argument_list|)
operator|.
name|append
argument_list|(
literal|".allocated.memory\":"
argument_list|)
operator|.
name|append
argument_list|(
name|queueAllocatedMemoryMap
operator|.
name|get
argument_list|(
name|queue
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\"queue."
argument_list|)
operator|.
name|append
argument_list|(
name|queue
argument_list|)
operator|.
name|append
argument_list|(
literal|".allocated.vcores\":"
argument_list|)
operator|.
name|append
argument_list|(
name|queueAllocatedVCoresMap
operator|.
name|get
argument_list|(
name|queue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// scheduler allocate& handle
name|sb
operator|.
name|append
argument_list|(
literal|",\"scheduler.allocate.timecost\":"
argument_list|)
operator|.
name|append
argument_list|(
name|allocateTimecost
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\"scheduler.handle.timecost\":"
argument_list|)
operator|.
name|append
argument_list|(
name|handleTimecost
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulerEventType
name|e
range|:
name|SchedulerEventType
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",\"scheduler.handle-"
argument_list|)
operator|.
name|append
argument_list|(
name|e
argument_list|)
operator|.
name|append
argument_list|(
literal|".timecost\":"
argument_list|)
operator|.
name|append
argument_list|(
name|handleOperTimecostMap
operator|.
name|get
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * package metrics information for one tracked queue/app    * only support FairScheduler currently    * @throws java.io.IOException    */
DECL|method|printJsonTrack (HttpServletRequest request, HttpServletResponse response)
specifier|private
name|void
name|printJsonTrack
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/json"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|schedulerMetrics
operator|instanceof
name|FairSchedulerMetrics
condition|)
block|{
name|String
name|para
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
if|if
condition|(
name|para
operator|.
name|startsWith
argument_list|(
literal|"Job "
argument_list|)
condition|)
block|{
name|String
name|appId
init|=
name|para
operator|.
name|substring
argument_list|(
literal|"Job "
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"time\": "
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"appId\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|appId
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|metric
range|:
name|this
operator|.
name|schedulerMetrics
operator|.
name|getAppTrackedMetrics
argument_list|()
control|)
block|{
name|String
name|key
init|=
literal|"variable.app."
operator|+
name|appId
operator|+
literal|"."
operator|+
name|metric
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\""
argument_list|)
operator|.
name|append
argument_list|(
name|metric
argument_list|)
operator|.
name|append
argument_list|(
literal|"\": "
argument_list|)
expr_stmt|;
if|if
condition|(
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|double
name|memoryGB
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|/
literal|1024
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|memoryGB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|para
operator|.
name|startsWith
argument_list|(
literal|"Queue "
argument_list|)
condition|)
block|{
name|String
name|queueName
init|=
name|para
operator|.
name|substring
argument_list|(
literal|"Queue "
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"time\": "
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"queueName\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|queueName
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|metric
range|:
name|this
operator|.
name|schedulerMetrics
operator|.
name|getQueueTrackedMetrics
argument_list|()
control|)
block|{
name|String
name|key
init|=
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|"."
operator|+
name|metric
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\""
argument_list|)
operator|.
name|append
argument_list|(
name|metric
argument_list|)
operator|.
name|append
argument_list|(
literal|"\": "
argument_list|)
expr_stmt|;
if|if
condition|(
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|double
name|memoryGB
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|metrics
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|/
literal|1024
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|memoryGB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|output
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|output
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|output
operator|=
literal|"[]"
expr_stmt|;
block|}
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|println
argument_list|(
name|output
argument_list|)
expr_stmt|;
comment|// package result
operator|(
operator|(
name|Request
operator|)
name|request
operator|)
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

