begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|ApplicationMasterLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|SLSRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|appmaster
operator|.
name|AMSimulator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|MockAMLauncher
specifier|public
class|class
name|MockAMLauncher
extends|extends
name|ApplicationMasterLauncher
implements|implements
name|EventHandler
argument_list|<
name|AMLauncherEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MockAMLauncher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|amMap
name|Map
argument_list|<
name|String
argument_list|,
name|AMSimulator
argument_list|>
name|amMap
decl_stmt|;
DECL|field|se
name|SLSRunner
name|se
decl_stmt|;
DECL|method|MockAMLauncher (SLSRunner se, RMContext rmContext, Map<String, AMSimulator> amMap)
specifier|public
name|MockAMLauncher
parameter_list|(
name|SLSRunner
name|se
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AMSimulator
argument_list|>
name|amMap
parameter_list|)
block|{
name|super
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|amMap
operator|=
name|amMap
expr_stmt|;
name|this
operator|.
name|se
operator|=
name|se
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Do nothing
block|}
DECL|method|setupAMRMToken (RMAppAttempt appAttempt)
specifier|private
name|void
name|setupAMRMToken
parameter_list|(
name|RMAppAttempt
name|appAttempt
parameter_list|)
block|{
comment|// Setup AMRMToken
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
name|super
operator|.
name|context
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|createAndGetAMRMToken
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|RMAppAttemptImpl
operator|)
name|appAttempt
operator|)
operator|.
name|setAMRMToken
argument_list|(
name|amrmToken
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|handle (AMLauncherEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|AMLauncherEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|AMLauncherEventType
operator|.
name|LAUNCH
operator|==
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
name|ApplicationId
name|appId
init|=
name|event
operator|.
name|getAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// find AMSimulator
for|for
control|(
name|AMSimulator
name|ams
range|:
name|amMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ams
operator|.
name|getApplicationId
argument_list|()
operator|!=
literal|null
operator|&&
name|ams
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|appId
argument_list|)
condition|)
block|{
try|try
block|{
name|Container
name|amContainer
init|=
name|event
operator|.
name|getAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
decl_stmt|;
name|setupAMRMToken
argument_list|(
name|event
operator|.
name|getAppAttempt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Notify RMAppAttempt to change state
name|super
operator|.
name|context
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|event
operator|.
name|getAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
name|ams
operator|.
name|notifyAMContainerLaunched
argument_list|(
name|event
operator|.
name|getAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Notify AM launcher launched:"
operator|+
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|se
operator|.
name|getNmMap
argument_list|()
operator|.
name|get
argument_list|(
name|amContainer
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|addNewContainer
argument_list|(
name|amContainer
argument_list|,
literal|100000000L
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Didn't find any AMSimulator for applicationId="
operator|+
name|appId
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

