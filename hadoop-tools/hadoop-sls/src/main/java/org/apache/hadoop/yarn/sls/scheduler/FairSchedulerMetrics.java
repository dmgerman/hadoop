begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|SLSRunner
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FairSchedulerMetrics
specifier|public
class|class
name|FairSchedulerMetrics
extends|extends
name|SchedulerMetrics
block|{
DECL|field|totalMemoryMB
specifier|private
name|int
name|totalMemoryMB
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|totalVCores
specifier|private
name|int
name|totalVCores
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|maxReset
specifier|private
name|boolean
name|maxReset
init|=
literal|false
decl_stmt|;
DECL|method|FairSchedulerMetrics ()
specifier|public
name|FairSchedulerMetrics
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"demand.memory"
argument_list|)
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"demand.vcores"
argument_list|)
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"usage.memory"
argument_list|)
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"usage.vcores"
argument_list|)
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"minshare.memory"
argument_list|)
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"minshare.vcores"
argument_list|)
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"maxshare.memory"
argument_list|)
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"maxshare.vcores"
argument_list|)
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"fairshare.memory"
argument_list|)
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"fairshare.vcores"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|.
name|add
argument_list|(
literal|"demand.memory"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|.
name|add
argument_list|(
literal|"demand.vcores"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|.
name|add
argument_list|(
literal|"usage.memory"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|.
name|add
argument_list|(
literal|"usage.vcores"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|.
name|add
argument_list|(
literal|"minshare.memory"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|.
name|add
argument_list|(
literal|"minshare.vcores"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|.
name|add
argument_list|(
literal|"maxshare.memory"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|.
name|add
argument_list|(
literal|"maxshare.vcores"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|.
name|add
argument_list|(
literal|"fairshare.memory"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|.
name|add
argument_list|(
literal|"fairshare.vcores"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|trackApp (ApplicationAttemptId appAttemptId, String oldAppId)
specifier|public
name|void
name|trackApp
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|String
name|oldAppId
parameter_list|)
block|{
name|super
operator|.
name|trackApp
argument_list|(
name|appAttemptId
argument_list|,
name|oldAppId
argument_list|)
expr_stmt|;
name|FairScheduler
name|fair
init|=
operator|(
name|FairScheduler
operator|)
name|scheduler
decl_stmt|;
specifier|final
name|FSAppAttempt
name|app
init|=
name|fair
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".demand.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|app
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".demand.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|app
operator|.
name|getDemand
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".usage.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|app
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".usage.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|app
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".minshare.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|app
operator|.
name|getMinShare
argument_list|()
operator|.
name|getMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".minshare.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|app
operator|.
name|getMinShare
argument_list|()
operator|.
name|getMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".maxshare.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|app
operator|.
name|getMaxShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|,
name|totalMemoryMB
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".maxshare.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|app
operator|.
name|getMaxShare
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|totalVCores
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".fairshare.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|app
operator|.
name|getFairShare
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".fairshare.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|app
operator|.
name|getFairShare
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|trackQueue (String queueName)
specifier|public
name|void
name|trackQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|trackedQueues
operator|.
name|add
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|FairScheduler
name|fair
init|=
operator|(
name|FairScheduler
operator|)
name|scheduler
decl_stmt|;
specifier|final
name|FSQueue
name|queue
init|=
name|fair
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".demand.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".demand.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getDemand
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".usage.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".usage.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".minshare.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getMinShare
argument_list|()
operator|.
name|getMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".minshare.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getMinShare
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".maxshare.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
if|if
condition|(
operator|!
name|maxReset
operator|&&
name|SLSRunner
operator|.
name|simulateInfoMap
operator|.
name|containsKey
argument_list|(
literal|"Number of nodes"
argument_list|)
operator|&&
name|SLSRunner
operator|.
name|simulateInfoMap
operator|.
name|containsKey
argument_list|(
literal|"Node memory (MB)"
argument_list|)
operator|&&
name|SLSRunner
operator|.
name|simulateInfoMap
operator|.
name|containsKey
argument_list|(
literal|"Node VCores"
argument_list|)
condition|)
block|{
name|int
name|numNMs
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|SLSRunner
operator|.
name|simulateInfoMap
operator|.
name|get
argument_list|(
literal|"Number of nodes"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numMemoryMB
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|SLSRunner
operator|.
name|simulateInfoMap
operator|.
name|get
argument_list|(
literal|"Node memory (MB)"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numVCores
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|SLSRunner
operator|.
name|simulateInfoMap
operator|.
name|get
argument_list|(
literal|"Node VCores"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|totalMemoryMB
operator|=
name|numNMs
operator|*
name|numMemoryMB
expr_stmt|;
name|totalVCores
operator|=
name|numNMs
operator|*
name|numVCores
expr_stmt|;
name|maxReset
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|Math
operator|.
name|min
argument_list|(
name|queue
operator|.
name|getMaxShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|,
name|totalMemoryMB
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".maxshare.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|queue
operator|.
name|getMaxShare
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|totalVCores
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".fairshare.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".fairshare.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|untrackQueue (String queueName)
specifier|public
name|void
name|untrackQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|trackedQueues
operator|.
name|remove
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".demand.memory"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".demand.vcores"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".usage.memory"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".usage.vcores"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".minshare.memory"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".minshare.vcores"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".maxshare.memory"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".maxshare.vcores"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".fairshare.memory"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".fairshare.vcores"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

