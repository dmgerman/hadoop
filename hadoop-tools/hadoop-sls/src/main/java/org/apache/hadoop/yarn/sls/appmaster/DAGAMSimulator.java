begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.appmaster
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|appmaster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|SLSRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
operator|.
name|ContainerSimulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * AMSimulator that simulates DAG - it requests for containers  * based on the delay specified. It finishes when all the tasks  * are completed.  * Vocabulary Used:  *<dl>  *<dt>Pending</dt><dd>requests which are NOT yet sent to RM.</dd>  *<dt>Scheduled</dt>  *<dd>requests which are sent to RM but not yet assigned.</dd>  *<dt>Assigned</dt><dd>requests which are assigned to a container.</dd>  *<dt>Completed</dt>  *<dd>request corresponding to which container has completed.</dd>  *</dl>  * Containers are requested based on the request delay.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DAGAMSimulator
specifier|public
class|class
name|DAGAMSimulator
extends|extends
name|AMSimulator
block|{
DECL|field|PRIORITY
specifier|private
specifier|static
specifier|final
name|int
name|PRIORITY
init|=
literal|20
decl_stmt|;
DECL|field|pendingContainers
specifier|private
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|pendingContainers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|scheduledContainers
specifier|private
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|scheduledContainers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|assignedContainers
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerSimulator
argument_list|>
name|assignedContainers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|completedContainers
specifier|private
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|completedContainers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|allContainers
specifier|private
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|allContainers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|isFinished
specifier|private
name|boolean
name|isFinished
init|=
literal|false
decl_stmt|;
DECL|field|amStartTime
specifier|private
name|long
name|amStartTime
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DAGAMSimulator
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:parameternumber"
argument_list|)
DECL|method|init (int heartbeatInterval, List<ContainerSimulator> containerList, ResourceManager resourceManager, SLSRunner slsRunnner, long startTime, long finishTime, String simUser, String simQueue, boolean tracked, String oldApp, long baseTimeMS, Resource amResource, String nodeLabelExpr, Map<String, String> params, Map<ApplicationId, AMSimulator> appIdAMSim)
specifier|public
name|void
name|init
parameter_list|(
name|int
name|heartbeatInterval
parameter_list|,
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|containerList
parameter_list|,
name|ResourceManager
name|resourceManager
parameter_list|,
name|SLSRunner
name|slsRunnner
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|String
name|simUser
parameter_list|,
name|String
name|simQueue
parameter_list|,
name|boolean
name|tracked
parameter_list|,
name|String
name|oldApp
parameter_list|,
name|long
name|baseTimeMS
parameter_list|,
name|Resource
name|amResource
parameter_list|,
name|String
name|nodeLabelExpr
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|AMSimulator
argument_list|>
name|appIdAMSim
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|heartbeatInterval
argument_list|,
name|containerList
argument_list|,
name|resourceManager
argument_list|,
name|slsRunnner
argument_list|,
name|startTime
argument_list|,
name|finishTime
argument_list|,
name|simUser
argument_list|,
name|simQueue
argument_list|,
name|tracked
argument_list|,
name|oldApp
argument_list|,
name|baseTimeMS
argument_list|,
name|amResource
argument_list|,
name|nodeLabelExpr
argument_list|,
name|params
argument_list|,
name|appIdAMSim
argument_list|)
expr_stmt|;
name|super
operator|.
name|amtype
operator|=
literal|"dag"
expr_stmt|;
name|allContainers
operator|.
name|addAll
argument_list|(
name|containerList
argument_list|)
expr_stmt|;
name|pendingContainers
operator|.
name|addAll
argument_list|(
name|containerList
argument_list|)
expr_stmt|;
name|totalContainers
operator|=
name|allContainers
operator|.
name|size
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added new job with {} containers"
argument_list|,
name|allContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|firstStep ()
specifier|public
name|void
name|firstStep
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|firstStep
argument_list|()
expr_stmt|;
name|amStartTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initReservation (ReservationId reservationId, long deadline, long now)
specifier|public
name|void
name|initReservation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|long
name|deadline
parameter_list|,
name|long
name|now
parameter_list|)
block|{
comment|// DAG AM doesn't support reservation
name|setReservationRequest
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifyAMContainerLaunched (Container masterContainer)
specifier|public
specifier|synchronized
name|void
name|notifyAMContainerLaunched
parameter_list|(
name|Container
name|masterContainer
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|!=
name|masterContainer
condition|)
block|{
name|restart
argument_list|()
expr_stmt|;
name|super
operator|.
name|notifyAMContainerLaunched
argument_list|(
name|masterContainer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processResponseQueue ()
specifier|protected
name|void
name|processResponseQueue
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
operator|!
name|responseQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AllocateResponse
name|response
init|=
name|responseQueue
operator|.
name|take
argument_list|()
decl_stmt|;
comment|// check completed containers
if|if
condition|(
operator|!
name|response
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ContainerStatus
name|cs
range|:
name|response
operator|.
name|getCompletedContainersStatuses
argument_list|()
control|)
block|{
name|ContainerId
name|containerId
init|=
name|cs
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|cs
operator|.
name|getExitStatus
argument_list|()
operator|==
name|ContainerExitStatus
operator|.
name|SUCCESS
condition|)
block|{
if|if
condition|(
name|assignedContainers
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application {} has one container finished ({})."
argument_list|,
name|appId
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|ContainerSimulator
name|containerSimulator
init|=
name|assignedContainers
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|finishedContainers
operator|++
expr_stmt|;
name|completedContainers
operator|.
name|add
argument_list|(
name|containerSimulator
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|amContainer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
comment|// am container released event
name|isFinished
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application {} goes to finish."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|finishedContainers
operator|>=
name|totalContainers
condition|)
block|{
name|lastStep
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// container to be killed
if|if
condition|(
name|assignedContainers
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Application {} has one container killed ({})."
argument_list|,
name|appId
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|pendingContainers
operator|.
name|add
argument_list|(
name|assignedContainers
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|amContainer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Application {}'s AM is "
operator|+
literal|"going to be killed. Waiting for rescheduling..."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// check finished
if|if
condition|(
name|isAMContainerRunning
operator|&&
operator|(
name|finishedContainers
operator|>=
name|totalContainers
operator|)
condition|)
block|{
name|isAMContainerRunning
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application {} sends out event to clean up"
operator|+
literal|" its AM container."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|isFinished
operator|=
literal|true
expr_stmt|;
break|break;
block|}
comment|// check allocated containers
for|for
control|(
name|Container
name|container
range|:
name|response
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|scheduledContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ContainerSimulator
name|cs
init|=
name|scheduledContainers
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application {} starts to launch a container ({})."
argument_list|,
name|appId
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assignedContainers
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|se
operator|.
name|getNmMap
argument_list|()
operator|.
name|get
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|addNewContainer
argument_list|(
name|container
argument_list|,
name|cs
operator|.
name|getLifeTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|sendContainerRequest ()
specifier|protected
name|void
name|sendContainerRequest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isFinished
condition|)
block|{
return|return;
block|}
comment|// send out request
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|finishedContainers
operator|!=
name|totalContainers
condition|)
block|{
if|if
condition|(
operator|!
name|pendingContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|toBeScheduled
init|=
name|getToBeScheduledContainers
argument_list|(
name|pendingContainers
argument_list|,
name|amStartTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|toBeScheduled
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ask
operator|=
name|packageRequests
argument_list|(
name|toBeScheduled
argument_list|,
name|PRIORITY
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application {} sends out request for {} containers."
argument_list|,
name|appId
argument_list|,
name|toBeScheduled
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduledContainers
operator|.
name|addAll
argument_list|(
name|toBeScheduled
argument_list|)
expr_stmt|;
name|pendingContainers
operator|.
name|removeAll
argument_list|(
name|toBeScheduled
argument_list|)
expr_stmt|;
name|toBeScheduled
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ask
operator|==
literal|null
condition|)
block|{
name|ask
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|final
name|AllocateRequest
name|request
init|=
name|createAllocateRequest
argument_list|(
name|ask
argument_list|)
decl_stmt|;
if|if
condition|(
name|totalContainers
operator|==
literal|0
condition|)
block|{
name|request
operator|.
name|setProgress
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|setProgress
argument_list|(
operator|(
name|float
operator|)
name|finishedContainers
operator|/
name|totalContainers
argument_list|)
expr_stmt|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
name|token
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|AllocateResponse
name|response
init|=
name|ugi
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|AllocateResponse
argument_list|>
call|)
argument_list|()
operator|->
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|responseQueue
operator|.
name|put
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getToBeScheduledContainers ( List<ContainerSimulator> containers, long startTime)
specifier|public
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|getToBeScheduledContainers
parameter_list|(
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|containers
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|toBeScheduled
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerSimulator
name|cs
range|:
name|containers
control|)
block|{
comment|// only request for the container if it is time to request
if|if
condition|(
name|cs
operator|.
name|getRequestDelay
argument_list|()
operator|+
name|startTime
operator|<=
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|toBeScheduled
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|toBeScheduled
return|;
block|}
annotation|@
name|Override
DECL|method|checkStop ()
specifier|protected
name|void
name|checkStop
parameter_list|()
block|{
if|if
condition|(
name|isFinished
condition|)
block|{
name|super
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|lastStep ()
specifier|public
name|void
name|lastStep
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|lastStep
argument_list|()
expr_stmt|;
comment|//clear data structures.
name|allContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pendingContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scheduledContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assignedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|completedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * restart running because of the am container killed.    */
DECL|method|restart ()
specifier|private
name|void
name|restart
parameter_list|()
block|{
name|isFinished
operator|=
literal|false
expr_stmt|;
name|pendingContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pendingContainers
operator|.
name|addAll
argument_list|(
name|allContainers
argument_list|)
expr_stmt|;
name|pendingContainers
operator|.
name|removeAll
argument_list|(
name|completedContainers
argument_list|)
expr_stmt|;
name|amContainer
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

