begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.synthetic
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|distribution
operator|.
name|LogNormalDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|distribution
operator|.
name|NormalDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|random
operator|.
name|JDKRandomGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Utils for the Synthetic generator.  */
end_comment

begin_class
DECL|class|SynthUtils
specifier|public
specifier|final
class|class
name|SynthUtils
block|{
DECL|method|SynthUtils ()
specifier|private
name|SynthUtils
parameter_list|()
block|{
comment|//class is not meant to be instantiated
block|}
DECL|method|getWeighted (Collection<Double> weights, Random rr)
specifier|public
specifier|static
name|int
name|getWeighted
parameter_list|(
name|Collection
argument_list|<
name|Double
argument_list|>
name|weights
parameter_list|,
name|Random
name|rr
parameter_list|)
block|{
name|double
name|totalWeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Double
name|i
range|:
name|weights
control|)
block|{
name|totalWeight
operator|+=
name|i
expr_stmt|;
block|}
name|double
name|rand
init|=
name|rr
operator|.
name|nextDouble
argument_list|()
operator|*
name|totalWeight
decl_stmt|;
name|double
name|cur
init|=
literal|0
decl_stmt|;
name|int
name|ind
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Double
name|i
range|:
name|weights
control|)
block|{
name|cur
operator|+=
name|i
expr_stmt|;
if|if
condition|(
name|cur
operator|>
name|rand
condition|)
block|{
break|break;
block|}
name|ind
operator|++
expr_stmt|;
block|}
return|return
name|ind
return|;
block|}
DECL|method|getNormalDist (JDKRandomGenerator rand, double average, double stdDev)
specifier|public
specifier|static
name|NormalDistribution
name|getNormalDist
parameter_list|(
name|JDKRandomGenerator
name|rand
parameter_list|,
name|double
name|average
parameter_list|,
name|double
name|stdDev
parameter_list|)
block|{
if|if
condition|(
name|average
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// set default for missing param
if|if
condition|(
name|stdDev
operator|==
literal|0
condition|)
block|{
name|stdDev
operator|=
name|average
operator|/
literal|6
expr_stmt|;
block|}
name|NormalDistribution
name|ret
init|=
operator|new
name|NormalDistribution
argument_list|(
name|average
argument_list|,
name|stdDev
argument_list|,
name|NormalDistribution
operator|.
name|DEFAULT_INVERSE_ABSOLUTE_ACCURACY
argument_list|)
decl_stmt|;
name|ret
operator|.
name|reseedRandomGenerator
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|getLogNormalDist (JDKRandomGenerator rand, double mean, double stdDev)
specifier|public
specifier|static
name|LogNormalDistribution
name|getLogNormalDist
parameter_list|(
name|JDKRandomGenerator
name|rand
parameter_list|,
name|double
name|mean
parameter_list|,
name|double
name|stdDev
parameter_list|)
block|{
if|if
condition|(
name|mean
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// set default for missing param
if|if
condition|(
name|stdDev
operator|==
literal|0
condition|)
block|{
name|stdDev
operator|=
name|mean
operator|/
literal|6
expr_stmt|;
block|}
comment|// derive lognormal parameters for X = LogNormal(mu, sigma)
comment|// sigma^2 = ln (1+Var[X]/(E[X])^2)
comment|// mu = ln(E[X]) - 1/2 * sigma^2
name|double
name|var
init|=
name|stdDev
operator|*
name|stdDev
decl_stmt|;
name|double
name|sigmasq
init|=
name|Math
operator|.
name|log1p
argument_list|(
name|var
operator|/
operator|(
name|mean
operator|*
name|mean
operator|)
argument_list|)
decl_stmt|;
name|double
name|sigma
init|=
name|Math
operator|.
name|sqrt
argument_list|(
name|sigmasq
argument_list|)
decl_stmt|;
name|double
name|mu
init|=
name|Math
operator|.
name|log
argument_list|(
name|mean
argument_list|)
operator|-
literal|0.5
operator|*
name|sigmasq
decl_stmt|;
name|LogNormalDistribution
name|ret
init|=
operator|new
name|LogNormalDistribution
argument_list|(
name|mu
argument_list|,
name|sigma
argument_list|,
name|LogNormalDistribution
operator|.
name|DEFAULT_INVERSE_ABSOLUTE_ACCURACY
argument_list|)
decl_stmt|;
name|ret
operator|.
name|reseedRandomGenerator
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

