begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.synthetic
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
operator|.
name|SynthTraceJobProducer
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class represent a workload (made up of multiple SynthJobClass(es)). It  * also stores the temporal distributions of jobs in this workload.  */
end_comment

begin_class
DECL|class|SynthWorkload
specifier|public
class|class
name|SynthWorkload
block|{
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|classList
specifier|private
specifier|final
name|List
argument_list|<
name|SynthJobClass
argument_list|>
name|classList
decl_stmt|;
DECL|field|trace
specifier|private
specifier|final
name|Trace
name|trace
decl_stmt|;
DECL|field|timeWeights
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|timeWeights
decl_stmt|;
DECL|method|SynthWorkload (int identifier, Trace inTrace)
specifier|public
name|SynthWorkload
parameter_list|(
name|int
name|identifier
parameter_list|,
name|Trace
name|inTrace
parameter_list|)
block|{
name|classList
operator|=
operator|new
name|ArrayList
argument_list|<
name|SynthJobClass
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|identifier
expr_stmt|;
name|this
operator|.
name|trace
operator|=
name|inTrace
expr_stmt|;
name|timeWeights
operator|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|SynthTraceJobProducer
operator|.
name|TimeSample
name|ts
range|:
name|trace
operator|.
name|workloads
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|time_distribution
control|)
block|{
name|timeWeights
operator|.
name|put
argument_list|(
name|ts
operator|.
name|time
argument_list|,
name|ts
operator|.
name|jobs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add (SynthJobClass s)
specifier|public
name|boolean
name|add
parameter_list|(
name|SynthJobClass
name|s
parameter_list|)
block|{
return|return
name|classList
operator|.
name|add
argument_list|(
name|s
argument_list|)
return|;
block|}
DECL|method|getWeightList ()
specifier|public
name|List
argument_list|<
name|Double
argument_list|>
name|getWeightList
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SynthJobClass
name|s
range|:
name|classList
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|s
operator|.
name|getClassWeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|getId ()
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|SynthWorkload
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// assume ID determines job classes by construction
return|return
name|getId
argument_list|()
operator|==
operator|(
operator|(
name|SynthWorkload
operator|)
name|other
operator|)
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SynthWorkload "
operator|+
name|trace
operator|.
name|workloads
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|workload_name
operator|+
literal|"[\n"
operator|+
name|classList
operator|+
literal|"]\n"
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|trace
operator|.
name|workloads
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|workload_name
return|;
block|}
DECL|method|getWorkloadWeight ()
specifier|public
name|double
name|getWorkloadWeight
parameter_list|()
block|{
return|return
name|trace
operator|.
name|workloads
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|workload_weight
return|;
block|}
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|trace
operator|.
name|workloads
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|queue_name
return|;
block|}
DECL|method|getBaseSubmissionTime (Random rand)
specifier|public
name|long
name|getBaseSubmissionTime
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
comment|// pick based on weights the "bucket" for this start time
name|int
name|position
init|=
name|SynthUtils
operator|.
name|getWeighted
argument_list|(
name|timeWeights
operator|.
name|values
argument_list|()
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|int
index|[]
name|time
init|=
operator|new
name|int
index|[
name|timeWeights
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|timeWeights
operator|.
name|keySet
argument_list|()
control|)
block|{
name|time
index|[
name|index
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
comment|// uniformly pick a time between start and end time of this bucket
name|int
name|startRange
init|=
name|time
index|[
name|position
index|]
decl_stmt|;
name|int
name|endRange
init|=
name|startRange
decl_stmt|;
comment|// if there is no subsequent bucket pick startRange
if|if
condition|(
name|position
operator|<
name|timeWeights
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|endRange
operator|=
name|time
index|[
name|position
operator|+
literal|1
index|]
expr_stmt|;
return|return
name|startRange
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
operator|(
name|endRange
operator|-
name|startRange
operator|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|startRange
return|;
block|}
block|}
DECL|method|getClassList ()
specifier|public
name|List
argument_list|<
name|SynthJobClass
argument_list|>
name|getClassList
parameter_list|()
block|{
return|return
name|classList
return|;
block|}
block|}
end_class

end_unit

