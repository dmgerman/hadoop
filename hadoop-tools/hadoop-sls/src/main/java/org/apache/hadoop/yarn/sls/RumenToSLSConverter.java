begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|utils
operator|.
name|SLSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectWriter
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|RumenToSLSConverter
specifier|public
class|class
name|RumenToSLSConverter
block|{
DECL|field|EOL
specifier|private
specifier|static
specifier|final
name|String
name|EOL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|baseline
specifier|private
specifier|static
name|long
name|baseline
init|=
literal|0
decl_stmt|;
DECL|field|rackNodeMap
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|rackNodeMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|main (String args[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"input"
argument_list|,
literal|true
argument_list|,
literal|"input rumen json file"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"outputJobs"
argument_list|,
literal|true
argument_list|,
literal|"output jobs file"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"outputNodes"
argument_list|,
literal|true
argument_list|,
literal|"output nodes file"
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmd
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"input"
argument_list|)
operator|||
operator|!
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"outputJobs"
argument_list|)
operator|||
operator|!
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"outputNodes"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Missing input or output file"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"LoadGenerator creates a SLS script "
operator|+
literal|"from a Hadoop Rumen output"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Options: -input FILE -outputJobs FILE "
operator|+
literal|"-outputNodes FILE"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|inputFile
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"input"
argument_list|)
decl_stmt|;
name|String
name|outputJsonFile
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"outputJobs"
argument_list|)
decl_stmt|;
name|String
name|outputNodeFile
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"outputNodes"
argument_list|)
decl_stmt|;
comment|// check existing
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|inputFile
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: input does not exist"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|new
name|File
argument_list|(
name|outputJsonFile
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: output job file is existing"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|new
name|File
argument_list|(
name|outputNodeFile
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: output node file is existing"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|File
name|jsonFile
init|=
operator|new
name|File
argument_list|(
name|outputJsonFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jsonFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|jsonFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Cannot create output directory in path: "
operator|+
name|jsonFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|File
name|nodeFile
init|=
operator|new
name|File
argument_list|(
name|outputNodeFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nodeFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|nodeFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Cannot create output directory in path: "
operator|+
name|jsonFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|generateSLSLoadFile
argument_list|(
name|inputFile
argument_list|,
name|outputJsonFile
argument_list|)
expr_stmt|;
name|generateSLSNodeFile
argument_list|(
name|outputNodeFile
argument_list|)
expr_stmt|;
block|}
DECL|method|generateSLSLoadFile (String inputFile, String outputFile)
specifier|private
specifier|static
name|void
name|generateSLSLoadFile
parameter_list|(
name|String
name|inputFile
parameter_list|,
name|String
name|outputFile
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Reader
name|input
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|inputFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
try|try
init|(
name|Writer
name|output
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outputFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|ObjectWriter
name|writer
init|=
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
argument_list|>
name|i
init|=
name|mapper
operator|.
name|readValues
argument_list|(
operator|new
name|JsonFactory
argument_list|()
operator|.
name|createJsonParser
argument_list|(
name|input
argument_list|)
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|writer
operator|.
name|writeValueAsString
argument_list|(
name|createSLSJob
argument_list|(
name|m
argument_list|)
argument_list|)
operator|+
name|EOL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|generateSLSNodeFile (String outputFile)
specifier|private
specifier|static
name|void
name|generateSLSNodeFile
parameter_list|(
name|String
name|outputFile
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Writer
name|output
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outputFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|ObjectWriter
name|writer
init|=
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|rackNodeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
name|rack
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|rack
operator|.
name|put
argument_list|(
literal|"rack"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|nodes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Map
name|node
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|node
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|rack
operator|.
name|put
argument_list|(
literal|"nodes"
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|writer
operator|.
name|writeValueAsString
argument_list|(
name|rack
argument_list|)
operator|+
name|EOL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createSLSJob (Map rumenJob)
specifier|private
specifier|static
name|Map
name|createSLSJob
parameter_list|(
name|Map
name|rumenJob
parameter_list|)
block|{
name|Map
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|long
name|jobStart
init|=
operator|(
name|Long
operator|)
name|rumenJob
operator|.
name|get
argument_list|(
literal|"submitTime"
argument_list|)
decl_stmt|;
name|long
name|jobFinish
init|=
operator|(
name|Long
operator|)
name|rumenJob
operator|.
name|get
argument_list|(
literal|"finishTime"
argument_list|)
decl_stmt|;
name|String
name|jobId
init|=
name|rumenJob
operator|.
name|get
argument_list|(
literal|"jobID"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|queue
init|=
name|rumenJob
operator|.
name|get
argument_list|(
literal|"queue"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|rumenJob
operator|.
name|get
argument_list|(
literal|"user"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseline
operator|==
literal|0
condition|)
block|{
name|baseline
operator|=
name|jobStart
expr_stmt|;
block|}
name|jobStart
operator|-=
name|baseline
expr_stmt|;
name|jobFinish
operator|-=
name|baseline
expr_stmt|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|jobStart
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Warning: reset job "
operator|+
name|jobId
operator|+
literal|" start time to 0."
argument_list|)
expr_stmt|;
name|offset
operator|=
operator|-
name|jobStart
expr_stmt|;
name|jobFinish
operator|=
name|jobFinish
operator|-
name|jobStart
expr_stmt|;
name|jobStart
operator|=
literal|0
expr_stmt|;
block|}
name|json
operator|.
name|put
argument_list|(
literal|"am.type"
argument_list|,
literal|"mapreduce"
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"job.start.ms"
argument_list|,
name|jobStart
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"job.end.ms"
argument_list|,
name|jobFinish
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"job.queue.name"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"job.id"
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"job.user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|List
name|maps
init|=
name|createSLSTasks
argument_list|(
literal|"map"
argument_list|,
operator|(
name|List
operator|)
name|rumenJob
operator|.
name|get
argument_list|(
literal|"mapTasks"
argument_list|)
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|List
name|reduces
init|=
name|createSLSTasks
argument_list|(
literal|"reduce"
argument_list|,
operator|(
name|List
operator|)
name|rumenJob
operator|.
name|get
argument_list|(
literal|"reduceTasks"
argument_list|)
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|List
name|tasks
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|tasks
operator|.
name|addAll
argument_list|(
name|maps
argument_list|)
expr_stmt|;
name|tasks
operator|.
name|addAll
argument_list|(
name|reduces
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"job.tasks"
argument_list|,
name|tasks
argument_list|)
expr_stmt|;
return|return
name|json
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createSLSTasks (String taskType, List rumenTasks, long offset)
specifier|private
specifier|static
name|List
name|createSLSTasks
parameter_list|(
name|String
name|taskType
parameter_list|,
name|List
name|rumenTasks
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|int
name|priority
init|=
name|taskType
operator|.
name|equals
argument_list|(
literal|"reduce"
argument_list|)
condition|?
literal|10
else|:
literal|20
decl_stmt|;
name|List
name|array
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|e
range|:
name|rumenTasks
control|)
block|{
name|Map
name|rumenTask
init|=
operator|(
name|Map
operator|)
name|e
decl_stmt|;
for|for
control|(
name|Object
name|ee
range|:
operator|(
name|List
operator|)
name|rumenTask
operator|.
name|get
argument_list|(
literal|"attempts"
argument_list|)
control|)
block|{
name|Map
name|rumenAttempt
init|=
operator|(
name|Map
operator|)
name|ee
decl_stmt|;
name|long
name|taskStart
init|=
operator|(
name|Long
operator|)
name|rumenAttempt
operator|.
name|get
argument_list|(
literal|"startTime"
argument_list|)
decl_stmt|;
name|long
name|taskFinish
init|=
operator|(
name|Long
operator|)
name|rumenAttempt
operator|.
name|get
argument_list|(
literal|"finishTime"
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
operator|(
name|String
operator|)
name|rumenAttempt
operator|.
name|get
argument_list|(
literal|"hostName"
argument_list|)
decl_stmt|;
name|taskStart
operator|=
name|taskStart
operator|-
name|baseline
operator|+
name|offset
expr_stmt|;
name|taskFinish
operator|=
name|taskFinish
operator|-
name|baseline
operator|+
name|offset
expr_stmt|;
name|Map
name|task
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|task
operator|.
name|put
argument_list|(
literal|"container.host"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|task
operator|.
name|put
argument_list|(
literal|"container.start.ms"
argument_list|,
name|taskStart
argument_list|)
expr_stmt|;
name|task
operator|.
name|put
argument_list|(
literal|"container.end.ms"
argument_list|,
name|taskFinish
argument_list|)
expr_stmt|;
name|task
operator|.
name|put
argument_list|(
literal|"container.priority"
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|task
operator|.
name|put
argument_list|(
literal|"container.type"
argument_list|,
name|taskType
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|String
name|rackHost
index|[]
init|=
name|SLSUtils
operator|.
name|getRackHostName
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|rackNodeMap
operator|.
name|containsKey
argument_list|(
name|rackHost
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|rackNodeMap
operator|.
name|get
argument_list|(
name|rackHost
index|[
literal|0
index|]
argument_list|)
operator|.
name|add
argument_list|(
name|rackHost
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|hosts
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hosts
operator|.
name|add
argument_list|(
name|rackHost
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|rackNodeMap
operator|.
name|put
argument_list|(
name|rackHost
index|[
literal|0
index|]
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|array
return|;
block|}
block|}
end_class

end_unit

