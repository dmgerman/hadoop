begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|source
operator|.
name|JvmMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobTraceReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|LoggedJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|LoggedTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|LoggedTaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|ApplicationMasterLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|appmaster
operator|.
name|AMSimulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|conf
operator|.
name|SLSConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|nodemanager
operator|.
name|NMSimulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|resourcemanager
operator|.
name|MockAMLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
operator|.
name|SLSCapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
operator|.
name|SLSFairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
operator|.
name|ContainerSimulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
operator|.
name|SchedulerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
operator|.
name|SynthJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
operator|.
name|SynthTraceJobProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|utils
operator|.
name|SLSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UTCClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SLSRunner
specifier|public
class|class
name|SLSRunner
extends|extends
name|Configured
implements|implements
name|Tool
block|{
comment|// RM, Runner
DECL|field|rm
specifier|private
name|ResourceManager
name|rm
decl_stmt|;
DECL|field|runner
specifier|private
specifier|static
name|TaskRunner
name|runner
init|=
operator|new
name|TaskRunner
argument_list|()
decl_stmt|;
DECL|field|inputTraces
specifier|private
name|String
index|[]
name|inputTraces
decl_stmt|;
DECL|field|queueAppNumMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|queueAppNumMap
decl_stmt|;
comment|// NM simulator
DECL|field|nmMap
specifier|private
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|NMSimulator
argument_list|>
name|nmMap
decl_stmt|;
DECL|field|nmMemoryMB
DECL|field|nmVCores
specifier|private
name|int
name|nmMemoryMB
decl_stmt|,
name|nmVCores
decl_stmt|;
DECL|field|nodeFile
specifier|private
name|String
name|nodeFile
decl_stmt|;
comment|// AM simulator
DECL|field|AM_ID
specifier|private
name|int
name|AM_ID
decl_stmt|;
DECL|field|amMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AMSimulator
argument_list|>
name|amMap
decl_stmt|;
DECL|field|trackedApps
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|trackedApps
decl_stmt|;
DECL|field|amClassMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|amClassMap
decl_stmt|;
DECL|field|remainingApps
specifier|private
specifier|static
name|int
name|remainingApps
init|=
literal|0
decl_stmt|;
comment|// metrics
DECL|field|metricsOutputDir
specifier|private
name|String
name|metricsOutputDir
decl_stmt|;
DECL|field|printSimulation
specifier|private
name|boolean
name|printSimulation
decl_stmt|;
comment|// other simulation information
DECL|field|numNMs
DECL|field|numRacks
DECL|field|numAMs
DECL|field|numTasks
specifier|private
name|int
name|numNMs
decl_stmt|,
name|numRacks
decl_stmt|,
name|numAMs
decl_stmt|,
name|numTasks
decl_stmt|;
DECL|field|maxRuntime
specifier|private
name|long
name|maxRuntime
decl_stmt|;
DECL|field|simulateInfoMap
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|simulateInfoMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// logger
DECL|field|LOG
specifier|public
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SLSRunner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_MAPPER_PRIORITY
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_MAPPER_PRIORITY
init|=
literal|20
decl_stmt|;
DECL|field|DEFAULT_REDUCER_PRIORITY
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_REDUCER_PRIORITY
init|=
literal|10
decl_stmt|;
DECL|field|exitAtTheFinish
specifier|private
specifier|static
name|boolean
name|exitAtTheFinish
init|=
literal|false
decl_stmt|;
comment|/**    * The type of trace in input.    */
DECL|enum|TraceType
specifier|public
enum|enum
name|TraceType
block|{
DECL|enumConstant|SLS
DECL|enumConstant|RUMEN
DECL|enumConstant|SYNTH
name|SLS
block|,
name|RUMEN
block|,
name|SYNTH
block|}
DECL|field|inputType
specifier|private
name|TraceType
name|inputType
decl_stmt|;
DECL|field|stjp
specifier|private
name|SynthTraceJobProducer
name|stjp
decl_stmt|;
DECL|method|SLSRunner ()
specifier|public
name|SLSRunner
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|Configuration
name|tempConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|init
argument_list|(
name|tempConf
argument_list|)
expr_stmt|;
block|}
DECL|method|SLSRunner (Configuration tempConf)
specifier|public
name|SLSRunner
parameter_list|(
name|Configuration
name|tempConf
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|init
argument_list|(
name|tempConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|conf
condition|)
block|{
comment|// Override setConf to make sure all conf added load sls-runner.xml, see
comment|// YARN-6560
name|conf
operator|.
name|addResource
argument_list|(
literal|"sls-runner.xml"
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|init (Configuration tempConf)
specifier|private
name|void
name|init
parameter_list|(
name|Configuration
name|tempConf
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|nmMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|queueAppNumMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|amMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|amClassMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// runner configuration
name|setConf
argument_list|(
name|tempConf
argument_list|)
expr_stmt|;
comment|// runner
name|int
name|poolSize
init|=
name|tempConf
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|RUNNER_POOL_SIZE
argument_list|,
name|SLSConfiguration
operator|.
name|RUNNER_POOL_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|SLSRunner
operator|.
name|runner
operator|.
name|setQueueSize
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
comment|//<AMType, Class> map
for|for
control|(
name|Map
operator|.
name|Entry
name|e
range|:
name|tempConf
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|SLSConfiguration
operator|.
name|AM_TYPE_PREFIX
argument_list|)
condition|)
block|{
name|String
name|amType
init|=
name|key
operator|.
name|substring
argument_list|(
name|SLSConfiguration
operator|.
name|AM_TYPE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|amClassMap
operator|.
name|put
argument_list|(
name|amType
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
name|tempConf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return an unmodifiable view of the simulated info map.    */
DECL|method|getSimulateInfoMap ()
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSimulateInfoMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|simulateInfoMap
argument_list|)
return|;
block|}
DECL|method|setSimulationParams (TraceType inType, String[] inTraces, String nodes, String outDir, Set<String> trackApps, boolean printsimulation)
specifier|public
name|void
name|setSimulationParams
parameter_list|(
name|TraceType
name|inType
parameter_list|,
name|String
index|[]
name|inTraces
parameter_list|,
name|String
name|nodes
parameter_list|,
name|String
name|outDir
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|trackApps
parameter_list|,
name|boolean
name|printsimulation
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|this
operator|.
name|inputType
operator|=
name|inType
expr_stmt|;
name|this
operator|.
name|inputTraces
operator|=
name|inTraces
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeFile
operator|=
name|nodes
expr_stmt|;
name|this
operator|.
name|trackedApps
operator|=
name|trackApps
expr_stmt|;
name|this
operator|.
name|printSimulation
operator|=
name|printsimulation
expr_stmt|;
name|metricsOutputDir
operator|=
name|outDir
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
comment|// start resource manager
name|startRM
argument_list|()
expr_stmt|;
comment|// start node managers
name|startNM
argument_list|()
expr_stmt|;
comment|// start application masters
name|startAM
argument_list|()
expr_stmt|;
comment|// set queue& tracked apps information
operator|(
operator|(
name|SchedulerWrapper
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getTracker
argument_list|()
operator|.
name|setQueueSet
argument_list|(
name|this
operator|.
name|queueAppNumMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SchedulerWrapper
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getTracker
argument_list|()
operator|.
name|setTrackedAppSet
argument_list|(
name|this
operator|.
name|trackedApps
argument_list|)
expr_stmt|;
comment|// print out simulation info
name|printSimulationInfo
argument_list|()
expr_stmt|;
comment|// blocked until all nodes RUNNING
name|waitForNodesRunning
argument_list|()
expr_stmt|;
comment|// starting the runner once everything is ready to go,
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|startRM ()
specifier|private
name|void
name|startRM
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|YarnException
block|{
name|Configuration
name|rmConf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|schedulerClass
init|=
name|rmConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|)
decl_stmt|;
if|if
condition|(
name|Class
operator|.
name|forName
argument_list|(
name|schedulerClass
argument_list|)
operator|==
name|CapacityScheduler
operator|.
name|class
condition|)
block|{
name|rmConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|SLSCapacityScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rmConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rmConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MONITOR_POLICIES
argument_list|,
name|ProportionalCapacityPreemptionPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Class
operator|.
name|forName
argument_list|(
name|schedulerClass
argument_list|)
operator|==
name|FairScheduler
operator|.
name|class
condition|)
block|{
name|rmConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|SLSFairScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Class
operator|.
name|forName
argument_list|(
name|schedulerClass
argument_list|)
operator|==
name|FifoScheduler
operator|.
name|class
condition|)
block|{
comment|// TODO add support for FifoScheduler
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Fifo Scheduler is not supported yet."
argument_list|)
throw|;
block|}
name|rmConf
operator|.
name|set
argument_list|(
name|SLSConfiguration
operator|.
name|METRICS_OUTPUT_DIR
argument_list|,
name|metricsOutputDir
argument_list|)
expr_stmt|;
specifier|final
name|SLSRunner
name|se
init|=
name|this
decl_stmt|;
name|rm
operator|=
operator|new
name|ResourceManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ApplicationMasterLauncher
name|createAMLauncher
parameter_list|()
block|{
return|return
operator|new
name|MockAMLauncher
argument_list|(
name|se
argument_list|,
name|this
operator|.
name|rmContext
argument_list|,
name|amMap
argument_list|)
return|;
block|}
block|}
expr_stmt|;
comment|// Across runs of parametrized tests, the JvmMetrics objects is retained,
comment|// but is not registered correctly
name|JvmMetrics
name|jvmMetrics
init|=
name|JvmMetrics
operator|.
name|initSingleton
argument_list|(
literal|"ResourceManager"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|jvmMetrics
operator|.
name|registerIfNeeded
argument_list|()
expr_stmt|;
comment|// Init and start the actual ResourceManager
name|rm
operator|.
name|init
argument_list|(
name|rmConf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|startNM ()
specifier|private
name|void
name|startNM
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// nm configuration
name|nmMemoryMB
operator|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|NM_MEMORY_MB
argument_list|,
name|SLSConfiguration
operator|.
name|NM_MEMORY_MB_DEFAULT
argument_list|)
expr_stmt|;
name|nmVCores
operator|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|NM_VCORES
argument_list|,
name|SLSConfiguration
operator|.
name|NM_VCORES_DEFAULT
argument_list|)
expr_stmt|;
name|int
name|heartbeatInterval
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|NM_HEARTBEAT_INTERVAL_MS
argument_list|,
name|SLSConfiguration
operator|.
name|NM_HEARTBEAT_INTERVAL_MS_DEFAULT
argument_list|)
decl_stmt|;
comment|// nm information (fetch from topology file, or from sls/rumen json file)
name|Set
argument_list|<
name|String
argument_list|>
name|nodeSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|inputTrace
range|:
name|inputTraces
control|)
block|{
switch|switch
condition|(
name|inputType
condition|)
block|{
case|case
name|SLS
case|:
name|nodeSet
operator|.
name|addAll
argument_list|(
name|SLSUtils
operator|.
name|parseNodesFromSLSTrace
argument_list|(
name|inputTrace
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|RUMEN
case|:
name|nodeSet
operator|.
name|addAll
argument_list|(
name|SLSUtils
operator|.
name|parseNodesFromRumenTrace
argument_list|(
name|inputTrace
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SYNTH
case|:
name|stjp
operator|=
operator|new
name|SynthTraceJobProducer
argument_list|(
name|getConf
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|inputTraces
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|nodeSet
operator|.
name|addAll
argument_list|(
name|SLSUtils
operator|.
name|generateNodes
argument_list|(
name|stjp
operator|.
name|getNumNodes
argument_list|()
argument_list|,
name|stjp
operator|.
name|getNumNodes
argument_list|()
operator|/
name|stjp
operator|.
name|getNodesPerRack
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Input configuration not recognized, "
operator|+
literal|"trace type should be SLS, RUMEN, or SYNTH"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|nodeSet
operator|.
name|addAll
argument_list|(
name|SLSUtils
operator|.
name|parseNodesFromNodeFile
argument_list|(
name|nodeFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeSet
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"No node! Please configure nodes."
argument_list|)
throw|;
block|}
comment|// create NM simulators
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rackSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|hostName
range|:
name|nodeSet
control|)
block|{
comment|// we randomize the heartbeat start time from zero to 1 interval
name|NMSimulator
name|nm
init|=
operator|new
name|NMSimulator
argument_list|()
decl_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|hostName
argument_list|,
name|nmMemoryMB
argument_list|,
name|nmVCores
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
name|heartbeatInterval
argument_list|)
argument_list|,
name|heartbeatInterval
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|nmMap
operator|.
name|put
argument_list|(
name|nm
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|nm
argument_list|)
expr_stmt|;
name|runner
operator|.
name|schedule
argument_list|(
name|nm
argument_list|)
expr_stmt|;
name|rackSet
operator|.
name|add
argument_list|(
name|nm
operator|.
name|getNode
argument_list|()
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numRacks
operator|=
name|rackSet
operator|.
name|size
argument_list|()
expr_stmt|;
name|numNMs
operator|=
name|nmMap
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
DECL|method|waitForNodesRunning ()
specifier|private
name|void
name|waitForNodesRunning
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|long
name|startTimeMS
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|numRunningNodes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RMNode
name|node
range|:
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|RUNNING
condition|)
block|{
name|numRunningNodes
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numRunningNodes
operator|==
name|numNMs
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"SLSRunner is waiting for all nodes RUNNING."
operator|+
literal|" {} of {} NMs initialized."
argument_list|,
name|numRunningNodes
argument_list|,
name|numNMs
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"SLSRunner takes {} ms to launch all nodes."
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTimeMS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|startAM ()
specifier|private
name|void
name|startAM
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
switch|switch
condition|(
name|inputType
condition|)
block|{
case|case
name|SLS
case|:
for|for
control|(
name|String
name|inputTrace
range|:
name|inputTraces
control|)
block|{
name|startAMFromSLSTrace
argument_list|(
name|inputTrace
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RUMEN
case|:
name|long
name|baselineTimeMS
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|inputTrace
range|:
name|inputTraces
control|)
block|{
name|startAMFromRumenTrace
argument_list|(
name|inputTrace
argument_list|,
name|baselineTimeMS
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SYNTH
case|:
name|startAMFromSynthGenerator
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Input configuration not recognized, "
operator|+
literal|"trace type should be SLS, RUMEN, or SYNTH"
argument_list|)
throw|;
block|}
name|numAMs
operator|=
name|amMap
operator|.
name|size
argument_list|()
expr_stmt|;
name|remainingApps
operator|=
name|numAMs
expr_stmt|;
block|}
comment|/**    * Parse workload from a SLS trace file.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|startAMFromSLSTrace (String inputTrace)
specifier|private
name|void
name|startAMFromSLSTrace
parameter_list|(
name|String
name|inputTrace
parameter_list|)
throws|throws
name|IOException
block|{
name|JsonFactory
name|jsonF
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
try|try
init|(
name|Reader
name|input
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|inputTrace
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|Iterator
argument_list|<
name|Map
argument_list|>
name|jobIter
init|=
name|mapper
operator|.
name|readValues
argument_list|(
name|jsonF
operator|.
name|createParser
argument_list|(
name|input
argument_list|)
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|jobIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|createAMForJob
argument_list|(
name|jobIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create an AM: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createAMForJob (Map jsonJob)
specifier|private
name|void
name|createAMForJob
parameter_list|(
name|Map
name|jsonJob
parameter_list|)
throws|throws
name|YarnException
block|{
name|long
name|jobStartTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|jsonJob
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|JOB_START_MS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|jobFinishTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|jsonJob
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|JOB_END_MS
argument_list|)
condition|)
block|{
name|jobFinishTime
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|jsonJob
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|JOB_END_MS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|user
init|=
operator|(
name|String
operator|)
name|jsonJob
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|JOB_USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
literal|"default"
expr_stmt|;
block|}
name|String
name|queue
init|=
name|jsonJob
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|JOB_QUEUE_NAME
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|increaseQueueAppNum
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|String
name|amType
init|=
operator|(
name|String
operator|)
name|jsonJob
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|AM_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|amType
operator|==
literal|null
condition|)
block|{
name|amType
operator|=
name|SLSUtils
operator|.
name|DEFAULT_JOB_TYPE
expr_stmt|;
block|}
name|int
name|jobCount
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|jsonJob
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|JOB_COUNT
argument_list|)
condition|)
block|{
name|jobCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|jsonJob
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|JOB_COUNT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jobCount
operator|=
name|Math
operator|.
name|max
argument_list|(
name|jobCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|oldAppId
init|=
operator|(
name|String
operator|)
name|jsonJob
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|JOB_ID
argument_list|)
decl_stmt|;
comment|// Job id is generated automatically if this job configuration allows
comment|// multiple job instances
if|if
condition|(
name|jobCount
operator|>
literal|1
condition|)
block|{
name|oldAppId
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jobCount
condition|;
name|i
operator|++
control|)
block|{
name|runNewAM
argument_list|(
name|amType
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|oldAppId
argument_list|,
name|jobStartTime
argument_list|,
name|jobFinishTime
argument_list|,
name|getTaskContainers
argument_list|(
name|jsonJob
argument_list|)
argument_list|,
literal|null
argument_list|,
name|getAMContainerResource
argument_list|(
name|jsonJob
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTaskContainers (Map jsonJob)
specifier|private
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|getTaskContainers
parameter_list|(
name|Map
name|jsonJob
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
name|tasks
init|=
operator|(
name|List
operator|)
name|jsonJob
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|JOB_TASKS
argument_list|)
decl_stmt|;
if|if
condition|(
name|tasks
operator|==
literal|null
operator|||
name|tasks
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"No task for the job!"
argument_list|)
throw|;
block|}
for|for
control|(
name|Object
name|o
range|:
name|tasks
control|)
block|{
name|Map
name|jsonTask
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
name|String
name|hostname
init|=
operator|(
name|String
operator|)
name|jsonTask
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_HOST
argument_list|)
decl_stmt|;
name|long
name|duration
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|jsonTask
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_DURATION_MS
argument_list|)
condition|)
block|{
name|duration
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|jsonTask
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_DURATION_MS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jsonTask
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|DURATION_MS
argument_list|)
condition|)
block|{
comment|// Also support "duration.ms" for backward compatibility
name|duration
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|jsonTask
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|DURATION_MS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jsonTask
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_START_MS
argument_list|)
operator|&&
name|jsonTask
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_END_MS
argument_list|)
condition|)
block|{
name|long
name|taskStart
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|jsonTask
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_START_MS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|taskFinish
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|jsonTask
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_END_MS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|duration
operator|=
name|taskFinish
operator|-
name|taskStart
expr_stmt|;
block|}
if|if
condition|(
name|duration
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Duration of a task shouldn't be less or equal"
operator|+
literal|" to 0!"
argument_list|)
throw|;
block|}
name|Resource
name|res
init|=
name|getDefaultContainerResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|jsonTask
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_MEMORY
argument_list|)
condition|)
block|{
name|int
name|containerMemory
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|jsonTask
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_MEMORY
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|res
operator|.
name|setMemorySize
argument_list|(
name|containerMemory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonTask
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|CONTAINER_VCORES
argument_list|)
condition|)
block|{
name|int
name|containerVCores
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|jsonTask
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|CONTAINER_VCORES
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|res
operator|.
name|setVirtualCores
argument_list|(
name|containerVCores
argument_list|)
expr_stmt|;
block|}
name|int
name|priority
init|=
name|DEFAULT_MAPPER_PRIORITY
decl_stmt|;
if|if
condition|(
name|jsonTask
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_PRIORITY
argument_list|)
condition|)
block|{
name|priority
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|jsonTask
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_PRIORITY
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
literal|"map"
decl_stmt|;
if|if
condition|(
name|jsonTask
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_TYPE
argument_list|)
condition|)
block|{
name|type
operator|=
name|jsonTask
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|TASK_TYPE
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|int
name|count
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|jsonTask
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|COUNT
argument_list|)
condition|)
block|{
name|count
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|jsonTask
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|COUNT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
name|Math
operator|.
name|max
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|containers
operator|.
name|add
argument_list|(
operator|new
name|ContainerSimulator
argument_list|(
name|res
argument_list|,
name|duration
argument_list|,
name|hostname
argument_list|,
name|priority
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|containers
return|;
block|}
comment|/**    * Parse workload from a rumen trace file.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|startAMFromRumenTrace (String inputTrace, long baselineTimeMS)
specifier|private
name|void
name|startAMFromRumenTrace
parameter_list|(
name|String
name|inputTrace
parameter_list|,
name|long
name|baselineTimeMS
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|File
name|fin
init|=
operator|new
name|File
argument_list|(
name|inputTrace
argument_list|)
decl_stmt|;
try|try
init|(
name|JobTraceReader
name|reader
init|=
operator|new
name|JobTraceReader
argument_list|(
operator|new
name|Path
argument_list|(
name|fin
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|LoggedJob
name|job
init|=
name|reader
operator|.
name|getNext
argument_list|()
decl_stmt|;
while|while
condition|(
name|job
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|createAMForJob
argument_list|(
name|job
argument_list|,
name|baselineTimeMS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create an AM: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|job
operator|=
name|reader
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createAMForJob (LoggedJob job, long baselineTimeMs)
specifier|private
name|void
name|createAMForJob
parameter_list|(
name|LoggedJob
name|job
parameter_list|,
name|long
name|baselineTimeMs
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|user
init|=
name|job
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|"default"
else|:
name|job
operator|.
name|getUser
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|jobQueue
init|=
name|job
operator|.
name|getQueue
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|oldJobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|jobStartTimeMS
init|=
name|job
operator|.
name|getSubmitTime
argument_list|()
decl_stmt|;
name|long
name|jobFinishTimeMS
init|=
name|job
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|baselineTimeMs
operator|==
literal|0
condition|)
block|{
name|baselineTimeMs
operator|=
name|job
operator|.
name|getSubmitTime
argument_list|()
expr_stmt|;
block|}
name|jobStartTimeMS
operator|-=
name|baselineTimeMs
expr_stmt|;
name|jobFinishTimeMS
operator|-=
name|baselineTimeMs
expr_stmt|;
if|if
condition|(
name|jobStartTimeMS
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning: reset job {} start time to 0."
argument_list|,
name|oldJobId
argument_list|)
expr_stmt|;
name|jobFinishTimeMS
operator|=
name|jobFinishTimeMS
operator|-
name|jobStartTimeMS
expr_stmt|;
name|jobStartTimeMS
operator|=
literal|0
expr_stmt|;
block|}
name|increaseQueueAppNum
argument_list|(
name|jobQueue
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|containerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// mapper
for|for
control|(
name|LoggedTask
name|mapTask
range|:
name|job
operator|.
name|getMapTasks
argument_list|()
control|)
block|{
if|if
condition|(
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Invalid map task, no attempt for a mapper!"
argument_list|)
throw|;
block|}
name|LoggedTaskAttempt
name|taskAttempt
init|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|taskAttempt
operator|.
name|getHostName
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|containerLifeTime
init|=
name|taskAttempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|taskAttempt
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|containerList
operator|.
name|add
argument_list|(
operator|new
name|ContainerSimulator
argument_list|(
name|getDefaultContainerResource
argument_list|()
argument_list|,
name|containerLifeTime
argument_list|,
name|hostname
argument_list|,
name|DEFAULT_MAPPER_PRIORITY
argument_list|,
literal|"map"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// reducer
for|for
control|(
name|LoggedTask
name|reduceTask
range|:
name|job
operator|.
name|getReduceTasks
argument_list|()
control|)
block|{
if|if
condition|(
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Invalid reduce task, no attempt for a reducer!"
argument_list|)
throw|;
block|}
name|LoggedTaskAttempt
name|taskAttempt
init|=
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|taskAttempt
operator|.
name|getHostName
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|containerLifeTime
init|=
name|taskAttempt
operator|.
name|getFinishTime
argument_list|()
operator|-
name|taskAttempt
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|containerList
operator|.
name|add
argument_list|(
operator|new
name|ContainerSimulator
argument_list|(
name|getDefaultContainerResource
argument_list|()
argument_list|,
name|containerLifeTime
argument_list|,
name|hostname
argument_list|,
name|DEFAULT_REDUCER_PRIORITY
argument_list|,
literal|"reduce"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Only supports the default job type currently
name|runNewAM
argument_list|(
name|SLSUtils
operator|.
name|DEFAULT_JOB_TYPE
argument_list|,
name|user
argument_list|,
name|jobQueue
argument_list|,
name|oldJobId
argument_list|,
name|jobStartTimeMS
argument_list|,
name|jobFinishTimeMS
argument_list|,
name|containerList
argument_list|,
literal|null
argument_list|,
name|getAMContainerResource
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultContainerResource ()
specifier|private
name|Resource
name|getDefaultContainerResource
parameter_list|()
block|{
name|int
name|containerMemory
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|CONTAINER_MEMORY_MB
argument_list|,
name|SLSConfiguration
operator|.
name|CONTAINER_MEMORY_MB_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|containerVCores
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|CONTAINER_VCORES
argument_list|,
name|SLSConfiguration
operator|.
name|CONTAINER_VCORES_DEFAULT
argument_list|)
decl_stmt|;
return|return
name|Resources
operator|.
name|createResource
argument_list|(
name|containerMemory
argument_list|,
name|containerVCores
argument_list|)
return|;
block|}
comment|/**    * parse workload information from synth-generator trace files.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|startAMFromSynthGenerator ()
specifier|private
name|void
name|startAMFromSynthGenerator
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Configuration
name|localConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|localConf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|long
name|baselineTimeMS
init|=
literal|0
decl_stmt|;
comment|// reservations use wall clock time, so need to have a reference for that
name|UTCClock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
try|try
block|{
comment|// if we use the nodeFile this could have been not initialized yet.
if|if
condition|(
name|stjp
operator|==
literal|null
condition|)
block|{
name|stjp
operator|=
operator|new
name|SynthTraceJobProducer
argument_list|(
name|getConf
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|inputTraces
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SynthJob
name|job
init|=
literal|null
decl_stmt|;
comment|// we use stjp, a reference to the job producer instantiated during node
comment|// creation
while|while
condition|(
operator|(
name|job
operator|=
operator|(
name|SynthJob
operator|)
name|stjp
operator|.
name|getNextJob
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// only support MapReduce currently
name|String
name|user
init|=
name|job
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|jobQueue
init|=
name|job
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|String
name|oldJobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|jobStartTimeMS
init|=
name|job
operator|.
name|getSubmissionTime
argument_list|()
decl_stmt|;
comment|// CARLO: Finish time is only used for logging, omit for now
name|long
name|jobFinishTimeMS
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|baselineTimeMS
operator|==
literal|0
condition|)
block|{
name|baselineTimeMS
operator|=
name|jobStartTimeMS
expr_stmt|;
block|}
name|jobStartTimeMS
operator|-=
name|baselineTimeMS
expr_stmt|;
name|jobFinishTimeMS
operator|-=
name|baselineTimeMS
expr_stmt|;
if|if
condition|(
name|jobStartTimeMS
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning: reset job {} start time to 0."
argument_list|,
name|oldJobId
argument_list|)
expr_stmt|;
name|jobFinishTimeMS
operator|=
name|jobFinishTimeMS
operator|-
name|jobStartTimeMS
expr_stmt|;
name|jobStartTimeMS
operator|=
literal|0
expr_stmt|;
block|}
name|increaseQueueAppNum
argument_list|(
name|jobQueue
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|containerList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerSimulator
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|NodeId
argument_list|>
name|keyAsArray
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeId
argument_list|>
argument_list|(
name|nmMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|stjp
operator|.
name|getSeed
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|maxMapRes
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|long
name|maxMapDur
init|=
literal|0
decl_stmt|;
comment|// map tasks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|job
operator|.
name|getNumberMaps
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TaskAttemptInfo
name|tai
init|=
name|job
operator|.
name|getTaskAttemptInfo
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|node
init|=
name|nmMap
operator|.
name|get
argument_list|(
name|keyAsArray
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|keyAsArray
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|String
name|hostname
init|=
literal|"/"
operator|+
name|node
operator|.
name|getRackName
argument_list|()
operator|+
literal|"/"
operator|+
name|node
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|long
name|containerLifeTime
init|=
name|tai
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
name|Resource
name|containerResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
operator|(
name|int
operator|)
name|tai
operator|.
name|getTaskInfo
argument_list|()
operator|.
name|getTaskMemory
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|tai
operator|.
name|getTaskInfo
argument_list|()
operator|.
name|getTaskVCores
argument_list|()
argument_list|)
decl_stmt|;
name|containerList
operator|.
name|add
argument_list|(
operator|new
name|ContainerSimulator
argument_list|(
name|containerResource
argument_list|,
name|containerLifeTime
argument_list|,
name|hostname
argument_list|,
name|DEFAULT_MAPPER_PRIORITY
argument_list|,
literal|"map"
argument_list|)
argument_list|)
expr_stmt|;
name|maxMapRes
operator|=
name|Resources
operator|.
name|componentwiseMax
argument_list|(
name|maxMapRes
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
name|maxMapDur
operator|=
name|containerLifeTime
operator|>
name|maxMapDur
condition|?
name|containerLifeTime
else|:
name|maxMapDur
expr_stmt|;
block|}
name|Resource
name|maxRedRes
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|long
name|maxRedDur
init|=
literal|0
decl_stmt|;
comment|// reduce tasks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|job
operator|.
name|getNumberReduces
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TaskAttemptInfo
name|tai
init|=
name|job
operator|.
name|getTaskAttemptInfo
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|node
init|=
name|nmMap
operator|.
name|get
argument_list|(
name|keyAsArray
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|keyAsArray
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|String
name|hostname
init|=
literal|"/"
operator|+
name|node
operator|.
name|getRackName
argument_list|()
operator|+
literal|"/"
operator|+
name|node
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|long
name|containerLifeTime
init|=
name|tai
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
name|Resource
name|containerResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
operator|(
name|int
operator|)
name|tai
operator|.
name|getTaskInfo
argument_list|()
operator|.
name|getTaskMemory
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|tai
operator|.
name|getTaskInfo
argument_list|()
operator|.
name|getTaskVCores
argument_list|()
argument_list|)
decl_stmt|;
name|containerList
operator|.
name|add
argument_list|(
operator|new
name|ContainerSimulator
argument_list|(
name|containerResource
argument_list|,
name|containerLifeTime
argument_list|,
name|hostname
argument_list|,
name|DEFAULT_REDUCER_PRIORITY
argument_list|,
literal|"reduce"
argument_list|)
argument_list|)
expr_stmt|;
name|maxRedRes
operator|=
name|Resources
operator|.
name|componentwiseMax
argument_list|(
name|maxRedRes
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
name|maxRedDur
operator|=
name|containerLifeTime
operator|>
name|maxRedDur
condition|?
name|containerLifeTime
else|:
name|maxRedDur
expr_stmt|;
block|}
comment|// generating reservations for the jobs that require them
name|ReservationSubmissionRequest
name|rr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|job
operator|.
name|hasDeadline
argument_list|()
condition|)
block|{
name|ReservationId
name|reservationId
init|=
name|ReservationId
operator|.
name|newInstance
argument_list|(
name|this
operator|.
name|rm
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|AM_ID
argument_list|)
decl_stmt|;
name|rr
operator|=
name|ReservationClientUtil
operator|.
name|createMRReservation
argument_list|(
name|reservationId
argument_list|,
literal|"reservation_"
operator|+
name|AM_ID
argument_list|,
name|maxMapRes
argument_list|,
name|job
operator|.
name|getNumberMaps
argument_list|()
argument_list|,
name|maxMapDur
argument_list|,
name|maxRedRes
argument_list|,
name|job
operator|.
name|getNumberReduces
argument_list|()
argument_list|,
name|maxRedDur
argument_list|,
name|now
operator|+
name|jobStartTimeMS
argument_list|,
name|now
operator|+
name|job
operator|.
name|getDeadline
argument_list|()
argument_list|,
name|job
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|runNewAM
argument_list|(
name|SLSUtils
operator|.
name|DEFAULT_JOB_TYPE
argument_list|,
name|user
argument_list|,
name|jobQueue
argument_list|,
name|oldJobId
argument_list|,
name|jobStartTimeMS
argument_list|,
name|jobFinishTimeMS
argument_list|,
name|containerList
argument_list|,
name|rr
argument_list|,
name|getAMContainerResource
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stjp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getAMContainerResource (Map jsonJob)
specifier|private
name|Resource
name|getAMContainerResource
parameter_list|(
name|Map
name|jsonJob
parameter_list|)
block|{
name|Resource
name|amContainerResource
init|=
name|SLSConfiguration
operator|.
name|getAMContainerResource
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonJob
operator|==
literal|null
condition|)
block|{
return|return
name|amContainerResource
return|;
block|}
if|if
condition|(
name|jsonJob
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|AM_MEMORY
argument_list|)
condition|)
block|{
name|amContainerResource
operator|.
name|setMemorySize
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|jsonJob
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|AM_MEMORY
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonJob
operator|.
name|containsKey
argument_list|(
name|SLSConfiguration
operator|.
name|AM_VCORES
argument_list|)
condition|)
block|{
name|amContainerResource
operator|.
name|setVirtualCores
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|jsonJob
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|AM_VCORES
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|amContainerResource
return|;
block|}
DECL|method|increaseQueueAppNum (String queue)
specifier|private
name|void
name|increaseQueueAppNum
parameter_list|(
name|String
name|queue
parameter_list|)
throws|throws
name|YarnException
block|{
name|SchedulerWrapper
name|wrapper
init|=
operator|(
name|SchedulerWrapper
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|String
name|queueName
init|=
name|wrapper
operator|.
name|getRealQueueName
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|Integer
name|appNum
init|=
name|queueAppNumMap
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|appNum
operator|==
literal|null
condition|)
block|{
name|appNum
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|appNum
operator|++
expr_stmt|;
block|}
name|queueAppNumMap
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|appNum
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|getSchedulerMetrics
argument_list|()
operator|.
name|trackQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
DECL|method|runNewAM (String jobType, String user, String jobQueue, String oldJobId, long jobStartTimeMS, long jobFinishTimeMS, List<ContainerSimulator> containerList, ReservationSubmissionRequest rr, Resource amContainerResource)
specifier|private
name|void
name|runNewAM
parameter_list|(
name|String
name|jobType
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobQueue
parameter_list|,
name|String
name|oldJobId
parameter_list|,
name|long
name|jobStartTimeMS
parameter_list|,
name|long
name|jobFinishTimeMS
parameter_list|,
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|containerList
parameter_list|,
name|ReservationSubmissionRequest
name|rr
parameter_list|,
name|Resource
name|amContainerResource
parameter_list|)
block|{
name|AMSimulator
name|amSim
init|=
operator|(
name|AMSimulator
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|amClassMap
operator|.
name|get
argument_list|(
name|jobType
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|amSim
operator|!=
literal|null
condition|)
block|{
name|int
name|heartbeatInterval
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|AM_HEARTBEAT_INTERVAL_MS
argument_list|,
name|SLSConfiguration
operator|.
name|AM_HEARTBEAT_INTERVAL_MS_DEFAULT
argument_list|)
decl_stmt|;
name|boolean
name|isTracked
init|=
name|trackedApps
operator|.
name|contains
argument_list|(
name|oldJobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldJobId
operator|==
literal|null
condition|)
block|{
name|oldJobId
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|AM_ID
argument_list|)
expr_stmt|;
block|}
name|AM_ID
operator|++
expr_stmt|;
name|amSim
operator|.
name|init
argument_list|(
name|heartbeatInterval
argument_list|,
name|containerList
argument_list|,
name|rm
argument_list|,
name|this
argument_list|,
name|jobStartTimeMS
argument_list|,
name|jobFinishTimeMS
argument_list|,
name|user
argument_list|,
name|jobQueue
argument_list|,
name|isTracked
argument_list|,
name|oldJobId
argument_list|,
name|rr
argument_list|,
name|runner
operator|.
name|getStartTimeMS
argument_list|()
argument_list|,
name|amContainerResource
argument_list|)
expr_stmt|;
name|runner
operator|.
name|schedule
argument_list|(
name|amSim
argument_list|)
expr_stmt|;
name|maxRuntime
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxRuntime
argument_list|,
name|jobFinishTimeMS
argument_list|)
expr_stmt|;
name|numTasks
operator|+=
name|containerList
operator|.
name|size
argument_list|()
expr_stmt|;
name|amMap
operator|.
name|put
argument_list|(
name|oldJobId
argument_list|,
name|amSim
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printSimulationInfo ()
specifier|private
name|void
name|printSimulationInfo
parameter_list|()
block|{
if|if
condition|(
name|printSimulation
condition|)
block|{
comment|// node
name|LOG
operator|.
name|info
argument_list|(
literal|"------------------------------------"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"# nodes = {}, # racks = {}, capacity "
operator|+
literal|"of each node {} MB memory and {} vcores."
argument_list|,
name|numNMs
argument_list|,
name|numRacks
argument_list|,
name|nmMemoryMB
argument_list|,
name|nmVCores
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"------------------------------------"
argument_list|)
expr_stmt|;
comment|// job
name|LOG
operator|.
name|info
argument_list|(
literal|"# applications = {}, # total "
operator|+
literal|"tasks = {}, average # tasks per application = {}"
argument_list|,
name|numAMs
argument_list|,
name|numTasks
argument_list|,
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|numTasks
operator|+
literal|0.0
operator|)
operator|/
name|numAMs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JobId\tQueue\tAMType\tDuration\t#Tasks"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AMSimulator
argument_list|>
name|entry
range|:
name|amMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AMSimulator
name|am
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"\t"
operator|+
name|am
operator|.
name|getQueue
argument_list|()
operator|+
literal|"\t"
operator|+
name|am
operator|.
name|getAMType
argument_list|()
operator|+
literal|"\t"
operator|+
name|am
operator|.
name|getDuration
argument_list|()
operator|+
literal|"\t"
operator|+
name|am
operator|.
name|getNumTasks
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"------------------------------------"
argument_list|)
expr_stmt|;
comment|// queue
name|LOG
operator|.
name|info
argument_list|(
literal|"number of queues = {}  average number of apps = {}"
argument_list|,
name|queueAppNumMap
operator|.
name|size
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|numAMs
operator|+
literal|0.0
operator|)
operator|/
name|queueAppNumMap
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"------------------------------------"
argument_list|)
expr_stmt|;
comment|// runtime
name|LOG
operator|.
name|info
argument_list|(
literal|"estimated simulation time is {} seconds"
argument_list|,
call|(
name|long
call|)
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
name|maxRuntime
operator|/
literal|1000.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"------------------------------------"
argument_list|)
expr_stmt|;
block|}
comment|// package these information in the simulateInfoMap used by other places
name|simulateInfoMap
operator|.
name|put
argument_list|(
literal|"Number of racks"
argument_list|,
name|numRacks
argument_list|)
expr_stmt|;
name|simulateInfoMap
operator|.
name|put
argument_list|(
literal|"Number of nodes"
argument_list|,
name|numNMs
argument_list|)
expr_stmt|;
name|simulateInfoMap
operator|.
name|put
argument_list|(
literal|"Node memory (MB)"
argument_list|,
name|nmMemoryMB
argument_list|)
expr_stmt|;
name|simulateInfoMap
operator|.
name|put
argument_list|(
literal|"Node VCores"
argument_list|,
name|nmVCores
argument_list|)
expr_stmt|;
name|simulateInfoMap
operator|.
name|put
argument_list|(
literal|"Number of applications"
argument_list|,
name|numAMs
argument_list|)
expr_stmt|;
name|simulateInfoMap
operator|.
name|put
argument_list|(
literal|"Number of tasks"
argument_list|,
name|numTasks
argument_list|)
expr_stmt|;
name|simulateInfoMap
operator|.
name|put
argument_list|(
literal|"Average tasks per applicaion"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|numTasks
operator|+
literal|0.0
operator|)
operator|/
name|numAMs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|simulateInfoMap
operator|.
name|put
argument_list|(
literal|"Number of queues"
argument_list|,
name|queueAppNumMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|simulateInfoMap
operator|.
name|put
argument_list|(
literal|"Average applications per queue"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|numAMs
operator|+
literal|0.0
operator|)
operator|/
name|queueAppNumMap
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|simulateInfoMap
operator|.
name|put
argument_list|(
literal|"Estimated simulate time (s)"
argument_list|,
call|(
name|long
call|)
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
name|maxRuntime
operator|/
literal|1000.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getNmMap ()
specifier|public
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|NMSimulator
argument_list|>
name|getNmMap
parameter_list|()
block|{
return|return
name|nmMap
return|;
block|}
DECL|method|decreaseRemainingApps ()
specifier|public
specifier|static
name|void
name|decreaseRemainingApps
parameter_list|()
block|{
name|remainingApps
operator|--
expr_stmt|;
if|if
condition|(
name|remainingApps
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SLSRunner tears down."
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitAtTheFinish
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|runner
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|run (final String[] argv)
specifier|public
name|int
name|run
parameter_list|(
specifier|final
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ParseException
throws|,
name|ClassNotFoundException
throws|,
name|YarnException
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
comment|// Left for compatibility
name|options
operator|.
name|addOption
argument_list|(
literal|"inputrumen"
argument_list|,
literal|true
argument_list|,
literal|"input rumen files"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"inputsls"
argument_list|,
literal|true
argument_list|,
literal|"input sls files"
argument_list|)
expr_stmt|;
comment|// New more general format
name|options
operator|.
name|addOption
argument_list|(
literal|"tracetype"
argument_list|,
literal|true
argument_list|,
literal|"the type of trace"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"tracelocation"
argument_list|,
literal|true
argument_list|,
literal|"input trace files"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"nodes"
argument_list|,
literal|true
argument_list|,
literal|"input topology"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"output"
argument_list|,
literal|true
argument_list|,
literal|"output directory"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"trackjobs"
argument_list|,
literal|true
argument_list|,
literal|"jobs to be tracked during simulating"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"printsimulation"
argument_list|,
literal|false
argument_list|,
literal|"print out simulation information"
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmd
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|String
name|traceType
init|=
literal|null
decl_stmt|;
name|String
name|traceLocation
init|=
literal|null
decl_stmt|;
comment|// compatibility with old commandline
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"inputrumen"
argument_list|)
condition|)
block|{
name|traceType
operator|=
literal|"RUMEN"
expr_stmt|;
name|traceLocation
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"inputrumen"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"inputsls"
argument_list|)
condition|)
block|{
name|traceType
operator|=
literal|"SLS"
expr_stmt|;
name|traceLocation
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"inputsls"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"tracetype"
argument_list|)
condition|)
block|{
name|traceType
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"tracetype"
argument_list|)
expr_stmt|;
name|traceLocation
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"tracelocation"
argument_list|)
expr_stmt|;
block|}
name|String
name|output
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"output"
argument_list|)
decl_stmt|;
name|File
name|outputFile
init|=
operator|new
name|File
argument_list|(
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outputFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|outputFile
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Cannot create output directory "
operator|+
name|outputFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Cannot create output directory"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|trackedJobSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"trackjobs"
argument_list|)
condition|)
block|{
name|String
name|trackjobs
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"trackjobs"
argument_list|)
decl_stmt|;
name|String
name|jobIds
index|[]
init|=
name|trackjobs
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|trackedJobSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|jobIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|tempNodeFile
init|=
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"nodes"
argument_list|)
condition|?
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"nodes"
argument_list|)
else|:
literal|""
decl_stmt|;
name|TraceType
name|tempTraceType
init|=
name|TraceType
operator|.
name|SLS
decl_stmt|;
switch|switch
condition|(
name|traceType
condition|)
block|{
case|case
literal|"SLS"
case|:
name|tempTraceType
operator|=
name|TraceType
operator|.
name|SLS
expr_stmt|;
break|break;
case|case
literal|"RUMEN"
case|:
name|tempTraceType
operator|=
name|TraceType
operator|.
name|RUMEN
expr_stmt|;
break|break;
case|case
literal|"SYNTH"
case|:
name|tempTraceType
operator|=
name|TraceType
operator|.
name|SYNTH
expr_stmt|;
break|break;
default|default:
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Misconfigured input"
argument_list|)
throw|;
block|}
name|String
index|[]
name|inputFiles
init|=
name|traceLocation
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|setSimulationParams
argument_list|(
name|tempTraceType
argument_list|,
name|inputFiles
argument_list|,
name|tempNodeFile
argument_list|,
name|output
argument_list|,
name|trackedJobSet
argument_list|,
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"printsimulation"
argument_list|)
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|exitAtTheFinish
operator|=
literal|true
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|SLSRunner
argument_list|()
argument_list|,
name|argv
argument_list|)
expr_stmt|;
block|}
DECL|method|printUsage ()
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Wrong tracetype"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Options: -tracetype "
operator|+
literal|"SLS|RUMEN|SYNTH -tracelocation FILE,FILE... "
operator|+
literal|"(deprecated alternative options --inputsls FILE, FILE,... "
operator|+
literal|" | --inputrumen FILE,FILE,...)"
operator|+
literal|"-output FILE [-nodes FILE] [-trackjobs JobId,JobId...] "
operator|+
literal|"[-printsimulation]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

