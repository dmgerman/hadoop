begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FifoSchedulerMetrics
specifier|public
class|class
name|FifoSchedulerMetrics
extends|extends
name|SchedulerMetrics
block|{
DECL|method|FifoSchedulerMetrics ()
specifier|public
name|FifoSchedulerMetrics
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|trackQueue (String queueName)
specifier|public
name|void
name|trackQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|trackedQueues
operator|.
name|add
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|FifoScheduler
name|fifo
init|=
operator|(
name|FifoScheduler
operator|)
name|scheduler
decl_stmt|;
comment|// for FifoScheduler, only DEFAULT_QUEUE
comment|// here the three parameters doesn't affect results
specifier|final
name|QueueInfo
name|queue
init|=
name|fifo
operator|.
name|getQueueInfo
argument_list|(
name|queueName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// track currentCapacity, maximumCapacity (always 1.0f)
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|".currentcapacity"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Float
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Float
name|getValue
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getCurrentCapacity
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|"."
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Float
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Float
name|getValue
parameter_list|()
block|{
return|return
name|queue
operator|.
name|getCurrentCapacity
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

