begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|UpdatedContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ContainerUpdates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|SLSRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|conf
operator|.
name|SLSConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|web
operator|.
name|SLSWebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|CsvReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|SlidingWindowReservoir
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SLSCapacityScheduler
specifier|public
class|class
name|SLSCapacityScheduler
extends|extends
name|CapacityScheduler
implements|implements
name|SchedulerWrapper
implements|,
name|Configurable
block|{
DECL|field|EOL
specifier|private
specifier|static
specifier|final
name|String
name|EOL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|QUEUE_COUNTER_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_COUNTER_PREFIX
init|=
literal|"counter.queue."
decl_stmt|;
DECL|field|SAMPLING_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|SAMPLING_SIZE
init|=
literal|60
decl_stmt|;
DECL|field|pool
specifier|private
name|ScheduledExecutorService
name|pool
decl_stmt|;
comment|// counters for scheduler allocate/handle operations
DECL|field|schedulerAllocateCounter
specifier|private
name|Counter
name|schedulerAllocateCounter
decl_stmt|;
DECL|field|schedulerHandleCounter
specifier|private
name|Counter
name|schedulerHandleCounter
decl_stmt|;
DECL|field|schedulerHandleCounterMap
specifier|private
name|Map
argument_list|<
name|SchedulerEventType
argument_list|,
name|Counter
argument_list|>
name|schedulerHandleCounterMap
decl_stmt|;
comment|// Timers for scheduler allocate/handle operations
DECL|field|schedulerAllocateTimer
specifier|private
name|Timer
name|schedulerAllocateTimer
decl_stmt|;
DECL|field|schedulerHandleTimer
specifier|private
name|Timer
name|schedulerHandleTimer
decl_stmt|;
DECL|field|schedulerHandleTimerMap
specifier|private
name|Map
argument_list|<
name|SchedulerEventType
argument_list|,
name|Timer
argument_list|>
name|schedulerHandleTimerMap
decl_stmt|;
DECL|field|schedulerHistogramList
specifier|private
name|List
argument_list|<
name|Histogram
argument_list|>
name|schedulerHistogramList
decl_stmt|;
DECL|field|histogramTimerMap
specifier|private
name|Map
argument_list|<
name|Histogram
argument_list|,
name|Timer
argument_list|>
name|histogramTimerMap
decl_stmt|;
DECL|field|samplerLock
specifier|private
name|Lock
name|samplerLock
decl_stmt|;
DECL|field|queueLock
specifier|private
name|Lock
name|queueLock
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|appQueueMap
specifier|private
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|String
argument_list|>
name|appQueueMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jobRuntimeLogBW
specifier|private
name|BufferedWriter
name|jobRuntimeLogBW
decl_stmt|;
comment|// Priority of the ResourceSchedulerWrapper shutdown hook.
DECL|field|SHUTDOWN_HOOK_PRIORITY
specifier|public
specifier|static
specifier|final
name|int
name|SHUTDOWN_HOOK_PRIORITY
init|=
literal|30
decl_stmt|;
comment|// web app
DECL|field|web
specifier|private
name|SLSWebApp
name|web
decl_stmt|;
DECL|field|preemptionContainerMap
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Resource
argument_list|>
name|preemptionContainerMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
comment|// metrics
DECL|field|metrics
specifier|private
name|MetricRegistry
name|metrics
decl_stmt|;
DECL|field|schedulerMetrics
specifier|private
name|SchedulerMetrics
name|schedulerMetrics
decl_stmt|;
DECL|field|metricsON
specifier|private
name|boolean
name|metricsON
decl_stmt|;
DECL|field|metricsOutputDir
specifier|private
name|String
name|metricsOutputDir
decl_stmt|;
DECL|field|metricsLogBW
specifier|private
name|BufferedWriter
name|metricsLogBW
decl_stmt|;
DECL|field|running
specifier|private
name|boolean
name|running
init|=
literal|false
decl_stmt|;
DECL|field|defaultSchedulerMetricsMap
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
name|defaultSchedulerMetricsMap
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|defaultSchedulerMetricsMap
operator|.
name|put
argument_list|(
name|FairScheduler
operator|.
name|class
argument_list|,
name|FairSchedulerMetrics
operator|.
name|class
argument_list|)
expr_stmt|;
name|defaultSchedulerMetricsMap
operator|.
name|put
argument_list|(
name|FifoScheduler
operator|.
name|class
argument_list|,
name|FifoSchedulerMetrics
operator|.
name|class
argument_list|)
expr_stmt|;
name|defaultSchedulerMetricsMap
operator|.
name|put
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|CapacitySchedulerMetrics
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// must set by outside
DECL|field|queueSet
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|queueSet
decl_stmt|;
DECL|field|trackedAppSet
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|trackedAppSet
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SLSCapacityScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SLSCapacityScheduler ()
specifier|public
name|SLSCapacityScheduler
parameter_list|()
block|{
name|samplerLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
name|queueLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start metrics
name|metricsON
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SLSConfiguration
operator|.
name|METRICS_SWITCH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|metricsON
condition|)
block|{
try|try
block|{
name|initMetrics
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|metricsLogBW
operator|!=
literal|null
condition|)
block|{
name|metricsLogBW
operator|.
name|write
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|metricsLogBW
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|web
operator|!=
literal|null
condition|)
block|{
name|web
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocate (ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds, List<String> strings, List<String> strings2, ContainerUpdates updateRequests)
specifier|public
name|Allocation
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|strings
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|strings2
parameter_list|,
name|ContainerUpdates
name|updateRequests
parameter_list|)
block|{
if|if
condition|(
name|metricsON
condition|)
block|{
specifier|final
name|Timer
operator|.
name|Context
name|context
init|=
name|schedulerAllocateTimer
operator|.
name|time
argument_list|()
decl_stmt|;
name|Allocation
name|allocation
init|=
literal|null
decl_stmt|;
try|try
block|{
name|allocation
operator|=
name|super
operator|.
name|allocate
argument_list|(
name|attemptId
argument_list|,
name|resourceRequests
argument_list|,
name|containerIds
argument_list|,
name|strings
argument_list|,
name|strings2
argument_list|,
name|updateRequests
argument_list|)
expr_stmt|;
return|return
name|allocation
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|schedulerAllocateCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
try|try
block|{
name|updateQueueWithAllocateRequest
argument_list|(
name|allocation
argument_list|,
name|attemptId
argument_list|,
name|resourceRequests
argument_list|,
name|containerIds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
return|return
name|super
operator|.
name|allocate
argument_list|(
name|attemptId
argument_list|,
name|resourceRequests
argument_list|,
name|containerIds
argument_list|,
name|strings
argument_list|,
name|strings2
argument_list|,
name|updateRequests
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|handle (SchedulerEvent schedulerEvent)
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|schedulerEvent
parameter_list|)
block|{
comment|// metrics off
if|if
condition|(
operator|!
name|metricsON
condition|)
block|{
name|super
operator|.
name|handle
argument_list|(
name|schedulerEvent
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|running
condition|)
name|running
operator|=
literal|true
expr_stmt|;
comment|// metrics on
name|Timer
operator|.
name|Context
name|handlerTimer
init|=
literal|null
decl_stmt|;
name|Timer
operator|.
name|Context
name|operationTimer
init|=
literal|null
decl_stmt|;
name|NodeUpdateSchedulerEventWrapper
name|eventWrapper
decl_stmt|;
try|try
block|{
comment|//if (schedulerEvent instanceof NodeUpdateSchedulerEvent) {
if|if
condition|(
name|schedulerEvent
operator|.
name|getType
argument_list|()
operator|==
name|SchedulerEventType
operator|.
name|NODE_UPDATE
operator|&&
name|schedulerEvent
operator|instanceof
name|NodeUpdateSchedulerEvent
condition|)
block|{
name|eventWrapper
operator|=
operator|new
name|NodeUpdateSchedulerEventWrapper
argument_list|(
operator|(
name|NodeUpdateSchedulerEvent
operator|)
name|schedulerEvent
argument_list|)
expr_stmt|;
name|schedulerEvent
operator|=
name|eventWrapper
expr_stmt|;
name|updateQueueWithNodeUpdate
argument_list|(
name|eventWrapper
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|schedulerEvent
operator|.
name|getType
argument_list|()
operator|==
name|SchedulerEventType
operator|.
name|APP_ATTEMPT_REMOVED
operator|&&
name|schedulerEvent
operator|instanceof
name|AppAttemptRemovedSchedulerEvent
condition|)
block|{
comment|// check if having AM Container, update resource usage information
name|AppAttemptRemovedSchedulerEvent
name|appRemoveEvent
init|=
operator|(
name|AppAttemptRemovedSchedulerEvent
operator|)
name|schedulerEvent
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|appRemoveEvent
operator|.
name|getApplicationAttemptID
argument_list|()
decl_stmt|;
name|String
name|queue
init|=
name|appQueueMap
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|SchedulerAppReport
name|app
init|=
name|super
operator|.
name|getSchedulerAppInfo
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// have 0 or 1
comment|// should have one container which is AM container
name|RMContainer
name|rmc
init|=
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|updateQueueMetrics
argument_list|(
name|queue
argument_list|,
name|rmc
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|rmc
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|handlerTimer
operator|=
name|schedulerHandleTimer
operator|.
name|time
argument_list|()
expr_stmt|;
name|operationTimer
operator|=
name|schedulerHandleTimerMap
operator|.
name|get
argument_list|(
name|schedulerEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|time
argument_list|()
expr_stmt|;
name|super
operator|.
name|handle
argument_list|(
name|schedulerEvent
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|handlerTimer
operator|!=
literal|null
condition|)
name|handlerTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|operationTimer
operator|!=
literal|null
condition|)
name|operationTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|schedulerHandleCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
name|schedulerHandleCounterMap
operator|.
name|get
argument_list|(
name|schedulerEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|inc
argument_list|()
expr_stmt|;
if|if
condition|(
name|schedulerEvent
operator|.
name|getType
argument_list|()
operator|==
name|SchedulerEventType
operator|.
name|APP_ATTEMPT_REMOVED
operator|&&
name|schedulerEvent
operator|instanceof
name|AppAttemptRemovedSchedulerEvent
condition|)
block|{
name|SLSRunner
operator|.
name|decreaseRemainingApps
argument_list|()
expr_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemoveEvent
init|=
operator|(
name|AppAttemptRemovedSchedulerEvent
operator|)
name|schedulerEvent
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|appRemoveEvent
operator|.
name|getApplicationAttemptID
argument_list|()
decl_stmt|;
name|appQueueMap
operator|.
name|remove
argument_list|(
name|appRemoveEvent
operator|.
name|getApplicationAttemptID
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|schedulerEvent
operator|.
name|getType
argument_list|()
operator|==
name|SchedulerEventType
operator|.
name|APP_ATTEMPT_ADDED
operator|&&
name|schedulerEvent
operator|instanceof
name|AppAttemptAddedSchedulerEvent
condition|)
block|{
name|AppAttemptAddedSchedulerEvent
name|appAddEvent
init|=
operator|(
name|AppAttemptAddedSchedulerEvent
operator|)
name|schedulerEvent
decl_stmt|;
name|SchedulerApplication
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|appAddEvent
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|appQueueMap
operator|.
name|put
argument_list|(
name|appAddEvent
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateQueueWithNodeUpdate ( NodeUpdateSchedulerEventWrapper eventWrapper)
specifier|private
name|void
name|updateQueueWithNodeUpdate
parameter_list|(
name|NodeUpdateSchedulerEventWrapper
name|eventWrapper
parameter_list|)
block|{
name|RMNodeWrapper
name|node
init|=
operator|(
name|RMNodeWrapper
operator|)
name|eventWrapper
operator|.
name|getRMNode
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UpdatedContainerInfo
argument_list|>
name|containerList
init|=
name|node
operator|.
name|getContainerUpdates
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdatedContainerInfo
name|info
range|:
name|containerList
control|)
block|{
for|for
control|(
name|ContainerStatus
name|status
range|:
name|info
operator|.
name|getCompletedContainers
argument_list|()
control|)
block|{
name|ContainerId
name|containerId
init|=
name|status
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|SchedulerAppReport
name|app
init|=
name|super
operator|.
name|getSchedulerAppInfo
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
comment|// this happens for the AM container
comment|// The app have already removed when the NM sends the release
comment|// information.
continue|continue;
block|}
name|String
name|queue
init|=
name|appQueueMap
operator|.
name|get
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|releasedMemory
init|=
literal|0
decl_stmt|,
name|releasedVCores
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getExitStatus
argument_list|()
operator|==
name|ContainerExitStatus
operator|.
name|SUCCESS
condition|)
block|{
for|for
control|(
name|RMContainer
name|rmc
range|:
name|app
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|rmc
operator|.
name|getContainerId
argument_list|()
operator|==
name|containerId
condition|)
block|{
name|releasedMemory
operator|+=
name|rmc
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
expr_stmt|;
name|releasedVCores
operator|+=
name|rmc
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|getExitStatus
argument_list|()
operator|==
name|ContainerExitStatus
operator|.
name|ABORTED
condition|)
block|{
if|if
condition|(
name|preemptionContainerMap
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|Resource
name|preResource
init|=
name|preemptionContainerMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|releasedMemory
operator|+=
name|preResource
operator|.
name|getMemorySize
argument_list|()
expr_stmt|;
name|releasedVCores
operator|+=
name|preResource
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|preemptionContainerMap
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update queue counters
name|updateQueueMetrics
argument_list|(
name|queue
argument_list|,
name|releasedMemory
argument_list|,
name|releasedVCores
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateQueueWithAllocateRequest (Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds)
specifier|private
name|void
name|updateQueueWithAllocateRequest
parameter_list|(
name|Allocation
name|allocation
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
parameter_list|)
throws|throws
name|IOException
block|{
comment|// update queue information
name|Resource
name|pendingResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|allocatedResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|queueName
init|=
name|appQueueMap
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
comment|// container requested
for|for
control|(
name|ResourceRequest
name|request
range|:
name|resourceRequests
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|pendingResource
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// container allocated
for|for
control|(
name|Container
name|container
range|:
name|allocation
operator|.
name|getContainers
argument_list|()
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|allocatedResource
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|pendingResource
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// container released from AM
name|SchedulerAppReport
name|report
init|=
name|super
operator|.
name|getSchedulerAppInfo
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerId
name|containerId
range|:
name|containerIds
control|)
block|{
name|Container
name|container
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|report
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|container
operator|=
name|c
operator|.
name|getContainer
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
comment|// released allocated containers
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|allocatedResource
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|RMContainer
name|c
range|:
name|report
operator|.
name|getReservedContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|container
operator|=
name|c
operator|.
name|getContainer
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
comment|// released reserved containers
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|pendingResource
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// containers released/preemption from scheduler
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|preemptionContainers
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocation
operator|.
name|getContainerPreemptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|preemptionContainers
operator|.
name|addAll
argument_list|(
name|allocation
operator|.
name|getContainerPreemptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocation
operator|.
name|getStrictContainerPreemptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|preemptionContainers
operator|.
name|addAll
argument_list|(
name|allocation
operator|.
name|getStrictContainerPreemptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|preemptionContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ContainerId
name|containerId
range|:
name|preemptionContainers
control|)
block|{
if|if
condition|(
operator|!
name|preemptionContainerMap
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|Container
name|container
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|report
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|container
operator|=
name|c
operator|.
name|getContainer
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|preemptionContainerMap
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// update metrics
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|counterMap
init|=
name|metrics
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|String
name|names
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"counter.queue."
operator|+
name|queueName
operator|+
literal|".pending.memory"
block|,
literal|"counter.queue."
operator|+
name|queueName
operator|+
literal|".pending.cores"
block|,
literal|"counter.queue."
operator|+
name|queueName
operator|+
literal|".allocated.memory"
block|,
literal|"counter.queue."
operator|+
name|queueName
operator|+
literal|".allocated.cores"
block|}
decl_stmt|;
name|long
name|values
index|[]
init|=
operator|new
name|long
index|[]
block|{
name|pendingResource
operator|.
name|getMemorySize
argument_list|()
block|,
name|pendingResource
operator|.
name|getVirtualCores
argument_list|()
block|,
name|allocatedResource
operator|.
name|getMemorySize
argument_list|()
block|,
name|allocatedResource
operator|.
name|getVirtualCores
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|names
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
operator|!
name|counterMap
operator|.
name|containsKey
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|counter
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|counterMap
operator|=
name|metrics
operator|.
name|getCounters
argument_list|()
expr_stmt|;
block|}
name|counterMap
operator|.
name|get
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
operator|.
name|inc
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|queueLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|schedulerMetrics
operator|.
name|isTracked
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
name|schedulerMetrics
operator|.
name|trackQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|queueLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|tearDown ()
specifier|private
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
comment|// close job runtime writer
if|if
condition|(
name|jobRuntimeLogBW
operator|!=
literal|null
condition|)
block|{
name|jobRuntimeLogBW
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// shut pool
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|initMetrics ()
specifier|private
name|void
name|initMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|metrics
operator|=
operator|new
name|MetricRegistry
argument_list|()
expr_stmt|;
comment|// configuration
name|metricsOutputDir
operator|=
name|conf
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|METRICS_OUTPUT_DIR
argument_list|)
expr_stmt|;
name|int
name|metricsWebAddressPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|METRICS_WEB_ADDRESS_PORT
argument_list|,
name|SLSConfiguration
operator|.
name|METRICS_WEB_ADDRESS_PORT_DEFAULT
argument_list|)
decl_stmt|;
comment|// create SchedulerMetrics for current scheduler
name|String
name|schedulerMetricsType
init|=
name|conf
operator|.
name|get
argument_list|(
name|CapacityScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Class
name|schedulerMetricsClass
init|=
name|schedulerMetricsType
operator|==
literal|null
condition|?
name|defaultSchedulerMetricsMap
operator|.
name|get
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
else|:
name|Class
operator|.
name|forName
argument_list|(
name|schedulerMetricsType
argument_list|)
decl_stmt|;
name|schedulerMetrics
operator|=
operator|(
name|SchedulerMetrics
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|schedulerMetricsClass
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|schedulerMetrics
operator|.
name|init
argument_list|(
name|this
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
comment|// register various metrics
name|registerJvmMetrics
argument_list|()
expr_stmt|;
name|registerClusterResourceMetrics
argument_list|()
expr_stmt|;
name|registerContainerAppNumMetrics
argument_list|()
expr_stmt|;
name|registerSchedulerMetrics
argument_list|()
expr_stmt|;
comment|// .csv output
name|initMetricsCSVOutput
argument_list|()
expr_stmt|;
comment|// start web app to provide real-time tracking
name|web
operator|=
operator|new
name|SLSWebApp
argument_list|(
name|this
argument_list|,
name|metricsWebAddressPort
argument_list|)
expr_stmt|;
name|web
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// a thread to update histogram timer
name|pool
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|pool
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|HistogramsRunnable
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// a thread to output metrics for real-tiem tracking
name|pool
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|MetricsLogRunnable
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// application running information
name|jobRuntimeLogBW
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|metricsOutputDir
operator|+
literal|"/jobruntime.csv"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|jobRuntimeLogBW
operator|.
name|write
argument_list|(
literal|"JobID,real_start_time,real_end_time,"
operator|+
literal|"simulate_start_time,simulate_end_time"
operator|+
name|EOL
argument_list|)
expr_stmt|;
name|jobRuntimeLogBW
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|registerJvmMetrics ()
specifier|private
name|void
name|registerJvmMetrics
parameter_list|()
block|{
comment|// add JVM gauges
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.jvm.free.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.jvm.max.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.jvm.total.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|registerClusterResourceMetrics ()
specifier|private
name|void
name|registerClusterResourceMetrics
parameter_list|()
block|{
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.cluster.allocated.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0L
return|;
block|}
else|else
block|{
return|return
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.cluster.allocated.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedVirtualCores
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.cluster.available.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0L
return|;
block|}
else|else
block|{
return|return
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.cluster.available.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.cluster.reserved.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0L
return|;
block|}
else|else
block|{
return|return
name|getRootQueueMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.cluster.reserved.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|getRootQueueMetrics
argument_list|()
operator|.
name|getReservedVirtualCores
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|registerContainerAppNumMetrics ()
specifier|private
name|void
name|registerContainerAppNumMetrics
parameter_list|()
block|{
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.running.application"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAppsRunning
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.running.container"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedContainers
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|registerSchedulerMetrics ()
specifier|private
name|void
name|registerSchedulerMetrics
parameter_list|()
block|{
name|samplerLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// counters for scheduler operations
name|schedulerAllocateCounter
operator|=
name|metrics
operator|.
name|counter
argument_list|(
literal|"counter.scheduler.operation.allocate"
argument_list|)
expr_stmt|;
name|schedulerHandleCounter
operator|=
name|metrics
operator|.
name|counter
argument_list|(
literal|"counter.scheduler.operation.handle"
argument_list|)
expr_stmt|;
name|schedulerHandleCounterMap
operator|=
operator|new
name|HashMap
argument_list|<
name|SchedulerEventType
argument_list|,
name|Counter
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|SchedulerEventType
name|e
range|:
name|SchedulerEventType
operator|.
name|values
argument_list|()
control|)
block|{
name|Counter
name|counter
init|=
name|metrics
operator|.
name|counter
argument_list|(
literal|"counter.scheduler.operation.handle."
operator|+
name|e
argument_list|)
decl_stmt|;
name|schedulerHandleCounterMap
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
comment|// timers for scheduler operations
name|int
name|timeWindowSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|METRICS_TIMER_WINDOW_SIZE
argument_list|,
name|SLSConfiguration
operator|.
name|METRICS_TIMER_WINDOW_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|schedulerAllocateTimer
operator|=
operator|new
name|Timer
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|timeWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|schedulerHandleTimer
operator|=
operator|new
name|Timer
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|timeWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|schedulerHandleTimerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|SchedulerEventType
argument_list|,
name|Timer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|SchedulerEventType
name|e
range|:
name|SchedulerEventType
operator|.
name|values
argument_list|()
control|)
block|{
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|timeWindowSize
argument_list|)
argument_list|)
decl_stmt|;
name|schedulerHandleTimerMap
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|timer
argument_list|)
expr_stmt|;
block|}
comment|// histogram for scheduler operations (Samplers)
name|schedulerHistogramList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Histogram
argument_list|>
argument_list|()
expr_stmt|;
name|histogramTimerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Histogram
argument_list|,
name|Timer
argument_list|>
argument_list|()
expr_stmt|;
name|Histogram
name|schedulerAllocateHistogram
init|=
operator|new
name|Histogram
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|SAMPLING_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"sampler.scheduler.operation.allocate.timecost"
argument_list|,
name|schedulerAllocateHistogram
argument_list|)
expr_stmt|;
name|schedulerHistogramList
operator|.
name|add
argument_list|(
name|schedulerAllocateHistogram
argument_list|)
expr_stmt|;
name|histogramTimerMap
operator|.
name|put
argument_list|(
name|schedulerAllocateHistogram
argument_list|,
name|schedulerAllocateTimer
argument_list|)
expr_stmt|;
name|Histogram
name|schedulerHandleHistogram
init|=
operator|new
name|Histogram
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|SAMPLING_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"sampler.scheduler.operation.handle.timecost"
argument_list|,
name|schedulerHandleHistogram
argument_list|)
expr_stmt|;
name|schedulerHistogramList
operator|.
name|add
argument_list|(
name|schedulerHandleHistogram
argument_list|)
expr_stmt|;
name|histogramTimerMap
operator|.
name|put
argument_list|(
name|schedulerHandleHistogram
argument_list|,
name|schedulerHandleTimer
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulerEventType
name|e
range|:
name|SchedulerEventType
operator|.
name|values
argument_list|()
control|)
block|{
name|Histogram
name|histogram
init|=
operator|new
name|Histogram
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|SAMPLING_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"sampler.scheduler.operation.handle."
operator|+
name|e
operator|+
literal|".timecost"
argument_list|,
name|histogram
argument_list|)
expr_stmt|;
name|schedulerHistogramList
operator|.
name|add
argument_list|(
name|histogram
argument_list|)
expr_stmt|;
name|histogramTimerMap
operator|.
name|put
argument_list|(
name|histogram
argument_list|,
name|schedulerHandleTimerMap
operator|.
name|get
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|samplerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|initMetricsCSVOutput ()
specifier|private
name|void
name|initMetricsCSVOutput
parameter_list|()
block|{
name|int
name|timeIntervalMS
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|METRICS_RECORD_INTERVAL_MS
argument_list|,
name|SLSConfiguration
operator|.
name|METRICS_RECORD_INTERVAL_MS_DEFAULT
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|metricsOutputDir
operator|+
literal|"/metrics"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot create directory "
operator|+
name|dir
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CsvReporter
name|reporter
init|=
name|CsvReporter
operator|.
name|forRegistry
argument_list|(
name|metrics
argument_list|)
operator|.
name|formatFor
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|convertRatesTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|convertDurationsTo
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|File
argument_list|(
name|metricsOutputDir
operator|+
literal|"/metrics"
argument_list|)
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|start
argument_list|(
name|timeIntervalMS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|class|HistogramsRunnable
class|class
name|HistogramsRunnable
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|samplerLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Histogram
name|histogram
range|:
name|schedulerHistogramList
control|)
block|{
name|Timer
name|timer
init|=
name|histogramTimerMap
operator|.
name|get
argument_list|(
name|histogram
argument_list|)
decl_stmt|;
name|histogram
operator|.
name|update
argument_list|(
operator|(
name|int
operator|)
name|timer
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|samplerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|MetricsLogRunnable
class|class
name|MetricsLogRunnable
implements|implements
name|Runnable
block|{
DECL|field|firstLine
specifier|private
name|boolean
name|firstLine
init|=
literal|true
decl_stmt|;
DECL|method|MetricsLogRunnable ()
specifier|public
name|MetricsLogRunnable
parameter_list|()
block|{
try|try
block|{
name|metricsLogBW
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|metricsOutputDir
operator|+
literal|"/realtimetrack.json"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|metricsLogBW
operator|.
name|write
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|running
condition|)
block|{
comment|// all WebApp to get real tracking json
name|String
name|metrics
init|=
name|web
operator|.
name|generateRealTimeTrackingMetrics
argument_list|()
decl_stmt|;
comment|// output
try|try
block|{
if|if
condition|(
name|firstLine
condition|)
block|{
name|metricsLogBW
operator|.
name|write
argument_list|(
name|metrics
operator|+
name|EOL
argument_list|)
expr_stmt|;
name|firstLine
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|metricsLogBW
operator|.
name|write
argument_list|(
literal|","
operator|+
name|metrics
operator|+
name|EOL
argument_list|)
expr_stmt|;
block|}
name|metricsLogBW
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// the following functions are used by AMSimulator
DECL|method|addAMRuntime (ApplicationId appId, long traceStartTimeMS, long traceEndTimeMS, long simulateStartTimeMS, long simulateEndTimeMS)
specifier|public
name|void
name|addAMRuntime
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|long
name|traceStartTimeMS
parameter_list|,
name|long
name|traceEndTimeMS
parameter_list|,
name|long
name|simulateStartTimeMS
parameter_list|,
name|long
name|simulateEndTimeMS
parameter_list|)
block|{
if|if
condition|(
name|metricsON
condition|)
block|{
try|try
block|{
comment|// write job runtime information
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|appId
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|traceStartTimeMS
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|traceEndTimeMS
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|simulateStartTimeMS
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|simulateEndTimeMS
argument_list|)
expr_stmt|;
name|jobRuntimeLogBW
operator|.
name|write
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|+
name|EOL
argument_list|)
expr_stmt|;
name|jobRuntimeLogBW
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateQueueMetrics (String queue, long releasedMemory, int releasedVCores)
specifier|private
name|void
name|updateQueueMetrics
parameter_list|(
name|String
name|queue
parameter_list|,
name|long
name|releasedMemory
parameter_list|,
name|int
name|releasedVCores
parameter_list|)
block|{
comment|// update queue counters
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|counterMap
init|=
name|metrics
operator|.
name|getCounters
argument_list|()
decl_stmt|;
if|if
condition|(
name|releasedMemory
operator|!=
literal|0
condition|)
block|{
name|String
name|name
init|=
literal|"counter.queue."
operator|+
name|queue
operator|+
literal|".allocated.memory"
decl_stmt|;
if|if
condition|(
operator|!
name|counterMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|counter
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|counterMap
operator|=
name|metrics
operator|.
name|getCounters
argument_list|()
expr_stmt|;
block|}
name|counterMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|inc
argument_list|(
operator|-
name|releasedMemory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|releasedVCores
operator|!=
literal|0
condition|)
block|{
name|String
name|name
init|=
literal|"counter.queue."
operator|+
name|queue
operator|+
literal|".allocated.cores"
decl_stmt|;
if|if
condition|(
operator|!
name|counterMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|counter
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|counterMap
operator|=
name|metrics
operator|.
name|getCounters
argument_list|()
expr_stmt|;
block|}
name|counterMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|inc
argument_list|(
operator|-
name|releasedVCores
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initQueueMetrics (CSQueue queue)
specifier|private
name|void
name|initQueueMetrics
parameter_list|(
name|CSQueue
name|queue
parameter_list|)
block|{
if|if
condition|(
name|queue
operator|instanceof
name|LeafQueue
condition|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|counterMap
init|=
name|metrics
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|String
name|queueName
init|=
name|queue
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[]
block|{
name|QUEUE_COUNTER_PREFIX
operator|+
name|queueName
operator|+
literal|".pending.memory"
block|,
name|QUEUE_COUNTER_PREFIX
operator|+
name|queueName
operator|+
literal|".pending.cores"
block|,
name|QUEUE_COUNTER_PREFIX
operator|+
name|queueName
operator|+
literal|".allocated.memory"
block|,
name|QUEUE_COUNTER_PREFIX
operator|+
name|queueName
operator|+
literal|".allocated.cores"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|names
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
operator|!
name|counterMap
operator|.
name|containsKey
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|counter
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|counterMap
operator|=
name|metrics
operator|.
name|getCounters
argument_list|()
expr_stmt|;
block|}
block|}
name|queueLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|schedulerMetrics
operator|.
name|isTracked
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
name|schedulerMetrics
operator|.
name|trackQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|queueLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
for|for
control|(
name|CSQueue
name|child
range|:
name|queue
operator|.
name|getChildQueues
argument_list|()
control|)
block|{
name|initQueueMetrics
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration configuration)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|initQueueMetrics
argument_list|(
name|getRootQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setQueueSet (Set<String> queues)
specifier|public
name|void
name|setQueueSet
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queues
parameter_list|)
block|{
name|this
operator|.
name|queueSet
operator|=
name|queues
expr_stmt|;
block|}
DECL|method|getQueueSet ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getQueueSet
parameter_list|()
block|{
return|return
name|this
operator|.
name|queueSet
return|;
block|}
DECL|method|setTrackedAppSet (Set<String> apps)
specifier|public
name|void
name|setTrackedAppSet
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|apps
parameter_list|)
block|{
name|this
operator|.
name|trackedAppSet
operator|=
name|apps
expr_stmt|;
block|}
DECL|method|getTrackedAppSet ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTrackedAppSet
parameter_list|()
block|{
return|return
name|this
operator|.
name|trackedAppSet
return|;
block|}
DECL|method|getMetrics ()
specifier|public
name|MetricRegistry
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
DECL|method|getSchedulerMetrics ()
specifier|public
name|SchedulerMetrics
name|getSchedulerMetrics
parameter_list|()
block|{
return|return
name|schedulerMetrics
return|;
block|}
comment|// API open to out classes
DECL|method|addTrackedApp (ApplicationId appId, String oldAppId)
specifier|public
name|void
name|addTrackedApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|oldAppId
parameter_list|)
block|{
if|if
condition|(
name|metricsON
condition|)
block|{
name|schedulerMetrics
operator|.
name|trackApp
argument_list|(
name|appId
argument_list|,
name|oldAppId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeTrackedApp (String oldAppId)
specifier|public
name|void
name|removeTrackedApp
parameter_list|(
name|String
name|oldAppId
parameter_list|)
block|{
if|if
condition|(
name|metricsON
condition|)
block|{
name|schedulerMetrics
operator|.
name|untrackApp
argument_list|(
name|oldAppId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

