begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TaskRunner
specifier|public
class|class
name|TaskRunner
block|{
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|Task
specifier|public
specifier|abstract
specifier|static
class|class
name|Task
implements|implements
name|Runnable
implements|,
name|Delayed
block|{
DECL|field|start
specifier|private
name|long
name|start
decl_stmt|;
DECL|field|end
specifier|private
name|long
name|end
decl_stmt|;
DECL|field|nextRun
specifier|private
name|long
name|nextRun
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
DECL|field|repeatInterval
specifier|private
name|long
name|repeatInterval
decl_stmt|;
DECL|field|queue
specifier|private
name|Queue
argument_list|<
name|Task
argument_list|>
name|queue
decl_stmt|;
DECL|method|Task ()
specifier|public
name|Task
parameter_list|()
block|{}
comment|//values in milliseconds, start/end are milliseconds from now
DECL|method|init (long startTime, long endTime, long repeatInterval)
specifier|public
name|void
name|init
parameter_list|(
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|long
name|repeatInterval
parameter_list|)
block|{
if|if
condition|(
name|endTime
operator|-
name|startTime
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"endTime[{0}] cannot be smaller than startTime[{1}]"
argument_list|,
name|endTime
argument_list|,
name|startTime
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|repeatInterval
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"repeatInterval[{0}] cannot be less than 1"
argument_list|,
name|repeatInterval
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|%
name|repeatInterval
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Invalid parameters: (endTime[{0}] - startTime[{1}]) "
operator|+
literal|"% repeatInterval[{2}] != 0"
argument_list|,
name|endTime
argument_list|,
name|startTime
argument_list|,
name|repeatInterval
argument_list|)
argument_list|)
throw|;
block|}
name|start
operator|=
name|startTime
expr_stmt|;
name|end
operator|=
name|endTime
expr_stmt|;
name|this
operator|.
name|repeatInterval
operator|=
name|repeatInterval
expr_stmt|;
block|}
DECL|method|timeRebase (long now)
specifier|private
name|void
name|timeRebase
parameter_list|(
name|long
name|now
parameter_list|)
block|{
name|startTime
operator|=
name|now
operator|+
name|start
expr_stmt|;
name|endTime
operator|=
name|now
operator|+
name|end
expr_stmt|;
name|this
operator|.
name|nextRun
operator|=
name|startTime
expr_stmt|;
block|}
comment|//values in milliseconds, start is milliseconds from now
comment|//it only executes firstStep()
DECL|method|init (long startTime)
specifier|public
name|void
name|init
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|init
argument_list|(
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|setQueue (Queue<Task> queue)
specifier|private
name|void
name|setQueue
parameter_list|(
name|Queue
argument_list|<
name|Task
argument_list|>
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
specifier|final
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|nextRun
operator|==
name|startTime
condition|)
block|{
name|firstStep
argument_list|()
expr_stmt|;
name|nextRun
operator|+=
name|repeatInterval
expr_stmt|;
if|if
condition|(
name|nextRun
operator|<=
name|endTime
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|nextRun
operator|<
name|endTime
condition|)
block|{
name|middleStep
argument_list|()
expr_stmt|;
name|nextRun
operator|+=
name|repeatInterval
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastStep
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|getDefaultUncaughtExceptionHandler
argument_list|()
operator|.
name|uncaughtException
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDelay (TimeUnit unit)
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|nextRun
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Delayed o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Task
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter must be a Task instance"
argument_list|)
throw|;
block|}
name|Task
name|other
init|=
operator|(
name|Task
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|signum
argument_list|(
name|nextRun
operator|-
name|other
operator|.
name|nextRun
argument_list|)
return|;
block|}
DECL|method|firstStep ()
specifier|public
specifier|abstract
name|void
name|firstStep
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|middleStep ()
specifier|public
specifier|abstract
name|void
name|middleStep
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|lastStep ()
specifier|public
specifier|abstract
name|void
name|lastStep
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|setEndTime (long et)
specifier|public
name|void
name|setEndTime
parameter_list|(
name|long
name|et
parameter_list|)
block|{
name|endTime
operator|=
name|et
expr_stmt|;
block|}
block|}
DECL|field|queue
specifier|private
name|DelayQueue
name|queue
decl_stmt|;
DECL|field|threadPoolSize
specifier|private
name|int
name|threadPoolSize
decl_stmt|;
DECL|field|executor
specifier|private
name|ThreadPoolExecutor
name|executor
decl_stmt|;
DECL|field|startTimeMS
specifier|private
name|long
name|startTimeMS
init|=
literal|0
decl_stmt|;
DECL|method|TaskRunner ()
specifier|public
name|TaskRunner
parameter_list|()
block|{
name|queue
operator|=
operator|new
name|DelayQueue
argument_list|()
expr_stmt|;
block|}
DECL|method|setQueueSize (int threadPoolSize)
specifier|public
name|void
name|setQueueSize
parameter_list|(
name|int
name|threadPoolSize
parameter_list|)
block|{
name|this
operator|.
name|threadPoolSize
operator|=
name|threadPoolSize
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Already started"
argument_list|)
throw|;
block|}
name|DelayQueue
name|preStartQueue
init|=
name|queue
decl_stmt|;
name|queue
operator|=
operator|new
name|DelayQueue
argument_list|()
expr_stmt|;
name|executor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|threadPoolSize
argument_list|,
name|threadPoolSize
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|executor
operator|.
name|prestartAllCoreThreads
argument_list|()
expr_stmt|;
name|startTimeMS
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|d
range|:
name|preStartQueue
control|)
block|{
name|schedule
argument_list|(
operator|(
name|Task
operator|)
name|d
argument_list|,
name|startTimeMS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|schedule (Task task, long timeNow)
specifier|private
name|void
name|schedule
parameter_list|(
name|Task
name|task
parameter_list|,
name|long
name|timeNow
parameter_list|)
block|{
name|task
operator|.
name|timeRebase
argument_list|(
name|timeNow
argument_list|)
expr_stmt|;
name|task
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
DECL|method|schedule (Task task)
specifier|public
name|void
name|schedule
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
name|schedule
argument_list|(
name|task
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getStartTimeMS ()
specifier|public
name|long
name|getStartTimeMS
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTimeMS
return|;
block|}
block|}
end_class

end_unit

