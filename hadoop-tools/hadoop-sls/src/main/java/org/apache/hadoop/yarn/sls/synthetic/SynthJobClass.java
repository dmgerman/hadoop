begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.synthetic
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|distribution
operator|.
name|AbstractRealDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|distribution
operator|.
name|LogNormalDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|random
operator|.
name|JDKRandomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
operator|.
name|SynthTraceJobProducer
operator|.
name|JobClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
operator|.
name|SynthTraceJobProducer
operator|.
name|Trace
import|;
end_import

begin_comment
comment|/**  * This is a class that represent a class of Jobs. It is used to generate an  * individual job, by picking random durations, task counts, container size,  * etc.  */
end_comment

begin_class
DECL|class|SynthJobClass
specifier|public
class|class
name|SynthJobClass
block|{
DECL|field|rand
specifier|private
specifier|final
name|JDKRandomGenerator
name|rand
decl_stmt|;
DECL|field|dur
specifier|private
specifier|final
name|LogNormalDistribution
name|dur
decl_stmt|;
DECL|field|mapRuntime
specifier|private
specifier|final
name|LogNormalDistribution
name|mapRuntime
decl_stmt|;
DECL|field|redRuntime
specifier|private
specifier|final
name|LogNormalDistribution
name|redRuntime
decl_stmt|;
DECL|field|mtasks
specifier|private
specifier|final
name|LogNormalDistribution
name|mtasks
decl_stmt|;
DECL|field|rtasks
specifier|private
specifier|final
name|LogNormalDistribution
name|rtasks
decl_stmt|;
DECL|field|mapMem
specifier|private
specifier|final
name|LogNormalDistribution
name|mapMem
decl_stmt|;
DECL|field|redMem
specifier|private
specifier|final
name|LogNormalDistribution
name|redMem
decl_stmt|;
DECL|field|mapVcores
specifier|private
specifier|final
name|LogNormalDistribution
name|mapVcores
decl_stmt|;
DECL|field|redVcores
specifier|private
specifier|final
name|LogNormalDistribution
name|redVcores
decl_stmt|;
DECL|field|trace
specifier|private
specifier|final
name|Trace
name|trace
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"VisibilityModifier"
argument_list|)
DECL|field|workload
specifier|protected
specifier|final
name|SynthWorkload
name|workload
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"VisibilityModifier"
argument_list|)
DECL|field|jobClass
specifier|protected
specifier|final
name|JobClass
name|jobClass
decl_stmt|;
DECL|method|SynthJobClass (JDKRandomGenerator rand, Trace trace, SynthWorkload workload, int classId)
specifier|public
name|SynthJobClass
parameter_list|(
name|JDKRandomGenerator
name|rand
parameter_list|,
name|Trace
name|trace
parameter_list|,
name|SynthWorkload
name|workload
parameter_list|,
name|int
name|classId
parameter_list|)
block|{
name|this
operator|.
name|trace
operator|=
name|trace
expr_stmt|;
name|this
operator|.
name|workload
operator|=
name|workload
expr_stmt|;
name|this
operator|.
name|rand
operator|=
operator|new
name|JDKRandomGenerator
argument_list|()
expr_stmt|;
name|this
operator|.
name|rand
operator|.
name|setSeed
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|jobClass
operator|=
name|trace
operator|.
name|workloads
operator|.
name|get
argument_list|(
name|workload
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|job_classes
operator|.
name|get
argument_list|(
name|classId
argument_list|)
expr_stmt|;
name|this
operator|.
name|dur
operator|=
name|SynthUtils
operator|.
name|getLogNormalDist
argument_list|(
name|rand
argument_list|,
name|jobClass
operator|.
name|dur_avg
argument_list|,
name|jobClass
operator|.
name|dur_stddev
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapRuntime
operator|=
name|SynthUtils
operator|.
name|getLogNormalDist
argument_list|(
name|rand
argument_list|,
name|jobClass
operator|.
name|mtime_avg
argument_list|,
name|jobClass
operator|.
name|mtime_stddev
argument_list|)
expr_stmt|;
name|this
operator|.
name|redRuntime
operator|=
name|SynthUtils
operator|.
name|getLogNormalDist
argument_list|(
name|rand
argument_list|,
name|jobClass
operator|.
name|rtime_avg
argument_list|,
name|jobClass
operator|.
name|rtime_stddev
argument_list|)
expr_stmt|;
name|this
operator|.
name|mtasks
operator|=
name|SynthUtils
operator|.
name|getLogNormalDist
argument_list|(
name|rand
argument_list|,
name|jobClass
operator|.
name|mtasks_avg
argument_list|,
name|jobClass
operator|.
name|mtasks_stddev
argument_list|)
expr_stmt|;
name|this
operator|.
name|rtasks
operator|=
name|SynthUtils
operator|.
name|getLogNormalDist
argument_list|(
name|rand
argument_list|,
name|jobClass
operator|.
name|rtasks_avg
argument_list|,
name|jobClass
operator|.
name|rtasks_stddev
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapMem
operator|=
name|SynthUtils
operator|.
name|getLogNormalDist
argument_list|(
name|rand
argument_list|,
name|jobClass
operator|.
name|map_max_memory_avg
argument_list|,
name|jobClass
operator|.
name|map_max_memory_stddev
argument_list|)
expr_stmt|;
name|this
operator|.
name|redMem
operator|=
name|SynthUtils
operator|.
name|getLogNormalDist
argument_list|(
name|rand
argument_list|,
name|jobClass
operator|.
name|reduce_max_memory_avg
argument_list|,
name|jobClass
operator|.
name|reduce_max_memory_stddev
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapVcores
operator|=
name|SynthUtils
operator|.
name|getLogNormalDist
argument_list|(
name|rand
argument_list|,
name|jobClass
operator|.
name|map_max_vcores_avg
argument_list|,
name|jobClass
operator|.
name|map_max_vcores_stddev
argument_list|)
expr_stmt|;
name|this
operator|.
name|redVcores
operator|=
name|SynthUtils
operator|.
name|getLogNormalDist
argument_list|(
name|rand
argument_list|,
name|jobClass
operator|.
name|reduce_max_vcores_avg
argument_list|,
name|jobClass
operator|.
name|reduce_max_vcores_stddev
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobStory (Configuration conf, long actualSubmissionTime)
specifier|public
name|JobStory
name|getJobStory
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|actualSubmissionTime
parameter_list|)
block|{
return|return
operator|new
name|SynthJob
argument_list|(
name|rand
argument_list|,
name|conf
argument_list|,
name|this
argument_list|,
name|actualSubmissionTime
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SynthJobClass [workload="
operator|+
name|workload
operator|.
name|getName
argument_list|()
operator|+
literal|", class="
operator|+
name|jobClass
operator|.
name|class_name
operator|+
literal|" job_count="
operator|+
name|jobClass
operator|.
name|class_weight
operator|+
literal|", dur="
operator|+
operator|(
operator|(
name|dur
operator|!=
literal|null
operator|)
condition|?
name|dur
operator|.
name|getNumericalMean
argument_list|()
else|:
literal|0
operator|)
operator|+
literal|", mapRuntime="
operator|+
operator|(
operator|(
name|mapRuntime
operator|!=
literal|null
operator|)
condition|?
name|mapRuntime
operator|.
name|getNumericalMean
argument_list|()
else|:
literal|0
operator|)
operator|+
literal|", redRuntime="
operator|+
operator|(
operator|(
name|redRuntime
operator|!=
literal|null
operator|)
condition|?
name|redRuntime
operator|.
name|getNumericalMean
argument_list|()
else|:
literal|0
operator|)
operator|+
literal|", mtasks="
operator|+
operator|(
operator|(
name|mtasks
operator|!=
literal|null
operator|)
condition|?
name|mtasks
operator|.
name|getNumericalMean
argument_list|()
else|:
literal|0
operator|)
operator|+
literal|", rtasks="
operator|+
operator|(
operator|(
name|rtasks
operator|!=
literal|null
operator|)
condition|?
name|rtasks
operator|.
name|getNumericalMean
argument_list|()
else|:
literal|0
operator|)
operator|+
literal|", chance_of_reservation="
operator|+
name|jobClass
operator|.
name|chance_of_reservation
operator|+
literal|"]\n"
return|;
block|}
DECL|method|getClassWeight ()
specifier|public
name|double
name|getClassWeight
parameter_list|()
block|{
return|return
name|jobClass
operator|.
name|class_weight
return|;
block|}
DECL|method|getDur ()
specifier|public
name|long
name|getDur
parameter_list|()
block|{
return|return
name|genLongSample
argument_list|(
name|dur
argument_list|)
return|;
block|}
DECL|method|getMtasks ()
specifier|public
name|int
name|getMtasks
parameter_list|()
block|{
return|return
name|genIntSample
argument_list|(
name|mtasks
argument_list|)
return|;
block|}
DECL|method|getRtasks ()
specifier|public
name|int
name|getRtasks
parameter_list|()
block|{
return|return
name|genIntSample
argument_list|(
name|rtasks
argument_list|)
return|;
block|}
DECL|method|getMapMaxMemory ()
specifier|public
name|long
name|getMapMaxMemory
parameter_list|()
block|{
return|return
name|genLongSample
argument_list|(
name|mapMem
argument_list|)
return|;
block|}
DECL|method|getReduceMaxMemory ()
specifier|public
name|long
name|getReduceMaxMemory
parameter_list|()
block|{
return|return
name|genLongSample
argument_list|(
name|redMem
argument_list|)
return|;
block|}
DECL|method|getMapMaxVcores ()
specifier|public
name|long
name|getMapMaxVcores
parameter_list|()
block|{
return|return
name|genLongSample
argument_list|(
name|mapVcores
argument_list|)
return|;
block|}
DECL|method|getReduceMaxVcores ()
specifier|public
name|long
name|getReduceMaxVcores
parameter_list|()
block|{
return|return
name|genLongSample
argument_list|(
name|redVcores
argument_list|)
return|;
block|}
DECL|method|getWorkload ()
specifier|public
name|SynthWorkload
name|getWorkload
parameter_list|()
block|{
return|return
name|workload
return|;
block|}
DECL|method|genIntSample (AbstractRealDistribution dist)
specifier|public
name|int
name|genIntSample
parameter_list|(
name|AbstractRealDistribution
name|dist
parameter_list|)
block|{
if|if
condition|(
name|dist
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|double
name|baseSample
init|=
name|dist
operator|.
name|sample
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseSample
operator|<
literal|0
condition|)
block|{
name|baseSample
operator|=
literal|0
expr_stmt|;
block|}
return|return
call|(
name|int
call|)
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|&
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|baseSample
argument_list|)
argument_list|)
return|;
block|}
DECL|method|genLongSample (AbstractRealDistribution dist)
specifier|public
name|long
name|genLongSample
parameter_list|(
name|AbstractRealDistribution
name|dist
parameter_list|)
block|{
return|return
name|dist
operator|!=
literal|null
condition|?
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|dist
operator|.
name|sample
argument_list|()
argument_list|)
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|SynthJobClass
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SynthJobClass
name|o
init|=
operator|(
name|SynthJobClass
operator|)
name|other
decl_stmt|;
return|return
name|workload
operator|.
name|equals
argument_list|(
name|o
operator|.
name|workload
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|workload
operator|.
name|hashCode
argument_list|()
operator|*
name|workload
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|getClassName ()
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|jobClass
operator|.
name|class_name
return|;
block|}
DECL|method|getMapTimeSample ()
specifier|public
name|long
name|getMapTimeSample
parameter_list|()
block|{
return|return
name|genLongSample
argument_list|(
name|mapRuntime
argument_list|)
return|;
block|}
DECL|method|getReduceTimeSample ()
specifier|public
name|long
name|getReduceTimeSample
parameter_list|()
block|{
return|return
name|genLongSample
argument_list|(
name|redRuntime
argument_list|)
return|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|jobClass
operator|.
name|user_name
return|;
block|}
block|}
end_class

end_unit

