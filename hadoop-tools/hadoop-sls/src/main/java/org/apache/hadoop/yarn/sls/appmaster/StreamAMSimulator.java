begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.appmaster
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|appmaster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|SLSRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
operator|.
name|ContainerSimulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * AMSimulator that simulates streaming services - it keeps tasks  * running and resubmits them whenever they fail or complete. It finishes  * when the specified duration expires.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|StreamAMSimulator
specifier|public
class|class
name|StreamAMSimulator
extends|extends
name|AMSimulator
block|{
comment|/*   Vocabulary Used:   pending -> requests which are NOT yet sent to RM   scheduled -> requests which are sent to RM but not yet assigned   assigned -> requests which are assigned to a container   completed -> request corresponding to which container has completed    streams are constantly scheduled. If a streaming job is killed, we restart it   */
DECL|field|PRIORITY_MAP
specifier|private
specifier|static
specifier|final
name|int
name|PRIORITY_MAP
init|=
literal|20
decl_stmt|;
comment|// pending streams
DECL|field|pendingStreams
specifier|private
name|LinkedList
argument_list|<
name|ContainerSimulator
argument_list|>
name|pendingStreams
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// scheduled streams
DECL|field|scheduledStreams
specifier|private
name|LinkedList
argument_list|<
name|ContainerSimulator
argument_list|>
name|scheduledStreams
init|=
operator|new
name|LinkedList
argument_list|<
name|ContainerSimulator
argument_list|>
argument_list|()
decl_stmt|;
comment|// assigned streams
DECL|field|assignedStreams
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerSimulator
argument_list|>
name|assignedStreams
init|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerSimulator
argument_list|>
argument_list|()
decl_stmt|;
comment|// all streams
DECL|field|allStreams
specifier|private
name|LinkedList
argument_list|<
name|ContainerSimulator
argument_list|>
name|allStreams
init|=
operator|new
name|LinkedList
argument_list|<
name|ContainerSimulator
argument_list|>
argument_list|()
decl_stmt|;
comment|// finished
DECL|field|isFinished
specifier|private
name|boolean
name|isFinished
init|=
literal|false
decl_stmt|;
DECL|field|duration
specifier|private
name|long
name|duration
init|=
literal|0
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StreamAMSimulator
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:parameternumber"
argument_list|)
DECL|method|init (int heartbeatInterval, List<ContainerSimulator> containerList, ResourceManager rm, SLSRunner se, long traceStartTime, long traceFinishTime, String user, String queue, boolean isTracked, String oldAppId, long baselineStartTimeMS, Resource amContainerResource, String nodeLabelExpr, Map<String, String> params)
specifier|public
name|void
name|init
parameter_list|(
name|int
name|heartbeatInterval
parameter_list|,
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|containerList
parameter_list|,
name|ResourceManager
name|rm
parameter_list|,
name|SLSRunner
name|se
parameter_list|,
name|long
name|traceStartTime
parameter_list|,
name|long
name|traceFinishTime
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|queue
parameter_list|,
name|boolean
name|isTracked
parameter_list|,
name|String
name|oldAppId
parameter_list|,
name|long
name|baselineStartTimeMS
parameter_list|,
name|Resource
name|amContainerResource
parameter_list|,
name|String
name|nodeLabelExpr
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|heartbeatInterval
argument_list|,
name|containerList
argument_list|,
name|rm
argument_list|,
name|se
argument_list|,
name|traceStartTime
argument_list|,
name|traceFinishTime
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|isTracked
argument_list|,
name|oldAppId
argument_list|,
name|baselineStartTimeMS
argument_list|,
name|amContainerResource
argument_list|,
name|nodeLabelExpr
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|amtype
operator|=
literal|"stream"
expr_stmt|;
name|allStreams
operator|.
name|addAll
argument_list|(
name|containerList
argument_list|)
expr_stmt|;
name|duration
operator|=
name|traceFinishTime
operator|-
name|traceStartTime
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added new job with {} streams, running for {}"
argument_list|,
name|allStreams
operator|.
name|size
argument_list|()
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifyAMContainerLaunched (Container masterContainer)
specifier|public
specifier|synchronized
name|void
name|notifyAMContainerLaunched
parameter_list|(
name|Container
name|masterContainer
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|!=
name|masterContainer
condition|)
block|{
name|restart
argument_list|()
expr_stmt|;
name|super
operator|.
name|notifyAMContainerLaunched
argument_list|(
name|masterContainer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processResponseQueue ()
specifier|protected
name|void
name|processResponseQueue
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
operator|!
name|responseQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AllocateResponse
name|response
init|=
name|responseQueue
operator|.
name|take
argument_list|()
decl_stmt|;
comment|// check completed containers
if|if
condition|(
operator|!
name|response
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ContainerStatus
name|cs
range|:
name|response
operator|.
name|getCompletedContainersStatuses
argument_list|()
control|)
block|{
name|ContainerId
name|containerId
init|=
name|cs
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignedStreams
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
comment|// One of our containers completed. Regardless of reason,
comment|// we want to maintain our streaming process
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application {} has one streamer finished ({})."
argument_list|,
name|appId
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|pendingStreams
operator|.
name|add
argument_list|(
name|assignedStreams
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|amContainer
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
comment|// Our am container completed
if|if
condition|(
name|cs
operator|.
name|getExitStatus
argument_list|()
operator|==
name|ContainerExitStatus
operator|.
name|SUCCESS
condition|)
block|{
comment|// am container released event (am container completed on success)
name|isAMContainerRunning
operator|=
literal|false
expr_stmt|;
name|isFinished
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application {} goes to finish."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// am container killed - wait for re allocation
name|LOG
operator|.
name|info
argument_list|(
literal|"Application {}'s AM is "
operator|+
literal|"going to be killed. Waiting for rescheduling..."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|isAMContainerRunning
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// check finished
if|if
condition|(
name|isAMContainerRunning
operator|&&
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|simulateStartTimeMS
operator|>=
name|duration
operator|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application {} sends out event to clean up"
operator|+
literal|" its AM container."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|isAMContainerRunning
operator|=
literal|false
expr_stmt|;
name|isFinished
operator|=
literal|true
expr_stmt|;
break|break;
block|}
comment|// check allocated containers
for|for
control|(
name|Container
name|container
range|:
name|response
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|scheduledStreams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ContainerSimulator
name|cs
init|=
name|scheduledStreams
operator|.
name|remove
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application {} starts to launch a stream ({})."
argument_list|,
name|appId
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assignedStreams
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|se
operator|.
name|getNmMap
argument_list|()
operator|.
name|get
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|addNewContainer
argument_list|(
name|container
argument_list|,
name|cs
operator|.
name|getLifeTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * restart running because of the am container killed.    */
DECL|method|restart ()
specifier|private
name|void
name|restart
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
comment|// clear
name|isFinished
operator|=
literal|false
expr_stmt|;
name|pendingStreams
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pendingStreams
operator|.
name|addAll
argument_list|(
name|allStreams
argument_list|)
expr_stmt|;
name|amContainer
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|mergeLists (List<ContainerSimulator> left, List<ContainerSimulator> right)
specifier|private
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|mergeLists
parameter_list|(
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|left
parameter_list|,
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|right
parameter_list|)
block|{
name|List
argument_list|<
name|ContainerSimulator
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
DECL|method|sendContainerRequest ()
specifier|protected
name|void
name|sendContainerRequest
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
comment|// send out request
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isFinished
condition|)
block|{
if|if
condition|(
operator|!
name|pendingStreams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ask
operator|=
name|packageRequests
argument_list|(
name|mergeLists
argument_list|(
name|pendingStreams
argument_list|,
name|scheduledStreams
argument_list|)
argument_list|,
name|PRIORITY_MAP
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application {} sends out request for {} streams."
argument_list|,
name|appId
argument_list|,
name|pendingStreams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduledStreams
operator|.
name|addAll
argument_list|(
name|pendingStreams
argument_list|)
expr_stmt|;
name|pendingStreams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isFinished
condition|)
block|{
name|release
operator|.
name|addAll
argument_list|(
name|assignedStreams
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|ask
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|final
name|AllocateRequest
name|request
init|=
name|createAllocateRequest
argument_list|(
name|ask
argument_list|,
name|release
argument_list|)
decl_stmt|;
if|if
condition|(
name|totalContainers
operator|==
literal|0
condition|)
block|{
name|request
operator|.
name|setProgress
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|setProgress
argument_list|(
operator|(
name|float
operator|)
name|finishedContainers
operator|/
name|totalContainers
argument_list|)
expr_stmt|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
name|token
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|AllocateResponse
name|response
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|AllocateResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AllocateResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|responseQueue
operator|.
name|put
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|initReservation ( ReservationId reservationId, long deadline, long now)
specifier|public
name|void
name|initReservation
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|long
name|deadline
parameter_list|,
name|long
name|now
parameter_list|)
block|{
comment|// Streaming AM currently doesn't do reservations
name|setReservationRequest
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkStop ()
specifier|protected
name|void
name|checkStop
parameter_list|()
block|{
if|if
condition|(
name|isFinished
condition|)
block|{
name|super
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|lastStep ()
specifier|public
name|void
name|lastStep
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|lastStep
argument_list|()
expr_stmt|;
comment|// clear data structures
name|allStreams
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assignedStreams
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pendingStreams
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scheduledStreams
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responseQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

