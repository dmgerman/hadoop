begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.synthetic
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|distribution
operator|.
name|AbstractRealDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|random
operator|.
name|JDKRandomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStoryProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|appmaster
operator|.
name|MRAMSimulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParser
operator|.
name|Feature
operator|.
name|INTERN_FIELD_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|DeserializationConfig
operator|.
name|Feature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
import|;
end_import

begin_comment
comment|/**  * This is a JobStoryProducer that operates from distribution of different  * workloads. The .json input file is used to determine how many weight, which  * size, number of maps/reducers and their duration, as well as the temporal  * distributed of submissions. For each parameter we control avg and stdev, and  * generate values via normal or log-normal distributions.  */
end_comment

begin_class
DECL|class|SynthTraceJobProducer
specifier|public
class|class
name|SynthTraceJobProducer
implements|implements
name|JobStoryProducer
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StaticVariableName"
argument_list|)
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SynthTraceJobProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|numJobs
specifier|private
specifier|final
name|AtomicInteger
name|numJobs
decl_stmt|;
DECL|field|trace
specifier|private
specifier|final
name|Trace
name|trace
decl_stmt|;
DECL|field|seed
specifier|private
specifier|final
name|long
name|seed
decl_stmt|;
DECL|field|totalWeight
specifier|private
name|int
name|totalWeight
decl_stmt|;
DECL|field|listStoryParams
specifier|private
specifier|final
name|Queue
argument_list|<
name|StoryParams
argument_list|>
name|listStoryParams
decl_stmt|;
DECL|field|rand
specifier|private
specifier|final
name|JDKRandomGenerator
name|rand
decl_stmt|;
DECL|field|SLS_SYNTHETIC_TRACE_FILE
specifier|public
specifier|static
specifier|final
name|String
name|SLS_SYNTHETIC_TRACE_FILE
init|=
literal|"sls.synthetic"
operator|+
literal|".trace_file"
decl_stmt|;
DECL|field|DEFAULT_MAPPER_PRIORITY
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_MAPPER_PRIORITY
init|=
literal|20
decl_stmt|;
DECL|field|DEFAULT_REDUCER_PRIORITY
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_REDUCER_PRIORITY
init|=
literal|10
decl_stmt|;
DECL|method|SynthTraceJobProducer (Configuration conf)
specifier|public
name|SynthTraceJobProducer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|SLS_SYNTHETIC_TRACE_FILE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|SynthTraceJobProducer (Configuration conf, Path path)
specifier|public
name|SynthTraceJobProducer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SynthTraceJobProducer"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rand
operator|=
operator|new
name|JDKRandomGenerator
argument_list|()
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|INTERN_FIELD_NAMES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|ifs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fileIn
init|=
name|ifs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// Initialize the random generator and the seed
name|this
operator|.
name|trace
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|fileIn
argument_list|,
name|Trace
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|seed
operator|=
name|trace
operator|.
name|rand_seed
expr_stmt|;
name|this
operator|.
name|rand
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
comment|// Initialize the trace
name|this
operator|.
name|trace
operator|.
name|init
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|this
operator|.
name|numJobs
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|trace
operator|.
name|num_jobs
argument_list|)
expr_stmt|;
for|for
control|(
name|Double
name|w
range|:
name|trace
operator|.
name|workload_weights
control|)
block|{
name|totalWeight
operator|+=
name|w
expr_stmt|;
block|}
comment|// Initialize our story parameters
name|listStoryParams
operator|=
name|createStory
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generated "
operator|+
name|listStoryParams
operator|.
name|size
argument_list|()
operator|+
literal|" deadlines for "
operator|+
name|this
operator|.
name|numJobs
operator|.
name|get
argument_list|()
operator|+
literal|" jobs"
argument_list|)
expr_stmt|;
block|}
comment|// StoryParams hold the minimum amount of information needed to completely
comment|// specify a job run: job definition, start time, and queue.
comment|// This allows us to create "jobs" and then order them according to start time
DECL|class|StoryParams
specifier|static
class|class
name|StoryParams
block|{
comment|// Time the job gets submitted to
DECL|field|actualSubmissionTime
specifier|private
name|long
name|actualSubmissionTime
decl_stmt|;
comment|// The queue the job gets submitted to
DECL|field|queue
specifier|private
name|String
name|queue
decl_stmt|;
comment|// Definition to construct the job from
DECL|field|jobDef
specifier|private
name|JobDefinition
name|jobDef
decl_stmt|;
DECL|method|StoryParams (long actualSubmissionTime, String queue, JobDefinition jobDef)
name|StoryParams
parameter_list|(
name|long
name|actualSubmissionTime
parameter_list|,
name|String
name|queue
parameter_list|,
name|JobDefinition
name|jobDef
parameter_list|)
block|{
name|this
operator|.
name|actualSubmissionTime
operator|=
name|actualSubmissionTime
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|jobDef
operator|=
name|jobDef
expr_stmt|;
block|}
block|}
DECL|method|createStory ()
specifier|private
name|Queue
argument_list|<
name|StoryParams
argument_list|>
name|createStory
parameter_list|()
block|{
comment|// create priority queue to keep start-time sorted
name|Queue
argument_list|<
name|StoryParams
argument_list|>
name|storyQueue
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
name|this
operator|.
name|numJobs
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|StoryParams
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|StoryParams
name|o1
parameter_list|,
name|StoryParams
name|o2
parameter_list|)
block|{
return|return
name|Math
operator|.
name|toIntExact
argument_list|(
name|o1
operator|.
name|actualSubmissionTime
operator|-
name|o2
operator|.
name|actualSubmissionTime
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numJobs
operator|.
name|get
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Generate a workload
name|Workload
name|wl
init|=
name|trace
operator|.
name|generateWorkload
argument_list|()
decl_stmt|;
comment|// Save all the parameters needed to completely define a job
name|long
name|actualSubmissionTime
init|=
name|wl
operator|.
name|generateSubmissionTime
argument_list|()
decl_stmt|;
name|String
name|queue
init|=
name|wl
operator|.
name|queue_name
decl_stmt|;
name|JobDefinition
name|job
init|=
name|wl
operator|.
name|generateJobDefinition
argument_list|()
decl_stmt|;
name|storyQueue
operator|.
name|add
argument_list|(
operator|new
name|StoryParams
argument_list|(
name|actualSubmissionTime
argument_list|,
name|queue
argument_list|,
name|job
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|storyQueue
return|;
block|}
annotation|@
name|Override
DECL|method|getNextJob ()
specifier|public
name|JobStory
name|getNextJob
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|numJobs
operator|.
name|decrementAndGet
argument_list|()
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StoryParams
name|storyParams
init|=
name|listStoryParams
operator|.
name|poll
argument_list|()
decl_stmt|;
return|return
operator|new
name|SynthJob
argument_list|(
name|rand
argument_list|,
name|conf
argument_list|,
name|storyParams
operator|.
name|jobDef
argument_list|,
name|storyParams
operator|.
name|queue
argument_list|,
name|storyParams
operator|.
name|actualSubmissionTime
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SynthTraceJobProducer [ conf="
operator|+
name|conf
operator|+
literal|", numJobs="
operator|+
name|numJobs
operator|+
literal|", r="
operator|+
name|rand
operator|+
literal|", totalWeight="
operator|+
name|totalWeight
operator|+
literal|", workloads="
operator|+
name|trace
operator|.
name|workloads
operator|+
literal|"]"
return|;
block|}
DECL|method|getNumJobs ()
specifier|public
name|int
name|getNumJobs
parameter_list|()
block|{
return|return
name|trace
operator|.
name|num_jobs
return|;
block|}
comment|// Helper to parse and maintain backwards compatibility with
comment|// syn json formats
DECL|method|validateJobDef (JobDefinition jobDef)
specifier|private
specifier|static
name|void
name|validateJobDef
parameter_list|(
name|JobDefinition
name|jobDef
parameter_list|)
block|{
if|if
condition|(
name|jobDef
operator|.
name|tasks
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Detected old JobDefinition format. Converting."
argument_list|)
expr_stmt|;
try|try
block|{
name|jobDef
operator|.
name|tasks
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|jobDef
operator|.
name|type
operator|=
literal|"mapreduce"
expr_stmt|;
name|jobDef
operator|.
name|deadline_factor
operator|=
operator|new
name|Sample
argument_list|(
name|jobDef
operator|.
name|deadline_factor_avg
argument_list|,
name|jobDef
operator|.
name|deadline_factor_stddev
argument_list|)
expr_stmt|;
name|jobDef
operator|.
name|duration
operator|=
operator|new
name|Sample
argument_list|(
name|jobDef
operator|.
name|dur_avg
argument_list|,
name|jobDef
operator|.
name|dur_stddev
argument_list|)
expr_stmt|;
name|jobDef
operator|.
name|reservation
operator|=
operator|new
name|Sample
argument_list|(
name|jobDef
operator|.
name|chance_of_reservation
argument_list|)
expr_stmt|;
name|TaskDefinition
name|map
init|=
operator|new
name|TaskDefinition
argument_list|()
decl_stmt|;
name|map
operator|.
name|type
operator|=
name|MRAMSimulator
operator|.
name|MAP_TYPE
expr_stmt|;
name|map
operator|.
name|count
operator|=
operator|new
name|Sample
argument_list|(
name|jobDef
operator|.
name|mtasks_avg
argument_list|,
name|jobDef
operator|.
name|mtasks_stddev
argument_list|)
expr_stmt|;
name|map
operator|.
name|time
operator|=
operator|new
name|Sample
argument_list|(
name|jobDef
operator|.
name|mtime_avg
argument_list|,
name|jobDef
operator|.
name|mtime_stddev
argument_list|)
expr_stmt|;
name|map
operator|.
name|max_memory
operator|=
operator|new
name|Sample
argument_list|(
operator|(
name|double
operator|)
name|jobDef
operator|.
name|map_max_memory_avg
argument_list|,
name|jobDef
operator|.
name|map_max_memory_stddev
argument_list|)
expr_stmt|;
name|map
operator|.
name|max_vcores
operator|=
operator|new
name|Sample
argument_list|(
operator|(
name|double
operator|)
name|jobDef
operator|.
name|map_max_vcores_avg
argument_list|,
name|jobDef
operator|.
name|map_max_vcores_stddev
argument_list|)
expr_stmt|;
name|map
operator|.
name|priority
operator|=
name|DEFAULT_MAPPER_PRIORITY
expr_stmt|;
name|jobDef
operator|.
name|tasks
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|TaskDefinition
name|reduce
init|=
operator|new
name|TaskDefinition
argument_list|()
decl_stmt|;
name|reduce
operator|.
name|type
operator|=
name|MRAMSimulator
operator|.
name|REDUCE_TYPE
expr_stmt|;
name|reduce
operator|.
name|count
operator|=
operator|new
name|Sample
argument_list|(
name|jobDef
operator|.
name|rtasks_avg
argument_list|,
name|jobDef
operator|.
name|rtasks_stddev
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|time
operator|=
operator|new
name|Sample
argument_list|(
name|jobDef
operator|.
name|rtime_avg
argument_list|,
name|jobDef
operator|.
name|rtime_stddev
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|max_memory
operator|=
operator|new
name|Sample
argument_list|(
operator|(
name|double
operator|)
name|jobDef
operator|.
name|reduce_max_memory_avg
argument_list|,
name|jobDef
operator|.
name|reduce_max_memory_stddev
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|max_vcores
operator|=
operator|new
name|Sample
argument_list|(
operator|(
name|double
operator|)
name|jobDef
operator|.
name|reduce_max_vcores_avg
argument_list|,
name|jobDef
operator|.
name|reduce_max_vcores_stddev
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|priority
operator|=
name|DEFAULT_REDUCER_PRIORITY
expr_stmt|;
name|jobDef
operator|.
name|tasks
operator|.
name|add
argument_list|(
name|reduce
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonMappingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error converting old JobDefinition format"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSeed ()
specifier|public
name|long
name|getSeed
parameter_list|()
block|{
return|return
name|seed
return|;
block|}
DECL|method|getNodesPerRack ()
specifier|public
name|int
name|getNodesPerRack
parameter_list|()
block|{
return|return
name|trace
operator|.
name|nodes_per_rack
operator|<
literal|1
condition|?
literal|1
else|:
name|trace
operator|.
name|nodes_per_rack
return|;
block|}
DECL|method|getNumNodes ()
specifier|public
name|int
name|getNumNodes
parameter_list|()
block|{
return|return
name|trace
operator|.
name|num_nodes
return|;
block|}
comment|/**    * Class used to parse a trace configuration file.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"membername"
block|,
literal|"checkstyle:visibilitymodifier"
block|}
argument_list|)
annotation|@
name|XmlRootElement
DECL|class|Trace
specifier|public
specifier|static
class|class
name|Trace
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"description"
argument_list|)
DECL|field|description
name|String
name|description
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"num_nodes"
argument_list|)
DECL|field|num_nodes
name|int
name|num_nodes
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"nodes_per_rack"
argument_list|)
DECL|field|nodes_per_rack
name|int
name|nodes_per_rack
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"num_jobs"
argument_list|)
DECL|field|num_jobs
name|int
name|num_jobs
decl_stmt|;
comment|// in sec (selects a portion of time_distribution
annotation|@
name|JsonProperty
argument_list|(
literal|"rand_seed"
argument_list|)
DECL|field|rand_seed
name|long
name|rand_seed
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"workloads"
argument_list|)
DECL|field|workloads
name|List
argument_list|<
name|Workload
argument_list|>
name|workloads
decl_stmt|;
DECL|field|workload_weights
name|List
argument_list|<
name|Double
argument_list|>
name|workload_weights
decl_stmt|;
DECL|field|rand
name|JDKRandomGenerator
name|rand
decl_stmt|;
DECL|method|init (JDKRandomGenerator random)
specifier|public
name|void
name|init
parameter_list|(
name|JDKRandomGenerator
name|random
parameter_list|)
block|{
name|this
operator|.
name|rand
operator|=
name|random
expr_stmt|;
comment|// Pass rand forward
for|for
control|(
name|Workload
name|w
range|:
name|workloads
control|)
block|{
name|w
operator|.
name|init
argument_list|(
name|rand
argument_list|)
expr_stmt|;
block|}
comment|// Initialize workload weights
name|workload_weights
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Workload
name|w
range|:
name|workloads
control|)
block|{
name|workload_weights
operator|.
name|add
argument_list|(
name|w
operator|.
name|workload_weight
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generateWorkload ()
name|Workload
name|generateWorkload
parameter_list|()
block|{
return|return
name|workloads
operator|.
name|get
argument_list|(
name|SynthUtils
operator|.
name|getWeighted
argument_list|(
name|workload_weights
argument_list|,
name|rand
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Class used to parse a workload from file.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"membername"
block|,
literal|"checkstyle:visibilitymodifier"
block|}
argument_list|)
DECL|class|Workload
specifier|public
specifier|static
class|class
name|Workload
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"workload_name"
argument_list|)
DECL|field|workload_name
name|String
name|workload_name
decl_stmt|;
comment|// used to change probability this workload is picked for each job
annotation|@
name|JsonProperty
argument_list|(
literal|"workload_weight"
argument_list|)
DECL|field|workload_weight
name|double
name|workload_weight
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"queue_name"
argument_list|)
DECL|field|queue_name
name|String
name|queue_name
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"job_classes"
argument_list|)
DECL|field|job_classes
name|List
argument_list|<
name|JobDefinition
argument_list|>
name|job_classes
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"time_distribution"
argument_list|)
DECL|field|time_distribution
name|List
argument_list|<
name|TimeSample
argument_list|>
name|time_distribution
decl_stmt|;
DECL|field|rand
name|JDKRandomGenerator
name|rand
decl_stmt|;
DECL|field|job_weights
name|List
argument_list|<
name|Double
argument_list|>
name|job_weights
decl_stmt|;
DECL|field|time_weights
name|List
argument_list|<
name|Double
argument_list|>
name|time_weights
decl_stmt|;
DECL|method|init (JDKRandomGenerator random)
specifier|public
name|void
name|init
parameter_list|(
name|JDKRandomGenerator
name|random
parameter_list|)
block|{
name|this
operator|.
name|rand
operator|=
name|random
expr_stmt|;
comment|// Validate and pass rand forward
for|for
control|(
name|JobDefinition
name|def
range|:
name|job_classes
control|)
block|{
name|validateJobDef
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|def
operator|.
name|init
argument_list|(
name|rand
argument_list|)
expr_stmt|;
block|}
comment|// Initialize job weights
name|job_weights
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|job_weights
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|JobDefinition
name|j
range|:
name|job_classes
control|)
block|{
name|job_weights
operator|.
name|add
argument_list|(
name|j
operator|.
name|class_weight
argument_list|)
expr_stmt|;
block|}
comment|// Initialize time weights
name|time_weights
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|TimeSample
name|ts
range|:
name|time_distribution
control|)
block|{
name|time_weights
operator|.
name|add
argument_list|(
name|ts
operator|.
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generateSubmissionTime ()
specifier|public
name|long
name|generateSubmissionTime
parameter_list|()
block|{
name|int
name|index
init|=
name|SynthUtils
operator|.
name|getWeighted
argument_list|(
name|time_weights
argument_list|,
name|rand
argument_list|)
decl_stmt|;
comment|// Retrieve the lower and upper bounds for this time "bucket"
name|int
name|start
init|=
name|time_distribution
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|time
decl_stmt|;
comment|// Get the beginning of the next time sample (if it exists)
name|index
operator|=
operator|(
name|index
operator|+
literal|1
operator|)
operator|<
name|time_distribution
operator|.
name|size
argument_list|()
condition|?
name|index
operator|+
literal|1
else|:
name|index
expr_stmt|;
name|int
name|end
init|=
name|time_distribution
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|time
decl_stmt|;
name|int
name|range
init|=
name|end
operator|-
name|start
decl_stmt|;
comment|// Within this time "bucket", uniformly pick a time if our
comment|// range is non-zero, otherwise just use the start time of the bucket
return|return
name|start
operator|+
operator|(
name|range
operator|>
literal|0
condition|?
name|rand
operator|.
name|nextInt
argument_list|(
name|range
argument_list|)
else|:
literal|0
operator|)
return|;
block|}
DECL|method|generateJobDefinition ()
specifier|public
name|JobDefinition
name|generateJobDefinition
parameter_list|()
block|{
return|return
name|job_classes
operator|.
name|get
argument_list|(
name|SynthUtils
operator|.
name|getWeighted
argument_list|(
name|job_weights
argument_list|,
name|rand
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"\nWorkload "
operator|+
name|workload_name
operator|+
literal|", weight: "
operator|+
name|workload_weight
operator|+
literal|", queue: "
operator|+
name|queue_name
operator|+
literal|" "
operator|+
name|job_classes
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n\t"
argument_list|)
return|;
block|}
block|}
comment|/**    * Class used to parse a job class from file.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"membername"
block|,
literal|"checkstyle:visibilitymodifier"
block|}
argument_list|)
DECL|class|JobDefinition
specifier|public
specifier|static
class|class
name|JobDefinition
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"class_name"
argument_list|)
DECL|field|class_name
name|String
name|class_name
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"user_name"
argument_list|)
DECL|field|user_name
name|String
name|user_name
decl_stmt|;
comment|// used to change probability this class is chosen
annotation|@
name|JsonProperty
argument_list|(
literal|"class_weight"
argument_list|)
DECL|field|class_weight
name|double
name|class_weight
decl_stmt|;
comment|// am type to launch
annotation|@
name|JsonProperty
argument_list|(
literal|"type"
argument_list|)
DECL|field|type
name|String
name|type
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"deadline_factor"
argument_list|)
DECL|field|deadline_factor
name|Sample
name|deadline_factor
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"duration"
argument_list|)
DECL|field|duration
name|Sample
name|duration
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"reservation"
argument_list|)
DECL|field|reservation
name|Sample
name|reservation
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"tasks"
argument_list|)
DECL|field|tasks
name|List
argument_list|<
name|TaskDefinition
argument_list|>
name|tasks
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"params"
argument_list|)
DECL|field|params
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
comment|// Old JSON fields for backwards compatibility
comment|// reservation related params
annotation|@
name|JsonProperty
argument_list|(
literal|"chance_of_reservation"
argument_list|)
DECL|field|chance_of_reservation
name|double
name|chance_of_reservation
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"deadline_factor_avg"
argument_list|)
DECL|field|deadline_factor_avg
name|double
name|deadline_factor_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"deadline_factor_stddev"
argument_list|)
DECL|field|deadline_factor_stddev
name|double
name|deadline_factor_stddev
decl_stmt|;
comment|// durations in sec
annotation|@
name|JsonProperty
argument_list|(
literal|"dur_avg"
argument_list|)
DECL|field|dur_avg
name|double
name|dur_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"dur_stddev"
argument_list|)
DECL|field|dur_stddev
name|double
name|dur_stddev
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"mtime_avg"
argument_list|)
DECL|field|mtime_avg
name|double
name|mtime_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"mtime_stddev"
argument_list|)
DECL|field|mtime_stddev
name|double
name|mtime_stddev
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"rtime_avg"
argument_list|)
DECL|field|rtime_avg
name|double
name|rtime_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"rtime_stddev"
argument_list|)
DECL|field|rtime_stddev
name|double
name|rtime_stddev
decl_stmt|;
comment|// number of tasks
annotation|@
name|JsonProperty
argument_list|(
literal|"mtasks_avg"
argument_list|)
DECL|field|mtasks_avg
name|double
name|mtasks_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"mtasks_stddev"
argument_list|)
DECL|field|mtasks_stddev
name|double
name|mtasks_stddev
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"rtasks_avg"
argument_list|)
DECL|field|rtasks_avg
name|double
name|rtasks_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"rtasks_stddev"
argument_list|)
DECL|field|rtasks_stddev
name|double
name|rtasks_stddev
decl_stmt|;
comment|// memory in MB
annotation|@
name|JsonProperty
argument_list|(
literal|"map_max_memory_avg"
argument_list|)
DECL|field|map_max_memory_avg
name|long
name|map_max_memory_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"map_max_memory_stddev"
argument_list|)
DECL|field|map_max_memory_stddev
name|double
name|map_max_memory_stddev
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"reduce_max_memory_avg"
argument_list|)
DECL|field|reduce_max_memory_avg
name|long
name|reduce_max_memory_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"reduce_max_memory_stddev"
argument_list|)
DECL|field|reduce_max_memory_stddev
name|double
name|reduce_max_memory_stddev
decl_stmt|;
comment|// vcores
annotation|@
name|JsonProperty
argument_list|(
literal|"map_max_vcores_avg"
argument_list|)
DECL|field|map_max_vcores_avg
name|long
name|map_max_vcores_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"map_max_vcores_stddev"
argument_list|)
DECL|field|map_max_vcores_stddev
name|double
name|map_max_vcores_stddev
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"reduce_max_vcores_avg"
argument_list|)
DECL|field|reduce_max_vcores_avg
name|long
name|reduce_max_vcores_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"reduce_max_vcores_stddev"
argument_list|)
DECL|field|reduce_max_vcores_stddev
name|double
name|reduce_max_vcores_stddev
decl_stmt|;
DECL|method|init (JDKRandomGenerator rand)
specifier|public
name|void
name|init
parameter_list|(
name|JDKRandomGenerator
name|rand
parameter_list|)
block|{
name|deadline_factor
operator|.
name|init
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|duration
operator|.
name|init
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|reservation
operator|.
name|init
argument_list|(
name|rand
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskDefinition
name|t
range|:
name|tasks
control|)
block|{
name|t
operator|.
name|count
operator|.
name|init
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|t
operator|.
name|time
operator|.
name|init
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|t
operator|.
name|max_memory
operator|.
name|init
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|t
operator|.
name|max_vcores
operator|.
name|init
argument_list|(
name|rand
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"\nJobDefinition "
operator|+
name|class_name
operator|+
literal|", weight: "
operator|+
name|class_weight
operator|+
literal|", type: "
operator|+
name|type
operator|+
literal|" "
operator|+
name|tasks
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n\t"
argument_list|)
return|;
block|}
block|}
comment|/**    * A task representing a type of container - e.g. "map" in mapreduce    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"membername"
block|,
literal|"checkstyle:visibilitymodifier"
block|}
argument_list|)
DECL|class|TaskDefinition
specifier|public
specifier|static
class|class
name|TaskDefinition
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"type"
argument_list|)
DECL|field|type
name|String
name|type
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"count"
argument_list|)
DECL|field|count
name|Sample
name|count
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"time"
argument_list|)
DECL|field|time
name|Sample
name|time
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"max_memory"
argument_list|)
DECL|field|max_memory
name|Sample
name|max_memory
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"max_vcores"
argument_list|)
DECL|field|max_vcores
name|Sample
name|max_vcores
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"priority"
argument_list|)
DECL|field|priority
name|int
name|priority
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"\nTaskDefinition "
operator|+
name|type
operator|+
literal|" Count["
operator|+
name|count
operator|+
literal|"] Time["
operator|+
name|time
operator|+
literal|"] Memory["
operator|+
name|max_memory
operator|+
literal|"] Vcores["
operator|+
name|max_vcores
operator|+
literal|"] Priority["
operator|+
name|priority
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**    * Class used to parse value sample information.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"membername"
block|,
literal|"checkstyle:visibilitymodifier"
block|}
argument_list|)
DECL|class|Sample
specifier|public
specifier|static
class|class
name|Sample
block|{
DECL|field|DEFAULT_DIST
specifier|private
specifier|static
specifier|final
name|Dist
name|DEFAULT_DIST
init|=
name|Dist
operator|.
name|LOGNORM
decl_stmt|;
DECL|field|val
specifier|private
specifier|final
name|double
name|val
decl_stmt|;
DECL|field|std
specifier|private
specifier|final
name|double
name|std
decl_stmt|;
DECL|field|dist
specifier|private
specifier|final
name|Dist
name|dist
decl_stmt|;
DECL|field|dist_instance
specifier|private
name|AbstractRealDistribution
name|dist_instance
decl_stmt|;
DECL|field|discrete
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|discrete
decl_stmt|;
DECL|field|weights
specifier|private
specifier|final
name|List
argument_list|<
name|Double
argument_list|>
name|weights
decl_stmt|;
DECL|field|mode
specifier|private
specifier|final
name|Mode
name|mode
decl_stmt|;
DECL|field|rand
specifier|private
name|JDKRandomGenerator
name|rand
decl_stmt|;
DECL|enum|Mode
specifier|private
enum|enum
name|Mode
block|{
DECL|enumConstant|CONST
name|CONST
block|,
DECL|enumConstant|DIST
name|DIST
block|,
DECL|enumConstant|DISC
name|DISC
block|}
DECL|enum|Dist
specifier|private
enum|enum
name|Dist
block|{
DECL|enumConstant|LOGNORM
name|LOGNORM
block|,
DECL|enumConstant|NORM
name|NORM
block|}
DECL|method|Sample (Double val)
specifier|public
name|Sample
parameter_list|(
name|Double
name|val
parameter_list|)
throws|throws
name|JsonMappingException
block|{
name|this
argument_list|(
name|val
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Sample (Double val, Double std)
specifier|public
name|Sample
parameter_list|(
name|Double
name|val
parameter_list|,
name|Double
name|std
parameter_list|)
throws|throws
name|JsonMappingException
block|{
name|this
argument_list|(
name|val
argument_list|,
name|std
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|JsonCreator
DECL|method|Sample (@sonPropertyR) Double val, @JsonProperty(R) Double std, @JsonProperty(R) String dist, @JsonProperty(R) List<String> discrete, @JsonProperty(R) List<Double> weights)
specifier|public
name|Sample
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"val"
argument_list|)
name|Double
name|val
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"std"
argument_list|)
name|Double
name|std
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"dist"
argument_list|)
name|String
name|dist
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"discrete"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|discrete
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"weights"
argument_list|)
name|List
argument_list|<
name|Double
argument_list|>
name|weights
parameter_list|)
throws|throws
name|JsonMappingException
block|{
comment|// Different Modes
comment|// - Constant: val must be specified, all else null. Sampling will
comment|// return val.
comment|// - Distribution: val, std specified, dist optional (defaults to
comment|// LogNormal). Sampling will sample from the appropriate distribution
comment|// - Discrete: discrete must be set to a list of strings or numbers,
comment|// weights optional (defaults to uniform)
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|std
operator|==
literal|null
condition|)
block|{
comment|// Constant
if|if
condition|(
name|dist
operator|!=
literal|null
operator|||
name|discrete
operator|!=
literal|null
operator|||
name|weights
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|JsonMappingException
argument_list|(
literal|"Instantiation of "
operator|+
name|Sample
operator|.
name|class
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
name|mode
operator|=
name|Mode
operator|.
name|CONST
expr_stmt|;
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|std
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|dist
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|discrete
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|weights
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// Distribution
if|if
condition|(
name|discrete
operator|!=
literal|null
operator|||
name|weights
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|JsonMappingException
argument_list|(
literal|"Instantiation of "
operator|+
name|Sample
operator|.
name|class
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
name|mode
operator|=
name|Mode
operator|.
name|DIST
expr_stmt|;
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|std
operator|=
name|std
expr_stmt|;
name|this
operator|.
name|dist
operator|=
name|dist
operator|!=
literal|null
condition|?
name|Dist
operator|.
name|valueOf
argument_list|(
name|dist
argument_list|)
else|:
name|DEFAULT_DIST
expr_stmt|;
name|this
operator|.
name|discrete
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|weights
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Discrete
if|if
condition|(
name|discrete
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JsonMappingException
argument_list|(
literal|"Instantiation of "
operator|+
name|Sample
operator|.
name|class
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
name|mode
operator|=
name|Mode
operator|.
name|DISC
expr_stmt|;
name|this
operator|.
name|val
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|std
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|dist
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|discrete
operator|=
name|discrete
expr_stmt|;
if|if
condition|(
name|weights
operator|==
literal|null
condition|)
block|{
name|weights
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|discrete
operator|.
name|size
argument_list|()
argument_list|,
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|weights
operator|.
name|size
argument_list|()
operator|!=
name|discrete
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|JsonMappingException
argument_list|(
literal|"Instantiation of "
operator|+
name|Sample
operator|.
name|class
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
name|this
operator|.
name|weights
operator|=
name|weights
expr_stmt|;
block|}
block|}
DECL|method|init (JDKRandomGenerator random)
specifier|public
name|void
name|init
parameter_list|(
name|JDKRandomGenerator
name|random
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rand
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"init called twice"
argument_list|)
throw|;
block|}
name|this
operator|.
name|rand
operator|=
name|random
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|DIST
condition|)
block|{
switch|switch
condition|(
name|this
operator|.
name|dist
condition|)
block|{
case|case
name|LOGNORM
case|:
name|this
operator|.
name|dist_instance
operator|=
name|SynthUtils
operator|.
name|getLogNormalDist
argument_list|(
name|rand
argument_list|,
name|val
argument_list|,
name|std
argument_list|)
expr_stmt|;
return|return;
case|case
name|NORM
case|:
name|this
operator|.
name|dist_instance
operator|=
name|SynthUtils
operator|.
name|getNormalDist
argument_list|(
name|rand
argument_list|,
name|val
argument_list|,
name|std
argument_list|)
expr_stmt|;
return|return;
default|default:
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unknown distribution "
operator|+
name|dist
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getInt ()
specifier|public
name|int
name|getInt
parameter_list|()
block|{
return|return
name|Math
operator|.
name|toIntExact
argument_list|(
name|getLong
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getLong ()
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
name|getDouble
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getDouble ()
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|getString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getString ()
specifier|public
name|String
name|getString
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|rand
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"getValue called without init"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|CONST
case|:
return|return
name|Double
operator|.
name|toString
argument_list|(
name|val
argument_list|)
return|;
case|case
name|DIST
case|:
return|return
name|Double
operator|.
name|toString
argument_list|(
name|dist_instance
operator|.
name|sample
argument_list|()
argument_list|)
return|;
case|case
name|DISC
case|:
return|return
name|this
operator|.
name|discrete
operator|.
name|get
argument_list|(
name|SynthUtils
operator|.
name|getWeighted
argument_list|(
name|this
operator|.
name|weights
argument_list|,
name|rand
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unknown sampling mode "
operator|+
name|mode
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|CONST
case|:
return|return
literal|"value: "
operator|+
name|Double
operator|.
name|toString
argument_list|(
name|val
argument_list|)
return|;
case|case
name|DIST
case|:
return|return
literal|"value: "
operator|+
name|this
operator|.
name|val
operator|+
literal|" std: "
operator|+
name|this
operator|.
name|std
operator|+
literal|" dist: "
operator|+
name|this
operator|.
name|dist
operator|.
name|name
argument_list|()
return|;
case|case
name|DISC
case|:
return|return
literal|"discrete: "
operator|+
name|this
operator|.
name|discrete
operator|+
literal|", weights: "
operator|+
name|this
operator|.
name|weights
return|;
default|default:
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unknown sampling mode "
operator|+
name|mode
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * This is used to define time-varying probability of a job start-time (e.g.,    * to simulate daily patterns).    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"membername"
block|,
literal|"checkstyle:visibilitymodifier"
block|}
argument_list|)
DECL|class|TimeSample
specifier|public
specifier|static
class|class
name|TimeSample
block|{
comment|// in sec
annotation|@
name|JsonProperty
argument_list|(
literal|"time"
argument_list|)
DECL|field|time
name|int
name|time
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"weight"
argument_list|)
DECL|field|weight
name|double
name|weight
decl_stmt|;
block|}
block|}
end_class

end_unit

