begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.synthetic
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|synthetic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|random
operator|.
name|JDKRandomGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStoryProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParser
operator|.
name|Feature
operator|.
name|INTERN_FIELD_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|DeserializationConfig
operator|.
name|Feature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
import|;
end_import

begin_comment
comment|/**  * This is a JobStoryProducer that operates from distribution of different  * workloads. The .json input file is used to determine how many jobs, which  * size, number of maps/reducers and their duration, as well as the temporal  * distributed of submissions. For each parameter we control avg and stdev, and  * generate values via normal or log-normal distributions.  */
end_comment

begin_class
DECL|class|SynthTraceJobProducer
specifier|public
class|class
name|SynthTraceJobProducer
implements|implements
name|JobStoryProducer
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StaticVariableName"
argument_list|)
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SynthTraceJobProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|numJobs
specifier|private
specifier|final
name|AtomicInteger
name|numJobs
decl_stmt|;
DECL|field|trace
specifier|private
specifier|final
name|Trace
name|trace
decl_stmt|;
DECL|field|seed
specifier|private
specifier|final
name|long
name|seed
decl_stmt|;
DECL|field|totalWeight
specifier|private
name|int
name|totalWeight
decl_stmt|;
DECL|field|weightList
specifier|private
specifier|final
name|List
argument_list|<
name|Double
argument_list|>
name|weightList
decl_stmt|;
DECL|field|workloads
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|SynthWorkload
argument_list|>
name|workloads
decl_stmt|;
DECL|field|listStoryParams
specifier|private
specifier|final
name|Queue
argument_list|<
name|StoryParams
argument_list|>
name|listStoryParams
decl_stmt|;
DECL|field|rand
specifier|private
specifier|final
name|JDKRandomGenerator
name|rand
decl_stmt|;
DECL|field|SLS_SYNTHETIC_TRACE_FILE
specifier|public
specifier|static
specifier|final
name|String
name|SLS_SYNTHETIC_TRACE_FILE
init|=
literal|"sls.synthetic"
operator|+
literal|".trace_file"
decl_stmt|;
DECL|method|SynthTraceJobProducer (Configuration conf)
specifier|public
name|SynthTraceJobProducer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|SLS_SYNTHETIC_TRACE_FILE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|SynthTraceJobProducer (Configuration conf, Path path)
specifier|public
name|SynthTraceJobProducer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SynthTraceJobProducer"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rand
operator|=
operator|new
name|JDKRandomGenerator
argument_list|()
expr_stmt|;
name|workloads
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|SynthWorkload
argument_list|>
argument_list|()
expr_stmt|;
name|weightList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|INTERN_FIELD_NAMES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|ifs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fileIn
init|=
name|ifs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|this
operator|.
name|trace
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|fileIn
argument_list|,
name|Trace
operator|.
name|class
argument_list|)
expr_stmt|;
name|seed
operator|=
name|trace
operator|.
name|rand_seed
expr_stmt|;
name|rand
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|this
operator|.
name|numJobs
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|trace
operator|.
name|num_jobs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|workloadId
init|=
literal|0
init|;
name|workloadId
operator|<
name|trace
operator|.
name|workloads
operator|.
name|size
argument_list|()
condition|;
name|workloadId
operator|++
control|)
block|{
name|SynthWorkload
name|workload
init|=
operator|new
name|SynthWorkload
argument_list|(
name|workloadId
argument_list|,
name|trace
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|classId
init|=
literal|0
init|;
name|classId
operator|<
name|trace
operator|.
name|workloads
operator|.
name|get
argument_list|(
name|workloadId
argument_list|)
operator|.
name|job_classes
operator|.
name|size
argument_list|()
condition|;
name|classId
operator|++
control|)
block|{
name|SynthJobClass
name|cls
init|=
operator|new
name|SynthJobClass
argument_list|(
name|rand
argument_list|,
name|trace
argument_list|,
name|workload
argument_list|,
name|classId
argument_list|)
decl_stmt|;
name|workload
operator|.
name|add
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
name|workloads
operator|.
name|put
argument_list|(
name|workloadId
argument_list|,
name|workload
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|workloads
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|w
init|=
name|workloads
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getWorkloadWeight
argument_list|()
decl_stmt|;
name|totalWeight
operator|+=
name|w
expr_stmt|;
name|weightList
operator|.
name|add
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
comment|// create priority queue to keep start-time sorted
name|listStoryParams
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|StoryParams
argument_list|>
argument_list|(
literal|10
argument_list|,
operator|new
name|Comparator
argument_list|<
name|StoryParams
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|StoryParams
name|o1
parameter_list|,
name|StoryParams
name|o2
parameter_list|)
block|{
return|return
name|Math
operator|.
name|toIntExact
argument_list|(
name|o2
operator|.
name|actualSubmissionTime
operator|-
name|o1
operator|.
name|actualSubmissionTime
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// initialize it
name|createStoryParams
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generated "
operator|+
name|listStoryParams
operator|.
name|size
argument_list|()
operator|+
literal|" deadlines for "
operator|+
name|this
operator|.
name|numJobs
operator|.
name|get
argument_list|()
operator|+
literal|" jobs "
argument_list|)
expr_stmt|;
block|}
DECL|method|getSeed ()
specifier|public
name|long
name|getSeed
parameter_list|()
block|{
return|return
name|seed
return|;
block|}
DECL|method|getNodesPerRack ()
specifier|public
name|int
name|getNodesPerRack
parameter_list|()
block|{
return|return
name|trace
operator|.
name|nodes_per_rack
operator|<
literal|1
condition|?
literal|1
else|:
name|trace
operator|.
name|nodes_per_rack
return|;
block|}
DECL|method|getNumNodes ()
specifier|public
name|int
name|getNumNodes
parameter_list|()
block|{
return|return
name|trace
operator|.
name|num_nodes
return|;
block|}
comment|/**    * Class used to parse a trace configuration file.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"membername"
block|,
literal|"checkstyle:visibilitymodifier"
block|}
argument_list|)
annotation|@
name|XmlRootElement
DECL|class|Trace
specifier|public
specifier|static
class|class
name|Trace
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"description"
argument_list|)
DECL|field|description
name|String
name|description
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"num_nodes"
argument_list|)
DECL|field|num_nodes
name|int
name|num_nodes
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"nodes_per_rack"
argument_list|)
DECL|field|nodes_per_rack
name|int
name|nodes_per_rack
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"num_jobs"
argument_list|)
DECL|field|num_jobs
name|int
name|num_jobs
decl_stmt|;
comment|// in sec (selects a portion of time_distribution
annotation|@
name|JsonProperty
argument_list|(
literal|"rand_seed"
argument_list|)
DECL|field|rand_seed
name|long
name|rand_seed
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"workloads"
argument_list|)
DECL|field|workloads
name|List
argument_list|<
name|Workload
argument_list|>
name|workloads
decl_stmt|;
block|}
comment|/**    * Class used to parse a workload from file.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"membername"
block|,
literal|"checkstyle:visibilitymodifier"
block|}
argument_list|)
DECL|class|Workload
specifier|public
specifier|static
class|class
name|Workload
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"workload_name"
argument_list|)
DECL|field|workload_name
name|String
name|workload_name
decl_stmt|;
comment|// used to change probability this workload is picked for each job
annotation|@
name|JsonProperty
argument_list|(
literal|"workload_weight"
argument_list|)
DECL|field|workload_weight
name|double
name|workload_weight
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"queue_name"
argument_list|)
DECL|field|queue_name
name|String
name|queue_name
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"job_classes"
argument_list|)
DECL|field|job_classes
name|List
argument_list|<
name|JobClass
argument_list|>
name|job_classes
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"time_distribution"
argument_list|)
DECL|field|time_distribution
name|List
argument_list|<
name|TimeSample
argument_list|>
name|time_distribution
decl_stmt|;
block|}
comment|/**    * Class used to parse a job class from file.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"membername"
block|,
literal|"checkstyle:visibilitymodifier"
block|}
argument_list|)
DECL|class|JobClass
specifier|public
specifier|static
class|class
name|JobClass
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"class_name"
argument_list|)
DECL|field|class_name
name|String
name|class_name
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"user_name"
argument_list|)
DECL|field|user_name
name|String
name|user_name
decl_stmt|;
comment|// used to change probability this class is chosen
annotation|@
name|JsonProperty
argument_list|(
literal|"class_weight"
argument_list|)
DECL|field|class_weight
name|double
name|class_weight
decl_stmt|;
comment|// reservation related params
annotation|@
name|JsonProperty
argument_list|(
literal|"chance_of_reservation"
argument_list|)
DECL|field|chance_of_reservation
name|double
name|chance_of_reservation
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"deadline_factor_avg"
argument_list|)
DECL|field|deadline_factor_avg
name|double
name|deadline_factor_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"deadline_factor_stddev"
argument_list|)
DECL|field|deadline_factor_stddev
name|double
name|deadline_factor_stddev
decl_stmt|;
comment|// durations in sec
annotation|@
name|JsonProperty
argument_list|(
literal|"dur_avg"
argument_list|)
DECL|field|dur_avg
name|double
name|dur_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"dur_stddev"
argument_list|)
DECL|field|dur_stddev
name|double
name|dur_stddev
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"mtime_avg"
argument_list|)
DECL|field|mtime_avg
name|double
name|mtime_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"mtime_stddev"
argument_list|)
DECL|field|mtime_stddev
name|double
name|mtime_stddev
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"rtime_avg"
argument_list|)
DECL|field|rtime_avg
name|double
name|rtime_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"rtime_stddev"
argument_list|)
DECL|field|rtime_stddev
name|double
name|rtime_stddev
decl_stmt|;
comment|// number of tasks
annotation|@
name|JsonProperty
argument_list|(
literal|"mtasks_avg"
argument_list|)
DECL|field|mtasks_avg
name|double
name|mtasks_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"mtasks_stddev"
argument_list|)
DECL|field|mtasks_stddev
name|double
name|mtasks_stddev
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"rtasks_avg"
argument_list|)
DECL|field|rtasks_avg
name|double
name|rtasks_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"rtasks_stddev"
argument_list|)
DECL|field|rtasks_stddev
name|double
name|rtasks_stddev
decl_stmt|;
comment|// memory in MB
annotation|@
name|JsonProperty
argument_list|(
literal|"map_max_memory_avg"
argument_list|)
DECL|field|map_max_memory_avg
name|long
name|map_max_memory_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"map_max_memory_stddev"
argument_list|)
DECL|field|map_max_memory_stddev
name|double
name|map_max_memory_stddev
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"reduce_max_memory_avg"
argument_list|)
DECL|field|reduce_max_memory_avg
name|long
name|reduce_max_memory_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"reduce_max_memory_stddev"
argument_list|)
DECL|field|reduce_max_memory_stddev
name|double
name|reduce_max_memory_stddev
decl_stmt|;
comment|// vcores
annotation|@
name|JsonProperty
argument_list|(
literal|"map_max_vcores_avg"
argument_list|)
DECL|field|map_max_vcores_avg
name|long
name|map_max_vcores_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"map_max_vcores_stddev"
argument_list|)
DECL|field|map_max_vcores_stddev
name|double
name|map_max_vcores_stddev
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"reduce_max_vcores_avg"
argument_list|)
DECL|field|reduce_max_vcores_avg
name|long
name|reduce_max_vcores_avg
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"reduce_max_vcores_stddev"
argument_list|)
DECL|field|reduce_max_vcores_stddev
name|double
name|reduce_max_vcores_stddev
decl_stmt|;
block|}
comment|/**    * This is used to define time-varying probability of a job start-time (e.g.,    * to simulate daily patterns).    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"membername"
block|,
literal|"checkstyle:visibilitymodifier"
block|}
argument_list|)
DECL|class|TimeSample
specifier|public
specifier|static
class|class
name|TimeSample
block|{
comment|// in sec
annotation|@
name|JsonProperty
argument_list|(
literal|"time"
argument_list|)
DECL|field|time
name|int
name|time
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"weight"
argument_list|)
DECL|field|jobs
name|double
name|jobs
decl_stmt|;
block|}
DECL|class|StoryParams
specifier|static
class|class
name|StoryParams
block|{
DECL|field|pickedJobClass
specifier|private
name|SynthJobClass
name|pickedJobClass
decl_stmt|;
DECL|field|actualSubmissionTime
specifier|private
name|long
name|actualSubmissionTime
decl_stmt|;
DECL|method|StoryParams (SynthJobClass pickedJobClass, long actualSubmissionTime)
name|StoryParams
parameter_list|(
name|SynthJobClass
name|pickedJobClass
parameter_list|,
name|long
name|actualSubmissionTime
parameter_list|)
block|{
name|this
operator|.
name|pickedJobClass
operator|=
name|pickedJobClass
expr_stmt|;
name|this
operator|.
name|actualSubmissionTime
operator|=
name|actualSubmissionTime
expr_stmt|;
block|}
block|}
DECL|method|createStoryParams ()
name|void
name|createStoryParams
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numJobs
operator|.
name|get
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|workload
init|=
name|SynthUtils
operator|.
name|getWeighted
argument_list|(
name|weightList
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|SynthWorkload
name|pickedWorkload
init|=
name|workloads
operator|.
name|get
argument_list|(
name|workload
argument_list|)
decl_stmt|;
name|long
name|jobClass
init|=
name|SynthUtils
operator|.
name|getWeighted
argument_list|(
name|pickedWorkload
operator|.
name|getWeightList
argument_list|()
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|SynthJobClass
name|pickedJobClass
init|=
name|pickedWorkload
operator|.
name|getClassList
argument_list|()
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|jobClass
argument_list|)
decl_stmt|;
name|long
name|actualSubmissionTime
init|=
name|pickedWorkload
operator|.
name|getBaseSubmissionTime
argument_list|(
name|rand
argument_list|)
decl_stmt|;
comment|// long actualSubmissionTime = (i + 1) * 10;
name|listStoryParams
operator|.
name|add
argument_list|(
operator|new
name|StoryParams
argument_list|(
name|pickedJobClass
argument_list|,
name|actualSubmissionTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNextJob ()
specifier|public
name|JobStory
name|getNextJob
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|numJobs
operator|.
name|decrementAndGet
argument_list|()
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StoryParams
name|storyParams
init|=
name|listStoryParams
operator|.
name|poll
argument_list|()
decl_stmt|;
return|return
name|storyParams
operator|.
name|pickedJobClass
operator|.
name|getJobStory
argument_list|(
name|conf
argument_list|,
name|storyParams
operator|.
name|actualSubmissionTime
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SynthTraceJobProducer [ conf="
operator|+
name|conf
operator|+
literal|", numJobs="
operator|+
name|numJobs
operator|+
literal|", weightList="
operator|+
name|weightList
operator|+
literal|", r="
operator|+
name|rand
operator|+
literal|", totalWeight="
operator|+
name|totalWeight
operator|+
literal|", workloads="
operator|+
name|workloads
operator|+
literal|"]"
return|;
block|}
DECL|method|getNumJobs ()
specifier|public
name|int
name|getNumJobs
parameter_list|()
block|{
return|return
name|trace
operator|.
name|num_jobs
return|;
block|}
block|}
end_class

end_unit

