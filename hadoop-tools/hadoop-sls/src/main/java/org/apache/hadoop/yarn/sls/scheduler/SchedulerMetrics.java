begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppReport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SchedulerMetrics
specifier|public
specifier|abstract
class|class
name|SchedulerMetrics
block|{
DECL|field|scheduler
specifier|protected
name|ResourceScheduler
name|scheduler
decl_stmt|;
DECL|field|trackedQueues
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|trackedQueues
decl_stmt|;
DECL|field|metrics
specifier|protected
name|MetricRegistry
name|metrics
decl_stmt|;
DECL|field|appTrackedMetrics
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|appTrackedMetrics
decl_stmt|;
DECL|field|queueTrackedMetrics
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|queueTrackedMetrics
decl_stmt|;
DECL|method|SchedulerMetrics ()
specifier|public
name|SchedulerMetrics
parameter_list|()
block|{
name|appTrackedMetrics
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"live.containers"
argument_list|)
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"reserved.containers"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|init (ResourceScheduler scheduler, MetricRegistry metrics)
specifier|public
name|void
name|init
parameter_list|(
name|ResourceScheduler
name|scheduler
parameter_list|,
name|MetricRegistry
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|trackedQueues
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
block|}
DECL|method|trackApp (final ApplicationAttemptId appAttemptId, String oldAppId)
specifier|public
name|void
name|trackApp
parameter_list|(
specifier|final
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|String
name|oldAppId
parameter_list|)
block|{
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".live.containers"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
name|SchedulerAppReport
name|app
init|=
name|scheduler
operator|.
name|getSchedulerAppInfo
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
return|return
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".reserved.containers"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
name|SchedulerAppReport
name|app
init|=
name|scheduler
operator|.
name|getSchedulerAppInfo
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
return|return
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|untrackApp (ApplicationAttemptId appAttemptId, String oldAppId)
specifier|public
name|void
name|untrackApp
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|String
name|oldAppId
parameter_list|)
block|{
for|for
control|(
name|String
name|m
range|:
name|appTrackedMetrics
control|)
block|{
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|"."
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|trackQueue (String queueName)
specifier|public
specifier|abstract
name|void
name|trackQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
function_decl|;
DECL|method|untrackQueue (String queueName)
specifier|public
name|void
name|untrackQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
for|for
control|(
name|String
name|m
range|:
name|queueTrackedMetrics
control|)
block|{
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.queue."
operator|+
name|queueName
operator|+
literal|"."
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isTracked (String queueName)
specifier|public
name|boolean
name|isTracked
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
return|return
name|trackedQueues
operator|.
name|contains
argument_list|(
name|queueName
argument_list|)
return|;
block|}
DECL|method|getAppTrackedMetrics ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAppTrackedMetrics
parameter_list|()
block|{
return|return
name|appTrackedMetrics
return|;
block|}
DECL|method|getQueueTrackedMetrics ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getQueueTrackedMetrics
parameter_list|()
block|{
return|return
name|queueTrackedMetrics
return|;
block|}
block|}
end_class

end_unit

