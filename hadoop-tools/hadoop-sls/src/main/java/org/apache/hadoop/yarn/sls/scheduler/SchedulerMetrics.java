begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sls.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|CsvReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|SlidingWindowReservoir
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|conf
operator|.
name|SLSConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sls
operator|.
name|web
operator|.
name|SLSWebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SchedulerMetrics
specifier|public
specifier|abstract
class|class
name|SchedulerMetrics
block|{
DECL|field|EOL
specifier|private
specifier|static
specifier|final
name|String
name|EOL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|SAMPLING_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|SAMPLING_SIZE
init|=
literal|60
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SchedulerMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|protected
name|ResourceScheduler
name|scheduler
decl_stmt|;
DECL|field|trackedQueues
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|trackedQueues
decl_stmt|;
DECL|field|metrics
specifier|protected
name|MetricRegistry
name|metrics
decl_stmt|;
DECL|field|appTrackedMetrics
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|appTrackedMetrics
decl_stmt|;
DECL|field|queueTrackedMetrics
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|queueTrackedMetrics
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|pool
specifier|private
name|ScheduledExecutorService
name|pool
decl_stmt|;
DECL|field|web
specifier|private
name|SLSWebApp
name|web
decl_stmt|;
comment|// metrics
DECL|field|metricsOutputDir
specifier|private
name|String
name|metricsOutputDir
decl_stmt|;
DECL|field|metricsLogBW
specifier|private
name|BufferedWriter
name|metricsLogBW
decl_stmt|;
DECL|field|jobRuntimeLogBW
specifier|private
name|BufferedWriter
name|jobRuntimeLogBW
decl_stmt|;
DECL|field|running
specifier|private
name|boolean
name|running
init|=
literal|false
decl_stmt|;
comment|// counters for scheduler allocate/handle operations
DECL|field|schedulerAllocateCounter
specifier|private
name|Counter
name|schedulerAllocateCounter
decl_stmt|;
DECL|field|schedulerCommitSuccessCounter
specifier|private
name|Counter
name|schedulerCommitSuccessCounter
decl_stmt|;
DECL|field|schedulerCommitFailureCounter
specifier|private
name|Counter
name|schedulerCommitFailureCounter
decl_stmt|;
DECL|field|schedulerHandleCounter
specifier|private
name|Counter
name|schedulerHandleCounter
decl_stmt|;
DECL|field|schedulerHandleCounterMap
specifier|private
name|Map
argument_list|<
name|SchedulerEventType
argument_list|,
name|Counter
argument_list|>
name|schedulerHandleCounterMap
decl_stmt|;
comment|// Timers for scheduler allocate/handle operations
DECL|field|schedulerAllocateTimer
specifier|private
name|Timer
name|schedulerAllocateTimer
decl_stmt|;
DECL|field|schedulerCommitSuccessTimer
specifier|private
name|Timer
name|schedulerCommitSuccessTimer
decl_stmt|;
DECL|field|schedulerCommitFailureTimer
specifier|private
name|Timer
name|schedulerCommitFailureTimer
decl_stmt|;
DECL|field|schedulerHandleTimer
specifier|private
name|Timer
name|schedulerHandleTimer
decl_stmt|;
DECL|field|schedulerHandleTimerMap
specifier|private
name|Map
argument_list|<
name|SchedulerEventType
argument_list|,
name|Timer
argument_list|>
name|schedulerHandleTimerMap
decl_stmt|;
DECL|field|schedulerHistogramList
specifier|private
name|List
argument_list|<
name|Histogram
argument_list|>
name|schedulerHistogramList
decl_stmt|;
DECL|field|histogramTimerMap
specifier|private
name|Map
argument_list|<
name|Histogram
argument_list|,
name|Timer
argument_list|>
name|histogramTimerMap
decl_stmt|;
DECL|field|samplerLock
specifier|private
name|Lock
name|samplerLock
decl_stmt|;
DECL|field|queueLock
specifier|private
name|Lock
name|queueLock
decl_stmt|;
DECL|method|getSchedulerMetricsClass (Configuration conf, Class schedulerClass)
specifier|static
name|Class
name|getSchedulerMetricsClass
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
name|schedulerClass
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
name|metricClass
init|=
literal|null
decl_stmt|;
name|String
name|schedulerMetricsType
init|=
name|conf
operator|.
name|get
argument_list|(
name|schedulerClass
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerMetricsType
operator|!=
literal|null
condition|)
block|{
name|metricClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|schedulerMetricsType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schedulerClass
operator|.
name|equals
argument_list|(
name|FairScheduler
operator|.
name|class
argument_list|)
condition|)
block|{
name|metricClass
operator|=
name|FairSchedulerMetrics
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|schedulerClass
operator|.
name|equals
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
condition|)
block|{
name|metricClass
operator|=
name|CapacitySchedulerMetrics
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|schedulerClass
operator|.
name|equals
argument_list|(
name|FifoScheduler
operator|.
name|class
argument_list|)
condition|)
block|{
name|metricClass
operator|=
name|FifoSchedulerMetrics
operator|.
name|class
expr_stmt|;
block|}
return|return
name|metricClass
return|;
block|}
DECL|method|getInstance (Configuration conf, Class schedulerClass)
specifier|static
name|SchedulerMetrics
name|getInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
name|schedulerClass
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
name|schedulerMetricClass
init|=
name|getSchedulerMetricsClass
argument_list|(
name|conf
argument_list|,
name|schedulerClass
argument_list|)
decl_stmt|;
return|return
operator|(
name|SchedulerMetrics
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|schedulerMetricClass
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
return|;
block|}
DECL|method|SchedulerMetrics ()
specifier|public
name|SchedulerMetrics
parameter_list|()
block|{
name|metrics
operator|=
operator|new
name|MetricRegistry
argument_list|()
expr_stmt|;
name|appTrackedMetrics
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"live.containers"
argument_list|)
expr_stmt|;
name|appTrackedMetrics
operator|.
name|add
argument_list|(
literal|"reserved.containers"
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|trackedQueues
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|samplerLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
name|queueLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
block|}
DECL|method|init (ResourceScheduler resourceScheduler, Configuration config)
name|void
name|init
parameter_list|(
name|ResourceScheduler
name|resourceScheduler
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|scheduler
operator|=
name|resourceScheduler
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
name|metricsOutputDir
operator|=
name|conf
operator|.
name|get
argument_list|(
name|SLSConfiguration
operator|.
name|METRICS_OUTPUT_DIR
argument_list|)
expr_stmt|;
comment|// register various metrics
name|registerJvmMetrics
argument_list|()
expr_stmt|;
name|registerClusterResourceMetrics
argument_list|()
expr_stmt|;
name|registerContainerAppNumMetrics
argument_list|()
expr_stmt|;
name|registerSchedulerMetrics
argument_list|()
expr_stmt|;
comment|// .csv output
name|initMetricsCSVOutput
argument_list|()
expr_stmt|;
comment|// start web app to provide real-time tracking
name|int
name|metricsWebAddressPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|METRICS_WEB_ADDRESS_PORT
argument_list|,
name|SLSConfiguration
operator|.
name|METRICS_WEB_ADDRESS_PORT_DEFAULT
argument_list|)
decl_stmt|;
name|web
operator|=
operator|new
name|SLSWebApp
argument_list|(
operator|(
name|SchedulerWrapper
operator|)
name|scheduler
argument_list|,
name|metricsWebAddressPort
argument_list|)
expr_stmt|;
name|web
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// a thread to update histogram timer
name|pool
operator|=
operator|new
name|HadoopScheduledThreadPoolExecutor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|pool
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|HistogramsRunnable
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// a thread to output metrics for real-tiem tracking
name|pool
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|MetricsLogRunnable
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// application running information
name|jobRuntimeLogBW
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|metricsOutputDir
operator|+
literal|"/jobruntime.csv"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|jobRuntimeLogBW
operator|.
name|write
argument_list|(
literal|"JobID,real_start_time,real_end_time,"
operator|+
literal|"simulate_start_time,simulate_end_time"
operator|+
name|EOL
argument_list|)
expr_stmt|;
name|jobRuntimeLogBW
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|getMetrics ()
specifier|public
name|MetricRegistry
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
DECL|method|getSchedulerAppAttempt ( ApplicationId appId)
specifier|protected
name|SchedulerApplicationAttempt
name|getSchedulerAppAttempt
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|AbstractYarnScheduler
name|yarnScheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|scheduler
decl_stmt|;
name|SchedulerApplication
name|app
init|=
operator|(
name|SchedulerApplication
operator|)
name|yarnScheduler
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
return|;
block|}
DECL|method|trackApp (final ApplicationId appId, String oldAppId)
specifier|public
name|void
name|trackApp
parameter_list|(
specifier|final
name|ApplicationId
name|appId
parameter_list|,
name|String
name|oldAppId
parameter_list|)
block|{
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".live.containers"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
name|SchedulerApplicationAttempt
name|appAttempt
init|=
name|getSchedulerAppAttempt
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|!=
literal|null
condition|)
block|{
return|return
name|appAttempt
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|".reserved.containers"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
name|SchedulerApplicationAttempt
name|appAttempt
init|=
name|getSchedulerAppAttempt
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|!=
literal|null
condition|)
block|{
return|return
name|appAttempt
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|untrackApp (String oldAppId)
specifier|public
name|void
name|untrackApp
parameter_list|(
name|String
name|oldAppId
parameter_list|)
block|{
for|for
control|(
name|String
name|m
range|:
name|appTrackedMetrics
control|)
block|{
name|metrics
operator|.
name|remove
argument_list|(
literal|"variable.app."
operator|+
name|oldAppId
operator|+
literal|"."
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Track a queue by registering its metrics.    *    * @param queue queue name    */
DECL|method|trackQueue (String queue)
specifier|public
name|void
name|trackQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|queueLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isTracked
argument_list|(
name|queue
argument_list|)
condition|)
block|{
name|trackedQueues
operator|.
name|add
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|registerQueueMetrics
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|queueLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|registerQueueMetrics (String queueName)
specifier|protected
name|void
name|registerQueueMetrics
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|counterMap
init|=
name|metrics
operator|.
name|getCounters
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueMetric
name|queueMetric
range|:
name|QueueMetric
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|metricName
init|=
name|getQueueMetricName
argument_list|(
name|queueName
argument_list|,
name|queueMetric
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|counterMap
operator|.
name|containsKey
argument_list|(
name|metricName
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|counter
argument_list|(
name|metricName
argument_list|)
expr_stmt|;
name|queueTrackedMetrics
operator|.
name|add
argument_list|(
name|metricName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isTracked (String queueName)
specifier|public
name|boolean
name|isTracked
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
return|return
name|trackedQueues
operator|.
name|contains
argument_list|(
name|queueName
argument_list|)
return|;
block|}
DECL|method|getAppTrackedMetrics ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAppTrackedMetrics
parameter_list|()
block|{
return|return
name|appTrackedMetrics
return|;
block|}
DECL|method|getQueueTrackedMetrics ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getQueueTrackedMetrics
parameter_list|()
block|{
return|return
name|queueTrackedMetrics
return|;
block|}
DECL|method|registerJvmMetrics ()
specifier|private
name|void
name|registerJvmMetrics
parameter_list|()
block|{
comment|// add JVM gauges
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.jvm.free.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.jvm.max.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.jvm.total.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|registerClusterResourceMetrics ()
specifier|private
name|void
name|registerClusterResourceMetrics
parameter_list|()
block|{
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.cluster.allocated.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0L
return|;
block|}
else|else
block|{
return|return
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.cluster.allocated.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedVirtualCores
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.cluster.available.memory"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0L
return|;
block|}
else|else
block|{
return|return
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.cluster.available.vcores"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|registerContainerAppNumMetrics ()
specifier|private
name|void
name|registerContainerAppNumMetrics
parameter_list|()
block|{
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.running.application"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAppsRunning
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"variable.running.container"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedContainers
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|registerSchedulerMetrics ()
specifier|private
name|void
name|registerSchedulerMetrics
parameter_list|()
block|{
name|samplerLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// counters for scheduler operations
name|schedulerAllocateCounter
operator|=
name|metrics
operator|.
name|counter
argument_list|(
literal|"counter.scheduler.operation.allocate"
argument_list|)
expr_stmt|;
name|schedulerCommitSuccessCounter
operator|=
name|metrics
operator|.
name|counter
argument_list|(
literal|"counter.scheduler.operation.commit.success"
argument_list|)
expr_stmt|;
name|schedulerCommitFailureCounter
operator|=
name|metrics
operator|.
name|counter
argument_list|(
literal|"counter.scheduler.operation.commit.failure"
argument_list|)
expr_stmt|;
name|schedulerHandleCounter
operator|=
name|metrics
operator|.
name|counter
argument_list|(
literal|"counter.scheduler.operation.handle"
argument_list|)
expr_stmt|;
name|schedulerHandleCounterMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|SchedulerEventType
name|e
range|:
name|SchedulerEventType
operator|.
name|values
argument_list|()
control|)
block|{
name|Counter
name|counter
init|=
name|metrics
operator|.
name|counter
argument_list|(
literal|"counter.scheduler.operation.handle."
operator|+
name|e
argument_list|)
decl_stmt|;
name|schedulerHandleCounterMap
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
comment|// timers for scheduler operations
name|int
name|timeWindowSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|METRICS_TIMER_WINDOW_SIZE
argument_list|,
name|SLSConfiguration
operator|.
name|METRICS_TIMER_WINDOW_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|schedulerAllocateTimer
operator|=
operator|new
name|Timer
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|timeWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|schedulerCommitSuccessTimer
operator|=
operator|new
name|Timer
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|timeWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|schedulerCommitFailureTimer
operator|=
operator|new
name|Timer
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|timeWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|schedulerHandleTimer
operator|=
operator|new
name|Timer
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|timeWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|schedulerHandleTimerMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|SchedulerEventType
name|e
range|:
name|SchedulerEventType
operator|.
name|values
argument_list|()
control|)
block|{
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|timeWindowSize
argument_list|)
argument_list|)
decl_stmt|;
name|schedulerHandleTimerMap
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|timer
argument_list|)
expr_stmt|;
block|}
comment|// histogram for scheduler operations (Samplers)
name|schedulerHistogramList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|histogramTimerMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|Histogram
name|schedulerAllocateHistogram
init|=
operator|new
name|Histogram
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|SAMPLING_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"sampler.scheduler.operation.allocate.timecost"
argument_list|,
name|schedulerAllocateHistogram
argument_list|)
expr_stmt|;
name|schedulerHistogramList
operator|.
name|add
argument_list|(
name|schedulerAllocateHistogram
argument_list|)
expr_stmt|;
name|histogramTimerMap
operator|.
name|put
argument_list|(
name|schedulerAllocateHistogram
argument_list|,
name|schedulerAllocateTimer
argument_list|)
expr_stmt|;
name|Histogram
name|schedulerCommitHistogram
init|=
operator|new
name|Histogram
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|SAMPLING_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"sampler.scheduler.operation.commit.success.timecost"
argument_list|,
name|schedulerCommitHistogram
argument_list|)
expr_stmt|;
name|schedulerHistogramList
operator|.
name|add
argument_list|(
name|schedulerCommitHistogram
argument_list|)
expr_stmt|;
name|histogramTimerMap
operator|.
name|put
argument_list|(
name|schedulerCommitHistogram
argument_list|,
name|schedulerCommitSuccessTimer
argument_list|)
expr_stmt|;
name|Histogram
name|schedulerCommitFailureHistogram
init|=
operator|new
name|Histogram
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|SAMPLING_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"sampler.scheduler.operation.commit.failure.timecost"
argument_list|,
name|schedulerCommitFailureHistogram
argument_list|)
expr_stmt|;
name|schedulerHistogramList
operator|.
name|add
argument_list|(
name|schedulerCommitFailureHistogram
argument_list|)
expr_stmt|;
name|histogramTimerMap
operator|.
name|put
argument_list|(
name|schedulerCommitFailureHistogram
argument_list|,
name|schedulerCommitFailureTimer
argument_list|)
expr_stmt|;
name|Histogram
name|schedulerHandleHistogram
init|=
operator|new
name|Histogram
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|SAMPLING_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"sampler.scheduler.operation.handle.timecost"
argument_list|,
name|schedulerHandleHistogram
argument_list|)
expr_stmt|;
name|schedulerHistogramList
operator|.
name|add
argument_list|(
name|schedulerHandleHistogram
argument_list|)
expr_stmt|;
name|histogramTimerMap
operator|.
name|put
argument_list|(
name|schedulerHandleHistogram
argument_list|,
name|schedulerHandleTimer
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulerEventType
name|e
range|:
name|SchedulerEventType
operator|.
name|values
argument_list|()
control|)
block|{
name|Histogram
name|histogram
init|=
operator|new
name|Histogram
argument_list|(
operator|new
name|SlidingWindowReservoir
argument_list|(
name|SAMPLING_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"sampler.scheduler.operation.handle."
operator|+
name|e
operator|+
literal|".timecost"
argument_list|,
name|histogram
argument_list|)
expr_stmt|;
name|schedulerHistogramList
operator|.
name|add
argument_list|(
name|histogram
argument_list|)
expr_stmt|;
name|histogramTimerMap
operator|.
name|put
argument_list|(
name|histogram
argument_list|,
name|schedulerHandleTimerMap
operator|.
name|get
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|samplerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|initMetricsCSVOutput ()
specifier|private
name|void
name|initMetricsCSVOutput
parameter_list|()
block|{
name|int
name|timeIntervalMS
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SLSConfiguration
operator|.
name|METRICS_RECORD_INTERVAL_MS
argument_list|,
name|SLSConfiguration
operator|.
name|METRICS_RECORD_INTERVAL_MS_DEFAULT
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|metricsOutputDir
operator|+
literal|"/metrics"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot create directory {}"
argument_list|,
name|dir
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CsvReporter
name|reporter
init|=
name|CsvReporter
operator|.
name|forRegistry
argument_list|(
name|metrics
argument_list|)
operator|.
name|formatFor
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|convertRatesTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|convertDurationsTo
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|File
argument_list|(
name|metricsOutputDir
operator|+
literal|"/metrics"
argument_list|)
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|start
argument_list|(
name|timeIntervalMS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|isRunning ()
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
return|;
block|}
DECL|method|setRunning (boolean running)
name|void
name|setRunning
parameter_list|(
name|boolean
name|running
parameter_list|)
block|{
name|this
operator|.
name|running
operator|=
name|running
expr_stmt|;
block|}
DECL|class|HistogramsRunnable
class|class
name|HistogramsRunnable
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|samplerLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Histogram
name|histogram
range|:
name|schedulerHistogramList
control|)
block|{
name|Timer
name|timer
init|=
name|histogramTimerMap
operator|.
name|get
argument_list|(
name|histogram
argument_list|)
decl_stmt|;
name|histogram
operator|.
name|update
argument_list|(
operator|(
name|int
operator|)
name|timer
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|samplerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|MetricsLogRunnable
class|class
name|MetricsLogRunnable
implements|implements
name|Runnable
block|{
DECL|field|firstLine
specifier|private
name|boolean
name|firstLine
init|=
literal|true
decl_stmt|;
DECL|method|MetricsLogRunnable ()
name|MetricsLogRunnable
parameter_list|()
block|{
try|try
block|{
name|metricsLogBW
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|metricsOutputDir
operator|+
literal|"/realtimetrack.json"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|metricsLogBW
operator|.
name|write
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|SchedulerWrapper
name|wrapper
init|=
operator|(
name|SchedulerWrapper
operator|)
name|scheduler
decl_stmt|;
if|if
condition|(
name|running
operator|&&
name|wrapper
operator|.
name|getTracker
argument_list|()
operator|.
name|getQueueSet
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// all WebApp to get real tracking json
name|String
name|trackingMetrics
init|=
name|web
operator|.
name|generateRealTimeTrackingMetrics
argument_list|()
decl_stmt|;
comment|// output
try|try
block|{
if|if
condition|(
name|firstLine
condition|)
block|{
name|metricsLogBW
operator|.
name|write
argument_list|(
name|trackingMetrics
operator|+
name|EOL
argument_list|)
expr_stmt|;
name|firstLine
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|metricsLogBW
operator|.
name|write
argument_list|(
literal|","
operator|+
name|trackingMetrics
operator|+
name|EOL
argument_list|)
expr_stmt|;
block|}
name|metricsLogBW
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|tearDown ()
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|metricsLogBW
operator|!=
literal|null
condition|)
block|{
name|metricsLogBW
operator|.
name|write
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|metricsLogBW
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|web
operator|!=
literal|null
condition|)
block|{
name|web
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jobRuntimeLogBW
operator|!=
literal|null
condition|)
block|{
name|jobRuntimeLogBW
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|increaseSchedulerAllocationCounter ()
name|void
name|increaseSchedulerAllocationCounter
parameter_list|()
block|{
name|schedulerAllocateCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
DECL|method|increaseSchedulerCommitSuccessCounter ()
name|void
name|increaseSchedulerCommitSuccessCounter
parameter_list|()
block|{
name|schedulerCommitSuccessCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
DECL|method|increaseSchedulerCommitFailureCounter ()
name|void
name|increaseSchedulerCommitFailureCounter
parameter_list|()
block|{
name|schedulerCommitFailureCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
DECL|method|increaseSchedulerHandleCounter (SchedulerEventType schedulerEventType)
name|void
name|increaseSchedulerHandleCounter
parameter_list|(
name|SchedulerEventType
name|schedulerEventType
parameter_list|)
block|{
name|schedulerHandleCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
name|schedulerHandleCounterMap
operator|.
name|get
argument_list|(
name|schedulerEventType
argument_list|)
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
DECL|method|getSchedulerAllocateTimer ()
name|Timer
name|getSchedulerAllocateTimer
parameter_list|()
block|{
return|return
name|schedulerAllocateTimer
return|;
block|}
DECL|method|getSchedulerCommitSuccessTimer ()
name|Timer
name|getSchedulerCommitSuccessTimer
parameter_list|()
block|{
return|return
name|schedulerCommitSuccessTimer
return|;
block|}
DECL|method|getSchedulerCommitFailureTimer ()
name|Timer
name|getSchedulerCommitFailureTimer
parameter_list|()
block|{
return|return
name|schedulerCommitFailureTimer
return|;
block|}
DECL|method|getSchedulerHandleTimer ()
name|Timer
name|getSchedulerHandleTimer
parameter_list|()
block|{
return|return
name|schedulerHandleTimer
return|;
block|}
DECL|method|getSchedulerHandleTimer (SchedulerEventType schedulerEventType)
name|Timer
name|getSchedulerHandleTimer
parameter_list|(
name|SchedulerEventType
name|schedulerEventType
parameter_list|)
block|{
return|return
name|schedulerHandleTimerMap
operator|.
name|get
argument_list|(
name|schedulerEventType
argument_list|)
return|;
block|}
DECL|enum|QueueMetric
specifier|private
enum|enum
name|QueueMetric
block|{
DECL|enumConstant|PENDING_MEMORY
name|PENDING_MEMORY
argument_list|(
literal|"pending.memory"
argument_list|)
block|,
DECL|enumConstant|PENDING_VCORES
name|PENDING_VCORES
argument_list|(
literal|"pending.cores"
argument_list|)
block|,
DECL|enumConstant|ALLOCATED_MEMORY
name|ALLOCATED_MEMORY
argument_list|(
literal|"allocated.memory"
argument_list|)
block|,
DECL|enumConstant|ALLOCATED_VCORES
name|ALLOCATED_VCORES
argument_list|(
literal|"allocated.cores"
argument_list|)
block|;
DECL|field|value
specifier|private
name|String
name|value
decl_stmt|;
DECL|method|QueueMetric (String value)
name|QueueMetric
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
DECL|method|getQueueMetricName (String queue, QueueMetric metric)
specifier|private
name|String
name|getQueueMetricName
parameter_list|(
name|String
name|queue
parameter_list|,
name|QueueMetric
name|metric
parameter_list|)
block|{
return|return
literal|"counter.queue."
operator|+
name|queue
operator|+
literal|"."
operator|+
name|metric
operator|.
name|value
return|;
block|}
DECL|method|updateQueueMetrics (Resource pendingResource, Resource allocatedResource, String queueName)
name|void
name|updateQueueMetrics
parameter_list|(
name|Resource
name|pendingResource
parameter_list|,
name|Resource
name|allocatedResource
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|trackQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|counterMap
init|=
name|metrics
operator|.
name|getCounters
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueMetric
name|metric
range|:
name|QueueMetric
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|metricName
init|=
name|getQueueMetricName
argument_list|(
name|queueName
argument_list|,
name|metric
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|==
name|QueueMetric
operator|.
name|PENDING_MEMORY
condition|)
block|{
name|counterMap
operator|.
name|get
argument_list|(
name|metricName
argument_list|)
operator|.
name|inc
argument_list|(
name|pendingResource
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|==
name|QueueMetric
operator|.
name|PENDING_VCORES
condition|)
block|{
name|counterMap
operator|.
name|get
argument_list|(
name|metricName
argument_list|)
operator|.
name|inc
argument_list|(
name|pendingResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|==
name|QueueMetric
operator|.
name|ALLOCATED_MEMORY
condition|)
block|{
name|counterMap
operator|.
name|get
argument_list|(
name|metricName
argument_list|)
operator|.
name|inc
argument_list|(
name|allocatedResource
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|==
name|QueueMetric
operator|.
name|ALLOCATED_VCORES
condition|)
block|{
name|counterMap
operator|.
name|get
argument_list|(
name|metricName
argument_list|)
operator|.
name|inc
argument_list|(
name|allocatedResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateQueueMetricsByRelease (Resource releaseResource, String queue)
name|void
name|updateQueueMetricsByRelease
parameter_list|(
name|Resource
name|releaseResource
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|counterMap
init|=
name|metrics
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|getQueueMetricName
argument_list|(
name|queue
argument_list|,
name|QueueMetric
operator|.
name|ALLOCATED_MEMORY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|counterMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|counter
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|counterMap
operator|=
name|metrics
operator|.
name|getCounters
argument_list|()
expr_stmt|;
block|}
name|counterMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|inc
argument_list|(
operator|-
name|releaseResource
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|vcoreMetric
init|=
name|getQueueMetricName
argument_list|(
name|queue
argument_list|,
name|QueueMetric
operator|.
name|ALLOCATED_VCORES
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|counterMap
operator|.
name|containsKey
argument_list|(
name|vcoreMetric
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|counter
argument_list|(
name|vcoreMetric
argument_list|)
expr_stmt|;
name|counterMap
operator|=
name|metrics
operator|.
name|getCounters
argument_list|()
expr_stmt|;
block|}
name|counterMap
operator|.
name|get
argument_list|(
name|vcoreMetric
argument_list|)
operator|.
name|inc
argument_list|(
operator|-
name|releaseResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addTrackedApp (ApplicationId appId, String oldAppId)
specifier|public
name|void
name|addTrackedApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|oldAppId
parameter_list|)
block|{
name|trackApp
argument_list|(
name|appId
argument_list|,
name|oldAppId
argument_list|)
expr_stmt|;
block|}
DECL|method|removeTrackedApp (String oldAppId)
specifier|public
name|void
name|removeTrackedApp
parameter_list|(
name|String
name|oldAppId
parameter_list|)
block|{
name|untrackApp
argument_list|(
name|oldAppId
argument_list|)
expr_stmt|;
block|}
DECL|method|addAMRuntime (ApplicationId appId, long traceStartTimeMS, long traceEndTimeMS, long simulateStartTimeMS, long simulateEndTimeMS)
specifier|public
name|void
name|addAMRuntime
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|long
name|traceStartTimeMS
parameter_list|,
name|long
name|traceEndTimeMS
parameter_list|,
name|long
name|simulateStartTimeMS
parameter_list|,
name|long
name|simulateEndTimeMS
parameter_list|)
block|{
try|try
block|{
comment|// write job runtime information
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|appId
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|traceStartTimeMS
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|traceEndTimeMS
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|simulateStartTimeMS
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|simulateEndTimeMS
argument_list|)
expr_stmt|;
name|jobRuntimeLogBW
operator|.
name|write
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|+
name|EOL
argument_list|)
expr_stmt|;
name|jobRuntimeLogBW
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

