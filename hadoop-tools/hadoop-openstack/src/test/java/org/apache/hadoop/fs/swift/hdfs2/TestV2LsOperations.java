begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.hdfs2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|hdfs2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|SwiftFileSystemBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|TestV2LsOperations
specifier|public
class|class
name|TestV2LsOperations
extends|extends
name|SwiftFileSystemBaseTest
block|{
DECL|field|testDirs
specifier|private
name|Path
index|[]
name|testDirs
decl_stmt|;
comment|/**    * Setup creates dirs under test/hadoop    * @throws Exception    */
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|//delete the test directory
name|Path
name|test
init|=
name|path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|test
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create subdirectories and files under test/ for those tests    * that want them. Doing so adds overhead to setup and teardown,    * so should only be done for those tests that need them.    * @throws IOException on an IO problem    */
DECL|method|createTestSubdirs ()
specifier|private
name|void
name|createTestSubdirs
parameter_list|()
throws|throws
name|IOException
block|{
name|testDirs
operator|=
operator|new
name|Path
index|[]
block|{
name|path
argument_list|(
literal|"/test/hadoop/a"
argument_list|)
block|,
name|path
argument_list|(
literal|"/test/hadoop/b"
argument_list|)
block|,
name|path
argument_list|(
literal|"/test/hadoop/c/1"
argument_list|)
block|,     }
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"test directory setup"
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * To get this project to compile under Hadoop 1, this code needs to be    * commented out    *    *    * @param fs filesystem    * @param dir dir    * @param subdir subdir    * @param recursive recurse?    * @throws IOException IO problems    */
DECL|method|assertListFilesFinds (FileSystem fs, Path dir, Path subdir, boolean recursive)
specifier|public
specifier|static
name|void
name|assertListFilesFinds
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|Path
name|subdir
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|iterator
init|=
name|fs
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|int
name|entries
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|entries
operator|++
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|next
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|subdir
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Path "
operator|+
name|subdir
operator|+
literal|" not found in directory "
operator|+
name|dir
operator|+
literal|" : "
operator|+
literal|" entries="
operator|+
name|entries
operator|+
literal|" content"
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testListFilesRootDir ()
specifier|public
name|void
name|testListFilesRootDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|child
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SwiftTestUtils
operator|.
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|child
argument_list|,
literal|"text"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertListFilesFinds
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testListFilesSubDir ()
specifier|public
name|void
name|testListFilesSubDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|createTestSubdirs
argument_list|()
expr_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"/test/subdir"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"text.txt"
argument_list|)
decl_stmt|;
name|SwiftTestUtils
operator|.
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|child
argument_list|,
literal|"text"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertListFilesFinds
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testListFilesRecursive ()
specifier|public
name|void
name|testListFilesRecursive
parameter_list|()
throws|throws
name|Throwable
block|{
name|createTestSubdirs
argument_list|()
expr_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"/test/recursive"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"hadoop/a/a.txt"
argument_list|)
decl_stmt|;
name|SwiftTestUtils
operator|.
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|child
argument_list|,
literal|"text"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertListFilesFinds
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|child
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

