begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Test Swift FS concurrency logic. This isn't a very accurate test,  * because it is hard to consistently generate race conditions.  * Consider it "best effort"  */
end_comment

begin_class
DECL|class|TestSwiftFileSystemConcurrency
specifier|public
class|class
name|TestSwiftFileSystemConcurrency
extends|extends
name|SwiftFileSystemBaseTest
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSwiftFileSystemConcurrency
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|thread1Ex
DECL|field|thread2Ex
specifier|private
name|Exception
name|thread1Ex
decl_stmt|,
name|thread2Ex
decl_stmt|;
DECL|field|TEST_RACE_CONDITION_ON_DELETE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|TEST_RACE_CONDITION_ON_DELETE_DIR
init|=
literal|"/test/testraceconditionondirdeletetest"
decl_stmt|;
comment|/**    * test on concurrent file system changes    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testRaceConditionOnDirDeleteTest ()
specifier|public
name|void
name|testRaceConditionOnDirDeleteTest
parameter_list|()
throws|throws
name|Exception
block|{
name|SwiftTestUtils
operator|.
name|skip
argument_list|(
literal|"Skipping unreliable test"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|message
init|=
literal|"message"
decl_stmt|;
specifier|final
name|Path
name|fileToRead
init|=
operator|new
name|Path
argument_list|(
name|TEST_RACE_CONDITION_ON_DELETE_DIR
operator|+
literal|"/files/many-files/file"
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_RACE_CONDITION_ON_DELETE_DIR
operator|+
literal|"/file/test/file1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_RACE_CONDITION_ON_DELETE_DIR
operator|+
literal|"/documents/doc1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_RACE_CONDITION_ON_DELETE_DIR
operator|+
literal|"/pictures/picture"
argument_list|)
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|assertDeleted
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_RACE_CONDITION_ON_DELETE_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"deletion thread:"
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|thread1Ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|fileToRead
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|message
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"writer thread:"
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|thread2Ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
if|if
condition|(
name|thread1Ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|thread1Ex
throw|;
block|}
if|if
condition|(
name|thread2Ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|thread2Ex
throw|;
block|}
try|try
block|{
name|fs
operator|.
name|open
argument_list|(
name|fileToRead
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"concurrency test failed to trigger a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|expected
parameter_list|)
block|{      }
block|}
block|}
end_class

end_unit

