begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftBadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|snative
operator|.
name|SwiftNativeFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
operator|.
name|assertFileHasLength
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
operator|.
name|assertIsDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
operator|.
name|readBytesToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
operator|.
name|writeTextFile
import|;
end_import

begin_comment
comment|/**  * Test basic filesystem operations.  * Many of these are similar to those in {@link TestSwiftFileSystemContract}  * -this is a JUnit4 test suite used to initially test the Swift  * component. Once written, there's no reason not to retain these tests.  */
end_comment

begin_class
DECL|class|TestSwiftFileSystemBasicOps
specifier|public
class|class
name|TestSwiftFileSystemBasicOps
extends|extends
name|SwiftFileSystemBaseTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSwiftFileSystemBasicOps
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLsRoot ()
specifier|public
name|void
name|testLsRoot
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testMkDir ()
specifier|public
name|void
name|testMkDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/MkDir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|//success then -so try a recursive operation
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDeleteNonexistentFile ()
specifier|public
name|void
name|testDeleteNonexistentFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/DeleteNonexistentFile"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"delete returned true"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testPutFile ()
specifier|public
name|void
name|testPutFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/PutFile"
argument_list|)
decl_stmt|;
name|Exception
name|caught
init|=
literal|null
decl_stmt|;
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|"Testing a put to a file"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testPutGetFile ()
specifier|public
name|void
name|testPutGetFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/PutGetFile"
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|text
init|=
literal|"Testing a put and get to a file "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|readBytesToString
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delete
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testPutDeleteFileInSubdir ()
specifier|public
name|void
name|testPutDeleteFileInSubdir
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/PutDeleteFileInSubdir/testPutDeleteFileInSubdir"
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"Testing a put and get to a file in a subdir "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//now delete the parent that should have no children
name|assertDeleted
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/PutDeleteFileInSubdir"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testRecursiveDelete ()
specifier|public
name|void
name|testRecursiveDelete
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|childpath
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testRecursiveDelete"
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"Testing a put and get to a file in a subdir "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|childpath
argument_list|,
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//now delete the parent that should have no children
name|assertDeleted
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"child entry still present "
operator|+
name|childpath
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|childpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|delete (SwiftNativeFileSystem fs, Path path)
specifier|private
name|void
name|delete
parameter_list|(
name|SwiftNativeFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"deleting "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteR (SwiftNativeFileSystem fs, Path path)
specifier|private
name|void
name|deleteR
parameter_list|(
name|SwiftNativeFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"deleting "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testOverwrite ()
specifier|public
name|void
name|testOverwrite
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/Overwrite"
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|text
init|=
literal|"Testing a put to a file "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFileHasLength
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|text2
init|=
literal|"Overwriting a file "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|text2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFileHasLength
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|text2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|readBytesToString
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|text2
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|text2
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delete
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testOverwriteDirectory ()
specifier|public
name|void
name|testOverwriteDirectory
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testOverwriteDirectory"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|text
init|=
literal|"Testing a put to a file "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFileHasLength
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delete
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testFileStatus ()
specifier|public
name|void
name|testFileStatus
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/FileStatus"
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|text
init|=
literal|"Testing File Status "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SwiftTestUtils
operator|.
name|assertIsFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delete
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assert that a newly created directory is a directory    *    * @throws Throwable if not, or if something else failed    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDirStatus ()
specifier|public
name|void
name|testDirStatus
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/DirStatus"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertIsDirectory
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delete
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assert that if a directory that has children is deleted, it is still    * a directory    *    * @throws Throwable if not, or if something else failed    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDirStaysADir ()
specifier|public
name|void
name|testDirStaysADir
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/dirStaysADir"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
try|try
block|{
comment|//create the dir
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|//assert the parent has the directory nature
name|assertIsDirectory
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|//create the child dir
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|child
argument_list|,
literal|"child file"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//assert the parent has the directory nature
name|assertIsDirectory
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|//now rm the child
name|delete
argument_list|(
name|fs
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteR
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testCreateMultilevelDir ()
specifier|public
name|void
name|testCreateMultilevelDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|base
init|=
operator|new
name|Path
argument_list|(
literal|"/test/CreateMultilevelDir"
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"1/2/3"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertExists
argument_list|(
literal|"deep multilevel dir not created"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|base
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"Multilevel delete failed"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"Multilevel delete failed"
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testCreateDirWithFileParent ()
specifier|public
name|void
name|testCreateDirWithFileParent
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/CreateDirWithFileParent"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"subdir/child"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|//create the child dir
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|"parent"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParentNotDirectoryException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Expected Exception"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLongObjectNamesForbidden ()
specifier|public
name|void
name|testLongObjectNamesForbidden
parameter_list|()
throws|throws
name|Throwable
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|1200
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
literal|1200
operator|/
literal|4
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%04x"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|pathString
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
try|try
block|{
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|pathString
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//if we get here, problems.
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Managed to create an object with a name of length "
operator|+
name|pathString
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SwiftBadRequestException
name|e
parameter_list|)
block|{
comment|//expected
comment|//LOG.debug("Caught exception " + e, e);
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLsNonExistentFile ()
specifier|public
name|void
name|testLsNonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should throw FileNotFoundException on "
operator|+
name|path
operator|+
literal|" but got list of length "
operator|+
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

