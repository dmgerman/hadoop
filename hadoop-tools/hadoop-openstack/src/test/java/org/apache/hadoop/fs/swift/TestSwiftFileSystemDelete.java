begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Test deletion operations  */
end_comment

begin_class
DECL|class|TestSwiftFileSystemDelete
specifier|public
class|class
name|TestSwiftFileSystemDelete
extends|extends
name|SwiftFileSystemBaseTest
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDeleteEmptyFile ()
specifier|public
name|void
name|testDeleteEmptyFile
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testDeleteEmptyFile"
argument_list|)
decl_stmt|;
name|createEmptyFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|SwiftTestUtils
operator|.
name|noteAction
argument_list|(
literal|"about to delete"
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDeleteEmptyFileTwice ()
specifier|public
name|void
name|testDeleteEmptyFileTwice
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testDeleteEmptyFileTwice"
argument_list|)
decl_stmt|;
name|createEmptyFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SwiftTestUtils
operator|.
name|noteAction
argument_list|(
literal|"multiple creates, and deletes"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Delete returned true"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|createEmptyFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Delete returned true"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDeleteNonEmptyFile ()
specifier|public
name|void
name|testDeleteNonEmptyFile
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testDeleteNonEmptyFile"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDeleteNonEmptyFileTwice ()
specifier|public
name|void
name|testDeleteNonEmptyFileTwice
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testDeleteNonEmptyFileTwice"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Delete returned true"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Delete returned true"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDeleteTestDir ()
specifier|public
name|void
name|testDeleteTestDir
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/test/"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"Test dir found"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test recursive root directory deletion fails if there is an entry underneath    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testRmRootDirRecursiveIsForbidden ()
specifier|public
name|void
name|testRmRootDirRecursiveIsForbidden
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|root
init|=
name|path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Path
name|testFile
init|=
name|path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rm(/) returned false"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertExists
argument_list|(
literal|"Root dir is missing"
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"test file not deleted"
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

