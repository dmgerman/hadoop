begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|snative
operator|.
name|SwiftFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_comment
comment|/**  * Test swift-specific directory logic.  * This class is HDFS-1 compatible; its designed to be subclasses by something  * with HDFS2 extensions  */
end_comment

begin_class
DECL|class|TestSwiftFileSystemDirectories
specifier|public
class|class
name|TestSwiftFileSystemDirectories
extends|extends
name|SwiftFileSystemBaseTest
block|{
comment|/**    * Asserts that a zero byte file has a status of file and not    * directory or symlink    *    * @throws Exception on failures    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testZeroByteFilesAreDirectories ()
specifier|public
name|void
name|testZeroByteFilesAreDirectories
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/testZeroByteFilesAreFiles"
argument_list|)
decl_stmt|;
comment|//create a zero byte file
name|SwiftTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|SwiftTestUtils
operator|.
name|assertIsDirectory
argument_list|(
name|fs
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testNoStatusForMissingDirectories ()
specifier|public
name|void
name|testNoStatusForMissingDirectories
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|missing
init|=
name|path
argument_list|(
literal|"/test/testNoStatusForMissingDirectories"
argument_list|)
decl_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"leftover?"
argument_list|,
name|missing
argument_list|)
expr_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|missing
argument_list|)
decl_stmt|;
comment|//not expected
name|fail
argument_list|(
literal|"Expected a FileNotFoundException, got the status "
operator|+
name|statuses
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|expected
parameter_list|)
block|{
comment|//expected
block|}
block|}
comment|/**    * test that a dir off root has a listStatus() call that    * works as expected. and that when a child is added. it changes    *    * @throws Exception on failures    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDirectoriesOffRootHaveMatchingFileStatus ()
specifier|public
name|void
name|testDirectoriesOffRootHaveMatchingFileStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|test
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertExists
argument_list|(
literal|"created test directory"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|String
name|statusString
init|=
name|statusToString
argument_list|(
name|test
operator|.
name|toString
argument_list|()
argument_list|,
name|statuses
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of elements in file status "
operator|+
name|statusString
argument_list|,
literal|0
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/file"
argument_list|)
decl_stmt|;
comment|//create a zero byte file
name|SwiftTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|src
argument_list|)
expr_stmt|;
comment|//stat it
name|statuses
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|statusString
operator|=
name|statusToString
argument_list|(
name|test
operator|.
name|toString
argument_list|()
argument_list|,
name|statuses
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of elements in file status "
operator|+
name|statusString
argument_list|,
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|SwiftFileStatus
name|stat
init|=
operator|(
name|SwiftFileStatus
operator|)
name|statuses
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"isDir(): Not a directory: "
operator|+
name|stat
argument_list|,
name|stat
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
name|extraStatusAssertions
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
comment|/**    * test that a dir two levels down has a listStatus() call that    * works as expected.    *    * @throws Exception on failures    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDirectoriesLowerDownHaveMatchingFileStatus ()
specifier|public
name|void
name|testDirectoriesLowerDownHaveMatchingFileStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|test
init|=
name|path
argument_list|(
literal|"/test/testDirectoriesLowerDownHaveMatchingFileStatus"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|test
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertExists
argument_list|(
literal|"created test sub directory"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|String
name|statusString
init|=
name|statusToString
argument_list|(
name|test
operator|.
name|toString
argument_list|()
argument_list|,
name|statuses
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of elements in file status "
operator|+
name|statusString
argument_list|,
literal|0
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|statusToString (String pathname, FileStatus[] statuses)
specifier|private
name|String
name|statusToString
parameter_list|(
name|String
name|pathname
parameter_list|,
name|FileStatus
index|[]
name|statuses
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|statuses
argument_list|)
expr_stmt|;
return|return
name|SwiftTestUtils
operator|.
name|dumpStats
argument_list|(
name|pathname
argument_list|,
name|statuses
argument_list|)
return|;
block|}
comment|/**    * method for subclasses to add extra assertions    * @param stat status to look at    */
DECL|method|extraStatusAssertions (SwiftFileStatus stat)
specifier|protected
name|void
name|extraStatusAssertions
parameter_list|(
name|SwiftFileStatus
name|stat
parameter_list|)
block|{    }
comment|/**    * Asserts that a zero byte file has a status of file and not    * directory or symlink    *    * @throws Exception on failures    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testMultiByteFilesAreFiles ()
specifier|public
name|void
name|testMultiByteFilesAreFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/testMultiByteFilesAreFiles"
argument_list|)
decl_stmt|;
name|SwiftTestUtils
operator|.
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|src
argument_list|,
literal|"testMultiByteFilesAreFiles"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertIsFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

