begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * This test just debugs which log resources are being picked up  */
end_comment

begin_class
DECL|class|TestLogResources
specifier|public
class|class
name|TestLogResources
implements|implements
name|SwiftTestConstants
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLogResources
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|printf (String format, Object... args)
specifier|private
name|void
name|printf
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|msg
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testWhichLog4JPropsFile ()
specifier|public
name|void
name|testWhichLog4JPropsFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|locateResource
argument_list|(
literal|"log4j.properties"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testWhichLog4JXMLFile ()
specifier|public
name|void
name|testWhichLog4JXMLFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|locateResource
argument_list|(
literal|"log4j.XML"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testCommonsLoggingProps ()
specifier|public
name|void
name|testCommonsLoggingProps
parameter_list|()
throws|throws
name|Throwable
block|{
name|locateResource
argument_list|(
literal|"commons-logging.properties"
argument_list|)
expr_stmt|;
block|}
DECL|method|locateResource (String resource)
specifier|private
name|void
name|locateResource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|URL
name|url
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|printf
argument_list|(
literal|"resource %s is at %s"
argument_list|,
name|resource
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printf
argument_list|(
literal|"resource %s is not on the classpath"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

