begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests that blocksize is never zero for a file, either in the FS default  * or the FileStatus value of a queried file   */
end_comment

begin_class
DECL|class|TestSwiftFileSystemBlocksize
specifier|public
class|class
name|TestSwiftFileSystemBlocksize
extends|extends
name|SwiftFileSystemBaseTest
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDefaultBlocksizeNonZero ()
specifier|public
name|void
name|testDefaultBlocksizeNonZero
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertTrue
argument_list|(
literal|"Zero default blocksize"
argument_list|,
literal|0L
operator|!=
name|getFs
argument_list|()
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDefaultBlocksizeRootPathNonZero ()
specifier|public
name|void
name|testDefaultBlocksizeRootPathNonZero
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertTrue
argument_list|(
literal|"Zero default blocksize"
argument_list|,
literal|0L
operator|!=
name|getFs
argument_list|()
operator|.
name|getDefaultBlockSize
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDefaultBlocksizeOtherPathNonZero ()
specifier|public
name|void
name|testDefaultBlocksizeOtherPathNonZero
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertTrue
argument_list|(
literal|"Zero default blocksize"
argument_list|,
literal|0L
operator|!=
name|getFs
argument_list|()
operator|.
name|getDefaultBlockSize
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testBlocksizeNonZeroForFile ()
specifier|public
name|void
name|testBlocksizeNonZeroForFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|smallfile
init|=
operator|new
name|Path
argument_list|(
literal|"/test/smallfile"
argument_list|)
decl_stmt|;
name|SwiftTestUtils
operator|.
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|smallfile
argument_list|,
literal|"blocksize"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|smallfile
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|getFs
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|smallfile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Zero blocksize in "
operator|+
name|status
argument_list|,
name|status
operator|.
name|getBlockSize
argument_list|()
operator|!=
literal|0L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Zero replication in "
operator|+
name|status
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
operator|!=
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

