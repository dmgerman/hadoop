begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConnectionClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Seek tests verify that  *<ol>  *<li>When you seek on a 0 byte file to byte (0), it's not an error.</li>  *<li>When you seek past the end of a file, it's an error that should  *   raise -what- EOFException?</li>  *<li>when you seek forwards, you get new data</li>  *<li>when you seek backwards, you get the previous data</li>  *<li>That this works for big multi-MB files as well as small ones.</li>  *</ol>  * These may seem "obvious", but the more the input streams try to be clever  * about offsets and buffering, the more likely it is that seek() will start  * to get confused.  */
end_comment

begin_class
DECL|class|TestSeek
specifier|public
class|class
name|TestSeek
extends|extends
name|SwiftFileSystemBaseTest
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSeek
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SMALL_SEEK_FILE_LEN
specifier|public
specifier|static
specifier|final
name|int
name|SMALL_SEEK_FILE_LEN
init|=
literal|256
decl_stmt|;
DECL|field|testPath
specifier|private
name|Path
name|testPath
decl_stmt|;
DECL|field|smallSeekFile
specifier|private
name|Path
name|smallSeekFile
decl_stmt|;
DECL|field|zeroByteFile
specifier|private
name|Path
name|zeroByteFile
decl_stmt|;
DECL|field|instream
specifier|private
name|FSDataInputStream
name|instream
decl_stmt|;
comment|/**    * Setup creates dirs under test/hadoop    *    * @throws Exception    */
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|//delete the test directory
name|testPath
operator|=
name|path
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|smallSeekFile
operator|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"seekfile.txt"
argument_list|)
expr_stmt|;
name|zeroByteFile
operator|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"zero.txt"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|block
init|=
name|SwiftTestUtils
operator|.
name|dataset
argument_list|(
name|SMALL_SEEK_FILE_LEN
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
comment|//this file now has a simple rule: offset => value
name|createFile
argument_list|(
name|smallSeekFile
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|createEmptyFile
argument_list|(
name|zeroByteFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanFile ()
specifier|public
name|void
name|cleanFile
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|instream
argument_list|)
expr_stmt|;
name|instream
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testSeekZeroByteFile ()
specifier|public
name|void
name|testSeekZeroByteFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|zeroByteFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|//expect initial read to fai;
name|int
name|result
init|=
name|instream
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertMinusOne
argument_list|(
literal|"initial byte read"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
comment|//expect that seek to 0 works
name|instream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//reread, expect same exception
name|result
operator|=
name|instream
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertMinusOne
argument_list|(
literal|"post-seek byte read"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|instream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMinusOne
argument_list|(
literal|"post-seek buffer read"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testBlockReadZeroByteFile ()
specifier|public
name|void
name|testBlockReadZeroByteFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|zeroByteFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|//expect that seek to 0 works
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|int
name|result
init|=
name|instream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertMinusOne
argument_list|(
literal|"block read zero byte file"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testSeekReadClosedFile ()
specifier|public
name|void
name|testSeekReadClosedFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|smallSeekFile
argument_list|)
expr_stmt|;
name|instream
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|instream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SwiftConnectionClosedException
name|e
parameter_list|)
block|{
comment|//expected a closed file
block|}
try|try
block|{
name|instream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected a closed file
block|}
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|int
name|result
init|=
name|instream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected a closed file
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testNegativeSeek ()
specifier|public
name|void
name|testNegativeSeek
parameter_list|()
throws|throws
name|Throwable
block|{
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|smallSeekFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|instream
operator|.
name|seek
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|long
name|p
init|=
name|instream
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Seek to -1 returned a position of "
operator|+
name|p
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|instream
operator|.
name|read
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"expected an exception, got data "
operator|+
name|result
operator|+
literal|" at a position of "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//bad seek -expected
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testSeekFile ()
specifier|public
name|void
name|testSeekFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|smallSeekFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|//expect that seek to 0 works
name|instream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|instream
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|instream
operator|.
name|seek
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|instream
operator|.
name|seek
argument_list|(
literal|63
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|63
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testSeekAndReadPastEndOfFile ()
specifier|public
name|void
name|testSeekAndReadPastEndOfFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|smallSeekFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|//expect that seek to 0 works
comment|//go just before the end
name|instream
operator|.
name|seek
argument_list|(
name|SMALL_SEEK_FILE_LEN
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Premature EOF"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Premature EOF"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertMinusOne
argument_list|(
literal|"read past end of file"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testSeekAndPastEndOfFileThenReseekAndRead ()
specifier|public
name|void
name|testSeekAndPastEndOfFileThenReseekAndRead
parameter_list|()
throws|throws
name|Throwable
block|{
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|smallSeekFile
argument_list|)
expr_stmt|;
comment|//go just before the end. This may or may not fail; it may be delayed until the
comment|//read
try|try
block|{
name|instream
operator|.
name|seek
argument_list|(
name|SMALL_SEEK_FILE_LEN
argument_list|)
expr_stmt|;
comment|//if this doesn't trigger, then read() is expected to fail
name|assertMinusOne
argument_list|(
literal|"read after seeking past EOF"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|expected
parameter_list|)
block|{
comment|//here an exception was raised in seek
block|}
name|instream
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Premature EOF"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SwiftProtocolConstants
operator|.
name|SWIFT_REQUEST_SIZE
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testSeekBigFile ()
specifier|public
name|void
name|testSeekBigFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|testSeekFile
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"bigseekfile.txt"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|block
init|=
name|SwiftTestUtils
operator|.
name|dataset
argument_list|(
literal|65536
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|testSeekFile
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|testSeekFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|//expect that seek to 0 works
name|instream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|instream
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//do seek 32KB ahead
name|instream
operator|.
name|seek
argument_list|(
literal|32768
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"@32768"
argument_list|,
name|block
index|[
literal|32768
index|]
argument_list|,
operator|(
name|byte
operator|)
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|instream
operator|.
name|seek
argument_list|(
literal|40000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"@40000"
argument_list|,
name|block
index|[
literal|40000
index|]
argument_list|,
operator|(
name|byte
operator|)
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|instream
operator|.
name|seek
argument_list|(
literal|8191
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"@8191"
argument_list|,
name|block
index|[
literal|8191
index|]
argument_list|,
operator|(
name|byte
operator|)
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|instream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"@0"
argument_list|,
literal|0
argument_list|,
operator|(
name|byte
operator|)
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testPositionedBulkReadDoesntChangePosition ()
specifier|public
name|void
name|testPositionedBulkReadDoesntChangePosition
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|testSeekFile
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"bigseekfile.txt"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|block
init|=
name|SwiftTestUtils
operator|.
name|dataset
argument_list|(
literal|65536
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|testSeekFile
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|testSeekFile
argument_list|)
expr_stmt|;
name|instream
operator|.
name|seek
argument_list|(
literal|39999
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|-
literal|1
operator|!=
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40000
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|readBuffer
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
name|instream
operator|.
name|read
argument_list|(
literal|128
argument_list|,
name|readBuffer
argument_list|,
literal|0
argument_list|,
name|readBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//have gone back
name|assertEquals
argument_list|(
literal|40000
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|//content is the same too
name|assertEquals
argument_list|(
literal|"@40000"
argument_list|,
name|block
index|[
literal|40000
index|]
argument_list|,
operator|(
name|byte
operator|)
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//now verify the picked up data
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"@"
operator|+
name|i
argument_list|,
name|block
index|[
name|i
operator|+
literal|128
index|]
argument_list|,
name|readBuffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * work out the expected byte from a specific offset    * @param offset offset in the file    * @return the value    */
DECL|method|expectedByte (int offset)
name|int
name|expectedByte
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|offset
operator|&
literal|0xff
return|;
block|}
block|}
end_class

end_unit

