begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|SwiftTestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|DOT_AUTH_URL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|DOT_PASSWORD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|DOT_USERNAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_AUTH_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_CONTAINER_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_HTTPS_PORT_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_HTTP_PORT_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_PASSWORD_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_REGION_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_SERVICE_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_TENANT_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_USERNAME_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
operator|.
name|assertPropertyEquals
import|;
end_import

begin_class
DECL|class|TestRestClientBindings
specifier|public
class|class
name|TestRestClientBindings
extends|extends
name|Assert
implements|implements
name|SwiftTestConstants
block|{
DECL|field|SERVICE
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE
init|=
literal|"sname"
decl_stmt|;
DECL|field|CONTAINER
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER
init|=
literal|"cname"
decl_stmt|;
DECL|field|FS_URI
specifier|private
specifier|static
specifier|final
name|String
name|FS_URI
init|=
literal|"swift://"
operator|+
name|CONTAINER
operator|+
literal|"."
operator|+
name|SERVICE
operator|+
literal|"/"
decl_stmt|;
DECL|field|AUTH_URL
specifier|private
specifier|static
specifier|final
name|String
name|AUTH_URL
init|=
literal|"http://localhost:8080/auth"
decl_stmt|;
DECL|field|USER
specifier|private
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"user"
decl_stmt|;
DECL|field|PASS
specifier|private
specifier|static
specifier|final
name|String
name|PASS
init|=
literal|"pass"
decl_stmt|;
DECL|field|TENANT
specifier|private
specifier|static
specifier|final
name|String
name|TENANT
init|=
literal|"tenant"
decl_stmt|;
DECL|field|filesysURI
specifier|private
name|URI
name|filesysURI
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|filesysURI
operator|=
operator|new
name|URI
argument_list|(
name|FS_URI
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setInstanceVal
argument_list|(
name|conf
argument_list|,
name|SERVICE
argument_list|,
name|DOT_AUTH_URL
argument_list|,
name|AUTH_URL
argument_list|)
expr_stmt|;
name|setInstanceVal
argument_list|(
name|conf
argument_list|,
name|SERVICE
argument_list|,
name|DOT_USERNAME
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|setInstanceVal
argument_list|(
name|conf
argument_list|,
name|SERVICE
argument_list|,
name|DOT_PASSWORD
argument_list|,
name|PASS
argument_list|)
expr_stmt|;
block|}
DECL|method|setInstanceVal (Configuration conf, String host, String key, String val)
specifier|private
name|void
name|setInstanceVal
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|String
name|instance
init|=
name|RestClientBindings
operator|.
name|buildSwiftInstancePrefix
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|confkey
init|=
name|instance
operator|+
name|key
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|confkey
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixBuilder ()
specifier|public
name|void
name|testPrefixBuilder
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|built
init|=
name|RestClientBindings
operator|.
name|buildSwiftInstancePrefix
argument_list|(
name|SERVICE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"fs.swift.service."
operator|+
name|SERVICE
argument_list|,
name|built
argument_list|)
expr_stmt|;
block|}
DECL|method|testBindAgainstConf ()
specifier|public
name|void
name|testBindAgainstConf
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
name|RestClientBindings
operator|.
name|bind
argument_list|(
name|filesysURI
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertPropertyEquals
argument_list|(
name|props
argument_list|,
name|SWIFT_CONTAINER_PROPERTY
argument_list|,
name|CONTAINER
argument_list|)
expr_stmt|;
name|assertPropertyEquals
argument_list|(
name|props
argument_list|,
name|SWIFT_SERVICE_PROPERTY
argument_list|,
name|SERVICE
argument_list|)
expr_stmt|;
name|assertPropertyEquals
argument_list|(
name|props
argument_list|,
name|SWIFT_AUTH_PROPERTY
argument_list|,
name|AUTH_URL
argument_list|)
expr_stmt|;
name|assertPropertyEquals
argument_list|(
name|props
argument_list|,
name|SWIFT_AUTH_PROPERTY
argument_list|,
name|AUTH_URL
argument_list|)
expr_stmt|;
name|assertPropertyEquals
argument_list|(
name|props
argument_list|,
name|SWIFT_USERNAME_PROPERTY
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|assertPropertyEquals
argument_list|(
name|props
argument_list|,
name|SWIFT_PASSWORD_PROPERTY
argument_list|,
name|PASS
argument_list|)
expr_stmt|;
name|assertPropertyEquals
argument_list|(
name|props
argument_list|,
name|SWIFT_TENANT_PROPERTY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertPropertyEquals
argument_list|(
name|props
argument_list|,
name|SWIFT_REGION_PROPERTY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertPropertyEquals
argument_list|(
name|props
argument_list|,
name|SWIFT_HTTP_PORT_PROPERTY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertPropertyEquals
argument_list|(
name|props
argument_list|,
name|SWIFT_HTTPS_PORT_PROPERTY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|expectBindingFailure (URI fsURI, Configuration config)
specifier|public
name|void
name|expectBindingFailure
parameter_list|(
name|URI
name|fsURI
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
try|try
block|{
name|Properties
name|binding
init|=
name|RestClientBindings
operator|.
name|bind
argument_list|(
name|fsURI
argument_list|,
name|config
argument_list|)
decl_stmt|;
comment|//if we get here, binding didn't fail- there is something else.
comment|//list the properties but not the values.
name|StringBuilder
name|details
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|binding
operator|.
name|keySet
argument_list|()
control|)
block|{
name|details
operator|.
name|append
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Expected a failure, got the binding [ "
operator|+
name|details
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SwiftConfigurationException
name|expected
parameter_list|)
block|{      }
block|}
DECL|method|testBindAgainstConfMissingInstance ()
specifier|public
name|void
name|testBindAgainstConfMissingInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|badConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|expectBindingFailure
argument_list|(
name|filesysURI
argument_list|,
name|badConf
argument_list|)
expr_stmt|;
block|}
comment|/* Hadoop 2.x+ only, as conf.unset() isn't a v1 feature   public void testBindAgainstConfIncompleteInstance() throws Exception {     String instance = RestClientBindings.buildSwiftInstancePrefix(SERVICE);     conf.unset(instance + DOT_PASSWORD);     expectBindingFailure(filesysURI, conf);   } */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SwiftConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testDottedServiceURL ()
specifier|public
name|void
name|testDottedServiceURL
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClientBindings
operator|.
name|bind
argument_list|(
operator|new
name|URI
argument_list|(
literal|"swift://hadoop.apache.org/"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SwiftConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testMissingServiceURL ()
specifier|public
name|void
name|testMissingServiceURL
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClientBindings
operator|.
name|bind
argument_list|(
operator|new
name|URI
argument_list|(
literal|"swift:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * inner test method that expects container extraction to fail    * -if not prints a meaningful error message.    *    * @param hostname hostname to parse    */
DECL|method|expectExtractContainerFail (String hostname)
specifier|private
specifier|static
name|void
name|expectExtractContainerFail
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
try|try
block|{
name|String
name|container
init|=
name|RestClientBindings
operator|.
name|extractContainerName
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected an error -got a container of '"
operator|+
name|container
operator|+
literal|"' from "
operator|+
name|hostname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SwiftConfigurationException
name|expected
parameter_list|)
block|{
comment|//expected
block|}
block|}
comment|/**    * inner test method that expects service extraction to fail    * -if not prints a meaningful error message.    *    * @param hostname hostname to parse    */
DECL|method|expectExtractServiceFail (String hostname)
specifier|public
specifier|static
name|void
name|expectExtractServiceFail
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
try|try
block|{
name|String
name|service
init|=
name|RestClientBindings
operator|.
name|extractServiceName
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected an error -got a service of '"
operator|+
name|service
operator|+
literal|"' from "
operator|+
name|hostname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SwiftConfigurationException
name|expected
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testEmptyHostname ()
specifier|public
name|void
name|testEmptyHostname
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectExtractContainerFail
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|expectExtractServiceFail
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testDot ()
specifier|public
name|void
name|testDot
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectExtractContainerFail
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|expectExtractServiceFail
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testSimple ()
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectExtractContainerFail
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
name|expectExtractServiceFail
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testTrailingDot ()
specifier|public
name|void
name|testTrailingDot
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectExtractServiceFail
argument_list|(
literal|"simple."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLeadingDot ()
specifier|public
name|void
name|testLeadingDot
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectExtractServiceFail
argument_list|(
literal|".leading"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

