begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Seek tests verify that  *<ol>  *<li>When you seek on a 0 byte file to byte (0), it's not an error.</li>  *<li>When you seek past the end of a file, it's an error that should  *   raise -what- EOFException?</li>  *<li>when you seek forwards, you get new data</li>  *<li>when you seek backwards, you get the previous data</li>  *<li>That this works for big multi-MB files as well as small ones.</li>  *</ol>  * These may seem "obvious", but the more the input streams try to be clever  * about offsets and buffering, the more likely it is that seek() will start  * to get confused.  */
end_comment

begin_class
DECL|class|TestReadPastBuffer
specifier|public
class|class
name|TestReadPastBuffer
extends|extends
name|SwiftFileSystemBaseTest
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestReadPastBuffer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SWIFT_READ_BLOCKSIZE
specifier|public
specifier|static
specifier|final
name|int
name|SWIFT_READ_BLOCKSIZE
init|=
literal|4096
decl_stmt|;
DECL|field|SEEK_FILE_LEN
specifier|public
specifier|static
specifier|final
name|int
name|SEEK_FILE_LEN
init|=
name|SWIFT_READ_BLOCKSIZE
operator|*
literal|2
decl_stmt|;
DECL|field|testPath
specifier|private
name|Path
name|testPath
decl_stmt|;
DECL|field|readFile
specifier|private
name|Path
name|readFile
decl_stmt|;
DECL|field|zeroByteFile
specifier|private
name|Path
name|zeroByteFile
decl_stmt|;
DECL|field|instream
specifier|private
name|FSDataInputStream
name|instream
decl_stmt|;
comment|/**    * Get a configuration which a small blocksize reported to callers    * @return a configuration for this test    */
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|/*      * set to 4KB      */
name|conf
operator|.
name|setInt
argument_list|(
name|SwiftProtocolConstants
operator|.
name|SWIFT_BLOCKSIZE
argument_list|,
name|SWIFT_READ_BLOCKSIZE
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Setup creates dirs under test/hadoop    *    * @throws Exception    */
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|byte
index|[]
name|block
init|=
name|SwiftTestUtils
operator|.
name|dataset
argument_list|(
name|SEEK_FILE_LEN
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
comment|//delete the test directory
name|testPath
operator|=
name|path
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|readFile
operator|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"TestReadPastBuffer.txt"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|readFile
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanFile ()
specifier|public
name|void
name|cleanFile
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|instream
argument_list|)
expr_stmt|;
name|instream
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Create a config with a 1KB request size    * @return a config    */
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SwiftProtocolConstants
operator|.
name|SWIFT_REQUEST_SIZE
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Seek past the buffer then read    * @throws Throwable problems    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testSeekAndReadPastEndOfFile ()
specifier|public
name|void
name|testSeekAndReadPastEndOfFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|readFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|//expect that seek to 0 works
comment|//go just before the end
name|instream
operator|.
name|seek
argument_list|(
name|SEEK_FILE_LEN
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Premature EOF"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Premature EOF"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertMinusOne
argument_list|(
literal|"read past end of file"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Seek past the buffer and attempt a read(buffer)    * @throws Throwable failures    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testSeekBulkReadPastEndOfFile ()
specifier|public
name|void
name|testSeekBulkReadPastEndOfFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|readFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|//go just before the end
name|instream
operator|.
name|seek
argument_list|(
name|SEEK_FILE_LEN
operator|-
literal|1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|int
name|result
init|=
name|instream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//next byte is expected to fail
name|result
operator|=
name|instream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMinusOne
argument_list|(
literal|"read past end of file"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//and this one
name|result
operator|=
name|instream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMinusOne
argument_list|(
literal|"read past end of file"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//now do an 0-byte read and expect it to
comment|//to be checked first
name|result
operator|=
name|instream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EOF checks coming before read range check"
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read past the buffer size byte by byte and verify that it refreshed    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testReadPastBufferSize ()
specifier|public
name|void
name|testReadPastBufferSize
parameter_list|()
throws|throws
name|Throwable
block|{
name|instream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|readFile
argument_list|)
expr_stmt|;
while|while
condition|(
name|instream
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
condition|)
empty_stmt|;
comment|//here we have gone past the end of a file and its buffer. Now try again
name|assertMinusOne
argument_list|(
literal|"reading after the (large) file was read: "
operator|+
name|instream
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

