begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|RestClientBindings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftObjectPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit tests for SwiftObjectPath class.  */
end_comment

begin_class
DECL|class|TestSwiftObjectPath
specifier|public
class|class
name|TestSwiftObjectPath
implements|implements
name|SwiftTestConstants
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSwiftObjectPath
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * What an endpoint looks like. This is derived from a (valid)    * rackspace endpoint address    */
DECL|field|ENDPOINT
specifier|private
specifier|static
specifier|final
name|String
name|ENDPOINT
init|=
literal|"https://storage101.region1.example.org/v1/MossoCloudFS_9fb40cc0-1234-5678-9abc-def000c9a66"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testParsePath ()
specifier|public
name|void
name|testParsePath
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|pathString
init|=
literal|"/home/user/files/file1"
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://container.localhost"
argument_list|)
decl_stmt|;
specifier|final
name|SwiftObjectPath
name|expected
init|=
name|SwiftObjectPath
operator|.
name|fromPath
argument_list|(
name|uri
argument_list|,
name|path
argument_list|)
decl_stmt|;
specifier|final
name|SwiftObjectPath
name|actual
init|=
operator|new
name|SwiftObjectPath
argument_list|(
name|RestClientBindings
operator|.
name|extractContainerName
argument_list|(
name|uri
argument_list|)
argument_list|,
name|pathString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testParseUrlPath ()
specifier|public
name|void
name|testParseUrlPath
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|pathString
init|=
literal|"swift://container.service1/home/user/files/file1"
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
specifier|final
name|SwiftObjectPath
name|expected
init|=
name|SwiftObjectPath
operator|.
name|fromPath
argument_list|(
name|uri
argument_list|,
name|path
argument_list|)
decl_stmt|;
specifier|final
name|SwiftObjectPath
name|actual
init|=
operator|new
name|SwiftObjectPath
argument_list|(
name|RestClientBindings
operator|.
name|extractContainerName
argument_list|(
name|uri
argument_list|)
argument_list|,
literal|"/home/user/files/file1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testParseAuthenticatedUrl ()
specifier|public
name|void
name|testParseAuthenticatedUrl
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|pathString
init|=
literal|"swift://container.service1/v2/AUTH_00345h34l93459y4/home/tom/documents/finance.docx"
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
specifier|final
name|SwiftObjectPath
name|expected
init|=
name|SwiftObjectPath
operator|.
name|fromPath
argument_list|(
name|uri
argument_list|,
name|path
argument_list|)
decl_stmt|;
specifier|final
name|SwiftObjectPath
name|actual
init|=
operator|new
name|SwiftObjectPath
argument_list|(
name|RestClientBindings
operator|.
name|extractContainerName
argument_list|(
name|uri
argument_list|)
argument_list|,
literal|"/home/tom/documents/finance.docx"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testConvertToPath ()
specifier|public
name|void
name|testConvertToPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|initialpath
init|=
literal|"/dir/file1"
decl_stmt|;
name|Path
name|ipath
init|=
operator|new
name|Path
argument_list|(
name|initialpath
argument_list|)
decl_stmt|;
name|SwiftObjectPath
name|objectPath
init|=
name|SwiftObjectPath
operator|.
name|fromPath
argument_list|(
operator|new
name|URI
argument_list|(
name|initialpath
argument_list|)
argument_list|,
name|ipath
argument_list|)
decl_stmt|;
name|URI
name|endpoint
init|=
operator|new
name|URI
argument_list|(
name|ENDPOINT
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|SwiftRestClient
operator|.
name|pathToURI
argument_list|(
name|objectPath
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Inital Hadoop Path ="
operator|+
name|initialpath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Merged URI="
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testRootDirProbeEmptyPath ()
specifier|public
name|void
name|testRootDirProbeEmptyPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|SwiftObjectPath
name|object
init|=
operator|new
name|SwiftObjectPath
argument_list|(
literal|"container"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|SwiftUtils
operator|.
name|isRootDir
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testRootDirProbeRootPath ()
specifier|public
name|void
name|testRootDirProbeRootPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|SwiftObjectPath
name|object
init|=
operator|new
name|SwiftObjectPath
argument_list|(
literal|"container"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|SwiftUtils
operator|.
name|isRootDir
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParentOf (SwiftObjectPath p1, SwiftObjectPath p2)
specifier|private
name|void
name|assertParentOf
parameter_list|(
name|SwiftObjectPath
name|p1
parameter_list|,
name|SwiftObjectPath
name|p2
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|p1
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a parent of "
operator|+
name|p2
argument_list|,
name|p1
operator|.
name|isEqualToOrParentOf
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotParentOf (SwiftObjectPath p1, SwiftObjectPath p2)
specifier|private
name|void
name|assertNotParentOf
parameter_list|(
name|SwiftObjectPath
name|p1
parameter_list|,
name|SwiftObjectPath
name|p2
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|p1
operator|.
name|toString
argument_list|()
operator|+
literal|" is a parent of "
operator|+
name|p2
argument_list|,
name|p1
operator|.
name|isEqualToOrParentOf
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testChildOfProbe ()
specifier|public
name|void
name|testChildOfProbe
parameter_list|()
throws|throws
name|Throwable
block|{
name|SwiftObjectPath
name|parent
init|=
operator|new
name|SwiftObjectPath
argument_list|(
literal|"container"
argument_list|,
literal|"/parent"
argument_list|)
decl_stmt|;
name|SwiftObjectPath
name|parent2
init|=
operator|new
name|SwiftObjectPath
argument_list|(
literal|"container"
argument_list|,
literal|"/parent2"
argument_list|)
decl_stmt|;
name|SwiftObjectPath
name|child
init|=
operator|new
name|SwiftObjectPath
argument_list|(
literal|"container"
argument_list|,
literal|"/parent/child"
argument_list|)
decl_stmt|;
name|SwiftObjectPath
name|sibling
init|=
operator|new
name|SwiftObjectPath
argument_list|(
literal|"container"
argument_list|,
literal|"/parent/sibling"
argument_list|)
decl_stmt|;
name|SwiftObjectPath
name|grandchild
init|=
operator|new
name|SwiftObjectPath
argument_list|(
literal|"container"
argument_list|,
literal|"/parent/child/grandchild"
argument_list|)
decl_stmt|;
name|assertParentOf
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertParentOf
argument_list|(
name|parent
argument_list|,
name|grandchild
argument_list|)
expr_stmt|;
name|assertParentOf
argument_list|(
name|child
argument_list|,
name|grandchild
argument_list|)
expr_stmt|;
name|assertParentOf
argument_list|(
name|parent
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|assertNotParentOf
argument_list|(
name|child
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|assertParentOf
argument_list|(
name|child
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertNotParentOf
argument_list|(
name|parent
argument_list|,
name|parent2
argument_list|)
expr_stmt|;
name|assertNotParentOf
argument_list|(
name|grandchild
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testChildOfRoot ()
specifier|public
name|void
name|testChildOfRoot
parameter_list|()
throws|throws
name|Throwable
block|{
name|SwiftObjectPath
name|root
init|=
operator|new
name|SwiftObjectPath
argument_list|(
literal|"container"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|SwiftObjectPath
name|child
init|=
operator|new
name|SwiftObjectPath
argument_list|(
literal|"container"
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|SwiftObjectPath
name|grandchild
init|=
operator|new
name|SwiftObjectPath
argument_list|(
literal|"container"
argument_list|,
literal|"/child/grandchild"
argument_list|)
decl_stmt|;
name|assertParentOf
argument_list|(
name|root
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertParentOf
argument_list|(
name|root
argument_list|,
name|grandchild
argument_list|)
expr_stmt|;
name|assertParentOf
argument_list|(
name|child
argument_list|,
name|grandchild
argument_list|)
expr_stmt|;
name|assertParentOf
argument_list|(
name|root
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|assertNotParentOf
argument_list|(
name|child
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|assertParentOf
argument_list|(
name|child
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|assertNotParentOf
argument_list|(
name|grandchild
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

