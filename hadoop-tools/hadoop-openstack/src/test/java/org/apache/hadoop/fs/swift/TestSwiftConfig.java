begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|DOT_AUTH_URL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|DOT_LOCATION_AWARE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|DOT_PASSWORD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|DOT_TENANT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|DOT_USERNAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_BLOCKSIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_CONNECTION_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_PARTITION_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_PROXY_HOST_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_PROXY_PORT_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_RETRY_COUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|SWIFT_SERVICE_PREFIX
import|;
end_import

begin_comment
comment|/**  * Test the swift service-specific configuration binding features  */
end_comment

begin_class
DECL|class|TestSwiftConfig
specifier|public
class|class
name|TestSwiftConfig
extends|extends
name|Assert
block|{
DECL|field|SERVICE
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE
init|=
literal|"openstack"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testEmptyUrl ()
specifier|public
name|void
name|testEmptyUrl
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_TENANT
argument_list|,
literal|"tenant"
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_USERNAME
argument_list|,
literal|"username"
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|mkInstance
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyTenant ()
specifier|public
name|void
name|testEmptyTenant
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_AUTH_URL
argument_list|,
literal|"http://localhost:8080"
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_USERNAME
argument_list|,
literal|"username"
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|mkInstance
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testEmptyUsername ()
specifier|public
name|void
name|testEmptyUsername
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_AUTH_URL
argument_list|,
literal|"http://localhost:8080"
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_TENANT
argument_list|,
literal|"tenant"
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|mkInstance
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testEmptyPassword ()
specifier|public
name|void
name|testEmptyPassword
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_AUTH_URL
argument_list|,
literal|"http://localhost:8080"
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_TENANT
argument_list|,
literal|"tenant"
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_USERNAME
argument_list|,
literal|"username"
argument_list|)
expr_stmt|;
name|mkInstance
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGoodRetryCount ()
specifier|public
name|void
name|testGoodRetryCount
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|createCoreConfig
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SWIFT_RETRY_COUNT
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|mkInstance
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testBadRetryCount ()
specifier|public
name|void
name|testBadRetryCount
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|createCoreConfig
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SWIFT_RETRY_COUNT
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|mkInstance
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testBadConnectTimeout ()
specifier|public
name|void
name|testBadConnectTimeout
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|createCoreConfig
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SWIFT_CONNECTION_TIMEOUT
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|mkInstance
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testZeroBlocksize ()
specifier|public
name|void
name|testZeroBlocksize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|createCoreConfig
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SWIFT_BLOCKSIZE
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|mkInstance
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testNegativeBlocksize ()
specifier|public
name|void
name|testNegativeBlocksize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|createCoreConfig
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SWIFT_BLOCKSIZE
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|mkInstance
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPositiveBlocksize ()
specifier|public
name|void
name|testPositiveBlocksize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|createCoreConfig
argument_list|()
decl_stmt|;
name|int
name|size
init|=
literal|127
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SWIFT_BLOCKSIZE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|SwiftRestClient
name|restClient
init|=
name|mkInstance
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|restClient
operator|.
name|getBlocksizeKB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocationAwareTruePropagates ()
specifier|public
name|void
name|testLocationAwareTruePropagates
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|createCoreConfig
argument_list|()
decl_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_LOCATION_AWARE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SwiftRestClient
name|restClient
init|=
name|mkInstance
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|restClient
operator|.
name|isLocationAware
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocationAwareFalsePropagates ()
specifier|public
name|void
name|testLocationAwareFalsePropagates
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|createCoreConfig
argument_list|()
decl_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_LOCATION_AWARE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|SwiftRestClient
name|restClient
init|=
name|mkInstance
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|restClient
operator|.
name|isLocationAware
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testNegativePartsize ()
specifier|public
name|void
name|testNegativePartsize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|createCoreConfig
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SWIFT_PARTITION_SIZE
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|SwiftRestClient
name|restClient
init|=
name|mkInstance
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPositivePartsize ()
specifier|public
name|void
name|testPositivePartsize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|createCoreConfig
argument_list|()
decl_stmt|;
name|int
name|size
init|=
literal|127
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SWIFT_PARTITION_SIZE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|SwiftRestClient
name|restClient
init|=
name|mkInstance
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|restClient
operator|.
name|getPartSizeKB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyData ()
specifier|public
name|void
name|testProxyData
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|createCoreConfig
argument_list|()
decl_stmt|;
name|String
name|proxy
init|=
literal|"web-proxy"
decl_stmt|;
name|int
name|port
init|=
literal|8088
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SWIFT_PROXY_HOST_PROPERTY
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SWIFT_PROXY_PORT_PROPERTY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|SwiftRestClient
name|restClient
init|=
name|mkInstance
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|proxy
argument_list|,
name|restClient
operator|.
name|getProxyHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|port
argument_list|,
name|restClient
operator|.
name|getProxyPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createCoreConfig ()
specifier|private
name|Configuration
name|createCoreConfig
parameter_list|()
block|{
specifier|final
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_AUTH_URL
argument_list|,
literal|"http://localhost:8080"
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_TENANT
argument_list|,
literal|"tenant"
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_USERNAME
argument_list|,
literal|"username"
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|configuration
argument_list|,
name|DOT_PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
return|return
name|configuration
return|;
block|}
DECL|method|set (Configuration configuration, String field, String value)
specifier|private
name|void
name|set
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|configuration
operator|.
name|set
argument_list|(
name|SWIFT_SERVICE_PREFIX
operator|+
name|SERVICE
operator|+
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|mkInstance (Configuration configuration)
specifier|private
name|SwiftRestClient
name|mkInstance
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"swift://container.openstack/"
argument_list|)
decl_stmt|;
return|return
name|SwiftRestClient
operator|.
name|getInstance
argument_list|(
name|uri
argument_list|,
name|configuration
argument_list|)
return|;
block|}
block|}
end_class

end_unit

