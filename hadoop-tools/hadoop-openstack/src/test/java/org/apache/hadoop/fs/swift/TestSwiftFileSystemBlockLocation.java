begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Test block location logic.  * The endpoint may or may not be location-aware  */
end_comment

begin_class
DECL|class|TestSwiftFileSystemBlockLocation
specifier|public
class|class
name|TestSwiftFileSystemBlockLocation
extends|extends
name|SwiftFileSystemBaseTest
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLocateSingleFileBlocks ()
specifier|public
name|void
name|testLocateSingleFileBlocks
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that a file returns 1+ blocks"
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|createFileAndGetStatus
argument_list|()
decl_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|getFs
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
name|fileStatus
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNotEqual
argument_list|(
literal|"No block locations supplied for "
operator|+
name|fileStatus
argument_list|,
literal|0
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockLocation
name|location
range|:
name|locations
control|)
block|{
name|assertLocationValid
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertLocationValid (BlockLocation location)
specifier|private
name|void
name|assertLocationValid
parameter_list|(
name|BlockLocation
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|String
index|[]
name|hosts
init|=
name|location
operator|.
name|getHosts
argument_list|()
decl_stmt|;
name|String
index|[]
name|names
init|=
name|location
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|assertNotEqual
argument_list|(
literal|"No hosts supplied for "
operator|+
name|location
argument_list|,
literal|0
argument_list|,
name|hosts
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//for every host, there's a name.
name|assertEquals
argument_list|(
literal|"Unequal names and hosts in "
operator|+
name|location
argument_list|,
name|hosts
operator|.
name|length
argument_list|,
name|names
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SwiftProtocolConstants
operator|.
name|BLOCK_LOCATION
argument_list|,
name|location
operator|.
name|getNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SwiftProtocolConstants
operator|.
name|TOPOLOGY_PATH
argument_list|,
name|location
operator|.
name|getTopologyPaths
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|createFileAndGetStatus ()
specifier|private
name|FileStatus
name|createFileAndGetStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"/test/locatedFile"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLocateNullStatus ()
specifier|public
name|void
name|testLocateNullStatus
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that a null filestatus maps to a null location array"
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|getFs
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
operator|(
name|FileStatus
operator|)
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLocateNegativeSeek ()
specifier|public
name|void
name|testLocateNegativeSeek
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that a negative offset is illegal"
argument_list|)
expr_stmt|;
try|try
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|getFs
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
name|createFileAndGetStatus
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|locations
operator|.
name|length
operator|+
literal|" locations"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLocateNegativeLen ()
specifier|public
name|void
name|testLocateNegativeLen
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that a negative length is illegal"
argument_list|)
expr_stmt|;
try|try
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|getFs
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
name|createFileAndGetStatus
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|locations
operator|.
name|length
operator|+
literal|" locations"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLocateOutOfRangeLen ()
specifier|public
name|void
name|testLocateOutOfRangeLen
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"overshooting the length is legal, as long as the"
operator|+
literal|" origin location is valid"
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|getFs
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
name|createFileAndGetStatus
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
operator|+
literal|100
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|locations
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|locations
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLocateOutOfRangeSrc ()
specifier|public
name|void
name|testLocateOutOfRangeSrc
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Seeking out of the file length returns an empty array"
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|getFs
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
name|createFileAndGetStatus
argument_list|()
argument_list|,
name|data
operator|.
name|length
operator|+
literal|100
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEmptyBlockLocations
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEmptyBlockLocations (BlockLocation[] locations)
specifier|private
name|void
name|assertEmptyBlockLocations
parameter_list|(
name|BlockLocation
index|[]
name|locations
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|locations
argument_list|)
expr_stmt|;
if|if
condition|(
name|locations
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"non empty locations[] with first entry of "
operator|+
name|locations
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLocateDirectory ()
specifier|public
name|void
name|testLocateDirectory
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that locating a directory is an error"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|(
literal|"/test/filename"
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Filesystem is "
operator|+
name|fs
operator|+
literal|"; target is "
operator|+
name|status
argument_list|)
expr_stmt|;
name|SwiftTestUtils
operator|.
name|assertIsDirectory
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|locations
decl_stmt|;
name|locations
operator|=
name|getFs
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEmptyBlockLocations
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testLocateRootDirectory ()
specifier|public
name|void
name|testLocateRootDirectory
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that locating the root directory is an error"
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|SwiftTestUtils
operator|.
name|assertIsDirectory
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|locations
decl_stmt|;
name|locations
operator|=
name|getFs
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEmptyBlockLocations
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

