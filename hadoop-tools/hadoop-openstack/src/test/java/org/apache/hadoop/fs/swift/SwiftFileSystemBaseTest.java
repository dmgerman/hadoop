begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|snative
operator|.
name|SwiftNativeFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|snative
operator|.
name|SwiftNativeFileSystemStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|DurationStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
operator|.
name|assertPathExists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
operator|.
name|cleanupInTeardown
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
operator|.
name|getServiceURI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
operator|.
name|noteAction
import|;
end_import

begin_comment
comment|/**  * This is the base class for most of the Swift tests  */
end_comment

begin_class
DECL|class|SwiftFileSystemBaseTest
specifier|public
class|class
name|SwiftFileSystemBaseTest
extends|extends
name|Assert
implements|implements
name|SwiftTestConstants
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SwiftFileSystemBaseTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|protected
name|SwiftNativeFileSystem
name|fs
decl_stmt|;
DECL|field|lastFs
specifier|protected
specifier|static
name|SwiftNativeFileSystem
name|lastFs
decl_stmt|;
DECL|field|data
specifier|protected
name|byte
index|[]
name|data
init|=
name|SwiftTestUtils
operator|.
name|dataset
argument_list|(
name|getBlockSize
argument_list|()
operator|*
literal|2
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|noteAction
argument_list|(
literal|"setup"
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|getFilesystemURI
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|createSwiftFS
argument_list|()
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//FS init failed, set it to null so that teardown doesn't
comment|//attempt to use it
name|fs
operator|=
literal|null
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|//remember the last FS
name|lastFs
operator|=
name|fs
expr_stmt|;
name|noteAction
argument_list|(
literal|"setup complete"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Configuration generator. May be overridden to inject    * some custom options    * @return a configuration with which to create FS instances    */
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
return|return
operator|new
name|Configuration
argument_list|()
return|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanupInTeardown
argument_list|(
name|fs
argument_list|,
literal|"/test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|classTearDown ()
specifier|public
specifier|static
name|void
name|classTearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|lastFs
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|DurationStats
argument_list|>
name|statistics
init|=
name|lastFs
operator|.
name|getOperationStatistics
argument_list|()
decl_stmt|;
for|for
control|(
name|DurationStats
name|stat
range|:
name|statistics
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|stat
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the configuration used to set up the FS    * @return the configuration    */
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * Describe the test, combining some logging with details    * for people reading the code    *    * @param description test description    */
DECL|method|describe (String description)
specifier|protected
name|void
name|describe
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|noteAction
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
DECL|method|getFilesystemURI ()
specifier|protected
name|URI
name|getFilesystemURI
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
return|return
name|getServiceURI
argument_list|(
name|createConfiguration
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createSwiftFS ()
specifier|protected
name|SwiftNativeFileSystem
name|createSwiftFS
parameter_list|()
throws|throws
name|IOException
block|{
name|SwiftNativeFileSystem
name|swiftNativeFileSystem
init|=
operator|new
name|SwiftNativeFileSystem
argument_list|()
decl_stmt|;
return|return
name|swiftNativeFileSystem
return|;
block|}
DECL|method|getBlockSize ()
specifier|protected
name|int
name|getBlockSize
parameter_list|()
block|{
return|return
literal|1024
return|;
block|}
comment|/**    * Is rename supported?    * @return true    */
DECL|method|renameSupported ()
specifier|protected
name|boolean
name|renameSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * assume in a test that rename is supported;    * skip it if not    */
DECL|method|assumeRenameSupported ()
specifier|protected
name|void
name|assumeRenameSupported
parameter_list|()
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|renameSupported
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Take an unqualified path, and qualify it w.r.t the    * current filesystem    * @param pathString source path    * @return a qualified path instance    */
DECL|method|path (String pathString)
specifier|protected
name|Path
name|path
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
return|;
block|}
comment|/**    * Get the filesystem    * @return the current FS    */
DECL|method|getFs ()
specifier|public
name|SwiftNativeFileSystem
name|getFs
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
comment|/**    * Create a file using the standard {@link #data} bytes.    *    * @param path path to write    * @throws IOException on any problem    */
DECL|method|createFile (Path path)
specifier|protected
name|void
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|createFile
argument_list|(
name|path
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a file with the given data.    *    * @param path       path to write    * @param sourceData source dataset    * @throws IOException on any problem    */
DECL|method|createFile (Path path, byte[] sourceData)
specifier|protected
name|void
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|byte
index|[]
name|sourceData
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|sourceData
argument_list|,
literal|0
argument_list|,
name|sourceData
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create and then close a file    * @param path path to create    * @throws IOException on a failure    */
DECL|method|createEmptyFile (Path path)
specifier|protected
name|void
name|createEmptyFile
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the inner store -useful for lower level operations    *    * @return the store    */
DECL|method|getStore ()
specifier|protected
name|SwiftNativeFileSystemStore
name|getStore
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getStore
argument_list|()
return|;
block|}
comment|/**    * Rename a path    * @param src source    * @param dst dest    * @param renameMustSucceed flag to say "this rename must exist"    * @param srcExists add assert that the source exists afterwards    * @param dstExists add assert the dest exists afterwards    * @throws IOException IO trouble    */
DECL|method|rename (Path src, Path dst, boolean renameMustSucceed, boolean srcExists, boolean dstExists)
specifier|protected
name|void
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|renameMustSucceed
parameter_list|,
name|boolean
name|srcExists
parameter_list|,
name|boolean
name|dstExists
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|renameMustSucceed
condition|)
block|{
name|renameToSuccess
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|srcExists
argument_list|,
name|dstExists
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|renameToFailure
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a string describing the outcome of a rename, by listing the dest    * path and its parent along with some covering text    * @param src source patj    * @param dst dest path    * @return a string for logs and exceptions    * @throws IOException IO problems    */
DECL|method|getRenameOutcome (Path src, Path dst)
specifier|private
name|String
name|getRenameOutcome
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|lsDst
init|=
name|ls
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
name|dst
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|lsParent
init|=
name|parent
operator|!=
literal|null
condition|?
name|ls
argument_list|(
name|parent
argument_list|)
else|:
literal|""
decl_stmt|;
return|return
literal|"  result of "
operator|+
name|src
operator|+
literal|" => "
operator|+
name|dst
operator|+
literal|" - "
operator|+
name|lsDst
operator|+
literal|" \n"
operator|+
name|lsParent
return|;
block|}
comment|/**    * Rename, expecting an exception to be thrown    *    * @param src source    * @param dst dest    * @throws IOException a failure other than an    *                     expected SwiftRenameException or FileNotFoundException    */
DECL|method|renameToFailure (Path src, Path dst)
specifier|protected
name|void
name|renameToFailure
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|getStore
argument_list|()
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected failure renaming "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|"- but got success"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SwiftOperationFailedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rename failed (expected):"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rename failed (expected):"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Rename to success    *    * @param src source    * @param dst dest    * @param srcExists add assert that the source exists afterwards    * @param dstExists add assert the dest exists afterwards    * @throws SwiftOperationFailedException operation failure    * @throws IOException IO problems    */
DECL|method|renameToSuccess (Path src, Path dst, boolean srcExists, boolean dstExists)
specifier|protected
name|void
name|renameToSuccess
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|srcExists
parameter_list|,
name|boolean
name|dstExists
parameter_list|)
throws|throws
name|SwiftOperationFailedException
throws|,
name|IOException
block|{
name|getStore
argument_list|()
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|String
name|outcome
init|=
name|getRenameOutcome
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Source "
operator|+
name|src
operator|+
literal|"exists: "
operator|+
name|outcome
argument_list|,
name|srcExists
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Destination "
operator|+
name|dstExists
operator|+
literal|" exists"
operator|+
name|outcome
argument_list|,
name|dstExists
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * List a path in the test FS    * @param path path to list    * @return the contents of the path/dir    * @throws IOException IO problems    */
DECL|method|ls (Path path)
specifier|protected
name|String
name|ls
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|SwiftTestUtils
operator|.
name|ls
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**    * assert that a path exists    * @param message message to use in an assertion    * @param path path to probe    * @throws IOException IO problems    */
DECL|method|assertExists (String message, Path path)
specifier|public
name|void
name|assertExists
parameter_list|(
name|String
name|message
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|assertPathExists
argument_list|(
name|fs
argument_list|,
name|message
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * assert that a path does not    * @param message message to use in an assertion    * @param path path to probe    * @throws IOException IO problems    */
DECL|method|assertPathDoesNotExist (String message, Path path)
specifier|public
name|void
name|assertPathDoesNotExist
parameter_list|(
name|String
name|message
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|SwiftTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
name|message
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that a file exists and whose {@link FileStatus} entry    * declares that this is a file and not a symlink or directory.    *    * @param filename name of the file    * @throws IOException IO problems during file operations    */
DECL|method|assertIsFile (Path filename)
specifier|protected
name|void
name|assertIsFile
parameter_list|(
name|Path
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|SwiftTestUtils
operator|.
name|assertIsFile
argument_list|(
name|fs
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that a file exists and whose {@link FileStatus} entry    * declares that this is a file and not a symlink or directory.    *    * @throws IOException IO problems during file operations    */
DECL|method|mkdirs (Path path)
specifier|protected
name|void
name|mkdirs
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"Failed to mkdir"
operator|+
name|path
argument_list|,
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that a delete succeeded    * @param path path to delete    * @param recursive recursive flag    * @throws IOException IO problems    */
DECL|method|assertDeleted (Path path, boolean recursive)
specifier|protected
name|void
name|assertDeleted
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|SwiftTestUtils
operator|.
name|assertDeleted
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that a value is not equal to the expected value    * @param message message if the two values are equal    * @param expected expected value    * @param actual actual value    */
DECL|method|assertNotEqual (String message, int expected, int actual)
specifier|protected
name|void
name|assertNotEqual
parameter_list|(
name|String
name|message
parameter_list|,
name|int
name|expected
parameter_list|,
name|int
name|actual
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|message
argument_list|,
name|actual
operator|!=
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of partitions written from the Swift Native FS APIs    * @param out output stream    * @return the number of partitioned files written by the stream    */
DECL|method|getPartitionsWritten (FSDataOutputStream out)
specifier|protected
name|int
name|getPartitionsWritten
parameter_list|(
name|FSDataOutputStream
name|out
parameter_list|)
block|{
return|return
name|SwiftNativeFileSystem
operator|.
name|getPartitionsWritten
argument_list|(
name|out
argument_list|)
return|;
block|}
comment|/**    * Assert that the no. of partitions written matches expectations    * @param action operation (for use in the assertions)    * @param out output stream    * @param expected expected no. of partitions    */
DECL|method|assertPartitionsWritten (String action, FSDataOutputStream out, long expected)
specifier|protected
name|void
name|assertPartitionsWritten
parameter_list|(
name|String
name|action
parameter_list|,
name|FSDataOutputStream
name|out
parameter_list|,
name|long
name|expected
parameter_list|)
block|{
name|OutputStream
name|nativeStream
init|=
name|out
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
name|int
name|written
init|=
name|getPartitionsWritten
argument_list|(
name|out
argument_list|)
decl_stmt|;
if|if
condition|(
name|written
operator|!=
name|expected
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|action
operator|+
literal|": "
operator|+
name|TestSwiftFileSystemPartitionedUploads
operator|.
name|WRONG_PARTITION_COUNT
operator|+
literal|" + expected: "
operator|+
name|expected
operator|+
literal|" actual: "
operator|+
name|written
operator|+
literal|" -- "
operator|+
name|nativeStream
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assert that the result value == -1; which implies    * that a read was successful    * @param text text to include in a message (usually the operation)    * @param result read result to validate    */
DECL|method|assertMinusOne (String text, int result)
specifier|protected
name|void
name|assertMinusOne
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|text
operator|+
literal|" wrong read result "
operator|+
name|result
argument_list|,
operator|-
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

