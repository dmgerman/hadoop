begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
operator|.
name|readBytesToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftTestUtils
operator|.
name|writeTextFile
import|;
end_import

begin_comment
comment|/**  * Test filesystem read operations  */
end_comment

begin_class
DECL|class|TestSwiftFileSystemRead
specifier|public
class|class
name|TestSwiftFileSystemRead
extends|extends
name|SwiftFileSystemBaseTest
block|{
comment|/**    * Read past the end of a file: expect the operation to fail    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testOverRead ()
specifier|public
name|void
name|testOverRead
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|message
init|=
literal|"message"
decl_stmt|;
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/test/file.txt"
argument_list|)
decl_stmt|;
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|readBytesToString
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
comment|/**    * Read and write some JSON    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testRWJson ()
specifier|public
name|void
name|testRWJson
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|message
init|=
literal|"{"
operator|+
literal|" 'json': { 'i':43, 'b':true},"
operator|+
literal|" 's':'string'"
operator|+
literal|"}"
decl_stmt|;
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/test/file.json"
argument_list|)
decl_stmt|;
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|readJson
init|=
name|readBytesToString
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|message
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|message
argument_list|,
name|readJson
argument_list|)
expr_stmt|;
comment|//now find out where it is
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
block|}
comment|/**    * Read and write some XML    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|SWIFT_TEST_TIMEOUT
argument_list|)
DECL|method|testRWXML ()
specifier|public
name|void
name|testRWXML
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|message
init|=
literal|"<x>"
operator|+
literal|"<json i='43' 'b'=true/>"
operator|+
literal|" string"
operator|+
literal|"</x>"
decl_stmt|;
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/test/file.xml"
argument_list|)
decl_stmt|;
name|writeTextFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|read
init|=
name|readBytesToString
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|message
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|message
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

