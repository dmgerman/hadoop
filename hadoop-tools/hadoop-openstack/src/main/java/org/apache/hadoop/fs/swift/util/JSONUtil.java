begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftJsonMarshallingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|type
operator|.
name|CollectionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_class
DECL|class|JSONUtil
specifier|public
class|class
name|JSONUtil
block|{
DECL|field|jsonMapper
specifier|private
specifier|static
name|ObjectMapper
name|jsonMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
comment|/**    * Private constructor.    */
DECL|method|JSONUtil ()
specifier|private
name|JSONUtil
parameter_list|()
block|{   }
comment|/**    * Converting object to JSON string. If errors appears throw    * MeshinException runtime exception.    *    * @param object The object to convert.    * @return The JSON string representation.    * @throws IOException IO issues    * @throws SwiftJsonMarshallingException failure to generate JSON    */
DECL|method|toJSON (Object object)
specifier|public
specifier|static
name|String
name|toJSON
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|Writer
name|json
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|jsonMapper
operator|.
name|writeValue
argument_list|(
name|json
argument_list|,
name|object
argument_list|)
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|JsonGenerationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftJsonMarshallingException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|JsonMappingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftJsonMarshallingException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert string representation to object. If errors appears throw    * Exception runtime exception.    *    * @param value The JSON string.    * @param klazz The class to convert.    * @return The Object of the given class.    */
DECL|method|toObject (String value, Class<T> klazz)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|toObject
parameter_list|(
name|String
name|value
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|klazz
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|jsonMapper
operator|.
name|readValue
argument_list|(
name|value
argument_list|,
name|klazz
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JsonGenerationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftJsonMarshallingException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|" source: "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|JsonMappingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftJsonMarshallingException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|" source: "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param value         json string    * @param typeReference class type reference    * @param<T>           type    * @return deserialized  T object    */
DECL|method|toObject (String value, final TypeReference<T> typeReference)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|toObject
parameter_list|(
name|String
name|value
parameter_list|,
specifier|final
name|TypeReference
argument_list|<
name|T
argument_list|>
name|typeReference
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|jsonMapper
operator|.
name|readValue
argument_list|(
name|value
argument_list|,
name|typeReference
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JsonGenerationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftJsonMarshallingException
argument_list|(
literal|"Error generating response"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|JsonMappingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftJsonMarshallingException
argument_list|(
literal|"Error generating response"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param value          json string    * @param collectionType class describing how to deserialize collection of objects    * @param<T>            type    * @return deserialized  T object    */
DECL|method|toObject (String value, final CollectionType collectionType)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|toObject
parameter_list|(
name|String
name|value
parameter_list|,
specifier|final
name|CollectionType
name|collectionType
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|jsonMapper
operator|.
name|readValue
argument_list|(
name|value
argument_list|,
name|collectionType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JsonGenerationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftJsonMarshallingException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|" source: "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|JsonMappingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftJsonMarshallingException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|" source: "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getJsonMapper ()
specifier|public
specifier|static
name|ObjectMapper
name|getJsonMapper
parameter_list|()
block|{
return|return
name|jsonMapper
return|;
block|}
block|}
end_class

end_unit

