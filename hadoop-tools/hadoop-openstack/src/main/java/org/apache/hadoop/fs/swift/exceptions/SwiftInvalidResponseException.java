begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.exceptions
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * Exception raised when the HTTP code is invalid. The status code,  * method name and operation URI are all in the response.  */
end_comment

begin_class
DECL|class|SwiftInvalidResponseException
specifier|public
class|class
name|SwiftInvalidResponseException
extends|extends
name|SwiftConnectionException
block|{
DECL|field|statusCode
specifier|public
specifier|final
name|int
name|statusCode
decl_stmt|;
DECL|field|operation
specifier|public
specifier|final
name|String
name|operation
decl_stmt|;
DECL|field|uri
specifier|public
specifier|final
name|URI
name|uri
decl_stmt|;
DECL|field|body
specifier|public
specifier|final
name|String
name|body
decl_stmt|;
DECL|method|SwiftInvalidResponseException (String message, int statusCode, String operation, URI uri)
specifier|public
name|SwiftInvalidResponseException
parameter_list|(
name|String
name|message
parameter_list|,
name|int
name|statusCode
parameter_list|,
name|String
name|operation
parameter_list|,
name|URI
name|uri
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|statusCode
operator|=
name|statusCode
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|body
operator|=
literal|""
expr_stmt|;
block|}
DECL|method|SwiftInvalidResponseException (String message, String operation, URI uri, HttpMethod method)
specifier|public
name|SwiftInvalidResponseException
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|operation
parameter_list|,
name|URI
name|uri
parameter_list|,
name|HttpMethod
name|method
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|statusCode
operator|=
name|method
operator|.
name|getStatusCode
argument_list|()
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|String
name|bodyAsString
decl_stmt|;
try|try
block|{
name|bodyAsString
operator|=
name|method
operator|.
name|getResponseBodyAsString
argument_list|()
expr_stmt|;
if|if
condition|(
name|bodyAsString
operator|==
literal|null
condition|)
block|{
name|bodyAsString
operator|=
literal|""
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|bodyAsString
operator|=
literal|""
expr_stmt|;
block|}
name|this
operator|.
name|body
operator|=
name|bodyAsString
expr_stmt|;
block|}
DECL|method|getStatusCode ()
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|statusCode
return|;
block|}
DECL|method|getOperation ()
specifier|public
name|String
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
DECL|method|getBody ()
specifier|public
name|String
name|getBody
parameter_list|()
block|{
return|return
name|body
return|;
block|}
comment|/**    * Override point: title of an exception -this is used in the    * toString() method.    * @return the new exception title    */
DECL|method|exceptionTitle ()
specifier|public
name|String
name|exceptionTitle
parameter_list|()
block|{
return|return
literal|"Invalid Response"
return|;
block|}
comment|/**    * Build a description that includes the exception title, the URI,    * the message, the status code -and any body of the response    * @return the string value for display    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|exceptionTitle
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|statusCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
operator|&&
operator|!
name|body
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
return|return
name|msg
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

