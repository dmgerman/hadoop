begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Various utility classes for SwiftFS support  */
end_comment

begin_class
DECL|class|SwiftUtils
specifier|public
specifier|final
class|class
name|SwiftUtils
block|{
DECL|field|READ
specifier|public
specifier|static
specifier|final
name|String
name|READ
init|=
literal|"read(buffer, offset, length)"
decl_stmt|;
comment|/**    * Join two (non null) paths, inserting a forward slash between them    * if needed    *    * @param path1 first path    * @param path2 second path    * @return the combined path    */
DECL|method|joinPaths (String path1, String path2)
specifier|public
specifier|static
name|String
name|joinPaths
parameter_list|(
name|String
name|path1
parameter_list|,
name|String
name|path2
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
name|path1
operator|.
name|length
argument_list|()
operator|+
name|path2
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|path1
argument_list|)
expr_stmt|;
name|boolean
name|insertSlash
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|path1
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|insertSlash
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|path2
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|insertSlash
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|insertSlash
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|path2
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * This test contains the is-directory logic for Swift, so if    * changed there is only one place for it.    *    * @param fileStatus status to examine    * @return true if we consider this status to be representative of a    *         directory.    */
DECL|method|isDirectory (FileStatus fileStatus)
specifier|public
specifier|static
name|boolean
name|isDirectory
parameter_list|(
name|FileStatus
name|fileStatus
parameter_list|)
block|{
return|return
name|fileStatus
operator|.
name|isDirectory
argument_list|()
operator|||
name|isFilePretendingToBeDirectory
argument_list|(
name|fileStatus
argument_list|)
return|;
block|}
comment|/**    * Test for the entry being a file that is treated as if it is a    * directory    *    * @param fileStatus status    * @return true if it meets the rules for being a directory    */
DECL|method|isFilePretendingToBeDirectory (FileStatus fileStatus)
specifier|public
specifier|static
name|boolean
name|isFilePretendingToBeDirectory
parameter_list|(
name|FileStatus
name|fileStatus
parameter_list|)
block|{
return|return
name|fileStatus
operator|.
name|getLen
argument_list|()
operator|==
literal|0
return|;
block|}
comment|/**    * Predicate: Is a swift object referring to the root directory?    * @param swiftObject object to probe    * @return true iff the object refers to the root    */
DECL|method|isRootDir (SwiftObjectPath swiftObject)
specifier|public
specifier|static
name|boolean
name|isRootDir
parameter_list|(
name|SwiftObjectPath
name|swiftObject
parameter_list|)
block|{
return|return
name|swiftObject
operator|.
name|objectMatches
argument_list|(
literal|""
argument_list|)
operator|||
name|swiftObject
operator|.
name|objectMatches
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
comment|/**    * Sprintf() to the log iff the log is at debug level. If the log    * is not at debug level, the printf operation is skipped, so    * no time is spent generating the string.    * @param log log to use    * @param text text message    * @param args args arguments to the print statement    */
DECL|method|debug (Log log, String text, Object... args)
specifier|public
specifier|static
name|void
name|debug
parameter_list|(
name|Log
name|log
parameter_list|,
name|String
name|text
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|text
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Log an exception (in text and trace) iff the log is at debug    * @param log Log to use    * @param text text message    * @param ex exception    */
DECL|method|debugEx (Log log, String text, Exception ex)
specifier|public
specifier|static
name|void
name|debugEx
parameter_list|(
name|Log
name|log
parameter_list|,
name|String
name|text
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|text
operator|+
name|ex
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sprintf() to the log iff the log is at trace level. If the log    * is not at trace level, the printf operation is skipped, so    * no time is spent generating the string.    * @param log log to use    * @param text text message    * @param args args arguments to the print statement    */
DECL|method|trace (Log log, String text, Object... args)
specifier|public
specifier|static
name|void
name|trace
parameter_list|(
name|Log
name|log
parameter_list|,
name|String
name|text
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|text
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Given a partition number, calculate the partition value.    * This is used in the SwiftNativeOutputStream, and is placed    * here for tests to be able to calculate the filename of    * a partition.    * @param partNumber part number    * @return a string to use as the filename    */
DECL|method|partitionFilenameFromNumber (int partNumber)
specifier|public
specifier|static
name|String
name|partitionFilenameFromNumber
parameter_list|(
name|int
name|partNumber
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%06d"
argument_list|,
name|partNumber
argument_list|)
return|;
block|}
comment|/**    * List a a path to string    * @param fileSystem filesystem    * @param path directory    * @return a listing of the filestatuses of elements in the directory, one    * to a line, preceded by the full path of the directory    * @throws IOException connectivity problems    */
DECL|method|ls (FileSystem fileSystem, Path path)
specifier|public
specifier|static
name|String
name|ls
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
comment|//surfaces when someone calls getParent() on something at the top of the path
return|return
literal|"/"
return|;
block|}
name|FileStatus
index|[]
name|stats
decl_stmt|;
name|String
name|pathtext
init|=
literal|"ls "
operator|+
name|path
decl_stmt|;
try|try
block|{
name|stats
operator|=
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
name|pathtext
operator|+
literal|" -file not found"
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|pathtext
operator|+
literal|" -failed: "
operator|+
name|e
return|;
block|}
return|return
name|pathtext
operator|+
name|fileStatsToString
argument_list|(
name|stats
argument_list|,
literal|"\n"
argument_list|)
return|;
block|}
comment|/**    * Take an array of filestatus and convert to a string (prefixed w/ a [01] counter    * @param stats array of stats    * @param separator separator after every entry    * @return a stringified set    */
DECL|method|fileStatsToString (FileStatus[] stats, String separator)
specifier|public
specifier|static
name|String
name|fileStatsToString
parameter_list|(
name|FileStatus
index|[]
name|stats
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|stats
operator|.
name|length
operator|*
literal|128
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"[%02d] %s"
argument_list|,
name|i
argument_list|,
name|stats
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Verify that the basic args to a read operation are valid;    * throws an exception if not -with meaningful text including    * @param buffer destination buffer    * @param off offset    * @param len number of bytes to read    * @throws NullPointerException null buffer    * @throws IndexOutOfBoundsException on any invalid range.    */
DECL|method|validateReadArgs (byte[] buffer, int off, int len)
specifier|public
specifier|static
name|void
name|validateReadArgs
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null byte array in"
operator|+
name|READ
argument_list|)
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Negative buffer offset "
operator|+
name|off
operator|+
literal|" in "
operator|+
name|READ
argument_list|)
throw|;
block|}
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Negative read length "
operator|+
name|len
operator|+
literal|" in "
operator|+
name|READ
argument_list|)
throw|;
block|}
if|if
condition|(
name|off
operator|>
name|buffer
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Buffer offset of "
operator|+
name|off
operator|+
literal|"beyond buffer size of "
operator|+
name|buffer
operator|.
name|length
operator|+
literal|" in "
operator|+
name|READ
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

