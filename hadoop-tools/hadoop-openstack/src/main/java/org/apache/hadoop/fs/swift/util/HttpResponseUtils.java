begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|HEADER_CONTENT_LENGTH
import|;
end_import

begin_comment
comment|/**  * Utility class for parsing HttpResponse. This class is implemented like  * {@code org.apache.commons.httpclient.HttpMethodBase.java} in httpclient 3.x.  */
end_comment

begin_class
DECL|class|HttpResponseUtils
specifier|public
specifier|abstract
class|class
name|HttpResponseUtils
block|{
comment|/**    * Returns the response body of the HTTPResponse, if any, as an array of bytes.    * If response body is not available or cannot be read, returns<tt>null</tt>    *    * Note: This will cause the entire response body to be buffered in memory. A    * malicious server may easily exhaust all the VM memory. It is strongly    * recommended, to use getResponseAsStream if the content length of the    * response is unknown or reasonably large.    *    * @param resp HttpResponse    * @return The response body    * @throws IOException If an I/O (transport) problem occurs while obtaining    * the response body.    */
DECL|method|getResponseBody (HttpResponse resp)
specifier|public
specifier|static
name|byte
index|[]
name|getResponseBody
parameter_list|(
name|HttpResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|instream
init|=
name|resp
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
init|)
block|{
if|if
condition|(
name|instream
operator|!=
literal|null
condition|)
block|{
name|long
name|contentLength
init|=
name|resp
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentLength
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|//guard integer cast from overflow
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Content too large to be buffered: "
operator|+
name|contentLength
operator|+
literal|" bytes"
argument_list|)
throw|;
block|}
name|ByteArrayOutputStream
name|outstream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|contentLength
operator|>
literal|0
condition|?
operator|(
name|int
operator|)
name|contentLength
else|:
literal|4
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|instream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|outstream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|outstream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|outstream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns the response body of the HTTPResponse, if any, as a {@link String}.    * If response body is not available or cannot be read, returns<tt>null</tt>    * The string conversion on the data is done using UTF-8.    *    * Note: This will cause the entire response body to be buffered in memory. A    * malicious server may easily exhaust all the VM memory. It is strongly    * recommended, to use getResponseAsStream if the content length of the    * response is unknown or reasonably large.    *    * @param resp HttpResponse    * @return The response body.    * @throws IOException If an I/O (transport) problem occurs while obtaining    * the response body.    */
DECL|method|getResponseBodyAsString (HttpResponse resp)
specifier|public
specifier|static
name|String
name|getResponseBodyAsString
parameter_list|(
name|HttpResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rawdata
init|=
name|getResponseBody
argument_list|(
name|resp
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawdata
operator|!=
literal|null
condition|)
block|{
return|return
name|EncodingUtils
operator|.
name|getString
argument_list|(
name|rawdata
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Return the length (in bytes) of the response body, as specified in a    *<tt>Content-Length</tt> header.    *    *<p>    * Return<tt>-1</tt> when the content-length is unknown.    *</p>    *    * @param resp HttpResponse    * @return content length, if<tt>Content-Length</tt> header is available.    *<tt>0</tt> indicates that the request has no body.    *          If<tt>Content-Length</tt> header is not present, the method    *          returns<tt>-1</tt>.    */
DECL|method|getContentLength (HttpResponse resp)
specifier|public
specifier|static
name|long
name|getContentLength
parameter_list|(
name|HttpResponse
name|resp
parameter_list|)
block|{
name|Header
name|header
init|=
name|resp
operator|.
name|getFirstHeader
argument_list|(
name|HEADER_CONTENT_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

