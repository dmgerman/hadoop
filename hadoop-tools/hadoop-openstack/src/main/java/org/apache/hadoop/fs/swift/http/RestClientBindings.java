begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConfigurationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class implements the binding logic between Hadoop configurations  * and the swift rest client.  *<p>  * The swift rest client takes a Properties instance containing  * the string values it uses to bind to a swift endpoint.  *<p>  * This class extracts the values for a specific filesystem endpoint  * and then builds an appropriate Properties file.  */
end_comment

begin_class
DECL|class|RestClientBindings
specifier|public
specifier|final
class|class
name|RestClientBindings
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RestClientBindings
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|E_INVALID_NAME
specifier|public
specifier|static
specifier|final
name|String
name|E_INVALID_NAME
init|=
literal|"Invalid swift hostname '%s':"
operator|+
literal|" hostname must in form container.service"
decl_stmt|;
comment|/**    * Public for testing : build the full prefix for use in resolving    * configuration items    *    * @param service service to use    * @return the prefix string<i>without any trailing "."</i>    */
DECL|method|buildSwiftInstancePrefix (String service)
specifier|public
specifier|static
name|String
name|buildSwiftInstancePrefix
parameter_list|(
name|String
name|service
parameter_list|)
block|{
return|return
name|SWIFT_SERVICE_PREFIX
operator|+
name|service
return|;
block|}
comment|/**    * Raise an exception for an invalid service name    *    * @param hostname hostname that was being parsed    * @return an exception to throw    */
DECL|method|invalidName (String hostname)
specifier|private
specifier|static
name|SwiftConfigurationException
name|invalidName
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
return|return
operator|new
name|SwiftConfigurationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_INVALID_NAME
argument_list|,
name|hostname
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get the container name from the hostname -the single element before the    * first "." in the hostname    *    * @param hostname hostname to split    * @return the container    * @throws SwiftConfigurationException    */
DECL|method|extractContainerName (String hostname)
specifier|public
specifier|static
name|String
name|extractContainerName
parameter_list|(
name|String
name|hostname
parameter_list|)
throws|throws
name|SwiftConfigurationException
block|{
name|int
name|i
init|=
name|hostname
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<=
literal|0
condition|)
block|{
throw|throw
name|invalidName
argument_list|(
name|hostname
argument_list|)
throw|;
block|}
return|return
name|hostname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|extractContainerName (URI uri)
specifier|public
specifier|static
name|String
name|extractContainerName
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|SwiftConfigurationException
block|{
return|return
name|extractContainerName
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the service name from a longer hostname string    *    * @param hostname hostname    * @return the separated out service name    * @throws SwiftConfigurationException if the hostname was invalid    */
DECL|method|extractServiceName (String hostname)
specifier|public
specifier|static
name|String
name|extractServiceName
parameter_list|(
name|String
name|hostname
parameter_list|)
throws|throws
name|SwiftConfigurationException
block|{
name|int
name|i
init|=
name|hostname
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<=
literal|0
condition|)
block|{
throw|throw
name|invalidName
argument_list|(
name|hostname
argument_list|)
throw|;
block|}
name|String
name|service
init|=
name|hostname
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|.
name|isEmpty
argument_list|()
operator|||
name|service
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|//empty service contains dots in -not currently supported
throw|throw
name|invalidName
argument_list|(
name|hostname
argument_list|)
throw|;
block|}
return|return
name|service
return|;
block|}
DECL|method|extractServiceName (URI uri)
specifier|public
specifier|static
name|String
name|extractServiceName
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|SwiftConfigurationException
block|{
return|return
name|extractServiceName
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Build a properties instance bound to the configuration file -using    * the filesystem URI as the source of the information.    *    * @param fsURI filesystem URI    * @param conf  configuration    * @return a properties file with the instance-specific properties extracted    *         and bound to the swift client properties.    * @throws SwiftConfigurationException if the configuration is invalid    */
DECL|method|bind (URI fsURI, Configuration conf)
specifier|public
specifier|static
name|Properties
name|bind
parameter_list|(
name|URI
name|fsURI
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|SwiftConfigurationException
block|{
name|String
name|host
init|=
name|fsURI
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
operator|||
name|host
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//expect shortnames -> conf names
throw|throw
name|invalidName
argument_list|(
name|host
argument_list|)
throw|;
block|}
name|String
name|container
init|=
name|extractContainerName
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|service
init|=
name|extractServiceName
argument_list|(
name|host
argument_list|)
decl_stmt|;
comment|//build filename schema
name|String
name|prefix
init|=
name|buildSwiftInstancePrefix
argument_list|(
name|service
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Filesystem "
operator|+
name|fsURI
operator|+
literal|" is using configuration keys "
operator|+
name|prefix
argument_list|)
expr_stmt|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|SWIFT_SERVICE_PROPERTY
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|SWIFT_CONTAINER_PROPERTY
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|conf
argument_list|,
name|prefix
operator|+
name|DOT_AUTH_URL
argument_list|,
name|props
argument_list|,
name|SWIFT_AUTH_PROPERTY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|conf
argument_list|,
name|prefix
operator|+
name|DOT_USERNAME
argument_list|,
name|props
argument_list|,
name|SWIFT_USERNAME_PROPERTY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|conf
argument_list|,
name|prefix
operator|+
name|DOT_APIKEY
argument_list|,
name|props
argument_list|,
name|SWIFT_APIKEY_PROPERTY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|conf
argument_list|,
name|prefix
operator|+
name|DOT_PASSWORD
argument_list|,
name|props
argument_list|,
name|SWIFT_PASSWORD_PROPERTY
argument_list|,
name|props
operator|.
name|contains
argument_list|(
name|SWIFT_APIKEY_PROPERTY
argument_list|)
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|conf
argument_list|,
name|prefix
operator|+
name|DOT_TENANT
argument_list|,
name|props
argument_list|,
name|SWIFT_TENANT_PROPERTY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|conf
argument_list|,
name|prefix
operator|+
name|DOT_REGION
argument_list|,
name|props
argument_list|,
name|SWIFT_REGION_PROPERTY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|conf
argument_list|,
name|prefix
operator|+
name|DOT_HTTP_PORT
argument_list|,
name|props
argument_list|,
name|SWIFT_HTTP_PORT_PROPERTY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|conf
argument_list|,
name|prefix
operator|+
name|DOT_HTTPS_PORT
argument_list|,
name|props
argument_list|,
name|SWIFT_HTTPS_PORT_PROPERTY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|copyBool
argument_list|(
name|conf
argument_list|,
name|prefix
operator|+
name|DOT_PUBLIC
argument_list|,
name|props
argument_list|,
name|SWIFT_PUBLIC_PROPERTY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|copyBool
argument_list|(
name|conf
argument_list|,
name|prefix
operator|+
name|DOT_LOCATION_AWARE
argument_list|,
name|props
argument_list|,
name|SWIFT_LOCATION_AWARE_PROPERTY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
comment|/**    * Extract a boolean value from the configuration and copy it to the    * properties instance.    * @param conf     source configuration    * @param confKey  key in the configuration file    * @param props    destination property set    * @param propsKey key in the property set    * @param defVal default value    */
DECL|method|copyBool (Configuration conf, String confKey, Properties props, String propsKey, boolean defVal)
specifier|private
specifier|static
name|void
name|copyBool
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|confKey
parameter_list|,
name|Properties
name|props
parameter_list|,
name|String
name|propsKey
parameter_list|,
name|boolean
name|defVal
parameter_list|)
block|{
name|boolean
name|b
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|confKey
argument_list|,
name|defVal
argument_list|)
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|propsKey
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|set (Properties props, String key, String optVal)
specifier|private
specifier|static
name|void
name|set
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|optVal
parameter_list|)
block|{
if|if
condition|(
name|optVal
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|optVal
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Copy a (trimmed) property from the configuration file to the properties file.    *<p>    * If marked as required and not found in the configuration, an    * exception is raised.    * If not required -and missing- then the property will not be set.    * In this case, if the property is already in the Properties instance,    * it will remain untouched.    *    * @param conf     source configuration    * @param confKey  key in the configuration file    * @param props    destination property set    * @param propsKey key in the property set    * @param required is the property required    * @throws SwiftConfigurationException if the property is required but was    *                                     not found in the configuration instance.    */
DECL|method|copy (Configuration conf, String confKey, Properties props, String propsKey, boolean required)
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|confKey
parameter_list|,
name|Properties
name|props
parameter_list|,
name|String
name|propsKey
parameter_list|,
name|boolean
name|required
parameter_list|)
throws|throws
name|SwiftConfigurationException
block|{
comment|//TODO: replace. version compatibility issue conf.getTrimmed fails with NoSuchMethodError
name|String
name|val
init|=
name|conf
operator|.
name|get
argument_list|(
name|confKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|val
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|required
operator|&&
name|val
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SwiftConfigurationException
argument_list|(
literal|"Missing mandatory configuration option: "
operator|+
name|confKey
argument_list|)
throw|;
block|}
name|set
argument_list|(
name|props
argument_list|,
name|propsKey
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

