begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Build a duration stats table to which you can add statistics.  * Designed to be multithreaded  */
end_comment

begin_class
DECL|class|DurationStatsTable
specifier|public
class|class
name|DurationStatsTable
block|{
DECL|field|statsTable
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DurationStats
argument_list|>
name|statsTable
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DurationStats
argument_list|>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
comment|/**    * Add an operation    * @param operation operation name    * @param duration duration    */
DECL|method|add (String operation, Duration duration, boolean success)
specifier|public
name|void
name|add
parameter_list|(
name|String
name|operation
parameter_list|,
name|Duration
name|duration
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
name|DurationStats
name|durationStats
decl_stmt|;
name|String
name|key
init|=
name|operation
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|key
operator|+=
literal|"-FAIL"
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|durationStats
operator|=
name|statsTable
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|durationStats
operator|==
literal|null
condition|)
block|{
name|durationStats
operator|=
operator|new
name|DurationStats
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|statsTable
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|durationStats
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|durationStats
init|)
block|{
name|durationStats
operator|.
name|add
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the current duration statistics    * @return a snapshot of the statistics    */
DECL|method|getDurationStatistics ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|DurationStats
argument_list|>
name|getDurationStatistics
parameter_list|()
block|{
name|List
argument_list|<
name|DurationStats
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|DurationStats
argument_list|>
argument_list|(
name|statsTable
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DurationStats
name|stat
range|:
name|statsTable
operator|.
name|values
argument_list|()
control|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|DurationStats
argument_list|(
name|stat
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * reset the values of the statistics. This doesn't delete them, merely zeroes them.    */
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|DurationStats
name|stat
range|:
name|statsTable
operator|.
name|values
argument_list|()
control|)
block|{
name|stat
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

