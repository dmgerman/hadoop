begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|DefaultHttpMethodRetryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpMethodBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|DeleteMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|GetMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|HeadMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|InputStreamRequestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|PostMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|PutMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|StringRequestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|params
operator|.
name|HttpConnectionParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|params
operator|.
name|HttpMethodParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|ApiKeyAuthenticationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|ApiKeyCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|AuthenticationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|AuthenticationRequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|AuthenticationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|AuthenticationWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|KeyStoneAuthRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|KeystoneApiKeyCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|PasswordAuthenticationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|PasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|entities
operator|.
name|AccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|entities
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|auth
operator|.
name|entities
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftAuthenticationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftBadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftInternalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftInvalidResponseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftThrottledRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|DurationStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|DurationStatsTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|JSONUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftObjectPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|params
operator|.
name|ConnRoutePNames
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpStatus
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
operator|.
name|SwiftProtocolConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This implements the client-side of the Swift REST API  *  * The core actions put, get and query data in the Swift object store,  * after authenticating the client.  *  *<b>Logging:</b>  *  * Logging at DEBUG level displays detail about the actions of this  * client, including HTTP requests and responses -excluding authentication  * details.  */
end_comment

begin_class
DECL|class|SwiftRestClient
specifier|public
specifier|final
class|class
name|SwiftRestClient
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SwiftRestClient
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Header that says "use newest version" -ensures that    * the query doesn't pick up older versions served by    * an eventually consistent filesystem (except in the special case    * of a network partition, at which point no guarantees about    * consistency can be made.    */
DECL|field|NEWEST
specifier|public
specifier|static
specifier|final
name|Header
name|NEWEST
init|=
operator|new
name|Header
argument_list|(
name|SwiftProtocolConstants
operator|.
name|X_NEWEST
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
comment|/**    * the authentication endpoint as supplied in the configuration    */
DECL|field|authUri
specifier|private
specifier|final
name|URI
name|authUri
decl_stmt|;
comment|/**    * Swift region. Some OpenStack installations has more than one region.    * In this case user can specify the region with which Hadoop will be working    */
DECL|field|region
specifier|private
specifier|final
name|String
name|region
decl_stmt|;
comment|/**    * tenant name    */
DECL|field|tenant
specifier|private
specifier|final
name|String
name|tenant
decl_stmt|;
comment|/**    * username name    */
DECL|field|username
specifier|private
specifier|final
name|String
name|username
decl_stmt|;
comment|/**    * user password    */
DECL|field|password
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
comment|/**    * user api key    */
DECL|field|apiKey
specifier|private
specifier|final
name|String
name|apiKey
decl_stmt|;
comment|/**    * The authentication request used to authenticate with Swift    */
DECL|field|authRequest
specifier|private
specifier|final
name|AuthenticationRequest
name|authRequest
decl_stmt|;
comment|/**    * This auth request is similar to @see authRequest,    * with one difference: it has another json representation when    * authRequest one is not applicable    */
DECL|field|keystoneAuthRequest
specifier|private
name|AuthenticationRequest
name|keystoneAuthRequest
decl_stmt|;
DECL|field|useKeystoneAuthentication
specifier|private
name|boolean
name|useKeystoneAuthentication
init|=
literal|false
decl_stmt|;
comment|/**    * The container this client is working with    */
DECL|field|container
specifier|private
specifier|final
name|String
name|container
decl_stmt|;
DECL|field|serviceDescription
specifier|private
specifier|final
name|String
name|serviceDescription
decl_stmt|;
comment|/**    * Access token (Secret)    */
DECL|field|token
specifier|private
name|AccessToken
name|token
decl_stmt|;
comment|/**    * Endpoint for swift operations, obtained after authentication    */
DECL|field|endpointURI
specifier|private
name|URI
name|endpointURI
decl_stmt|;
comment|/**    * URI under which objects can be found.    * This is set when the user is authenticated -the URI    * is returned in the body of the success response.    */
DECL|field|objectLocationURI
specifier|private
name|URI
name|objectLocationURI
decl_stmt|;
DECL|field|filesystemURI
specifier|private
specifier|final
name|URI
name|filesystemURI
decl_stmt|;
comment|/**    * The name of the service provider    */
DECL|field|serviceProvider
specifier|private
specifier|final
name|String
name|serviceProvider
decl_stmt|;
comment|/**    * Should the public swift endpoint be used, rather than the in-cluster one?    */
DECL|field|usePublicURL
specifier|private
specifier|final
name|boolean
name|usePublicURL
decl_stmt|;
comment|/**    * Number of times to retry a connection    */
DECL|field|retryCount
specifier|private
specifier|final
name|int
name|retryCount
decl_stmt|;
comment|/**    * How long (in milliseconds) should a connection be attempted    */
DECL|field|connectTimeout
specifier|private
specifier|final
name|int
name|connectTimeout
decl_stmt|;
comment|/**    * How long (in milliseconds) should a connection be attempted    */
DECL|field|socketTimeout
specifier|private
specifier|final
name|int
name|socketTimeout
decl_stmt|;
comment|/**    * How long (in milliseconds) between bulk operations    */
DECL|field|throttleDelay
specifier|private
specifier|final
name|int
name|throttleDelay
decl_stmt|;
comment|/**   * the name of a proxy host (can be null, in which case there is no proxy)    */
DECL|field|proxyHost
specifier|private
name|String
name|proxyHost
decl_stmt|;
comment|/**    * The port of a proxy. This is ignored if {@link #proxyHost} is null    */
DECL|field|proxyPort
specifier|private
name|int
name|proxyPort
decl_stmt|;
comment|/**    * Flag to indicate whether or not the client should    * query for file location data.    */
DECL|field|locationAware
specifier|private
specifier|final
name|boolean
name|locationAware
decl_stmt|;
DECL|field|partSizeKB
specifier|private
specifier|final
name|int
name|partSizeKB
decl_stmt|;
comment|/**    * The blocksize of this FS    */
DECL|field|blocksizeKB
specifier|private
specifier|final
name|int
name|blocksizeKB
decl_stmt|;
DECL|field|bufferSizeKB
specifier|private
specifier|final
name|int
name|bufferSizeKB
decl_stmt|;
DECL|field|durationStats
specifier|private
specifier|final
name|DurationStatsTable
name|durationStats
init|=
operator|new
name|DurationStatsTable
argument_list|()
decl_stmt|;
comment|/**    * objects query endpoint. This is synchronized    * to handle a simultaneous update of all auth data in one    * go.    */
DECL|method|getEndpointURI ()
specifier|private
specifier|synchronized
name|URI
name|getEndpointURI
parameter_list|()
block|{
return|return
name|endpointURI
return|;
block|}
comment|/**    * object location endpoint    */
DECL|method|getObjectLocationURI ()
specifier|private
specifier|synchronized
name|URI
name|getObjectLocationURI
parameter_list|()
block|{
return|return
name|objectLocationURI
return|;
block|}
comment|/**    * token for Swift communication    */
DECL|method|getToken ()
specifier|private
specifier|synchronized
name|AccessToken
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
comment|/**    * Setter of authentication and endpoint details.    * Being synchronized guarantees that all three fields are set up together.    * It is up to the reader to read all three fields in their own    * synchronized block to be sure that they are all consistent.    *    * @param endpoint endpoint URI    * @param objectLocation object location URI    * @param authToken auth token    */
DECL|method|setAuthDetails (URI endpoint, URI objectLocation, AccessToken authToken)
specifier|private
name|void
name|setAuthDetails
parameter_list|(
name|URI
name|endpoint
parameter_list|,
name|URI
name|objectLocation
parameter_list|,
name|AccessToken
name|authToken
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"setAuth: endpoint=%s; objectURI=%s; token=%s"
argument_list|,
name|endpoint
argument_list|,
name|objectLocation
argument_list|,
name|authToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|endpointURI
operator|=
name|endpoint
expr_stmt|;
name|objectLocationURI
operator|=
name|objectLocation
expr_stmt|;
name|token
operator|=
name|authToken
expr_stmt|;
block|}
block|}
comment|/**    * Base class for all Swift REST operations    *    * @param<M> method    * @param<R> result    */
DECL|class|HttpMethodProcessor
specifier|private
specifier|static
specifier|abstract
class|class
name|HttpMethodProcessor
parameter_list|<
name|M
extends|extends
name|HttpMethod
parameter_list|,
name|R
parameter_list|>
block|{
DECL|method|createMethod (String uri)
specifier|public
specifier|final
name|M
name|createMethod
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|M
name|method
init|=
name|doCreateMethod
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|setup
argument_list|(
name|method
argument_list|)
expr_stmt|;
return|return
name|method
return|;
block|}
comment|/**      * Override it to return some result after method is executed.      */
DECL|method|extractResult (M method)
specifier|public
specifier|abstract
name|R
name|extractResult
parameter_list|(
name|M
name|method
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Factory method to create a REST method against the given URI      *      * @param uri target      * @return method to invoke      */
DECL|method|doCreateMethod (String uri)
specifier|protected
specifier|abstract
name|M
name|doCreateMethod
parameter_list|(
name|String
name|uri
parameter_list|)
function_decl|;
comment|/**      * Override port to set up the method before it is executed.      */
DECL|method|setup (M method)
specifier|protected
name|void
name|setup
parameter_list|(
name|M
name|method
parameter_list|)
throws|throws
name|IOException
block|{     }
comment|/**      * Override point: what are the status codes that this operation supports      *      * @return an array with the permitted status code(s)      */
DECL|method|getAllowedStatusCodes ()
specifier|protected
name|int
index|[]
name|getAllowedStatusCodes
parameter_list|()
block|{
return|return
operator|new
name|int
index|[]
block|{
name|SC_OK
block|,
name|SC_CREATED
block|,
name|SC_ACCEPTED
block|,
name|SC_NO_CONTENT
block|,
name|SC_PARTIAL_CONTENT
block|,       }
return|;
block|}
block|}
DECL|class|GetMethodProcessor
specifier|private
specifier|static
specifier|abstract
class|class
name|GetMethodProcessor
parameter_list|<
name|R
parameter_list|>
extends|extends
name|HttpMethodProcessor
argument_list|<
name|GetMethod
argument_list|,
name|R
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateMethod (String uri)
specifier|protected
specifier|final
name|GetMethod
name|doCreateMethod
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|GetMethod
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
DECL|class|PostMethodProcessor
specifier|private
specifier|static
specifier|abstract
class|class
name|PostMethodProcessor
parameter_list|<
name|R
parameter_list|>
extends|extends
name|HttpMethodProcessor
argument_list|<
name|PostMethod
argument_list|,
name|R
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateMethod (String uri)
specifier|protected
specifier|final
name|PostMethod
name|doCreateMethod
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|PostMethod
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
comment|/**    * There's a special type for auth messages, so that low-level    * message handlers can react to auth failures differently from everything    * else.    */
DECL|class|AuthPostMethod
specifier|private
specifier|static
class|class
name|AuthPostMethod
extends|extends
name|PostMethod
block|{
DECL|method|AuthPostMethod (String uri)
specifier|private
name|AuthPostMethod
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Generate an auth message    * @param<R> response    */
DECL|class|AuthMethodProcessor
specifier|private
specifier|static
specifier|abstract
class|class
name|AuthMethodProcessor
parameter_list|<
name|R
parameter_list|>
extends|extends
name|HttpMethodProcessor
argument_list|<
name|AuthPostMethod
argument_list|,
name|R
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateMethod (String uri)
specifier|protected
specifier|final
name|AuthPostMethod
name|doCreateMethod
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|AuthPostMethod
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
DECL|class|PutMethodProcessor
specifier|private
specifier|static
specifier|abstract
class|class
name|PutMethodProcessor
parameter_list|<
name|R
parameter_list|>
extends|extends
name|HttpMethodProcessor
argument_list|<
name|PutMethod
argument_list|,
name|R
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateMethod (String uri)
specifier|protected
specifier|final
name|PutMethod
name|doCreateMethod
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|PutMethod
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      * Override point: what are the status codes that this operation supports      *      * @return the list of status codes to accept      */
annotation|@
name|Override
DECL|method|getAllowedStatusCodes ()
specifier|protected
name|int
index|[]
name|getAllowedStatusCodes
parameter_list|()
block|{
return|return
operator|new
name|int
index|[]
block|{
name|SC_OK
block|,
name|SC_CREATED
block|,
name|SC_NO_CONTENT
block|,
name|SC_ACCEPTED
block|,       }
return|;
block|}
block|}
comment|/**    * Create operation    *    * @param<R>    */
DECL|class|CopyMethodProcessor
specifier|private
specifier|static
specifier|abstract
class|class
name|CopyMethodProcessor
parameter_list|<
name|R
parameter_list|>
extends|extends
name|HttpMethodProcessor
argument_list|<
name|CopyMethod
argument_list|,
name|R
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateMethod (String uri)
specifier|protected
specifier|final
name|CopyMethod
name|doCreateMethod
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|CopyMethod
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      * The only allowed status code is 201:created      * @return an array with the permitted status code(s)      */
annotation|@
name|Override
DECL|method|getAllowedStatusCodes ()
specifier|protected
name|int
index|[]
name|getAllowedStatusCodes
parameter_list|()
block|{
return|return
operator|new
name|int
index|[]
block|{
name|SC_CREATED
block|}
return|;
block|}
block|}
comment|/**    * Delete operation    *    * @param<R>    */
DECL|class|DeleteMethodProcessor
specifier|private
specifier|static
specifier|abstract
class|class
name|DeleteMethodProcessor
parameter_list|<
name|R
parameter_list|>
extends|extends
name|HttpMethodProcessor
argument_list|<
name|DeleteMethod
argument_list|,
name|R
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateMethod (String uri)
specifier|protected
specifier|final
name|DeleteMethod
name|doCreateMethod
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|DeleteMethod
argument_list|(
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllowedStatusCodes ()
specifier|protected
name|int
index|[]
name|getAllowedStatusCodes
parameter_list|()
block|{
return|return
operator|new
name|int
index|[]
block|{
name|SC_OK
block|,
name|SC_ACCEPTED
block|,
name|SC_NO_CONTENT
block|,
name|SC_NOT_FOUND
block|}
return|;
block|}
block|}
DECL|class|HeadMethodProcessor
specifier|private
specifier|static
specifier|abstract
class|class
name|HeadMethodProcessor
parameter_list|<
name|R
parameter_list|>
extends|extends
name|HttpMethodProcessor
argument_list|<
name|HeadMethod
argument_list|,
name|R
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateMethod (String uri)
specifier|protected
specifier|final
name|HeadMethod
name|doCreateMethod
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|HeadMethod
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
comment|/**    * Create a Swift Rest Client instance.    *    * @param filesystemURI filesystem URI    * @param conf The configuration to use to extract the binding    * @throws SwiftConfigurationException the configuration is not valid for    * defining a rest client against the service    */
DECL|method|SwiftRestClient (URI filesystemURI, Configuration conf)
specifier|private
name|SwiftRestClient
parameter_list|(
name|URI
name|filesystemURI
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|SwiftConfigurationException
block|{
name|this
operator|.
name|filesystemURI
operator|=
name|filesystemURI
expr_stmt|;
name|Properties
name|props
init|=
name|RestClientBindings
operator|.
name|bind
argument_list|(
name|filesystemURI
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|stringAuthUri
init|=
name|getOption
argument_list|(
name|props
argument_list|,
name|SWIFT_AUTH_PROPERTY
argument_list|)
decl_stmt|;
name|username
operator|=
name|getOption
argument_list|(
name|props
argument_list|,
name|SWIFT_USERNAME_PROPERTY
argument_list|)
expr_stmt|;
name|password
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|SWIFT_PASSWORD_PROPERTY
argument_list|)
expr_stmt|;
name|apiKey
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|SWIFT_APIKEY_PROPERTY
argument_list|)
expr_stmt|;
comment|//optional
name|region
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|SWIFT_REGION_PROPERTY
argument_list|)
expr_stmt|;
comment|//tenant is optional
name|tenant
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|SWIFT_TENANT_PROPERTY
argument_list|)
expr_stmt|;
comment|//service is used for diagnostics
name|serviceProvider
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|SWIFT_SERVICE_PROPERTY
argument_list|)
expr_stmt|;
name|container
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|SWIFT_CONTAINER_PROPERTY
argument_list|)
expr_stmt|;
name|String
name|isPubProp
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|SWIFT_PUBLIC_PROPERTY
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
name|usePublicURL
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|isPubProp
argument_list|)
expr_stmt|;
if|if
condition|(
name|apiKey
operator|==
literal|null
operator|&&
name|password
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SwiftConfigurationException
argument_list|(
literal|"Configuration for "
operator|+
name|filesystemURI
operator|+
literal|" must contain either "
operator|+
name|SWIFT_PASSWORD_PROPERTY
operator|+
literal|" or "
operator|+
name|SWIFT_APIKEY_PROPERTY
argument_list|)
throw|;
block|}
comment|//create the (reusable) authentication request
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|authRequest
operator|=
operator|new
name|PasswordAuthenticationRequest
argument_list|(
name|tenant
argument_list|,
operator|new
name|PasswordCredentials
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authRequest
operator|=
operator|new
name|ApiKeyAuthenticationRequest
argument_list|(
name|tenant
argument_list|,
operator|new
name|ApiKeyCredentials
argument_list|(
name|username
argument_list|,
name|apiKey
argument_list|)
argument_list|)
expr_stmt|;
name|keystoneAuthRequest
operator|=
operator|new
name|KeyStoneAuthRequest
argument_list|(
name|tenant
argument_list|,
operator|new
name|KeystoneApiKeyCredentials
argument_list|(
name|username
argument_list|,
name|apiKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|locationAware
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|SWIFT_LOCATION_AWARE_PROPERTY
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
comment|//now read in properties that are shared across all connections
comment|//connection and retries
try|try
block|{
name|retryCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SWIFT_RETRY_COUNT
argument_list|,
name|DEFAULT_RETRY_COUNT
argument_list|)
expr_stmt|;
name|connectTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SWIFT_CONNECTION_TIMEOUT
argument_list|,
name|DEFAULT_CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
name|socketTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SWIFT_SOCKET_TIMEOUT
argument_list|,
name|DEFAULT_SOCKET_TIMEOUT
argument_list|)
expr_stmt|;
name|throttleDelay
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SWIFT_THROTTLE_DELAY
argument_list|,
name|DEFAULT_THROTTLE_DELAY
argument_list|)
expr_stmt|;
comment|//proxy options
name|proxyHost
operator|=
name|conf
operator|.
name|get
argument_list|(
name|SWIFT_PROXY_HOST_PROPERTY
argument_list|)
expr_stmt|;
name|proxyPort
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SWIFT_PROXY_PORT_PROPERTY
argument_list|,
literal|8080
argument_list|)
expr_stmt|;
name|blocksizeKB
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SWIFT_BLOCKSIZE
argument_list|,
name|DEFAULT_SWIFT_BLOCKSIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocksizeKB
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SwiftConfigurationException
argument_list|(
literal|"Invalid blocksize set in "
operator|+
name|SWIFT_BLOCKSIZE
operator|+
literal|": "
operator|+
name|blocksizeKB
argument_list|)
throw|;
block|}
name|partSizeKB
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SWIFT_PARTITION_SIZE
argument_list|,
name|DEFAULT_SWIFT_PARTITION_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|partSizeKB
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SwiftConfigurationException
argument_list|(
literal|"Invalid partition size set in "
operator|+
name|SWIFT_PARTITION_SIZE
operator|+
literal|": "
operator|+
name|partSizeKB
argument_list|)
throw|;
block|}
name|bufferSizeKB
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SWIFT_REQUEST_SIZE
argument_list|,
name|DEFAULT_SWIFT_REQUEST_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|bufferSizeKB
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SwiftConfigurationException
argument_list|(
literal|"Invalid buffer size set in "
operator|+
name|SWIFT_REQUEST_SIZE
operator|+
literal|": "
operator|+
name|bufferSizeKB
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//convert exceptions raised parsing ints and longs into
comment|// SwiftConfigurationException instances
throw|throw
operator|new
name|SwiftConfigurationException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//everything you need for diagnostics. The password is omitted.
name|serviceDescription
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Service={%s} container={%s} uri={%s}"
operator|+
literal|" tenant={%s} user={%s} region={%s}"
operator|+
literal|" publicURL={%b}"
operator|+
literal|" location aware={%b}"
operator|+
literal|" partition size={%d KB}, buffer size={%d KB}"
operator|+
literal|" block size={%d KB}"
operator|+
literal|" connect timeout={%d}, retry count={%d}"
operator|+
literal|" socket timeout={%d}"
operator|+
literal|" throttle delay={%d}"
argument_list|,
name|serviceProvider
argument_list|,
name|container
argument_list|,
name|stringAuthUri
argument_list|,
name|tenant
argument_list|,
name|username
argument_list|,
name|region
operator|!=
literal|null
condition|?
name|region
else|:
literal|"(none)"
argument_list|,
name|usePublicURL
argument_list|,
name|locationAware
argument_list|,
name|partSizeKB
argument_list|,
name|bufferSizeKB
argument_list|,
name|blocksizeKB
argument_list|,
name|connectTimeout
argument_list|,
name|retryCount
argument_list|,
name|socketTimeout
argument_list|,
name|throttleDelay
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|serviceDescription
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|authUri
operator|=
operator|new
name|URI
argument_list|(
name|stringAuthUri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftConfigurationException
argument_list|(
literal|"The "
operator|+
name|SWIFT_AUTH_PROPERTY
operator|+
literal|" property was incorrect: "
operator|+
name|stringAuthUri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get a mandatory configuration option    *    * @param props property set    * @param key   key    * @return value of the configuration    * @throws SwiftConfigurationException if there was no match for the key    */
DECL|method|getOption (Properties props, String key)
specifier|private
specifier|static
name|String
name|getOption
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|SwiftConfigurationException
block|{
name|String
name|val
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SwiftConfigurationException
argument_list|(
literal|"Undefined property: "
operator|+
name|key
argument_list|)
throw|;
block|}
return|return
name|val
return|;
block|}
comment|/**    * Make an HTTP GET request to Swift to get a range of data in the object.    *    * @param path   path to object    * @param offset offset from file beginning    * @param length file length    * @return The input stream -which must be closed afterwards.    * @throws IOException Problems    * @throws SwiftException swift specific error    * @throws FileNotFoundException path is not there    */
DECL|method|getData (SwiftObjectPath path, long offset, long length)
specifier|public
name|HttpBodyContent
name|getData
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SwiftException
argument_list|(
literal|"Invalid offset: "
operator|+
name|offset
operator|+
literal|" in getDataAsInputStream( path="
operator|+
name|path
operator|+
literal|", offset="
operator|+
name|offset
operator|+
literal|", length ="
operator|+
name|length
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SwiftException
argument_list|(
literal|"Invalid length: "
operator|+
name|length
operator|+
literal|" in getDataAsInputStream( path="
operator|+
name|path
operator|+
literal|", offset="
operator|+
name|offset
operator|+
literal|", length ="
operator|+
name|length
operator|+
literal|")"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|range
init|=
name|String
operator|.
name|format
argument_list|(
name|SWIFT_RANGE_HEADER_FORMAT_PATTERN
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getData:"
operator|+
name|range
argument_list|)
expr_stmt|;
block|}
return|return
name|getData
argument_list|(
name|path
argument_list|,
operator|new
name|Header
argument_list|(
name|HEADER_RANGE
argument_list|,
name|range
argument_list|)
argument_list|,
name|SwiftRestClient
operator|.
name|NEWEST
argument_list|)
return|;
block|}
comment|/**    * Returns object length    *    * @param uri file URI    * @return object length    * @throws SwiftException on swift-related issues    * @throws IOException on network/IO problems    */
DECL|method|getContentLength (URI uri)
specifier|public
name|long
name|getContentLength
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|preRemoteCommand
argument_list|(
literal|"getContentLength"
argument_list|)
expr_stmt|;
return|return
name|perform
argument_list|(
literal|"getContentLength"
argument_list|,
name|uri
argument_list|,
operator|new
name|HeadMethodProcessor
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|extractResult
parameter_list|(
name|HeadMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|method
operator|.
name|getResponseContentLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|HeadMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|setup
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|method
operator|.
name|addRequestHeader
argument_list|(
name|NEWEST
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Get the length of the remote object    * @param path object to probe    * @return the content length    * @throws IOException on any failure    */
DECL|method|getContentLength (SwiftObjectPath path)
specifier|public
name|long
name|getContentLength
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getContentLength
argument_list|(
name|pathToURI
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get the path contents as an input stream.    *<b>Warning:</b> this input stream must be closed to avoid    * keeping Http connections open.    *    * @param path path to file    * @param requestHeaders http headers    * @return byte[] file data or null if the object was not found    * @throws IOException on IO Faults    * @throws FileNotFoundException if there is nothing at the path    */
DECL|method|getData (SwiftObjectPath path, final Header... requestHeaders)
specifier|public
name|HttpBodyContent
name|getData
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|,
specifier|final
name|Header
modifier|...
name|requestHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|preRemoteCommand
argument_list|(
literal|"getData"
argument_list|)
expr_stmt|;
return|return
name|doGet
argument_list|(
name|pathToURI
argument_list|(
name|path
argument_list|)
argument_list|,
name|requestHeaders
argument_list|)
return|;
block|}
comment|/**    * Returns object location as byte[]    *    * @param path path to file    * @param requestHeaders http headers    * @return byte[] file data or null if the object was not found    * @throws IOException on IO Faults    */
DECL|method|getObjectLocation (SwiftObjectPath path, final Header... requestHeaders)
specifier|public
name|byte
index|[]
name|getObjectLocation
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|,
specifier|final
name|Header
modifier|...
name|requestHeaders
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isLocationAware
argument_list|()
condition|)
block|{
comment|//if the filesystem is not location aware, do not ask for this information
return|return
literal|null
return|;
block|}
name|preRemoteCommand
argument_list|(
literal|"getObjectLocation"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|perform
argument_list|(
literal|"getObjectLocation"
argument_list|,
name|pathToObjectLocation
argument_list|(
name|path
argument_list|)
argument_list|,
operator|new
name|GetMethodProcessor
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|int
index|[]
name|getAllowedStatusCodes
parameter_list|()
block|{
return|return
operator|new
name|int
index|[]
block|{
name|SC_OK
block|,
name|SC_FORBIDDEN
block|,
name|SC_NO_CONTENT
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|extractResult
parameter_list|(
name|GetMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO: remove SC_NO_CONTENT if it depends on Swift versions
if|if
condition|(
name|method
operator|.
name|getStatusCode
argument_list|()
operator|==
name|SC_NOT_FOUND
operator|||
name|method
operator|.
name|getStatusCode
argument_list|()
operator|==
name|SC_FORBIDDEN
operator|||
name|method
operator|.
name|getStatusCode
argument_list|()
operator|==
name|SC_NO_CONTENT
operator|||
name|method
operator|.
name|getResponseBodyAsStream
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|InputStream
name|responseBodyAsStream
init|=
name|method
operator|.
name|getResponseBodyAsStream
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|locationData
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
return|return
name|responseBodyAsStream
operator|.
name|read
argument_list|(
name|locationData
argument_list|)
operator|>
literal|0
condition|?
name|locationData
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|GetMethod
name|method
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
name|setHeaders
argument_list|(
name|method
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get the location of "
operator|+
name|path
operator|+
literal|": "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Create the URI needed to query the location of an object    * @param path object path to retrieve information about    * @return the URI for the location operation    * @throws SwiftException if the URI could not be constructed    */
DECL|method|pathToObjectLocation (SwiftObjectPath path)
specifier|private
name|URI
name|pathToObjectLocation
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|)
throws|throws
name|SwiftException
block|{
name|URI
name|uri
decl_stmt|;
name|String
name|dataLocationURI
init|=
name|objectLocationURI
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|path
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|dataLocationURI
operator|=
name|dataLocationURI
operator|.
name|concat
argument_list|(
name|path
operator|.
name|toUriPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataLocationURI
operator|=
name|dataLocationURI
operator|.
name|concat
argument_list|(
literal|"/"
argument_list|)
operator|.
name|concat
argument_list|(
name|path
operator|.
name|toUriPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|dataLocationURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|uri
return|;
block|}
comment|/**    * Find objects under a prefix    *    * @param path path prefix    * @param requestHeaders optional request headers    * @return byte[] file data or null if the object was not found    * @throws IOException on IO Faults    * @throws FileNotFoundException if nothing is at the end of the URI -that is,    * the directory is empty    */
DECL|method|findObjectsByPrefix (SwiftObjectPath path, final Header... requestHeaders)
specifier|public
name|byte
index|[]
name|findObjectsByPrefix
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|,
specifier|final
name|Header
modifier|...
name|requestHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|preRemoteCommand
argument_list|(
literal|"findObjectsByPrefix"
argument_list|)
expr_stmt|;
name|URI
name|uri
decl_stmt|;
name|String
name|dataLocationURI
init|=
name|getEndpointURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|object
init|=
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|object
operator|=
name|object
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|object
operator|=
name|encodeUrl
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|dataLocationURI
operator|=
name|dataLocationURI
operator|.
name|concat
argument_list|(
literal|"/"
argument_list|)
operator|.
name|concat
argument_list|(
name|path
operator|.
name|getContainer
argument_list|()
argument_list|)
operator|.
name|concat
argument_list|(
literal|"/?prefix="
argument_list|)
operator|.
name|concat
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|dataLocationURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftException
argument_list|(
literal|"Bad URI: "
operator|+
name|dataLocationURI
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|perform
argument_list|(
literal|"findObjectsByPrefix"
argument_list|,
name|uri
argument_list|,
operator|new
name|GetMethodProcessor
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|extractResult
parameter_list|(
name|GetMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|method
operator|.
name|getStatusCode
argument_list|()
operator|==
name|SC_NOT_FOUND
condition|)
block|{
comment|//no result
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Not found "
operator|+
name|method
operator|.
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|method
operator|.
name|getResponseBody
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
index|[]
name|getAllowedStatusCodes
parameter_list|()
block|{
return|return
operator|new
name|int
index|[]
block|{
name|SC_OK
block|,
name|SC_NOT_FOUND
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|GetMethod
name|method
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
name|setHeaders
argument_list|(
name|method
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Find objects in a directory    *    * @param path path prefix    * @param requestHeaders optional request headers    * @return byte[] file data or null if the object was not found    * @throws IOException on IO Faults    * @throws FileNotFoundException if nothing is at the end of the URI -that is,    * the directory is empty    */
DECL|method|listDeepObjectsInDirectory (SwiftObjectPath path, boolean listDeep, final Header... requestHeaders)
specifier|public
name|byte
index|[]
name|listDeepObjectsInDirectory
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|,
name|boolean
name|listDeep
parameter_list|,
specifier|final
name|Header
modifier|...
name|requestHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|preRemoteCommand
argument_list|(
literal|"listDeepObjectsInDirectory"
argument_list|)
expr_stmt|;
name|String
name|endpoint
init|=
name|getEndpointURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StringBuilder
name|dataLocationURI
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|dataLocationURI
operator|.
name|append
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|String
name|object
init|=
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|object
operator|=
name|object
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|object
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|object
operator|=
name|object
operator|.
name|concat
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|object
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|object
operator|=
literal|""
expr_stmt|;
block|}
name|dataLocationURI
operator|=
name|dataLocationURI
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|path
operator|.
name|getContainer
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/?prefix="
argument_list|)
operator|.
name|append
argument_list|(
name|object
argument_list|)
operator|.
name|append
argument_list|(
literal|"&format=json"
argument_list|)
expr_stmt|;
comment|//in listing deep set param to false
if|if
condition|(
name|listDeep
operator|==
literal|false
condition|)
block|{
name|dataLocationURI
operator|.
name|append
argument_list|(
literal|"&delimiter=/"
argument_list|)
expr_stmt|;
block|}
return|return
name|findObjects
argument_list|(
name|dataLocationURI
operator|.
name|toString
argument_list|()
argument_list|,
name|requestHeaders
argument_list|)
return|;
block|}
comment|/**    * Find objects in a location    * @param location URI    * @param requestHeaders optional request headers    * @return the body of te response    * @throws IOException IO problems    */
DECL|method|findObjects (String location, final Header[] requestHeaders)
specifier|private
name|byte
index|[]
name|findObjects
parameter_list|(
name|String
name|location
parameter_list|,
specifier|final
name|Header
index|[]
name|requestHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|uri
decl_stmt|;
name|preRemoteCommand
argument_list|(
literal|"findObjects"
argument_list|)
expr_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftException
argument_list|(
literal|"Bad URI: "
operator|+
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|perform
argument_list|(
literal|"findObjects"
argument_list|,
name|uri
argument_list|,
operator|new
name|GetMethodProcessor
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|extractResult
parameter_list|(
name|GetMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|method
operator|.
name|getStatusCode
argument_list|()
operator|==
name|SC_NOT_FOUND
condition|)
block|{
comment|//no result
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Not found "
operator|+
name|method
operator|.
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|method
operator|.
name|getResponseBody
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
index|[]
name|getAllowedStatusCodes
parameter_list|()
block|{
return|return
operator|new
name|int
index|[]
block|{
name|SC_OK
block|,
name|SC_NOT_FOUND
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|GetMethod
name|method
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
name|setHeaders
argument_list|(
name|method
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Copy an object. This is done by sending a COPY method to the filesystem    * which is required to handle this WebDAV-level extension to the    * base HTTP operations.    *    * @param src source path    * @param dst destination path    * @param headers any headers    * @return true if the status code was considered successful    * @throws IOException on IO Faults    */
DECL|method|copyObject (SwiftObjectPath src, final SwiftObjectPath dst, final Header... headers)
specifier|public
name|boolean
name|copyObject
parameter_list|(
name|SwiftObjectPath
name|src
parameter_list|,
specifier|final
name|SwiftObjectPath
name|dst
parameter_list|,
specifier|final
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
name|preRemoteCommand
argument_list|(
literal|"copyObject"
argument_list|)
expr_stmt|;
return|return
name|perform
argument_list|(
literal|"copy"
argument_list|,
name|pathToURI
argument_list|(
name|src
argument_list|)
argument_list|,
operator|new
name|CopyMethodProcessor
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|extractResult
parameter_list|(
name|CopyMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|method
operator|.
name|getStatusCode
argument_list|()
operator|!=
name|SC_NOT_FOUND
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|CopyMethod
name|method
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
name|setHeaders
argument_list|(
name|method
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|method
operator|.
name|addRequestHeader
argument_list|(
name|HEADER_DESTINATION
argument_list|,
name|dst
operator|.
name|toUriPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Uploads file as Input Stream to Swift.    * The data stream will be closed after the request.    *    * @param path path to Swift    * @param data object data    * @param length length of data    * @param requestHeaders http headers    * @throws IOException on IO Faults    */
DECL|method|upload (SwiftObjectPath path, final InputStream data, final long length, final Header... requestHeaders)
specifier|public
name|void
name|upload
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|,
specifier|final
name|InputStream
name|data
parameter_list|,
specifier|final
name|long
name|length
parameter_list|,
specifier|final
name|Header
modifier|...
name|requestHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|preRemoteCommand
argument_list|(
literal|"upload"
argument_list|)
expr_stmt|;
try|try
block|{
name|perform
argument_list|(
literal|"upload"
argument_list|,
name|pathToURI
argument_list|(
name|path
argument_list|)
argument_list|,
operator|new
name|PutMethodProcessor
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|extractResult
parameter_list|(
name|PutMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|method
operator|.
name|getResponseBody
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|PutMethod
name|method
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
name|method
operator|.
name|setRequestEntity
argument_list|(
operator|new
name|InputStreamRequestEntity
argument_list|(
name|data
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|setHeaders
argument_list|(
name|method
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|data
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Deletes object from swift.    * The result is true if this operation did the deletion.    *    * @param path           path to file    * @param requestHeaders http headers    * @throws IOException on IO Faults    */
DECL|method|delete (SwiftObjectPath path, final Header... requestHeaders)
specifier|public
name|boolean
name|delete
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|,
specifier|final
name|Header
modifier|...
name|requestHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|preRemoteCommand
argument_list|(
literal|"delete"
argument_list|)
expr_stmt|;
return|return
name|perform
argument_list|(
literal|""
argument_list|,
name|pathToURI
argument_list|(
name|path
argument_list|)
argument_list|,
operator|new
name|DeleteMethodProcessor
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|extractResult
parameter_list|(
name|DeleteMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|method
operator|.
name|getStatusCode
argument_list|()
operator|==
name|SC_NO_CONTENT
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|DeleteMethod
name|method
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
name|setHeaders
argument_list|(
name|method
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Issue a head request    * @param reason reason -used in logs    * @param path path to query    * @param requestHeaders request header    * @return the response headers. This may be an empty list    * @throws IOException IO problems    * @throws FileNotFoundException if there is nothing at the end    */
DECL|method|headRequest (String reason, SwiftObjectPath path, final Header... requestHeaders)
specifier|public
name|Header
index|[]
name|headRequest
parameter_list|(
name|String
name|reason
parameter_list|,
name|SwiftObjectPath
name|path
parameter_list|,
specifier|final
name|Header
modifier|...
name|requestHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|preRemoteCommand
argument_list|(
literal|"headRequest: "
operator|+
name|reason
argument_list|)
expr_stmt|;
return|return
name|perform
argument_list|(
name|reason
argument_list|,
name|pathToURI
argument_list|(
name|path
argument_list|)
argument_list|,
operator|new
name|HeadMethodProcessor
argument_list|<
name|Header
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Header
index|[]
name|extractResult
parameter_list|(
name|HeadMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|method
operator|.
name|getStatusCode
argument_list|()
operator|==
name|SC_NOT_FOUND
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Not Found "
operator|+
name|method
operator|.
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|method
operator|.
name|getResponseHeaders
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|HeadMethod
name|method
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
name|setHeaders
argument_list|(
name|method
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Issue a put request    * @param path path    * @param requestHeaders optional headers    * @return the HTTP response    * @throws IOException any problem    */
DECL|method|putRequest (SwiftObjectPath path, final Header... requestHeaders)
specifier|public
name|int
name|putRequest
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|,
specifier|final
name|Header
modifier|...
name|requestHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|preRemoteCommand
argument_list|(
literal|"putRequest"
argument_list|)
expr_stmt|;
return|return
name|perform
argument_list|(
name|pathToURI
argument_list|(
name|path
argument_list|)
argument_list|,
operator|new
name|PutMethodProcessor
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|extractResult
parameter_list|(
name|PutMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|method
operator|.
name|getStatusCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|PutMethod
name|method
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
name|setHeaders
argument_list|(
name|method
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Authenticate to Openstack Keystone    * As well as returning the access token, the member fields {@link #token},    * {@link #endpointURI} and {@link #objectLocationURI} are set up for re-use.    *<p>    * This method is re-entrant -if more than one thread attempts to authenticate    * neither will block -but the field values with have those of the last caller.    *    * @return authenticated access token    */
DECL|method|authenticate ()
specifier|public
name|AccessToken
name|authenticate
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|AuthenticationRequest
name|authenticationRequest
decl_stmt|;
if|if
condition|(
name|useKeystoneAuthentication
condition|)
block|{
name|authenticationRequest
operator|=
name|keystoneAuthRequest
expr_stmt|;
block|}
else|else
block|{
name|authenticationRequest
operator|=
name|authRequest
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"started authentication"
argument_list|)
expr_stmt|;
return|return
name|perform
argument_list|(
literal|"authentication"
argument_list|,
name|authUri
argument_list|,
operator|new
name|AuthenticationPost
argument_list|(
name|authenticationRequest
argument_list|)
argument_list|)
return|;
block|}
DECL|class|AuthenticationPost
specifier|private
class|class
name|AuthenticationPost
extends|extends
name|AuthMethodProcessor
argument_list|<
name|AccessToken
argument_list|>
block|{
DECL|field|authenticationRequest
specifier|final
name|AuthenticationRequest
name|authenticationRequest
decl_stmt|;
DECL|method|AuthenticationPost (AuthenticationRequest authenticationRequest)
specifier|private
name|AuthenticationPost
parameter_list|(
name|AuthenticationRequest
name|authenticationRequest
parameter_list|)
block|{
name|this
operator|.
name|authenticationRequest
operator|=
name|authenticationRequest
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setup (AuthPostMethod method)
specifier|protected
name|void
name|setup
parameter_list|(
name|AuthPostMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
name|method
operator|.
name|setRequestEntity
argument_list|(
name|getAuthenticationRequst
argument_list|(
name|authenticationRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * specification says any of the 2xxs are OK, so list all      * the standard ones      * @return a set of 2XX status codes.      */
annotation|@
name|Override
DECL|method|getAllowedStatusCodes ()
specifier|protected
name|int
index|[]
name|getAllowedStatusCodes
parameter_list|()
block|{
return|return
operator|new
name|int
index|[]
block|{
name|SC_OK
block|,
name|SC_BAD_REQUEST
block|,
name|SC_CREATED
block|,
name|SC_ACCEPTED
block|,
name|SC_NON_AUTHORITATIVE_INFORMATION
block|,
name|SC_NO_CONTENT
block|,
name|SC_RESET_CONTENT
block|,
name|SC_PARTIAL_CONTENT
block|,
name|SC_MULTI_STATUS
block|,
name|SC_UNAUTHORIZED
comment|//if request unauthorized, try another method
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|extractResult (AuthPostMethod method)
specifier|public
name|AccessToken
name|extractResult
parameter_list|(
name|AuthPostMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
comment|//initial check for failure codes leading to authentication failures
if|if
condition|(
name|method
operator|.
name|getStatusCode
argument_list|()
operator|==
name|SC_BAD_REQUEST
condition|)
block|{
throw|throw
operator|new
name|SwiftAuthenticationFailedException
argument_list|(
name|authenticationRequest
operator|.
name|toString
argument_list|()
argument_list|,
literal|"POST"
argument_list|,
name|authUri
argument_list|,
name|method
argument_list|)
throw|;
block|}
specifier|final
name|AuthenticationResponse
name|access
init|=
name|JSONUtil
operator|.
name|toObject
argument_list|(
name|method
operator|.
name|getResponseBodyAsString
argument_list|()
argument_list|,
name|AuthenticationWrapper
operator|.
name|class
argument_list|)
operator|.
name|getAccess
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Catalog
argument_list|>
name|serviceCatalog
init|=
name|access
operator|.
name|getServiceCatalog
argument_list|()
decl_stmt|;
comment|//locate the specific service catalog that defines Swift; variations
comment|//in the name of this add complexity to the search
name|boolean
name|catalogMatch
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|catList
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|regionList
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|//these fields are all set together at the end of the operation
name|URI
name|endpointURI
init|=
literal|null
decl_stmt|;
name|URI
name|objectLocation
decl_stmt|;
name|Endpoint
name|swiftEndpoint
init|=
literal|null
decl_stmt|;
name|AccessToken
name|accessToken
decl_stmt|;
for|for
control|(
name|Catalog
name|catalog
range|:
name|serviceCatalog
control|)
block|{
name|String
name|name
init|=
name|catalog
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|catalog
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|descr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"[%s: %s]; "
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|catList
operator|.
name|append
argument_list|(
name|descr
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Catalog entry "
operator|+
name|descr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|SERVICE_CATALOG_SWIFT
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|SERVICE_CATALOG_CLOUD_FILES
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|SERVICE_CATALOG_OBJECT_STORE
argument_list|)
condition|)
block|{
comment|//swift is found
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found swift catalog as "
operator|+
name|name
operator|+
literal|" => "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
comment|//now go through the endpoints
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|catalog
operator|.
name|getEndpoints
argument_list|()
control|)
block|{
name|String
name|endpointRegion
init|=
name|endpoint
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|URI
name|publicURL
init|=
name|endpoint
operator|.
name|getPublicURL
argument_list|()
decl_stmt|;
name|URI
name|internalURL
init|=
name|endpoint
operator|.
name|getInternalURL
argument_list|()
decl_stmt|;
name|descr
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"[%s => %s / %s]; "
argument_list|,
name|endpointRegion
argument_list|,
name|publicURL
argument_list|,
name|internalURL
argument_list|)
expr_stmt|;
name|regionList
operator|.
name|append
argument_list|(
name|descr
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Endpoint "
operator|+
name|descr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|==
literal|null
operator|||
name|endpointRegion
operator|.
name|equals
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|endpointURI
operator|=
name|usePublicURL
condition|?
name|publicURL
else|:
name|internalURL
expr_stmt|;
name|swiftEndpoint
operator|=
name|endpoint
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|endpointURI
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Could not find swift service from auth URL "
operator|+
name|authUri
operator|+
literal|" and region '"
operator|+
name|region
operator|+
literal|"'. "
operator|+
literal|"Categories: "
operator|+
name|catList
operator|+
operator|(
operator|(
name|regionList
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|?
operator|(
literal|"regions: "
operator|+
name|regionList
operator|)
else|:
literal|"No regions"
operator|)
decl_stmt|;
throw|throw
operator|new
name|SwiftInvalidResponseException
argument_list|(
name|message
argument_list|,
name|SC_OK
argument_list|,
literal|"authenticating"
argument_list|,
name|authUri
argument_list|)
throw|;
block|}
name|accessToken
operator|=
name|access
operator|.
name|getToken
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|SWIFT_OBJECT_AUTH_ENDPOINT
operator|+
name|swiftEndpoint
operator|.
name|getTenantId
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|endpointURI
operator|.
name|getHost
argument_list|()
decl_stmt|;
try|try
block|{
name|objectLocation
operator|=
operator|new
name|URI
argument_list|(
name|endpointURI
operator|.
name|getScheme
argument_list|()
argument_list|,
literal|null
argument_list|,
name|host
argument_list|,
name|endpointURI
operator|.
name|getPort
argument_list|()
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftException
argument_list|(
literal|"object endpoint URI is incorrect: "
operator|+
name|endpointURI
operator|+
literal|" + "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|setAuthDetails
argument_list|(
name|endpointURI
argument_list|,
name|objectLocation
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"authenticated against "
operator|+
name|endpointURI
argument_list|)
expr_stmt|;
block|}
name|createDefaultContainer
argument_list|()
expr_stmt|;
return|return
name|accessToken
return|;
block|}
block|}
DECL|method|getAuthenticationRequst (AuthenticationRequest authenticationRequest)
specifier|private
name|StringRequestEntity
name|getAuthenticationRequst
parameter_list|(
name|AuthenticationRequest
name|authenticationRequest
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|data
init|=
name|JSONUtil
operator|.
name|toJSON
argument_list|(
operator|new
name|AuthenticationRequestWrapper
argument_list|(
name|authenticationRequest
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Authenticating with "
operator|+
name|authenticationRequest
argument_list|)
expr_stmt|;
block|}
return|return
name|toJsonEntity
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**    * create default container if it doesn't exist for Hadoop Swift integration.    * non-reentrant, as this should only be needed once.    *    * @throws IOException IO problems.    */
DECL|method|createDefaultContainer ()
specifier|private
specifier|synchronized
name|void
name|createDefaultContainer
parameter_list|()
throws|throws
name|IOException
block|{
name|createContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a container -if it already exists, do nothing    *    * @param containerName the container name    * @throws IOException IO problems    * @throws SwiftBadRequestException invalid container name    * @throws SwiftInvalidResponseException error from the server    */
DECL|method|createContainer (String containerName)
specifier|public
name|void
name|createContainer
parameter_list|(
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|SwiftObjectPath
name|objectPath
init|=
operator|new
name|SwiftObjectPath
argument_list|(
name|containerName
argument_list|,
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
comment|//see if the data is there
name|headRequest
argument_list|(
literal|"createContainer"
argument_list|,
name|objectPath
argument_list|,
name|NEWEST
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|int
name|status
init|=
literal|0
decl_stmt|;
try|try
block|{
name|status
operator|=
name|putRequest
argument_list|(
name|objectPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|//triggered by a very bad container name.
comment|//re-insert the 404 result into the status
name|status
operator|=
name|SC_NOT_FOUND
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|==
name|SC_BAD_REQUEST
condition|)
block|{
throw|throw
operator|new
name|SwiftBadRequestException
argument_list|(
literal|"Bad request -authentication failure or bad container name?"
argument_list|,
name|status
argument_list|,
literal|"PUT"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isStatusCodeExpected
argument_list|(
name|status
argument_list|,
name|SC_OK
argument_list|,
name|SC_CREATED
argument_list|,
name|SC_ACCEPTED
argument_list|,
name|SC_NO_CONTENT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SwiftInvalidResponseException
argument_list|(
literal|"Couldn't create container "
operator|+
name|containerName
operator|+
literal|" for storing data in Swift."
operator|+
literal|" Try to create container "
operator|+
name|containerName
operator|+
literal|" manually "
argument_list|,
name|status
argument_list|,
literal|"PUT"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
comment|/**    * Trigger an initial auth operation if some of the needed    * fields are missing    *    * @throws IOException on problems    */
DECL|method|authIfNeeded ()
specifier|private
name|void
name|authIfNeeded
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|getEndpointURI
argument_list|()
operator|==
literal|null
condition|)
block|{
name|authenticate
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Pre-execution actions to be performed by methods. Currently this    *<ul>    *<li>Logs the operation at TRACE</li>    *<li>Authenticates the client -if needed</li>    *</ul>    * @throws IOException    */
DECL|method|preRemoteCommand (String operation)
specifier|private
name|void
name|preRemoteCommand
parameter_list|(
name|String
name|operation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Executing "
operator|+
name|operation
argument_list|)
expr_stmt|;
block|}
name|authIfNeeded
argument_list|()
expr_stmt|;
block|}
comment|/**    * Performs the HTTP request, validates the response code and returns    * the received data. HTTP Status codes are converted into exceptions.    *    * @param uri URI to source    * @param processor HttpMethodProcessor    * @param<M> method    * @param<R> result type    * @return result of HTTP request    * @throws IOException IO problems    * @throws SwiftBadRequestException the status code indicated "Bad request"    * @throws SwiftInvalidResponseException the status code is out of range    * for the action (excluding 404 responses)    * @throws SwiftInternalStateException the internal state of this client    * is invalid    * @throws FileNotFoundException a 404 response was returned    */
DECL|method|perform (URI uri, HttpMethodProcessor<M, R> processor)
specifier|private
parameter_list|<
name|M
extends|extends
name|HttpMethod
parameter_list|,
name|R
parameter_list|>
name|R
name|perform
parameter_list|(
name|URI
name|uri
parameter_list|,
name|HttpMethodProcessor
argument_list|<
name|M
argument_list|,
name|R
argument_list|>
name|processor
parameter_list|)
throws|throws
name|IOException
throws|,
name|SwiftBadRequestException
throws|,
name|SwiftInternalStateException
throws|,
name|SwiftInvalidResponseException
throws|,
name|FileNotFoundException
block|{
return|return
name|perform
argument_list|(
literal|""
argument_list|,
name|uri
argument_list|,
name|processor
argument_list|)
return|;
block|}
comment|/**    * Performs the HTTP request, validates the response code and returns    * the received data. HTTP Status codes are converted into exceptions.    * @param reason why is this operation taking place. Used for statistics    * @param uri URI to source    * @param processor HttpMethodProcessor    * @param<M> method    * @param<R> result type    * @return result of HTTP request    * @throws IOException IO problems    * @throws SwiftBadRequestException the status code indicated "Bad request"    * @throws SwiftInvalidResponseException the status code is out of range    * for the action (excluding 404 responses)    * @throws SwiftInternalStateException the internal state of this client    * is invalid    * @throws FileNotFoundException a 404 response was returned    */
DECL|method|perform (String reason, URI uri, HttpMethodProcessor<M, R> processor)
specifier|private
parameter_list|<
name|M
extends|extends
name|HttpMethod
parameter_list|,
name|R
parameter_list|>
name|R
name|perform
parameter_list|(
name|String
name|reason
parameter_list|,
name|URI
name|uri
parameter_list|,
name|HttpMethodProcessor
argument_list|<
name|M
argument_list|,
name|R
argument_list|>
name|processor
parameter_list|)
throws|throws
name|IOException
throws|,
name|SwiftBadRequestException
throws|,
name|SwiftInternalStateException
throws|,
name|SwiftInvalidResponseException
throws|,
name|FileNotFoundException
block|{
name|checkNotNull
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|processor
argument_list|)
expr_stmt|;
specifier|final
name|M
name|method
init|=
name|processor
operator|.
name|createMethod
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//retry policy
name|HttpMethodParams
name|methodParams
init|=
name|method
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|methodParams
operator|.
name|setParameter
argument_list|(
name|HttpMethodParams
operator|.
name|RETRY_HANDLER
argument_list|,
operator|new
name|DefaultHttpMethodRetryHandler
argument_list|(
name|retryCount
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|methodParams
operator|.
name|setIntParameter
argument_list|(
name|HttpConnectionParams
operator|.
name|CONNECTION_TIMEOUT
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
name|methodParams
operator|.
name|setSoTimeout
argument_list|(
name|socketTimeout
argument_list|)
expr_stmt|;
name|method
operator|.
name|addRequestHeader
argument_list|(
name|HEADER_USER_AGENT
argument_list|,
name|SWIFT_USER_AGENT
argument_list|)
expr_stmt|;
name|Duration
name|duration
init|=
operator|new
name|Duration
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|int
name|statusCode
init|=
literal|0
decl_stmt|;
try|try
block|{
name|statusCode
operator|=
name|exec
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//rethrow with extra diagnostics and wiki links
throw|throw
name|ExceptionDiags
operator|.
name|wrapException
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//look at the response and see if it was valid or not.
comment|//Valid is more than a simple 200; even 404 "not found" is considered
comment|//valid -which it is for many methods.
comment|//validate the allowed status code for this operation
name|int
index|[]
name|allowedStatusCodes
init|=
name|processor
operator|.
name|getAllowedStatusCodes
argument_list|()
decl_stmt|;
name|boolean
name|validResponse
init|=
name|isStatusCodeExpected
argument_list|(
name|statusCode
argument_list|,
name|allowedStatusCodes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validResponse
condition|)
block|{
name|IOException
name|ioe
init|=
name|buildException
argument_list|(
name|uri
argument_list|,
name|method
argument_list|,
name|statusCode
argument_list|)
decl_stmt|;
throw|throw
name|ioe
throw|;
block|}
name|R
name|r
init|=
name|processor
operator|.
name|extractResult
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|r
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//release the connection -always
name|method
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|duration
operator|.
name|finished
argument_list|()
expr_stmt|;
name|durationStats
operator|.
name|add
argument_list|(
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|reason
argument_list|,
name|duration
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Build an exception from a failed operation. This can include generating    * specific exceptions (e.g. FileNotFound), as well as the default    * {@link SwiftInvalidResponseException}.    *    * @param uri URI for operation    * @param method operation that failed    * @param statusCode status code    * @param<M> method type    * @return an exception to throw    */
DECL|method|buildException (URI uri, M method, int statusCode)
specifier|private
parameter_list|<
name|M
extends|extends
name|HttpMethod
parameter_list|>
name|IOException
name|buildException
parameter_list|(
name|URI
name|uri
parameter_list|,
name|M
name|method
parameter_list|,
name|int
name|statusCode
parameter_list|)
block|{
name|IOException
name|fault
decl_stmt|;
comment|//log the failure @debug level
name|String
name|errorMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Method %s on %s failed, status code: %d,"
operator|+
literal|" status line: %s"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|uri
argument_list|,
name|statusCode
argument_list|,
name|method
operator|.
name|getStatusLine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
block|}
comment|//send the command
switch|switch
condition|(
name|statusCode
condition|)
block|{
case|case
name|SC_NOT_FOUND
case|:
name|fault
operator|=
operator|new
name|FileNotFoundException
argument_list|(
literal|"Operation "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" on "
operator|+
name|uri
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_BAD_REQUEST
case|:
comment|//bad HTTP request
name|fault
operator|=
operator|new
name|SwiftBadRequestException
argument_list|(
literal|"Bad request against "
operator|+
name|uri
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|uri
argument_list|,
name|method
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_REQUESTED_RANGE_NOT_SATISFIABLE
case|:
comment|//out of range
name|StringBuilder
name|errorText
init|=
operator|new
name|StringBuilder
argument_list|(
name|method
operator|.
name|getStatusText
argument_list|()
argument_list|)
decl_stmt|;
comment|//get the requested length
name|Header
name|requestContentLen
init|=
name|method
operator|.
name|getRequestHeader
argument_list|(
name|HEADER_CONTENT_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestContentLen
operator|!=
literal|null
condition|)
block|{
name|errorText
operator|.
name|append
argument_list|(
literal|" requested "
argument_list|)
operator|.
name|append
argument_list|(
name|requestContentLen
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//and the result
name|Header
name|availableContentRange
init|=
name|method
operator|.
name|getResponseHeader
argument_list|(
name|HEADER_CONTENT_RANGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestContentLen
operator|!=
literal|null
condition|)
block|{
name|errorText
operator|.
name|append
argument_list|(
literal|" available "
argument_list|)
operator|.
name|append
argument_list|(
name|availableContentRange
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fault
operator|=
operator|new
name|EOFException
argument_list|(
name|errorText
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SC_UNAUTHORIZED
case|:
comment|//auth failure; should only happen on the second attempt
name|fault
operator|=
operator|new
name|SwiftAuthenticationFailedException
argument_list|(
literal|"Operation not authorized- current access token ="
operator|+
name|getToken
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|uri
argument_list|,
name|method
argument_list|)
expr_stmt|;
break|break;
case|case
name|SwiftProtocolConstants
operator|.
name|SC_TOO_MANY_REQUESTS_429
case|:
case|case
name|SwiftProtocolConstants
operator|.
name|SC_THROTTLED_498
case|:
comment|//response code that may mean the client is being throttled
name|fault
operator|=
operator|new
name|SwiftThrottledRequestException
argument_list|(
literal|"Client is being throttled: too many requests"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|uri
argument_list|,
name|method
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|//return a generic invalid HTTP response
name|fault
operator|=
operator|new
name|SwiftInvalidResponseException
argument_list|(
name|errorMessage
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|uri
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
return|return
name|fault
return|;
block|}
comment|/**    * Exec a GET request and return the input stream of the response    *    * @param uri URI to GET    * @param requestHeaders request headers    * @return the input stream. This must be closed to avoid log errors    * @throws IOException    */
DECL|method|doGet (final URI uri, final Header... requestHeaders)
specifier|private
name|HttpBodyContent
name|doGet
parameter_list|(
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|Header
modifier|...
name|requestHeaders
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|perform
argument_list|(
literal|""
argument_list|,
name|uri
argument_list|,
operator|new
name|GetMethodProcessor
argument_list|<
name|HttpBodyContent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HttpBodyContent
name|extractResult
parameter_list|(
name|GetMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HttpBodyContent
argument_list|(
operator|new
name|HttpInputStreamWithRelease
argument_list|(
name|uri
argument_list|,
name|method
argument_list|)
argument_list|,
name|method
operator|.
name|getResponseContentLength
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|GetMethod
name|method
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
name|setHeaders
argument_list|(
name|method
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Create an instance against a specific FS URI,    *    * @param filesystemURI filesystem to bond to    * @param config source of configuration data    * @return REST client instance    * @throws IOException on instantiation problems    */
DECL|method|getInstance (URI filesystemURI, Configuration config)
specifier|public
specifier|static
name|SwiftRestClient
name|getInstance
parameter_list|(
name|URI
name|filesystemURI
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SwiftRestClient
argument_list|(
name|filesystemURI
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**    * Convert the (JSON) data to a string request as UTF-8    *    * @param data data    * @return the data    * @throws SwiftException if for some very unexpected reason it's impossible    * to convert the data to UTF-8.    */
DECL|method|toJsonEntity (String data)
specifier|private
specifier|static
name|StringRequestEntity
name|toJsonEntity
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|SwiftException
block|{
name|StringRequestEntity
name|entity
decl_stmt|;
try|try
block|{
name|entity
operator|=
operator|new
name|StringRequestEntity
argument_list|(
name|data
argument_list|,
literal|"application/json"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftException
argument_list|(
literal|"Could not encode data as UTF-8"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|entity
return|;
block|}
comment|/**    * Converts Swift path to URI to make request.    * This is public for unit testing    *    * @param path path to object    * @param endpointURI domain url e.g. http://domain.com    * @return valid URI for object    * @throws SwiftException    */
DECL|method|pathToURI (SwiftObjectPath path, URI endpointURI)
specifier|public
specifier|static
name|URI
name|pathToURI
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|,
name|URI
name|endpointURI
parameter_list|)
throws|throws
name|SwiftException
block|{
name|checkNotNull
argument_list|(
name|endpointURI
argument_list|,
literal|"Null Endpoint -client is not authenticated"
argument_list|)
expr_stmt|;
name|String
name|dataLocationURI
init|=
name|endpointURI
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|dataLocationURI
operator|=
name|SwiftUtils
operator|.
name|joinPaths
argument_list|(
name|dataLocationURI
argument_list|,
name|encodeUrl
argument_list|(
name|path
operator|.
name|toUriPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|URI
argument_list|(
name|dataLocationURI
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftException
argument_list|(
literal|"Failed to create URI from "
operator|+
name|dataLocationURI
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Encode the URL. This extends {@link URLEncoder#encode(String, String)}    * with a replacement of + with %20.    * @param url URL string    * @return an encoded string    * @throws SwiftException if the URL cannot be encoded    */
DECL|method|encodeUrl (String url)
specifier|private
specifier|static
name|String
name|encodeUrl
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|SwiftException
block|{
if|if
condition|(
name|url
operator|.
name|matches
argument_list|(
literal|".*\\s+.*"
argument_list|)
condition|)
block|{
try|try
block|{
name|url
operator|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|url
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|url
operator|=
name|url
operator|.
name|replace
argument_list|(
literal|"+"
argument_list|,
literal|"%20"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SwiftException
argument_list|(
literal|"failed to encode URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|url
return|;
block|}
comment|/**    * Convert a swift path to a URI relative to the current endpoint.    *    * @param path path    * @return an path off the current endpoint URI.    * @throws SwiftException    */
DECL|method|pathToURI (SwiftObjectPath path)
specifier|private
name|URI
name|pathToURI
parameter_list|(
name|SwiftObjectPath
name|path
parameter_list|)
throws|throws
name|SwiftException
block|{
return|return
name|pathToURI
argument_list|(
name|path
argument_list|,
name|getEndpointURI
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add the headers to the method, and the auth token (which must be set    * @param method method to update    * @param requestHeaders the list of headers    * @throws SwiftInternalStateException not yet authenticated    */
DECL|method|setHeaders (HttpMethodBase method, Header[] requestHeaders)
specifier|private
name|void
name|setHeaders
parameter_list|(
name|HttpMethodBase
name|method
parameter_list|,
name|Header
index|[]
name|requestHeaders
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
for|for
control|(
name|Header
name|header
range|:
name|requestHeaders
control|)
block|{
name|method
operator|.
name|addRequestHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
name|setAuthToken
argument_list|(
name|method
argument_list|,
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the auth key header of the method to the token ID supplied    *    * @param method method    * @param accessToken access token    * @throws SwiftInternalStateException if the client is not yet authenticated    */
DECL|method|setAuthToken (HttpMethodBase method, AccessToken accessToken)
specifier|private
name|void
name|setAuthToken
parameter_list|(
name|HttpMethodBase
name|method
parameter_list|,
name|AccessToken
name|accessToken
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
name|checkNotNull
argument_list|(
name|accessToken
argument_list|,
literal|"Not authenticated"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addRequestHeader
argument_list|(
name|HEADER_AUTH_KEY
argument_list|,
name|accessToken
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute a method in a new HttpClient instance.    * If the auth failed, authenticate then retry the method.    *    * @param method method to exec    * @param<M> Method type    * @return the status code    * @throws IOException on any failure    */
DECL|method|exec (M method)
specifier|private
parameter_list|<
name|M
extends|extends
name|HttpMethod
parameter_list|>
name|int
name|exec
parameter_list|(
name|M
name|method
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxyHost
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|getParams
argument_list|()
operator|.
name|setParameter
argument_list|(
name|ConnRoutePNames
operator|.
name|DEFAULT_PROXY
argument_list|,
operator|new
name|HttpHost
argument_list|(
name|proxyHost
argument_list|,
name|proxyPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|statusCode
init|=
name|execWithDebugOutput
argument_list|(
name|method
argument_list|,
name|client
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|statusCode
operator|==
name|HttpStatus
operator|.
name|SC_UNAUTHORIZED
operator|||
name|statusCode
operator|==
name|HttpStatus
operator|.
name|SC_BAD_REQUEST
operator|)
operator|&&
name|method
operator|instanceof
name|AuthPostMethod
operator|&&
operator|!
name|useKeystoneAuthentication
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Operation failed with status "
operator|+
name|method
operator|.
name|getStatusCode
argument_list|()
operator|+
literal|" attempting keystone auth"
argument_list|)
expr_stmt|;
block|}
comment|//if rackspace key authentication failed - try custom Keystone authentication
name|useKeystoneAuthentication
operator|=
literal|true
expr_stmt|;
specifier|final
name|AuthPostMethod
name|authentication
init|=
operator|(
name|AuthPostMethod
operator|)
name|method
decl_stmt|;
comment|//replace rackspace auth with keystone one
name|authentication
operator|.
name|setRequestEntity
argument_list|(
name|getAuthenticationRequst
argument_list|(
name|keystoneAuthRequest
argument_list|)
argument_list|)
expr_stmt|;
name|statusCode
operator|=
name|execWithDebugOutput
argument_list|(
name|method
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statusCode
operator|==
name|HttpStatus
operator|.
name|SC_UNAUTHORIZED
condition|)
block|{
comment|//unauthed -or the auth uri rejected it.
if|if
condition|(
name|method
operator|instanceof
name|AuthPostMethod
condition|)
block|{
comment|//unauth response from the AUTH URI itself.
throw|throw
operator|new
name|SwiftAuthenticationFailedException
argument_list|(
name|authRequest
operator|.
name|toString
argument_list|()
argument_list|,
literal|"auth"
argument_list|,
name|authUri
argument_list|,
name|method
argument_list|)
throw|;
block|}
comment|//any other URL: try again
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reauthenticating"
argument_list|)
expr_stmt|;
block|}
comment|//re-auth, this may recurse into the same dir
name|authenticate
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrying original request"
argument_list|)
expr_stmt|;
block|}
name|statusCode
operator|=
name|execWithDebugOutput
argument_list|(
name|method
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
return|return
name|statusCode
return|;
block|}
comment|/**    * Execute the request with the request and response logged at debug level    * @param method method to execute    * @param client client to use    * @param<M> method type    * @return the status code    * @throws IOException any failure reported by the HTTP client.    */
DECL|method|execWithDebugOutput (M method, HttpClient client)
specifier|private
parameter_list|<
name|M
extends|extends
name|HttpMethod
parameter_list|>
name|int
name|execWithDebugOutput
parameter_list|(
name|M
name|method
parameter_list|,
name|HttpClient
name|client
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|method
operator|.
name|getURI
argument_list|()
operator|+
literal|"\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|method
operator|.
name|getRequestHeaders
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|header
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
name|int
name|statusCode
init|=
name|client
operator|.
name|executeMethod
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Status code = "
operator|+
name|statusCode
argument_list|)
expr_stmt|;
block|}
return|return
name|statusCode
return|;
block|}
comment|/**    * Ensures that an object reference passed as a parameter to the calling    * method is not null.    *    * @param reference an object reference    * @return the non-null reference that was validated    * @throws NullPointerException if {@code reference} is null    */
DECL|method|checkNotNull (T reference)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|checkNotNull
parameter_list|(
name|T
name|reference
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
return|return
name|checkNotNull
argument_list|(
name|reference
argument_list|,
literal|"Null Reference"
argument_list|)
return|;
block|}
DECL|method|checkNotNull (T reference, String message)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|checkNotNull
parameter_list|(
name|T
name|reference
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|SwiftInternalStateException
block|{
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SwiftInternalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|reference
return|;
block|}
comment|/**    * Check for a status code being expected -takes a list of expected values    *    * @param status received status    * @param expected expected value    * @return true iff status is an element of [expected]    */
DECL|method|isStatusCodeExpected (int status, int... expected)
specifier|private
name|boolean
name|isStatusCodeExpected
parameter_list|(
name|int
name|status
parameter_list|,
name|int
modifier|...
name|expected
parameter_list|)
block|{
for|for
control|(
name|int
name|code
range|:
name|expected
control|)
block|{
if|if
condition|(
name|status
operator|==
name|code
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Swift client: "
operator|+
name|serviceDescription
return|;
block|}
comment|/**    * Get the region which this client is bound to    * @return the region    */
DECL|method|getRegion ()
specifier|public
name|String
name|getRegion
parameter_list|()
block|{
return|return
name|region
return|;
block|}
comment|/**    * Get the tenant to which this client is bound    * @return the tenant    */
DECL|method|getTenant ()
specifier|public
name|String
name|getTenant
parameter_list|()
block|{
return|return
name|tenant
return|;
block|}
comment|/**    * Get the username this client identifies itself as    * @return the username    */
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
comment|/**    * Get the container to which this client is bound    * @return the container    */
DECL|method|getContainer ()
specifier|public
name|String
name|getContainer
parameter_list|()
block|{
return|return
name|container
return|;
block|}
comment|/**    * Is this client bound to a location aware Swift blobstore    * -that is, can you query for the location of partitions    * @return true iff the location of multipart file uploads    * can be determined.    */
DECL|method|isLocationAware ()
specifier|public
name|boolean
name|isLocationAware
parameter_list|()
block|{
return|return
name|locationAware
return|;
block|}
comment|/**    * Get the blocksize of this filesystem    * @return a blocksize&gt; 0    */
DECL|method|getBlocksizeKB ()
specifier|public
name|long
name|getBlocksizeKB
parameter_list|()
block|{
return|return
name|blocksizeKB
return|;
block|}
comment|/**    * Get the partition size in KB    * @return the partition size    */
DECL|method|getPartSizeKB ()
specifier|public
name|int
name|getPartSizeKB
parameter_list|()
block|{
return|return
name|partSizeKB
return|;
block|}
comment|/**    * Get the buffer size in KB    * @return the buffer size wanted for reads    */
DECL|method|getBufferSizeKB ()
specifier|public
name|int
name|getBufferSizeKB
parameter_list|()
block|{
return|return
name|bufferSizeKB
return|;
block|}
DECL|method|getProxyPort ()
specifier|public
name|int
name|getProxyPort
parameter_list|()
block|{
return|return
name|proxyPort
return|;
block|}
DECL|method|getProxyHost ()
specifier|public
name|String
name|getProxyHost
parameter_list|()
block|{
return|return
name|proxyHost
return|;
block|}
DECL|method|getRetryCount ()
specifier|public
name|int
name|getRetryCount
parameter_list|()
block|{
return|return
name|retryCount
return|;
block|}
DECL|method|getConnectTimeout ()
specifier|public
name|int
name|getConnectTimeout
parameter_list|()
block|{
return|return
name|connectTimeout
return|;
block|}
DECL|method|isUsePublicURL ()
specifier|public
name|boolean
name|isUsePublicURL
parameter_list|()
block|{
return|return
name|usePublicURL
return|;
block|}
DECL|method|getThrottleDelay ()
specifier|public
name|int
name|getThrottleDelay
parameter_list|()
block|{
return|return
name|throttleDelay
return|;
block|}
comment|/**    * Get the current operation statistics    * @return a snapshot of the statistics    */
DECL|method|getOperationStatistics ()
specifier|public
name|List
argument_list|<
name|DurationStats
argument_list|>
name|getOperationStatistics
parameter_list|()
block|{
return|return
name|durationStats
operator|.
name|getDurationStatistics
argument_list|()
return|;
block|}
block|}
end_class

end_unit

