begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
package|;
end_package

begin_class
DECL|class|Duration
specifier|public
class|class
name|Duration
block|{
DECL|field|started
specifier|private
specifier|final
name|long
name|started
decl_stmt|;
DECL|field|finished
specifier|private
name|long
name|finished
decl_stmt|;
DECL|method|Duration ()
specifier|public
name|Duration
parameter_list|()
block|{
name|started
operator|=
name|time
argument_list|()
expr_stmt|;
name|finished
operator|=
name|started
expr_stmt|;
block|}
DECL|method|time ()
specifier|private
name|long
name|time
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
DECL|method|finished ()
specifier|public
name|void
name|finished
parameter_list|()
block|{
name|finished
operator|=
name|time
argument_list|()
expr_stmt|;
block|}
DECL|method|getDurationString ()
specifier|public
name|String
name|getDurationString
parameter_list|()
block|{
return|return
name|humanTime
argument_list|(
name|value
argument_list|()
argument_list|)
return|;
block|}
DECL|method|humanTime (long time)
specifier|public
specifier|static
name|String
name|humanTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|long
name|seconds
init|=
operator|(
name|time
operator|/
literal|1000
operator|)
decl_stmt|;
name|long
name|minutes
init|=
operator|(
name|seconds
operator|/
literal|60
operator|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%d:%02d:%03d"
argument_list|,
name|minutes
argument_list|,
name|seconds
operator|%
literal|60
argument_list|,
name|time
operator|%
literal|1000
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getDurationString
argument_list|()
return|;
block|}
DECL|method|value ()
specifier|public
name|long
name|value
parameter_list|()
block|{
return|return
name|finished
operator|-
name|started
return|;
block|}
block|}
end_class

end_unit

