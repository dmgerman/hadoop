begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|exceptions
operator|.
name|SwiftConnectionClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|util
operator|.
name|SwiftUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * This replaces the input stream release class from JetS3t and AWS;  * # Failures in the constructor are relayed up instead of simply logged.  * # it is set up to be more robust at teardown  * # release logic is thread safe  * Note that the thread safety of the inner stream contains no thread  * safety guarantees -this stream is not to be read across streams.  * The thread safety logic here is to ensure that even if somebody ignores  * that rule, the release code does not get entered twice -and that  * any release in one thread is picked up by read operations in all others.  */
end_comment

begin_class
DECL|class|HttpInputStreamWithRelease
specifier|public
class|class
name|HttpInputStreamWithRelease
extends|extends
name|InputStream
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HttpInputStreamWithRelease
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|URI
name|uri
decl_stmt|;
DECL|field|method
specifier|private
name|HttpMethod
name|method
decl_stmt|;
comment|//flag to say the stream is released -volatile so that read operations
comment|//pick it up even while unsynchronized.
DECL|field|released
specifier|private
specifier|volatile
name|boolean
name|released
decl_stmt|;
comment|//volatile flag to verify that data is consumed.
DECL|field|dataConsumed
specifier|private
specifier|volatile
name|boolean
name|dataConsumed
decl_stmt|;
DECL|field|inStream
specifier|private
name|InputStream
name|inStream
decl_stmt|;
comment|/**    * In debug builds, this is filled in with the construction-time    * stack, which is then included in logs from the finalize(), method.    */
DECL|field|constructionStack
specifier|private
specifier|final
name|Exception
name|constructionStack
decl_stmt|;
comment|/**    * Why the stream is closed    */
DECL|field|reasonClosed
specifier|private
name|String
name|reasonClosed
init|=
literal|"unopened"
decl_stmt|;
DECL|method|HttpInputStreamWithRelease (URI uri, HttpMethod method)
specifier|public
name|HttpInputStreamWithRelease
parameter_list|(
name|URI
name|uri
parameter_list|,
name|HttpMethod
name|method
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|constructionStack
operator|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|?
operator|new
name|Exception
argument_list|(
literal|"stack"
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null 'method' parameter "
argument_list|)
throw|;
block|}
try|try
block|{
name|inStream
operator|=
name|method
operator|.
name|getResponseBodyAsStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|inStream
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
throw|throw
name|releaseAndRethrow
argument_list|(
literal|"getResponseBodyAsStream() in constructor -"
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|release
argument_list|(
literal|"close()"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Release logic    * @param reason reason for release (used in debug messages)    * @param ex exception that is a cause -null for non-exceptional releases    * @return true if the release took place here    * @throws IOException if the abort or close operations failed.    */
DECL|method|release (String reason, Exception ex)
specifier|private
specifier|synchronized
name|boolean
name|release
parameter_list|(
name|String
name|reason
parameter_list|,
name|Exception
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|released
condition|)
block|{
name|reasonClosed
operator|=
name|reason
expr_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Releasing connection to "
operator|+
name|uri
operator|+
literal|":  "
operator|+
name|reason
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|dataConsumed
condition|)
block|{
name|method
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
name|method
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inStream
operator|!=
literal|null
condition|)
block|{
comment|//this guard may seem un-needed, but a stack trace seen
comment|//on the JetS3t predecessor implied that it
comment|//is useful
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
finally|finally
block|{
comment|//if something went wrong here, we do not want the release() operation
comment|//to try and do anything in advance.
name|released
operator|=
literal|true
expr_stmt|;
name|dataConsumed
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Release the method, using the exception as a cause    * @param operation operation that failed    * @param ex the exception which triggered it.    * @return the exception to throw    */
DECL|method|releaseAndRethrow (String operation, IOException ex)
specifier|private
name|IOException
name|releaseAndRethrow
parameter_list|(
name|String
name|operation
parameter_list|,
name|IOException
name|ex
parameter_list|)
block|{
try|try
block|{
name|release
argument_list|(
name|operation
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception during release: "
operator|+
name|operation
operator|+
literal|" - "
operator|+
name|ioe
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
comment|//make this the exception if there was none before
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
name|ex
operator|=
name|ioe
expr_stmt|;
block|}
block|}
return|return
name|ex
return|;
block|}
comment|/**    * Assume that the connection is not released: throws an exception if it is    * @throws SwiftConnectionClosedException    */
DECL|method|assumeNotReleased ()
specifier|private
specifier|synchronized
name|void
name|assumeNotReleased
parameter_list|()
throws|throws
name|SwiftConnectionClosedException
block|{
if|if
condition|(
name|released
operator|||
name|inStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SwiftConnectionClosedException
argument_list|(
name|reasonClosed
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeNotReleased
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|inStream
operator|.
name|available
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|releaseAndRethrow
argument_list|(
literal|"available() failed -"
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeNotReleased
argument_list|()
expr_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
try|try
block|{
name|read
operator|=
name|inStream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"EOF exception "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|read
operator|=
operator|-
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|releaseAndRethrow
argument_list|(
literal|"read()"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|read
operator|<
literal|0
condition|)
block|{
name|dataConsumed
operator|=
literal|true
expr_stmt|;
name|release
argument_list|(
literal|"read() -all data consumed"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|SwiftUtils
operator|.
name|validateReadArgs
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|//if the stream is already closed, then report an exception.
name|assumeNotReleased
argument_list|()
expr_stmt|;
comment|//now read in a buffer, reacting differently to different operations
name|int
name|read
decl_stmt|;
try|try
block|{
name|read
operator|=
name|inStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"EOF exception "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|read
operator|=
operator|-
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|releaseAndRethrow
argument_list|(
literal|"read(b, off, "
operator|+
name|len
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|read
operator|<
literal|0
condition|)
block|{
name|dataConsumed
operator|=
literal|true
expr_stmt|;
name|release
argument_list|(
literal|"read() -all data consumed"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
comment|/**    * Finalizer does release the stream, but also logs at WARN level    * including the URI at fault    */
annotation|@
name|Override
DECL|method|finalize ()
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|release
argument_list|(
literal|"finalize()"
argument_list|,
name|constructionStack
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"input stream of "
operator|+
name|uri
operator|+
literal|" not closed properly -cleaned up in finalize()"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//swallow anything that failed here
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while releasing "
operator|+
name|uri
operator|+
literal|"in finalizer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HttpInputStreamWithRelease working with "
operator|+
name|uri
operator|+
literal|" released="
operator|+
name|released
operator|+
literal|" dataConsumed="
operator|+
name|dataConsumed
return|;
block|}
block|}
end_class

end_unit

