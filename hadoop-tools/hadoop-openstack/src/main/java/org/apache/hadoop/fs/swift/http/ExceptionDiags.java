begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.swift.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|swift
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NoRouteToHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_comment
comment|/**  * Variant of Hadoop NetUtils exception wrapping with URI awareness and  * available in branch-1 too.  */
end_comment

begin_class
DECL|class|ExceptionDiags
specifier|public
class|class
name|ExceptionDiags
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExceptionDiags
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** text to point users elsewhere: {@value} */
DECL|field|FOR_MORE_DETAILS_SEE
specifier|private
specifier|static
specifier|final
name|String
name|FOR_MORE_DETAILS_SEE
init|=
literal|" For more details see:  "
decl_stmt|;
comment|/** text included in wrapped exceptions if the host is null: {@value} */
DECL|field|UNKNOWN_HOST
specifier|public
specifier|static
specifier|final
name|String
name|UNKNOWN_HOST
init|=
literal|"(unknown)"
decl_stmt|;
comment|/** Base URL of the Hadoop Wiki: {@value} */
DECL|field|HADOOP_WIKI
specifier|public
specifier|static
specifier|final
name|String
name|HADOOP_WIKI
init|=
literal|"http://wiki.apache.org/hadoop/"
decl_stmt|;
comment|/**    * Take an IOException and a URI, wrap it where possible with    * something that includes the URI    *    * @param dest target URI    * @param operation operation    * @param exception the caught exception.    * @return an exception to throw    */
DECL|method|wrapException (final String dest, final String operation, final IOException exception)
specifier|public
specifier|static
name|IOException
name|wrapException
parameter_list|(
specifier|final
name|String
name|dest
parameter_list|,
specifier|final
name|String
name|operation
parameter_list|,
specifier|final
name|IOException
name|exception
parameter_list|)
block|{
name|String
name|action
init|=
name|operation
operator|+
literal|" "
operator|+
name|dest
decl_stmt|;
name|String
name|xref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|ConnectException
condition|)
block|{
name|xref
operator|=
literal|"ConnectionRefused"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|UnknownHostException
condition|)
block|{
name|xref
operator|=
literal|"UnknownHost"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|SocketTimeoutException
condition|)
block|{
name|xref
operator|=
literal|"SocketTimeout"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|NoRouteToHostException
condition|)
block|{
name|xref
operator|=
literal|"NoRouteToHost"
expr_stmt|;
block|}
name|String
name|msg
init|=
name|action
operator|+
literal|" failed on exception: "
operator|+
name|exception
decl_stmt|;
if|if
condition|(
name|xref
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|msg
operator|+
literal|";"
operator|+
name|see
argument_list|(
name|xref
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapWithMessage
argument_list|(
name|exception
argument_list|,
name|msg
argument_list|)
return|;
block|}
DECL|method|see (final String entry)
specifier|private
specifier|static
name|String
name|see
parameter_list|(
specifier|final
name|String
name|entry
parameter_list|)
block|{
return|return
name|FOR_MORE_DETAILS_SEE
operator|+
name|HADOOP_WIKI
operator|+
name|entry
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|wrapWithMessage ( T exception, String msg)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|IOException
parameter_list|>
name|T
name|wrapWithMessage
parameter_list|(
name|T
name|exception
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|clazz
init|=
name|exception
operator|.
name|getClass
argument_list|()
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|ctor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Throwable
name|t
init|=
name|ctor
operator|.
name|newInstance
argument_list|(
name|msg
argument_list|)
decl_stmt|;
return|return
call|(
name|T
call|)
argument_list|(
name|t
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to wrap exception of type "
operator|+
name|clazz
operator|+
literal|": it has no (String) constructor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|exception
return|;
block|}
block|}
block|}
end_class

end_unit

