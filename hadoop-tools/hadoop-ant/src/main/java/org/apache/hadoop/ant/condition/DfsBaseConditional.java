begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ant.condition
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ant
operator|.
name|condition
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|condition
operator|.
name|Condition
import|;
end_import

begin_comment
comment|/**  * This wrapper around {@link org.apache.hadoop.ant.DfsTask} implements the  * Ant&gt;1.5  * {@link org.apache.tools.ant.taskdefs.condition.Condition Condition}  * interface for HDFS tests. So one can test conditions like this:  * {@code  *<condition property="precond">  *<and>  *<hadoop:exists file="fileA" />  *<hadoop:exists file="fileB" />  *<hadoop:sizezero file="fileB" />  *</and>  *</condition>  * }  * This will define the property precond if fileA exists and fileB has zero  * length.  */
end_comment

begin_class
DECL|class|DfsBaseConditional
specifier|public
specifier|abstract
class|class
name|DfsBaseConditional
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ant
operator|.
name|DfsTask
implements|implements
name|Condition
block|{
DECL|field|result
specifier|protected
name|boolean
name|result
decl_stmt|;
DECL|field|file
name|String
name|file
decl_stmt|;
DECL|method|initArgs ()
specifier|private
name|void
name|initArgs
parameter_list|()
block|{
name|setCmd
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|setArgs
argument_list|(
literal|"-"
operator|+
name|getFlag
argument_list|()
operator|+
literal|","
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|setFile (String file)
specifier|public
name|void
name|setFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
DECL|method|getFlag ()
specifier|protected
specifier|abstract
name|char
name|getFlag
parameter_list|()
function_decl|;
DECL|method|postCmd (int exit_code)
specifier|protected
name|int
name|postCmd
parameter_list|(
name|int
name|exit_code
parameter_list|)
block|{
name|exit_code
operator|=
name|super
operator|.
name|postCmd
argument_list|(
name|exit_code
argument_list|)
expr_stmt|;
name|result
operator|=
name|exit_code
operator|==
literal|0
expr_stmt|;
return|return
name|exit_code
return|;
block|}
DECL|method|eval ()
specifier|public
name|boolean
name|eval
parameter_list|()
block|{
name|initArgs
argument_list|()
expr_stmt|;
name|execute
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

