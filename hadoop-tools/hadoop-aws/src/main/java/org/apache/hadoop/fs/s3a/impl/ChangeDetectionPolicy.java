begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CopyObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|GetObjectMetadataRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|GetObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|model
operator|.
name|CopyResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ObjectAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|RemoteFileChangedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Object change detection policy.  * Determines which attribute is used to detect change and what to do when  * change is detected.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ChangeDetectionPolicy
specifier|public
specifier|abstract
class|class
name|ChangeDetectionPolicy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeDetectionPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|CHANGE_DETECTED
specifier|public
specifier|static
specifier|final
name|String
name|CHANGE_DETECTED
init|=
literal|"change detected on client"
decl_stmt|;
DECL|field|mode
specifier|private
specifier|final
name|Mode
name|mode
decl_stmt|;
DECL|field|requireVersion
specifier|private
specifier|final
name|boolean
name|requireVersion
decl_stmt|;
comment|/**    * Version support is only warned about once per S3A instance.    * This still means that on a long-lived application which destroys    * filesystems it'll appear once-per-query in the logs, but at least    * it will not appear once per file read.    */
DECL|field|logNoVersionSupport
specifier|private
specifier|final
name|LogExactlyOnce
name|logNoVersionSupport
init|=
operator|new
name|LogExactlyOnce
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
comment|/**    * The S3 object attribute used to detect change.    */
DECL|enum|Source
specifier|public
enum|enum
name|Source
block|{
DECL|enumConstant|ETag
name|ETag
parameter_list|(
name|CHANGE_DETECT_SOURCE_ETAG
parameter_list|)
operator|,
DECL|enumConstant|VersionId
constructor|VersionId(CHANGE_DETECT_SOURCE_VERSION_ID
block|)
enum|,
comment|/** you can't ask for this explicitly outside of tests. */
DECL|enumConstant|None
name|None
argument_list|(
literal|"none"
argument_list|)
enum|;
DECL|field|source
specifier|private
specifier|final
name|String
name|source
decl_stmt|;
DECL|method|Source (String source)
name|Source
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
DECL|method|fromString (String trimmed)
specifier|private
specifier|static
name|Source
name|fromString
parameter_list|(
name|String
name|trimmed
parameter_list|)
block|{
for|for
control|(
name|Source
name|value
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|value
operator|.
name|source
operator|.
name|equals
argument_list|(
name|trimmed
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unrecognized "
operator|+
name|CHANGE_DETECT_SOURCE
operator|+
literal|" value: \"{}\""
argument_list|,
name|trimmed
argument_list|)
expr_stmt|;
return|return
name|fromString
argument_list|(
name|CHANGE_DETECT_SOURCE_DEFAULT
argument_list|)
return|;
block|}
DECL|method|fromConfiguration (Configuration configuration)
specifier|static
name|Source
name|fromConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|String
name|trimmed
init|=
name|configuration
operator|.
name|get
argument_list|(
name|CHANGE_DETECT_SOURCE
argument_list|,
name|CHANGE_DETECT_SOURCE_DEFAULT
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
return|return
name|fromString
argument_list|(
name|trimmed
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * What to do when change is detected.    */
end_comment

begin_enum
DECL|enum|Mode
specifier|public
enum|enum
name|Mode
block|{
comment|/** Client side validation. */
DECL|enumConstant|Client
name|Client
parameter_list|(
name|CHANGE_DETECT_MODE_CLIENT
parameter_list|)
operator|,
comment|/** Server side validation. */
DECL|enumConstant|Server
constructor|Server(CHANGE_DETECT_MODE_SERVER
block|)
enum|,
comment|/** Warn but continue. */
DECL|enumConstant|Warn
name|Warn
argument_list|(
name|CHANGE_DETECT_MODE_WARN
argument_list|)
operator|,
comment|/** No checks. */
DECL|enumConstant|None
name|None
argument_list|(
name|CHANGE_DETECT_MODE_NONE
argument_list|)
enum|;
end_enum

begin_decl_stmt
DECL|field|mode
specifier|private
specifier|final
name|String
name|mode
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|Mode (String mode)
name|Mode
argument_list|(
name|String
name|mode
argument_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
block|;     }
DECL|method|fromString (String trimmed)
specifier|private
specifier|static
name|Mode
name|fromString
argument_list|(
name|String
name|trimmed
argument_list|)
block|{
for|for
control|(
name|Mode
name|value
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|value
operator|.
name|mode
operator|.
name|equals
argument_list|(
name|trimmed
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}       LOG
operator|.
name|warn
argument_list|(
literal|"Unrecognized "
operator|+
name|CHANGE_DETECT_MODE
operator|+
literal|" value: \"{}\""
argument_list|,
name|trimmed
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|fromString
argument_list|(
name|CHANGE_DETECT_MODE_DEFAULT
argument_list|)
return|;
end_return

begin_function
unit|}      static
DECL|method|fromConfiguration (Configuration configuration)
name|Mode
name|fromConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|String
name|trimmed
init|=
name|configuration
operator|.
name|get
argument_list|(
name|CHANGE_DETECT_MODE
argument_list|,
name|CHANGE_DETECT_MODE_DEFAULT
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
return|return
name|fromString
argument_list|(
name|trimmed
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
unit|}    protected
DECL|method|ChangeDetectionPolicy (Mode mode, boolean requireVersion)
name|ChangeDetectionPolicy
argument_list|(
name|Mode
name|mode
argument_list|,
name|boolean
name|requireVersion
argument_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
block|;
name|this
operator|.
name|requireVersion
operator|=
name|requireVersion
block|;   }
DECL|method|getMode ()
specifier|public
name|Mode
name|getMode
argument_list|()
block|{
return|return
name|mode
return|;
block|}
end_expr_stmt

begin_function_decl
DECL|method|getSource ()
specifier|public
specifier|abstract
name|Source
name|getSource
parameter_list|()
function_decl|;
end_function_decl

begin_function
DECL|method|isRequireVersion ()
specifier|public
name|boolean
name|isRequireVersion
parameter_list|()
block|{
return|return
name|requireVersion
return|;
block|}
end_function

begin_function
DECL|method|getLogNoVersionSupport ()
specifier|public
name|LogExactlyOnce
name|getLogNoVersionSupport
parameter_list|()
block|{
return|return
name|logNoVersionSupport
return|;
block|}
end_function

begin_comment
comment|/**    * Reads the change detection policy from Configuration.    *    * @param configuration the configuration    * @return the policy    */
end_comment

begin_function
DECL|method|getPolicy (Configuration configuration)
specifier|public
specifier|static
name|ChangeDetectionPolicy
name|getPolicy
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|Mode
name|mode
init|=
name|Mode
operator|.
name|fromConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|Source
operator|.
name|fromConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|boolean
name|requireVersion
init|=
name|configuration
operator|.
name|getBoolean
argument_list|(
name|CHANGE_DETECT_REQUIRE_VERSION
argument_list|,
name|CHANGE_DETECT_REQUIRE_VERSION_DEFAULT
argument_list|)
decl_stmt|;
return|return
name|createPolicy
argument_list|(
name|mode
argument_list|,
name|source
argument_list|,
name|requireVersion
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Create a policy.    * @param mode mode pf checks    * @param source source of change    * @param requireVersion throw exception when no version available?    * @return the policy    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
DECL|method|createPolicy (final Mode mode, final Source source, final boolean requireVersion)
specifier|public
specifier|static
name|ChangeDetectionPolicy
name|createPolicy
parameter_list|(
specifier|final
name|Mode
name|mode
parameter_list|,
specifier|final
name|Source
name|source
parameter_list|,
specifier|final
name|boolean
name|requireVersion
parameter_list|)
block|{
switch|switch
condition|(
name|source
condition|)
block|{
case|case
name|ETag
case|:
return|return
operator|new
name|ETagChangeDetectionPolicy
argument_list|(
name|mode
argument_list|,
name|requireVersion
argument_list|)
return|;
case|case
name|VersionId
case|:
return|return
operator|new
name|VersionIdChangeDetectionPolicy
argument_list|(
name|mode
argument_list|,
name|requireVersion
argument_list|)
return|;
default|default:
return|return
operator|new
name|NoChangeDetection
argument_list|()
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * String value for logging.    * @return source and mode.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Policy "
operator|+
name|getSource
argument_list|()
operator|+
literal|"/"
operator|+
name|getMode
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Pulls the attribute this policy uses to detect change out of the S3 object    * metadata.  The policy generically refers to this attribute as    * {@code revisionId}.    *    * @param objectMetadata the s3 object metadata    * @param uri the URI of the object    * @return the revisionId string as interpreted by this policy, or potentially    * null if the attribute is unavailable (such as when the policy says to use    * versionId but object versioning is not enabled for the bucket).    */
end_comment

begin_function_decl
DECL|method|getRevisionId (ObjectMetadata objectMetadata, String uri)
specifier|public
specifier|abstract
name|String
name|getRevisionId
parameter_list|(
name|ObjectMetadata
name|objectMetadata
parameter_list|,
name|String
name|uri
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**    * Like {{@link #getRevisionId(ObjectMetadata, String)}}, but retrieves the    * revision identifier from {@link S3ObjectAttributes}.    *    * @param s3Attributes the object attributes    * @return the revisionId string as interpreted by this policy, or potentially    * null if the attribute is unavailable (such as when the policy says to use    * versionId but object versioning is not enabled for the bucket).    */
end_comment

begin_function_decl
DECL|method|getRevisionId (S3ObjectAttributes s3Attributes)
specifier|public
specifier|abstract
name|String
name|getRevisionId
parameter_list|(
name|S3ObjectAttributes
name|s3Attributes
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**    * Like {{@link #getRevisionId(ObjectMetadata, String)}}, but retrieves the    * revision identifier from {@link CopyResult}.    *    * @param copyResult the copy result    * @return the revisionId string as interpreted by this policy, or potentially    * null if the attribute is unavailable (such as when the policy says to use    * versionId but object versioning is not enabled for the bucket).    */
end_comment

begin_function_decl
DECL|method|getRevisionId (CopyResult copyResult)
specifier|public
specifier|abstract
name|String
name|getRevisionId
parameter_list|(
name|CopyResult
name|copyResult
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**    * Applies the given {@link #getRevisionId(ObjectMetadata, String) revisionId}    * as a server-side qualification on the {@code GetObjectRequest}.    *    * @param request the request    * @param revisionId the revision id    */
end_comment

begin_function_decl
DECL|method|applyRevisionConstraint (GetObjectRequest request, String revisionId)
specifier|public
specifier|abstract
name|void
name|applyRevisionConstraint
parameter_list|(
name|GetObjectRequest
name|request
parameter_list|,
name|String
name|revisionId
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**    * Applies the given {@link #getRevisionId(ObjectMetadata, String) revisionId}    * as a server-side qualification on the {@code CopyObjectRequest}.    *    * @param request the request    * @param revisionId the revision id    */
end_comment

begin_function_decl
DECL|method|applyRevisionConstraint (CopyObjectRequest request, String revisionId)
specifier|public
specifier|abstract
name|void
name|applyRevisionConstraint
parameter_list|(
name|CopyObjectRequest
name|request
parameter_list|,
name|String
name|revisionId
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**    * Applies the given {@link #getRevisionId(ObjectMetadata, String) revisionId}    * as a server-side qualification on the {@code GetObjectMetadataRequest}.    *    * @param request the request    * @param revisionId the revision id    */
end_comment

begin_function_decl
DECL|method|applyRevisionConstraint (GetObjectMetadataRequest request, String revisionId)
specifier|public
specifier|abstract
name|void
name|applyRevisionConstraint
parameter_list|(
name|GetObjectMetadataRequest
name|request
parameter_list|,
name|String
name|revisionId
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**    * Takes appropriate action based on {@link #getMode() mode} when a change has    * been detected.    *    * @param revisionId the expected revision id    * @param newRevisionId the detected revision id    * @param uri the URI of the object being accessed    * @param position the position being read in the object    * @param operation the operation being performed on the object (e.g. open or    * re-open) that triggered the change detection    * @param timesAlreadyDetected number of times a change has already been    * detected on the current stream    * @return a pair of: was a change detected, and any exception to throw.    * If the change was detected, this updates a counter in the stream    * statistics; If an exception was returned it is thrown after the counter    * update.    */
end_comment

begin_function
DECL|method|onChangeDetected ( String revisionId, String newRevisionId, String uri, long position, String operation, long timesAlreadyDetected)
specifier|public
name|ImmutablePair
argument_list|<
name|Boolean
argument_list|,
name|RemoteFileChangedException
argument_list|>
name|onChangeDetected
parameter_list|(
name|String
name|revisionId
parameter_list|,
name|String
name|newRevisionId
parameter_list|,
name|String
name|uri
parameter_list|,
name|long
name|position
parameter_list|,
name|String
name|operation
parameter_list|,
name|long
name|timesAlreadyDetected
parameter_list|)
block|{
name|String
name|positionText
init|=
name|position
operator|>=
literal|0
condition|?
operator|(
literal|" at "
operator|+
name|position
operator|)
else|:
literal|""
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|None
case|:
comment|// something changed; we don't care.
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
return|;
case|case
name|Warn
case|:
if|if
condition|(
name|timesAlreadyDetected
operator|==
literal|0
condition|)
block|{
comment|// only warn on the first detection to avoid a noisy log
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s change detected on %s %s%s. Expected %s got %s"
argument_list|,
name|getSource
argument_list|()
argument_list|,
name|operation
argument_list|,
name|uri
argument_list|,
name|positionText
argument_list|,
name|revisionId
argument_list|,
name|newRevisionId
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
return|;
case|case
name|Client
case|:
case|case
name|Server
case|:
default|default:
comment|// mode == Client or Server; will trigger on version failures
comment|// of getObjectMetadata even on server.
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|true
argument_list|,
operator|new
name|RemoteFileChangedException
argument_list|(
name|uri
argument_list|,
name|operation
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s "
operator|+
name|CHANGE_DETECTED
operator|+
literal|" during %s%s."
operator|+
literal|" Expected %s got %s"
argument_list|,
name|getSource
argument_list|()
argument_list|,
name|operation
argument_list|,
name|positionText
argument_list|,
name|revisionId
argument_list|,
name|newRevisionId
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Change detection policy based on {@link ObjectMetadata#getETag() eTag}.    */
end_comment

begin_class
DECL|class|ETagChangeDetectionPolicy
specifier|static
class|class
name|ETagChangeDetectionPolicy
extends|extends
name|ChangeDetectionPolicy
block|{
DECL|method|ETagChangeDetectionPolicy (Mode mode, boolean requireVersion)
name|ETagChangeDetectionPolicy
parameter_list|(
name|Mode
name|mode
parameter_list|,
name|boolean
name|requireVersion
parameter_list|)
block|{
name|super
argument_list|(
name|mode
argument_list|,
name|requireVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRevisionId (ObjectMetadata objectMetadata, String uri)
specifier|public
name|String
name|getRevisionId
parameter_list|(
name|ObjectMetadata
name|objectMetadata
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
return|return
name|objectMetadata
operator|.
name|getETag
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRevisionId (S3ObjectAttributes s3Attributes)
specifier|public
name|String
name|getRevisionId
parameter_list|(
name|S3ObjectAttributes
name|s3Attributes
parameter_list|)
block|{
return|return
name|s3Attributes
operator|.
name|getETag
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRevisionId (CopyResult copyResult)
specifier|public
name|String
name|getRevisionId
parameter_list|(
name|CopyResult
name|copyResult
parameter_list|)
block|{
return|return
name|copyResult
operator|.
name|getETag
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|applyRevisionConstraint (GetObjectRequest request, String revisionId)
specifier|public
name|void
name|applyRevisionConstraint
parameter_list|(
name|GetObjectRequest
name|request
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
if|if
condition|(
name|revisionId
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restricting get request to etag {}"
argument_list|,
name|revisionId
argument_list|)
expr_stmt|;
name|request
operator|.
name|withMatchingETagConstraint
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No etag revision ID to use as a constraint"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|applyRevisionConstraint (CopyObjectRequest request, String revisionId)
specifier|public
name|void
name|applyRevisionConstraint
parameter_list|(
name|CopyObjectRequest
name|request
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
if|if
condition|(
name|revisionId
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restricting copy request to etag {}"
argument_list|,
name|revisionId
argument_list|)
expr_stmt|;
name|request
operator|.
name|withMatchingETagConstraint
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No etag revision ID to use as a constraint"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|applyRevisionConstraint (GetObjectMetadataRequest request, String revisionId)
specifier|public
name|void
name|applyRevisionConstraint
parameter_list|(
name|GetObjectMetadataRequest
name|request
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to restrict HEAD request to etag; will check later"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSource ()
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
return|return
name|Source
operator|.
name|ETag
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ETagChangeDetectionPolicy mode="
operator|+
name|getMode
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Change detection policy based on    * {@link ObjectMetadata#getVersionId() versionId}.    */
end_comment

begin_class
DECL|class|VersionIdChangeDetectionPolicy
specifier|static
class|class
name|VersionIdChangeDetectionPolicy
extends|extends
name|ChangeDetectionPolicy
block|{
DECL|method|VersionIdChangeDetectionPolicy (Mode mode, boolean requireVersion)
name|VersionIdChangeDetectionPolicy
parameter_list|(
name|Mode
name|mode
parameter_list|,
name|boolean
name|requireVersion
parameter_list|)
block|{
name|super
argument_list|(
name|mode
argument_list|,
name|requireVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRevisionId (ObjectMetadata objectMetadata, String uri)
specifier|public
name|String
name|getRevisionId
parameter_list|(
name|ObjectMetadata
name|objectMetadata
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|String
name|versionId
init|=
name|objectMetadata
operator|.
name|getVersionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|versionId
operator|==
literal|null
condition|)
block|{
comment|// this policy doesn't work if the bucket doesn't have object versioning
comment|// enabled (which isn't by default)
name|getLogNoVersionSupport
argument_list|()
operator|.
name|warn
argument_list|(
name|CHANGE_DETECT_MODE
operator|+
literal|" set to "
operator|+
name|Source
operator|.
name|VersionId
operator|+
literal|" but no versionId available while reading {}. "
operator|+
literal|"Ensure your bucket has object versioning enabled. "
operator|+
literal|"You may see inconsistent reads."
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|versionId
return|;
block|}
annotation|@
name|Override
DECL|method|getRevisionId (S3ObjectAttributes s3Attributes)
specifier|public
name|String
name|getRevisionId
parameter_list|(
name|S3ObjectAttributes
name|s3Attributes
parameter_list|)
block|{
return|return
name|s3Attributes
operator|.
name|getVersionId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRevisionId (CopyResult copyResult)
specifier|public
name|String
name|getRevisionId
parameter_list|(
name|CopyResult
name|copyResult
parameter_list|)
block|{
return|return
name|copyResult
operator|.
name|getVersionId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|applyRevisionConstraint (GetObjectRequest request, String revisionId)
specifier|public
name|void
name|applyRevisionConstraint
parameter_list|(
name|GetObjectRequest
name|request
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
if|if
condition|(
name|revisionId
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restricting get request to version {}"
argument_list|,
name|revisionId
argument_list|)
expr_stmt|;
name|request
operator|.
name|withVersionId
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No version ID to use as a constraint"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|applyRevisionConstraint (CopyObjectRequest request, String revisionId)
specifier|public
name|void
name|applyRevisionConstraint
parameter_list|(
name|CopyObjectRequest
name|request
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
if|if
condition|(
name|revisionId
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restricting copy request to version {}"
argument_list|,
name|revisionId
argument_list|)
expr_stmt|;
name|request
operator|.
name|withSourceVersionId
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No version ID to use as a constraint"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|applyRevisionConstraint (GetObjectMetadataRequest request, String revisionId)
specifier|public
name|void
name|applyRevisionConstraint
parameter_list|(
name|GetObjectMetadataRequest
name|request
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
if|if
condition|(
name|revisionId
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restricting metadata request to version {}"
argument_list|,
name|revisionId
argument_list|)
expr_stmt|;
name|request
operator|.
name|withVersionId
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No version ID to use as a constraint"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSource ()
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
return|return
name|Source
operator|.
name|VersionId
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"VersionIdChangeDetectionPolicy mode="
operator|+
name|getMode
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Don't check for changes.    */
end_comment

begin_class
DECL|class|NoChangeDetection
specifier|static
class|class
name|NoChangeDetection
extends|extends
name|ChangeDetectionPolicy
block|{
DECL|method|NoChangeDetection ()
name|NoChangeDetection
parameter_list|()
block|{
name|super
argument_list|(
name|Mode
operator|.
name|None
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSource ()
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
return|return
name|Source
operator|.
name|None
return|;
block|}
annotation|@
name|Override
DECL|method|getRevisionId (final ObjectMetadata objectMetadata, final String uri)
specifier|public
name|String
name|getRevisionId
parameter_list|(
specifier|final
name|ObjectMetadata
name|objectMetadata
parameter_list|,
specifier|final
name|String
name|uri
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRevisionId (final S3ObjectAttributes s3ObjectAttributes)
specifier|public
name|String
name|getRevisionId
parameter_list|(
specifier|final
name|S3ObjectAttributes
name|s3ObjectAttributes
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRevisionId (CopyResult copyResult)
specifier|public
name|String
name|getRevisionId
parameter_list|(
name|CopyResult
name|copyResult
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|applyRevisionConstraint (final GetObjectRequest request, final String revisionId)
specifier|public
name|void
name|applyRevisionConstraint
parameter_list|(
specifier|final
name|GetObjectRequest
name|request
parameter_list|,
specifier|final
name|String
name|revisionId
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|applyRevisionConstraint (CopyObjectRequest request, String revisionId)
specifier|public
name|void
name|applyRevisionConstraint
parameter_list|(
name|CopyObjectRequest
name|request
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|applyRevisionConstraint (GetObjectMetadataRequest request, String revisionId)
specifier|public
name|void
name|applyRevisionConstraint
parameter_list|(
name|GetObjectMetadataRequest
name|request
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NoChangeDetection"
return|;
block|}
block|}
end_class

unit|}
end_unit

