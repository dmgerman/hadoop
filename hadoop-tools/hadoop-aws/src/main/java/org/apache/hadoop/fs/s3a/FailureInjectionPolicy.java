begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Simple object which stores current failure injection settings.  * "Delaying a key" can mean:  *    - Removing it from the S3 client's listings while delay is in effect.  *    - Causing input stream reads to fail.  *    - Causing the S3 side of getFileStatus(), i.e.  *      AmazonS3#getObjectMetadata(), to throw FileNotFound.  */
end_comment

begin_class
DECL|class|FailureInjectionPolicy
specifier|public
class|class
name|FailureInjectionPolicy
block|{
comment|/**    * Keys containing this substring will be subject to delayed visibility.    */
DECL|field|DEFAULT_DELAY_KEY_SUBSTRING
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DELAY_KEY_SUBSTRING
init|=
literal|"DELAY_LISTING_ME"
decl_stmt|;
comment|/**    * How many seconds affected keys will have delayed visibility.    * This should probably be a config value.    */
DECL|field|DEFAULT_DELAY_KEY_MSEC
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_DELAY_KEY_MSEC
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
DECL|field|DEFAULT_DELAY_KEY_PROBABILITY
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_DELAY_KEY_PROBABILITY
init|=
literal|1.0f
decl_stmt|;
comment|/** Special config value since we can't store empty strings in XML. */
DECL|field|MATCH_ALL_KEYS
specifier|public
specifier|static
specifier|final
name|String
name|MATCH_ALL_KEYS
init|=
literal|"*"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InconsistentAmazonS3Client
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Empty string matches all keys. */
DECL|field|delayKeySubstring
specifier|private
name|String
name|delayKeySubstring
decl_stmt|;
comment|/** Probability to delay visibility of a matching key. */
DECL|field|delayKeyProbability
specifier|private
name|float
name|delayKeyProbability
decl_stmt|;
comment|/** Time in milliseconds to delay visibility of newly modified object. */
DECL|field|delayKeyMsec
specifier|private
name|long
name|delayKeyMsec
decl_stmt|;
comment|/**    * Probability of throttling a request.    */
DECL|field|throttleProbability
specifier|private
name|float
name|throttleProbability
decl_stmt|;
comment|/**    * limit for failures before operations succeed; if 0 then "no limit".    */
DECL|field|failureLimit
specifier|private
name|int
name|failureLimit
init|=
literal|0
decl_stmt|;
DECL|method|FailureInjectionPolicy (Configuration conf)
specifier|public
name|FailureInjectionPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|delayKeySubstring
operator|=
name|conf
operator|.
name|get
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_KEY
argument_list|,
name|DEFAULT_DELAY_KEY_SUBSTRING
argument_list|)
expr_stmt|;
comment|// "" is a substring of all strings, use it to match all keys.
if|if
condition|(
name|this
operator|.
name|delayKeySubstring
operator|.
name|equals
argument_list|(
name|MATCH_ALL_KEYS
argument_list|)
condition|)
block|{
name|this
operator|.
name|delayKeySubstring
operator|=
literal|""
expr_stmt|;
block|}
name|this
operator|.
name|delayKeyProbability
operator|=
name|validProbability
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_PROBABILITY
argument_list|,
name|DEFAULT_DELAY_KEY_PROBABILITY
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|delayKeyMsec
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_MSEC
argument_list|,
name|DEFAULT_DELAY_KEY_MSEC
argument_list|)
expr_stmt|;
name|this
operator|.
name|setThrottleProbability
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|FAIL_INJECT_THROTTLE_PROBABILITY
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getDelayKeySubstring ()
specifier|public
name|String
name|getDelayKeySubstring
parameter_list|()
block|{
return|return
name|delayKeySubstring
return|;
block|}
DECL|method|getDelayKeyProbability ()
specifier|public
name|float
name|getDelayKeyProbability
parameter_list|()
block|{
return|return
name|delayKeyProbability
return|;
block|}
DECL|method|getDelayKeyMsec ()
specifier|public
name|long
name|getDelayKeyMsec
parameter_list|()
block|{
return|return
name|delayKeyMsec
return|;
block|}
DECL|method|getThrottleProbability ()
specifier|public
name|float
name|getThrottleProbability
parameter_list|()
block|{
return|return
name|throttleProbability
return|;
block|}
DECL|method|getFailureLimit ()
specifier|public
name|int
name|getFailureLimit
parameter_list|()
block|{
return|return
name|failureLimit
return|;
block|}
DECL|method|setFailureLimit (int failureLimit)
specifier|public
name|void
name|setFailureLimit
parameter_list|(
name|int
name|failureLimit
parameter_list|)
block|{
name|this
operator|.
name|failureLimit
operator|=
name|failureLimit
expr_stmt|;
block|}
comment|/**    * Set the probability of throttling a request.    * @param throttleProbability the probability of a request being throttled.    */
DECL|method|setThrottleProbability (float throttleProbability)
specifier|public
name|void
name|setThrottleProbability
parameter_list|(
name|float
name|throttleProbability
parameter_list|)
block|{
name|this
operator|.
name|throttleProbability
operator|=
name|validProbability
argument_list|(
name|throttleProbability
argument_list|)
expr_stmt|;
block|}
DECL|method|trueWithProbability (float p)
specifier|public
specifier|static
name|boolean
name|trueWithProbability
parameter_list|(
name|float
name|p
parameter_list|)
block|{
return|return
name|Math
operator|.
name|random
argument_list|()
operator|<
name|p
return|;
block|}
comment|/**    * Should we delay listing visibility for this key?    * @param key key which is being put    * @return true if we should delay    */
DECL|method|shouldDelay (String key)
specifier|public
name|boolean
name|shouldDelay
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|float
name|p
init|=
name|getDelayKeyProbability
argument_list|()
decl_stmt|;
name|boolean
name|delay
init|=
name|key
operator|.
name|contains
argument_list|(
name|getDelayKeySubstring
argument_list|()
argument_list|)
decl_stmt|;
name|delay
operator|=
name|delay
operator|&&
name|trueWithProbability
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}, p={} -> {}"
argument_list|,
name|key
argument_list|,
name|p
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|delay
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"FailureInjectionPolicy:"
operator|+
literal|" %s msec delay, substring %s, delay probability %s;"
operator|+
literal|" throttle probability %s"
operator|+
literal|"; failure limit %d"
argument_list|,
name|delayKeyMsec
argument_list|,
name|delayKeySubstring
argument_list|,
name|delayKeyProbability
argument_list|,
name|throttleProbability
argument_list|,
name|failureLimit
argument_list|)
return|;
block|}
comment|/**    * Validate a probability option.    * @param p probability    * @return the probability, if valid    * @throws IllegalArgumentException if the probability is out of range.    */
DECL|method|validProbability (float p)
specifier|private
specifier|static
name|float
name|validProbability
parameter_list|(
name|float
name|p
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|p
operator|>=
literal|0.0f
operator|&&
name|p
operator|<=
literal|1.0f
argument_list|,
literal|"Probability out of range 0 to 1 %s"
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
end_class

end_unit

