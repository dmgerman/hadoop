begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|Signer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|SignerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|CUSTOM_SIGNERS
import|;
end_import

begin_comment
comment|/**  * Class to handle custom signers.  */
end_comment

begin_class
DECL|class|SignerManager
specifier|public
class|class
name|SignerManager
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SignerManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|initializers
specifier|private
specifier|final
name|List
argument_list|<
name|AwsSignerInitializer
argument_list|>
name|initializers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|bucketName
specifier|private
specifier|final
name|String
name|bucketName
decl_stmt|;
DECL|field|delegationTokenProvider
specifier|private
specifier|final
name|DelegationTokenProvider
name|delegationTokenProvider
decl_stmt|;
DECL|field|ownerConf
specifier|private
specifier|final
name|Configuration
name|ownerConf
decl_stmt|;
DECL|field|ownerUgi
specifier|private
specifier|final
name|UserGroupInformation
name|ownerUgi
decl_stmt|;
DECL|method|SignerManager (String bucketName, DelegationTokenProvider delegationTokenProvider, Configuration ownerConf, UserGroupInformation ownerUgi)
specifier|public
name|SignerManager
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|DelegationTokenProvider
name|delegationTokenProvider
parameter_list|,
name|Configuration
name|ownerConf
parameter_list|,
name|UserGroupInformation
name|ownerUgi
parameter_list|)
block|{
name|this
operator|.
name|bucketName
operator|=
name|bucketName
expr_stmt|;
name|this
operator|.
name|delegationTokenProvider
operator|=
name|delegationTokenProvider
expr_stmt|;
name|this
operator|.
name|ownerConf
operator|=
name|ownerConf
expr_stmt|;
name|this
operator|.
name|ownerUgi
operator|=
name|ownerUgi
expr_stmt|;
block|}
comment|/**    * Initialize custom signers and register them with the AWS SDK.    *    */
DECL|method|initCustomSigners ()
specifier|public
name|void
name|initCustomSigners
parameter_list|()
block|{
name|String
index|[]
name|customSigners
init|=
name|ownerConf
operator|.
name|getTrimmedStrings
argument_list|(
name|CUSTOM_SIGNERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|customSigners
operator|==
literal|null
operator|||
name|customSigners
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// No custom signers specified, nothing to do.
name|LOG
operator|.
name|debug
argument_list|(
literal|"No custom signers specified"
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|String
name|customSigner
range|:
name|customSigners
control|)
block|{
name|String
index|[]
name|parts
init|=
name|customSigner
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|parts
operator|.
name|length
operator|==
literal|1
operator|||
name|parts
operator|.
name|length
operator|==
literal|2
operator|||
name|parts
operator|.
name|length
operator|==
literal|3
operator|)
condition|)
block|{
name|String
name|message
init|=
literal|"Invalid format (Expected name, name:SignerClass,"
operator|+
literal|" name:SignerClass:SignerInitializerClass)"
operator|+
literal|" for CustomSigner: ["
operator|+
name|customSigner
operator|+
literal|"]"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// Nothing to do. Trying to use a pre-defined Signer
block|}
else|else
block|{
comment|// Register any custom Signer
name|maybeRegisterSigner
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|,
name|ownerConf
argument_list|)
expr_stmt|;
comment|// If an initializer is specified, take care of instantiating it and
comment|// setting it up
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|AwsSignerInitializer
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clazz
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|AwsSignerInitializer
argument_list|>
operator|)
name|ownerConf
operator|.
name|getClassByName
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SignerInitializer class"
operator|+
literal|" [%s] not found for signer [%s]"
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating signer initializer: [{}] for signer: [{}]"
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|AwsSignerInitializer
name|signerInitializer
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|initializers
operator|.
name|add
argument_list|(
name|signerInitializer
argument_list|)
expr_stmt|;
name|signerInitializer
operator|.
name|registerStore
argument_list|(
name|bucketName
argument_list|,
name|ownerConf
argument_list|,
name|delegationTokenProvider
argument_list|,
name|ownerUgi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Make sure the signer class is registered once with the AWS SDK    */
DECL|method|maybeRegisterSigner (String signerName, String signerClassName, Configuration conf)
specifier|private
specifier|static
name|void
name|maybeRegisterSigner
parameter_list|(
name|String
name|signerName
parameter_list|,
name|String
name|signerClassName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|SignerFactory
operator|.
name|getSignerByTypeAndService
argument_list|(
name|signerName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Signer is not registered with the AWS SDK.
comment|// Load the class and register the signer.
name|Class
argument_list|<
name|?
extends|extends
name|Signer
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clazz
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Signer
argument_list|>
operator|)
name|conf
operator|.
name|getClassByName
argument_list|(
name|signerClassName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Signer class [%s] not found for signer [%s]"
argument_list|,
name|signerClassName
argument_list|,
name|signerName
argument_list|)
argument_list|,
name|cnfe
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering Custom Signer - [{}->{}]"
argument_list|,
name|signerName
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|SignerManager
operator|.
name|class
init|)
block|{
name|SignerFactory
operator|.
name|registerSigner
argument_list|(
name|signerName
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|close ()
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unregistering fs from {} initializers"
argument_list|,
name|initializers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AwsSignerInitializer
name|initializer
range|:
name|initializers
control|)
block|{
name|initializer
operator|.
name|unregisterStore
argument_list|(
name|bucketName
argument_list|,
name|ownerConf
argument_list|,
name|delegationTokenProvider
argument_list|,
name|ownerUgi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

