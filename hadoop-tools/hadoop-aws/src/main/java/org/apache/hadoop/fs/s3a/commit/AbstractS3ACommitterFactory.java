begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|PathOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|PathOutputCommitterFactory
import|;
end_import

begin_comment
comment|/**  * Dynamically create the output committer based on subclass type and settings.  */
end_comment

begin_class
DECL|class|AbstractS3ACommitterFactory
specifier|public
specifier|abstract
class|class
name|AbstractS3ACommitterFactory
extends|extends
name|PathOutputCommitterFactory
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractS3ACommitterFactory
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createOutputCommitter (Path outputPath, TaskAttemptContext context)
specifier|public
name|PathOutputCommitter
name|createOutputCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|getDestinationFileSystem
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|PathOutputCommitter
name|outputCommitter
decl_stmt|;
if|if
condition|(
name|fs
operator|instanceof
name|S3AFileSystem
condition|)
block|{
name|outputCommitter
operator|=
name|createTaskCommitter
argument_list|(
operator|(
name|S3AFileSystem
operator|)
name|fs
argument_list|,
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PathCommitException
argument_list|(
name|outputPath
argument_list|,
literal|"Filesystem not supported by this committer"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using Commmitter {} for {}"
argument_list|,
name|outputCommitter
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
return|return
name|outputCommitter
return|;
block|}
comment|/**    * Get the destination filesystem, returning null if there is none.    * Code using this must explicitly or implicitly look for a null value    * in the response.    * @param outputPath output path    * @param context job/task context    * @return the destination filesystem, if it can be determined    * @throws IOException if the FS cannot be instantiated    */
DECL|method|getDestinationFileSystem (Path outputPath, JobContext context)
specifier|protected
name|FileSystem
name|getDestinationFileSystem
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|outputPath
operator|!=
literal|null
condition|?
name|FileSystem
operator|.
name|get
argument_list|(
name|outputPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**    * Implementation point: create a task committer for a specific filesystem.    * @param fileSystem destination FS.    * @param outputPath final output path for work    * @param context task context    * @return a committer    * @throws IOException any problem, including the FS not supporting    * the desired committer    */
DECL|method|createTaskCommitter ( S3AFileSystem fileSystem, Path outputPath, TaskAttemptContext context)
specifier|public
specifier|abstract
name|PathOutputCommitter
name|createTaskCommitter
parameter_list|(
name|S3AFileSystem
name|fileSystem
parameter_list|,
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

