begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|EnvironmentVariableCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|STSAssumeRoleSessionCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|securitytoken
operator|.
name|AWSSecurityTokenServiceClientBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|securitytoken
operator|.
name|model
operator|.
name|AWSSecurityTokenServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AWSCredentialProviderList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|CredentialInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Retries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Invoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ARetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|SimpleAWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|buildAWSProviderList
import|;
end_import

begin_comment
comment|/**  * Support IAM Assumed roles by instantiating an instance of  * {@code STSAssumeRoleSessionCredentialsProvider} from configuration  * properties, including wiring up the inner authenticator, and,  * unless overridden, creating a session name from the current user.  *  * Classname is used in configuration files; do not move.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|AssumedRoleCredentialProvider
specifier|public
class|class
name|AssumedRoleCredentialProvider
implements|implements
name|AWSCredentialsProvider
implements|,
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AssumedRoleCredentialProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"org.apache.hadoop.fs.s3a.auth.AssumedRoleCredentialProvider"
decl_stmt|;
DECL|field|E_NO_ROLE
specifier|public
specifier|static
specifier|final
name|String
name|E_NO_ROLE
init|=
literal|"Unset property "
operator|+
name|ASSUMED_ROLE_ARN
decl_stmt|;
DECL|field|stsProvider
specifier|private
specifier|final
name|STSAssumeRoleSessionCredentialsProvider
name|stsProvider
decl_stmt|;
DECL|field|sessionName
specifier|private
specifier|final
name|String
name|sessionName
decl_stmt|;
DECL|field|duration
specifier|private
specifier|final
name|long
name|duration
decl_stmt|;
DECL|field|arn
specifier|private
specifier|final
name|String
name|arn
decl_stmt|;
DECL|field|credentialsToSTS
specifier|private
specifier|final
name|AWSCredentialProviderList
name|credentialsToSTS
decl_stmt|;
DECL|field|invoker
specifier|private
specifier|final
name|Invoker
name|invoker
decl_stmt|;
comment|/**    * Instantiate.    * This calls {@link #getCredentials()} to fail fast on the inner    * role credential retrieval.    * @param fsUri possibly null URI of the filesystem.    * @param conf configuration    * @throws IOException on IO problems and some parameter checking    * @throws IllegalArgumentException invalid parameters    * @throws AWSSecurityTokenServiceException problems getting credentials    */
DECL|method|AssumedRoleCredentialProvider (@ullable URI fsUri, Configuration conf)
specifier|public
name|AssumedRoleCredentialProvider
parameter_list|(
annotation|@
name|Nullable
name|URI
name|fsUri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|arn
operator|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|ASSUMED_ROLE_ARN
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|arn
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|E_NO_ROLE
argument_list|)
throw|;
block|}
comment|// build up the base provider
name|credentialsToSTS
operator|=
name|buildAWSProviderList
argument_list|(
name|fsUri
argument_list|,
name|conf
argument_list|,
name|ASSUMED_ROLE_CREDENTIALS_PROVIDER
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SimpleAWSCredentialsProvider
operator|.
name|class
argument_list|,
name|EnvironmentVariableCredentialsProvider
operator|.
name|class
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Credentials to obtain role credentials: {}"
argument_list|,
name|credentialsToSTS
argument_list|)
expr_stmt|;
comment|// then the STS binding
name|sessionName
operator|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|ASSUMED_ROLE_SESSION_NAME
argument_list|,
name|buildSessionName
argument_list|()
argument_list|)
expr_stmt|;
name|duration
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|ASSUMED_ROLE_SESSION_DURATION
argument_list|,
name|ASSUMED_ROLE_SESSION_DURATION_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|String
name|policy
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|ASSUMED_ROLE_POLICY
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|STSAssumeRoleSessionCredentialsProvider
operator|.
name|Builder
name|builder
init|=
operator|new
name|STSAssumeRoleSessionCredentialsProvider
operator|.
name|Builder
argument_list|(
name|arn
argument_list|,
name|sessionName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|withRoleSessionDurationSeconds
argument_list|(
operator|(
name|int
operator|)
name|duration
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|policy
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scope down policy {}"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withScopeDownPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
name|String
name|endpoint
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|ASSUMED_ROLE_STS_ENDPOINT
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|region
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|ASSUMED_ROLE_STS_ENDPOINT_REGION
argument_list|,
name|ASSUMED_ROLE_STS_ENDPOINT_REGION_DEFAULT
argument_list|)
decl_stmt|;
name|AWSSecurityTokenServiceClientBuilder
name|stsbuilder
init|=
name|STSClientFactory
operator|.
name|builder
argument_list|(
name|conf
argument_list|,
name|fsUri
operator|!=
literal|null
condition|?
name|fsUri
operator|.
name|getHost
argument_list|()
else|:
literal|""
argument_list|,
name|credentialsToSTS
argument_list|,
name|endpoint
argument_list|,
name|region
argument_list|)
decl_stmt|;
comment|// the STS client is not tracked for a shutdown in close(), because it
comment|// (currently) throws an UnsupportedOperationException in shutdown().
name|builder
operator|.
name|withStsClient
argument_list|(
name|stsbuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|//now build the provider
name|stsProvider
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// to handle STS throttling by the AWS account, we
comment|// need to retry
name|invoker
operator|=
operator|new
name|Invoker
argument_list|(
operator|new
name|S3ARetryPolicy
argument_list|(
name|conf
argument_list|)
argument_list|,
name|this
operator|::
name|operationRetried
argument_list|)
expr_stmt|;
comment|// and force in a fail-fast check just to keep the stack traces less
comment|// convoluted
name|getCredentials
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get credentials.    * @return the credentials    * @throws AWSSecurityTokenServiceException if none could be obtained.    */
annotation|@
name|Override
annotation|@
name|Retries
operator|.
name|RetryRaw
DECL|method|getCredentials ()
specifier|public
name|AWSCredentials
name|getCredentials
parameter_list|()
block|{
try|try
block|{
return|return
name|invoker
operator|.
name|retryUntranslated
argument_list|(
literal|"getCredentials"
argument_list|,
literal|true
argument_list|,
name|stsProvider
operator|::
name|getCredentials
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// this is in the signature of retryUntranslated;
comment|// its hard to see how this could be raised, but for
comment|// completeness, it is wrapped as an Amazon Client Exception
comment|// and rethrown.
throw|throw
operator|new
name|CredentialInitializationException
argument_list|(
literal|"getCredentials failed: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AWSSecurityTokenServiceException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get credentials for role {}"
argument_list|,
name|arn
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|stsProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/**    * Propagate the close() call to the inner stsProvider.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|S3AUtils
operator|.
name|closeAutocloseables
argument_list|(
name|LOG
argument_list|,
name|stsProvider
argument_list|,
name|credentialsToSTS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"AssumedRoleCredentialProvider{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"role='"
argument_list|)
operator|.
name|append
argument_list|(
name|arn
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", session'"
argument_list|)
operator|.
name|append
argument_list|(
name|sessionName
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", duration="
argument_list|)
operator|.
name|append
argument_list|(
name|duration
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Build the session name from the current user's shortname.    * @return a string for the session name.    * @throws IOException failure to get the current user    */
DECL|method|buildSessionName ()
specifier|static
name|String
name|buildSessionName
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|sanitize
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Build a session name from the string, sanitizing it for the permitted    * characters.    * @param session source session    * @return a string for use in role requests.    */
annotation|@
name|VisibleForTesting
DECL|method|sanitize (String session)
specifier|static
name|String
name|sanitize
parameter_list|(
name|String
name|session
parameter_list|)
block|{
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|(
name|session
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|session
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
literal|"abcdefghijklmnopqrstuvwxyz0123456789,.@-"
operator|.
name|contains
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|c
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Callback from {@link Invoker} when an operation is retried.    * @param text text of the operation    * @param ex exception    * @param retries number of retries    * @param idempotent is the method idempotent    */
DECL|method|operationRetried ( String text, Exception ex, int retries, boolean idempotent)
specifier|public
name|void
name|operationRetried
parameter_list|(
name|String
name|text
parameter_list|,
name|Exception
name|ex
parameter_list|,
name|int
name|retries
parameter_list|,
name|boolean
name|idempotent
parameter_list|)
block|{
if|if
condition|(
name|retries
operator|==
literal|0
condition|)
block|{
comment|// log on the first retry attempt of the credential access.
comment|// At worst, this means one log entry every intermittent renewal
comment|// time.
name|LOG
operator|.
name|info
argument_list|(
literal|"Retried {}"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

