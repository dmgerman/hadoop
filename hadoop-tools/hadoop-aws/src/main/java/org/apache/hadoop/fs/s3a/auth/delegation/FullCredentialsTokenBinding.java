begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AWSCredentialProviderList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|MarshalledCredentialBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|MarshalledCredentialProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|MarshalledCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|RoleModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3native
operator|.
name|S3xLoginHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|FULL_TOKEN_KIND
import|;
end_import

begin_comment
comment|/**  * Full credentials: they are simply passed as-is, rather than  * converted to a session.  * These aren't as secure; this class exists to (a) support deployments  * where there is not STS service and (b) validate the design of  * S3A DT support to support different managers.  */
end_comment

begin_class
DECL|class|FullCredentialsTokenBinding
specifier|public
class|class
name|FullCredentialsTokenBinding
extends|extends
name|AbstractDelegationTokenBinding
block|{
comment|/**    * Wire name of this binding includes a version marker: {@value}.    */
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"FullCredentials/001"
decl_stmt|;
DECL|field|FULL_TOKEN
specifier|public
specifier|static
specifier|final
name|String
name|FULL_TOKEN
init|=
literal|"Full Delegation Token"
decl_stmt|;
comment|/**    * Long-lived AWS credentials.    */
DECL|field|awsCredentials
specifier|private
name|MarshalledCredentials
name|awsCredentials
decl_stmt|;
comment|/**    * Origin of credentials.    */
DECL|field|credentialOrigin
specifier|private
name|String
name|credentialOrigin
decl_stmt|;
comment|/**    * Constructor, uses name of {@link #NAME} and token kind of    * {@link DelegationConstants#FULL_TOKEN_KIND}.    *    */
DECL|method|FullCredentialsTokenBinding ()
specifier|public
name|FullCredentialsTokenBinding
parameter_list|()
block|{
name|super
argument_list|(
name|NAME
argument_list|,
name|FULL_TOKEN_KIND
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|loadAWSCredentials
argument_list|()
expr_stmt|;
block|}
comment|/**    * Load the AWS credentials.    * @throws IOException failure    */
DECL|method|loadAWSCredentials ()
specifier|private
name|void
name|loadAWSCredentials
parameter_list|()
throws|throws
name|IOException
block|{
name|credentialOrigin
operator|=
name|AbstractS3ATokenIdentifier
operator|.
name|createDefaultOriginMessage
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|getCanonicalUri
argument_list|()
decl_stmt|;
comment|// look for access keys to FS
name|S3xLoginHelper
operator|.
name|Login
name|secrets
init|=
name|S3AUtils
operator|.
name|getAWSAccessKeys
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|secrets
operator|.
name|hasLogin
argument_list|()
condition|)
block|{
name|awsCredentials
operator|=
operator|new
name|MarshalledCredentials
argument_list|(
name|secrets
operator|.
name|getUser
argument_list|()
argument_list|,
name|secrets
operator|.
name|getPassword
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|credentialOrigin
operator|+=
literal|"; source = Hadoop configuration data"
expr_stmt|;
block|}
else|else
block|{
comment|// if there are none, look for the environment variables.
name|awsCredentials
operator|=
name|MarshalledCredentialBinding
operator|.
name|fromEnvironment
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|awsCredentials
operator|.
name|isValid
argument_list|(
name|MarshalledCredentials
operator|.
name|CredentialTypeRequired
operator|.
name|AnyNonEmpty
argument_list|)
condition|)
block|{
comment|// valid tokens, so mark as origin
name|credentialOrigin
operator|+=
literal|"; source = Environment variables"
expr_stmt|;
block|}
else|else
block|{
name|credentialOrigin
operator|=
literal|"no credentials in configuration or"
operator|+
literal|" environment variables"
expr_stmt|;
block|}
block|}
name|awsCredentials
operator|.
name|validate
argument_list|(
name|credentialOrigin
operator|+
literal|": "
argument_list|,
name|MarshalledCredentials
operator|.
name|CredentialTypeRequired
operator|.
name|AnyNonEmpty
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serve up the credentials retrieved from configuration/environment in    * {@link #loadAWSCredentials()}.    * @return a credential provider for the unbonded instance.    * @throws IOException failure to load    */
annotation|@
name|Override
DECL|method|deployUnbonded ()
specifier|public
name|AWSCredentialProviderList
name|deployUnbonded
parameter_list|()
throws|throws
name|IOException
block|{
name|requireServiceStarted
argument_list|()
expr_stmt|;
return|return
operator|new
name|AWSCredentialProviderList
argument_list|(
literal|"Full Credentials Token Binding"
argument_list|,
operator|new
name|MarshalledCredentialProvider
argument_list|(
name|FULL_TOKEN
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|awsCredentials
argument_list|,
name|MarshalledCredentials
operator|.
name|CredentialTypeRequired
operator|.
name|AnyNonEmpty
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a new delegation token.    *    * It's slightly inefficient to create a new one every time, but    * it avoids concurrency problems with managing any singleton.    * @param policy minimum policy to use, if known.    * @param encryptionSecrets encryption secrets.    * @return a DT identifier    * @throws IOException failure    */
annotation|@
name|Override
DECL|method|createTokenIdentifier ( final Optional<RoleModel.Policy> policy, final EncryptionSecrets encryptionSecrets, final Text renewer)
specifier|public
name|AbstractS3ATokenIdentifier
name|createTokenIdentifier
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|RoleModel
operator|.
name|Policy
argument_list|>
name|policy
parameter_list|,
specifier|final
name|EncryptionSecrets
name|encryptionSecrets
parameter_list|,
specifier|final
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|requireServiceStarted
argument_list|()
expr_stmt|;
return|return
operator|new
name|FullCredentialsTokenIdentifier
argument_list|(
name|getCanonicalUri
argument_list|()
argument_list|,
name|getOwnerText
argument_list|()
argument_list|,
name|renewer
argument_list|,
name|awsCredentials
argument_list|,
name|encryptionSecrets
argument_list|,
name|credentialOrigin
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bindToTokenIdentifier ( final AbstractS3ATokenIdentifier retrievedIdentifier)
specifier|public
name|AWSCredentialProviderList
name|bindToTokenIdentifier
parameter_list|(
specifier|final
name|AbstractS3ATokenIdentifier
name|retrievedIdentifier
parameter_list|)
throws|throws
name|IOException
block|{
name|FullCredentialsTokenIdentifier
name|tokenIdentifier
init|=
name|convertTokenIdentifier
argument_list|(
name|retrievedIdentifier
argument_list|,
name|FullCredentialsTokenIdentifier
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|AWSCredentialProviderList
argument_list|(
literal|""
argument_list|,
operator|new
name|MarshalledCredentialProvider
argument_list|(
name|FULL_TOKEN
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|tokenIdentifier
operator|.
name|getMarshalledCredentials
argument_list|()
argument_list|,
name|MarshalledCredentials
operator|.
name|CredentialTypeRequired
operator|.
name|AnyNonEmpty
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createEmptyIdentifier ()
specifier|public
name|AbstractS3ATokenIdentifier
name|createEmptyIdentifier
parameter_list|()
block|{
return|return
operator|new
name|FullCredentialsTokenIdentifier
argument_list|()
return|;
block|}
block|}
end_class

end_unit

