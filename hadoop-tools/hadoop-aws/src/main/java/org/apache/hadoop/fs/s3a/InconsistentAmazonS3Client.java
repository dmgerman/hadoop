begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ListObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PutObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PutObjectResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3ObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A wrapper around {@link com.amazonaws.services.s3.AmazonS3} that injects  * inconsistency and/or errors.  Used for testing S3Guard.  * Currently only delays listing visibility, not affecting GET.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|InconsistentAmazonS3Client
specifier|public
class|class
name|InconsistentAmazonS3Client
extends|extends
name|AmazonS3Client
block|{
comment|/**    * Keys containing this substring will be subject to delayed visibility.    */
DECL|field|DEFAULT_DELAY_KEY_SUBSTRING
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DELAY_KEY_SUBSTRING
init|=
literal|"DELAY_LISTING_ME"
decl_stmt|;
comment|/**    * How many seconds affected keys will be delayed from appearing in listing.    * This should probably be a config value.    */
DECL|field|DEFAULT_DELAY_KEY_MSEC
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_DELAY_KEY_MSEC
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
DECL|field|DEFAULT_DELAY_KEY_PROBABILITY
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_DELAY_KEY_PROBABILITY
init|=
literal|1.0f
decl_stmt|;
comment|/** Special config value since we can't store empty strings in XML. */
DECL|field|MATCH_ALL_KEYS
specifier|public
specifier|static
specifier|final
name|String
name|MATCH_ALL_KEYS
init|=
literal|"*"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InconsistentAmazonS3Client
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Empty string matches all keys. */
DECL|field|delayKeySubstring
specifier|private
name|String
name|delayKeySubstring
decl_stmt|;
comment|/** Probability to delay visibility of a matching key. */
DECL|field|delayKeyProbability
specifier|private
name|float
name|delayKeyProbability
decl_stmt|;
comment|/** Time in milliseconds to delay visibility of newly modified object. */
DECL|field|delayKeyMsec
specifier|private
name|long
name|delayKeyMsec
decl_stmt|;
comment|/**    * Composite of data we need to track about recently deleted objects:    * when it was deleted (same was with recently put objects) and the object    * summary (since we should keep returning it for sometime after its    * deletion).    */
DECL|class|Delete
specifier|private
specifier|static
class|class
name|Delete
block|{
DECL|field|time
specifier|private
name|Long
name|time
decl_stmt|;
DECL|field|summary
specifier|private
name|S3ObjectSummary
name|summary
decl_stmt|;
DECL|method|Delete (Long time, S3ObjectSummary summary)
name|Delete
parameter_list|(
name|Long
name|time
parameter_list|,
name|S3ObjectSummary
name|summary
parameter_list|)
block|{
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
name|this
operator|.
name|summary
operator|=
name|summary
expr_stmt|;
block|}
DECL|method|time ()
specifier|public
name|Long
name|time
parameter_list|()
block|{
return|return
name|time
return|;
block|}
DECL|method|summary ()
specifier|public
name|S3ObjectSummary
name|summary
parameter_list|()
block|{
return|return
name|summary
return|;
block|}
block|}
comment|/** Map of key to delay -> time it was deleted + object summary (object    * summary is null for prefixes. */
DECL|field|delayedDeletes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Delete
argument_list|>
name|delayedDeletes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Map of key to delay -> time it was created. */
DECL|field|delayedPutKeys
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|delayedPutKeys
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|InconsistentAmazonS3Client (AWSCredentialsProvider credentials, ClientConfiguration clientConfiguration, Configuration conf)
specifier|public
name|InconsistentAmazonS3Client
parameter_list|(
name|AWSCredentialsProvider
name|credentials
parameter_list|,
name|ClientConfiguration
name|clientConfiguration
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|credentials
argument_list|,
name|clientConfiguration
argument_list|)
expr_stmt|;
name|setupConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|setupConfig (Configuration conf)
specifier|protected
name|void
name|setupConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|delayKeySubstring
operator|=
name|conf
operator|.
name|get
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_KEY
argument_list|,
name|DEFAULT_DELAY_KEY_SUBSTRING
argument_list|)
expr_stmt|;
comment|// "" is a substring of all strings, use it to match all keys.
if|if
condition|(
name|delayKeySubstring
operator|.
name|equals
argument_list|(
name|MATCH_ALL_KEYS
argument_list|)
condition|)
block|{
name|delayKeySubstring
operator|=
literal|""
expr_stmt|;
block|}
name|delayKeyProbability
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_PROBABILITY
argument_list|,
name|DEFAULT_DELAY_KEY_PROBABILITY
argument_list|)
expr_stmt|;
name|delayKeyMsec
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_MSEC
argument_list|,
name|DEFAULT_DELAY_KEY_MSEC
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Enabled with {} msec delay, substring {}, probability {}"
argument_list|,
name|delayKeyMsec
argument_list|,
name|delayKeySubstring
argument_list|,
name|delayKeyProbability
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clear all oustanding inconsistent keys.  After calling this function,    * listings should behave normally (no failure injection), until additional    * keys are matched for delay, e.g. via putObject(), deleteObject().    */
DECL|method|clearInconsistency ()
specifier|public
name|void
name|clearInconsistency
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"clearing all delayed puts / deletes"
argument_list|)
expr_stmt|;
name|delayedDeletes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|delayedPutKeys
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Convenience function for test code to cast from supertype.    * @param c supertype to cast from    * @return subtype, not null    * @throws Exception on error    */
DECL|method|castFrom (AmazonS3 c)
specifier|public
specifier|static
name|InconsistentAmazonS3Client
name|castFrom
parameter_list|(
name|AmazonS3
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|InconsistentAmazonS3Client
name|ic
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|InconsistentAmazonS3Client
condition|)
block|{
name|ic
operator|=
operator|(
name|InconsistentAmazonS3Client
operator|)
name|c
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ic
argument_list|,
literal|"Not an instance of "
operator|+
literal|"InconsistentAmazonS3Client"
argument_list|)
expr_stmt|;
return|return
name|ic
return|;
block|}
annotation|@
name|Override
DECL|method|deleteObjects (DeleteObjectsRequest deleteObjectsRequest)
specifier|public
name|DeleteObjectsResult
name|deleteObjects
parameter_list|(
name|DeleteObjectsRequest
name|deleteObjectsRequest
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
for|for
control|(
name|DeleteObjectsRequest
operator|.
name|KeyVersion
name|keyVersion
range|:
name|deleteObjectsRequest
operator|.
name|getKeys
argument_list|()
control|)
block|{
name|registerDeleteObject
argument_list|(
name|keyVersion
operator|.
name|getKey
argument_list|()
argument_list|,
name|deleteObjectsRequest
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|deleteObjects
argument_list|(
name|deleteObjectsRequest
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteObject (DeleteObjectRequest deleteObjectRequest)
specifier|public
name|void
name|deleteObject
parameter_list|(
name|DeleteObjectRequest
name|deleteObjectRequest
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
name|String
name|key
init|=
name|deleteObjectRequest
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|registerDeleteObject
argument_list|(
name|key
argument_list|,
name|deleteObjectRequest
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|deleteObject
argument_list|(
name|deleteObjectRequest
argument_list|)
expr_stmt|;
block|}
comment|/* We should only need to override this version of putObject() */
annotation|@
name|Override
DECL|method|putObject (PutObjectRequest putObjectRequest)
specifier|public
name|PutObjectResult
name|putObject
parameter_list|(
name|PutObjectRequest
name|putObjectRequest
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"key {}"
argument_list|,
name|putObjectRequest
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|registerPutObject
argument_list|(
name|putObjectRequest
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|putObject
argument_list|(
name|putObjectRequest
argument_list|)
return|;
block|}
comment|/* We should only need to override this version of listObjects() */
annotation|@
name|Override
DECL|method|listObjects (ListObjectsRequest listObjectsRequest)
specifier|public
name|ObjectListing
name|listObjects
parameter_list|(
name|ListObjectsRequest
name|listObjectsRequest
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"prefix {}"
argument_list|,
name|listObjectsRequest
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectListing
name|listing
init|=
name|super
operator|.
name|listObjects
argument_list|(
name|listObjectsRequest
argument_list|)
decl_stmt|;
name|listing
operator|=
name|filterListObjects
argument_list|(
name|listObjectsRequest
argument_list|,
name|listing
argument_list|)
expr_stmt|;
name|listing
operator|=
name|restoreListObjects
argument_list|(
name|listObjectsRequest
argument_list|,
name|listing
argument_list|)
expr_stmt|;
return|return
name|listing
return|;
block|}
DECL|method|addSummaryIfNotPresent (List<S3ObjectSummary> list, S3ObjectSummary item)
specifier|private
name|void
name|addSummaryIfNotPresent
parameter_list|(
name|List
argument_list|<
name|S3ObjectSummary
argument_list|>
name|list
parameter_list|,
name|S3ObjectSummary
name|item
parameter_list|)
block|{
comment|// Behavior of S3ObjectSummary
name|String
name|key
init|=
name|item
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|S3ObjectSummary
name|member
range|:
name|list
control|)
block|{
if|if
condition|(
name|member
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add prefix of child to given list.  The added prefix will be equal to    * ancestor plus one directory past ancestor.  e.g.:    * if ancestor is "/a/b/c" and child is "/a/b/c/d/e/file" then "a/b/c/d" is    * added to list.    * @param prefixes list to add to    * @param ancestor path we are listing in    * @param child full path to get prefix from    */
DECL|method|addPrefixIfNotPresent (List<String> prefixes, String ancestor, String child)
specifier|private
name|void
name|addPrefixIfNotPresent
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|prefixes
parameter_list|,
name|String
name|ancestor
parameter_list|,
name|String
name|child
parameter_list|)
block|{
name|Path
name|prefixCandidate
init|=
operator|new
name|Path
argument_list|(
name|child
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|ancestorPath
init|=
operator|new
name|Path
argument_list|(
name|ancestor
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|child
operator|.
name|startsWith
argument_list|(
name|ancestor
argument_list|)
argument_list|,
literal|"%s does not "
operator|+
literal|"start with %s"
argument_list|,
name|child
argument_list|,
name|ancestor
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|prefixCandidate
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|Path
name|nextParent
init|=
name|prefixCandidate
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextParent
operator|.
name|equals
argument_list|(
name|ancestorPath
argument_list|)
condition|)
block|{
name|String
name|prefix
init|=
name|prefixCandidate
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prefixes
operator|.
name|contains
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|prefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|prefixCandidate
operator|=
name|nextParent
expr_stmt|;
block|}
block|}
comment|/**    * Checks that the parent key is an ancestor of the child key.    * @param parent key that may be the parent.    * @param child key that may be the child.    * @param recursive if false, only return true for direct children.  If    *                  true, any descendant will count.    * @return true if parent is an ancestor of child    */
DECL|method|isDescendant (String parent, String child, boolean recursive)
specifier|private
name|boolean
name|isDescendant
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|child
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
if|if
condition|(
name|recursive
condition|)
block|{
if|if
condition|(
operator|!
name|parent
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|parent
operator|=
name|parent
operator|+
literal|"/"
expr_stmt|;
block|}
return|return
name|child
operator|.
name|startsWith
argument_list|(
name|parent
argument_list|)
return|;
block|}
else|else
block|{
name|Path
name|actualParentPath
init|=
operator|new
name|Path
argument_list|(
name|child
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|expectedParentPath
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|actualParentPath
operator|.
name|equals
argument_list|(
name|expectedParentPath
argument_list|)
return|;
block|}
block|}
comment|/**    * Simulate eventual consistency of delete for this list operation:  Any    * recently-deleted keys will be added.    * @param request List request    * @param rawListing listing returned from underlying S3    * @return listing with recently-deleted items restored    */
DECL|method|restoreListObjects (ListObjectsRequest request, ObjectListing rawListing)
specifier|private
name|ObjectListing
name|restoreListObjects
parameter_list|(
name|ListObjectsRequest
name|request
parameter_list|,
name|ObjectListing
name|rawListing
parameter_list|)
block|{
name|List
argument_list|<
name|S3ObjectSummary
argument_list|>
name|outputList
init|=
name|rawListing
operator|.
name|getObjectSummaries
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outputPrefixes
init|=
name|rawListing
operator|.
name|getCommonPrefixes
argument_list|()
decl_stmt|;
comment|// recursive list has no delimiter, returns everything that matches a
comment|// prefix.
name|boolean
name|recursiveObjectList
init|=
operator|!
operator|(
literal|"/"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getDelimiter
argument_list|()
argument_list|)
operator|)
decl_stmt|;
comment|// Go through all deleted keys
for|for
control|(
name|String
name|key
range|:
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|delayedDeletes
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|Delete
name|delete
init|=
name|delayedDeletes
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|isKeyDelayed
argument_list|(
name|delete
operator|.
name|time
argument_list|()
argument_list|,
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|isDescendant
argument_list|(
name|request
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|key
argument_list|,
name|recursiveObjectList
argument_list|)
condition|)
block|{
if|if
condition|(
name|delete
operator|.
name|summary
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addSummaryIfNotPresent
argument_list|(
name|outputList
argument_list|,
name|delete
operator|.
name|summary
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Non-recursive list has delimiter: will return rolled-up prefixes for
comment|// all keys that are not direct children
if|if
condition|(
operator|!
name|recursiveObjectList
condition|)
block|{
if|if
condition|(
name|isDescendant
argument_list|(
name|request
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|addPrefixIfNotPresent
argument_list|(
name|outputPrefixes
argument_list|,
name|request
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Clean up any expired entries
name|delayedDeletes
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CustomObjectListing
argument_list|(
name|rawListing
argument_list|,
name|outputList
argument_list|,
name|outputPrefixes
argument_list|)
return|;
block|}
DECL|method|filterListObjects (ListObjectsRequest request, ObjectListing rawListing)
specifier|private
name|ObjectListing
name|filterListObjects
parameter_list|(
name|ListObjectsRequest
name|request
parameter_list|,
name|ObjectListing
name|rawListing
parameter_list|)
block|{
comment|// Filter object listing
name|List
argument_list|<
name|S3ObjectSummary
argument_list|>
name|outputList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|S3ObjectSummary
name|s
range|:
name|rawListing
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|s
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isKeyDelayed
argument_list|(
name|delayedPutKeys
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|key
argument_list|)
condition|)
block|{
name|outputList
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Filter prefixes (directories)
name|List
argument_list|<
name|String
argument_list|>
name|outputPrefixes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|rawListing
operator|.
name|getCommonPrefixes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isKeyDelayed
argument_list|(
name|delayedPutKeys
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|key
argument_list|)
condition|)
block|{
name|outputPrefixes
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CustomObjectListing
argument_list|(
name|rawListing
argument_list|,
name|outputList
argument_list|,
name|outputPrefixes
argument_list|)
return|;
block|}
DECL|method|isKeyDelayed (Long enqueueTime, String key)
specifier|private
name|boolean
name|isKeyDelayed
parameter_list|(
name|Long
name|enqueueTime
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|enqueueTime
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"no delay for key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|deadline
init|=
name|enqueueTime
operator|+
name|delayKeyMsec
decl_stmt|;
if|if
condition|(
name|currentTime
operator|>=
name|deadline
condition|)
block|{
name|delayedDeletes
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"no longer delaying {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"delaying {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|registerDeleteObject (String key, String bucket)
specifier|private
name|void
name|registerDeleteObject
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|bucket
parameter_list|)
block|{
if|if
condition|(
name|shouldDelay
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// Record summary so we can add it back for some time post-deletion
name|S3ObjectSummary
name|summary
init|=
literal|null
decl_stmt|;
name|ObjectListing
name|list
init|=
name|listObjects
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|S3ObjectSummary
name|result
range|:
name|list
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
if|if
condition|(
name|result
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|summary
operator|=
name|result
expr_stmt|;
break|break;
block|}
block|}
name|delayedDeletes
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Delete
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|summary
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|registerPutObject (PutObjectRequest req)
specifier|private
name|void
name|registerPutObject
parameter_list|(
name|PutObjectRequest
name|req
parameter_list|)
block|{
name|String
name|key
init|=
name|req
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldDelay
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|enqueueDelayedPut
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Should we delay listing visibility for this key?    * @param key key which is being put    * @return true if we should delay    */
DECL|method|shouldDelay (String key)
specifier|private
name|boolean
name|shouldDelay
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|boolean
name|delay
init|=
name|key
operator|.
name|contains
argument_list|(
name|delayKeySubstring
argument_list|)
decl_stmt|;
name|delay
operator|=
name|delay
operator|&&
name|trueWithProbability
argument_list|(
name|delayKeyProbability
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} -> {}"
argument_list|,
name|key
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|delay
return|;
block|}
DECL|method|trueWithProbability (float p)
specifier|private
name|boolean
name|trueWithProbability
parameter_list|(
name|float
name|p
parameter_list|)
block|{
return|return
name|Math
operator|.
name|random
argument_list|()
operator|<
name|p
return|;
block|}
comment|/**    * Record this key as something that should not become visible in    * listObject replies for a while, to simulate eventual list consistency.    * @param key key to delay visibility of    */
DECL|method|enqueueDelayedPut (String key)
specifier|private
name|void
name|enqueueDelayedPut
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"delaying put of {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|delayedPutKeys
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Since ObjectListing is immutable, we just override it with wrapper. */
DECL|class|CustomObjectListing
specifier|private
specifier|static
class|class
name|CustomObjectListing
extends|extends
name|ObjectListing
block|{
DECL|field|customListing
specifier|private
specifier|final
name|List
argument_list|<
name|S3ObjectSummary
argument_list|>
name|customListing
decl_stmt|;
DECL|field|customPrefixes
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|customPrefixes
decl_stmt|;
DECL|method|CustomObjectListing (ObjectListing rawListing, List<S3ObjectSummary> customListing, List<String> customPrefixes)
name|CustomObjectListing
parameter_list|(
name|ObjectListing
name|rawListing
parameter_list|,
name|List
argument_list|<
name|S3ObjectSummary
argument_list|>
name|customListing
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|customPrefixes
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|customListing
operator|=
name|customListing
expr_stmt|;
name|this
operator|.
name|customPrefixes
operator|=
name|customPrefixes
expr_stmt|;
name|this
operator|.
name|setBucketName
argument_list|(
name|rawListing
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setCommonPrefixes
argument_list|(
name|rawListing
operator|.
name|getCommonPrefixes
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setDelimiter
argument_list|(
name|rawListing
operator|.
name|getDelimiter
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setEncodingType
argument_list|(
name|rawListing
operator|.
name|getEncodingType
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMarker
argument_list|(
name|rawListing
operator|.
name|getMarker
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMaxKeys
argument_list|(
name|rawListing
operator|.
name|getMaxKeys
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setNextMarker
argument_list|(
name|rawListing
operator|.
name|getNextMarker
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setPrefix
argument_list|(
name|rawListing
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTruncated
argument_list|(
name|rawListing
operator|.
name|isTruncated
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getObjectSummaries ()
specifier|public
name|List
argument_list|<
name|S3ObjectSummary
argument_list|>
name|getObjectSummaries
parameter_list|()
block|{
return|return
name|customListing
return|;
block|}
annotation|@
name|Override
DECL|method|getCommonPrefixes ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCommonPrefixes
parameter_list|()
block|{
return|return
name|customPrefixes
return|;
block|}
block|}
block|}
end_class

end_unit

