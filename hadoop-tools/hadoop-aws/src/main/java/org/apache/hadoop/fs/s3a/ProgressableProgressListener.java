begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|event
operator|.
name|ProgressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|event
operator|.
name|ProgressEventType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|event
operator|.
name|ProgressListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|Upload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|amazonaws
operator|.
name|event
operator|.
name|ProgressEventType
operator|.
name|TRANSFER_COMPLETED_EVENT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|amazonaws
operator|.
name|event
operator|.
name|ProgressEventType
operator|.
name|TRANSFER_PART_STARTED_EVENT
import|;
end_import

begin_comment
comment|/**  * Listener to progress from AWS regarding transfers.  */
end_comment

begin_class
DECL|class|ProgressableProgressListener
specifier|public
class|class
name|ProgressableProgressListener
implements|implements
name|ProgressListener
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|S3AFileSystem
operator|.
name|LOG
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|S3AFileSystem
name|fs
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|progress
specifier|private
specifier|final
name|Progressable
name|progress
decl_stmt|;
DECL|field|lastBytesTransferred
specifier|private
name|long
name|lastBytesTransferred
decl_stmt|;
DECL|field|upload
specifier|private
specifier|final
name|Upload
name|upload
decl_stmt|;
comment|/**    * Instantiate.    * @param fs filesystem: will be invoked with statistics updates    * @param key key for the upload    * @param upload source of events    * @param progress optional callback for progress.    */
DECL|method|ProgressableProgressListener (S3AFileSystem fs, String key, Upload upload, Progressable progress)
specifier|public
name|ProgressableProgressListener
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|String
name|key
parameter_list|,
name|Upload
name|upload
parameter_list|,
name|Progressable
name|progress
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|upload
operator|=
name|upload
expr_stmt|;
name|this
operator|.
name|progress
operator|=
name|progress
expr_stmt|;
name|this
operator|.
name|lastBytesTransferred
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|progressChanged (ProgressEvent progressEvent)
specifier|public
name|void
name|progressChanged
parameter_list|(
name|ProgressEvent
name|progressEvent
parameter_list|)
block|{
if|if
condition|(
name|progress
operator|!=
literal|null
condition|)
block|{
name|progress
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
comment|// There are 3 http ops here, but this should be close enough for now
name|ProgressEventType
name|pet
init|=
name|progressEvent
operator|.
name|getEventType
argument_list|()
decl_stmt|;
if|if
condition|(
name|pet
operator|==
name|TRANSFER_PART_STARTED_EVENT
operator|||
name|pet
operator|==
name|TRANSFER_COMPLETED_EVENT
condition|)
block|{
name|fs
operator|.
name|incrementWriteOperations
argument_list|()
expr_stmt|;
block|}
name|long
name|transferred
init|=
name|upload
operator|.
name|getProgress
argument_list|()
operator|.
name|getBytesTransferred
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|transferred
operator|-
name|lastBytesTransferred
decl_stmt|;
name|fs
operator|.
name|incrementPutProgressStatistics
argument_list|(
name|key
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|lastBytesTransferred
operator|=
name|transferred
expr_stmt|;
block|}
comment|/**    * Method to invoke after upload has completed.    * This can handle race conditions in setup/teardown.    * @return the number of bytes which were transferred after the notification    */
DECL|method|uploadCompleted ()
specifier|public
name|long
name|uploadCompleted
parameter_list|()
block|{
name|long
name|delta
init|=
name|upload
operator|.
name|getProgress
argument_list|()
operator|.
name|getBytesTransferred
argument_list|()
operator|-
name|lastBytesTransferred
decl_stmt|;
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"S3A write delta changed after finished: {} bytes"
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|fs
operator|.
name|incrementPutProgressStatistics
argument_list|(
name|key
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
return|return
name|delta
return|;
block|}
block|}
end_class

end_unit

