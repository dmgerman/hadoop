begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|magic
operator|.
name|MagicCommitTracker
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|MagicCommitPaths
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Adds the code needed for S3A to support magic committers.  * It's pulled out to keep S3A FS class slightly less complex.  * This class can be instantiated even when magic commit is disabled;  * in this case:  *<ol>  *<li>{@link #isMagicCommitPath(Path)} will always return false.</li>  *<li>{@link #createTracker(Path, String)} will always return an instance  *   of {@link PutTracker}.</li>  *</ol>  *  *<p>Important</p>: must not directly or indirectly import a class which  * uses any datatype in hadoop-mapreduce.  */
end_comment

begin_class
DECL|class|MagicCommitIntegration
specifier|public
class|class
name|MagicCommitIntegration
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MagicCommitIntegration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|owner
specifier|private
specifier|final
name|S3AFileSystem
name|owner
decl_stmt|;
DECL|field|magicCommitEnabled
specifier|private
specifier|final
name|boolean
name|magicCommitEnabled
decl_stmt|;
comment|/**    * Instantiate.    * @param owner owner class    * @param magicCommitEnabled is magic commit enabled.    */
DECL|method|MagicCommitIntegration (S3AFileSystem owner, boolean magicCommitEnabled)
specifier|public
name|MagicCommitIntegration
parameter_list|(
name|S3AFileSystem
name|owner
parameter_list|,
name|boolean
name|magicCommitEnabled
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|magicCommitEnabled
operator|=
name|magicCommitEnabled
expr_stmt|;
block|}
comment|/**    * Given an (elements, key) pair, return the key of the final destination of    * the PUT, that is: where the final path is expected to go?    * @param elements path split to elements    * @param key key    * @return key for final put. If this is not a magic commit, the    * same as the key in.    */
DECL|method|keyOfFinalDestination (List<String> elements, String key)
specifier|public
name|String
name|keyOfFinalDestination
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|isMagicCommitPath
argument_list|(
name|elements
argument_list|)
condition|)
block|{
return|return
name|elementsToKey
argument_list|(
name|finalDestination
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
comment|/**    * Given a path and a key to that same path, create a tracker for it.    * This specific tracker will be chosen based on whether or not    * the path is a magic one.    * @param path path of nominal write    * @param key key of path of nominal write    * @return the tracker for this operation.    */
DECL|method|createTracker (Path path, String key)
specifier|public
name|PutTracker
name|createTracker
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|key
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
name|splitPathToElements
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|PutTracker
name|tracker
decl_stmt|;
if|if
condition|(
name|isMagicFile
argument_list|(
name|elements
argument_list|)
condition|)
block|{
comment|// path is of a magic file
if|if
condition|(
name|isMagicCommitPath
argument_list|(
name|elements
argument_list|)
condition|)
block|{
specifier|final
name|String
name|destKey
init|=
name|keyOfFinalDestination
argument_list|(
name|elements
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|String
name|pendingsetPath
init|=
name|key
operator|+
name|CommitConstants
operator|.
name|PENDING_SUFFIX
decl_stmt|;
name|owner
operator|.
name|getInstrumentation
argument_list|()
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|COMMITTER_MAGIC_FILES_CREATED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tracker
operator|=
operator|new
name|MagicCommitTracker
argument_list|(
name|path
argument_list|,
name|owner
operator|.
name|getBucket
argument_list|()
argument_list|,
name|key
argument_list|,
name|destKey
argument_list|,
name|pendingsetPath
argument_list|,
name|owner
operator|.
name|getWriteOperationHelper
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created {}"
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File being created has a \"magic\" path, but the filesystem"
operator|+
literal|" has magic file support disabled: {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// downgrade to standard multipart tracking
name|tracker
operator|=
operator|new
name|PutTracker
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// standard multipart tracking
name|tracker
operator|=
operator|new
name|PutTracker
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|tracker
return|;
block|}
comment|/**    * This performs the calculation of the final destination of a set    * of elements.    *    * @param elements original (do not edit after this call)    * @return a list of elements, possibly empty    */
DECL|method|finalDestination (List<String> elements)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|finalDestination
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|magicCommitEnabled
condition|?
name|MagicCommitPaths
operator|.
name|finalDestination
argument_list|(
name|elements
argument_list|)
else|:
name|elements
return|;
block|}
comment|/**    * Is magic commit enabled?    * @return true if magic commit is turned on.    */
DECL|method|isMagicCommitEnabled ()
specifier|public
name|boolean
name|isMagicCommitEnabled
parameter_list|()
block|{
return|return
name|magicCommitEnabled
return|;
block|}
comment|/**    * Predicate: is a path a magic commit path?    * @param path path to examine    * @return true if the path is or is under a magic directory    */
DECL|method|isMagicCommitPath (Path path)
specifier|public
name|boolean
name|isMagicCommitPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|isMagicCommitPath
argument_list|(
name|splitPathToElements
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Is this path a magic commit path in this filesystem?    * True if magic commit is enabled, the path is magic    * and the path is not actually a commit metadata file.    * @param elements element list    * @return true if writing path is to be uprated to a magic file write    */
DECL|method|isMagicCommitPath (List<String> elements)
specifier|private
name|boolean
name|isMagicCommitPath
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|magicCommitEnabled
operator|&&
name|isMagicFile
argument_list|(
name|elements
argument_list|)
return|;
block|}
comment|/**    * Is the file a magic file: this predicate doesn't check    * for the FS actually having the magic bit being set.    * @param elements path elements    * @return true if the path is one a magic file write expects.    */
DECL|method|isMagicFile (List<String> elements)
specifier|private
name|boolean
name|isMagicFile
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|isMagicPath
argument_list|(
name|elements
argument_list|)
operator|&&
operator|!
name|isCommitMetadataFile
argument_list|(
name|elements
argument_list|)
return|;
block|}
comment|/**    * Does this file contain all the commit metadata?    * @param elements path element list    * @return true if this file is one of the commit metadata files.    */
DECL|method|isCommitMetadataFile (List<String> elements)
specifier|private
name|boolean
name|isCommitMetadataFile
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
name|String
name|last
init|=
name|elements
operator|.
name|get
argument_list|(
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|last
operator|.
name|endsWith
argument_list|(
name|CommitConstants
operator|.
name|PENDING_SUFFIX
argument_list|)
operator|||
name|last
operator|.
name|endsWith
argument_list|(
name|CommitConstants
operator|.
name|PENDINGSET_SUFFIX
argument_list|)
return|;
block|}
block|}
end_class

end_unit

