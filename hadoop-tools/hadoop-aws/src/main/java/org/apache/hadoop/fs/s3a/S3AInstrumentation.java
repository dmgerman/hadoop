begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricStringBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsSystemImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableQuantiles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Statistic
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Instrumentation of S3a.  * Derived from the {@code AzureFileSystemInstrumentation}.  *  * Counters and metrics are generally addressed in code by their name or  * {@link Statistic} key. There<i>may</i> be some Statistics which do  * not have an entry here. To avoid attempts to access such counters failing,  * the operations to increment/query metric values are designed to handle  * lookup failures.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|S3AInstrumentation
specifier|public
class|class
name|S3AInstrumentation
implements|implements
name|Closeable
implements|,
name|MetricsSource
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3AInstrumentation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|METRICS_SOURCE_BASENAME
specifier|private
specifier|static
specifier|final
name|String
name|METRICS_SOURCE_BASENAME
init|=
literal|"S3AMetrics"
decl_stmt|;
comment|/**    * {@value #METRICS_SYSTEM_NAME} The name of the s3a-specific metrics    * system instance used for s3a metrics.    */
DECL|field|METRICS_SYSTEM_NAME
specifier|public
specifier|static
specifier|final
name|String
name|METRICS_SYSTEM_NAME
init|=
literal|"s3a-file-system"
decl_stmt|;
comment|/**    * {@value #CONTEXT} Currently all s3a metrics are placed in a single    * "context". Distinct contexts may be used in the future.    */
DECL|field|CONTEXT
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT
init|=
literal|"s3aFileSystem"
decl_stmt|;
comment|/**    * {@value #METRIC_TAG_FILESYSTEM_ID} The name of a field added to metrics    * records that uniquely identifies a specific FileSystem instance.    */
DECL|field|METRIC_TAG_FILESYSTEM_ID
specifier|public
specifier|static
specifier|final
name|String
name|METRIC_TAG_FILESYSTEM_ID
init|=
literal|"s3aFileSystemId"
decl_stmt|;
comment|/**    * {@value #METRIC_TAG_BUCKET} The name of a field added to metrics records    * that indicates the hostname portion of the FS URL.    */
DECL|field|METRIC_TAG_BUCKET
specifier|public
specifier|static
specifier|final
name|String
name|METRIC_TAG_BUCKET
init|=
literal|"bucket"
decl_stmt|;
comment|// metricsSystemLock must be used to synchronize modifications to
comment|// metricsSystem and the following counters.
DECL|field|metricsSystemLock
specifier|private
specifier|static
name|Object
name|metricsSystemLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|metricsSystem
specifier|private
specifier|static
name|MetricsSystem
name|metricsSystem
init|=
literal|null
decl_stmt|;
DECL|field|metricsSourceNameCounter
specifier|private
specifier|static
name|int
name|metricsSourceNameCounter
init|=
literal|0
decl_stmt|;
DECL|field|metricsSourceActiveCounter
specifier|private
specifier|static
name|int
name|metricsSourceActiveCounter
init|=
literal|0
decl_stmt|;
DECL|field|metricsSourceName
specifier|private
name|String
name|metricsSourceName
decl_stmt|;
DECL|field|registry
specifier|private
specifier|final
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"s3aFileSystem"
argument_list|)
operator|.
name|setContext
argument_list|(
name|CONTEXT
argument_list|)
decl_stmt|;
DECL|field|streamOpenOperations
specifier|private
specifier|final
name|MutableCounterLong
name|streamOpenOperations
decl_stmt|;
DECL|field|streamCloseOperations
specifier|private
specifier|final
name|MutableCounterLong
name|streamCloseOperations
decl_stmt|;
DECL|field|streamClosed
specifier|private
specifier|final
name|MutableCounterLong
name|streamClosed
decl_stmt|;
DECL|field|streamAborted
specifier|private
specifier|final
name|MutableCounterLong
name|streamAborted
decl_stmt|;
DECL|field|streamSeekOperations
specifier|private
specifier|final
name|MutableCounterLong
name|streamSeekOperations
decl_stmt|;
DECL|field|streamReadExceptions
specifier|private
specifier|final
name|MutableCounterLong
name|streamReadExceptions
decl_stmt|;
DECL|field|streamForwardSeekOperations
specifier|private
specifier|final
name|MutableCounterLong
name|streamForwardSeekOperations
decl_stmt|;
DECL|field|streamBackwardSeekOperations
specifier|private
specifier|final
name|MutableCounterLong
name|streamBackwardSeekOperations
decl_stmt|;
DECL|field|streamBytesSkippedOnSeek
specifier|private
specifier|final
name|MutableCounterLong
name|streamBytesSkippedOnSeek
decl_stmt|;
DECL|field|streamBytesBackwardsOnSeek
specifier|private
specifier|final
name|MutableCounterLong
name|streamBytesBackwardsOnSeek
decl_stmt|;
DECL|field|streamBytesRead
specifier|private
specifier|final
name|MutableCounterLong
name|streamBytesRead
decl_stmt|;
DECL|field|streamReadOperations
specifier|private
specifier|final
name|MutableCounterLong
name|streamReadOperations
decl_stmt|;
DECL|field|streamReadFullyOperations
specifier|private
specifier|final
name|MutableCounterLong
name|streamReadFullyOperations
decl_stmt|;
DECL|field|streamReadsIncomplete
specifier|private
specifier|final
name|MutableCounterLong
name|streamReadsIncomplete
decl_stmt|;
DECL|field|streamBytesReadInClose
specifier|private
specifier|final
name|MutableCounterLong
name|streamBytesReadInClose
decl_stmt|;
DECL|field|streamBytesDiscardedInAbort
specifier|private
specifier|final
name|MutableCounterLong
name|streamBytesDiscardedInAbort
decl_stmt|;
DECL|field|ignoredErrors
specifier|private
specifier|final
name|MutableCounterLong
name|ignoredErrors
decl_stmt|;
DECL|field|numberOfFilesCreated
specifier|private
specifier|final
name|MutableCounterLong
name|numberOfFilesCreated
decl_stmt|;
DECL|field|numberOfFilesCopied
specifier|private
specifier|final
name|MutableCounterLong
name|numberOfFilesCopied
decl_stmt|;
DECL|field|bytesOfFilesCopied
specifier|private
specifier|final
name|MutableCounterLong
name|bytesOfFilesCopied
decl_stmt|;
DECL|field|numberOfFilesDeleted
specifier|private
specifier|final
name|MutableCounterLong
name|numberOfFilesDeleted
decl_stmt|;
DECL|field|numberOfFakeDirectoryDeletes
specifier|private
specifier|final
name|MutableCounterLong
name|numberOfFakeDirectoryDeletes
decl_stmt|;
DECL|field|numberOfDirectoriesCreated
specifier|private
specifier|final
name|MutableCounterLong
name|numberOfDirectoriesCreated
decl_stmt|;
DECL|field|numberOfDirectoriesDeleted
specifier|private
specifier|final
name|MutableCounterLong
name|numberOfDirectoriesDeleted
decl_stmt|;
comment|/** Instantiate this without caring whether or not S3Guard is enabled. */
DECL|field|s3GuardInstrumentation
specifier|private
specifier|final
name|S3GuardInstrumentation
name|s3GuardInstrumentation
init|=
operator|new
name|S3GuardInstrumentation
argument_list|()
decl_stmt|;
DECL|field|COUNTERS_TO_CREATE
specifier|private
specifier|static
specifier|final
name|Statistic
index|[]
name|COUNTERS_TO_CREATE
init|=
block|{
name|INVOCATION_COPY_FROM_LOCAL_FILE
block|,
name|INVOCATION_CREATE
block|,
name|INVOCATION_CREATE_NON_RECURSIVE
block|,
name|INVOCATION_DELETE
block|,
name|INVOCATION_EXISTS
block|,
name|INVOCATION_GET_DELEGATION_TOKEN
block|,
name|INVOCATION_GET_FILE_CHECKSUM
block|,
name|INVOCATION_GET_FILE_STATUS
block|,
name|INVOCATION_GLOB_STATUS
block|,
name|INVOCATION_IS_DIRECTORY
block|,
name|INVOCATION_IS_FILE
block|,
name|INVOCATION_LIST_FILES
block|,
name|INVOCATION_LIST_LOCATED_STATUS
block|,
name|INVOCATION_LIST_STATUS
block|,
name|INVOCATION_MKDIRS
block|,
name|INVOCATION_OPEN
block|,
name|INVOCATION_RENAME
block|,
name|OBJECT_COPY_REQUESTS
block|,
name|OBJECT_DELETE_REQUESTS
block|,
name|OBJECT_LIST_REQUESTS
block|,
name|OBJECT_CONTINUE_LIST_REQUESTS
block|,
name|OBJECT_METADATA_REQUESTS
block|,
name|OBJECT_MULTIPART_UPLOAD_ABORTED
block|,
name|OBJECT_PUT_BYTES
block|,
name|OBJECT_PUT_REQUESTS
block|,
name|OBJECT_PUT_REQUESTS_COMPLETED
block|,
name|STREAM_WRITE_FAILURES
block|,
name|STREAM_WRITE_BLOCK_UPLOADS
block|,
name|STREAM_WRITE_BLOCK_UPLOADS_COMMITTED
block|,
name|STREAM_WRITE_BLOCK_UPLOADS_ABORTED
block|,
name|STREAM_WRITE_TOTAL_TIME
block|,
name|STREAM_WRITE_TOTAL_DATA
block|,
name|COMMITTER_COMMITS_CREATED
block|,
name|COMMITTER_COMMITS_COMPLETED
block|,
name|COMMITTER_JOBS_SUCCEEDED
block|,
name|COMMITTER_JOBS_FAILED
block|,
name|COMMITTER_TASKS_SUCCEEDED
block|,
name|COMMITTER_TASKS_FAILED
block|,
name|COMMITTER_BYTES_COMMITTED
block|,
name|COMMITTER_BYTES_UPLOADED
block|,
name|COMMITTER_COMMITS_FAILED
block|,
name|COMMITTER_COMMITS_ABORTED
block|,
name|COMMITTER_COMMITS_REVERTED
block|,
name|COMMITTER_MAGIC_FILES_CREATED
block|,
name|S3GUARD_METADATASTORE_PUT_PATH_REQUEST
block|,
name|S3GUARD_METADATASTORE_INITIALIZATION
block|,
name|S3GUARD_METADATASTORE_RETRY
block|,
name|S3GUARD_METADATASTORE_THROTTLED
block|,
name|STORE_IO_THROTTLED
block|,
name|DELEGATION_TOKENS_ISSUED
block|}
decl_stmt|;
DECL|field|GAUGES_TO_CREATE
specifier|private
specifier|static
specifier|final
name|Statistic
index|[]
name|GAUGES_TO_CREATE
init|=
block|{
name|OBJECT_PUT_REQUESTS_ACTIVE
block|,
name|OBJECT_PUT_BYTES_PENDING
block|,
name|STREAM_WRITE_BLOCK_UPLOADS_ACTIVE
block|,
name|STREAM_WRITE_BLOCK_UPLOADS_PENDING
block|,
name|STREAM_WRITE_BLOCK_UPLOADS_DATA_PENDING
block|,   }
decl_stmt|;
DECL|method|S3AInstrumentation (URI name)
specifier|public
name|S3AInstrumentation
parameter_list|(
name|URI
name|name
parameter_list|)
block|{
name|UUID
name|fileSystemInstanceId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|registry
operator|.
name|tag
argument_list|(
name|METRIC_TAG_FILESYSTEM_ID
argument_list|,
literal|"A unique identifier for the instance"
argument_list|,
name|fileSystemInstanceId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|tag
argument_list|(
name|METRIC_TAG_BUCKET
argument_list|,
literal|"Hostname from the FS URL"
argument_list|,
name|name
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|streamOpenOperations
operator|=
name|counter
argument_list|(
name|STREAM_OPENED
argument_list|)
expr_stmt|;
name|streamCloseOperations
operator|=
name|counter
argument_list|(
name|STREAM_CLOSE_OPERATIONS
argument_list|)
expr_stmt|;
name|streamClosed
operator|=
name|counter
argument_list|(
name|STREAM_CLOSED
argument_list|)
expr_stmt|;
name|streamAborted
operator|=
name|counter
argument_list|(
name|STREAM_ABORTED
argument_list|)
expr_stmt|;
name|streamSeekOperations
operator|=
name|counter
argument_list|(
name|STREAM_SEEK_OPERATIONS
argument_list|)
expr_stmt|;
name|streamReadExceptions
operator|=
name|counter
argument_list|(
name|STREAM_READ_EXCEPTIONS
argument_list|)
expr_stmt|;
name|streamForwardSeekOperations
operator|=
name|counter
argument_list|(
name|STREAM_FORWARD_SEEK_OPERATIONS
argument_list|)
expr_stmt|;
name|streamBackwardSeekOperations
operator|=
name|counter
argument_list|(
name|STREAM_BACKWARD_SEEK_OPERATIONS
argument_list|)
expr_stmt|;
name|streamBytesSkippedOnSeek
operator|=
name|counter
argument_list|(
name|STREAM_SEEK_BYTES_SKIPPED
argument_list|)
expr_stmt|;
name|streamBytesBackwardsOnSeek
operator|=
name|counter
argument_list|(
name|STREAM_SEEK_BYTES_BACKWARDS
argument_list|)
expr_stmt|;
name|streamBytesRead
operator|=
name|counter
argument_list|(
name|STREAM_SEEK_BYTES_READ
argument_list|)
expr_stmt|;
name|streamReadOperations
operator|=
name|counter
argument_list|(
name|STREAM_READ_OPERATIONS
argument_list|)
expr_stmt|;
name|streamReadFullyOperations
operator|=
name|counter
argument_list|(
name|STREAM_READ_FULLY_OPERATIONS
argument_list|)
expr_stmt|;
name|streamReadsIncomplete
operator|=
name|counter
argument_list|(
name|STREAM_READ_OPERATIONS_INCOMPLETE
argument_list|)
expr_stmt|;
name|streamBytesReadInClose
operator|=
name|counter
argument_list|(
name|STREAM_CLOSE_BYTES_READ
argument_list|)
expr_stmt|;
name|streamBytesDiscardedInAbort
operator|=
name|counter
argument_list|(
name|STREAM_ABORT_BYTES_DISCARDED
argument_list|)
expr_stmt|;
name|numberOfFilesCreated
operator|=
name|counter
argument_list|(
name|FILES_CREATED
argument_list|)
expr_stmt|;
name|numberOfFilesCopied
operator|=
name|counter
argument_list|(
name|FILES_COPIED
argument_list|)
expr_stmt|;
name|bytesOfFilesCopied
operator|=
name|counter
argument_list|(
name|FILES_COPIED_BYTES
argument_list|)
expr_stmt|;
name|numberOfFilesDeleted
operator|=
name|counter
argument_list|(
name|FILES_DELETED
argument_list|)
expr_stmt|;
name|numberOfFakeDirectoryDeletes
operator|=
name|counter
argument_list|(
name|FAKE_DIRECTORIES_DELETED
argument_list|)
expr_stmt|;
name|numberOfDirectoriesCreated
operator|=
name|counter
argument_list|(
name|DIRECTORIES_CREATED
argument_list|)
expr_stmt|;
name|numberOfDirectoriesDeleted
operator|=
name|counter
argument_list|(
name|DIRECTORIES_DELETED
argument_list|)
expr_stmt|;
name|ignoredErrors
operator|=
name|counter
argument_list|(
name|IGNORED_ERRORS
argument_list|)
expr_stmt|;
for|for
control|(
name|Statistic
name|statistic
range|:
name|COUNTERS_TO_CREATE
control|)
block|{
name|counter
argument_list|(
name|statistic
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Statistic
name|statistic
range|:
name|GAUGES_TO_CREATE
control|)
block|{
name|gauge
argument_list|(
name|statistic
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|statistic
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//todo need a config for the quantiles interval?
name|int
name|interval
init|=
literal|1
decl_stmt|;
name|quantiles
argument_list|(
name|S3GUARD_METADATASTORE_PUT_PATH_LATENCY
argument_list|,
literal|"ops"
argument_list|,
literal|"latency"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|quantiles
argument_list|(
name|S3GUARD_METADATASTORE_THROTTLE_RATE
argument_list|,
literal|"events"
argument_list|,
literal|"frequency (Hz)"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|registerAsMetricsSource
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMetricsSystem ()
specifier|public
name|MetricsSystem
name|getMetricsSystem
parameter_list|()
block|{
synchronized|synchronized
init|(
name|metricsSystemLock
init|)
block|{
if|if
condition|(
name|metricsSystem
operator|==
literal|null
condition|)
block|{
name|metricsSystem
operator|=
operator|new
name|MetricsSystemImpl
argument_list|()
expr_stmt|;
name|metricsSystem
operator|.
name|init
argument_list|(
name|METRICS_SYSTEM_NAME
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metricsSystem
return|;
block|}
comment|/**    * Register this instance as a metrics source.    * @param name s3a:// URI for the associated FileSystem instance    */
DECL|method|registerAsMetricsSource (URI name)
specifier|private
name|void
name|registerAsMetricsSource
parameter_list|(
name|URI
name|name
parameter_list|)
block|{
name|int
name|number
decl_stmt|;
synchronized|synchronized
init|(
name|metricsSystemLock
init|)
block|{
name|getMetricsSystem
argument_list|()
expr_stmt|;
name|metricsSourceActiveCounter
operator|++
expr_stmt|;
name|number
operator|=
operator|++
name|metricsSourceNameCounter
expr_stmt|;
block|}
name|String
name|msName
init|=
name|METRICS_SOURCE_BASENAME
operator|+
name|number
decl_stmt|;
name|metricsSourceName
operator|=
name|msName
operator|+
literal|"-"
operator|+
name|name
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|metricsSystem
operator|.
name|register
argument_list|(
name|metricsSourceName
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a counter in the registry.    * @param name counter name    * @param desc counter description    * @return a new counter    */
DECL|method|counter (String name, String desc)
specifier|protected
specifier|final
name|MutableCounterLong
name|counter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
return|return
name|registry
operator|.
name|newCounter
argument_list|(
name|name
argument_list|,
name|desc
argument_list|,
literal|0L
argument_list|)
return|;
block|}
comment|/**    * Create a counter in the registry.    * @param op statistic to count    * @return a new counter    */
DECL|method|counter (Statistic op)
specifier|protected
specifier|final
name|MutableCounterLong
name|counter
parameter_list|(
name|Statistic
name|op
parameter_list|)
block|{
return|return
name|counter
argument_list|(
name|op
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|op
operator|.
name|getDescription
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a gauge in the registry.    * @param name name gauge name    * @param desc description    * @return the gauge    */
DECL|method|gauge (String name, String desc)
specifier|protected
specifier|final
name|MutableGaugeLong
name|gauge
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
return|return
name|registry
operator|.
name|newGauge
argument_list|(
name|name
argument_list|,
name|desc
argument_list|,
literal|0L
argument_list|)
return|;
block|}
comment|/**    * Create a quantiles in the registry.    * @param op  statistic to collect    * @param sampleName sample name of the quantiles    * @param valueName value name of the quantiles    * @param interval interval of the quantiles in seconds    * @return the created quantiles metric    */
DECL|method|quantiles (Statistic op, String sampleName, String valueName, int interval)
specifier|protected
specifier|final
name|MutableQuantiles
name|quantiles
parameter_list|(
name|Statistic
name|op
parameter_list|,
name|String
name|sampleName
parameter_list|,
name|String
name|valueName
parameter_list|,
name|int
name|interval
parameter_list|)
block|{
return|return
name|registry
operator|.
name|newQuantiles
argument_list|(
name|op
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|op
operator|.
name|getDescription
argument_list|()
argument_list|,
name|sampleName
argument_list|,
name|valueName
argument_list|,
name|interval
argument_list|)
return|;
block|}
comment|/**    * Get the metrics registry.    * @return the registry    */
DECL|method|getRegistry ()
specifier|public
name|MetricsRegistry
name|getRegistry
parameter_list|()
block|{
return|return
name|registry
return|;
block|}
comment|/**    * Dump all the metrics to a string.    * @param prefix prefix before every entry    * @param separator separator between name and value    * @param suffix suffix    * @param all get all the metrics even if the values are not changed.    * @return a string dump of the metrics    */
DECL|method|dump (String prefix, String separator, String suffix, boolean all)
specifier|public
name|String
name|dump
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|separator
parameter_list|,
name|String
name|suffix
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|MetricStringBuilder
name|metricBuilder
init|=
operator|new
name|MetricStringBuilder
argument_list|(
literal|null
argument_list|,
name|prefix
argument_list|,
name|separator
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|registry
operator|.
name|snapshot
argument_list|(
name|metricBuilder
argument_list|,
name|all
argument_list|)
expr_stmt|;
return|return
name|metricBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the value of a counter.    * @param statistic the operation    * @return its value, or 0 if not found.    */
DECL|method|getCounterValue (Statistic statistic)
specifier|public
name|long
name|getCounterValue
parameter_list|(
name|Statistic
name|statistic
parameter_list|)
block|{
return|return
name|getCounterValue
argument_list|(
name|statistic
operator|.
name|getSymbol
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the value of a counter.    * If the counter is null, return 0.    * @param name the name of the counter    * @return its value.    */
DECL|method|getCounterValue (String name)
specifier|public
name|long
name|getCounterValue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MutableCounterLong
name|counter
init|=
name|lookupCounter
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|counter
operator|==
literal|null
condition|?
literal|0
else|:
name|counter
operator|.
name|value
argument_list|()
return|;
block|}
comment|/**    * Lookup a counter by name. Return null if it is not known.    * @param name counter name    * @return the counter    * @throws IllegalStateException if the metric is not a counter    */
DECL|method|lookupCounter (String name)
specifier|private
name|MutableCounterLong
name|lookupCounter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MutableMetric
name|metric
init|=
name|lookupMetric
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|metric
operator|instanceof
name|MutableCounterLong
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Metric "
operator|+
name|name
operator|+
literal|" is not a MutableCounterLong: "
operator|+
name|metric
argument_list|)
throw|;
block|}
return|return
operator|(
name|MutableCounterLong
operator|)
name|metric
return|;
block|}
comment|/**    * Look up a gauge.    * @param name gauge name    * @return the gauge or null    * @throws ClassCastException if the metric is not a Gauge.    */
DECL|method|lookupGauge (String name)
specifier|public
name|MutableGaugeLong
name|lookupGauge
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MutableMetric
name|metric
init|=
name|lookupMetric
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No gauge {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|MutableGaugeLong
operator|)
name|metric
return|;
block|}
comment|/**    * Look up a quantiles.    * @param name quantiles name    * @return the quantiles or null    * @throws ClassCastException if the metric is not a Quantiles.    */
DECL|method|lookupQuantiles (String name)
specifier|public
name|MutableQuantiles
name|lookupQuantiles
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MutableMetric
name|metric
init|=
name|lookupMetric
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No quantiles {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|MutableQuantiles
operator|)
name|metric
return|;
block|}
comment|/**    * Look up a metric from both the registered set and the lighter weight    * stream entries.    * @param name metric name    * @return the metric or null    */
DECL|method|lookupMetric (String name)
specifier|public
name|MutableMetric
name|lookupMetric
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MutableMetric
name|metric
init|=
name|getRegistry
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|metric
return|;
block|}
comment|/**    * Indicate that S3A created a file.    */
DECL|method|fileCreated ()
specifier|public
name|void
name|fileCreated
parameter_list|()
block|{
name|numberOfFilesCreated
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
comment|/**    * Indicate that S3A deleted one or more files.    * @param count number of files.    */
DECL|method|fileDeleted (int count)
specifier|public
name|void
name|fileDeleted
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|numberOfFilesDeleted
operator|.
name|incr
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * Indicate that fake directory request was made.    * @param count number of directory entries included in the delete request.    */
DECL|method|fakeDirsDeleted (int count)
specifier|public
name|void
name|fakeDirsDeleted
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|numberOfFakeDirectoryDeletes
operator|.
name|incr
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * Indicate that S3A created a directory.    */
DECL|method|directoryCreated ()
specifier|public
name|void
name|directoryCreated
parameter_list|()
block|{
name|numberOfDirectoriesCreated
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
comment|/**    * Indicate that S3A just deleted a directory.    */
DECL|method|directoryDeleted ()
specifier|public
name|void
name|directoryDeleted
parameter_list|()
block|{
name|numberOfDirectoriesDeleted
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
comment|/**    * Indicate that S3A copied some files within the store.    *    * @param files number of files    * @param size total size in bytes    */
DECL|method|filesCopied (int files, long size)
specifier|public
name|void
name|filesCopied
parameter_list|(
name|int
name|files
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|numberOfFilesCopied
operator|.
name|incr
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|bytesOfFilesCopied
operator|.
name|incr
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Note that an error was ignored.    */
DECL|method|errorIgnored ()
specifier|public
name|void
name|errorIgnored
parameter_list|()
block|{
name|ignoredErrors
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
comment|/**    * Increment a specific counter.    * No-op if not defined.    * @param op operation    * @param count increment value    */
DECL|method|incrementCounter (Statistic op, long count)
specifier|public
name|void
name|incrementCounter
parameter_list|(
name|Statistic
name|op
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|MutableCounterLong
name|counter
init|=
name|lookupCounter
argument_list|(
name|op
operator|.
name|getSymbol
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|!=
literal|null
condition|)
block|{
name|counter
operator|.
name|incr
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a value to a quantiles statistic. No-op if the quantile    * isn't found.    * @param op operation to look up.    * @param value value to add.    * @throws ClassCastException if the metric is not a Quantiles.    */
DECL|method|addValueToQuantiles (Statistic op, long value)
specifier|public
name|void
name|addValueToQuantiles
parameter_list|(
name|Statistic
name|op
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|MutableQuantiles
name|quantiles
init|=
name|lookupQuantiles
argument_list|(
name|op
operator|.
name|getSymbol
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|quantiles
operator|!=
literal|null
condition|)
block|{
name|quantiles
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Increment a specific counter.    * No-op if not defined.    * @param op operation    * @param count atomic long containing value    */
DECL|method|incrementCounter (Statistic op, AtomicLong count)
specifier|public
name|void
name|incrementCounter
parameter_list|(
name|Statistic
name|op
parameter_list|,
name|AtomicLong
name|count
parameter_list|)
block|{
name|incrementCounter
argument_list|(
name|op
argument_list|,
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increment a specific gauge.    * No-op if not defined.    * @param op operation    * @param count increment value    * @throws ClassCastException if the metric is of the wrong type    */
DECL|method|incrementGauge (Statistic op, long count)
specifier|public
name|void
name|incrementGauge
parameter_list|(
name|Statistic
name|op
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|MutableGaugeLong
name|gauge
init|=
name|lookupGauge
argument_list|(
name|op
operator|.
name|getSymbol
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|gauge
operator|!=
literal|null
condition|)
block|{
name|gauge
operator|.
name|incr
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No Gauge: "
operator|+
name|op
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Decrement a specific gauge.    * No-op if not defined.    * @param op operation    * @param count increment value    * @throws ClassCastException if the metric is of the wrong type    */
DECL|method|decrementGauge (Statistic op, long count)
specifier|public
name|void
name|decrementGauge
parameter_list|(
name|Statistic
name|op
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|MutableGaugeLong
name|gauge
init|=
name|lookupGauge
argument_list|(
name|op
operator|.
name|getSymbol
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|gauge
operator|!=
literal|null
condition|)
block|{
name|gauge
operator|.
name|decr
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No Gauge: {}"
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a stream input statistics instance.    * @return the new instance    */
DECL|method|newInputStreamStatistics ()
name|InputStreamStatistics
name|newInputStreamStatistics
parameter_list|()
block|{
return|return
operator|new
name|InputStreamStatistics
argument_list|()
return|;
block|}
comment|/**    * Create a S3Guard instrumentation instance.    * There's likely to be at most one instance of this per FS instance.    * @return the S3Guard instrumentation point.    */
DECL|method|getS3GuardInstrumentation ()
specifier|public
name|S3GuardInstrumentation
name|getS3GuardInstrumentation
parameter_list|()
block|{
return|return
name|s3GuardInstrumentation
return|;
block|}
comment|/**    * Create a new instance of the committer statistics.    * @return a new committer statistics instance    */
DECL|method|newCommitterStatistics ()
name|CommitterStatistics
name|newCommitterStatistics
parameter_list|()
block|{
return|return
operator|new
name|CommitterStatistics
argument_list|()
return|;
block|}
comment|/**    * Merge in the statistics of a single input stream into    * the filesystem-wide statistics.    * @param statistics stream statistics    */
DECL|method|mergeInputStreamStatistics (InputStreamStatistics statistics)
specifier|private
name|void
name|mergeInputStreamStatistics
parameter_list|(
name|InputStreamStatistics
name|statistics
parameter_list|)
block|{
name|streamOpenOperations
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|openOperations
argument_list|)
expr_stmt|;
name|streamCloseOperations
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|closeOperations
argument_list|)
expr_stmt|;
name|streamClosed
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|closed
argument_list|)
expr_stmt|;
name|streamAborted
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|aborted
argument_list|)
expr_stmt|;
name|streamSeekOperations
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|seekOperations
argument_list|)
expr_stmt|;
name|streamReadExceptions
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|readExceptions
argument_list|)
expr_stmt|;
name|streamForwardSeekOperations
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|forwardSeekOperations
argument_list|)
expr_stmt|;
name|streamBytesSkippedOnSeek
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|bytesSkippedOnSeek
argument_list|)
expr_stmt|;
name|streamBackwardSeekOperations
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|backwardSeekOperations
argument_list|)
expr_stmt|;
name|streamBytesBackwardsOnSeek
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|bytesBackwardsOnSeek
argument_list|)
expr_stmt|;
name|streamBytesRead
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|bytesRead
argument_list|)
expr_stmt|;
name|streamReadOperations
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|readOperations
argument_list|)
expr_stmt|;
name|streamReadFullyOperations
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|readFullyOperations
argument_list|)
expr_stmt|;
name|streamReadsIncomplete
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|readsIncomplete
argument_list|)
expr_stmt|;
name|streamBytesReadInClose
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|bytesReadInClose
argument_list|)
expr_stmt|;
name|streamBytesDiscardedInAbort
operator|.
name|incr
argument_list|(
name|statistics
operator|.
name|bytesDiscardedInAbort
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector collector, boolean all)
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|registry
operator|.
name|snapshot
argument_list|(
name|collector
operator|.
name|addRecord
argument_list|(
name|registry
operator|.
name|info
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
synchronized|synchronized
init|(
name|metricsSystemLock
init|)
block|{
name|metricsSystem
operator|.
name|unregisterSource
argument_list|(
name|metricsSourceName
argument_list|)
expr_stmt|;
name|int
name|activeSources
init|=
operator|--
name|metricsSourceActiveCounter
decl_stmt|;
if|if
condition|(
name|activeSources
operator|==
literal|0
condition|)
block|{
name|metricsSystem
operator|.
name|publishMetricsNow
argument_list|()
expr_stmt|;
name|metricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|metricsSystem
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Statistics updated by an input stream during its actual operation.    * These counters not thread-safe and are for use in a single instance    * of a stream.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|InputStreamStatistics
specifier|public
specifier|final
class|class
name|InputStreamStatistics
implements|implements
name|AutoCloseable
block|{
DECL|field|openOperations
specifier|public
name|long
name|openOperations
decl_stmt|;
DECL|field|closeOperations
specifier|public
name|long
name|closeOperations
decl_stmt|;
DECL|field|closed
specifier|public
name|long
name|closed
decl_stmt|;
DECL|field|aborted
specifier|public
name|long
name|aborted
decl_stmt|;
DECL|field|seekOperations
specifier|public
name|long
name|seekOperations
decl_stmt|;
DECL|field|readExceptions
specifier|public
name|long
name|readExceptions
decl_stmt|;
DECL|field|forwardSeekOperations
specifier|public
name|long
name|forwardSeekOperations
decl_stmt|;
DECL|field|backwardSeekOperations
specifier|public
name|long
name|backwardSeekOperations
decl_stmt|;
DECL|field|bytesRead
specifier|public
name|long
name|bytesRead
decl_stmt|;
DECL|field|bytesSkippedOnSeek
specifier|public
name|long
name|bytesSkippedOnSeek
decl_stmt|;
DECL|field|bytesBackwardsOnSeek
specifier|public
name|long
name|bytesBackwardsOnSeek
decl_stmt|;
DECL|field|readOperations
specifier|public
name|long
name|readOperations
decl_stmt|;
DECL|field|readFullyOperations
specifier|public
name|long
name|readFullyOperations
decl_stmt|;
DECL|field|readsIncomplete
specifier|public
name|long
name|readsIncomplete
decl_stmt|;
DECL|field|bytesReadInClose
specifier|public
name|long
name|bytesReadInClose
decl_stmt|;
DECL|field|bytesDiscardedInAbort
specifier|public
name|long
name|bytesDiscardedInAbort
decl_stmt|;
DECL|field|policySetCount
specifier|public
name|long
name|policySetCount
decl_stmt|;
DECL|field|inputPolicy
specifier|public
name|long
name|inputPolicy
decl_stmt|;
DECL|method|InputStreamStatistics ()
specifier|private
name|InputStreamStatistics
parameter_list|()
block|{     }
comment|/**      * Seek backwards, incrementing the seek and backward seek counters.      * @param negativeOffset how far was the seek?      * This is expected to be negative.      */
DECL|method|seekBackwards (long negativeOffset)
specifier|public
name|void
name|seekBackwards
parameter_list|(
name|long
name|negativeOffset
parameter_list|)
block|{
name|seekOperations
operator|++
expr_stmt|;
name|backwardSeekOperations
operator|++
expr_stmt|;
name|bytesBackwardsOnSeek
operator|-=
name|negativeOffset
expr_stmt|;
block|}
comment|/**      * Record a forward seek, adding a seek operation, a forward      * seek operation, and any bytes skipped.      * @param skipped number of bytes skipped by reading from the stream.      * If the seek was implemented by a close + reopen, set this to zero.      */
DECL|method|seekForwards (long skipped)
specifier|public
name|void
name|seekForwards
parameter_list|(
name|long
name|skipped
parameter_list|)
block|{
name|seekOperations
operator|++
expr_stmt|;
name|forwardSeekOperations
operator|++
expr_stmt|;
if|if
condition|(
name|skipped
operator|>
literal|0
condition|)
block|{
name|bytesSkippedOnSeek
operator|+=
name|skipped
expr_stmt|;
block|}
block|}
comment|/**      * The inner stream was opened.      * @return the previous count      */
DECL|method|streamOpened ()
specifier|public
name|long
name|streamOpened
parameter_list|()
block|{
name|long
name|count
init|=
name|openOperations
decl_stmt|;
name|openOperations
operator|++
expr_stmt|;
return|return
name|count
return|;
block|}
comment|/**      * The inner stream was closed.      * @param abortedConnection flag to indicate the stream was aborted,      * rather than closed cleanly      * @param remainingInCurrentRequest the number of bytes remaining in      * the current request.      */
DECL|method|streamClose (boolean abortedConnection, long remainingInCurrentRequest)
specifier|public
name|void
name|streamClose
parameter_list|(
name|boolean
name|abortedConnection
parameter_list|,
name|long
name|remainingInCurrentRequest
parameter_list|)
block|{
name|closeOperations
operator|++
expr_stmt|;
if|if
condition|(
name|abortedConnection
condition|)
block|{
name|this
operator|.
name|aborted
operator|++
expr_stmt|;
name|bytesDiscardedInAbort
operator|+=
name|remainingInCurrentRequest
expr_stmt|;
block|}
else|else
block|{
name|closed
operator|++
expr_stmt|;
name|bytesReadInClose
operator|+=
name|remainingInCurrentRequest
expr_stmt|;
block|}
block|}
comment|/**      * An ignored stream read exception was received.      */
DECL|method|readException ()
specifier|public
name|void
name|readException
parameter_list|()
block|{
name|readExceptions
operator|++
expr_stmt|;
block|}
comment|/**      * Increment the bytes read counter by the number of bytes;      * no-op if the argument is negative.      * @param bytes number of bytes read      */
DECL|method|bytesRead (long bytes)
specifier|public
name|void
name|bytesRead
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|>
literal|0
condition|)
block|{
name|bytesRead
operator|+=
name|bytes
expr_stmt|;
block|}
block|}
comment|/**      * A {@code read(byte[] buf, int off, int len)} operation has started.      * @param pos starting position of the read      * @param len length of bytes to read      */
DECL|method|readOperationStarted (long pos, long len)
specifier|public
name|void
name|readOperationStarted
parameter_list|(
name|long
name|pos
parameter_list|,
name|long
name|len
parameter_list|)
block|{
name|readOperations
operator|++
expr_stmt|;
block|}
comment|/**      * A {@code PositionedRead.read(position, buffer, offset, length)}      * operation has just started.      * @param pos starting position of the read      * @param len length of bytes to read      */
DECL|method|readFullyOperationStarted (long pos, long len)
specifier|public
name|void
name|readFullyOperationStarted
parameter_list|(
name|long
name|pos
parameter_list|,
name|long
name|len
parameter_list|)
block|{
name|readFullyOperations
operator|++
expr_stmt|;
block|}
comment|/**      * A read operation has completed.      * @param requested number of requested bytes      * @param actual the actual number of bytes      */
DECL|method|readOperationCompleted (int requested, int actual)
specifier|public
name|void
name|readOperationCompleted
parameter_list|(
name|int
name|requested
parameter_list|,
name|int
name|actual
parameter_list|)
block|{
if|if
condition|(
name|requested
operator|>
name|actual
condition|)
block|{
name|readsIncomplete
operator|++
expr_stmt|;
block|}
block|}
comment|/**      * Close triggers the merge of statistics into the filesystem's      * instrumentation instance.      */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|mergeInputStreamStatistics
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * The input policy has been switched.      * @param updatedPolicy enum value of new policy.      */
DECL|method|inputPolicySet (int updatedPolicy)
specifier|public
name|void
name|inputPolicySet
parameter_list|(
name|int
name|updatedPolicy
parameter_list|)
block|{
name|policySetCount
operator|++
expr_stmt|;
name|inputPolicy
operator|=
name|updatedPolicy
expr_stmt|;
block|}
comment|/**      * String operator describes all the current statistics.      *<b>Important: there are no guarantees as to the stability      * of this value.</b>      * @return the current values of the stream statistics.      */
annotation|@
name|Override
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"StreamStatistics{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"OpenOperations="
argument_list|)
operator|.
name|append
argument_list|(
name|openOperations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", CloseOperations="
argument_list|)
operator|.
name|append
argument_list|(
name|closeOperations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Closed="
argument_list|)
operator|.
name|append
argument_list|(
name|closed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Aborted="
argument_list|)
operator|.
name|append
argument_list|(
name|aborted
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", SeekOperations="
argument_list|)
operator|.
name|append
argument_list|(
name|seekOperations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", ReadExceptions="
argument_list|)
operator|.
name|append
argument_list|(
name|readExceptions
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", ForwardSeekOperations="
argument_list|)
operator|.
name|append
argument_list|(
name|forwardSeekOperations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", BackwardSeekOperations="
argument_list|)
operator|.
name|append
argument_list|(
name|backwardSeekOperations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", BytesSkippedOnSeek="
argument_list|)
operator|.
name|append
argument_list|(
name|bytesSkippedOnSeek
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", BytesBackwardsOnSeek="
argument_list|)
operator|.
name|append
argument_list|(
name|bytesBackwardsOnSeek
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", BytesRead="
argument_list|)
operator|.
name|append
argument_list|(
name|bytesRead
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", BytesRead excluding skipped="
argument_list|)
operator|.
name|append
argument_list|(
name|bytesRead
operator|-
name|bytesSkippedOnSeek
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", ReadOperations="
argument_list|)
operator|.
name|append
argument_list|(
name|readOperations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", ReadFullyOperations="
argument_list|)
operator|.
name|append
argument_list|(
name|readFullyOperations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", ReadsIncomplete="
argument_list|)
operator|.
name|append
argument_list|(
name|readsIncomplete
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", BytesReadInClose="
argument_list|)
operator|.
name|append
argument_list|(
name|bytesReadInClose
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", BytesDiscardedInAbort="
argument_list|)
operator|.
name|append
argument_list|(
name|bytesDiscardedInAbort
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", InputPolicy="
argument_list|)
operator|.
name|append
argument_list|(
name|inputPolicy
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", InputPolicySetCount="
argument_list|)
operator|.
name|append
argument_list|(
name|policySetCount
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Create a stream output statistics instance.    * @return the new instance    */
DECL|method|newOutputStreamStatistics (Statistics statistics)
name|OutputStreamStatistics
name|newOutputStreamStatistics
parameter_list|(
name|Statistics
name|statistics
parameter_list|)
block|{
return|return
operator|new
name|OutputStreamStatistics
argument_list|(
name|statistics
argument_list|)
return|;
block|}
comment|/**    * Merge in the statistics of a single output stream into    * the filesystem-wide statistics.    * @param statistics stream statistics    */
DECL|method|mergeOutputStreamStatistics (OutputStreamStatistics statistics)
specifier|private
name|void
name|mergeOutputStreamStatistics
parameter_list|(
name|OutputStreamStatistics
name|statistics
parameter_list|)
block|{
name|incrementCounter
argument_list|(
name|STREAM_WRITE_TOTAL_TIME
argument_list|,
name|statistics
operator|.
name|totalUploadDuration
argument_list|()
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|STREAM_WRITE_QUEUE_DURATION
argument_list|,
name|statistics
operator|.
name|queueDuration
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|STREAM_WRITE_TOTAL_DATA
argument_list|,
name|statistics
operator|.
name|bytesUploaded
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|STREAM_WRITE_BLOCK_UPLOADS
argument_list|,
name|statistics
operator|.
name|blockUploadsCompleted
argument_list|)
expr_stmt|;
block|}
comment|/**    * Statistics updated by an output stream during its actual operation.    * Some of these stats may be relayed. However, as block upload is    * spans multiple    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|OutputStreamStatistics
specifier|public
specifier|final
class|class
name|OutputStreamStatistics
implements|implements
name|Closeable
block|{
DECL|field|blocksSubmitted
specifier|private
specifier|final
name|AtomicLong
name|blocksSubmitted
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|blocksInQueue
specifier|private
specifier|final
name|AtomicLong
name|blocksInQueue
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|blocksActive
specifier|private
specifier|final
name|AtomicLong
name|blocksActive
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|blockUploadsCompleted
specifier|private
specifier|final
name|AtomicLong
name|blockUploadsCompleted
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|blockUploadsFailed
specifier|private
specifier|final
name|AtomicLong
name|blockUploadsFailed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|bytesPendingUpload
specifier|private
specifier|final
name|AtomicLong
name|bytesPendingUpload
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|bytesUploaded
specifier|private
specifier|final
name|AtomicLong
name|bytesUploaded
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|transferDuration
specifier|private
specifier|final
name|AtomicLong
name|transferDuration
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|queueDuration
specifier|private
specifier|final
name|AtomicLong
name|queueDuration
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|exceptionsInMultipartFinalize
specifier|private
specifier|final
name|AtomicLong
name|exceptionsInMultipartFinalize
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|blocksAllocated
specifier|private
specifier|final
name|AtomicInteger
name|blocksAllocated
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|blocksReleased
specifier|private
specifier|final
name|AtomicInteger
name|blocksReleased
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|statistics
specifier|private
name|Statistics
name|statistics
decl_stmt|;
DECL|method|OutputStreamStatistics (Statistics statistics)
specifier|public
name|OutputStreamStatistics
parameter_list|(
name|Statistics
name|statistics
parameter_list|)
block|{
name|this
operator|.
name|statistics
operator|=
name|statistics
expr_stmt|;
block|}
comment|/**      * A block has been allocated.      */
DECL|method|blockAllocated ()
name|void
name|blockAllocated
parameter_list|()
block|{
name|blocksAllocated
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**      * A block has been released.      */
DECL|method|blockReleased ()
name|void
name|blockReleased
parameter_list|()
block|{
name|blocksReleased
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**      * Block is queued for upload.      */
DECL|method|blockUploadQueued (int blockSize)
name|void
name|blockUploadQueued
parameter_list|(
name|int
name|blockSize
parameter_list|)
block|{
name|blocksSubmitted
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|blocksInQueue
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|bytesPendingUpload
operator|.
name|addAndGet
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
name|incrementGauge
argument_list|(
name|STREAM_WRITE_BLOCK_UPLOADS_PENDING
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|incrementGauge
argument_list|(
name|STREAM_WRITE_BLOCK_UPLOADS_DATA_PENDING
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
comment|/** Queued block has been scheduled for upload. */
DECL|method|blockUploadStarted (long duration, int blockSize)
name|void
name|blockUploadStarted
parameter_list|(
name|long
name|duration
parameter_list|,
name|int
name|blockSize
parameter_list|)
block|{
name|queueDuration
operator|.
name|addAndGet
argument_list|(
name|duration
argument_list|)
expr_stmt|;
name|blocksInQueue
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|blocksActive
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|incrementGauge
argument_list|(
name|STREAM_WRITE_BLOCK_UPLOADS_PENDING
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|incrementGauge
argument_list|(
name|STREAM_WRITE_BLOCK_UPLOADS_ACTIVE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/** A block upload has completed. */
DECL|method|blockUploadCompleted (long duration, int blockSize)
name|void
name|blockUploadCompleted
parameter_list|(
name|long
name|duration
parameter_list|,
name|int
name|blockSize
parameter_list|)
block|{
name|this
operator|.
name|transferDuration
operator|.
name|addAndGet
argument_list|(
name|duration
argument_list|)
expr_stmt|;
name|incrementGauge
argument_list|(
name|STREAM_WRITE_BLOCK_UPLOADS_ACTIVE
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|blocksActive
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|blockUploadsCompleted
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**      *  A block upload has failed.      *  A final transfer completed event is still expected, so this      *  does not decrement the active block counter.      */
DECL|method|blockUploadFailed (long duration, int blockSize)
name|void
name|blockUploadFailed
parameter_list|(
name|long
name|duration
parameter_list|,
name|int
name|blockSize
parameter_list|)
block|{
name|blockUploadsFailed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/** Intermediate report of bytes uploaded. */
DECL|method|bytesTransferred (long byteCount)
name|void
name|bytesTransferred
parameter_list|(
name|long
name|byteCount
parameter_list|)
block|{
name|bytesUploaded
operator|.
name|addAndGet
argument_list|(
name|byteCount
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementBytesWritten
argument_list|(
name|byteCount
argument_list|)
expr_stmt|;
name|bytesPendingUpload
operator|.
name|addAndGet
argument_list|(
operator|-
name|byteCount
argument_list|)
expr_stmt|;
name|incrementGauge
argument_list|(
name|STREAM_WRITE_BLOCK_UPLOADS_DATA_PENDING
argument_list|,
operator|-
name|byteCount
argument_list|)
expr_stmt|;
block|}
comment|/**      * Note exception in a multipart complete.      * @param count count of exceptions      */
DECL|method|exceptionInMultipartComplete (int count)
name|void
name|exceptionInMultipartComplete
parameter_list|(
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|exceptionsInMultipartFinalize
operator|.
name|addAndGet
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Note an exception in a multipart abort.      */
DECL|method|exceptionInMultipartAbort ()
name|void
name|exceptionInMultipartAbort
parameter_list|()
block|{
name|exceptionsInMultipartFinalize
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the number of bytes pending upload.      * @return the number of bytes in the pending upload state.      */
DECL|method|getBytesPendingUpload ()
specifier|public
name|long
name|getBytesPendingUpload
parameter_list|()
block|{
return|return
name|bytesPendingUpload
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Data has been uploaded to be committed in a subsequent operation;      * to be called at the end of the write.      * @param size size in bytes      */
DECL|method|commitUploaded (long size)
specifier|public
name|void
name|commitUploaded
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|incrementCounter
argument_list|(
name|COMMITTER_BYTES_UPLOADED
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**      * Output stream has closed.      * Trigger merge in of all statistics not updated during operation.      */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|bytesPendingUpload
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Closing output stream statistics while data is still marked"
operator|+
literal|" as pending upload in {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|mergeOutputStreamStatistics
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|averageQueueTime ()
name|long
name|averageQueueTime
parameter_list|()
block|{
return|return
name|blocksSubmitted
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|?
operator|(
name|queueDuration
operator|.
name|get
argument_list|()
operator|/
name|blocksSubmitted
operator|.
name|get
argument_list|()
operator|)
else|:
literal|0
return|;
block|}
DECL|method|effectiveBandwidth ()
name|double
name|effectiveBandwidth
parameter_list|()
block|{
name|double
name|duration
init|=
name|totalUploadDuration
argument_list|()
operator|/
literal|1000.0
decl_stmt|;
return|return
name|duration
operator|>
literal|0
condition|?
operator|(
name|bytesUploaded
operator|.
name|get
argument_list|()
operator|/
name|duration
operator|)
else|:
literal|0
return|;
block|}
DECL|method|totalUploadDuration ()
name|long
name|totalUploadDuration
parameter_list|()
block|{
return|return
name|queueDuration
operator|.
name|get
argument_list|()
operator|+
name|transferDuration
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|blocksAllocated ()
specifier|public
name|int
name|blocksAllocated
parameter_list|()
block|{
return|return
name|blocksAllocated
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|blocksReleased ()
specifier|public
name|int
name|blocksReleased
parameter_list|()
block|{
return|return
name|blocksReleased
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Get counters of blocks actively allocated; my be inaccurate      * if the numbers change during the (non-synchronized) calculation.      * @return the number of actively allocated blocks.      */
DECL|method|blocksActivelyAllocated ()
specifier|public
name|int
name|blocksActivelyAllocated
parameter_list|()
block|{
return|return
name|blocksAllocated
operator|.
name|get
argument_list|()
operator|-
name|blocksReleased
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"OutputStreamStatistics{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"blocksSubmitted="
argument_list|)
operator|.
name|append
argument_list|(
name|blocksSubmitted
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", blocksInQueue="
argument_list|)
operator|.
name|append
argument_list|(
name|blocksInQueue
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", blocksActive="
argument_list|)
operator|.
name|append
argument_list|(
name|blocksActive
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", blockUploadsCompleted="
argument_list|)
operator|.
name|append
argument_list|(
name|blockUploadsCompleted
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", blockUploadsFailed="
argument_list|)
operator|.
name|append
argument_list|(
name|blockUploadsFailed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", bytesPendingUpload="
argument_list|)
operator|.
name|append
argument_list|(
name|bytesPendingUpload
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", bytesUploaded="
argument_list|)
operator|.
name|append
argument_list|(
name|bytesUploaded
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", blocksAllocated="
argument_list|)
operator|.
name|append
argument_list|(
name|blocksAllocated
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", blocksReleased="
argument_list|)
operator|.
name|append
argument_list|(
name|blocksReleased
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", blocksActivelyAllocated="
argument_list|)
operator|.
name|append
argument_list|(
name|blocksActivelyAllocated
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", exceptionsInMultipartFinalize="
argument_list|)
operator|.
name|append
argument_list|(
name|exceptionsInMultipartFinalize
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", transferDuration="
argument_list|)
operator|.
name|append
argument_list|(
name|transferDuration
argument_list|)
operator|.
name|append
argument_list|(
literal|" ms"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", queueDuration="
argument_list|)
operator|.
name|append
argument_list|(
name|queueDuration
argument_list|)
operator|.
name|append
argument_list|(
literal|" ms"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", averageQueueTime="
argument_list|)
operator|.
name|append
argument_list|(
name|averageQueueTime
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ms"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", totalUploadDuration="
argument_list|)
operator|.
name|append
argument_list|(
name|totalUploadDuration
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ms"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", effectiveBandwidth="
argument_list|)
operator|.
name|append
argument_list|(
name|effectiveBandwidth
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" bytes/s"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Instrumentation exported to S3Guard.    */
DECL|class|S3GuardInstrumentation
specifier|public
specifier|final
class|class
name|S3GuardInstrumentation
block|{
comment|/** Initialized event. */
DECL|method|initialized ()
specifier|public
name|void
name|initialized
parameter_list|()
block|{
name|incrementCounter
argument_list|(
name|S3GUARD_METADATASTORE_INITIALIZATION
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|storeClosed ()
specifier|public
name|void
name|storeClosed
parameter_list|()
block|{      }
comment|/**      * Throttled request.      */
DECL|method|throttled ()
specifier|public
name|void
name|throttled
parameter_list|()
block|{
comment|// counters are incremented by owner.
block|}
comment|/**      * S3Guard is retrying after a (retryable) failure.      */
DECL|method|retrying ()
specifier|public
name|void
name|retrying
parameter_list|()
block|{
comment|// counters are incremented by owner.
block|}
block|}
comment|/**    * Instrumentation exported to S3Guard Committers.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CommitterStatistics
specifier|public
specifier|final
class|class
name|CommitterStatistics
block|{
comment|/** A commit has been created. */
DECL|method|commitCreated ()
specifier|public
name|void
name|commitCreated
parameter_list|()
block|{
name|incrementCounter
argument_list|(
name|COMMITTER_COMMITS_CREATED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Data has been uploaded to be committed in a subsequent operation.      * @param size size in bytes      */
DECL|method|commitUploaded (long size)
specifier|public
name|void
name|commitUploaded
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|incrementCounter
argument_list|(
name|COMMITTER_BYTES_UPLOADED
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**      * A commit has been completed.      * @param size size in bytes      */
DECL|method|commitCompleted (long size)
specifier|public
name|void
name|commitCompleted
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|incrementCounter
argument_list|(
name|COMMITTER_COMMITS_COMPLETED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|COMMITTER_BYTES_COMMITTED
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/** A commit has been aborted. */
DECL|method|commitAborted ()
specifier|public
name|void
name|commitAborted
parameter_list|()
block|{
name|incrementCounter
argument_list|(
name|COMMITTER_COMMITS_ABORTED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|commitReverted ()
specifier|public
name|void
name|commitReverted
parameter_list|()
block|{
name|incrementCounter
argument_list|(
name|COMMITTER_COMMITS_REVERTED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|commitFailed ()
specifier|public
name|void
name|commitFailed
parameter_list|()
block|{
name|incrementCounter
argument_list|(
name|COMMITTER_COMMITS_FAILED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|taskCompleted (boolean success)
specifier|public
name|void
name|taskCompleted
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|incrementCounter
argument_list|(
name|success
condition|?
name|COMMITTER_TASKS_SUCCEEDED
else|:
name|COMMITTER_TASKS_FAILED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|jobCompleted (boolean success)
specifier|public
name|void
name|jobCompleted
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|incrementCounter
argument_list|(
name|success
condition|?
name|COMMITTER_JOBS_SUCCEEDED
else|:
name|COMMITTER_JOBS_FAILED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a delegation token statistics instance.    * @return an instance of delegation token statistics    */
DECL|method|newDelegationTokenStatistics ()
specifier|public
name|DelegationTokenStatistics
name|newDelegationTokenStatistics
parameter_list|()
block|{
return|return
operator|new
name|DelegationTokenStatistics
argument_list|()
return|;
block|}
comment|/**    * Instrumentation exported to S3A Delegation Token support.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DelegationTokenStatistics
specifier|public
specifier|final
class|class
name|DelegationTokenStatistics
block|{
DECL|method|DelegationTokenStatistics ()
specifier|private
name|DelegationTokenStatistics
parameter_list|()
block|{     }
comment|/** A token has been issued. */
DECL|method|tokenIssued ()
specifier|public
name|void
name|tokenIssued
parameter_list|()
block|{
name|incrementCounter
argument_list|(
name|DELEGATION_TOKENS_ISSUED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Copy all the metrics to a map of (name, long-value).    * @return a map of the metrics    */
DECL|method|toMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|toMap
parameter_list|()
block|{
name|MetricsToMap
name|metricBuilder
init|=
operator|new
name|MetricsToMap
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|registry
operator|.
name|snapshot
argument_list|(
name|metricBuilder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|metricBuilder
operator|.
name|getMap
argument_list|()
return|;
block|}
comment|/**    * Convert all metrics to a map.    */
DECL|class|MetricsToMap
specifier|private
specifier|static
class|class
name|MetricsToMap
extends|extends
name|MetricsRecordBuilder
block|{
DECL|field|parent
specifier|private
specifier|final
name|MetricsCollector
name|parent
decl_stmt|;
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|COUNTERS_TO_CREATE
operator|.
name|length
operator|*
literal|2
argument_list|)
decl_stmt|;
DECL|method|MetricsToMap (MetricsCollector parent)
name|MetricsToMap
parameter_list|(
name|MetricsCollector
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tag (MetricsInfo info, String value)
specifier|public
name|MetricsRecordBuilder
name|tag
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|add (MetricsTag tag)
specifier|public
name|MetricsRecordBuilder
name|add
parameter_list|(
name|MetricsTag
name|tag
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|add (AbstractMetric metric)
specifier|public
name|MetricsRecordBuilder
name|add
parameter_list|(
name|AbstractMetric
name|metric
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setContext (String value)
specifier|public
name|MetricsRecordBuilder
name|setContext
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|addCounter (MetricsInfo info, int value)
specifier|public
name|MetricsRecordBuilder
name|addCounter
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|int
name|value
parameter_list|)
block|{
return|return
name|tuple
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addCounter (MetricsInfo info, long value)
specifier|public
name|MetricsRecordBuilder
name|addCounter
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|long
name|value
parameter_list|)
block|{
return|return
name|tuple
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addGauge (MetricsInfo info, int value)
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|int
name|value
parameter_list|)
block|{
return|return
name|tuple
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addGauge (MetricsInfo info, long value)
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|long
name|value
parameter_list|)
block|{
return|return
name|tuple
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|tuple (MetricsInfo info, long value)
specifier|public
name|MetricsToMap
name|tuple
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|long
name|value
parameter_list|)
block|{
return|return
name|tuple
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|tuple (String name, long value)
specifier|public
name|MetricsToMap
name|tuple
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|addGauge (MetricsInfo info, float value)
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|float
name|value
parameter_list|)
block|{
return|return
name|tuple
argument_list|(
name|info
argument_list|,
operator|(
name|long
operator|)
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addGauge (MetricsInfo info, double value)
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|double
name|value
parameter_list|)
block|{
return|return
name|tuple
argument_list|(
name|info
argument_list|,
operator|(
name|long
operator|)
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parent ()
specifier|public
name|MetricsCollector
name|parent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
comment|/**      * Get the map.      * @return the map of metrics      */
DECL|method|getMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getMap
parameter_list|()
block|{
return|return
name|map
return|;
block|}
block|}
block|}
end_class

end_unit

