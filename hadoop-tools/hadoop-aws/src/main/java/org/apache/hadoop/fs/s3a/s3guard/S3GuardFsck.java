begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidParameterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_comment
comment|/**  * Main class for the FSCK factored out from S3GuardTool  * The implementation uses fixed DynamoDBMetadataStore as the backing store  * for metadata.  *  * Functions:  *<ul>  *<li>Checking metadata consistency between S3 and metadatastore</li>  *</ul>  */
end_comment

begin_class
DECL|class|S3GuardFsck
specifier|public
class|class
name|S3GuardFsck
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3GuardFsck
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT_PATH_STRING
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_PATH_STRING
init|=
literal|"/"
decl_stmt|;
DECL|field|rawFS
specifier|private
specifier|final
name|S3AFileSystem
name|rawFS
decl_stmt|;
DECL|field|metadataStore
specifier|private
specifier|final
name|DynamoDBMetadataStore
name|metadataStore
decl_stmt|;
DECL|field|MOD_TIME_RANGE
specifier|private
specifier|static
specifier|final
name|long
name|MOD_TIME_RANGE
init|=
literal|2000L
decl_stmt|;
comment|/**    * Creates an S3GuardFsck.    * @param fs the filesystem to compare to    * @param ms metadatastore the metadatastore to compare with (dynamo)    */
DECL|method|S3GuardFsck (S3AFileSystem fs, MetadataStore ms)
specifier|public
name|S3GuardFsck
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|MetadataStore
name|ms
parameter_list|)
throws|throws
name|InvalidParameterException
block|{
name|this
operator|.
name|rawFS
operator|=
name|fs
expr_stmt|;
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidParameterException
argument_list|(
literal|"S3A Bucket "
operator|+
name|fs
operator|.
name|getBucket
argument_list|()
operator|+
literal|" should be guarded by a "
operator|+
name|DynamoDBMetadataStore
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|metadataStore
operator|=
operator|(
name|DynamoDBMetadataStore
operator|)
name|ms
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|rawFS
operator|.
name|hasMetadataStore
argument_list|()
argument_list|,
literal|"Raw fs should not have a metadatastore."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compares S3 to MS.    * Iterative breadth first walk on the S3 structure from a given root.    * Creates a list of pairs (metadata in S3 and in the MetadataStore) where    * the consistency or any rule is violated.    * Uses {@link S3GuardFsckViolationHandler} to handle violations.    * The violations are listed in Enums: {@link Violation}    *    * @param p the root path to start the traversal    * @return a list of {@link ComparePair}    * @throws IOException    */
DECL|method|compareS3ToMs (Path p)
specifier|public
name|List
argument_list|<
name|ComparePair
argument_list|>
name|compareS3ToMs
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|int
name|scannedItems
init|=
literal|0
decl_stmt|;
specifier|final
name|Path
name|rootPath
init|=
name|rawFS
operator|.
name|qualify
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|S3AFileStatus
name|root
init|=
operator|(
name|S3AFileStatus
operator|)
name|rawFS
operator|.
name|getFileStatus
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ComparePair
argument_list|>
name|comparePairs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Queue
argument_list|<
name|S3AFileStatus
argument_list|>
name|queue
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|S3AFileStatus
name|currentDir
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|currentDirPath
init|=
name|currentDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|s3DirListing
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rawFS
operator|.
name|listStatus
argument_list|(
name|currentDirPath
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check authoritative directory flag.
name|compareAuthoritativeDirectoryFlag
argument_list|(
name|comparePairs
argument_list|,
name|currentDirPath
argument_list|,
name|s3DirListing
argument_list|)
expr_stmt|;
comment|// Add all descendant directory to the queue
name|s3DirListing
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|pm
lambda|->
name|pm
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|S3AFileStatus
operator|.
name|class
operator|::
name|cast
argument_list|)
operator|.
name|forEach
argument_list|(
name|pm
lambda|->
name|queue
operator|.
name|add
argument_list|(
name|pm
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check file and directory metadata for consistency.
specifier|final
name|List
argument_list|<
name|S3AFileStatus
argument_list|>
name|children
init|=
name|s3DirListing
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|status
lambda|->
operator|!
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|S3AFileStatus
operator|.
name|class
operator|::
name|cast
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ComparePair
argument_list|>
name|compareResult
init|=
name|compareS3DirContentToMs
argument_list|(
name|currentDir
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|comparePairs
operator|.
name|addAll
argument_list|(
name|compareResult
argument_list|)
expr_stmt|;
comment|// Increase the scanned file size.
comment|// One for the directory, one for the children.
name|scannedItems
operator|++
expr_stmt|;
name|scannedItems
operator|+=
name|children
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The path has been deleted since it was queued: "
operator|+
name|currentDirPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|stopwatch
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Create a handler and handle each violated pairs
name|S3GuardFsckViolationHandler
name|handler
init|=
operator|new
name|S3GuardFsckViolationHandler
argument_list|(
name|rawFS
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
name|comparePairs
operator|.
name|forEach
argument_list|(
name|handler
operator|::
name|handle
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total scan time: {}s"
argument_list|,
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanned entries: {}"
argument_list|,
name|scannedItems
argument_list|)
expr_stmt|;
return|return
name|comparePairs
return|;
block|}
comment|/**    * Compare the directory contents if the listing is authoritative.    *    * @param comparePairs the list of compare pairs to add to    *                     if it contains a violation    * @param currentDirPath the current directory path    * @param s3DirListing the s3 directory listing to compare with    * @throws IOException    */
DECL|method|compareAuthoritativeDirectoryFlag (List<ComparePair> comparePairs, Path currentDirPath, List<FileStatus> s3DirListing)
specifier|private
name|void
name|compareAuthoritativeDirectoryFlag
parameter_list|(
name|List
argument_list|<
name|ComparePair
argument_list|>
name|comparePairs
parameter_list|,
name|Path
name|currentDirPath
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|s3DirListing
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DirListingMetadata
name|msDirListing
init|=
name|metadataStore
operator|.
name|listChildren
argument_list|(
name|currentDirPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|msDirListing
operator|!=
literal|null
operator|&&
name|msDirListing
operator|.
name|isAuthoritative
argument_list|()
condition|)
block|{
name|ComparePair
name|cP
init|=
operator|new
name|ComparePair
argument_list|(
name|s3DirListing
argument_list|,
name|msDirListing
argument_list|)
decl_stmt|;
if|if
condition|(
name|s3DirListing
operator|.
name|size
argument_list|()
operator|!=
name|msDirListing
operator|.
name|numEntries
argument_list|()
condition|)
block|{
name|cP
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|AUTHORITATIVE_DIRECTORY_CONTENT_MISMATCH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Set
argument_list|<
name|Path
argument_list|>
name|msPaths
init|=
name|msDirListing
operator|.
name|getListing
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pm
lambda|->
name|pm
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Path
argument_list|>
name|s3Paths
init|=
name|s3DirListing
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pm
lambda|->
name|pm
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s3Paths
operator|.
name|equals
argument_list|(
name|msPaths
argument_list|)
condition|)
block|{
name|cP
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|AUTHORITATIVE_DIRECTORY_CONTENT_MISMATCH
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cP
operator|.
name|containsViolation
argument_list|()
condition|)
block|{
name|comparePairs
operator|.
name|add
argument_list|(
name|cP
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Compares S3 directory content to the metadata store.    *    * @param s3CurrentDir file status of the current directory    * @param children the contents of the directory    * @return the compare pairs with violations of consistency    * @throws IOException    */
DECL|method|compareS3DirContentToMs ( S3AFileStatus s3CurrentDir, List<S3AFileStatus> children)
specifier|protected
name|List
argument_list|<
name|ComparePair
argument_list|>
name|compareS3DirContentToMs
parameter_list|(
name|S3AFileStatus
name|s3CurrentDir
parameter_list|,
name|List
argument_list|<
name|S3AFileStatus
argument_list|>
name|children
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|path
init|=
name|s3CurrentDir
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|PathMetadata
name|pathMetadata
init|=
name|metadataStore
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ComparePair
argument_list|>
name|violationComparePairs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ComparePair
name|rootComparePair
init|=
name|compareFileStatusToPathMetadata
argument_list|(
name|s3CurrentDir
argument_list|,
name|pathMetadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootComparePair
operator|.
name|containsViolation
argument_list|()
condition|)
block|{
name|violationComparePairs
operator|.
name|add
argument_list|(
name|rootComparePair
argument_list|)
expr_stmt|;
block|}
name|children
operator|.
name|forEach
argument_list|(
name|s3ChildMeta
lambda|->
block|{
try|try
block|{
specifier|final
name|PathMetadata
name|msChildMeta
init|=
name|metadataStore
operator|.
name|get
argument_list|(
name|s3ChildMeta
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ComparePair
name|comparePair
init|=
name|compareFileStatusToPathMetadata
argument_list|(
name|s3ChildMeta
argument_list|,
name|msChildMeta
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparePair
operator|.
name|containsViolation
argument_list|()
condition|)
block|{
name|violationComparePairs
operator|.
name|add
argument_list|(
name|comparePair
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|violationComparePairs
return|;
block|}
comment|/**    * Compares a {@link S3AFileStatus} from S3 to a {@link PathMetadata}    * from the metadata store. Finds violated invariants and consistency    * issues.    *    * @param s3FileStatus the file status from S3    * @param msPathMetadata the path metadata from metadatastore    * @return {@link ComparePair} with the found issues    * @throws IOException    */
DECL|method|compareFileStatusToPathMetadata ( S3AFileStatus s3FileStatus, PathMetadata msPathMetadata)
specifier|protected
name|ComparePair
name|compareFileStatusToPathMetadata
parameter_list|(
name|S3AFileStatus
name|s3FileStatus
parameter_list|,
name|PathMetadata
name|msPathMetadata
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|path
init|=
name|s3FileStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|msPathMetadata
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Path: {} - Length S3: {}, MS: {} "
operator|+
literal|"- Etag S3: {}, MS: {} "
argument_list|,
name|path
argument_list|,
name|s3FileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|msPathMetadata
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getLen
argument_list|()
argument_list|,
name|s3FileStatus
operator|.
name|getETag
argument_list|()
argument_list|,
name|msPathMetadata
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Path: {} - Length S3: {} - Etag S3: {}, no record in MS."
argument_list|,
name|path
argument_list|,
name|s3FileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|s3FileStatus
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ComparePair
name|comparePair
init|=
operator|new
name|ComparePair
argument_list|(
name|s3FileStatus
argument_list|,
name|msPathMetadata
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|path
argument_list|(
name|ROOT_PATH_STRING
argument_list|)
argument_list|)
condition|)
block|{
specifier|final
name|Path
name|parentPath
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
specifier|final
name|PathMetadata
name|parentPm
init|=
name|metadataStore
operator|.
name|get
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentPm
operator|==
literal|null
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|NO_PARENT_ENTRY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|parentPm
operator|.
name|getFileStatus
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|PARENT_IS_A_FILE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentPm
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|PARENT_TOMBSTONED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Entry is in the root directory, so there's no parent"
argument_list|)
expr_stmt|;
block|}
comment|// If the msPathMetadata is null, we RETURN because
comment|// there is no metadata compare with
if|if
condition|(
name|msPathMetadata
operator|==
literal|null
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|NO_METADATA_ENTRY
argument_list|)
expr_stmt|;
return|return
name|comparePair
return|;
block|}
specifier|final
name|S3AFileStatus
name|msFileStatus
init|=
name|msPathMetadata
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|s3FileStatus
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|msFileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|DIR_IN_S3_FILE_IN_MS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|s3FileStatus
operator|.
name|isDirectory
argument_list|()
operator|&&
name|msFileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|FILE_IN_S3_DIR_IN_MS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msPathMetadata
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|TOMBSTONED_IN_MS_NOT_DELETED_IN_S3
argument_list|)
expr_stmt|;
block|}
comment|/**      * Attribute check      */
if|if
condition|(
name|s3FileStatus
operator|.
name|getLen
argument_list|()
operator|!=
name|msFileStatus
operator|.
name|getLen
argument_list|()
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|LENGTH_MISMATCH
argument_list|)
expr_stmt|;
block|}
comment|// ModTime should be in the accuracy range defined.
name|long
name|modTimeDiff
init|=
name|Math
operator|.
name|abs
argument_list|(
name|s3FileStatus
operator|.
name|getModificationTime
argument_list|()
operator|-
name|msFileStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|modTimeDiff
operator|>
name|MOD_TIME_RANGE
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|MOD_TIME_MISMATCH
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msPathMetadata
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getVersionId
argument_list|()
operator|==
literal|null
operator|||
name|s3FileStatus
operator|.
name|getVersionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Missing versionIDs skipped. A HEAD request is "
operator|+
literal|"required for each object to get the versionID."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|s3FileStatus
operator|.
name|getVersionId
argument_list|()
operator|.
name|equals
argument_list|(
name|msFileStatus
operator|.
name|getVersionId
argument_list|()
argument_list|)
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|VERSIONID_MISMATCH
argument_list|)
expr_stmt|;
block|}
comment|// check etag only for files, and not directories
if|if
condition|(
operator|!
name|s3FileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|msPathMetadata
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getETag
argument_list|()
operator|==
literal|null
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|NO_ETAG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s3FileStatus
operator|.
name|getETag
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|s3FileStatus
operator|.
name|getETag
argument_list|()
operator|.
name|equals
argument_list|(
name|msFileStatus
operator|.
name|getETag
argument_list|()
argument_list|)
condition|)
block|{
name|comparePair
operator|.
name|violations
operator|.
name|add
argument_list|(
name|Violation
operator|.
name|ETAG_MISMATCH
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|comparePair
return|;
block|}
DECL|method|path (String s)
specifier|private
name|Path
name|path
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|rawFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * A compare pair with the pair of metadata and the list of violations.    */
DECL|class|ComparePair
specifier|public
specifier|static
class|class
name|ComparePair
block|{
DECL|field|s3FileStatus
specifier|private
specifier|final
name|S3AFileStatus
name|s3FileStatus
decl_stmt|;
DECL|field|msPathMetadata
specifier|private
specifier|final
name|PathMetadata
name|msPathMetadata
decl_stmt|;
DECL|field|s3DirListing
specifier|private
specifier|final
name|List
argument_list|<
name|FileStatus
argument_list|>
name|s3DirListing
decl_stmt|;
DECL|field|msDirListing
specifier|private
specifier|final
name|DirListingMetadata
name|msDirListing
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|violations
specifier|private
specifier|final
name|Set
argument_list|<
name|Violation
argument_list|>
name|violations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ComparePair (S3AFileStatus status, PathMetadata pm)
name|ComparePair
parameter_list|(
name|S3AFileStatus
name|status
parameter_list|,
name|PathMetadata
name|pm
parameter_list|)
block|{
name|this
operator|.
name|s3FileStatus
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|msPathMetadata
operator|=
name|pm
expr_stmt|;
name|this
operator|.
name|s3DirListing
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|msDirListing
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|status
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
DECL|method|ComparePair (List<FileStatus> s3DirListing, DirListingMetadata msDirListing)
name|ComparePair
parameter_list|(
name|List
argument_list|<
name|FileStatus
argument_list|>
name|s3DirListing
parameter_list|,
name|DirListingMetadata
name|msDirListing
parameter_list|)
block|{
name|this
operator|.
name|s3DirListing
operator|=
name|s3DirListing
expr_stmt|;
name|this
operator|.
name|msDirListing
operator|=
name|msDirListing
expr_stmt|;
name|this
operator|.
name|s3FileStatus
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|msPathMetadata
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|msDirListing
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
DECL|method|getS3FileStatus ()
specifier|public
name|S3AFileStatus
name|getS3FileStatus
parameter_list|()
block|{
return|return
name|s3FileStatus
return|;
block|}
DECL|method|getMsPathMetadata ()
specifier|public
name|PathMetadata
name|getMsPathMetadata
parameter_list|()
block|{
return|return
name|msPathMetadata
return|;
block|}
DECL|method|getViolations ()
specifier|public
name|Set
argument_list|<
name|Violation
argument_list|>
name|getViolations
parameter_list|()
block|{
return|return
name|violations
return|;
block|}
DECL|method|containsViolation ()
specifier|public
name|boolean
name|containsViolation
parameter_list|()
block|{
return|return
operator|!
name|violations
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|getMsDirListing ()
specifier|public
name|DirListingMetadata
name|getMsDirListing
parameter_list|()
block|{
return|return
name|msDirListing
return|;
block|}
DECL|method|getS3DirListing ()
specifier|public
name|List
argument_list|<
name|FileStatus
argument_list|>
name|getS3DirListing
parameter_list|()
block|{
return|return
name|s3DirListing
return|;
block|}
DECL|method|getPath ()
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ComparePair{"
operator|+
literal|"s3FileStatus="
operator|+
name|s3FileStatus
operator|+
literal|", msPathMetadata="
operator|+
name|msPathMetadata
operator|+
literal|", s3DirListing="
operator|+
name|s3DirListing
operator|+
literal|", msDirListing="
operator|+
name|msDirListing
operator|+
literal|", path="
operator|+
name|path
operator|+
literal|", violations="
operator|+
name|violations
operator|+
literal|'}'
return|;
block|}
block|}
comment|/**    * Violation with severity and the handler.    * Defines the severity of the violation between 0-2    * where 0 is the most severe and 2 is the least severe.    */
DECL|enum|Violation
specifier|public
enum|enum
name|Violation
block|{
comment|/**      * No entry in metadatastore.      */
DECL|enumConstant|NO_METADATA_ENTRY
name|NO_METADATA_ENTRY
argument_list|(
literal|1
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|NoMetadataEntry
operator|.
name|class
argument_list|)
block|,
comment|/**      * A file or directory entry does not have a parent entry - excluding      * files and directories in the root.      */
DECL|enumConstant|NO_PARENT_ENTRY
name|NO_PARENT_ENTRY
argument_list|(
literal|0
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|NoParentEntry
operator|.
name|class
argument_list|)
block|,
comment|/**      * An entryâs parent is a file.      */
DECL|enumConstant|PARENT_IS_A_FILE
name|PARENT_IS_A_FILE
argument_list|(
literal|0
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|ParentIsAFile
operator|.
name|class
argument_list|)
block|,
comment|/**      * A file exists under a path for which there is a      * tombstone entry in the MS.      */
DECL|enumConstant|PARENT_TOMBSTONED
name|PARENT_TOMBSTONED
argument_list|(
literal|0
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|ParentTombstoned
operator|.
name|class
argument_list|)
block|,
comment|/**      * A directory in S3 is a file entry in the MS.      */
DECL|enumConstant|DIR_IN_S3_FILE_IN_MS
name|DIR_IN_S3_FILE_IN_MS
argument_list|(
literal|0
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|DirInS3FileInMs
operator|.
name|class
argument_list|)
block|,
comment|/**      * A file in S3 is a directory in the MS.      */
DECL|enumConstant|FILE_IN_S3_DIR_IN_MS
name|FILE_IN_S3_DIR_IN_MS
argument_list|(
literal|0
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|FileInS3DirInMs
operator|.
name|class
argument_list|)
block|,
DECL|enumConstant|AUTHORITATIVE_DIRECTORY_CONTENT_MISMATCH
name|AUTHORITATIVE_DIRECTORY_CONTENT_MISMATCH
argument_list|(
literal|1
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|AuthDirContentMismatch
operator|.
name|class
argument_list|)
block|,
comment|/**      * An entry in the MS is tombstoned, but the object is not deleted on S3      */
DECL|enumConstant|TOMBSTONED_IN_MS_NOT_DELETED_IN_S3
name|TOMBSTONED_IN_MS_NOT_DELETED_IN_S3
argument_list|(
literal|0
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|TombstonedInMsNotDeletedInS3
operator|.
name|class
argument_list|)
block|,
comment|/**      * Attribute mismatch.      */
DECL|enumConstant|LENGTH_MISMATCH
name|LENGTH_MISMATCH
argument_list|(
literal|0
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|LengthMismatch
operator|.
name|class
argument_list|)
block|,
DECL|enumConstant|MOD_TIME_MISMATCH
name|MOD_TIME_MISMATCH
argument_list|(
literal|2
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|ModTimeMismatch
operator|.
name|class
argument_list|)
block|,
comment|/**      * If there's a versionID the mismatch is severe.      */
DECL|enumConstant|VERSIONID_MISMATCH
name|VERSIONID_MISMATCH
argument_list|(
literal|0
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|VersionIdMismatch
operator|.
name|class
argument_list|)
block|,
comment|/**      * If there's an etag the mismatch is severe.      */
DECL|enumConstant|ETAG_MISMATCH
name|ETAG_MISMATCH
argument_list|(
literal|0
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|EtagMismatch
operator|.
name|class
argument_list|)
block|,
comment|/**      * Don't worry too much if we don't have an etag.      */
DECL|enumConstant|NO_ETAG
name|NO_ETAG
argument_list|(
literal|2
argument_list|,
name|S3GuardFsckViolationHandler
operator|.
name|NoEtag
operator|.
name|class
argument_list|)
block|;
DECL|field|severity
specifier|private
specifier|final
name|int
name|severity
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|S3GuardFsckViolationHandler
operator|.
name|ViolationHandler
argument_list|>
name|handler
decl_stmt|;
DECL|method|Violation (int s, Class<? extends S3GuardFsckViolationHandler.ViolationHandler> h)
name|Violation
parameter_list|(
name|int
name|s
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|S3GuardFsckViolationHandler
operator|.
name|ViolationHandler
argument_list|>
name|h
parameter_list|)
block|{
name|this
operator|.
name|severity
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|h
expr_stmt|;
block|}
DECL|method|getSeverity ()
specifier|public
name|int
name|getSeverity
parameter_list|()
block|{
return|return
name|severity
return|;
block|}
DECL|method|getHandler ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|S3GuardFsckViolationHandler
operator|.
name|ViolationHandler
argument_list|>
name|getHandler
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
block|}
block|}
end_class

end_unit

