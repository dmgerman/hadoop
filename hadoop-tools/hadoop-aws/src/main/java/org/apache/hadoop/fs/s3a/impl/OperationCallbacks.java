begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|MultiObjectDeleteException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|model
operator|.
name|CopyResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Retries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ALocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AReadOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ObjectAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|BulkOperationState
import|;
end_import

begin_comment
comment|/**  * These are all the callbacks which the {@link RenameOperation}  * and {@link DeleteOperation } operations need,  * derived from the appropriate S3AFileSystem methods.  */
end_comment

begin_interface
DECL|interface|OperationCallbacks
specifier|public
interface|interface
name|OperationCallbacks
block|{
comment|/**    * Create the attributes of an object for subsequent use.    * @param path path path of the request.    * @param eTag the eTag of the S3 object    * @param versionId S3 object version ID    * @param len length of the file    * @return attributes to use when building the query.    */
DECL|method|createObjectAttributes ( Path path, String eTag, String versionId, long len)
name|S3ObjectAttributes
name|createObjectAttributes
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|eTag
parameter_list|,
name|String
name|versionId
parameter_list|,
name|long
name|len
parameter_list|)
function_decl|;
comment|/**    * Create the attributes of an object for subsequent use.    * @param fileStatus file status to build from.    * @return attributes to use when building the query.    */
DECL|method|createObjectAttributes ( S3AFileStatus fileStatus)
name|S3ObjectAttributes
name|createObjectAttributes
parameter_list|(
name|S3AFileStatus
name|fileStatus
parameter_list|)
function_decl|;
comment|/**    * Create the read context for reading from the referenced file,    * using FS state as well as the status.    * @param fileStatus file status.    * @return a context for read and select operations.    */
DECL|method|createReadContext ( FileStatus fileStatus)
name|S3AReadOpContext
name|createReadContext
parameter_list|(
name|FileStatus
name|fileStatus
parameter_list|)
function_decl|;
comment|/**    * The rename has finished; perform any store cleanup operations    * such as creating/deleting directory markers.    * @param sourceRenamed renamed source    * @param destCreated destination file created.    * @throws IOException failure    */
DECL|method|finishRename (Path sourceRenamed, Path destCreated)
name|void
name|finishRename
parameter_list|(
name|Path
name|sourceRenamed
parameter_list|,
name|Path
name|destCreated
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Delete an object, also updating the metastore.    * This call does<i>not</i> create any mock parent entries.    * Retry policy: retry untranslated; delete considered idempotent.    * @param path path to delete    * @param key key of entry    * @param isFile is the path a file (used for instrumentation only)    * @param operationState (nullable) operational state for a bulk update    * @throws AmazonClientException problems working with S3    * @throws IOException IO failure in the metastore    */
annotation|@
name|Retries
operator|.
name|RetryTranslated
DECL|method|deleteObjectAtPath (Path path, String key, boolean isFile, BulkOperationState operationState)
name|void
name|deleteObjectAtPath
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|isFile
parameter_list|,
name|BulkOperationState
name|operationState
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Recursive list of files and empty directories.    *    * @param path path to list from    * @param status optional status of path to list.    * @param collectTombstones should tombstones be collected from S3Guard?    * @param includeSelf should the listing include this path if present?    * @return an iterator.    * @throws IOException failure    */
annotation|@
name|Retries
operator|.
name|RetryTranslated
DECL|method|listFilesAndEmptyDirectories ( Path path, S3AFileStatus status, boolean collectTombstones, boolean includeSelf)
name|RemoteIterator
argument_list|<
name|S3ALocatedFileStatus
argument_list|>
name|listFilesAndEmptyDirectories
parameter_list|(
name|Path
name|path
parameter_list|,
name|S3AFileStatus
name|status
parameter_list|,
name|boolean
name|collectTombstones
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Copy a single object in the bucket via a COPY operation.    * There's no update of metadata, directory markers, etc.    * Callers must implement.    * @param srcKey source object path    * @param srcAttributes S3 attributes of the source object    * @param readContext the read context    * @return the result of the copy    * @throws InterruptedIOException the operation was interrupted    * @throws IOException Other IO problems    */
annotation|@
name|Retries
operator|.
name|RetryTranslated
DECL|method|copyFile (String srcKey, String destKey, S3ObjectAttributes srcAttributes, S3AReadOpContext readContext)
name|CopyResult
name|copyFile
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|String
name|destKey
parameter_list|,
name|S3ObjectAttributes
name|srcAttributes
parameter_list|,
name|S3AReadOpContext
name|readContext
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove keys from the store, updating the metastore on a    * partial delete represented as a MultiObjectDeleteException failure by    * deleting all those entries successfully deleted and then rethrowing    * the MultiObjectDeleteException.    * @param keysToDelete collection of keys to delete on the s3-backend.    *        if empty, no request is made of the object store.    * @param deleteFakeDir indicates whether this is for deleting fake dirs.    * @param undeletedObjectsOnFailure List which will be built up of all    * files that were not deleted. This happens even as an exception    * is raised.    * @param operationState bulk operation state    * @param quiet should a bulk query be quiet, or should its result list    * all deleted keys    * @return the deletion result if a multi object delete was invoked    * and it returned without a failure, else null.    * @throws InvalidRequestException if the request was rejected due to    * a mistaken attempt to delete the root directory.    * @throws MultiObjectDeleteException one or more of the keys could not    * be deleted in a multiple object delete operation.    * @throws AmazonClientException amazon-layer failure.    * @throws IOException other IO Exception.    */
annotation|@
name|Retries
operator|.
name|RetryMixed
DECL|method|removeKeys ( List<DeleteObjectsRequest.KeyVersion> keysToDelete, boolean deleteFakeDir, List<Path> undeletedObjectsOnFailure, BulkOperationState operationState, boolean quiet)
name|DeleteObjectsResult
name|removeKeys
parameter_list|(
name|List
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
name|keysToDelete
parameter_list|,
name|boolean
name|deleteFakeDir
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|undeletedObjectsOnFailure
parameter_list|,
name|BulkOperationState
name|operationState
parameter_list|,
name|boolean
name|quiet
parameter_list|)
throws|throws
name|MultiObjectDeleteException
throws|,
name|AmazonClientException
throws|,
name|IOException
function_decl|;
comment|/**    * Is the path for this instance considered authoritative on the client,    * that is: will listing/status operations only be handled by the metastore,    * with no fallback to S3.    * @param p path    * @return true iff the path is authoritative on the client.    */
DECL|method|allowAuthoritative (Path p)
name|boolean
name|allowAuthoritative
parameter_list|(
name|Path
name|p
parameter_list|)
function_decl|;
comment|/**    * Create an iterator over objects in S3 only; S3Guard    * is not involved.    * The listing includes the key itself, if found.    * @param path  path of the listing.    * @param key object key    * @return iterator with the first listing completed.    * @throws IOException failure.    */
annotation|@
name|Retries
operator|.
name|RetryTranslated
DECL|method|listObjects ( Path path, String key)
name|RemoteIterator
argument_list|<
name|S3AFileStatus
argument_list|>
name|listObjects
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

