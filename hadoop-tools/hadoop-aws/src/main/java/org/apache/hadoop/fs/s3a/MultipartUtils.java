begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ListMultipartUploadsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|MultipartUpload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|MultipartUploadListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_comment
comment|/**  * MultipartUtils upload-specific functions for use by S3AFileSystem and Hadoop  * CLI.  */
end_comment

begin_class
DECL|class|MultipartUtils
specifier|public
specifier|final
class|class
name|MultipartUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MultipartUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Not instantiated. */
DECL|method|MultipartUtils ()
specifier|private
name|MultipartUtils
parameter_list|()
block|{ }
comment|/**    * List outstanding multipart uploads.    * Package private: S3AFileSystem and tests are the users of this.    * @param s3 AmazonS3 client to use.    * @param bucketName name of S3 bucket to use.    * @param maxKeys maximum batch size to request at a time from S3.    * @param prefix optional key prefix to narrow search.  If null then whole    *               bucket will be searched.    * @return an iterator of matching uploads    */
DECL|method|listMultipartUploads (AmazonS3 s3, Invoker invoker, String bucketName, int maxKeys, @Nullable String prefix)
specifier|static
name|MultipartUtils
operator|.
name|UploadIterator
name|listMultipartUploads
parameter_list|(
name|AmazonS3
name|s3
parameter_list|,
name|Invoker
name|invoker
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|int
name|maxKeys
parameter_list|,
annotation|@
name|Nullable
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MultipartUtils
operator|.
name|UploadIterator
argument_list|(
name|s3
argument_list|,
name|invoker
argument_list|,
name|bucketName
argument_list|,
name|maxKeys
argument_list|,
name|prefix
argument_list|)
return|;
block|}
comment|/**    * Simple RemoteIterator wrapper for AWS `listMultipartUpload` API.    * Iterates over batches of multipart upload metadata listings.    */
DECL|class|ListingIterator
specifier|static
class|class
name|ListingIterator
implements|implements
name|RemoteIterator
argument_list|<
name|MultipartUploadListing
argument_list|>
block|{
DECL|field|bucketName
specifier|private
specifier|final
name|String
name|bucketName
decl_stmt|;
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|field|maxKeys
specifier|private
specifier|final
name|int
name|maxKeys
decl_stmt|;
DECL|field|s3
specifier|private
specifier|final
name|AmazonS3
name|s3
decl_stmt|;
DECL|field|invoker
specifier|private
specifier|final
name|Invoker
name|invoker
decl_stmt|;
comment|/**      * Most recent listing results.      */
DECL|field|listing
specifier|private
name|MultipartUploadListing
name|listing
decl_stmt|;
comment|/**      * Indicator that this is the first listing.      */
DECL|field|firstListing
specifier|private
name|boolean
name|firstListing
init|=
literal|true
decl_stmt|;
DECL|field|listCount
specifier|private
name|int
name|listCount
init|=
literal|1
decl_stmt|;
DECL|method|ListingIterator (AmazonS3 s3, Invoker invoker, String bucketName, int maxKeys, @Nullable String prefix)
name|ListingIterator
parameter_list|(
name|AmazonS3
name|s3
parameter_list|,
name|Invoker
name|invoker
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|int
name|maxKeys
parameter_list|,
annotation|@
name|Nullable
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|s3
operator|=
name|s3
expr_stmt|;
name|this
operator|.
name|bucketName
operator|=
name|bucketName
expr_stmt|;
name|this
operator|.
name|maxKeys
operator|=
name|maxKeys
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|invoker
operator|=
name|invoker
expr_stmt|;
name|requestNextBatch
argument_list|()
expr_stmt|;
block|}
comment|/**      * Iterator has data if it is either is the initial iteration, or      * the last listing obtained was incomplete.      * @throws IOException not thrown by this implementation.      */
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|listing
operator|==
literal|null
condition|)
block|{
comment|// shouldn't happen, but don't trust AWS SDK
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|firstListing
operator|||
name|listing
operator|.
name|isTruncated
argument_list|()
return|;
block|}
block|}
comment|/**      * Get next listing. First call, this returns initial set (possibly      * empty) obtained from S3. Subsequent calls my block on I/O or fail.      * @return next upload listing.      * @throws IOException if S3 operation fails.      * @throws NoSuchElementException if there are no more uploads.      */
annotation|@
name|Override
annotation|@
name|Retries
operator|.
name|RetryTranslated
DECL|method|next ()
specifier|public
name|MultipartUploadListing
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|firstListing
condition|)
block|{
name|firstListing
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|listing
operator|==
literal|null
operator|||
operator|!
name|listing
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
comment|// nothing more to request: fail.
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"No more uploads under "
operator|+
name|prefix
argument_list|)
throw|;
block|}
comment|// need to request a new set of objects.
name|requestNextBatch
argument_list|()
expr_stmt|;
block|}
return|return
name|listing
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Upload iterator: prefix "
operator|+
name|prefix
operator|+
literal|"; list count "
operator|+
name|listCount
operator|+
literal|"; isTruncated="
operator|+
name|listing
operator|.
name|isTruncated
argument_list|()
return|;
block|}
annotation|@
name|Retries
operator|.
name|RetryTranslated
DECL|method|requestNextBatch ()
specifier|private
name|void
name|requestNextBatch
parameter_list|()
throws|throws
name|IOException
block|{
name|ListMultipartUploadsRequest
name|req
init|=
operator|new
name|ListMultipartUploadsRequest
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|firstListing
condition|)
block|{
name|req
operator|.
name|setKeyMarker
argument_list|(
name|listing
operator|.
name|getNextKeyMarker
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setUploadIdMarker
argument_list|(
name|listing
operator|.
name|getNextUploadIdMarker
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|setMaxUploads
argument_list|(
name|listCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[{}], Requesting next {} uploads prefix {}, "
operator|+
literal|"next key {}, next upload id {}"
argument_list|,
name|listCount
argument_list|,
name|maxKeys
argument_list|,
name|prefix
argument_list|,
name|req
operator|.
name|getKeyMarker
argument_list|()
argument_list|,
name|req
operator|.
name|getUploadIdMarker
argument_list|()
argument_list|)
expr_stmt|;
name|listCount
operator|++
expr_stmt|;
name|listing
operator|=
name|invoker
operator|.
name|retry
argument_list|(
literal|"listMultipartUploads"
argument_list|,
name|prefix
argument_list|,
literal|true
argument_list|,
parameter_list|()
lambda|->
name|s3
operator|.
name|listMultipartUploads
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"New listing state: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Iterator over multipart uploads. Similar to    * {@link org.apache.hadoop.fs.s3a.Listing.FileStatusListingIterator}, but    * iterates over pending uploads instead of existing objects.    */
DECL|class|UploadIterator
specifier|public
specifier|static
class|class
name|UploadIterator
implements|implements
name|RemoteIterator
argument_list|<
name|MultipartUpload
argument_list|>
block|{
DECL|field|lister
specifier|private
name|ListingIterator
name|lister
decl_stmt|;
comment|/** Current listing: the last upload listing we fetched. */
DECL|field|listing
specifier|private
name|MultipartUploadListing
name|listing
decl_stmt|;
comment|/** Iterator over the current listing. */
DECL|field|batchIterator
specifier|private
name|ListIterator
argument_list|<
name|MultipartUpload
argument_list|>
name|batchIterator
decl_stmt|;
annotation|@
name|Retries
operator|.
name|RetryTranslated
DECL|method|UploadIterator (AmazonS3 s3, Invoker invoker, String bucketName, int maxKeys, @Nullable String prefix)
specifier|public
name|UploadIterator
parameter_list|(
name|AmazonS3
name|s3
parameter_list|,
name|Invoker
name|invoker
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|int
name|maxKeys
parameter_list|,
annotation|@
name|Nullable
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|lister
operator|=
operator|new
name|ListingIterator
argument_list|(
name|s3
argument_list|,
name|invoker
argument_list|,
name|bucketName
argument_list|,
name|maxKeys
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|requestNextBatch
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|batchIterator
operator|.
name|hasNext
argument_list|()
operator|||
name|requestNextBatch
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|MultipartUpload
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|batchIterator
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|requestNextBatch ()
specifier|private
name|boolean
name|requestNextBatch
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lister
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|listing
operator|=
name|lister
operator|.
name|next
argument_list|()
expr_stmt|;
name|batchIterator
operator|=
name|listing
operator|.
name|getMultipartUploads
argument_list|()
operator|.
name|listIterator
argument_list|()
expr_stmt|;
return|return
name|batchIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

