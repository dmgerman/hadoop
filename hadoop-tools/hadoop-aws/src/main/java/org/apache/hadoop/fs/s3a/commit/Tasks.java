begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility class for parallel execution, takes closures for the various  * actions.  * There is no retry logic: it is expected to be handled by the closures.  */
end_comment

begin_class
DECL|class|Tasks
specifier|public
specifier|final
class|class
name|Tasks
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Tasks
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|Tasks ()
specifier|private
name|Tasks
parameter_list|()
block|{   }
comment|/**    * Callback invoked to process an item.    * @param<I> item type being processed    * @param<E> exception class which may be raised    */
annotation|@
name|FunctionalInterface
DECL|interface|Task
specifier|public
interface|interface
name|Task
parameter_list|<
name|I
parameter_list|,
name|E
extends|extends
name|Exception
parameter_list|>
block|{
DECL|method|run (I item)
name|void
name|run
parameter_list|(
name|I
name|item
parameter_list|)
throws|throws
name|E
function_decl|;
block|}
comment|/**    * Callback invoked on a failure.    * @param<I> item type being processed    * @param<E> exception class which may be raised    */
annotation|@
name|FunctionalInterface
DECL|interface|FailureTask
specifier|public
interface|interface
name|FailureTask
parameter_list|<
name|I
parameter_list|,
name|E
extends|extends
name|Exception
parameter_list|>
block|{
comment|/**      * process a failure.      * @param item item the task is processing      * @param exception the exception which was raised.      * @throws E Exception of type E      */
DECL|method|run (I item, Exception exception)
name|void
name|run
parameter_list|(
name|I
name|item
parameter_list|,
name|Exception
name|exception
parameter_list|)
throws|throws
name|E
function_decl|;
block|}
comment|/**    * Builder for task execution.    * @param<I> item type    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|I
parameter_list|>
block|{
DECL|field|items
specifier|private
specifier|final
name|Iterable
argument_list|<
name|I
argument_list|>
name|items
decl_stmt|;
DECL|field|service
specifier|private
name|ExecutorService
name|service
init|=
literal|null
decl_stmt|;
DECL|field|onFailure
specifier|private
name|FailureTask
argument_list|<
name|I
argument_list|,
name|?
argument_list|>
name|onFailure
init|=
literal|null
decl_stmt|;
DECL|field|stopOnFailure
specifier|private
name|boolean
name|stopOnFailure
init|=
literal|false
decl_stmt|;
DECL|field|suppressExceptions
specifier|private
name|boolean
name|suppressExceptions
init|=
literal|false
decl_stmt|;
DECL|field|revertTask
specifier|private
name|Task
argument_list|<
name|I
argument_list|,
name|?
argument_list|>
name|revertTask
init|=
literal|null
decl_stmt|;
DECL|field|stopRevertsOnFailure
specifier|private
name|boolean
name|stopRevertsOnFailure
init|=
literal|false
decl_stmt|;
DECL|field|abortTask
specifier|private
name|Task
argument_list|<
name|I
argument_list|,
name|?
argument_list|>
name|abortTask
init|=
literal|null
decl_stmt|;
DECL|field|stopAbortsOnFailure
specifier|private
name|boolean
name|stopAbortsOnFailure
init|=
literal|false
decl_stmt|;
comment|/**      * Create the builder.      * @param items items to process      */
DECL|method|Builder (Iterable<I> items)
name|Builder
parameter_list|(
name|Iterable
argument_list|<
name|I
argument_list|>
name|items
parameter_list|)
block|{
name|this
operator|.
name|items
operator|=
name|items
expr_stmt|;
block|}
comment|/**      * Declare executor service: if null, the tasks are executed in a single      * thread.      * @param executorService service to schedule tasks with.      * @return this builder.      */
DECL|method|executeWith (ExecutorService executorService)
specifier|public
name|Builder
argument_list|<
name|I
argument_list|>
name|executeWith
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|executorService
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|onFailure (FailureTask<I, ?> task)
specifier|public
name|Builder
argument_list|<
name|I
argument_list|>
name|onFailure
parameter_list|(
name|FailureTask
argument_list|<
name|I
argument_list|,
name|?
argument_list|>
name|task
parameter_list|)
block|{
name|this
operator|.
name|onFailure
operator|=
name|task
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|stopOnFailure ()
specifier|public
name|Builder
argument_list|<
name|I
argument_list|>
name|stopOnFailure
parameter_list|()
block|{
name|this
operator|.
name|stopOnFailure
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|suppressExceptions ()
specifier|public
name|Builder
argument_list|<
name|I
argument_list|>
name|suppressExceptions
parameter_list|()
block|{
return|return
name|suppressExceptions
argument_list|(
literal|true
argument_list|)
return|;
block|}
DECL|method|suppressExceptions (boolean suppress)
specifier|public
name|Builder
argument_list|<
name|I
argument_list|>
name|suppressExceptions
parameter_list|(
name|boolean
name|suppress
parameter_list|)
block|{
name|this
operator|.
name|suppressExceptions
operator|=
name|suppress
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|revertWith (Task<I, ?> task)
specifier|public
name|Builder
argument_list|<
name|I
argument_list|>
name|revertWith
parameter_list|(
name|Task
argument_list|<
name|I
argument_list|,
name|?
argument_list|>
name|task
parameter_list|)
block|{
name|this
operator|.
name|revertTask
operator|=
name|task
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|stopRevertsOnFailure ()
specifier|public
name|Builder
argument_list|<
name|I
argument_list|>
name|stopRevertsOnFailure
parameter_list|()
block|{
name|this
operator|.
name|stopRevertsOnFailure
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|abortWith (Task<I, ?> task)
specifier|public
name|Builder
argument_list|<
name|I
argument_list|>
name|abortWith
parameter_list|(
name|Task
argument_list|<
name|I
argument_list|,
name|?
argument_list|>
name|task
parameter_list|)
block|{
name|this
operator|.
name|abortTask
operator|=
name|task
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|stopAbortsOnFailure ()
specifier|public
name|Builder
argument_list|<
name|I
argument_list|>
name|stopAbortsOnFailure
parameter_list|()
block|{
name|this
operator|.
name|stopAbortsOnFailure
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|run (Task<I, E> task)
specifier|public
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|boolean
name|run
parameter_list|(
name|Task
argument_list|<
name|I
argument_list|,
name|E
argument_list|>
name|task
parameter_list|)
throws|throws
name|E
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
return|return
name|runParallel
argument_list|(
name|task
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|runSingleThreaded
argument_list|(
name|task
argument_list|)
return|;
block|}
block|}
DECL|method|runSingleThreaded (Task<I, E> task)
specifier|private
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|boolean
name|runSingleThreaded
parameter_list|(
name|Task
argument_list|<
name|I
argument_list|,
name|E
argument_list|>
name|task
parameter_list|)
throws|throws
name|E
block|{
name|List
argument_list|<
name|I
argument_list|>
name|succeeded
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|I
argument_list|>
name|iterator
init|=
name|items
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
try|try
block|{
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|I
name|item
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|task
operator|.
name|run
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|succeeded
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|onFailure
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|onFailure
operator|.
name|run
argument_list|(
name|item
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|failException
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to clean up on failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// keep going
block|}
block|}
if|if
condition|(
name|stopOnFailure
condition|)
block|{
break|break;
block|}
block|}
block|}
name|threw
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
comment|// threw handles exceptions that were *not* caught by the catch block,
comment|// and exceptions that were caught and possibly handled by onFailure
comment|// are kept in exceptions.
if|if
condition|(
name|threw
operator|||
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|revertTask
operator|!=
literal|null
condition|)
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|I
name|item
range|:
name|succeeded
control|)
block|{
try|try
block|{
name|revertTask
operator|.
name|run
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to revert task"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
comment|// keep going
block|}
if|if
condition|(
name|stopRevertsOnFailure
operator|&&
name|failed
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|abortTask
operator|!=
literal|null
condition|)
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|abortTask
operator|.
name|run
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to abort task"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// keep going
block|}
if|if
condition|(
name|stopAbortsOnFailure
operator|&&
name|failed
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|suppressExceptions
operator|&&
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Tasks
operator|.
expr|<
name|E
operator|>
name|throwOne
argument_list|(
name|exceptions
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|threw
operator|&&
name|exceptions
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|runParallel (final Task<I, E> task)
specifier|private
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|boolean
name|runParallel
parameter_list|(
specifier|final
name|Task
argument_list|<
name|I
argument_list|,
name|E
argument_list|>
name|task
parameter_list|)
throws|throws
name|E
block|{
specifier|final
name|Queue
argument_list|<
name|I
argument_list|>
name|succeeded
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Queue
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|taskFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|abortFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|revertFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|I
name|item
range|:
name|items
control|)
block|{
comment|// submit a task for each item that will either run or abort the task
name|futures
operator|.
name|add
argument_list|(
name|service
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|stopOnFailure
operator|&&
name|taskFailed
operator|.
name|get
argument_list|()
operator|)
condition|)
block|{
comment|// run the task
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing task"
argument_list|)
expr_stmt|;
name|task
operator|.
name|run
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|succeeded
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Task succeeded"
argument_list|)
expr_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|taskFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Task failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|onFailure
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|onFailure
operator|.
name|run
argument_list|(
name|item
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|failException
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to clean up on failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// swallow the exception
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|threw
condition|)
block|{
name|taskFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|abortTask
operator|!=
literal|null
condition|)
block|{
comment|// abort the task instead of running it
if|if
condition|(
name|stopAbortsOnFailure
operator|&&
name|abortFailed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|failed
init|=
literal|true
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting task"
argument_list|)
expr_stmt|;
name|abortTask
operator|.
name|run
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to abort task"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// swallow the exception
block|}
finally|finally
block|{
if|if
condition|(
name|failed
condition|)
block|{
name|abortFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// let the above tasks complete (or abort)
name|waitFor
argument_list|(
name|futures
argument_list|)
expr_stmt|;
name|int
name|futureCount
init|=
name|futures
operator|.
name|size
argument_list|()
decl_stmt|;
name|futures
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskFailed
operator|.
name|get
argument_list|()
operator|&&
name|revertTask
operator|!=
literal|null
condition|)
block|{
comment|// at least one task failed, revert any that succeeded
name|LOG
operator|.
name|info
argument_list|(
literal|"Reverting all {} succeeded tasks from {} futures"
argument_list|,
name|succeeded
operator|.
name|size
argument_list|()
argument_list|,
name|futureCount
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|I
name|item
range|:
name|succeeded
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|service
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|stopRevertsOnFailure
operator|&&
name|revertFailed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|failed
init|=
literal|true
decl_stmt|;
try|try
block|{
name|revertTask
operator|.
name|run
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to revert task"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// swallow the exception
block|}
finally|finally
block|{
if|if
condition|(
name|failed
condition|)
block|{
name|revertFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// let the revert tasks complete
name|waitFor
argument_list|(
name|futures
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|suppressExceptions
operator|&&
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Tasks
operator|.
expr|<
name|E
operator|>
name|throwOne
argument_list|(
name|exceptions
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|taskFailed
operator|.
name|get
argument_list|()
return|;
block|}
block|}
comment|/**    * Wait for all the futures to complete; there's a small sleep between    * each iteration; enough to yield the CPU.    * @param futures futures.    */
DECL|method|waitFor (Collection<Future<?>> futures)
specifier|private
specifier|static
name|void
name|waitFor
parameter_list|(
name|Collection
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
name|int
name|size
init|=
name|futures
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for {} tasks to complete"
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|int
name|oldNumFinished
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|numFinished
init|=
operator|(
name|int
operator|)
name|futures
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Future
operator|::
name|isDone
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldNumFinished
operator|!=
name|numFinished
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished count -> {}/{}"
argument_list|,
name|numFinished
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|oldNumFinished
operator|=
name|numFinished
expr_stmt|;
block|}
if|if
condition|(
name|numFinished
operator|==
name|size
condition|)
block|{
comment|// all of the futures are done, stop looping
break|break;
block|}
else|else
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|futures
operator|.
name|forEach
argument_list|(
name|future
lambda|->
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
DECL|method|foreach (Iterable<I> items)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|>
name|Builder
argument_list|<
name|I
argument_list|>
name|foreach
parameter_list|(
name|Iterable
argument_list|<
name|I
argument_list|>
name|items
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<>
argument_list|(
name|items
argument_list|)
return|;
block|}
DECL|method|foreach (I[] items)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|>
name|Builder
argument_list|<
name|I
argument_list|>
name|foreach
parameter_list|(
name|I
index|[]
name|items
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|items
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|throwOne ( Collection<Exception> exceptions)
specifier|private
specifier|static
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|void
name|throwOne
parameter_list|(
name|Collection
argument_list|<
name|Exception
argument_list|>
name|exceptions
parameter_list|)
throws|throws
name|E
block|{
name|Iterator
argument_list|<
name|Exception
argument_list|>
name|iter
init|=
name|exceptions
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Exception
name|e
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|exceptionClass
init|=
name|e
operator|.
name|getClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Exception
name|other
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exceptionClass
operator|.
name|isInstance
argument_list|(
name|other
argument_list|)
condition|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
block|}
name|Tasks
operator|.
expr|<
name|E
operator|>
name|castAndThrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|castAndThrow (Exception e)
specifier|private
specifier|static
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|void
name|castAndThrow
parameter_list|(
name|Exception
name|e
parameter_list|)
throws|throws
name|E
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
throw|throw
operator|(
name|E
operator|)
name|e
throw|;
block|}
block|}
end_class

end_unit

