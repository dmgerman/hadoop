begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|MarshalledCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|SESSION_TOKEN_KIND
import|;
end_import

begin_comment
comment|/**  * A token identifier which contains a set of AWS session credentials,  * credentials which will be valid until they expire.  *  *<b>Note 1:</b>  * There's a risk here that the reference to {@link MarshalledCredentials}  * may trigger a transitive load of AWS classes, a load which will  * fail if the aws SDK isn't on the classpath.  *  *<b>Note 2:</b>  * This class does support subclassing, but every subclass MUST declare itself  * to be of a different token kind.  * Otherwise the process for decoding tokens breaks.  */
end_comment

begin_class
DECL|class|SessionTokenIdentifier
specifier|public
class|class
name|SessionTokenIdentifier
extends|extends
name|AbstractS3ATokenIdentifier
block|{
comment|/**    * Session credentials: initially empty but non-null.    */
DECL|field|marshalledCredentials
specifier|private
name|MarshalledCredentials
name|marshalledCredentials
init|=
operator|new
name|MarshalledCredentials
argument_list|()
decl_stmt|;
comment|/**    * Constructor for service loader use.    * Created with the kind {@link DelegationConstants#SESSION_TOKEN_KIND}.    * Subclasses MUST NOT subclass this; they must provide their own    * token kind.    */
DECL|method|SessionTokenIdentifier ()
specifier|public
name|SessionTokenIdentifier
parameter_list|()
block|{
name|super
argument_list|(
name|SESSION_TOKEN_KIND
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor for subclasses.    * @param kind kind of token identifier, for storage in the    * token kind to implementation map.    */
DECL|method|SessionTokenIdentifier (final Text kind)
specifier|protected
name|SessionTokenIdentifier
parameter_list|(
specifier|final
name|Text
name|kind
parameter_list|)
block|{
name|super
argument_list|(
name|kind
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor.    * @param kind token kind.    * @param owner token owner    * @param uri filesystem URI.    * @param marshalledCredentials credentials to marshall    * @param encryptionSecrets encryption secrets    * @param origin origin text for diagnostics.    */
DECL|method|SessionTokenIdentifier ( final Text kind, final Text owner, final URI uri, final MarshalledCredentials marshalledCredentials, final EncryptionSecrets encryptionSecrets, final String origin)
specifier|public
name|SessionTokenIdentifier
parameter_list|(
specifier|final
name|Text
name|kind
parameter_list|,
specifier|final
name|Text
name|owner
parameter_list|,
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|MarshalledCredentials
name|marshalledCredentials
parameter_list|,
specifier|final
name|EncryptionSecrets
name|encryptionSecrets
parameter_list|,
specifier|final
name|String
name|origin
parameter_list|)
block|{
name|super
argument_list|(
name|kind
argument_list|,
name|uri
argument_list|,
name|owner
argument_list|,
name|origin
argument_list|,
name|encryptionSecrets
argument_list|)
expr_stmt|;
name|this
operator|.
name|marshalledCredentials
operator|=
name|marshalledCredentials
expr_stmt|;
block|}
comment|/**    * Constructor.    * @param kind token kind.    * @param owner token owner    * @param renewer token renewer    * @param realUser real user running over proxy user    * @param uri filesystem URI.    */
DECL|method|SessionTokenIdentifier (final Text kind, final Text owner, final Text renewer, final Text realUser, final URI uri)
specifier|public
name|SessionTokenIdentifier
parameter_list|(
specifier|final
name|Text
name|kind
parameter_list|,
specifier|final
name|Text
name|owner
parameter_list|,
specifier|final
name|Text
name|renewer
parameter_list|,
specifier|final
name|Text
name|realUser
parameter_list|,
specifier|final
name|URI
name|uri
parameter_list|)
block|{
name|super
argument_list|(
name|kind
argument_list|,
name|owner
argument_list|,
name|renewer
argument_list|,
name|realUser
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (final DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|marshalledCredentials
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (final DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|marshalledCredentials
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the expiry time in seconds since 1970-01-01.    * @return the time when the AWS credentials expire.    */
annotation|@
name|Override
DECL|method|getExpiryTime ()
specifier|public
name|long
name|getExpiryTime
parameter_list|()
block|{
return|return
name|marshalledCredentials
operator|.
name|getExpiration
argument_list|()
return|;
block|}
comment|/**    * Get the marshalled credentials.    * @return marshalled AWS credentials.    */
DECL|method|getMarshalledCredentials ()
specifier|public
name|MarshalledCredentials
name|getMarshalledCredentials
parameter_list|()
block|{
return|return
name|marshalledCredentials
return|;
block|}
comment|/**    * Add the (sanitized) marshalled credentials to the string value.    * @return a string value for test assertions and debugging.    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|"; "
operator|+
name|marshalledCredentials
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

