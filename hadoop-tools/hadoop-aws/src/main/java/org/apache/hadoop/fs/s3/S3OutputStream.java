begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3
operator|.
name|INode
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|S3OutputStream
class|class
name|S3OutputStream
extends|extends
name|OutputStream
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|bufferSize
specifier|private
name|int
name|bufferSize
decl_stmt|;
DECL|field|store
specifier|private
name|FileSystemStore
name|store
decl_stmt|;
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|blockSize
specifier|private
name|long
name|blockSize
decl_stmt|;
DECL|field|backupFile
specifier|private
name|File
name|backupFile
decl_stmt|;
DECL|field|backupStream
specifier|private
name|OutputStream
name|backupStream
decl_stmt|;
DECL|field|r
specifier|private
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
init|=
literal|0
decl_stmt|;
DECL|field|filePos
specifier|private
name|long
name|filePos
init|=
literal|0
decl_stmt|;
DECL|field|bytesWrittenToBlock
specifier|private
name|int
name|bytesWrittenToBlock
init|=
literal|0
decl_stmt|;
DECL|field|outBuf
specifier|private
name|byte
index|[]
name|outBuf
decl_stmt|;
DECL|field|blocks
specifier|private
name|List
argument_list|<
name|Block
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<
name|Block
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|nextBlock
specifier|private
name|Block
name|nextBlock
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|S3OutputStream
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|S3OutputStream (Configuration conf, FileSystemStore store, Path path, long blockSize, Progressable progress, int buffersize)
specifier|public
name|S3OutputStream
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystemStore
name|store
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|int
name|buffersize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|backupFile
operator|=
name|newBackupFile
argument_list|()
expr_stmt|;
name|this
operator|.
name|backupStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|backupFile
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|buffersize
expr_stmt|;
name|this
operator|.
name|outBuf
operator|=
operator|new
name|byte
index|[
name|bufferSize
index|]
expr_stmt|;
block|}
DECL|method|newBackupFile ()
specifier|private
name|File
name|newBackupFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"fs.s3.buffer.dir"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create S3 buffer directory: "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|File
name|result
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"output-"
argument_list|,
literal|".tmp"
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|result
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|filePos
return|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|bytesWrittenToBlock
operator|+
name|pos
operator|==
name|blockSize
operator|)
operator|||
operator|(
name|pos
operator|>=
name|bufferSize
operator|)
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
name|outBuf
index|[
name|pos
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|filePos
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte b[], int off, int len)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|remaining
init|=
name|bufferSize
operator|-
name|pos
decl_stmt|;
name|int
name|toWrite
init|=
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|outBuf
argument_list|,
name|pos
argument_list|,
name|toWrite
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|toWrite
expr_stmt|;
name|off
operator|+=
name|toWrite
expr_stmt|;
name|len
operator|-=
name|toWrite
expr_stmt|;
name|filePos
operator|+=
name|toWrite
expr_stmt|;
if|if
condition|(
operator|(
name|bytesWrittenToBlock
operator|+
name|pos
operator|>=
name|blockSize
operator|)
operator|||
operator|(
name|pos
operator|==
name|bufferSize
operator|)
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|bytesWrittenToBlock
operator|+
name|pos
operator|>=
name|blockSize
condition|)
block|{
name|flushData
argument_list|(
operator|(
name|int
operator|)
name|blockSize
operator|-
name|bytesWrittenToBlock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytesWrittenToBlock
operator|==
name|blockSize
condition|)
block|{
name|endBlock
argument_list|()
expr_stmt|;
block|}
name|flushData
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
DECL|method|flushData (int maxPos)
specifier|private
specifier|synchronized
name|void
name|flushData
parameter_list|(
name|int
name|maxPos
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|workingPos
init|=
name|Math
operator|.
name|min
argument_list|(
name|pos
argument_list|,
name|maxPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|workingPos
operator|>
literal|0
condition|)
block|{
comment|//
comment|// To the local block backup, write just the bytes
comment|//
name|backupStream
operator|.
name|write
argument_list|(
name|outBuf
argument_list|,
literal|0
argument_list|,
name|workingPos
argument_list|)
expr_stmt|;
comment|//
comment|// Track position
comment|//
name|bytesWrittenToBlock
operator|+=
name|workingPos
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|outBuf
argument_list|,
name|workingPos
argument_list|,
name|outBuf
argument_list|,
literal|0
argument_list|,
name|pos
operator|-
name|workingPos
argument_list|)
expr_stmt|;
name|pos
operator|-=
name|workingPos
expr_stmt|;
block|}
block|}
DECL|method|endBlock ()
specifier|private
specifier|synchronized
name|void
name|endBlock
parameter_list|()
throws|throws
name|IOException
block|{
comment|//
comment|// Done with local copy
comment|//
name|backupStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//
comment|// Send it to S3
comment|//
comment|// TODO: Use passed in Progressable to report progress.
name|nextBlockOutputStream
argument_list|()
expr_stmt|;
name|store
operator|.
name|storeBlock
argument_list|(
name|nextBlock
argument_list|,
name|backupFile
argument_list|)
expr_stmt|;
name|internalClose
argument_list|()
expr_stmt|;
comment|//
comment|// Delete local backup, start new one
comment|//
name|boolean
name|b
init|=
name|backupFile
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring failed delete"
argument_list|)
expr_stmt|;
block|}
name|backupFile
operator|=
name|newBackupFile
argument_list|()
expr_stmt|;
name|backupStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|backupFile
argument_list|)
expr_stmt|;
name|bytesWrittenToBlock
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|nextBlockOutputStream ()
specifier|private
specifier|synchronized
name|void
name|nextBlockOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|blockId
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
while|while
condition|(
name|store
operator|.
name|blockExists
argument_list|(
name|blockId
argument_list|)
condition|)
block|{
name|blockId
operator|=
name|r
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|nextBlock
operator|=
operator|new
name|Block
argument_list|(
name|blockId
argument_list|,
name|bytesWrittenToBlock
argument_list|)
expr_stmt|;
name|blocks
operator|.
name|add
argument_list|(
name|nextBlock
argument_list|)
expr_stmt|;
name|bytesWrittenToBlock
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|internalClose ()
specifier|private
specifier|synchronized
name|void
name|internalClose
parameter_list|()
throws|throws
name|IOException
block|{
name|INode
name|inode
init|=
operator|new
name|INode
argument_list|(
name|FileType
operator|.
name|FILE
argument_list|,
name|blocks
operator|.
name|toArray
argument_list|(
operator|new
name|Block
index|[
name|blocks
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|storeINode
argument_list|(
name|path
argument_list|,
name|inode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|filePos
operator|==
literal|0
operator|||
name|bytesWrittenToBlock
operator|!=
literal|0
condition|)
block|{
name|endBlock
argument_list|()
expr_stmt|;
block|}
name|backupStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|boolean
name|b
init|=
name|backupFile
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring failed delete"
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

