begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_comment
comment|/**  * Error to indicate that a specific rename failed.  * The exit code defines the exit code to be returned in the {@code rename()}  * call.  * Target path is set to destination.  */
end_comment

begin_class
DECL|class|RenameFailedException
specifier|public
class|class
name|RenameFailedException
extends|extends
name|PathIOException
block|{
comment|/**    * Exit code to be returned.    */
DECL|field|exitCode
specifier|private
name|boolean
name|exitCode
init|=
literal|false
decl_stmt|;
DECL|method|RenameFailedException (String src, String dest, Throwable cause)
specifier|public
name|RenameFailedException
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dest
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|src
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|setOperation
argument_list|(
literal|"rename"
argument_list|)
expr_stmt|;
name|setTargetPath
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
DECL|method|RenameFailedException (String src, String dest, String error)
specifier|public
name|RenameFailedException
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dest
parameter_list|,
name|String
name|error
parameter_list|)
block|{
name|super
argument_list|(
name|src
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|setOperation
argument_list|(
literal|"rename"
argument_list|)
expr_stmt|;
name|setTargetPath
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
DECL|method|RenameFailedException (Path src, Path optionalDest, String error)
specifier|public
name|RenameFailedException
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|optionalDest
parameter_list|,
name|String
name|error
parameter_list|)
block|{
name|super
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|setOperation
argument_list|(
literal|"rename"
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionalDest
operator|!=
literal|null
condition|)
block|{
name|setTargetPath
argument_list|(
name|optionalDest
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getExitCode ()
specifier|public
name|boolean
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
comment|/**    * Set the exit code.    * @param code exit code to raise    * @return the exception    */
DECL|method|withExitCode (boolean code)
specifier|public
name|RenameFailedException
name|withExitCode
parameter_list|(
name|boolean
name|code
parameter_list|)
block|{
name|this
operator|.
name|exitCode
operator|=
name|code
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

