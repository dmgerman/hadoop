begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.files
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|ValidationFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JsonSerialization
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitUtils
operator|.
name|validateCollectionClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|ValidationFailure
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  * Persistent format for multiple pending commits.  * Contains 0 or more {@link SinglePendingCommit} entries; validation logic  * checks those values on load.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|PendingSet
specifier|public
class|class
name|PendingSet
extends|extends
name|PersistentCommitData
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PendingSet
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Supported version value: {@value}.    * If this is changed the value of {@link #serialVersionUID} will change,    * to avoid deserialization problems.    */
DECL|field|VERSION
specifier|public
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
comment|/**    * Serialization ID: {@value}.    */
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0x11000
operator|+
name|VERSION
decl_stmt|;
comment|/** Version marker. */
DECL|field|version
specifier|private
name|int
name|version
init|=
name|VERSION
decl_stmt|;
comment|/**    * Commit list.    */
DECL|field|commits
specifier|private
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|commits
decl_stmt|;
comment|/**    * Any custom extra data committer subclasses may choose to add.    */
DECL|field|extraData
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|PendingSet ()
specifier|public
name|PendingSet
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|PendingSet (int size)
specifier|public
name|PendingSet
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|commits
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a JSON serializer for this class.    * @return a serializer.    */
DECL|method|serializer ()
specifier|public
specifier|static
name|JsonSerialization
argument_list|<
name|PendingSet
argument_list|>
name|serializer
parameter_list|()
block|{
return|return
operator|new
name|JsonSerialization
argument_list|<>
argument_list|(
name|PendingSet
operator|.
name|class
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Load an instance from a file, then validate it.    * @param fs filesystem    * @param path path    * @return the loaded instance    * @throws IOException IO failure    * @throws ValidationFailure if the data is invalid    */
DECL|method|load (FileSystem fs, Path path)
specifier|public
specifier|static
name|PendingSet
name|load
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reading pending commits in file {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|PendingSet
name|instance
init|=
name|serializer
argument_list|()
operator|.
name|load
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|instance
operator|.
name|validate
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
comment|/**    * Add a commit.    * @param commit the single commit    */
DECL|method|add (SinglePendingCommit commit)
specifier|public
name|void
name|add
parameter_list|(
name|SinglePendingCommit
name|commit
parameter_list|)
block|{
name|commits
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deserialize via java Serialization API: deserialize the instance    * and then call {@link #validate()} to verify that the deserialized    * data is valid.    * @param inStream input stream    * @throws IOException IO problem or validation failure    * @throws ClassNotFoundException reflection problems    */
DECL|method|readObject (ObjectInputStream inStream)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|inStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|inStream
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
comment|/**    * Validate the data: those fields which must be non empty, must be set.    * @throws ValidationFailure if the data is invalid    */
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|ValidationFailure
block|{
name|verify
argument_list|(
name|version
operator|==
name|VERSION
argument_list|,
literal|"Wrong version: %s"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|validateCollectionClass
argument_list|(
name|extraData
operator|.
name|keySet
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|validateCollectionClass
argument_list|(
name|extraData
operator|.
name|values
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|destinations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|commits
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|validateCollectionClass
argument_list|(
name|commits
argument_list|,
name|SinglePendingCommit
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|SinglePendingCommit
name|c
range|:
name|commits
control|)
block|{
name|c
operator|.
name|validate
argument_list|()
expr_stmt|;
name|verify
argument_list|(
operator|!
name|destinations
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getDestinationKey
argument_list|()
argument_list|)
argument_list|,
literal|"Destination %s is written to by more than one pending commit"
argument_list|,
name|c
operator|.
name|getDestinationKey
argument_list|()
argument_list|)
expr_stmt|;
name|destinations
operator|.
name|add
argument_list|(
name|c
operator|.
name|getDestinationKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toBytes ()
specifier|public
name|byte
index|[]
name|toBytes
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|serializer
argument_list|()
operator|.
name|toBytes
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Number of commits.    * @return the number of commits in this structure.    */
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|commits
operator|!=
literal|null
condition|?
name|commits
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|save (FileSystem fs, Path path, boolean overwrite)
specifier|public
name|void
name|save
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|serializer
argument_list|()
operator|.
name|save
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|this
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
comment|/** @return the version marker. */
DECL|method|getVersion ()
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|setVersion (int version)
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/**    * @return commit list.    */
DECL|method|getCommits ()
specifier|public
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|getCommits
parameter_list|()
block|{
return|return
name|commits
return|;
block|}
DECL|method|setCommits (List<SinglePendingCommit> commits)
specifier|public
name|void
name|setCommits
parameter_list|(
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|commits
parameter_list|)
block|{
name|this
operator|.
name|commits
operator|=
name|commits
expr_stmt|;
block|}
block|}
end_class

end_unit

