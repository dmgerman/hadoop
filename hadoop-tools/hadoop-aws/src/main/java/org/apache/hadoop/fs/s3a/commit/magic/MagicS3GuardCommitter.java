begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.magic
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|magic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Invoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|AbstractS3ACommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitUtilsWithMR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
operator|.
name|PendingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
operator|.
name|SinglePendingCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DurationInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|MagicCommitPaths
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitUtilsWithMR
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This is a dedicated committer which requires the "magic" directory feature  * of the S3A Filesystem to be enabled; it then uses paths for task and job  * attempts in magic paths, so as to ensure that the final output goes direct  * to the destination directory.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|MagicS3GuardCommitter
specifier|public
class|class
name|MagicS3GuardCommitter
extends|extends
name|AbstractS3ACommitter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MagicS3GuardCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Name: {@value}. */
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
name|CommitConstants
operator|.
name|COMMITTER_NAME_MAGIC
decl_stmt|;
comment|/**    * Create a task committer.    * @param outputPath the job's output path    * @param context the task's context    * @throws IOException on a failure    */
DECL|method|MagicS3GuardCommitter (Path outputPath, TaskAttemptContext context)
specifier|public
name|MagicS3GuardCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|setWorkPath
argument_list|(
name|getTaskAttemptPath
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|verifyIsMagicCommitPath
argument_list|(
name|getDestS3AFS
argument_list|()
argument_list|,
name|getWorkPath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Task attempt {} has work path {}"
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|getWorkPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
comment|/**    * Require magic paths in the FS client.    * @return true, always.    */
annotation|@
name|Override
DECL|method|requiresDelayedCommitOutputInFileSystem ()
specifier|protected
name|boolean
name|requiresDelayedCommitOutputInFileSystem
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|setupJob (JobContext context)
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DurationInfo
name|d
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Setup Job %s"
argument_list|,
name|jobIdString
argument_list|(
name|context
argument_list|)
argument_list|)
init|)
block|{
name|Path
name|jobAttemptPath
init|=
name|getJobAttemptPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|getDestinationFS
argument_list|(
name|jobAttemptPath
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|jobAttemptPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the list of pending uploads for this job attempt, by listing    * all .pendingset files in the job attempt directory.    * @param context job context    * @return a list of pending commits.    * @throws IOException Any IO failure    */
DECL|method|listPendingUploadsToCommit ( JobContext context)
specifier|protected
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|listPendingUploadsToCommit
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|getDestFS
argument_list|()
decl_stmt|;
return|return
name|loadPendingsetFiles
argument_list|(
name|context
argument_list|,
literal|false
argument_list|,
name|fs
argument_list|,
name|listAndFilter
argument_list|(
name|fs
argument_list|,
name|getJobAttemptPath
argument_list|(
name|context
argument_list|)
argument_list|,
literal|false
argument_list|,
name|CommitOperations
operator|.
name|PENDINGSET_FILTER
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Delete the magic directory.    */
DECL|method|cleanupStagingDirs ()
specifier|public
name|void
name|cleanupStagingDirs
parameter_list|()
block|{
name|Path
name|path
init|=
name|magicSubdir
argument_list|(
name|getOutputPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|DurationInfo
name|ignored
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|true
argument_list|,
literal|"Deleting magic directory %s"
argument_list|,
name|path
argument_list|)
init|)
block|{
name|Invoker
operator|.
name|ignoreIOExceptions
argument_list|(
name|LOG
argument_list|,
literal|"cleanup magic directory"
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|deleteWithWarning
argument_list|(
name|getDestFS
argument_list|()
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setupTask (TaskAttemptContext context)
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DurationInfo
name|d
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Setup Task %s"
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
init|)
block|{
name|Path
name|taskAttemptPath
init|=
name|getTaskAttemptPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|taskAttemptPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|taskAttemptPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Did this task write any files in the work directory?    * Probes for a task existing by looking to see if the attempt dir exists.    * This adds more HTTP requests to the call. It may be better just to    * return true and rely on the commit task doing the work.    * @param context the task's context    * @return true if the attempt path exists    * @throws IOException failure to list the path    */
annotation|@
name|Override
DECL|method|needsTaskCommit (TaskAttemptContext context)
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|taskAttemptPath
init|=
name|getTaskAttemptPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
try|try
init|(
name|DurationInfo
name|d
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"needsTaskCommit task %s"
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
init|)
block|{
return|return
name|taskAttemptPath
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|(
name|taskAttemptPath
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|commitTask (TaskAttemptContext context)
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DurationInfo
name|d
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Commit task %s"
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
init|)
block|{
name|PendingSet
name|commits
init|=
name|innerCommitTask
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Task {} committed {} files"
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getCommitOperations
argument_list|()
operator|.
name|taskCompleted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
comment|// delete the task attempt so there's no possibility of a second attempt
name|deleteTaskAttemptPathQuietly
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|getCommitOperations
argument_list|()
operator|.
name|taskCompleted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inner routine for committing a task.    * The list of pending commits is loaded and then saved to the job attempt    * dir.    * Failure to load any file or save the final file triggers an abort of    * all known pending commits.    * @param context context    * @return the summary file    * @throws IOException exception    */
DECL|method|innerCommitTask ( TaskAttemptContext context)
specifier|private
name|PendingSet
name|innerCommitTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|taskAttemptPath
init|=
name|getTaskAttemptPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
comment|// load in all pending commits.
name|CommitOperations
name|actions
init|=
name|getCommitOperations
argument_list|()
decl_stmt|;
name|Pair
argument_list|<
name|PendingSet
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|LocatedFileStatus
argument_list|,
name|IOException
argument_list|>
argument_list|>
argument_list|>
name|loaded
init|=
name|actions
operator|.
name|loadSinglePendingCommits
argument_list|(
name|taskAttemptPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PendingSet
name|pendingSet
init|=
name|loaded
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|LocatedFileStatus
argument_list|,
name|IOException
argument_list|>
argument_list|>
name|failures
init|=
name|loaded
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|failures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// At least one file failed to load
comment|// revert all which did; report failure with first exception
name|LOG
operator|.
name|error
argument_list|(
literal|"At least one commit file could not be read: failing"
argument_list|)
expr_stmt|;
name|abortPendingUploads
argument_list|(
name|context
argument_list|,
name|pendingSet
operator|.
name|getCommits
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
name|failures
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
throw|;
block|}
comment|// patch in IDs
name|String
name|jobId
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|context
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|taskId
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SinglePendingCommit
name|commit
range|:
name|pendingSet
operator|.
name|getCommits
argument_list|()
control|)
block|{
name|commit
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setTaskId
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
block|}
name|Path
name|jobAttemptPath
init|=
name|getJobAttemptPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|taskAttemptID
init|=
name|context
operator|.
name|getTaskAttemptID
argument_list|()
decl_stmt|;
name|Path
name|taskOutcomePath
init|=
operator|new
name|Path
argument_list|(
name|jobAttemptPath
argument_list|,
name|taskAttemptID
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|CommitConstants
operator|.
name|PENDINGSET_SUFFIX
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Saving work of {} to {}"
argument_list|,
name|taskAttemptID
argument_list|,
name|taskOutcomePath
argument_list|)
expr_stmt|;
try|try
block|{
name|pendingSet
operator|.
name|save
argument_list|(
name|getDestFS
argument_list|()
argument_list|,
name|taskOutcomePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to save task commit data to {} "
argument_list|,
name|taskOutcomePath
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|abortPendingUploads
argument_list|(
name|context
argument_list|,
name|pendingSet
operator|.
name|getCommits
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|pendingSet
return|;
block|}
comment|/**    * Abort a task. Attempt load then abort all pending files,    * then try to delete the task attempt path.    * This method may be called on the job committer, rather than the    * task one (such as in the MapReduce AM after a task container failure).    * It must extract all paths and state from the passed in context.    * @param context task context    * @throws IOException if there was some problem querying the path other    * than it not actually existing.    */
annotation|@
name|Override
DECL|method|abortTask (TaskAttemptContext context)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|attemptPath
init|=
name|getTaskAttemptPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
try|try
init|(
name|DurationInfo
name|d
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Abort task %s"
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
init|)
block|{
name|getCommitOperations
argument_list|()
operator|.
name|abortAllSinglePendingCommits
argument_list|(
name|attemptPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteQuietly
argument_list|(
name|attemptPath
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|attemptPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compute the path where the output of a given job attempt will be placed.    * @param appAttemptId the ID of the application attempt for this job.    * @return the path to store job attempt data.    */
DECL|method|getJobAttemptPath (int appAttemptId)
specifier|protected
name|Path
name|getJobAttemptPath
parameter_list|(
name|int
name|appAttemptId
parameter_list|)
block|{
return|return
name|getMagicJobAttemptPath
argument_list|(
name|appAttemptId
argument_list|,
name|getOutputPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Compute the path where the output of a task attempt is stored until    * that task is committed.    *    * @param context the context of the task attempt.    * @return the path where a task attempt should be stored.    */
DECL|method|getTaskAttemptPath (TaskAttemptContext context)
specifier|public
name|Path
name|getTaskAttemptPath
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
block|{
return|return
name|getMagicTaskAttemptPath
argument_list|(
name|context
argument_list|,
name|getOutputPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBaseTaskAttemptPath (TaskAttemptContext context)
specifier|protected
name|Path
name|getBaseTaskAttemptPath
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
block|{
return|return
name|getBaseMagicTaskAttemptPath
argument_list|(
name|context
argument_list|,
name|getOutputPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get a temporary directory for data. When a task is aborted/cleaned    * up, the contents of this directory are all deleted.    * @param context task context    * @return a path for temporary data.    */
DECL|method|getTempTaskAttemptPath (TaskAttemptContext context)
specifier|public
name|Path
name|getTempTaskAttemptPath
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
block|{
return|return
name|CommitUtilsWithMR
operator|.
name|getTempTaskAttemptPath
argument_list|(
name|context
argument_list|,
name|getOutputPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"MagicCommitter{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

