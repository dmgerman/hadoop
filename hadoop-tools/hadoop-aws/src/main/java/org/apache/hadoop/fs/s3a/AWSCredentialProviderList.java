begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AnonymousAWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A list of providers.  *  * This is similar to the AWS SDK {@code AWSCredentialsProviderChain},  * except that:  *<ol>  *<li>Allows extra providers to be added dynamically.</li>  *<li>If any provider in the chain throws an exception other than  *   an {@link AmazonClientException}, that is rethrown, rather than  *   swallowed.</li>  *<li>Has some more diagnostics.</li>  *<li>On failure, the last AmazonClientException raised is rethrown.</li>  *<li>Special handling of {@link AnonymousAWSCredentials}.</li>  *</ol>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|AWSCredentialProviderList
specifier|public
class|class
name|AWSCredentialProviderList
implements|implements
name|AWSCredentialsProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AWSCredentialProviderList
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NO_AWS_CREDENTIAL_PROVIDERS
specifier|public
specifier|static
specifier|final
name|String
name|NO_AWS_CREDENTIAL_PROVIDERS
init|=
literal|"No AWS Credential Providers"
decl_stmt|;
DECL|field|providers
specifier|private
specifier|final
name|List
argument_list|<
name|AWSCredentialsProvider
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|reuseLastProvider
specifier|private
name|boolean
name|reuseLastProvider
init|=
literal|true
decl_stmt|;
DECL|field|lastProvider
specifier|private
name|AWSCredentialsProvider
name|lastProvider
decl_stmt|;
comment|/**    * Empty instance. This is not ready to be used.    */
DECL|method|AWSCredentialProviderList ()
specifier|public
name|AWSCredentialProviderList
parameter_list|()
block|{   }
comment|/**    * Create with an initial list of providers.    * @param providers provider list.    */
DECL|method|AWSCredentialProviderList ( Collection<AWSCredentialsProvider> providers)
specifier|public
name|AWSCredentialProviderList
parameter_list|(
name|Collection
argument_list|<
name|AWSCredentialsProvider
argument_list|>
name|providers
parameter_list|)
block|{
name|this
operator|.
name|providers
operator|.
name|addAll
argument_list|(
name|providers
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a new provider.    * @param p provider    */
DECL|method|add (AWSCredentialsProvider p)
specifier|public
name|void
name|add
parameter_list|(
name|AWSCredentialsProvider
name|p
parameter_list|)
block|{
name|providers
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reuse the last provider?    * @param reuseLastProvider flag to indicate the last provider should    * be re-used    */
DECL|method|setReuseLastProvider (boolean reuseLastProvider)
specifier|public
name|void
name|setReuseLastProvider
parameter_list|(
name|boolean
name|reuseLastProvider
parameter_list|)
block|{
name|this
operator|.
name|reuseLastProvider
operator|=
name|reuseLastProvider
expr_stmt|;
block|}
comment|/**    * query the {@link #reuseLastProvider} flag.    * @return the current flag state.    */
DECL|method|isReuseLastProvider ()
specifier|public
name|boolean
name|isReuseLastProvider
parameter_list|()
block|{
return|return
name|reuseLastProvider
return|;
block|}
comment|/**    * Refresh all child entries.    */
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{
for|for
control|(
name|AWSCredentialsProvider
name|provider
range|:
name|providers
control|)
block|{
name|provider
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Iterate through the list of providers, to find one with credentials.    * If {@link #reuseLastProvider} is true, then it is re-used.    * @return a set of credentials (possibly anonymous), for authenticating.    */
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|AWSCredentials
name|getCredentials
parameter_list|()
block|{
name|checkNotEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
name|reuseLastProvider
operator|&&
name|lastProvider
operator|!=
literal|null
condition|)
block|{
return|return
name|lastProvider
operator|.
name|getCredentials
argument_list|()
return|;
block|}
name|AmazonClientException
name|lastException
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AWSCredentialsProvider
name|provider
range|:
name|providers
control|)
block|{
try|try
block|{
name|AWSCredentials
name|credentials
init|=
name|provider
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|credentials
operator|.
name|getAWSAccessKeyId
argument_list|()
operator|!=
literal|null
operator|&&
name|credentials
operator|.
name|getAWSSecretKey
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|credentials
operator|instanceof
name|AnonymousAWSCredentials
operator|)
condition|)
block|{
name|lastProvider
operator|=
name|provider
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using credentials from {}"
argument_list|,
name|provider
argument_list|)
expr_stmt|;
return|return
name|credentials
return|;
block|}
block|}
catch|catch
parameter_list|(
name|AmazonClientException
name|e
parameter_list|)
block|{
name|lastException
operator|=
name|e
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"No credentials provided by {}: {}"
argument_list|,
name|provider
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no providers had any credentials. Rethrow the last exception
comment|// or create a new one.
name|String
name|message
init|=
literal|"No AWS Credentials provided by "
operator|+
name|listProviderNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastException
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|": "
operator|+
name|lastException
expr_stmt|;
block|}
throw|throw
operator|new
name|AmazonClientException
argument_list|(
name|message
argument_list|,
name|lastException
argument_list|)
throw|;
block|}
comment|/**    * Returns the underlying list of providers.    *    * @return providers    */
annotation|@
name|VisibleForTesting
DECL|method|getProviders ()
name|List
argument_list|<
name|AWSCredentialsProvider
argument_list|>
name|getProviders
parameter_list|()
block|{
return|return
name|providers
return|;
block|}
comment|/**    * Verify that the provider list is not empty.    * @throws AmazonClientException if there are no providers.    */
DECL|method|checkNotEmpty ()
specifier|public
name|void
name|checkNotEmpty
parameter_list|()
block|{
if|if
condition|(
name|providers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AmazonClientException
argument_list|(
name|NO_AWS_CREDENTIAL_PROVIDERS
argument_list|)
throw|;
block|}
block|}
comment|/**    * List all the providers' names.    * @return a list of names, separated by spaces (with a trailing one).    * If there are no providers, "" is returned.    */
DECL|method|listProviderNames ()
specifier|public
name|String
name|listProviderNames
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|providers
operator|.
name|size
argument_list|()
operator|*
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|AWSCredentialsProvider
name|provider
range|:
name|providers
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|provider
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * The string value is this class name and the string values of nested    * providers.    * @return a string value for debugging.    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AWSCredentialProviderList: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|providers
argument_list|,
literal|" "
argument_list|)
return|;
block|}
block|}
end_class

end_unit

