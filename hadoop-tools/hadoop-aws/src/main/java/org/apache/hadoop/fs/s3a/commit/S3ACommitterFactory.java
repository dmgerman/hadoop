begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|magic
operator|.
name|MagicS3GuardCommitterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|DirectoryStagingCommitterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|PartitionedStagingCommitterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingCommitterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|PathOutputCommitter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The S3A committer factory which chooses the committer based on the  * specific option chosen in a per-bucket basis from the property  * {@link CommitConstants#FS_S3A_COMMITTER_NAME}.  *  * This should be instantiated by using the property value {@link #CLASSNAME}  * as the committer for the job, then set the filesystem property  * {@link CommitConstants#FS_S3A_COMMITTER_NAME} to one of  *<ul>  *<li>{@link CommitConstants#COMMITTER_NAME_FILE}: File committer.</li>  *<li>{@link CommitConstants#COMMITTER_NAME_DIRECTORY}:  *   Staging directory committer.</li>  *<li>{@link CommitConstants#COMMITTER_NAME_PARTITIONED}:  *   Staging partitioned committer.</li>  *<li>{@link CommitConstants#COMMITTER_NAME_MAGIC}:  *   the "Magic" committer</li>  *<li>{@link InternalCommitterConstants#COMMITTER_NAME_STAGING}:  *   the "staging" committer, which isn't intended for use outside tests.</li>  *</ul>  * There are no checks to verify that the filesystem is compatible with  * the committer.  */
end_comment

begin_class
DECL|class|S3ACommitterFactory
specifier|public
class|class
name|S3ACommitterFactory
extends|extends
name|AbstractS3ACommitterFactory
block|{
comment|/**    * Name of this class: {@value}.    */
DECL|field|CLASSNAME
specifier|public
specifier|static
specifier|final
name|String
name|CLASSNAME
init|=
literal|"org.apache.hadoop.fs.s3a.commit.S3ACommitterFactory"
decl_stmt|;
comment|/**    * Create a task committer.    * @param fileSystem destination FS.    * @param outputPath final output path for work    * @param context job context    * @return a committer    * @throws IOException instantiation failure    */
annotation|@
name|Override
DECL|method|createTaskCommitter (S3AFileSystem fileSystem, Path outputPath, TaskAttemptContext context)
specifier|public
name|PathOutputCommitter
name|createTaskCommitter
parameter_list|(
name|S3AFileSystem
name|fileSystem
parameter_list|,
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|AbstractS3ACommitterFactory
name|factory
init|=
name|chooseCommitterFactory
argument_list|(
name|fileSystem
argument_list|,
name|outputPath
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|factory
operator|!=
literal|null
condition|?
name|factory
operator|.
name|createTaskCommitter
argument_list|(
name|fileSystem
argument_list|,
name|outputPath
argument_list|,
name|context
argument_list|)
else|:
name|createFileOutputCommitter
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
return|;
block|}
comment|/**    * Choose a committer from the FS and task configurations. Task Configuration    * takes priority, allowing execution engines to dynamically change    * committer on a query-by-query basis.    * @param fileSystem FS    * @param outputPath destination path    * @param taskConf configuration from the task    * @return An S3A committer if chosen, or "null" for the classic value    * @throws PathCommitException on a failure to identify the committer    */
DECL|method|chooseCommitterFactory ( S3AFileSystem fileSystem, Path outputPath, Configuration taskConf)
specifier|private
name|AbstractS3ACommitterFactory
name|chooseCommitterFactory
parameter_list|(
name|S3AFileSystem
name|fileSystem
parameter_list|,
name|Path
name|outputPath
parameter_list|,
name|Configuration
name|taskConf
parameter_list|)
throws|throws
name|PathCommitException
block|{
name|AbstractS3ACommitterFactory
name|factory
decl_stmt|;
comment|// the FS conf will have had its per-bucket values resolved, unlike
comment|// job/task configurations.
name|Configuration
name|fsConf
init|=
name|fileSystem
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|fsConf
operator|.
name|getTrimmed
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|,
name|COMMITTER_NAME_FILE
argument_list|)
decl_stmt|;
name|name
operator|=
name|taskConf
operator|.
name|getTrimmed
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|name
condition|)
block|{
case|case
name|COMMITTER_NAME_FILE
case|:
name|factory
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|COMMITTER_NAME_DIRECTORY
case|:
name|factory
operator|=
operator|new
name|DirectoryStagingCommitterFactory
argument_list|()
expr_stmt|;
break|break;
case|case
name|COMMITTER_NAME_PARTITIONED
case|:
name|factory
operator|=
operator|new
name|PartitionedStagingCommitterFactory
argument_list|()
expr_stmt|;
break|break;
case|case
name|COMMITTER_NAME_MAGIC
case|:
name|factory
operator|=
operator|new
name|MagicS3GuardCommitterFactory
argument_list|()
expr_stmt|;
break|break;
case|case
name|InternalCommitterConstants
operator|.
name|COMMITTER_NAME_STAGING
case|:
name|factory
operator|=
operator|new
name|StagingCommitterFactory
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|PathCommitException
argument_list|(
name|outputPath
argument_list|,
literal|"Unknown committer: \""
operator|+
name|name
operator|+
literal|"\""
argument_list|)
throw|;
block|}
return|return
name|factory
return|;
block|}
block|}
end_class

end_unit

