begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|xspec
operator|.
name|ExpressionSpecBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|LauncherExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|ServiceLaunchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|ServiceLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DurationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DumpS3GuardDynamoTable
operator|.
name|serviceMain
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|PathMetadataDynamoDBTranslation
operator|.
name|PARENT
import|;
end_import

begin_comment
comment|/**  * Purge the S3Guard table of a FileSystem from all entries related to  * that table.  * Will fail if there is no table, or the store is in auth mode.  *<pre>  *   hadoop org.apache.hadoop.fs.s3a.s3guard.PurgeS3GuardDynamoTable \  *   -force s3a://example-bucket/  *</pre>  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|PurgeS3GuardDynamoTable
specifier|public
class|class
name|PurgeS3GuardDynamoTable
extends|extends
name|AbstractS3GuardDynamoDBDiagnostic
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PurgeS3GuardDynamoTable
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"PurgeS3GuardDynamoTable"
decl_stmt|;
comment|/**    * Name of the force option.    */
DECL|field|FORCE
specifier|public
specifier|static
specifier|final
name|String
name|FORCE
init|=
literal|"-force"
decl_stmt|;
comment|/**    * Usage message.    */
DECL|field|USAGE_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE_MESSAGE
init|=
name|NAME
operator|+
literal|" [-force]<filesystem>"
decl_stmt|;
comment|/**    * Flag which actually triggers the delete.    */
DECL|field|force
specifier|private
name|boolean
name|force
decl_stmt|;
DECL|field|filesFound
specifier|private
name|long
name|filesFound
decl_stmt|;
DECL|field|filesDeleted
specifier|private
name|long
name|filesDeleted
decl_stmt|;
DECL|method|PurgeS3GuardDynamoTable (final String name)
specifier|public
name|PurgeS3GuardDynamoTable
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|PurgeS3GuardDynamoTable ()
specifier|public
name|PurgeS3GuardDynamoTable
parameter_list|()
block|{
name|this
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|PurgeS3GuardDynamoTable ( final S3AFileSystem filesystem, final DynamoDBMetadataStore store, final URI uri, final boolean force)
specifier|public
name|PurgeS3GuardDynamoTable
parameter_list|(
specifier|final
name|S3AFileSystem
name|filesystem
parameter_list|,
specifier|final
name|DynamoDBMetadataStore
name|store
parameter_list|,
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|boolean
name|force
parameter_list|)
block|{
name|super
argument_list|(
name|NAME
argument_list|,
name|filesystem
argument_list|,
name|store
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|this
operator|.
name|force
operator|=
name|force
expr_stmt|;
block|}
comment|/**    * Bind to the argument list, including validating the CLI.    * @throws Exception failure.    */
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getStore
argument_list|()
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|arg
init|=
name|getArgumentList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|USAGE_MESSAGE
argument_list|)
decl_stmt|;
name|String
name|fsURI
init|=
name|arg
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
if|if
condition|(
operator|!
name|arg
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|FORCE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServiceLaunchException
argument_list|(
name|LauncherExitCodes
operator|.
name|EXIT_USAGE
argument_list|,
name|USAGE_MESSAGE
argument_list|)
throw|;
block|}
name|force
operator|=
literal|true
expr_stmt|;
name|fsURI
operator|=
name|arg
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|bindFromCLI
argument_list|(
name|fsURI
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Extract the host from the FS URI, then scan and    * delete all entries from that bucket.    * @return the exit code.    * @throws ServiceLaunchException on failure.    */
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|ServiceLaunchException
block|{
name|URI
name|uri
init|=
name|getUri
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|"/"
operator|+
name|host
operator|+
literal|"/"
decl_stmt|;
name|DynamoDBMetadataStore
name|ddbms
init|=
name|getStore
argument_list|()
decl_stmt|;
name|S3GuardTableAccess
name|tableAccess
init|=
operator|new
name|S3GuardTableAccess
argument_list|(
name|ddbms
argument_list|)
decl_stmt|;
name|ExpressionSpecBuilder
name|builder
init|=
operator|new
name|ExpressionSpecBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|withKeyCondition
argument_list|(
name|ExpressionSpecBuilder
operator|.
name|S
argument_list|(
name|PARENT
argument_list|)
operator|.
name|beginsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanning for entries with prefix {} to delete from {}"
argument_list|,
name|prefix
argument_list|,
name|ddbms
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|DDBPathMetadata
argument_list|>
name|entries
init|=
name|tableAccess
operator|.
name|scanMetadata
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|entries
operator|.
name|iterator
argument_list|()
operator|.
name|forEachRemaining
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|S3GuardTableAccess
operator|.
name|VersionMarker
operator|)
condition|)
block|{
name|Path
name|p
init|=
name|e
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|e
operator|.
name|getFileStatus
argument_list|()
operator|.
name|isFile
argument_list|()
condition|?
literal|"file"
else|:
literal|"directory"
decl_stmt|;
name|boolean
name|tombstone
init|=
name|e
operator|.
name|isDeleted
argument_list|()
decl_stmt|;
if|if
condition|(
name|tombstone
condition|)
block|{
name|type
operator|=
literal|"tombstone "
operator|+
name|type
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"{} {}"
argument_list|,
name|type
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|filesFound
operator|=
name|count
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} entries{}"
argument_list|,
name|count
argument_list|,
operator|(
name|count
operator|==
literal|0
condition|?
literal|" -nothing to purge"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|force
condition|)
block|{
name|DurationInfo
name|duration
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"deleting %s entries from %s"
argument_list|,
name|count
argument_list|,
name|ddbms
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|tableAccess
operator|.
name|delete
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|duration
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|durationMillis
init|=
name|duration
operator|.
name|value
argument_list|()
decl_stmt|;
name|long
name|timePerEntry
init|=
name|durationMillis
operator|/
name|count
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per entry: {} ms"
argument_list|,
name|timePerEntry
argument_list|)
expr_stmt|;
name|filesDeleted
operator|=
name|count
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Delete process will only be executed when "
operator|+
name|FORCE
operator|+
literal|" is set"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|LauncherExitCodes
operator|.
name|EXIT_SUCCESS
return|;
block|}
comment|/**    * This is the Main entry point for the service launcher.    *    * Converts the arguments to a list, instantiates a instance of the class    * then executes it.    * @param args command line arguments.    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|serviceMain
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|,
operator|new
name|PurgeS3GuardDynamoTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
name|ExitUtil
operator|.
name|terminate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * API Entry point to dump the metastore and S3 store world views    *<p>    * Both the FS and the store will be dumped: the store is scanned    * before and after the sequence to show what changes were made to    * the store during the list operation.    * @param fs fs to dump. If null a store must be provided.    * @param store store to dump (fallback to FS)    * @param conf configuration to use (fallback to fs)    * @param uri URI of store -only needed if FS is null.    * @param force force the actual delete    * @return (filesFound, filesDeleted)    * @throws ExitUtil.ExitException failure.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|method|purgeStore ( @ullable final S3AFileSystem fs, @Nullable DynamoDBMetadataStore store, @Nullable Configuration conf, @Nullable URI uri, boolean force)
specifier|public
specifier|static
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|purgeStore
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|S3AFileSystem
name|fs
parameter_list|,
annotation|@
name|Nullable
name|DynamoDBMetadataStore
name|store
parameter_list|,
annotation|@
name|Nullable
name|Configuration
name|conf
parameter_list|,
annotation|@
name|Nullable
name|URI
name|uri
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|ExitUtil
operator|.
name|ExitException
block|{
name|ServiceLauncher
argument_list|<
name|Service
argument_list|>
name|serviceLauncher
init|=
operator|new
name|ServiceLauncher
argument_list|<>
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|checkNotNull
argument_list|(
name|fs
argument_list|,
literal|"No filesystem"
argument_list|)
operator|.
name|getConf
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|store
operator|=
operator|(
name|DynamoDBMetadataStore
operator|)
name|checkNotNull
argument_list|(
name|fs
argument_list|,
literal|"No filesystem"
argument_list|)
operator|.
name|getMetadataStore
argument_list|()
expr_stmt|;
block|}
name|PurgeS3GuardDynamoTable
name|purge
init|=
operator|new
name|PurgeS3GuardDynamoTable
argument_list|(
name|fs
argument_list|,
name|store
argument_list|,
name|uri
argument_list|,
name|force
argument_list|)
decl_stmt|;
name|ExitUtil
operator|.
name|ExitException
name|ex
init|=
name|serviceLauncher
operator|.
name|launchService
argument_list|(
name|conf
argument_list|,
name|purge
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
operator|&&
name|ex
operator|.
name|getExitCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
return|return
name|Pair
operator|.
name|of
argument_list|(
name|purge
operator|.
name|filesFound
argument_list|,
name|purge
operator|.
name|filesDeleted
argument_list|)
return|;
block|}
block|}
end_class

end_unit

