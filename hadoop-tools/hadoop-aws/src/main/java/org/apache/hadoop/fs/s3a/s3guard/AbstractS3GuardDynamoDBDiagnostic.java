begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|AbstractLaunchableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|ServiceLaunchException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_FAIL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_USAGE
import|;
end_import

begin_comment
comment|/**  * Entry point for S3Guard diagnostics operations against DynamoDB tables.  */
end_comment

begin_class
DECL|class|AbstractS3GuardDynamoDBDiagnostic
specifier|public
class|class
name|AbstractS3GuardDynamoDBDiagnostic
extends|extends
name|AbstractLaunchableService
block|{
DECL|field|filesystem
specifier|private
name|S3AFileSystem
name|filesystem
decl_stmt|;
DECL|field|store
specifier|private
name|DynamoDBMetadataStore
name|store
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|arguments
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|arguments
decl_stmt|;
comment|/**    * Constructor.    * @param name entry point name.    */
DECL|method|AbstractS3GuardDynamoDBDiagnostic (final String name)
specifier|public
name|AbstractS3GuardDynamoDBDiagnostic
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor. If the store is set then that is the store for the operation,    * otherwise the filesystem's binding is used instead.    * @param name entry point name.    * @param filesystem filesystem    * @param store optional metastore.    * @param uri URI. Must be set if filesystem == null.    */
DECL|method|AbstractS3GuardDynamoDBDiagnostic ( final String name, @Nullable final S3AFileSystem filesystem, @Nullable final DynamoDBMetadataStore store, @Nullable final URI uri)
specifier|public
name|AbstractS3GuardDynamoDBDiagnostic
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|S3AFileSystem
name|filesystem
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|DynamoDBMetadataStore
name|store
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|URI
name|uri
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|filesystem
operator|=
name|filesystem
expr_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|require
argument_list|(
name|filesystem
operator|!=
literal|null
argument_list|,
literal|"No filesystem or URI"
argument_list|)
expr_stmt|;
name|bindStore
argument_list|(
name|filesystem
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|require
argument_list|(
name|filesystem
operator|!=
literal|null
argument_list|,
literal|"No filesystem or URI"
argument_list|)
expr_stmt|;
name|setUri
argument_list|(
name|filesystem
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Require a condition to hold, otherwise an exception is thrown.    * @param condition condition to be true    * @param error text on failure.    * @throws ServiceLaunchException if the condition is not met    */
DECL|method|require (boolean condition, String error)
specifier|protected
specifier|static
name|void
name|require
parameter_list|(
name|boolean
name|condition
parameter_list|,
name|String
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|condition
condition|)
block|{
throw|throw
name|failure
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
comment|/**    * Generate a failure exception for throwing.    * @param message message    * @param ex optional nested exception.    * @return an exception to throw    */
DECL|method|failure (String message, Throwable ex)
specifier|protected
specifier|static
name|ServiceLaunchException
name|failure
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|ex
parameter_list|)
block|{
return|return
operator|new
name|ServiceLaunchException
argument_list|(
name|EXIT_FAIL
argument_list|,
name|message
argument_list|,
name|ex
argument_list|)
return|;
block|}
comment|/**    * Generate a failure exception for throwing.    * @param message message    * @return an exception to throw    */
DECL|method|failure (String message)
specifier|protected
specifier|static
name|ServiceLaunchException
name|failure
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|ServiceLaunchException
argument_list|(
name|EXIT_FAIL
argument_list|,
name|message
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bindArgs (final Configuration config, final List<String> args)
specifier|public
name|Configuration
name|bindArgs
parameter_list|(
specifier|final
name|Configuration
name|config
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|arguments
operator|=
name|args
expr_stmt|;
return|return
name|super
operator|.
name|bindArgs
argument_list|(
name|config
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Get the argument list.    * @return the argument list.    */
DECL|method|getArguments ()
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getArguments
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
comment|/**    * Bind to the store from a CLI argument.    * @param fsURI filesystem URI    * @throws IOException failure    */
DECL|method|bindFromCLI (String fsURI)
specifier|protected
name|void
name|bindFromCLI
parameter_list|(
name|String
name|fsURI
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|setUri
argument_list|(
name|fsURI
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|require
argument_list|(
name|fs
operator|instanceof
name|S3AFileSystem
argument_list|,
literal|"Not an S3A Filesystem:  "
operator|+
name|fsURI
argument_list|)
expr_stmt|;
name|filesystem
operator|=
operator|(
name|S3AFileSystem
operator|)
name|fs
expr_stmt|;
name|bindStore
argument_list|(
name|filesystem
argument_list|)
expr_stmt|;
name|setUri
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Binds the {@link #store} field to the metastore of    * the filesystem -which must have a DDB metastore.    * @param fs filesystem to bind the store to.    */
DECL|method|bindStore (final S3AFileSystem fs)
specifier|private
name|void
name|bindStore
parameter_list|(
specifier|final
name|S3AFileSystem
name|fs
parameter_list|)
block|{
name|require
argument_list|(
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|,
literal|"Filesystem has no metadata store: "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|MetadataStore
name|ms
init|=
name|fs
operator|.
name|getMetadataStore
argument_list|()
decl_stmt|;
name|require
argument_list|(
name|ms
operator|instanceof
name|DynamoDBMetadataStore
argument_list|,
literal|"Filesystem "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
operator|+
literal|" does not have a DynamoDB metadata store:  "
operator|+
name|ms
argument_list|)
expr_stmt|;
name|store
operator|=
operator|(
name|DynamoDBMetadataStore
operator|)
name|ms
expr_stmt|;
block|}
DECL|method|getStore ()
specifier|protected
name|DynamoDBMetadataStore
name|getStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
DECL|method|getFilesystem ()
specifier|public
name|S3AFileSystem
name|getFilesystem
parameter_list|()
block|{
return|return
name|filesystem
return|;
block|}
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
DECL|method|setUri (final URI uri)
specifier|public
name|void
name|setUri
parameter_list|(
specifier|final
name|URI
name|uri
parameter_list|)
block|{
name|String
name|fsURI
init|=
name|uri
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fsURI
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|setUri
argument_list|(
name|fsURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
block|}
comment|/**    * Set the URI from a string; will add a "/" if needed.    * @param fsURI filesystem URI.    * @throws RuntimeException if the fsURI parameter is not a valid URI.    */
DECL|method|setUri (String fsURI)
specifier|public
name|void
name|setUri
parameter_list|(
name|String
name|fsURI
parameter_list|)
block|{
if|if
condition|(
name|fsURI
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|fsURI
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|fsURI
operator|+=
literal|"/"
expr_stmt|;
block|}
try|try
block|{
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
name|fsURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Get the list of arguments, after validating the list size.    * @param argMin minimum number of entries.    * @param argMax maximum number of entries.    * @param usage Usage message.    * @return the argument list, which will be in the range.    * @throws ServiceLaunchException if the argument list is not valid.    */
DECL|method|getArgumentList (final int argMin, final int argMax, final String usage)
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getArgumentList
parameter_list|(
specifier|final
name|int
name|argMin
parameter_list|,
specifier|final
name|int
name|argMax
parameter_list|,
specifier|final
name|String
name|usage
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|arg
init|=
name|getArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|arg
operator|==
literal|null
operator|||
name|arg
operator|.
name|size
argument_list|()
operator|<
name|argMin
operator|||
name|arg
operator|.
name|size
argument_list|()
operator|>
name|argMax
condition|)
block|{
comment|// no arguments: usage message
throw|throw
operator|new
name|ServiceLaunchException
argument_list|(
name|EXIT_USAGE
argument_list|,
name|usage
argument_list|)
throw|;
block|}
return|return
name|arg
return|;
block|}
block|}
end_class

end_unit

