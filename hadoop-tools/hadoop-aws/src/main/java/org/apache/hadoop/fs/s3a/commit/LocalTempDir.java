begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|BUFFER_DIR
import|;
end_import

begin_comment
comment|/**  * A class which manages access to a temporary directory store, uses the  * directories listed in {@link Constants#BUFFER_DIR} for this.  */
end_comment

begin_class
DECL|class|LocalTempDir
specifier|final
class|class
name|LocalTempDir
block|{
DECL|method|LocalTempDir ()
specifier|private
name|LocalTempDir
parameter_list|()
block|{   }
DECL|field|directoryAllocator
specifier|private
specifier|static
name|LocalDirAllocator
name|directoryAllocator
decl_stmt|;
DECL|method|getAllocator ( Configuration conf, String key)
specifier|private
specifier|static
specifier|synchronized
name|LocalDirAllocator
name|getAllocator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|directoryAllocator
operator|!=
literal|null
condition|)
block|{
name|String
name|bufferDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|?
name|key
else|:
name|Constants
operator|.
name|HADOOP_TMP_DIR
decl_stmt|;
name|directoryAllocator
operator|=
operator|new
name|LocalDirAllocator
argument_list|(
name|bufferDir
argument_list|)
expr_stmt|;
block|}
return|return
name|directoryAllocator
return|;
block|}
comment|/**    * Create a temp file.    * @param conf configuration to use when creating the allocator    * @param prefix filename prefix    * @param size file size, or -1 if not known    * @return the temp file. The file has been created.    * @throws IOException IO failure    */
DECL|method|tempFile (Configuration conf, String prefix, long size)
specifier|public
specifier|static
name|File
name|tempFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|prefix
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getAllocator
argument_list|(
name|conf
argument_list|,
name|BUFFER_DIR
argument_list|)
operator|.
name|createTmpFileForWrite
argument_list|(
name|prefix
argument_list|,
name|size
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Get a temporary path.    * @param conf configuration to use when creating the allocator    * @param prefix filename prefix    * @param size file size, or -1 if not known    * @return the temp path.    * @throws IOException IO failure    */
DECL|method|tempPath (Configuration conf, String prefix, long size)
specifier|public
specifier|static
name|Path
name|tempPath
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|prefix
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getAllocator
argument_list|(
name|conf
argument_list|,
name|BUFFER_DIR
argument_list|)
operator|.
name|getLocalPathForWrite
argument_list|(
name|prefix
argument_list|,
name|size
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

