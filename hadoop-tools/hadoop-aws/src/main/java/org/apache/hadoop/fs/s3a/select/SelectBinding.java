begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.select
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CSVInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CSVOutput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ExpressionType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|InputSerialization
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|OutputSerialization
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|QuoteFields
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|SSECustomerKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|SelectObjectContentRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Retries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AReadOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ObjectAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|WriteOperationHelper
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|isNotEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|select
operator|.
name|SelectConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Class to do the S3 select binding and build a select request from the  * supplied arguments/configuration.  *  * This class is intended to be instantiated by the owning S3AFileSystem  * instance to handle the construction of requests: IO is still done exclusively  * in the filesystem.  */
end_comment

begin_class
DECL|class|SelectBinding
specifier|public
class|class
name|SelectBinding
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SelectBinding
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Operations on the store. */
DECL|field|operations
specifier|private
specifier|final
name|WriteOperationHelper
name|operations
decl_stmt|;
comment|/** Is S3 Select enabled? */
DECL|field|enabled
specifier|private
specifier|final
name|boolean
name|enabled
decl_stmt|;
DECL|field|errorsIncludeSql
specifier|private
specifier|final
name|boolean
name|errorsIncludeSql
decl_stmt|;
comment|/**    * Constructor.    * @param operations owning FS.    */
DECL|method|SelectBinding (final WriteOperationHelper operations)
specifier|public
name|SelectBinding
parameter_list|(
specifier|final
name|WriteOperationHelper
name|operations
parameter_list|)
block|{
name|this
operator|.
name|operations
operator|=
name|checkNotNull
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|this
operator|.
name|enabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|FS_S3A_SELECT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorsIncludeSql
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SELECT_ERRORS_INCLUDE_SQL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getConf ()
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|operations
operator|.
name|getConf
argument_list|()
return|;
block|}
comment|/**    * Is the service supported?    * @return true iff select is enabled.    */
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
comment|/**    * Build and execute a select request.    * @param readContext the read context, which includes the source path.    * @param expression the SQL expression.    * @param builderOptions query options    * @param sseKey optional SSE customer key    * @param objectAttributes object attributes from a HEAD request    * @return an FSDataInputStream whose wrapped stream is a SelectInputStream    * @throws IllegalArgumentException argument failure    * @throws IOException failure building, validating or executing the request.    * @throws PathIOException source path is a directory.    */
annotation|@
name|Retries
operator|.
name|RetryTranslated
DECL|method|select ( final S3AReadOpContext readContext, final String expression, final Configuration builderOptions, final Optional<SSECustomerKey> sseKey, final S3ObjectAttributes objectAttributes)
specifier|public
name|FSDataInputStream
name|select
parameter_list|(
specifier|final
name|S3AReadOpContext
name|readContext
parameter_list|,
specifier|final
name|String
name|expression
parameter_list|,
specifier|final
name|Configuration
name|builderOptions
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|SSECustomerKey
argument_list|>
name|sseKey
parameter_list|,
specifier|final
name|S3ObjectAttributes
name|objectAttributes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FSDataInputStream
argument_list|(
name|executeSelect
argument_list|(
name|readContext
argument_list|,
name|objectAttributes
argument_list|,
name|builderOptions
argument_list|,
name|buildSelectRequest
argument_list|(
name|readContext
operator|.
name|getPath
argument_list|()
argument_list|,
name|expression
argument_list|,
name|builderOptions
argument_list|,
name|sseKey
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Build a select request.    * @param path source path.    * @param expression the SQL expression.    * @param builderOptions config to extract other query options from    * @param sseKey optional SSE customer key    * @return the request to serve    * @throws IllegalArgumentException argument failure    * @throws IOException problem building/validating the request    */
DECL|method|buildSelectRequest ( final Path path, final String expression, final Configuration builderOptions, final Optional<SSECustomerKey> sseKey)
specifier|public
name|SelectObjectContentRequest
name|buildSelectRequest
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|String
name|expression
parameter_list|,
specifier|final
name|Configuration
name|builderOptions
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|SSECustomerKey
argument_list|>
name|sseKey
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|isEnabled
argument_list|()
argument_list|,
literal|"S3 Select is not enabled for %s"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|SelectObjectContentRequest
name|request
init|=
name|operations
operator|.
name|newSelectRequest
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|buildRequest
argument_list|(
name|request
argument_list|,
name|expression
argument_list|,
name|builderOptions
argument_list|)
expr_stmt|;
comment|// optionally set an SSE key in the input
name|sseKey
operator|.
name|ifPresent
argument_list|(
name|request
operator|::
name|withSSECustomerKey
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
comment|/**    * Execute the select request.    * @param readContext read context    * @param objectAttributes object attributes from a HEAD request    * @param builderOptions the options which came in from the openFile builder.    * @param request the built up select request.    * @return a SelectInputStream    * @throws IOException failure    * @throws PathIOException source path is a directory.    */
annotation|@
name|Retries
operator|.
name|RetryTranslated
DECL|method|executeSelect ( final S3AReadOpContext readContext, final S3ObjectAttributes objectAttributes, final Configuration builderOptions, final SelectObjectContentRequest request)
specifier|private
name|SelectInputStream
name|executeSelect
parameter_list|(
specifier|final
name|S3AReadOpContext
name|readContext
parameter_list|,
specifier|final
name|S3ObjectAttributes
name|objectAttributes
parameter_list|,
specifier|final
name|Configuration
name|builderOptions
parameter_list|,
specifier|final
name|SelectObjectContentRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|readContext
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|readContext
operator|.
name|getDstFileStatus
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIOException
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Can't select "
operator|+
name|path
operator|+
literal|" because it is a directory"
argument_list|)
throw|;
block|}
name|boolean
name|sqlInErrors
init|=
name|builderOptions
operator|.
name|getBoolean
argument_list|(
name|SELECT_ERRORS_INCLUDE_SQL
argument_list|,
name|errorsIncludeSql
argument_list|)
decl_stmt|;
name|String
name|expression
init|=
name|request
operator|.
name|getExpression
argument_list|()
decl_stmt|;
specifier|final
name|String
name|errorText
init|=
name|sqlInErrors
condition|?
name|expression
else|:
literal|"Select"
decl_stmt|;
if|if
condition|(
name|sqlInErrors
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Issuing SQL request {}"
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SelectInputStream
argument_list|(
name|readContext
argument_list|,
name|objectAttributes
argument_list|,
name|operations
operator|.
name|select
argument_list|(
name|path
argument_list|,
name|request
argument_list|,
name|errorText
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Build the select request from the configuration built up    * in {@code S3AFileSystem.openFile(Path)} and the default    * options in the cluster configuration.    *    * Options are picked up in the following order.    *<ol>    *<li> Options in {@code openFileOptions}.</li>    *<li> Options in the owning filesystem configuration.</li>    *<li>The default values in {@link SelectConstants}</li>    *</ol>    *    * @param request request to build up    * @param expression SQL expression    * @param builderOptions the options which came in from the openFile builder.    * @throws IllegalArgumentException if an option is somehow invalid.    * @throws IOException if an option is somehow invalid.    */
DECL|method|buildRequest ( final SelectObjectContentRequest request, final String expression, final Configuration builderOptions)
name|void
name|buildRequest
parameter_list|(
specifier|final
name|SelectObjectContentRequest
name|request
parameter_list|,
specifier|final
name|String
name|expression
parameter_list|,
specifier|final
name|Configuration
name|builderOptions
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|expression
argument_list|)
argument_list|,
literal|"No expression provided in parameter "
operator|+
name|SELECT_SQL
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|ownerConf
init|=
name|operations
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|inputFormat
init|=
name|builderOptions
operator|.
name|get
argument_list|(
name|SELECT_INPUT_FORMAT
argument_list|,
name|SELECT_FORMAT_CSV
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|SELECT_FORMAT_CSV
operator|.
name|equals
argument_list|(
name|inputFormat
argument_list|)
argument_list|,
literal|"Unsupported input format %s"
argument_list|,
name|inputFormat
argument_list|)
expr_stmt|;
name|String
name|outputFormat
init|=
name|builderOptions
operator|.
name|get
argument_list|(
name|SELECT_OUTPUT_FORMAT
argument_list|,
name|SELECT_FORMAT_CSV
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|SELECT_FORMAT_CSV
operator|.
name|equals
argument_list|(
name|outputFormat
argument_list|)
argument_list|,
literal|"Unsupported output format %s"
argument_list|,
name|outputFormat
argument_list|)
expr_stmt|;
name|request
operator|.
name|setExpressionType
argument_list|(
name|ExpressionType
operator|.
name|SQL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setExpression
argument_list|(
name|expandBackslashChars
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
name|InputSerialization
name|inputSerialization
init|=
name|buildCsvInputRequest
argument_list|(
name|ownerConf
argument_list|,
name|builderOptions
argument_list|)
decl_stmt|;
name|String
name|compression
init|=
name|opt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|SELECT_INPUT_COMPRESSION
argument_list|,
name|COMPRESSION_OPT_NONE
argument_list|,
literal|true
argument_list|)
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|compression
argument_list|)
condition|)
block|{
name|inputSerialization
operator|.
name|setCompressionType
argument_list|(
name|compression
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setInputSerialization
argument_list|(
name|inputSerialization
argument_list|)
expr_stmt|;
name|request
operator|.
name|setOutputSerialization
argument_list|(
name|buildCSVOutput
argument_list|(
name|ownerConf
argument_list|,
name|builderOptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build the CSV input request.    * @param ownerConf FS owner configuration    * @param builderOptions options on the specific request    * @return the constructed request    * @throws IllegalArgumentException argument failure    * @throws IOException validation failure    */
DECL|method|buildCsvInputRequest ( final Configuration ownerConf, final Configuration builderOptions)
specifier|public
name|InputSerialization
name|buildCsvInputRequest
parameter_list|(
specifier|final
name|Configuration
name|ownerConf
parameter_list|,
specifier|final
name|Configuration
name|builderOptions
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|String
name|headerInfo
init|=
name|opt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|CSV_INPUT_HEADER
argument_list|,
name|CSV_INPUT_HEADER_OPT_DEFAULT
argument_list|,
literal|true
argument_list|)
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|String
name|commentMarker
init|=
name|xopt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|CSV_INPUT_COMMENT_MARKER
argument_list|,
name|CSV_INPUT_COMMENT_MARKER_DEFAULT
argument_list|)
decl_stmt|;
name|String
name|fieldDelimiter
init|=
name|xopt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|CSV_INPUT_INPUT_FIELD_DELIMITER
argument_list|,
name|CSV_INPUT_FIELD_DELIMITER_DEFAULT
argument_list|)
decl_stmt|;
name|String
name|recordDelimiter
init|=
name|xopt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|CSV_INPUT_RECORD_DELIMITER
argument_list|,
name|CSV_INPUT_RECORD_DELIMITER_DEFAULT
argument_list|)
decl_stmt|;
name|String
name|quoteCharacter
init|=
name|xopt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|CSV_INPUT_QUOTE_CHARACTER
argument_list|,
name|CSV_INPUT_QUOTE_CHARACTER_DEFAULT
argument_list|)
decl_stmt|;
name|String
name|quoteEscapeCharacter
init|=
name|xopt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|CSV_INPUT_QUOTE_ESCAPE_CHARACTER
argument_list|,
name|CSV_INPUT_QUOTE_ESCAPE_CHARACTER_DEFAULT
argument_list|)
decl_stmt|;
comment|// CSV input
name|CSVInput
name|csv
init|=
operator|new
name|CSVInput
argument_list|()
decl_stmt|;
name|csv
operator|.
name|setFieldDelimiter
argument_list|(
name|fieldDelimiter
argument_list|)
expr_stmt|;
name|csv
operator|.
name|setRecordDelimiter
argument_list|(
name|recordDelimiter
argument_list|)
expr_stmt|;
name|csv
operator|.
name|setComments
argument_list|(
name|commentMarker
argument_list|)
expr_stmt|;
name|csv
operator|.
name|setQuoteCharacter
argument_list|(
name|quoteCharacter
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|quoteEscapeCharacter
argument_list|)
condition|)
block|{
name|csv
operator|.
name|setQuoteEscapeCharacter
argument_list|(
name|quoteEscapeCharacter
argument_list|)
expr_stmt|;
block|}
name|csv
operator|.
name|setFileHeaderInfo
argument_list|(
name|headerInfo
argument_list|)
expr_stmt|;
name|InputSerialization
name|inputSerialization
init|=
operator|new
name|InputSerialization
argument_list|()
decl_stmt|;
name|inputSerialization
operator|.
name|setCsv
argument_list|(
name|csv
argument_list|)
expr_stmt|;
return|return
name|inputSerialization
return|;
block|}
comment|/**    * Build CSV output for a request.    * @param ownerConf FS owner configuration    * @param builderOptions options on the specific request    * @return the constructed request    * @throws IllegalArgumentException argument failure    * @throws IOException validation failure    */
DECL|method|buildCSVOutput ( final Configuration ownerConf, final Configuration builderOptions)
specifier|public
name|OutputSerialization
name|buildCSVOutput
parameter_list|(
specifier|final
name|Configuration
name|ownerConf
parameter_list|,
specifier|final
name|Configuration
name|builderOptions
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|String
name|fieldDelimiter
init|=
name|xopt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|CSV_OUTPUT_FIELD_DELIMITER
argument_list|,
name|CSV_OUTPUT_FIELD_DELIMITER_DEFAULT
argument_list|)
decl_stmt|;
name|String
name|recordDelimiter
init|=
name|xopt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|CSV_OUTPUT_RECORD_DELIMITER
argument_list|,
name|CSV_OUTPUT_RECORD_DELIMITER_DEFAULT
argument_list|)
decl_stmt|;
name|String
name|quoteCharacter
init|=
name|xopt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|CSV_OUTPUT_QUOTE_CHARACTER
argument_list|,
name|CSV_OUTPUT_QUOTE_CHARACTER_DEFAULT
argument_list|)
decl_stmt|;
name|String
name|quoteEscapeCharacter
init|=
name|xopt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|CSV_OUTPUT_QUOTE_ESCAPE_CHARACTER
argument_list|,
name|CSV_OUTPUT_QUOTE_ESCAPE_CHARACTER_DEFAULT
argument_list|)
decl_stmt|;
name|String
name|quoteFields
init|=
name|xopt
argument_list|(
name|builderOptions
argument_list|,
name|ownerConf
argument_list|,
name|CSV_OUTPUT_QUOTE_FIELDS
argument_list|,
name|CSV_OUTPUT_QUOTE_FIELDS_ALWAYS
argument_list|)
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
comment|// output is CSV, always
name|OutputSerialization
name|outputSerialization
init|=
operator|new
name|OutputSerialization
argument_list|()
decl_stmt|;
name|CSVOutput
name|csvOut
init|=
operator|new
name|CSVOutput
argument_list|()
decl_stmt|;
name|csvOut
operator|.
name|setQuoteCharacter
argument_list|(
name|quoteCharacter
argument_list|)
expr_stmt|;
name|csvOut
operator|.
name|setQuoteFields
argument_list|(
name|QuoteFields
operator|.
name|fromValue
argument_list|(
name|quoteFields
argument_list|)
argument_list|)
expr_stmt|;
name|csvOut
operator|.
name|setFieldDelimiter
argument_list|(
name|fieldDelimiter
argument_list|)
expr_stmt|;
name|csvOut
operator|.
name|setRecordDelimiter
argument_list|(
name|recordDelimiter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|quoteEscapeCharacter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|csvOut
operator|.
name|setQuoteEscapeCharacter
argument_list|(
name|quoteEscapeCharacter
argument_list|)
expr_stmt|;
block|}
name|outputSerialization
operator|.
name|setCsv
argument_list|(
name|csvOut
argument_list|)
expr_stmt|;
return|return
name|outputSerialization
return|;
block|}
comment|/**    * Stringify the given SelectObjectContentRequest, as its    * toString() operator doesn't.    * @param request request to convert to a string    * @return a string to print. Does not contain secrets.    */
DECL|method|toString (final SelectObjectContentRequest request)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
specifier|final
name|SelectObjectContentRequest
name|request
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"SelectObjectContentRequest{"
argument_list|)
operator|.
name|append
argument_list|(
literal|"bucket name="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"; key="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"; expressionType="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getExpressionType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"; expression="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|InputSerialization
name|input
init|=
name|request
operator|.
name|getInputSerialization
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; Input"
argument_list|)
operator|.
name|append
argument_list|(
name|input
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; Input Serialization: none"
argument_list|)
expr_stmt|;
block|}
name|OutputSerialization
name|out
init|=
name|request
operator|.
name|getOutputSerialization
argument_list|()
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; Output"
argument_list|)
operator|.
name|append
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; Output Serialization: none"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Resolve an option.    * @param builderOptions the options which came in from the openFile builder.    * @param fsConf configuration of the owning FS.    * @param base base option (no s3a: prefix)    * @param defVal default value. Must not be null.    * @param trim should the result be trimmed.    * @return the possibly trimmed value.    */
DECL|method|opt (Configuration builderOptions, Configuration fsConf, String base, String defVal, boolean trim)
specifier|static
name|String
name|opt
parameter_list|(
name|Configuration
name|builderOptions
parameter_list|,
name|Configuration
name|fsConf
parameter_list|,
name|String
name|base
parameter_list|,
name|String
name|defVal
parameter_list|,
name|boolean
name|trim
parameter_list|)
block|{
name|String
name|r
init|=
name|builderOptions
operator|.
name|get
argument_list|(
name|base
argument_list|,
name|fsConf
operator|.
name|get
argument_list|(
name|base
argument_list|,
name|defVal
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|trim
condition|?
name|r
operator|.
name|trim
argument_list|()
else|:
name|r
return|;
block|}
comment|/**    * Get an option with backslash arguments transformed.    * These are not trimmed, so whitespace is significant.    * @param selectOpts options in the select call    * @param fsConf filesystem conf    * @param base base option name    * @param defVal default value    * @return the transformed value    */
DECL|method|xopt (Configuration selectOpts, Configuration fsConf, String base, String defVal)
specifier|static
name|String
name|xopt
parameter_list|(
name|Configuration
name|selectOpts
parameter_list|,
name|Configuration
name|fsConf
parameter_list|,
name|String
name|base
parameter_list|,
name|String
name|defVal
parameter_list|)
block|{
return|return
name|expandBackslashChars
argument_list|(
name|opt
argument_list|(
name|selectOpts
argument_list|,
name|fsConf
argument_list|,
name|base
argument_list|,
name|defVal
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Perform escaping.    * @param src source string.    * @return the replaced value    */
DECL|method|expandBackslashChars (String src)
specifier|static
name|String
name|expandBackslashChars
parameter_list|(
name|String
name|src
parameter_list|)
block|{
return|return
name|src
operator|.
name|replace
argument_list|(
literal|"\\n"
argument_list|,
literal|"\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\\\""
argument_list|,
literal|"\""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\\t"
argument_list|,
literal|"\t"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\\r"
argument_list|,
literal|"\r"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\\\""
argument_list|,
literal|"\""
argument_list|)
comment|// backslash substitution must come last
operator|.
name|replace
argument_list|(
literal|"\\\\"
argument_list|,
literal|"\\"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

