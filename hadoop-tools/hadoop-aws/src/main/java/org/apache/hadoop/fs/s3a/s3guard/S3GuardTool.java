begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CommandFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * CLI to manage S3Guard Metadata Store.  */
end_comment

begin_class
DECL|class|S3GuardTool
specifier|public
specifier|abstract
class|class
name|S3GuardTool
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3GuardTool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"s3guard"
decl_stmt|;
DECL|field|COMMON_USAGE
specifier|private
specifier|static
specifier|final
name|String
name|COMMON_USAGE
init|=
literal|"When possible and not overridden by more specific options, metadata\n"
operator|+
literal|"repository information will be inferred from the S3A URL (if provided)"
operator|+
literal|"\n\n"
operator|+
literal|"Generic options supported are:\n"
operator|+
literal|"  -conf<config file> - specify an application configuration file\n"
operator|+
literal|"  -D<property=value> - define a value for a given property\n"
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
name|NAME
operator|+
literal|" [command] [OPTIONS] [s3a://BUCKET]\n\n"
operator|+
literal|"Commands: \n"
operator|+
literal|"\t"
operator|+
name|Init
operator|.
name|NAME
operator|+
literal|" - "
operator|+
name|Init
operator|.
name|PURPOSE
operator|+
literal|"\n"
operator|+
literal|"\t"
operator|+
name|Destroy
operator|.
name|NAME
operator|+
literal|" - "
operator|+
name|Destroy
operator|.
name|PURPOSE
operator|+
literal|"\n"
operator|+
literal|"\t"
operator|+
name|Import
operator|.
name|NAME
operator|+
literal|" - "
operator|+
name|Import
operator|.
name|PURPOSE
operator|+
literal|"\n"
operator|+
literal|"\t"
operator|+
name|Diff
operator|.
name|NAME
operator|+
literal|" - "
operator|+
name|Diff
operator|.
name|PURPOSE
operator|+
literal|"\n"
operator|+
literal|"\t"
operator|+
name|Prune
operator|.
name|NAME
operator|+
literal|" - "
operator|+
name|Prune
operator|.
name|PURPOSE
operator|+
literal|"\n"
decl_stmt|;
DECL|field|DATA_IN_S3_IS_PRESERVED
specifier|private
specifier|static
specifier|final
name|String
name|DATA_IN_S3_IS_PRESERVED
init|=
literal|"(all data in S3 is preserved"
decl_stmt|;
DECL|method|getUsage ()
specifier|abstract
specifier|public
name|String
name|getUsage
parameter_list|()
function_decl|;
comment|// Exit codes
DECL|field|SUCCESS
specifier|static
specifier|final
name|int
name|SUCCESS
init|=
literal|0
decl_stmt|;
DECL|field|INVALID_ARGUMENT
specifier|static
specifier|final
name|int
name|INVALID_ARGUMENT
init|=
literal|1
decl_stmt|;
DECL|field|ERROR
specifier|static
specifier|final
name|int
name|ERROR
init|=
literal|99
decl_stmt|;
DECL|field|filesystem
specifier|private
name|S3AFileSystem
name|filesystem
decl_stmt|;
DECL|field|store
specifier|private
name|MetadataStore
name|store
decl_stmt|;
DECL|field|commandFormat
specifier|private
specifier|final
name|CommandFormat
name|commandFormat
decl_stmt|;
DECL|field|META_FLAG
specifier|private
specifier|static
specifier|final
name|String
name|META_FLAG
init|=
literal|"meta"
decl_stmt|;
DECL|field|DAYS_FLAG
specifier|private
specifier|static
specifier|final
name|String
name|DAYS_FLAG
init|=
literal|"days"
decl_stmt|;
DECL|field|HOURS_FLAG
specifier|private
specifier|static
specifier|final
name|String
name|HOURS_FLAG
init|=
literal|"hours"
decl_stmt|;
DECL|field|MINUTES_FLAG
specifier|private
specifier|static
specifier|final
name|String
name|MINUTES_FLAG
init|=
literal|"minutes"
decl_stmt|;
DECL|field|SECONDS_FLAG
specifier|private
specifier|static
specifier|final
name|String
name|SECONDS_FLAG
init|=
literal|"seconds"
decl_stmt|;
DECL|field|REGION_FLAG
specifier|private
specifier|static
specifier|final
name|String
name|REGION_FLAG
init|=
literal|"region"
decl_stmt|;
DECL|field|READ_FLAG
specifier|private
specifier|static
specifier|final
name|String
name|READ_FLAG
init|=
literal|"read"
decl_stmt|;
DECL|field|WRITE_FLAG
specifier|private
specifier|static
specifier|final
name|String
name|WRITE_FLAG
init|=
literal|"write"
decl_stmt|;
comment|/**    * Constructor a S3Guard tool with HDFS configuration.    * @param conf Configuration.    */
DECL|method|S3GuardTool (Configuration conf)
specifier|protected
name|S3GuardTool
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|commandFormat
operator|=
operator|new
name|CommandFormat
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// For metadata store URI
name|commandFormat
operator|.
name|addOptionWithValue
argument_list|(
name|META_FLAG
argument_list|)
expr_stmt|;
comment|// DDB region.
name|commandFormat
operator|.
name|addOptionWithValue
argument_list|(
name|REGION_FLAG
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return sub-command name.    */
DECL|method|getName ()
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**    * Parse DynamoDB region from either -m option or a S3 path.    *    * This function should only be called from {@link Init} or    * {@link Destroy}.    *    * @param paths remaining parameters from CLI.    * @return false for invalid parameters.    * @throws IOException on I/O errors.    */
DECL|method|parseDynamoDBRegion (List<String> paths)
name|boolean
name|parseDynamoDBRegion
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|String
name|fromCli
init|=
name|getCommandFormat
argument_list|()
operator|.
name|getOptValue
argument_list|(
name|REGION_FLAG
argument_list|)
decl_stmt|;
name|String
name|fromConf
init|=
name|conf
operator|.
name|get
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|)
decl_stmt|;
name|boolean
name|hasS3Path
init|=
operator|!
name|paths
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromCli
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fromCli
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No region provided with -"
operator|+
name|REGION_FLAG
operator|+
literal|" flag"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|hasS3Path
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Providing both an S3 path and the -"
operator|+
name|REGION_FLAG
operator|+
literal|" flag is not supported. If you need to specify a different "
operator|+
literal|"region than the S3 bucket, configure "
operator|+
name|S3GUARD_DDB_REGION_KEY
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|,
name|fromCli
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|fromConf
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fromConf
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"No region provided with config %s, %n"
argument_list|,
name|S3GUARD_DDB_REGION_KEY
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|hasS3Path
condition|)
block|{
name|String
name|s3Path
init|=
name|paths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|initS3AFileSystem
argument_list|(
name|s3Path
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No region found from -"
operator|+
name|REGION_FLAG
operator|+
literal|" flag, "
operator|+
literal|"config, or S3 bucket"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * Parse metadata store from command line option or HDFS configuration.    *    * @param forceCreate override the auto-creation setting to true.    * @return a initialized metadata store.    */
DECL|method|initMetadataStore (boolean forceCreate)
name|MetadataStore
name|initMetadataStore
parameter_list|(
name|boolean
name|forceCreate
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getStore
argument_list|()
return|;
block|}
name|Configuration
name|conf
decl_stmt|;
if|if
condition|(
name|filesystem
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|getConf
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|=
name|filesystem
operator|.
name|getConf
argument_list|()
expr_stmt|;
block|}
name|String
name|metaURI
init|=
name|getCommandFormat
argument_list|()
operator|.
name|getOptValue
argument_list|(
name|META_FLAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaURI
operator|!=
literal|null
operator|&&
operator|!
name|metaURI
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|metaURI
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"create metadata store: {}"
argument_list|,
name|uri
operator|+
literal|" scheme: "
operator|+
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
condition|)
block|{
case|case
literal|"local"
case|:
name|setStore
argument_list|(
operator|new
name|LocalMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"dynamodb"
case|:
name|setStore
argument_list|(
operator|new
name|DynamoDBMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceCreate
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Metadata store %s is not supported"
argument_list|,
name|uri
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// CLI does not specify metadata store URI, it uses default metadata store
comment|// DynamoDB instead.
name|setStore
argument_list|(
operator|new
name|DynamoDBMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceCreate
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filesystem
operator|==
literal|null
condition|)
block|{
name|getStore
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getStore
argument_list|()
operator|.
name|initialize
argument_list|(
name|filesystem
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Metadata store {} is initialized."
argument_list|,
name|getStore
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getStore
argument_list|()
return|;
block|}
comment|/**    * Initialize S3A FileSystem instance.    *    * @param path s3a URI    * @throws IOException    */
DECL|method|initS3AFileSystem (String path)
name|void
name|initS3AFileSystem
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|uri
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Make sure that S3AFileSystem does not hold an actual MetadataStore
comment|// implementation.
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|S3_METADATA_STORE_IMPL
argument_list|,
name|NullMetadataStore
operator|.
name|class
argument_list|,
name|MetadataStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|S3AFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"URI %s is not a S3A file system: %s"
argument_list|,
name|uri
argument_list|,
name|fs
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|filesystem
operator|=
operator|(
name|S3AFileSystem
operator|)
name|fs
expr_stmt|;
block|}
comment|/**    * Parse CLI arguments and returns the position arguments.    * The options are stored in {@link #commandFormat}    *    * @param args command line arguments.    * @return the position arguments from CLI.    */
DECL|method|parseArgs (String[] args)
name|List
argument_list|<
name|String
argument_list|>
name|parseArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
return|return
name|getCommandFormat
argument_list|()
operator|.
name|parse
argument_list|(
name|args
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|getFilesystem ()
specifier|protected
name|S3AFileSystem
name|getFilesystem
parameter_list|()
block|{
return|return
name|filesystem
return|;
block|}
DECL|method|setFilesystem (S3AFileSystem filesystem)
specifier|protected
name|void
name|setFilesystem
parameter_list|(
name|S3AFileSystem
name|filesystem
parameter_list|)
block|{
name|this
operator|.
name|filesystem
operator|=
name|filesystem
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getStore ()
specifier|public
name|MetadataStore
name|getStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setStore (MetadataStore store)
specifier|protected
name|void
name|setStore
parameter_list|(
name|MetadataStore
name|store
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
DECL|method|getCommandFormat ()
specifier|protected
name|CommandFormat
name|getCommandFormat
parameter_list|()
block|{
return|return
name|commandFormat
return|;
block|}
comment|/**    * Create the metadata store.    */
DECL|class|Init
specifier|static
class|class
name|Init
extends|extends
name|S3GuardTool
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"init"
decl_stmt|;
DECL|field|PURPOSE
specifier|public
specifier|static
specifier|final
name|String
name|PURPOSE
init|=
literal|"initialize metadata repository"
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
name|NAME
operator|+
literal|" [OPTIONS] [s3a://BUCKET]\n"
operator|+
literal|"\t"
operator|+
name|PURPOSE
operator|+
literal|"\n\n"
operator|+
literal|"Common options:\n"
operator|+
literal|"  -"
operator|+
name|META_FLAG
operator|+
literal|" URL - Metadata repository details "
operator|+
literal|"(implementation-specific)\n"
operator|+
literal|"\n"
operator|+
literal|"Amazon DynamoDB-specific options:\n"
operator|+
literal|"  -"
operator|+
name|REGION_FLAG
operator|+
literal|" REGION - Service region for connections\n"
operator|+
literal|"  -"
operator|+
name|READ_FLAG
operator|+
literal|" UNIT - Provisioned read throughput units\n"
operator|+
literal|"  -"
operator|+
name|WRITE_FLAG
operator|+
literal|" UNIT - Provisioned write through put units\n"
operator|+
literal|"\n"
operator|+
literal|"  URLs for Amazon DynamoDB are of the form dynamodb://TABLE_NAME.\n"
operator|+
literal|"  Specifying both the -"
operator|+
name|REGION_FLAG
operator|+
literal|" option and an S3A path\n"
operator|+
literal|"  is not supported."
decl_stmt|;
DECL|method|Init (Configuration conf)
name|Init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// read capacity.
name|getCommandFormat
argument_list|()
operator|.
name|addOptionWithValue
argument_list|(
name|READ_FLAG
argument_list|)
expr_stmt|;
comment|// write capacity.
name|getCommandFormat
argument_list|()
operator|.
name|addOptionWithValue
argument_list|(
name|WRITE_FLAG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getUsage ()
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|USAGE
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|parseArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|String
name|readCap
init|=
name|getCommandFormat
argument_list|()
operator|.
name|getOptValue
argument_list|(
name|READ_FLAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|readCap
operator|!=
literal|null
operator|&&
operator|!
name|readCap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|readCapacity
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|readCap
argument_list|)
decl_stmt|;
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
name|S3GUARD_DDB_TABLE_CAPACITY_READ_KEY
argument_list|,
name|readCapacity
argument_list|)
expr_stmt|;
block|}
name|String
name|writeCap
init|=
name|getCommandFormat
argument_list|()
operator|.
name|getOptValue
argument_list|(
name|WRITE_FLAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeCap
operator|!=
literal|null
operator|&&
operator|!
name|writeCap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|writeCapacity
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|writeCap
argument_list|)
decl_stmt|;
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
name|S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY
argument_list|,
name|writeCapacity
argument_list|)
expr_stmt|;
block|}
comment|// Validate parameters.
if|if
condition|(
operator|!
name|parseDynamoDBRegion
argument_list|(
name|paths
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
return|return
name|INVALID_ARGUMENT
return|;
block|}
name|initMetadataStore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
block|}
comment|/**    * Destroy a metadata store.    */
DECL|class|Destroy
specifier|static
class|class
name|Destroy
extends|extends
name|S3GuardTool
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"destroy"
decl_stmt|;
DECL|field|PURPOSE
specifier|public
specifier|static
specifier|final
name|String
name|PURPOSE
init|=
literal|"destroy Metadata Store data "
operator|+
name|DATA_IN_S3_IS_PRESERVED
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
name|NAME
operator|+
literal|" [OPTIONS] [s3a://BUCKET]\n"
operator|+
literal|"\t"
operator|+
name|PURPOSE
operator|+
literal|"\n\n"
operator|+
literal|"Common options:\n"
operator|+
literal|"  -"
operator|+
name|META_FLAG
operator|+
literal|" URL - Metadata repository details "
operator|+
literal|"(implementation-specific)\n"
operator|+
literal|"\n"
operator|+
literal|"Amazon DynamoDB-specific options:\n"
operator|+
literal|"  -"
operator|+
name|REGION_FLAG
operator|+
literal|" REGION - Service region for connections\n"
operator|+
literal|"\n"
operator|+
literal|"  URLs for Amazon DynamoDB are of the form dynamodb://TABLE_NAME.\n"
operator|+
literal|"  Specifying both the -"
operator|+
name|REGION_FLAG
operator|+
literal|" option and an S3A path\n"
operator|+
literal|"  is not supported."
decl_stmt|;
DECL|method|Destroy (Configuration conf)
name|Destroy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getUsage ()
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|USAGE
return|;
block|}
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|parseArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parseDynamoDBRegion
argument_list|(
name|paths
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
return|return
name|INVALID_ARGUMENT
return|;
block|}
try|try
block|{
name|initMetadataStore
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// indication that the table was not found
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to bind to store to be destroyed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Metadata Store does not exist."
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|getStore
argument_list|()
operator|!=
literal|null
argument_list|,
literal|"Metadata Store is not initialized"
argument_list|)
expr_stmt|;
name|getStore
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Metadata store is deleted."
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
block|}
comment|/**    * Import s3 metadata to the metadata store.    */
DECL|class|Import
specifier|static
class|class
name|Import
extends|extends
name|S3GuardTool
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"import"
decl_stmt|;
DECL|field|PURPOSE
specifier|public
specifier|static
specifier|final
name|String
name|PURPOSE
init|=
literal|"import metadata from existing S3 "
operator|+
literal|"data"
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
name|NAME
operator|+
literal|" [OPTIONS] [s3a://BUCKET]\n"
operator|+
literal|"\t"
operator|+
name|PURPOSE
operator|+
literal|"\n\n"
operator|+
literal|"Common options:\n"
operator|+
literal|"  -"
operator|+
name|META_FLAG
operator|+
literal|" URL - Metadata repository details "
operator|+
literal|"(implementation-specific)\n"
operator|+
literal|"\n"
operator|+
literal|"Amazon DynamoDB-specific options:\n"
operator|+
literal|"  -"
operator|+
name|REGION_FLAG
operator|+
literal|" REGION - Service region for connections\n"
operator|+
literal|"\n"
operator|+
literal|"  URLs for Amazon DynamoDB are of the form dynamodb://TABLE_NAME.\n"
operator|+
literal|"  Specifying both the -"
operator|+
name|REGION_FLAG
operator|+
literal|" option and an S3A path\n"
operator|+
literal|"  is not supported."
decl_stmt|;
DECL|field|dirCache
specifier|private
specifier|final
name|Set
argument_list|<
name|Path
argument_list|>
name|dirCache
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Import (Configuration conf)
name|Import
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getUsage ()
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|USAGE
return|;
block|}
comment|/**      * Put parents into MS and cache if the parents are not presented.      *      * @param f the file or an empty directory.      * @throws IOException on I/O errors.      */
DECL|method|putParentsIfNotPresent (FileStatus f)
specifier|private
name|void
name|putParentsIfNotPresent
parameter_list|(
name|FileStatus
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|Path
name|parent
init|=
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dirCache
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
condition|)
block|{
return|return;
block|}
name|FileStatus
name|dir
init|=
name|DynamoDBMetadataStore
operator|.
name|makeDirStatus
argument_list|(
name|parent
argument_list|,
name|f
operator|.
name|getOwner
argument_list|()
argument_list|)
decl_stmt|;
name|getStore
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|dirCache
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Recursively import every path under path.      * @return number of items inserted into MetadataStore      * @throws IOException on I/O errors.      */
DECL|method|importDir (FileStatus status)
specifier|private
name|long
name|importDir
parameter_list|(
name|FileStatus
name|status
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|it
init|=
name|getFilesystem
argument_list|()
operator|.
name|listFilesAndEmptyDirectories
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|items
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|located
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|FileStatus
name|child
decl_stmt|;
if|if
condition|(
name|located
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|child
operator|=
name|DynamoDBMetadataStore
operator|.
name|makeDirStatus
argument_list|(
name|located
operator|.
name|getPath
argument_list|()
argument_list|,
name|located
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|dirCache
operator|.
name|add
argument_list|(
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|child
operator|=
operator|new
name|S3AFileStatus
argument_list|(
name|located
operator|.
name|getLen
argument_list|()
argument_list|,
name|located
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|located
operator|.
name|getPath
argument_list|()
argument_list|,
name|located
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|located
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|putParentsIfNotPresent
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|getStore
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|items
operator|++
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|parseArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|INVALID_ARGUMENT
return|;
block|}
name|String
name|s3Path
init|=
name|paths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|initS3AFileSystem
argument_list|(
name|s3Path
argument_list|)
expr_stmt|;
name|URI
name|uri
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|s3Path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|filePath
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|filePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If they specify a naked S3 URI (e.g. s3a://bucket), we'll consider
comment|// root to be the path
name|filePath
operator|=
literal|"/"
expr_stmt|;
block|}
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|getFilesystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|initMetadataStore
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|long
name|items
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|PathMetadata
name|meta
init|=
operator|new
name|PathMetadata
argument_list|(
name|status
argument_list|)
decl_stmt|;
name|getStore
argument_list|()
operator|.
name|put
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|items
operator|=
name|importDir
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Inserted %d items into Metadata Store%n"
argument_list|,
name|items
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
block|}
comment|/**    * Show diffs between the s3 and metadata store.    */
DECL|class|Diff
specifier|static
class|class
name|Diff
extends|extends
name|S3GuardTool
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"diff"
decl_stmt|;
DECL|field|PURPOSE
specifier|public
specifier|static
specifier|final
name|String
name|PURPOSE
init|=
literal|"report on delta between S3 and "
operator|+
literal|"repository"
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
name|NAME
operator|+
literal|" [OPTIONS] s3a://BUCKET\n"
operator|+
literal|"\t"
operator|+
name|PURPOSE
operator|+
literal|"\n\n"
operator|+
literal|"Common options:\n"
operator|+
literal|"  -"
operator|+
name|META_FLAG
operator|+
literal|" URL - Metadata repository details "
operator|+
literal|"(implementation-specific)\n"
operator|+
literal|"\n"
operator|+
literal|"Amazon DynamoDB-specific options:\n"
operator|+
literal|"  -"
operator|+
name|REGION_FLAG
operator|+
literal|" REGION - Service region for connections\n"
operator|+
literal|"\n"
operator|+
literal|"  URLs for Amazon DynamoDB are of the form dynamodb://TABLE_NAME.\n"
operator|+
literal|"  Specifying both the -"
operator|+
name|REGION_FLAG
operator|+
literal|" option and an S3A path\n"
operator|+
literal|"  is not supported."
decl_stmt|;
DECL|field|SEP
specifier|private
specifier|static
specifier|final
name|String
name|SEP
init|=
literal|"\t"
decl_stmt|;
DECL|field|S3_PREFIX
specifier|static
specifier|final
name|String
name|S3_PREFIX
init|=
literal|"S3"
decl_stmt|;
DECL|field|MS_PREFIX
specifier|static
specifier|final
name|String
name|MS_PREFIX
init|=
literal|"MS"
decl_stmt|;
DECL|method|Diff (Configuration conf)
name|Diff
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getUsage ()
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|USAGE
return|;
block|}
comment|/**      * Formats the output of printing a FileStatus in S3guard diff tool.      * @param status the status to print.      * @return the string of output.      */
DECL|method|formatFileStatus (FileStatus status)
specifier|private
specifier|static
name|String
name|formatFileStatus
parameter_list|(
name|FileStatus
name|status
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s%s%d%s%s"
argument_list|,
name|status
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"D"
else|:
literal|"F"
argument_list|,
name|SEP
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|,
name|SEP
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Compares metadata from 2 S3 FileStatus's to see if they differ.      * @param thisOne      * @param thatOne      * @return true if the metadata is not identical      */
DECL|method|differ (FileStatus thisOne, FileStatus thatOne)
specifier|private
specifier|static
name|boolean
name|differ
parameter_list|(
name|FileStatus
name|thisOne
parameter_list|,
name|FileStatus
name|thatOne
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
operator|(
name|thisOne
operator|==
literal|null
operator|&&
name|thatOne
operator|==
literal|null
operator|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|thisOne
operator|==
literal|null
operator|||
name|thatOne
operator|==
literal|null
operator|)
operator|||
operator|(
name|thisOne
operator|.
name|getLen
argument_list|()
operator|!=
name|thatOne
operator|.
name|getLen
argument_list|()
operator|)
operator|||
operator|(
name|thisOne
operator|.
name|isDirectory
argument_list|()
operator|!=
name|thatOne
operator|.
name|isDirectory
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|thisOne
operator|.
name|isDirectory
argument_list|()
operator|&&
name|thisOne
operator|.
name|getModificationTime
argument_list|()
operator|!=
name|thatOne
operator|.
name|getModificationTime
argument_list|()
operator|)
return|;
block|}
comment|/**      * Print difference, if any, between two file statuses to the output stream.      *      * @param msStatus file status from metadata store.      * @param s3Status file status from S3.      * @param out output stream.      */
DECL|method|printDiff (FileStatus msStatus, FileStatus s3Status, PrintStream out)
specifier|private
specifier|static
name|void
name|printDiff
parameter_list|(
name|FileStatus
name|msStatus
parameter_list|,
name|FileStatus
name|s3Status
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
operator|(
name|msStatus
operator|==
literal|null
operator|&&
name|s3Status
operator|==
literal|null
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|msStatus
operator|!=
literal|null
operator|&&
name|s3Status
operator|!=
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|msStatus
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|s3Status
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"The path from metadata store and s3 are different:"
operator|+
literal|" ms=%s s3=%s"
argument_list|,
name|msStatus
operator|.
name|getPath
argument_list|()
argument_list|,
name|s3Status
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|differ
argument_list|(
name|msStatus
argument_list|,
name|s3Status
argument_list|)
condition|)
block|{
if|if
condition|(
name|s3Status
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|printf
argument_list|(
literal|"%s%s%s%n"
argument_list|,
name|S3_PREFIX
argument_list|,
name|SEP
argument_list|,
name|formatFileStatus
argument_list|(
name|s3Status
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msStatus
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|printf
argument_list|(
literal|"%s%s%s%n"
argument_list|,
name|MS_PREFIX
argument_list|,
name|SEP
argument_list|,
name|formatFileStatus
argument_list|(
name|msStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Compare the metadata of the directory with the same path, on S3 and      * the metadata store, respectively. If one of them is null, consider the      * metadata of the directory and all its subdirectories are missing from      * the source.      *      * Pass the FileStatus obtained from s3 and metadata store to avoid one      * round trip to fetch the same metadata twice, because the FileStatus      * hve already been obtained from listStatus() / listChildren operations.      *      * @param msDir the directory FileStatus obtained from the metadata store.      * @param s3Dir the directory FileStatus obtained from S3.      * @param out the output stream to generate diff results.      * @throws IOException on I/O errors.      */
DECL|method|compareDir (FileStatus msDir, FileStatus s3Dir, PrintStream out)
specifier|private
name|void
name|compareDir
parameter_list|(
name|FileStatus
name|msDir
parameter_list|,
name|FileStatus
name|s3Dir
parameter_list|,
name|PrintStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
operator|(
name|msDir
operator|==
literal|null
operator|&&
name|s3Dir
operator|==
literal|null
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|msDir
operator|!=
literal|null
operator|&&
name|s3Dir
operator|!=
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|msDir
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|s3Dir
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"The path from metadata store and s3 are different:"
operator|+
literal|" ms=%s s3=%s"
argument_list|,
name|msDir
operator|.
name|getPath
argument_list|()
argument_list|,
name|s3Dir
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|s3Children
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|s3Dir
operator|!=
literal|null
operator|&&
name|s3Dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
for|for
control|(
name|FileStatus
name|status
range|:
name|getFilesystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|s3Dir
operator|.
name|getPath
argument_list|()
argument_list|)
control|)
block|{
name|s3Children
operator|.
name|put
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|msChildren
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|msDir
operator|!=
literal|null
operator|&&
name|msDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|DirListingMetadata
name|dirMeta
init|=
name|getStore
argument_list|()
operator|.
name|listChildren
argument_list|(
name|msDir
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirMeta
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PathMetadata
name|meta
range|:
name|dirMeta
operator|.
name|getListing
argument_list|()
control|)
block|{
name|FileStatus
name|status
init|=
name|meta
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|msChildren
operator|.
name|put
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Set
argument_list|<
name|Path
argument_list|>
name|allPaths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|s3Children
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|allPaths
operator|.
name|addAll
argument_list|(
name|msChildren
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|allPaths
control|)
block|{
name|FileStatus
name|s3Status
init|=
name|s3Children
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FileStatus
name|msStatus
init|=
name|msChildren
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|printDiff
argument_list|(
name|msStatus
argument_list|,
name|s3Status
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|s3Status
operator|!=
literal|null
operator|&&
name|s3Status
operator|.
name|isDirectory
argument_list|()
operator|)
operator|||
operator|(
name|msStatus
operator|!=
literal|null
operator|&&
name|msStatus
operator|.
name|isDirectory
argument_list|()
operator|)
condition|)
block|{
name|compareDir
argument_list|(
name|msStatus
argument_list|,
name|s3Status
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Compare both metadata store and S3 on the same path.      *      * @param path the path to be compared.      * @param out  the output stream to display results.      * @throws IOException on I/O errors.      */
DECL|method|compareRoot (Path path, PrintStream out)
specifier|private
name|void
name|compareRoot
parameter_list|(
name|Path
name|path
parameter_list|,
name|PrintStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|qualified
init|=
name|getFilesystem
argument_list|()
operator|.
name|qualify
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FileStatus
name|s3Status
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s3Status
operator|=
name|getFilesystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|qualified
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{       }
name|PathMetadata
name|meta
init|=
name|getStore
argument_list|()
operator|.
name|get
argument_list|(
name|qualified
argument_list|)
decl_stmt|;
name|FileStatus
name|msStatus
init|=
operator|(
name|meta
operator|!=
literal|null
operator|&&
operator|!
name|meta
operator|.
name|isDeleted
argument_list|()
operator|)
condition|?
name|meta
operator|.
name|getFileStatus
argument_list|()
else|:
literal|null
decl_stmt|;
name|compareDir
argument_list|(
name|msStatus
argument_list|,
name|s3Status
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|run (String[] args, PrintStream out)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|PrintStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|parseArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
return|return
name|INVALID_ARGUMENT
return|;
block|}
name|String
name|s3Path
init|=
name|paths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|initS3AFileSystem
argument_list|(
name|s3Path
argument_list|)
expr_stmt|;
name|initMetadataStore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|URI
name|uri
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|s3Path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
name|root
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getPath
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|root
operator|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|root
operator|=
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|root
operator|=
name|getFilesystem
argument_list|()
operator|.
name|qualify
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|compareRoot
argument_list|(
name|root
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|run
argument_list|(
name|args
argument_list|,
name|System
operator|.
name|out
argument_list|)
return|;
block|}
block|}
comment|/**    * Prune metadata that has not been modified recently.    */
DECL|class|Prune
specifier|static
class|class
name|Prune
extends|extends
name|S3GuardTool
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"prune"
decl_stmt|;
DECL|field|PURPOSE
specifier|public
specifier|static
specifier|final
name|String
name|PURPOSE
init|=
literal|"truncate older metadata from "
operator|+
literal|"repository "
operator|+
name|DATA_IN_S3_IS_PRESERVED
decl_stmt|;
empty_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
name|NAME
operator|+
literal|" [OPTIONS] [s3a://BUCKET]\n"
operator|+
literal|"\t"
operator|+
name|PURPOSE
operator|+
literal|"\n\n"
operator|+
literal|"Common options:\n"
operator|+
literal|"  -"
operator|+
name|META_FLAG
operator|+
literal|" URL - Metadata repository details "
operator|+
literal|"(implementation-specific)\n"
operator|+
literal|"\n"
operator|+
literal|"Amazon DynamoDB-specific options:\n"
operator|+
literal|"  -"
operator|+
name|REGION_FLAG
operator|+
literal|" REGION - Service region for connections\n"
operator|+
literal|"\n"
operator|+
literal|"  URLs for Amazon DynamoDB are of the form dynamodb://TABLE_NAME.\n"
operator|+
literal|"  Specifying both the -"
operator|+
name|REGION_FLAG
operator|+
literal|" option and an S3A path\n"
operator|+
literal|"  is not supported."
decl_stmt|;
DECL|method|Prune (Configuration conf)
name|Prune
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CommandFormat
name|format
init|=
name|getCommandFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|addOptionWithValue
argument_list|(
name|DAYS_FLAG
argument_list|)
expr_stmt|;
name|format
operator|.
name|addOptionWithValue
argument_list|(
name|HOURS_FLAG
argument_list|)
expr_stmt|;
name|format
operator|.
name|addOptionWithValue
argument_list|(
name|MINUTES_FLAG
argument_list|)
expr_stmt|;
name|format
operator|.
name|addOptionWithValue
argument_list|(
name|SECONDS_FLAG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setMetadataStore (MetadataStore ms)
name|void
name|setMetadataStore
parameter_list|(
name|MetadataStore
name|ms
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|this
operator|.
name|setStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getUsage ()
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|USAGE
return|;
block|}
DECL|method|getDeltaComponent (TimeUnit unit, String arg)
specifier|private
name|long
name|getDeltaComponent
parameter_list|(
name|TimeUnit
name|unit
parameter_list|,
name|String
name|arg
parameter_list|)
block|{
name|String
name|raw
init|=
name|getCommandFormat
argument_list|()
operator|.
name|getOptValue
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|raw
operator|==
literal|null
operator|||
name|raw
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Long
name|parsed
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|raw
argument_list|)
decl_stmt|;
return|return
name|unit
operator|.
name|toMillis
argument_list|(
name|parsed
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|run (String[] args, PrintStream out)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|PrintStream
name|out
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|parseArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parseDynamoDBRegion
argument_list|(
name|paths
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
return|return
name|INVALID_ARGUMENT
return|;
block|}
name|initMetadataStore
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|long
name|confDelta
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|Constants
operator|.
name|S3GUARD_CLI_PRUNE_AGE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|long
name|cliDelta
init|=
literal|0
decl_stmt|;
name|cliDelta
operator|+=
name|getDeltaComponent
argument_list|(
name|TimeUnit
operator|.
name|DAYS
argument_list|,
literal|"days"
argument_list|)
expr_stmt|;
name|cliDelta
operator|+=
name|getDeltaComponent
argument_list|(
name|TimeUnit
operator|.
name|HOURS
argument_list|,
literal|"hours"
argument_list|)
expr_stmt|;
name|cliDelta
operator|+=
name|getDeltaComponent
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
literal|"minutes"
argument_list|)
expr_stmt|;
name|cliDelta
operator|+=
name|getDeltaComponent
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
literal|"seconds"
argument_list|)
expr_stmt|;
if|if
condition|(
name|confDelta
operator|<=
literal|0
operator|&&
name|cliDelta
operator|<=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a positive age for metadata to prune."
argument_list|)
expr_stmt|;
block|}
comment|// A delta provided on the CLI overrides if one is configured
name|long
name|delta
init|=
name|confDelta
decl_stmt|;
if|if
condition|(
name|cliDelta
operator|>
literal|0
condition|)
block|{
name|delta
operator|=
name|cliDelta
expr_stmt|;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|divide
init|=
name|now
operator|-
name|delta
decl_stmt|;
name|getStore
argument_list|()
operator|.
name|prune
argument_list|(
name|divide
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
return|return
name|run
argument_list|(
name|args
argument_list|,
name|System
operator|.
name|out
argument_list|)
return|;
block|}
block|}
DECL|field|command
specifier|private
specifier|static
name|S3GuardTool
name|command
decl_stmt|;
DECL|method|printHelp ()
specifier|private
specifier|static
name|void
name|printHelp
parameter_list|()
block|{
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: hadoop "
operator|+
name|USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\tperform S3Guard metadata store "
operator|+
literal|"administrative commands."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: hadoop "
operator|+
name|command
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|COMMON_USAGE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute the command with the given arguments.    *    * @param args command specific arguments.    * @param conf Hadoop configuration.    * @return exit code.    * @throws Exception on I/O errors.    */
DECL|method|run (String[] args, Configuration conf)
specifier|public
specifier|static
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|/* ToolRunner.run does this too, but we must do it before looking at     subCommand or instantiating the cmd object below */
name|String
index|[]
name|otherArgs
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
operator|.
name|getRemainingArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherArgs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|printHelp
argument_list|()
expr_stmt|;
return|return
name|INVALID_ARGUMENT
return|;
block|}
specifier|final
name|String
name|subCommand
init|=
name|otherArgs
index|[
literal|0
index|]
decl_stmt|;
switch|switch
condition|(
name|subCommand
condition|)
block|{
case|case
name|Init
operator|.
name|NAME
case|:
name|command
operator|=
operator|new
name|Init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
break|break;
case|case
name|Destroy
operator|.
name|NAME
case|:
name|command
operator|=
operator|new
name|Destroy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
break|break;
case|case
name|Import
operator|.
name|NAME
case|:
name|command
operator|=
operator|new
name|Import
argument_list|(
name|conf
argument_list|)
expr_stmt|;
break|break;
case|case
name|Diff
operator|.
name|NAME
case|:
name|command
operator|=
operator|new
name|Diff
argument_list|(
name|conf
argument_list|)
expr_stmt|;
break|break;
case|case
name|Prune
operator|.
name|NAME
case|:
name|command
operator|=
operator|new
name|Prune
argument_list|(
name|conf
argument_list|)
expr_stmt|;
break|break;
default|default:
name|printHelp
argument_list|()
expr_stmt|;
return|return
name|INVALID_ARGUMENT
return|;
block|}
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|command
argument_list|,
name|otherArgs
argument_list|)
return|;
block|}
comment|/**    * Main entry point. Calls {@code System.exit()} on all execution paths.    * @param args argument list    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|int
name|ret
init|=
name|run
argument_list|(
name|args
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandFormat
operator|.
name|UnknownOptionException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printHelp
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|INVALID_ARGUMENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ERROR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

