begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
operator|.
name|ChangeDetectionPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Read-specific operation context struct.  */
end_comment

begin_class
DECL|class|S3AReadOpContext
specifier|public
class|class
name|S3AReadOpContext
extends|extends
name|S3AOpContext
block|{
comment|/**    * Path of read.    */
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
comment|/**    * Initial input policy of the stream.    */
DECL|field|inputPolicy
specifier|private
specifier|final
name|S3AInputPolicy
name|inputPolicy
decl_stmt|;
comment|/**    * How to detect and deal with the object being updated during read.    */
DECL|field|changeDetectionPolicy
specifier|private
specifier|final
name|ChangeDetectionPolicy
name|changeDetectionPolicy
decl_stmt|;
comment|/**    * Readahead for GET operations/skip, etc.    */
DECL|field|readahead
specifier|private
specifier|final
name|long
name|readahead
decl_stmt|;
comment|/**    * Instantiate.    * @param path path of read    * @param isS3GuardEnabled true iff S3Guard is enabled.    * @param invoker invoker for normal retries.    * @param s3guardInvoker S3Guard-specific retry invoker.    * @param stats statistics (may be null)    * @param instrumentation FS instrumentation    * @param dstFileStatus target file status    * @param inputPolicy the input policy    * @param readahead readahead for GET operations/skip, etc.    * @param changeDetectionPolicy change detection policy.    */
DECL|method|S3AReadOpContext ( final Path path, boolean isS3GuardEnabled, Invoker invoker, Invoker s3guardInvoker, @Nullable FileSystem.Statistics stats, S3AInstrumentation instrumentation, FileStatus dstFileStatus, S3AInputPolicy inputPolicy, ChangeDetectionPolicy changeDetectionPolicy, final long readahead)
specifier|public
name|S3AReadOpContext
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
name|boolean
name|isS3GuardEnabled
parameter_list|,
name|Invoker
name|invoker
parameter_list|,
name|Invoker
name|s3guardInvoker
parameter_list|,
annotation|@
name|Nullable
name|FileSystem
operator|.
name|Statistics
name|stats
parameter_list|,
name|S3AInstrumentation
name|instrumentation
parameter_list|,
name|FileStatus
name|dstFileStatus
parameter_list|,
name|S3AInputPolicy
name|inputPolicy
parameter_list|,
name|ChangeDetectionPolicy
name|changeDetectionPolicy
parameter_list|,
specifier|final
name|long
name|readahead
parameter_list|)
block|{
name|super
argument_list|(
name|isS3GuardEnabled
argument_list|,
name|invoker
argument_list|,
name|s3guardInvoker
argument_list|,
name|stats
argument_list|,
name|instrumentation
argument_list|,
name|dstFileStatus
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|readahead
operator|>=
literal|0
argument_list|,
literal|"invalid readahead %d"
argument_list|,
name|readahead
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputPolicy
operator|=
name|checkNotNull
argument_list|(
name|inputPolicy
argument_list|)
expr_stmt|;
name|this
operator|.
name|changeDetectionPolicy
operator|=
name|checkNotNull
argument_list|(
name|changeDetectionPolicy
argument_list|)
expr_stmt|;
name|this
operator|.
name|readahead
operator|=
name|readahead
expr_stmt|;
block|}
comment|/**    * Get invoker to use for read operations.    * When S3Guard is enabled we use the S3Guard invoker,    * which deals with things like FileNotFoundException    * differently.    * @return invoker to use for read codepaths    */
DECL|method|getReadInvoker ()
specifier|public
name|Invoker
name|getReadInvoker
parameter_list|()
block|{
if|if
condition|(
name|isS3GuardEnabled
condition|)
block|{
return|return
name|s3guardInvoker
return|;
block|}
else|else
block|{
return|return
name|invoker
return|;
block|}
block|}
comment|/**    * Get the path of this read.    * @return path.    */
DECL|method|getPath ()
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**    * Get the IO policy.    * @return the initial input policy.    */
DECL|method|getInputPolicy ()
specifier|public
name|S3AInputPolicy
name|getInputPolicy
parameter_list|()
block|{
return|return
name|inputPolicy
return|;
block|}
DECL|method|getChangeDetectionPolicy ()
specifier|public
name|ChangeDetectionPolicy
name|getChangeDetectionPolicy
parameter_list|()
block|{
return|return
name|changeDetectionPolicy
return|;
block|}
comment|/**    * Get the readahead for this operation.    * @return a value {@literal>=} 0    */
DECL|method|getReadahead ()
specifier|public
name|long
name|getReadahead
parameter_list|()
block|{
return|return
name|readahead
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"S3AReadOpContext{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"path="
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", inputPolicy="
argument_list|)
operator|.
name|append
argument_list|(
name|inputPolicy
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", readahead="
argument_list|)
operator|.
name|append
argument_list|(
name|readahead
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", changeDetectionPolicy="
argument_list|)
operator|.
name|append
argument_list|(
name|changeDetectionPolicy
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

