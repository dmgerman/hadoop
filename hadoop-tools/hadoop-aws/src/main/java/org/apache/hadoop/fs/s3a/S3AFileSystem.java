begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3
operator|.
name|S3Credentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProviderChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|InstanceProfileCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CannedAccessControlList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ListObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PutObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CopyObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3ObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|Copy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|TransferManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|TransferManagerConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|Upload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|event
operator|.
name|ProgressListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|event
operator|.
name|ProgressEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|S3AFileSystem
specifier|public
class|class
name|S3AFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|s3
specifier|private
name|AmazonS3Client
name|s3
decl_stmt|;
DECL|field|bucket
specifier|private
name|String
name|bucket
decl_stmt|;
DECL|field|maxKeys
specifier|private
name|int
name|maxKeys
decl_stmt|;
DECL|field|partSize
specifier|private
name|long
name|partSize
decl_stmt|;
DECL|field|partSizeThreshold
specifier|private
name|int
name|partSizeThreshold
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3AFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cannedACL
specifier|private
name|CannedAccessControlList
name|cannedACL
decl_stmt|;
DECL|field|serverSideEncryptionAlgorithm
specifier|private
name|String
name|serverSideEncryptionAlgorithm
decl_stmt|;
comment|// The maximum number of entries that can be deleted in any call to s3
DECL|field|MAX_ENTRIES_TO_DELETE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ENTRIES_TO_DELETE
init|=
literal|1000
decl_stmt|;
comment|/** Called after a new FileSystem instance is constructed.    * @param name a uri whose authority section names the host, port, etc.    *   for this FileSystem    * @param conf the configuration    */
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|uri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|name
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|workingDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|uri
argument_list|,
name|this
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try to get our credentials or just connect anonymously
name|S3Credentials
name|s3Credentials
init|=
operator|new
name|S3Credentials
argument_list|()
decl_stmt|;
name|s3Credentials
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|AWSCredentialsProviderChain
name|credentials
init|=
operator|new
name|AWSCredentialsProviderChain
argument_list|(
operator|new
name|BasicAWSCredentialsProvider
argument_list|(
name|s3Credentials
operator|.
name|getAccessKey
argument_list|()
argument_list|,
name|s3Credentials
operator|.
name|getSecretAccessKey
argument_list|()
argument_list|)
argument_list|,
operator|new
name|InstanceProfileCredentialsProvider
argument_list|()
argument_list|,
operator|new
name|AnonymousAWSCredentialsProvider
argument_list|()
argument_list|)
decl_stmt|;
name|bucket
operator|=
name|name
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|ClientConfiguration
name|awsConf
init|=
operator|new
name|ClientConfiguration
argument_list|()
decl_stmt|;
name|awsConf
operator|.
name|setMaxConnections
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MAXIMUM_CONNECTIONS
argument_list|,
name|DEFAULT_MAXIMUM_CONNECTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setProtocol
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|SECURE_CONNECTIONS
argument_list|,
name|DEFAULT_SECURE_CONNECTIONS
argument_list|)
condition|?
name|Protocol
operator|.
name|HTTPS
else|:
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setMaxErrorRetry
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_ERROR_RETRIES
argument_list|,
name|DEFAULT_MAX_ERROR_RETRIES
argument_list|)
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setSocketTimeout
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|SOCKET_TIMEOUT
argument_list|,
name|DEFAULT_SOCKET_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
name|s3
operator|=
operator|new
name|AmazonS3Client
argument_list|(
name|credentials
argument_list|,
name|awsConf
argument_list|)
expr_stmt|;
name|maxKeys
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_PAGING_KEYS
argument_list|,
name|DEFAULT_MAX_PAGING_KEYS
argument_list|)
expr_stmt|;
name|partSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MULTIPART_SIZE
argument_list|,
name|DEFAULT_MULTIPART_SIZE
argument_list|)
expr_stmt|;
name|partSizeThreshold
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MIN_MULTIPART_THRESHOLD
argument_list|,
name|DEFAULT_MIN_MULTIPART_THRESHOLD
argument_list|)
expr_stmt|;
if|if
condition|(
name|partSize
operator|<
literal|5
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|MULTIPART_SIZE
operator|+
literal|" must be at least 5 MB"
argument_list|)
expr_stmt|;
name|partSize
operator|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
if|if
condition|(
name|partSizeThreshold
operator|<
literal|5
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|MIN_MULTIPART_THRESHOLD
operator|+
literal|" must be at least 5 MB"
argument_list|)
expr_stmt|;
name|partSizeThreshold
operator|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
name|String
name|cannedACLName
init|=
name|conf
operator|.
name|get
argument_list|(
name|CANNED_ACL
argument_list|,
name|DEFAULT_CANNED_ACL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cannedACLName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cannedACL
operator|=
name|CannedAccessControlList
operator|.
name|valueOf
argument_list|(
name|cannedACLName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cannedACL
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|s3
operator|.
name|doesBucketExist
argument_list|(
name|bucket
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bucket "
operator|+
name|bucket
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|boolean
name|purgeExistingMultipart
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|PURGE_EXISTING_MULTIPART
argument_list|,
name|DEFAULT_PURGE_EXISTING_MULTIPART
argument_list|)
decl_stmt|;
name|long
name|purgeExistingMultipartAge
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|PURGE_EXISTING_MULTIPART_AGE
argument_list|,
name|DEFAULT_PURGE_EXISTING_MULTIPART_AGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|purgeExistingMultipart
condition|)
block|{
name|TransferManager
name|transferManager
init|=
operator|new
name|TransferManager
argument_list|(
name|s3
argument_list|)
decl_stmt|;
name|Date
name|purgeBefore
init|=
operator|new
name|Date
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|purgeExistingMultipartAge
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|transferManager
operator|.
name|abortMultipartUploads
argument_list|(
name|bucket
argument_list|,
name|purgeBefore
argument_list|)
expr_stmt|;
name|transferManager
operator|.
name|shutdownNow
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|serverSideEncryptionAlgorithm
operator|=
name|conf
operator|.
name|get
argument_list|(
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the protocol scheme for the FileSystem.    *    * @return "s3a"    */
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"s3a"
return|;
block|}
comment|/** Returns a URI whose scheme and authority identify this FileSystem.*/
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
DECL|method|S3AFileSystem ()
specifier|public
name|S3AFileSystem
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/* Turns a path (relative or otherwise) into an S3 key    */
DECL|method|pathToKey (Path path)
specifier|private
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
operator|&&
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|keyToPath (String key)
specifier|private
name|Path
name|keyToPath
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|key
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataInputStream at the indicated Path.    * @param f the file name to open    * @param bufferSize the size of the buffer to be used.    */
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Opening '"
operator|+
name|f
operator|+
literal|"' for reading"
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Can't open "
operator|+
name|f
operator|+
literal|" because it is a directory"
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|S3AInputStream
argument_list|(
name|bucket
argument_list|,
name|pathToKey
argument_list|(
name|f
argument_list|)
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|s3
argument_list|,
name|statistics
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create an FSDataOutputStream at the indicated Path with write-progress    * reporting.    * @param f the file name to open    * @param permission    * @param overwrite if a file with this name already exists, then if true,    *   the file will be overwritten, and if false an error will be thrown.    * @param bufferSize the size of the buffer to be used.    * @param replication required block replication for the file.    * @param blockSize    * @param progress    * @throws IOException    * @see #setPermission(Path, FsPermission)    */
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|overwrite
operator|&&
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|f
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
comment|// We pass null to FSDataOutputStream so it won't count writes that are being buffered to a file
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|S3AOutputStream
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|s3
argument_list|,
name|this
argument_list|,
name|bucket
argument_list|,
name|key
argument_list|,
name|progress
argument_list|,
name|cannedACL
argument_list|,
name|statistics
argument_list|,
name|serverSideEncryptionAlgorithm
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Append to an existing file (optional operation).    * @param f the existing file to be appended.    * @param bufferSize the size of the buffer to be used.    * @param progress for reporting progress if it is not null.    * @throws IOException    */
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
comment|/**    * Renames Path src to Path dst.  Can take place on local fs    * or remote DFS.    *    * Warning: S3 does not support renames. This method does a copy which can     * take S3 some time to execute with large files and directories. Since     * there is no Progressable passed in, this can time out jobs.    *    * Note: This implementation differs with other S3 drivers. Specifically:    *       Fails if src is a file and dst is a directory.    *       Fails if src is a directory and dst is a file.    *       Fails if the parent of dst does not exist or is a file.    *       Fails if dst is a directory that is not empty.    *    * @param src path to be renamed    * @param dst new path after rename    * @throws IOException on failure    * @return true if rename is successful    */
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rename path "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
name|String
name|srcKey
init|=
name|pathToKey
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|String
name|dstKey
init|=
name|pathToKey
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcKey
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|dstKey
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rename: src or dst are empty"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|S3AFileStatus
name|srcStatus
decl_stmt|;
try|try
block|{
name|srcStatus
operator|=
name|getFileStatus
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"rename: src not found "
operator|+
name|src
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|srcKey
operator|.
name|equals
argument_list|(
name|dstKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rename: src and dst refer to the same file or directory"
argument_list|)
expr_stmt|;
block|}
return|return
name|srcStatus
operator|.
name|isFile
argument_list|()
return|;
block|}
name|S3AFileStatus
name|dstStatus
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dstStatus
operator|=
name|getFileStatus
argument_list|(
name|dst
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcStatus
operator|.
name|isDirectory
argument_list|()
operator|&&
name|dstStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rename: src is a directory and dst is a file"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|dstStatus
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|dstStatus
operator|.
name|isEmptyDirectory
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Parent must exist
name|Path
name|parent
init|=
name|dst
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pathToKey
argument_list|(
name|parent
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|S3AFileStatus
name|dstParentStatus
init|=
name|getFileStatus
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dstParentStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e2
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|// Ok! Time to start
if|if
condition|(
name|srcStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rename: renaming file "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dstStatus
operator|!=
literal|null
operator|&&
name|dstStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
name|newDstKey
init|=
name|dstKey
decl_stmt|;
if|if
condition|(
operator|!
name|newDstKey
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|newDstKey
operator|=
name|newDstKey
operator|+
literal|"/"
expr_stmt|;
block|}
name|String
name|filename
init|=
name|srcKey
operator|.
name|substring
argument_list|(
name|pathToKey
argument_list|(
name|src
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|newDstKey
operator|=
name|newDstKey
operator|+
name|filename
expr_stmt|;
name|copyFile
argument_list|(
name|srcKey
argument_list|,
name|newDstKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyFile
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
block|}
name|delete
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rename: renaming directory "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
comment|// This is a directory to directory copy
if|if
condition|(
operator|!
name|dstKey
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|dstKey
operator|=
name|dstKey
operator|+
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|srcKey
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|srcKey
operator|=
name|srcKey
operator|+
literal|"/"
expr_stmt|;
block|}
comment|//Verify dest is not a child of the source directory
if|if
condition|(
name|dstKey
operator|.
name|startsWith
argument_list|(
name|srcKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cannot rename a directory to a subdirectory of self"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
name|keysToDelete
init|=
operator|new
name|ArrayList
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dstStatus
operator|!=
literal|null
operator|&&
name|dstStatus
operator|.
name|isEmptyDirectory
argument_list|()
condition|)
block|{
comment|// delete unnecessary fake directory.
name|keysToDelete
operator|.
name|add
argument_list|(
operator|new
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|(
name|dstKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ListObjectsRequest
name|request
init|=
operator|new
name|ListObjectsRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPrefix
argument_list|(
name|srcKey
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxKeys
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
name|ObjectListing
name|objects
init|=
name|s3
operator|.
name|listObjects
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|S3ObjectSummary
name|summary
range|:
name|objects
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|keysToDelete
operator|.
name|add
argument_list|(
operator|new
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|(
name|summary
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|newDstKey
init|=
name|dstKey
operator|+
name|summary
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|srcKey
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|copyFile
argument_list|(
name|summary
operator|.
name|getKey
argument_list|()
argument_list|,
name|newDstKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|keysToDelete
operator|.
name|size
argument_list|()
operator|==
name|MAX_ENTRIES_TO_DELETE
condition|)
block|{
name|DeleteObjectsRequest
name|deleteRequest
init|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|bucket
argument_list|)
operator|.
name|withKeys
argument_list|(
name|keysToDelete
argument_list|)
decl_stmt|;
name|s3
operator|.
name|deleteObjects
argument_list|(
name|deleteRequest
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|keysToDelete
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|objects
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
name|objects
operator|=
name|s3
operator|.
name|listNextBatchOfObjects
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|keysToDelete
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DeleteObjectsRequest
name|deleteRequest
init|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|bucket
argument_list|)
operator|.
name|withKeys
argument_list|(
name|keysToDelete
argument_list|)
decl_stmt|;
name|s3
operator|.
name|deleteObjects
argument_list|(
name|deleteRequest
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
if|if
condition|(
name|src
operator|.
name|getParent
argument_list|()
operator|!=
name|dst
operator|.
name|getParent
argument_list|()
condition|)
block|{
name|deleteUnnecessaryFakeDirectories
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|createFakeDirectoryIfNecessary
argument_list|(
name|src
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/** Delete a file.    *    * @param f the path to delete.    * @param recursive if path is a directory and set to    * true, the directory is deleted else throws an exception. In    * case of a file the recursive can be set to either true or false.    * @return  true if delete is successful else false.    * @throws IOException    */
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete path "
operator|+
name|f
operator|+
literal|" - recursive "
operator|+
name|recursive
argument_list|)
expr_stmt|;
block|}
name|S3AFileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Couldn't delete "
operator|+
name|f
operator|+
literal|" - does not exist"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"delete: Path is a directory"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|recursive
operator|&&
operator|!
name|status
operator|.
name|isEmptyDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Path is a folder: "
operator|+
name|f
operator|+
literal|" and it is not an empty directory"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|key
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|+
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"s3a cannot delete the root directory"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|status
operator|.
name|isEmptyDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting fake empty directory"
argument_list|)
expr_stmt|;
block|}
name|s3
operator|.
name|deleteObject
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting objects for directory prefix "
operator|+
name|key
operator|+
literal|" to delete"
argument_list|)
expr_stmt|;
block|}
name|ListObjectsRequest
name|request
init|=
operator|new
name|ListObjectsRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPrefix
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// Hopefully not setting a delimiter will cause this to find everything
comment|//request.setDelimiter("/");
name|request
operator|.
name|setMaxKeys
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectListing
name|objects
init|=
name|s3
operator|.
name|listObjects
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|S3ObjectSummary
name|summary
range|:
name|objects
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|new
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|(
name|summary
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got object to delete "
operator|+
name|summary
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|==
name|MAX_ENTRIES_TO_DELETE
condition|)
block|{
name|DeleteObjectsRequest
name|deleteRequest
init|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|bucket
argument_list|)
operator|.
name|withKeys
argument_list|(
name|keys
argument_list|)
decl_stmt|;
name|s3
operator|.
name|deleteObjects
argument_list|(
name|deleteRequest
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|objects
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
name|objects
operator|=
name|s3
operator|.
name|listNextBatchOfObjects
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DeleteObjectsRequest
name|deleteRequest
init|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|bucket
argument_list|)
operator|.
name|withKeys
argument_list|(
name|keys
argument_list|)
decl_stmt|;
name|s3
operator|.
name|deleteObjects
argument_list|(
name|deleteRequest
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"delete: Path is a file"
argument_list|)
expr_stmt|;
block|}
name|s3
operator|.
name|deleteObject
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|createFakeDirectoryIfNecessary
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|createFakeDirectoryIfNecessary (Path f)
specifier|private
name|void
name|createFakeDirectoryIfNecessary
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating new fake directory at "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
name|createFakeDirectory
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * List the statuses of the files/directories in the given path if the path is    * a directory.    *    * @param f given path    * @return the statuses of the files/directories in the given patch    * @throws FileNotFoundException when the path does not exist;    *         IOException see specific implementation    */
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"List status for path: "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|FileStatus
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|key
operator|=
name|key
operator|+
literal|"/"
expr_stmt|;
block|}
name|ListObjectsRequest
name|request
init|=
operator|new
name|ListObjectsRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPrefix
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDelimiter
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxKeys
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"listStatus: doing listObjects for directory "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|ObjectListing
name|objects
init|=
name|s3
operator|.
name|listObjects
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|S3ObjectSummary
name|summary
range|:
name|objects
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|Path
name|keyPath
init|=
name|keyToPath
argument_list|(
name|summary
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
comment|// Skip over keys that are ourselves and old S3N _$folder$ files
if|if
condition|(
name|keyPath
operator|.
name|equals
argument_list|(
name|f
argument_list|)
operator|||
name|summary
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
name|S3N_FOLDER_SUFFIX
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring: "
operator|+
name|keyPath
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|objectRepresentsDirectory
argument_list|(
name|summary
operator|.
name|getKey
argument_list|()
argument_list|,
name|summary
operator|.
name|getSize
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|keyPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding: fd: "
operator|+
name|keyPath
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
name|summary
operator|.
name|getSize
argument_list|()
argument_list|,
name|dateToLong
argument_list|(
name|summary
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|,
name|keyPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding: fi: "
operator|+
name|keyPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|prefix
range|:
name|objects
operator|.
name|getCommonPrefixes
argument_list|()
control|)
block|{
name|Path
name|keyPath
init|=
name|keyToPath
argument_list|(
name|prefix
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyPath
operator|.
name|equals
argument_list|(
name|f
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|keyPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding: rd: "
operator|+
name|keyPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|objects
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"listStatus: list truncated - getting next batch"
argument_list|)
expr_stmt|;
block|}
name|objects
operator|=
name|s3
operator|.
name|listNextBatchOfObjects
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding: rd (not a dir): "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Set the current working directory for the given file system. All relative    * paths will be resolved relative to it.    *    * @param new_dir    */
DECL|method|setWorkingDirectory (Path new_dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|new_dir
parameter_list|)
block|{
name|workingDir
operator|=
name|new_dir
expr_stmt|;
block|}
comment|/**    * Get the current working directory for the given file system    * @return the directory pathname    */
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
comment|/**    * Make the given file and all non-existent parents into    * directories. Has the semantics of Unix 'mkdir -p'.    * Existence of the directory hierarchy is not an error.    * @param f path to create    * @param permission to apply to f    */
comment|// TODO: If we have created an empty file at /foo/bar and we then call
comment|// mkdirs for /foo/bar/baz/roo what happens to the empty file /foo/bar/?
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Making directory: "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Path is a file: "
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|Path
name|fPart
init|=
name|f
decl_stmt|;
do|do
block|{
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|fPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Can't make directory for path '%s' since it is a file."
argument_list|,
name|fPart
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{         }
name|fPart
operator|=
name|fPart
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|fPart
operator|!=
literal|null
condition|)
do|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|createFakeDirectory
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Return a file status object that represents the path.    * @param f The path we want information from    * @return a FileStatus object    * @throws java.io.FileNotFoundException when the path does not exist;    *         IOException see specific implementation    */
DECL|method|getFileStatus (Path f)
specifier|public
name|S3AFileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting path status for "
operator|+
name|f
operator|+
literal|" ("
operator|+
name|key
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|ObjectMetadata
name|meta
init|=
name|s3
operator|.
name|getObjectMetadata
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectRepresentsDirectory
argument_list|(
name|key
argument_list|,
name|meta
operator|.
name|getContentLength
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found exact file: fake directory"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|f
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found exact file: normal file"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|S3AFileStatus
argument_list|(
name|meta
operator|.
name|getContentLength
argument_list|()
argument_list|,
name|dateToLong
argument_list|(
name|meta
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|,
name|f
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|404
condition|)
block|{
name|printAmazonServiceException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AmazonClientException
name|e
parameter_list|)
block|{
name|printAmazonClientException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// Necessary?
if|if
condition|(
operator|!
name|key
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|newKey
init|=
name|key
operator|+
literal|"/"
decl_stmt|;
name|ObjectMetadata
name|meta
init|=
name|s3
operator|.
name|getObjectMetadata
argument_list|(
name|bucket
argument_list|,
name|newKey
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectRepresentsDirectory
argument_list|(
name|newKey
argument_list|,
name|meta
operator|.
name|getContentLength
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found file (with /): fake directory"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|f
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found file (with /): real file? should not happen: {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
operator|new
name|S3AFileStatus
argument_list|(
name|meta
operator|.
name|getContentLength
argument_list|()
argument_list|,
name|dateToLong
argument_list|(
name|meta
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|,
name|f
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|404
condition|)
block|{
name|printAmazonServiceException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AmazonClientException
name|e
parameter_list|)
block|{
name|printAmazonClientException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
try|try
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|key
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|+
literal|"/"
expr_stmt|;
block|}
name|ListObjectsRequest
name|request
init|=
operator|new
name|ListObjectsRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPrefix
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDelimiter
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxKeys
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ObjectListing
name|objects
init|=
name|s3
operator|.
name|listObjects
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|objects
operator|.
name|getCommonPrefixes
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|objects
operator|.
name|getObjectSummaries
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found path as directory (with /): "
operator|+
name|objects
operator|.
name|getCommonPrefixes
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"/"
operator|+
name|objects
operator|.
name|getObjectSummaries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|S3ObjectSummary
name|summary
range|:
name|objects
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Summary: "
operator|+
name|summary
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|summary
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|prefix
range|:
name|objects
operator|.
name|getCommonPrefixes
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Prefix: "
operator|+
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|f
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|404
condition|)
block|{
name|printAmazonServiceException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AmazonClientException
name|e
parameter_list|)
block|{
name|printAmazonClientException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not Found: "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"No such file or directory: "
operator|+
name|f
argument_list|)
throw|;
block|}
comment|/**    * The src file is on the local disk.  Add it to FS at    * the given dst name.    *    * This version doesn't need to create a temporary file to calculate the md5.    * Sadly this doesn't seem to be used by the shell cp :(    *    * delSrc indicates if the source should be removed    * @param delSrc whether to delete the src    * @param overwrite whether to overwrite an existing file    * @param src path    * @param dst path    */
annotation|@
name|Override
DECL|method|copyFromLocalFile (boolean delSrc, boolean overwrite, Path src, Path dst)
specifier|public
name|void
name|copyFromLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|overwrite
operator|&&
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|dst
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copying local file from "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
comment|// Since we have a local file, we don't need to stream into a temporary file
name|LocalFileSystem
name|local
init|=
name|getLocal
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|srcfile
init|=
name|local
operator|.
name|pathToFile
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|TransferManagerConfiguration
name|transferConfiguration
init|=
operator|new
name|TransferManagerConfiguration
argument_list|()
decl_stmt|;
name|transferConfiguration
operator|.
name|setMinimumUploadPartSize
argument_list|(
name|partSize
argument_list|)
expr_stmt|;
name|transferConfiguration
operator|.
name|setMultipartUploadThreshold
argument_list|(
name|partSizeThreshold
argument_list|)
expr_stmt|;
name|TransferManager
name|transfers
init|=
operator|new
name|TransferManager
argument_list|(
name|s3
argument_list|)
decl_stmt|;
name|transfers
operator|.
name|setConfiguration
argument_list|(
name|transferConfiguration
argument_list|)
expr_stmt|;
specifier|final
name|ObjectMetadata
name|om
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
condition|)
block|{
name|om
operator|.
name|setServerSideEncryption
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
name|PutObjectRequest
name|putObjectRequest
init|=
operator|new
name|PutObjectRequest
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|,
name|srcfile
argument_list|)
decl_stmt|;
name|putObjectRequest
operator|.
name|setCannedAcl
argument_list|(
name|cannedACL
argument_list|)
expr_stmt|;
name|putObjectRequest
operator|.
name|setMetadata
argument_list|(
name|om
argument_list|)
expr_stmt|;
name|ProgressListener
name|progressListener
init|=
operator|new
name|ProgressListener
argument_list|()
block|{
specifier|public
name|void
name|progressChanged
parameter_list|(
name|ProgressEvent
name|progressEvent
parameter_list|)
block|{
switch|switch
condition|(
name|progressEvent
operator|.
name|getEventCode
argument_list|()
condition|)
block|{
case|case
name|ProgressEvent
operator|.
name|PART_COMPLETED_EVENT_CODE
case|:
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
decl_stmt|;
name|Upload
name|up
init|=
name|transfers
operator|.
name|upload
argument_list|(
name|putObjectRequest
argument_list|)
decl_stmt|;
name|up
operator|.
name|addProgressListener
argument_list|(
name|progressListener
argument_list|)
expr_stmt|;
try|try
block|{
name|up
operator|.
name|waitForUploadResult
argument_list|()
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Got interrupted, cancelling"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|transfers
operator|.
name|shutdownNow
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// This will delete unnecessary fake parent directories
name|finishedWrite
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|delSrc
condition|)
block|{
name|local
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**   * Override getCononicalServiceName because we don't support token in S3A   */
annotation|@
name|Override
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
comment|// Does not support Token
return|return
literal|null
return|;
block|}
DECL|method|copyFile (String srcKey, String dstKey)
specifier|private
name|void
name|copyFile
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|String
name|dstKey
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"copyFile "
operator|+
name|srcKey
operator|+
literal|" -> "
operator|+
name|dstKey
argument_list|)
expr_stmt|;
block|}
name|TransferManagerConfiguration
name|transferConfiguration
init|=
operator|new
name|TransferManagerConfiguration
argument_list|()
decl_stmt|;
name|transferConfiguration
operator|.
name|setMultipartCopyPartSize
argument_list|(
name|partSize
argument_list|)
expr_stmt|;
name|TransferManager
name|transfers
init|=
operator|new
name|TransferManager
argument_list|(
name|s3
argument_list|)
decl_stmt|;
name|transfers
operator|.
name|setConfiguration
argument_list|(
name|transferConfiguration
argument_list|)
expr_stmt|;
name|ObjectMetadata
name|srcom
init|=
name|s3
operator|.
name|getObjectMetadata
argument_list|(
name|bucket
argument_list|,
name|srcKey
argument_list|)
decl_stmt|;
specifier|final
name|ObjectMetadata
name|dstom
init|=
name|srcom
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
condition|)
block|{
name|dstom
operator|.
name|setServerSideEncryption
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
name|CopyObjectRequest
name|copyObjectRequest
init|=
operator|new
name|CopyObjectRequest
argument_list|(
name|bucket
argument_list|,
name|srcKey
argument_list|,
name|bucket
argument_list|,
name|dstKey
argument_list|)
decl_stmt|;
name|copyObjectRequest
operator|.
name|setCannedAccessControlList
argument_list|(
name|cannedACL
argument_list|)
expr_stmt|;
name|copyObjectRequest
operator|.
name|setNewObjectMetadata
argument_list|(
name|dstom
argument_list|)
expr_stmt|;
name|ProgressListener
name|progressListener
init|=
operator|new
name|ProgressListener
argument_list|()
block|{
specifier|public
name|void
name|progressChanged
parameter_list|(
name|ProgressEvent
name|progressEvent
parameter_list|)
block|{
switch|switch
condition|(
name|progressEvent
operator|.
name|getEventCode
argument_list|()
condition|)
block|{
case|case
name|ProgressEvent
operator|.
name|PART_COMPLETED_EVENT_CODE
case|:
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
decl_stmt|;
name|Copy
name|copy
init|=
name|transfers
operator|.
name|copy
argument_list|(
name|copyObjectRequest
argument_list|)
decl_stmt|;
name|copy
operator|.
name|addProgressListener
argument_list|(
name|progressListener
argument_list|)
expr_stmt|;
try|try
block|{
name|copy
operator|.
name|waitForCopyResult
argument_list|()
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Got interrupted, cancelling"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|transfers
operator|.
name|shutdownNow
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|objectRepresentsDirectory (final String name, final long size)
specifier|private
name|boolean
name|objectRepresentsDirectory
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|long
name|size
parameter_list|)
block|{
return|return
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|&&
name|name
operator|.
name|charAt
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
operator|&&
name|size
operator|==
literal|0L
return|;
block|}
comment|// Handles null Dates that can be returned by AWS
DECL|method|dateToLong (final Date date)
specifier|private
specifier|static
name|long
name|dateToLong
parameter_list|(
specifier|final
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
return|return
literal|0L
return|;
block|}
return|return
name|date
operator|.
name|getTime
argument_list|()
return|;
block|}
DECL|method|finishedWrite (String key)
specifier|public
name|void
name|finishedWrite
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteUnnecessaryFakeDirectories
argument_list|(
name|keyToPath
argument_list|(
name|key
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteUnnecessaryFakeDirectories (Path f)
specifier|private
name|void
name|deleteUnnecessaryFakeDirectories
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|S3AFileStatus
name|status
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
operator|&&
name|status
operator|.
name|isEmptyDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting fake directory "
operator|+
name|key
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|s3
operator|.
name|deleteObject
argument_list|(
name|bucket
argument_list|,
name|key
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|AmazonServiceException
name|e
parameter_list|)
block|{}
if|if
condition|(
name|f
operator|.
name|isRoot
argument_list|()
condition|)
block|{
break|break;
block|}
name|f
operator|=
name|f
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createFakeDirectory (final String bucketName, final String objectName)
specifier|private
name|void
name|createFakeDirectory
parameter_list|(
specifier|final
name|String
name|bucketName
parameter_list|,
specifier|final
name|String
name|objectName
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
if|if
condition|(
operator|!
name|objectName
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|createEmptyObject
argument_list|(
name|bucketName
argument_list|,
name|objectName
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createEmptyObject
argument_list|(
name|bucketName
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Used to create an empty file that represents an empty directory
DECL|method|createEmptyObject (final String bucketName, final String objectName)
specifier|private
name|void
name|createEmptyObject
parameter_list|(
specifier|final
name|String
name|bucketName
parameter_list|,
specifier|final
name|String
name|objectName
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
specifier|final
name|InputStream
name|im
init|=
operator|new
name|InputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|ObjectMetadata
name|om
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
name|om
operator|.
name|setContentLength
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
condition|)
block|{
name|om
operator|.
name|setServerSideEncryption
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
name|PutObjectRequest
name|putObjectRequest
init|=
operator|new
name|PutObjectRequest
argument_list|(
name|bucketName
argument_list|,
name|objectName
argument_list|,
name|im
argument_list|,
name|om
argument_list|)
decl_stmt|;
name|putObjectRequest
operator|.
name|setCannedAcl
argument_list|(
name|cannedACL
argument_list|)
expr_stmt|;
name|s3
operator|.
name|putObject
argument_list|(
name|putObjectRequest
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the number of bytes that large input files should be optimally    * be split into to minimize i/o time.    * @deprecated use {@link #getDefaultBlockSize(Path)} instead    */
annotation|@
name|Deprecated
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
comment|// default to 32MB: large enough to minimize the impact of seeks
return|return
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|FS_S3A_BLOCK_SIZE
argument_list|,
literal|32
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
return|;
block|}
DECL|method|printAmazonServiceException (AmazonServiceException ase)
specifier|private
name|void
name|printAmazonServiceException
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught an AmazonServiceException, which means your request made it "
operator|+
literal|"to Amazon S3, but was rejected with an error response for some reason."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error Message: "
operator|+
name|ase
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HTTP Status Code: "
operator|+
name|ase
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AWS Error Code: "
operator|+
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error Type: "
operator|+
name|ase
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Request ID: "
operator|+
name|ase
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Class Name: "
operator|+
name|ase
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|printAmazonClientException (AmazonClientException ace)
specifier|private
name|void
name|printAmazonClientException
parameter_list|(
name|AmazonClientException
name|ace
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught an AmazonClientException, which means the client encountered "
operator|+
literal|"a serious internal problem while trying to communicate with S3, "
operator|+
literal|"such as not being able to access the network."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error Message: {}"
operator|+
name|ace
argument_list|,
name|ace
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

