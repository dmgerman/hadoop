begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|S3ClientOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|ENDPOINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|PATH_STYLE_ACCESS
import|;
end_import

begin_comment
comment|/**  * The default {@link S3ClientFactory} implementation.  * This which calls the AWS SDK to configure and create an  * {@link AmazonS3Client} that communicates with the S3 service.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DefaultS3ClientFactory
specifier|public
class|class
name|DefaultS3ClientFactory
extends|extends
name|Configured
implements|implements
name|S3ClientFactory
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|S3AFileSystem
operator|.
name|LOG
decl_stmt|;
annotation|@
name|Override
DECL|method|createS3Client (URI name, final String bucket, final AWSCredentialsProvider credentials, final String userAgentSuffix)
specifier|public
name|AmazonS3
name|createS3Client
parameter_list|(
name|URI
name|name
parameter_list|,
specifier|final
name|String
name|bucket
parameter_list|,
specifier|final
name|AWSCredentialsProvider
name|credentials
parameter_list|,
specifier|final
name|String
name|userAgentSuffix
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
specifier|final
name|ClientConfiguration
name|awsConf
init|=
name|S3AUtils
operator|.
name|createAwsConf
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|bucket
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|userAgentSuffix
argument_list|)
condition|)
block|{
name|awsConf
operator|.
name|setUserAgentSuffix
argument_list|(
name|userAgentSuffix
argument_list|)
expr_stmt|;
block|}
return|return
name|configureAmazonS3Client
argument_list|(
name|newAmazonS3Client
argument_list|(
name|credentials
argument_list|,
name|awsConf
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Wrapper around constructor for {@link AmazonS3} client.    * Override this to provide an extended version of the client    * @param credentials credentials to use    * @param awsConf  AWS configuration    * @return  new AmazonS3 client    */
DECL|method|newAmazonS3Client ( AWSCredentialsProvider credentials, ClientConfiguration awsConf)
specifier|protected
name|AmazonS3
name|newAmazonS3Client
parameter_list|(
name|AWSCredentialsProvider
name|credentials
parameter_list|,
name|ClientConfiguration
name|awsConf
parameter_list|)
block|{
return|return
operator|new
name|AmazonS3Client
argument_list|(
name|credentials
argument_list|,
name|awsConf
argument_list|)
return|;
block|}
comment|/**    * Configure S3 client from the Hadoop configuration.    *    * This includes: endpoint, Path Access and possibly other    * options.    *    * @param conf Hadoop configuration    * @return S3 client    * @throws IllegalArgumentException if misconfigured    */
DECL|method|configureAmazonS3Client (AmazonS3 s3, Configuration conf)
specifier|private
specifier|static
name|AmazonS3
name|configureAmazonS3Client
parameter_list|(
name|AmazonS3
name|s3
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
name|endPoint
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|ENDPOINT
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|endPoint
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|s3
operator|.
name|setEndpoint
argument_list|(
name|endPoint
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Incorrect endpoint: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|applyS3ClientOptions
argument_list|(
name|s3
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Perform any tuning of the {@code S3ClientOptions} settings based on    * the Hadoop configuration.    * This is different from the general AWS configuration creation as    * it is unique to S3 connections.    *    * The {@link Constants#PATH_STYLE_ACCESS} option enables path-style access    * to S3 buckets if configured.  By default, the    * behavior is to use virtual hosted-style access with URIs of the form    * {@code http://bucketname.s3.amazonaws.com}    * Enabling path-style access and a    * region-specific endpoint switches the behavior to use URIs of the form    * {@code http://s3-eu-west-1.amazonaws.com/bucketname}.    * It is common to use this when connecting to private S3 servers, as it    * avoids the need to play with DNS entries.    * @param s3 S3 client    * @param conf Hadoop configuration    * @return the S3 client    */
DECL|method|applyS3ClientOptions (AmazonS3 s3, Configuration conf)
specifier|private
specifier|static
name|AmazonS3
name|applyS3ClientOptions
parameter_list|(
name|AmazonS3
name|s3
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|boolean
name|pathStyleAccess
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|PATH_STYLE_ACCESS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathStyleAccess
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Enabling path style access!"
argument_list|)
expr_stmt|;
name|s3
operator|.
name|setS3ClientOptions
argument_list|(
name|S3ClientOptions
operator|.
name|builder
argument_list|()
operator|.
name|setPathStyleAccess
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s3
return|;
block|}
block|}
end_class

end_unit

