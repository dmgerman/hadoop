begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|S3ClientOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|createAWSCredentialProviderSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|intOption
import|;
end_import

begin_comment
comment|/**  * The default factory implementation, which calls the AWS SDK to configure  * and create an {@link AmazonS3Client} that communicates with the S3 service.  */
end_comment

begin_class
DECL|class|DefaultS3ClientFactory
specifier|public
class|class
name|DefaultS3ClientFactory
extends|extends
name|Configured
implements|implements
name|S3ClientFactory
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|S3AFileSystem
operator|.
name|LOG
decl_stmt|;
annotation|@
name|Override
DECL|method|createS3Client (URI name)
specifier|public
name|AmazonS3
name|createS3Client
parameter_list|(
name|URI
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|AWSCredentialsProvider
name|credentials
init|=
name|createAWSCredentialProviderSet
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|ClientConfiguration
name|awsConf
init|=
name|createAwsConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|AmazonS3
name|s3
init|=
name|newAmazonS3Client
argument_list|(
name|credentials
argument_list|,
name|awsConf
argument_list|)
decl_stmt|;
return|return
name|createAmazonS3Client
argument_list|(
name|s3
argument_list|,
name|conf
argument_list|,
name|credentials
argument_list|,
name|awsConf
argument_list|)
return|;
block|}
comment|/**    * Create a new {@link ClientConfiguration}.    * @param conf The Hadoop configuration    * @return new AWS client configuration    */
DECL|method|createAwsConf (Configuration conf)
specifier|public
specifier|static
name|ClientConfiguration
name|createAwsConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|ClientConfiguration
name|awsConf
init|=
operator|new
name|ClientConfiguration
argument_list|()
decl_stmt|;
name|initConnectionSettings
argument_list|(
name|conf
argument_list|,
name|awsConf
argument_list|)
expr_stmt|;
name|initProxySupport
argument_list|(
name|conf
argument_list|,
name|awsConf
argument_list|)
expr_stmt|;
name|initUserAgent
argument_list|(
name|conf
argument_list|,
name|awsConf
argument_list|)
expr_stmt|;
return|return
name|awsConf
return|;
block|}
comment|/**    * Wrapper around constructor for {@link AmazonS3} client.  Override this to    * provide an extended version of the client    * @param credentials credentials to use    * @param awsConf  AWS configuration    * @return  new AmazonS3 client    */
DECL|method|newAmazonS3Client ( AWSCredentialsProvider credentials, ClientConfiguration awsConf)
specifier|protected
name|AmazonS3
name|newAmazonS3Client
parameter_list|(
name|AWSCredentialsProvider
name|credentials
parameter_list|,
name|ClientConfiguration
name|awsConf
parameter_list|)
block|{
return|return
operator|new
name|AmazonS3Client
argument_list|(
name|credentials
argument_list|,
name|awsConf
argument_list|)
return|;
block|}
comment|/**    * Initializes all AWS SDK settings related to connection management.    *    * @param conf Hadoop configuration    * @param awsConf AWS SDK configuration    */
DECL|method|initConnectionSettings (Configuration conf, ClientConfiguration awsConf)
specifier|private
specifier|static
name|void
name|initConnectionSettings
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ClientConfiguration
name|awsConf
parameter_list|)
block|{
name|awsConf
operator|.
name|setMaxConnections
argument_list|(
name|intOption
argument_list|(
name|conf
argument_list|,
name|MAXIMUM_CONNECTIONS
argument_list|,
name|DEFAULT_MAXIMUM_CONNECTIONS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|secureConnections
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SECURE_CONNECTIONS
argument_list|,
name|DEFAULT_SECURE_CONNECTIONS
argument_list|)
decl_stmt|;
name|awsConf
operator|.
name|setProtocol
argument_list|(
name|secureConnections
condition|?
name|Protocol
operator|.
name|HTTPS
else|:
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setMaxErrorRetry
argument_list|(
name|intOption
argument_list|(
name|conf
argument_list|,
name|MAX_ERROR_RETRIES
argument_list|,
name|DEFAULT_MAX_ERROR_RETRIES
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setConnectionTimeout
argument_list|(
name|intOption
argument_list|(
name|conf
argument_list|,
name|ESTABLISH_TIMEOUT
argument_list|,
name|DEFAULT_ESTABLISH_TIMEOUT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setSocketTimeout
argument_list|(
name|intOption
argument_list|(
name|conf
argument_list|,
name|SOCKET_TIMEOUT
argument_list|,
name|DEFAULT_SOCKET_TIMEOUT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|sockSendBuffer
init|=
name|intOption
argument_list|(
name|conf
argument_list|,
name|SOCKET_SEND_BUFFER
argument_list|,
name|DEFAULT_SOCKET_SEND_BUFFER
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|int
name|sockRecvBuffer
init|=
name|intOption
argument_list|(
name|conf
argument_list|,
name|SOCKET_RECV_BUFFER
argument_list|,
name|DEFAULT_SOCKET_RECV_BUFFER
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|awsConf
operator|.
name|setSocketBufferSizeHints
argument_list|(
name|sockSendBuffer
argument_list|,
name|sockRecvBuffer
argument_list|)
expr_stmt|;
name|String
name|signerOverride
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|SIGNING_ALGORITHM
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|signerOverride
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Signer override = {}"
argument_list|,
name|signerOverride
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setSignerOverride
argument_list|(
name|signerOverride
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initializes AWS SDK proxy support if configured.    *    * @param conf Hadoop configuration    * @param awsConf AWS SDK configuration    * @throws IllegalArgumentException if misconfigured    */
DECL|method|initProxySupport (Configuration conf, ClientConfiguration awsConf)
specifier|private
specifier|static
name|void
name|initProxySupport
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ClientConfiguration
name|awsConf
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
name|proxyHost
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_HOST
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|int
name|proxyPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|PROXY_PORT
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxyHost
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|awsConf
operator|.
name|setProxyHost
argument_list|(
name|proxyHost
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyPort
operator|>=
literal|0
condition|)
block|{
name|awsConf
operator|.
name|setProxyPort
argument_list|(
name|proxyPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|SECURE_CONNECTIONS
argument_list|,
name|DEFAULT_SECURE_CONNECTIONS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Proxy host set without port. Using HTTPS default 443"
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setProxyPort
argument_list|(
literal|443
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Proxy host set without port. Using HTTP default 80"
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setProxyPort
argument_list|(
literal|80
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|proxyUsername
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_USERNAME
argument_list|)
decl_stmt|;
name|String
name|proxyPassword
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_PASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|proxyUsername
operator|==
literal|null
operator|)
operator|!=
operator|(
name|proxyPassword
operator|==
literal|null
operator|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Proxy error: "
operator|+
name|PROXY_USERNAME
operator|+
literal|" or "
operator|+
name|PROXY_PASSWORD
operator|+
literal|" set without the other."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|awsConf
operator|.
name|setProxyUsername
argument_list|(
name|proxyUsername
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setProxyPassword
argument_list|(
name|proxyPassword
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setProxyDomain
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_DOMAIN
argument_list|)
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setProxyWorkstation
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_WORKSTATION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using proxy server {}:{} as user {} with password {} on "
operator|+
literal|"domain {} as workstation {}"
argument_list|,
name|awsConf
operator|.
name|getProxyHost
argument_list|()
argument_list|,
name|awsConf
operator|.
name|getProxyPort
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|awsConf
operator|.
name|getProxyUsername
argument_list|()
argument_list|)
argument_list|,
name|awsConf
operator|.
name|getProxyPassword
argument_list|()
argument_list|,
name|awsConf
operator|.
name|getProxyDomain
argument_list|()
argument_list|,
name|awsConf
operator|.
name|getProxyWorkstation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|proxyPort
operator|>=
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"Proxy error: "
operator|+
name|PROXY_PORT
operator|+
literal|" set without "
operator|+
name|PROXY_HOST
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|/**    * Initializes the User-Agent header to send in HTTP requests to the S3    * back-end.  We always include the Hadoop version number.  The user also    * may set an optional custom prefix to put in front of the Hadoop version    * number.  The AWS SDK interally appends its own information, which seems    * to include the AWS SDK version, OS and JVM version.    *    * @param conf Hadoop configuration    * @param awsConf AWS SDK configuration    */
DECL|method|initUserAgent (Configuration conf, ClientConfiguration awsConf)
specifier|private
specifier|static
name|void
name|initUserAgent
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ClientConfiguration
name|awsConf
parameter_list|)
block|{
name|String
name|userAgent
init|=
literal|"Hadoop "
operator|+
name|VersionInfo
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|String
name|userAgentPrefix
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|USER_AGENT_PREFIX
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|userAgentPrefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|userAgent
operator|=
name|userAgentPrefix
operator|+
literal|", "
operator|+
name|userAgent
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using User-Agent: {}"
argument_list|,
name|userAgent
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|setUserAgentPrefix
argument_list|(
name|userAgent
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an {@link AmazonS3Client} from the established configuration.    *    * @param conf Hadoop configuration    * @param credentials AWS credentials    * @param awsConf AWS SDK configuration    * @return S3 client    * @throws IllegalArgumentException if misconfigured    */
DECL|method|createAmazonS3Client (AmazonS3 s3, Configuration conf, AWSCredentialsProvider credentials, ClientConfiguration awsConf)
specifier|private
specifier|static
name|AmazonS3
name|createAmazonS3Client
parameter_list|(
name|AmazonS3
name|s3
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|AWSCredentialsProvider
name|credentials
parameter_list|,
name|ClientConfiguration
name|awsConf
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
name|endPoint
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|ENDPOINT
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|endPoint
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|s3
operator|.
name|setEndpoint
argument_list|(
name|endPoint
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Incorrect endpoint: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|enablePathStyleAccessIfRequired
argument_list|(
name|s3
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|s3
return|;
block|}
comment|/**    * Enables path-style access to S3 buckets if configured.  By default, the    * behavior is to use virtual hosted-style access with URIs of the form    * http://bucketname.s3.amazonaws.com.  Enabling path-style access and a    * region-specific endpoint switches the behavior to use URIs of the form    * http://s3-eu-west-1.amazonaws.com/bucketname.    *    * @param s3 S3 client    * @param conf Hadoop configuration    */
DECL|method|enablePathStyleAccessIfRequired (AmazonS3 s3, Configuration conf)
specifier|private
specifier|static
name|void
name|enablePathStyleAccessIfRequired
parameter_list|(
name|AmazonS3
name|s3
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|boolean
name|pathStyleAccess
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|PATH_STYLE_ACCESS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathStyleAccess
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Enabling path style access!"
argument_list|)
expr_stmt|;
name|s3
operator|.
name|setS3ClientOptions
argument_list|(
name|S3ClientOptions
operator|.
name|builder
argument_list|()
operator|.
name|setPathStyleAccess
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

