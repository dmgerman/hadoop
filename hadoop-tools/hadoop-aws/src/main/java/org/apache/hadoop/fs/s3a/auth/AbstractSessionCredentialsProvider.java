begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|SdkBaseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|CredentialInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Invoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Retries
import|;
end_import

begin_comment
comment|/**  * Base class for session credential support.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|AbstractSessionCredentialsProvider
specifier|public
specifier|abstract
class|class
name|AbstractSessionCredentialsProvider
extends|extends
name|AbstractAWSCredentialProvider
block|{
comment|/** Credentials, created in {@link #init()}. */
DECL|field|awsCredentials
specifier|private
name|AWSCredentials
name|awsCredentials
decl_stmt|;
comment|/** Atomic flag for on-demand initialization. */
DECL|field|initialized
specifier|private
specifier|final
name|AtomicBoolean
name|initialized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**    * The (possibly translated) initialization exception.    * Used for testing.    */
DECL|field|initializationException
specifier|private
name|IOException
name|initializationException
decl_stmt|;
comment|/**    * Constructor.    * @param uri possibly null filesystem URI.    * @param conf configuration.    */
DECL|method|AbstractSessionCredentialsProvider ( @ullable final URI uri, final Configuration conf)
specifier|public
name|AbstractSessionCredentialsProvider
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize the credentials by calling    * {@link #createCredentials(Configuration)} with the current config.    */
annotation|@
name|Retries
operator|.
name|OnceTranslated
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
comment|// stop re-entrant attempts
if|if
condition|(
name|initialized
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|awsCredentials
operator|=
name|Invoker
operator|.
name|once
argument_list|(
literal|"create credentials"
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
name|createCredentials
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|initializationException
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Has an attempt to initialize the credentials been attempted?    * @return true if {@code init()} was called.    */
DECL|method|isInitialized ()
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|initialized
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Implementation point: whatever the subclass must do to load credentials.    * This is called from {@link #init()} and then the credentials are cached,    * along with any exception.    * @param config the configuration    * @return the credentials    * @throws IOException on any failure.    */
DECL|method|createCredentials (Configuration config)
specifier|protected
specifier|abstract
name|AWSCredentials
name|createCredentials
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the credentials.    * Any exception raised in    * {@link #createCredentials(Configuration)}    * is thrown here before any attempt to return the credentials    * is made.    * @return credentials, if set.    * @throws SdkBaseException if one was raised during init    * @throws CredentialInitializationException on other failures.    */
DECL|method|getCredentials ()
specifier|public
name|AWSCredentials
name|getCredentials
parameter_list|()
throws|throws
name|SdkBaseException
block|{
comment|// do an on-demand init then raise an AWS SDK exception if
comment|// there was a failure.
try|try
block|{
if|if
condition|(
operator|!
name|isInitialized
argument_list|()
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SdkBaseException
condition|)
block|{
throw|throw
operator|(
name|SdkBaseException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|CredentialInitializationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|awsCredentials
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CredentialInitializationException
argument_list|(
literal|"Provider "
operator|+
name|this
operator|+
literal|" has no credentials"
argument_list|)
throw|;
block|}
return|return
name|awsCredentials
return|;
block|}
DECL|method|hasCredentials ()
specifier|public
specifier|final
name|boolean
name|hasCredentials
parameter_list|()
block|{
return|return
name|awsCredentials
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
comment|/**    * Get any IOE raised during initialization.    * Null if {@link #init()} hasn't been called, or it actually worked.    * @return an exception or null.    */
annotation|@
name|VisibleForTesting
DECL|method|getInitializationException ()
specifier|public
name|IOException
name|getInitializationException
parameter_list|()
block|{
return|return
name|initializationException
return|;
block|}
comment|/**    * A special set of null credentials which are not the anonymous class.    * This will be interpreted as "this provider has no credentials to offer",    * rather than an explicit error or anonymous access.    */
DECL|class|NoCredentials
specifier|protected
specifier|static
specifier|final
class|class
name|NoCredentials
implements|implements
name|AWSCredentials
block|{
annotation|@
name|Override
DECL|method|getAWSAccessKeyId ()
specifier|public
name|String
name|getAWSAccessKeyId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getAWSSecretKey ()
specifier|public
name|String
name|getAWSSecretKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

