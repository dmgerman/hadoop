begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|SerializationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JsonSerialization
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Jackson Role Model for Role Properties, for API clients and tests.  *  * Doesn't have complete coverage of the entire AWS IAM policy model;  * don't expect to be able to parse everything.  * It can generate simple models.  * @see<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">Example S3 Policies</a>  * @see<a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/api-permissions-reference.html">Dynamno DB Permissions</a>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
literal|"Tests"
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|RoleModel
specifier|public
class|class
name|RoleModel
block|{
DECL|field|VERSION
specifier|public
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"2012-10-17"
decl_stmt|;
DECL|field|BUCKET_RESOURCE_F
specifier|public
specifier|static
specifier|final
name|String
name|BUCKET_RESOURCE_F
init|=
literal|"arn:aws:s3:::%s/%s"
decl_stmt|;
DECL|field|SID_COUNTER
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|SID_COUNTER
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|serialization
specifier|private
specifier|final
name|JsonSerialization
argument_list|<
name|Policy
argument_list|>
name|serialization
init|=
operator|new
name|JsonSerialization
argument_list|<>
argument_list|(
name|Policy
operator|.
name|class
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|method|RoleModel ()
specifier|public
name|RoleModel
parameter_list|()
block|{
name|ObjectMapper
name|mapper
init|=
name|serialization
operator|.
name|getMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|enable
argument_list|(
name|SerializationFeature
operator|.
name|WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
argument_list|)
expr_stmt|;
block|}
DECL|method|toJson (Policy policy)
specifier|public
name|String
name|toJson
parameter_list|(
name|Policy
name|policy
parameter_list|)
throws|throws
name|JsonProcessingException
block|{
return|return
name|serialization
operator|.
name|toJson
argument_list|(
name|policy
argument_list|)
return|;
block|}
comment|/**    * Statement ID factory.    * @return a statement ID unique for this JVM's life.    */
DECL|method|newSid ()
specifier|public
specifier|static
name|String
name|newSid
parameter_list|()
block|{
name|SID_COUNTER
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|SID_COUNTER
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Map a bool to an effect.    * @param allowed is the statement to allow actions?    * @return the appropriate effect.    */
DECL|method|effect (final boolean allowed)
specifier|public
specifier|static
name|Effects
name|effect
parameter_list|(
specifier|final
name|boolean
name|allowed
parameter_list|)
block|{
return|return
name|allowed
condition|?
name|Effects
operator|.
name|Allow
else|:
name|Effects
operator|.
name|Deny
return|;
block|}
comment|/**    * Create a resource.    * @param bucket bucket    * @param key key    * @param addWildcard add a * to the tail of the key?    * @return a resource for a statement.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StringConcatenationMissingWhitespace"
argument_list|)
DECL|method|resource (String bucket, String key, boolean addWildcard)
specifier|public
specifier|static
name|String
name|resource
parameter_list|(
name|String
name|bucket
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|addWildcard
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|BUCKET_RESOURCE_F
argument_list|,
name|bucket
argument_list|,
name|key
operator|+
operator|(
name|addWildcard
condition|?
literal|"*"
else|:
literal|""
operator|)
argument_list|)
return|;
block|}
comment|/**    * Given a path, return the S3 resource to it.    * If {@code isDirectory} is true, a "/" is added to the path.    * This is critical when adding wildcard permissions under    * a directory, and also needed when locking down dir-as-file    * and dir-as-directory-marker access.    * @param path a path    * @param isDirectory is this a directory?    * @param addWildcard add a * to the tail of the key?    * @return a resource for a statement.    */
DECL|method|resource (Path path, final boolean isDirectory, boolean addWildcard)
specifier|public
specifier|static
name|String
name|resource
parameter_list|(
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|isDirectory
parameter_list|,
name|boolean
name|addWildcard
parameter_list|)
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDirectory
operator|&&
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|key
operator|=
name|key
operator|+
literal|"/"
expr_stmt|;
block|}
return|return
name|resource
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|key
argument_list|,
name|addWildcard
argument_list|)
return|;
block|}
comment|/**    * Given a directory path, return the S3 resource to it.    * @param path a path    * @return a resource for a statement.    */
DECL|method|directory (Path path)
specifier|public
specifier|static
name|String
index|[]
name|directory
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|String
name|host
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|resource
argument_list|(
name|host
argument_list|,
name|key
operator|+
literal|"/"
argument_list|,
literal|true
argument_list|)
block|,
name|resource
argument_list|(
name|host
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
block|,
name|resource
argument_list|(
name|host
argument_list|,
name|key
operator|+
literal|"/"
argument_list|,
literal|false
argument_list|)
block|,       }
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[]
block|{
name|resource
argument_list|(
name|host
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
block|,       }
return|;
block|}
block|}
comment|/**    * Variant of {@link S3AFileSystem#pathToKey(Path)} which doesn't care    * about working directories, so can be static and stateless.    * @param path path to map    * @return key or ""    */
DECL|method|pathToKey (Path path)
specifier|public
specifier|static
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
operator|&&
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Create a statement.    * @param allow allow or deny    * @param scope scope    * @param actions actions    * @return the formatted json statement    */
DECL|method|statement (boolean allow, String scope, String... actions)
specifier|public
specifier|static
name|Statement
name|statement
parameter_list|(
name|boolean
name|allow
parameter_list|,
name|String
name|scope
parameter_list|,
name|String
modifier|...
name|actions
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|(
name|RoleModel
operator|.
name|effect
argument_list|(
name|allow
argument_list|)
argument_list|)
operator|.
name|addActions
argument_list|(
name|actions
argument_list|)
operator|.
name|addResources
argument_list|(
name|scope
argument_list|)
return|;
block|}
comment|/**    * Create a statement.    * @param allow allow or deny    * @param scope scope    * @param actions actions    * @return the formatted json statement    */
DECL|method|statement (boolean allow, String scope, Collection<String> actions)
specifier|public
specifier|static
name|Statement
name|statement
parameter_list|(
name|boolean
name|allow
parameter_list|,
name|String
name|scope
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|actions
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|(
name|RoleModel
operator|.
name|effect
argument_list|(
name|allow
argument_list|)
argument_list|)
operator|.
name|addActions
argument_list|(
name|actions
argument_list|)
operator|.
name|addResources
argument_list|(
name|scope
argument_list|)
return|;
block|}
comment|/**    * Create a statement.    * If {@code isDirectory} is true, a "/" is added to the path.    * This is critical when adding wildcard permissions under    * a directory, and also needed when locking down dir-as-file    * and dir-as-directory-marker access.    * @param allow allow or deny    * @param path path    * @param isDirectory is this a directory?    * @param wildcards add a * to the tail of the key?    * @param actions action    * @return the formatted json statement    */
DECL|method|statement ( final boolean allow, final Path path, final boolean isDirectory, final boolean wildcards, final String... actions)
specifier|public
specifier|static
name|Statement
name|statement
parameter_list|(
specifier|final
name|boolean
name|allow
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|isDirectory
parameter_list|,
specifier|final
name|boolean
name|wildcards
parameter_list|,
specifier|final
name|String
modifier|...
name|actions
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|(
name|RoleModel
operator|.
name|effect
argument_list|(
name|allow
argument_list|)
argument_list|)
operator|.
name|addActions
argument_list|(
name|actions
argument_list|)
operator|.
name|addResources
argument_list|(
name|resource
argument_list|(
name|path
argument_list|,
name|isDirectory
argument_list|,
name|wildcards
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a statement.    * If {@code isDirectory} is true, a "/" is added to the path.    * This is critical when adding wildcard permissions under    * a directory, and also needed when locking down dir-as-file    * and dir-as-directory-marker access.    * @param allow allow or deny    * @param path path    * @param isDirectory is this a directory?    * @param wildcards add a * to the tail of the key?    * @param actions action    * @return the formatted json statement    */
DECL|method|statement ( final boolean allow, final Path path, final boolean isDirectory, final boolean wildcards, final Collection<String> actions)
specifier|public
specifier|static
name|Statement
name|statement
parameter_list|(
specifier|final
name|boolean
name|allow
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|isDirectory
parameter_list|,
specifier|final
name|boolean
name|wildcards
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|actions
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|(
name|RoleModel
operator|.
name|effect
argument_list|(
name|allow
argument_list|)
argument_list|)
operator|.
name|addActions
argument_list|(
name|actions
argument_list|)
operator|.
name|addResources
argument_list|(
name|resource
argument_list|(
name|path
argument_list|,
name|isDirectory
argument_list|,
name|wildcards
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * From a set of statements, create a policy.    * @param statements statements    * @return the policy    */
DECL|method|policy (Statement... statements)
specifier|public
specifier|static
name|Policy
name|policy
parameter_list|(
name|Statement
modifier|...
name|statements
parameter_list|)
block|{
return|return
operator|new
name|Policy
argument_list|(
name|statements
argument_list|)
return|;
block|}
comment|/**    * From a set of statements, create a policy.    * @param statements statements    * @return the policy    */
DECL|method|policy (final List<RoleModel.Statement> statements)
specifier|public
specifier|static
name|Policy
name|policy
parameter_list|(
specifier|final
name|List
argument_list|<
name|RoleModel
operator|.
name|Statement
argument_list|>
name|statements
parameter_list|)
block|{
return|return
operator|new
name|Policy
argument_list|(
name|statements
argument_list|)
return|;
block|}
comment|/**    * Effect options.    */
DECL|enum|Effects
specifier|public
enum|enum
name|Effects
block|{
DECL|enumConstant|Allow
name|Allow
block|,
DECL|enumConstant|Deny
name|Deny
block|}
comment|/**    * Any element in a role.    */
DECL|class|RoleElt
specifier|public
specifier|static
specifier|abstract
class|class
name|RoleElt
block|{
DECL|method|RoleElt ()
specifier|protected
name|RoleElt
parameter_list|()
block|{     }
comment|/**      * validation operation.      */
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
block|{      }
block|}
comment|/**    * A single statement.    */
DECL|class|Statement
specifier|public
specifier|static
class|class
name|Statement
extends|extends
name|RoleElt
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"Sid"
argument_list|)
DECL|field|sid
specifier|public
name|String
name|sid
init|=
name|newSid
argument_list|()
decl_stmt|;
comment|/**      * Default effect is Deny; forces callers to switch on Allow.      */
annotation|@
name|JsonProperty
argument_list|(
literal|"Effect"
argument_list|)
DECL|field|effect
specifier|public
name|Effects
name|effect
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"Action"
argument_list|)
DECL|field|action
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|action
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"Resource"
argument_list|)
DECL|field|resource
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|resource
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|Statement (final Effects effect)
specifier|public
name|Statement
parameter_list|(
specifier|final
name|Effects
name|effect
parameter_list|)
block|{
name|this
operator|.
name|effect
operator|=
name|effect
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
block|{
name|requireNonNull
argument_list|(
name|sid
argument_list|,
literal|"Sid"
argument_list|)
expr_stmt|;
name|requireNonNull
argument_list|(
name|effect
argument_list|,
literal|"Effect"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
operator|!
operator|(
name|action
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|,
literal|"Empty Action"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
operator|!
operator|(
name|resource
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|,
literal|"Empty Resource"
argument_list|)
expr_stmt|;
block|}
DECL|method|setAllowed (boolean f)
specifier|public
name|Statement
name|setAllowed
parameter_list|(
name|boolean
name|f
parameter_list|)
block|{
name|effect
operator|=
name|effect
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addActions (String... actions)
specifier|public
name|Statement
name|addActions
parameter_list|(
name|String
modifier|...
name|actions
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|action
argument_list|,
name|actions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addActions (Collection<String> actions)
specifier|public
name|Statement
name|addActions
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|actions
parameter_list|)
block|{
name|action
operator|.
name|addAll
argument_list|(
name|actions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addResources (String... resources)
specifier|public
name|Statement
name|addResources
parameter_list|(
name|String
modifier|...
name|resources
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|resource
argument_list|,
name|resources
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add a list of resources.      * @param resources resource list      * @return this statement.      */
DECL|method|addResources (Collection<String> resources)
specifier|public
name|Statement
name|addResources
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|resources
parameter_list|)
block|{
name|resource
operator|.
name|addAll
argument_list|(
name|resources
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**    * A policy is one or more statements.    */
DECL|class|Policy
specifier|public
specifier|static
class|class
name|Policy
extends|extends
name|RoleElt
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"Version"
argument_list|)
DECL|field|version
specifier|public
name|String
name|version
init|=
name|VERSION
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"Statement"
argument_list|)
DECL|field|statement
specifier|public
name|List
argument_list|<
name|Statement
argument_list|>
name|statement
decl_stmt|;
comment|/**      * Empty constructor: initializes the statements to an empty list.      */
DECL|method|Policy ()
specifier|public
name|Policy
parameter_list|()
block|{
name|statement
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|Policy (final List<RoleModel.Statement> statement)
specifier|public
name|Policy
parameter_list|(
specifier|final
name|List
argument_list|<
name|RoleModel
operator|.
name|Statement
argument_list|>
name|statement
parameter_list|)
block|{
name|this
operator|.
name|statement
operator|=
name|statement
expr_stmt|;
block|}
DECL|method|Policy (RoleModel.Statement... statements)
specifier|public
name|Policy
parameter_list|(
name|RoleModel
operator|.
name|Statement
modifier|...
name|statements
parameter_list|)
block|{
name|statement
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|statements
operator|.
name|length
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|statement
argument_list|,
name|statements
argument_list|)
expr_stmt|;
block|}
comment|/**      * Validation includes validating all statements.      */
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
block|{
name|requireNonNull
argument_list|(
name|statement
argument_list|,
literal|"Statement"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|VERSION
operator|.
name|equals
argument_list|(
name|version
argument_list|)
argument_list|,
literal|"Invalid Version: %s"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|statement
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|a
parameter_list|)
lambda|->
name|a
operator|.
name|validate
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add the statements of another policy to this one.      * @param other other policy.      */
DECL|method|add (Policy other)
specifier|public
name|void
name|add
parameter_list|(
name|Policy
name|other
parameter_list|)
block|{
name|add
argument_list|(
name|other
operator|.
name|statement
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a collection of statements.      * @param statements statements to add.      */
DECL|method|add (Collection<Statement> statements)
specifier|public
name|void
name|add
parameter_list|(
name|Collection
argument_list|<
name|Statement
argument_list|>
name|statements
parameter_list|)
block|{
name|statement
operator|.
name|addAll
argument_list|(
name|statements
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a single statement.      * @param stat new statement.      */
DECL|method|add (Statement stat)
specifier|public
name|void
name|add
parameter_list|(
name|Statement
name|stat
parameter_list|)
block|{
name|statement
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

