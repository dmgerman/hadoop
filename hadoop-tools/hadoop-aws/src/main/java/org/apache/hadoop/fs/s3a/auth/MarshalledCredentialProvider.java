begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|CredentialInitializationException
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|MarshalledCredentialBinding
operator|.
name|toAWSCredentials
import|;
end_import

begin_comment
comment|/**  * AWS credential provider driven from marshalled session/full credentials  * (full, simple session or role).  * This is<i>not</i> intended for explicit use in job/app configurations,  * instead it is returned by Delegation Token Bindings, as needed.  * The constructor implicitly prevents explicit use.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|MarshalledCredentialProvider
specifier|public
class|class
name|MarshalledCredentialProvider
extends|extends
name|AbstractSessionCredentialsProvider
block|{
comment|/** Name: {@value}. */
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"org.apache.hadoop.fs.s3a.auth.MarshalledCredentialProvider"
decl_stmt|;
DECL|field|credentials
specifier|private
specifier|final
name|MarshalledCredentials
name|credentials
decl_stmt|;
DECL|field|typeRequired
specifier|private
specifier|final
name|MarshalledCredentials
operator|.
name|CredentialTypeRequired
name|typeRequired
decl_stmt|;
DECL|field|component
specifier|private
specifier|final
name|String
name|component
decl_stmt|;
comment|/**    * Constructor.    *    * @param component component name for exception messages.    * @param uri filesystem URI: must not be null.    * @param conf configuration.    * @param credentials marshalled credentials.    * @param typeRequired credential type required.    * @throws CredentialInitializationException validation failure    * @throws IOException failure    */
DECL|method|MarshalledCredentialProvider ( final String component, final URI uri, final Configuration conf, final MarshalledCredentials credentials, final MarshalledCredentials.CredentialTypeRequired typeRequired)
specifier|public
name|MarshalledCredentialProvider
parameter_list|(
specifier|final
name|String
name|component
parameter_list|,
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|MarshalledCredentials
name|credentials
parameter_list|,
specifier|final
name|MarshalledCredentials
operator|.
name|CredentialTypeRequired
name|typeRequired
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|checkNotNull
argument_list|(
name|uri
argument_list|,
literal|"No filesystem URI"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
name|this
operator|.
name|typeRequired
operator|=
name|typeRequired
expr_stmt|;
name|this
operator|.
name|credentials
operator|=
name|checkNotNull
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
block|}
comment|/**    * Perform the binding, looking up the DT and parsing it.    * @return true if there were some credentials    * @throws CredentialInitializationException validation failure    * @throws IOException on a failure    */
annotation|@
name|Override
DECL|method|createCredentials (final Configuration config)
specifier|protected
name|AWSCredentials
name|createCredentials
parameter_list|(
specifier|final
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toAWSCredentials
argument_list|(
name|credentials
argument_list|,
name|typeRequired
argument_list|,
name|component
argument_list|)
return|;
block|}
block|}
end_class

end_unit

