begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|S3InputStream
class|class
name|S3InputStream
extends|extends
name|FSInputStream
block|{
DECL|field|store
specifier|private
name|FileSystemStore
name|store
decl_stmt|;
DECL|field|blocks
specifier|private
name|Block
index|[]
name|blocks
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|field|fileLength
specifier|private
name|long
name|fileLength
decl_stmt|;
DECL|field|pos
specifier|private
name|long
name|pos
init|=
literal|0
decl_stmt|;
DECL|field|blockFile
specifier|private
name|File
name|blockFile
decl_stmt|;
DECL|field|blockStream
specifier|private
name|DataInputStream
name|blockStream
decl_stmt|;
DECL|field|blockEnd
specifier|private
name|long
name|blockEnd
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|stats
specifier|private
name|FileSystem
operator|.
name|Statistics
name|stats
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|S3InputStream
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Deprecated
DECL|method|S3InputStream (Configuration conf, FileSystemStore store, INode inode)
specifier|public
name|S3InputStream
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystemStore
name|store
parameter_list|,
name|INode
name|inode
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|store
argument_list|,
name|inode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|S3InputStream (Configuration conf, FileSystemStore store, INode inode, FileSystem.Statistics stats)
specifier|public
name|S3InputStream
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystemStore
name|store
parameter_list|,
name|INode
name|inode
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|stats
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
name|inode
operator|.
name|getBlocks
argument_list|()
expr_stmt|;
for|for
control|(
name|Block
name|block
range|:
name|blocks
control|)
block|{
name|this
operator|.
name|fileLength
operator|+=
name|block
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
specifier|synchronized
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|fileLength
operator|-
name|pos
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|seek (long targetPos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Cannot seek to %d"
argument_list|,
name|targetPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetPos
operator|>
name|fileLength
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
name|message
operator|+
literal|": after EOF"
argument_list|)
throw|;
block|}
if|if
condition|(
name|targetPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
name|message
operator|+
literal|": negative"
argument_list|)
throw|;
block|}
name|pos
operator|=
name|targetPos
expr_stmt|;
name|blockEnd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
specifier|synchronized
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|pos
operator|<
name|fileLength
condition|)
block|{
if|if
condition|(
name|pos
operator|>
name|blockEnd
condition|)
block|{
name|blockSeekTo
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|blockStream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|>=
literal|0
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&&
name|result
operator|>=
literal|0
condition|)
block|{
name|stats
operator|.
name|incrementBytesRead
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte buf[], int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
name|buf
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|<
name|fileLength
condition|)
block|{
if|if
condition|(
name|pos
operator|>
name|blockEnd
condition|)
block|{
name|blockSeekTo
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
name|int
name|realLen
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
operator|(
name|long
operator|)
name|len
argument_list|,
operator|(
name|blockEnd
operator|-
name|pos
operator|+
literal|1L
operator|)
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|blockStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|realLen
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|>=
literal|0
condition|)
block|{
name|pos
operator|+=
name|result
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&&
name|result
operator|>
literal|0
condition|)
block|{
name|stats
operator|.
name|incrementBytesRead
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|blockSeekTo (long target)
specifier|private
specifier|synchronized
name|void
name|blockSeekTo
parameter_list|(
name|long
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|//
comment|// Compute desired block
comment|//
name|int
name|targetBlock
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|targetBlockStart
init|=
literal|0
decl_stmt|;
name|long
name|targetBlockEnd
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|blockLength
init|=
name|blocks
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|targetBlockEnd
operator|=
name|targetBlockStart
operator|+
name|blockLength
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|target
operator|>=
name|targetBlockStart
operator|&&
name|target
operator|<=
name|targetBlockEnd
condition|)
block|{
name|targetBlock
operator|=
name|i
expr_stmt|;
break|break;
block|}
else|else
block|{
name|targetBlockStart
operator|=
name|targetBlockEnd
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|targetBlock
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Impossible situation: could not find target position "
operator|+
name|target
argument_list|)
throw|;
block|}
name|long
name|offsetIntoBlock
init|=
name|target
operator|-
name|targetBlockStart
decl_stmt|;
comment|// read block blocks[targetBlock] from position offsetIntoBlock
name|this
operator|.
name|blockFile
operator|=
name|store
operator|.
name|retrieveBlock
argument_list|(
name|blocks
index|[
name|targetBlock
index|]
argument_list|,
name|offsetIntoBlock
argument_list|)
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|blockEnd
operator|=
name|targetBlockEnd
expr_stmt|;
name|this
operator|.
name|blockStream
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|blockFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|blockStream
operator|!=
literal|null
condition|)
block|{
name|blockStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|blockStream
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|blockFile
operator|!=
literal|null
condition|)
block|{
name|boolean
name|b
init|=
name|blockFile
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring failed delete"
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * We don't support marks.    */
annotation|@
name|Override
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|mark (int readLimit)
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readLimit
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mark not supported"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

