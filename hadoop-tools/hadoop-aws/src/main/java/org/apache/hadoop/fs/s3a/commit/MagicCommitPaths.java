begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|MAGIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|InternalCommitterConstants
operator|.
name|E_NO_MAGIC_PATH_ELEMENT
import|;
end_import

begin_comment
comment|/**  * Operations on (magic) paths.  */
end_comment

begin_class
DECL|class|MagicCommitPaths
specifier|public
specifier|final
class|class
name|MagicCommitPaths
block|{
DECL|method|MagicCommitPaths ()
specifier|private
name|MagicCommitPaths
parameter_list|()
block|{   }
comment|/**    * Take an absolute path, split it into a list of elements.    * If empty, the path is the root path.    * @param path input path    * @return a possibly empty list of elements.    * @throws IllegalArgumentException if the path is invalid -relative, empty...    */
DECL|method|splitPathToElements (Path path)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|splitPathToElements
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|path
operator|.
name|isAbsolute
argument_list|()
argument_list|,
literal|"path is relative"
argument_list|)
expr_stmt|;
name|String
name|uriPath
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
operator|!
name|uriPath
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"empty path"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|uriPath
argument_list|)
condition|)
block|{
comment|// special case: empty list
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|uriPath
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|firstElementChar
init|=
literal|1
decl_stmt|;
name|int
name|endOfElement
init|=
name|uriPath
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|firstElementChar
argument_list|)
decl_stmt|;
while|while
condition|(
name|endOfElement
operator|>
literal|0
condition|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|uriPath
operator|.
name|substring
argument_list|(
name|firstElementChar
argument_list|,
name|endOfElement
argument_list|)
argument_list|)
expr_stmt|;
name|firstElementChar
operator|=
name|endOfElement
operator|+
literal|1
expr_stmt|;
name|endOfElement
operator|=
name|firstElementChar
operator|==
name|len
condition|?
operator|-
literal|1
else|:
name|uriPath
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|firstElementChar
argument_list|)
expr_stmt|;
block|}
comment|// expect a possible child element here
if|if
condition|(
name|firstElementChar
operator|!=
name|len
condition|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|uriPath
operator|.
name|substring
argument_list|(
name|firstElementChar
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|elements
return|;
block|}
comment|/**    * Is a path in the magic tree?    * @param elements element list    * @return true if a path is considered magic    */
DECL|method|isMagicPath (List<String> elements)
specifier|public
specifier|static
name|boolean
name|isMagicPath
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|elements
operator|.
name|contains
argument_list|(
name|MAGIC
argument_list|)
return|;
block|}
comment|/**    * Does the list of magic elements contain a base path marker?    * @param elements element list, already stripped out    * from the magic tree.    * @return true if a path has a base directory    */
DECL|method|containsBasePath (List<String> elements)
specifier|public
specifier|static
name|boolean
name|containsBasePath
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|elements
operator|.
name|contains
argument_list|(
name|BASE
argument_list|)
return|;
block|}
comment|/**    * Get the index of the magic path element.    * @param elements full path element list    * @return the index.    * @throws IllegalArgumentException if there is no magic element    */
DECL|method|magicElementIndex (List<String> elements)
specifier|public
specifier|static
name|int
name|magicElementIndex
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
name|int
name|index
init|=
name|elements
operator|.
name|indexOf
argument_list|(
name|MAGIC
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|index
operator|>=
literal|0
argument_list|,
name|E_NO_MAGIC_PATH_ELEMENT
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
comment|/**    * Get the parent path elements of the magic path.    * The list may be immutable or may be a view of the underlying list.    * Both the parameter list and the returned list MUST NOT be modified.    * @param elements full path element list    * @return the parent elements; may be empty    */
DECL|method|magicPathParents (List<String> elements)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|magicPathParents
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|elements
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|magicElementIndex
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get the child path elements under the magic path.    * The list may be immutable or may be a view of the underlying list.    * Both the parameter list and the returned list MUST NOT be modified.    * @param elements full path element list    * @return the child elements; may be empty    */
DECL|method|magicPathChildren (List<String> elements)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|magicPathChildren
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
name|int
name|index
init|=
name|magicElementIndex
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|elements
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|==
name|len
operator|-
literal|1
condition|)
block|{
comment|// empty index
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|elements
operator|.
name|subList
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
comment|/**    * Get any child path elements under any {@code __base} path,    * or an empty list if there is either: no {@code __base} path element,    * or no child entries under it.    * The list may be immutable or may be a view of the underlying list.    * Both the parameter list and the returned list MUST NOT be modified.    * @param elements full path element list    * @return the child elements; may be empty    */
DECL|method|basePathChildren (List<String> elements)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|basePathChildren
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
name|int
name|index
init|=
name|elements
operator|.
name|indexOf
argument_list|(
name|BASE
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|int
name|len
init|=
name|elements
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|==
name|len
operator|-
literal|1
condition|)
block|{
comment|// empty index
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|elements
operator|.
name|subList
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
comment|/**    * Take a list of elements and create an S3 key by joining them    * with "/" between each one.    * @param elements path elements    * @return a path which can be used in the AWS API    */
DECL|method|elementsToKey (List<String> elements)
specifier|public
specifier|static
name|String
name|elementsToKey
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|join
argument_list|(
literal|"/"
argument_list|,
name|elements
argument_list|)
return|;
block|}
comment|/**    * Get the filename of a path: the last element.    * @param elements element list.    * @return the filename; the last element.    */
DECL|method|filename (List<String> elements)
specifier|public
specifier|static
name|String
name|filename
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|lastElement
argument_list|(
name|elements
argument_list|)
return|;
block|}
comment|/**    * Last element of a (non-empty) list.    * @param strings strings in    * @return the last one.    */
DECL|method|lastElement (List<String> strings)
specifier|public
specifier|static
name|String
name|lastElement
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|strings
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
name|strings
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"empty list"
argument_list|)
expr_stmt|;
return|return
name|strings
operator|.
name|get
argument_list|(
name|strings
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Get the magic subdirectory of a destination directory.    * @param destDir the destination directory    * @return a new path.    */
DECL|method|magicSubdir (Path destDir)
specifier|public
specifier|static
name|Path
name|magicSubdir
parameter_list|(
name|Path
name|destDir
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|destDir
argument_list|,
name|MAGIC
argument_list|)
return|;
block|}
comment|/**    * Calculates the final destination of a file.    * This is the parent of any {@code __magic} element, and the filename    * of the path. That is: all intermediate child path elements are discarded.    * Why so? paths under the magic path include job attempt and task attempt    * subdirectories, which need to be skipped.    *    * If there is a {@code __base} directory in the children, then it becomes    * a base for unflattened paths, that is: all its children are pulled into    * the final destination.    * @param elements element list.    * @return the path    */
DECL|method|finalDestination (List<String> elements)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|finalDestination
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
if|if
condition|(
name|isMagicPath
argument_list|(
name|elements
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|destDir
init|=
name|magicPathParents
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|magicPathChildren
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"No path found under "
operator|+
name|MAGIC
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dest
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|destDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|containsBasePath
argument_list|(
name|children
argument_list|)
condition|)
block|{
comment|// there's a base marker in the path
name|List
argument_list|<
name|String
argument_list|>
name|baseChildren
init|=
name|basePathChildren
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
operator|!
name|baseChildren
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"No path found under "
operator|+
name|BASE
argument_list|)
expr_stmt|;
name|dest
operator|.
name|addAll
argument_list|(
name|baseChildren
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dest
operator|.
name|add
argument_list|(
name|filename
argument_list|(
name|children
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
else|else
block|{
return|return
name|elements
return|;
block|}
block|}
block|}
end_class

end_unit

