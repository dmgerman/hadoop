begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|MAGIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|TEMP_DATA
import|;
end_import

begin_comment
comment|/**  * These are commit utility methods which import classes from  * hadoop-mapreduce, and so only work when that module is on the  * classpath.  *  *<b>Do not use in any codepath intended to be used from the S3AFS  * except in the committers themselves.</b>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CommitUtilsWithMR
specifier|public
specifier|final
class|class
name|CommitUtilsWithMR
block|{
DECL|method|CommitUtilsWithMR ()
specifier|private
name|CommitUtilsWithMR
parameter_list|()
block|{   }
comment|/**    * Get the location of magic job attempts.    * @param out the base output directory.    * @return the location of magic job attempts.    */
DECL|method|getMagicJobAttemptsPath (Path out)
specifier|public
specifier|static
name|Path
name|getMagicJobAttemptsPath
parameter_list|(
name|Path
name|out
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|out
argument_list|,
name|MAGIC
argument_list|)
return|;
block|}
comment|/**    * Get the Application Attempt ID for this job.    * @param context the context to look in    * @return the Application Attempt ID for a given job.    */
DECL|method|getAppAttemptId (JobContext context)
specifier|public
specifier|static
name|int
name|getAppAttemptId
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Compute the "magic" path for a job attempt.    * @param appAttemptId the ID of the application attempt for this job.    * @param dest the final output directory    * @return the path to store job attempt data.    */
DECL|method|getMagicJobAttemptPath (int appAttemptId, Path dest)
specifier|public
specifier|static
name|Path
name|getMagicJobAttemptPath
parameter_list|(
name|int
name|appAttemptId
parameter_list|,
name|Path
name|dest
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getMagicJobAttemptsPath
argument_list|(
name|dest
argument_list|)
argument_list|,
name|formatAppAttemptDir
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Format the application attempt directory.    * @param attemptId attempt ID    * @return the directory name for the application attempt    */
DECL|method|formatAppAttemptDir (int attemptId)
specifier|public
specifier|static
name|String
name|formatAppAttemptDir
parameter_list|(
name|int
name|attemptId
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"app-attempt-%04d"
argument_list|,
name|attemptId
argument_list|)
return|;
block|}
comment|/**    * Compute the path where the output of magic task attempts are stored.    * @param context the context of the job with magic tasks.    * @param dest destination of work    * @return the path where the output of magic task attempts are stored.    */
DECL|method|getMagicTaskAttemptsPath (JobContext context, Path dest)
specifier|public
specifier|static
name|Path
name|getMagicTaskAttemptsPath
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|Path
name|dest
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getMagicJobAttemptPath
argument_list|(
name|getAppAttemptId
argument_list|(
name|context
argument_list|)
argument_list|,
name|dest
argument_list|)
argument_list|,
literal|"tasks"
argument_list|)
return|;
block|}
comment|/**    * Compute the path where the output of a task attempt is stored until    * that task is committed.    * This path is marked as a base path for relocations, so subdirectory    * information is preserved.    * @param context the context of the task attempt.    * @param dest The output path to commit work into    * @return the path where a task attempt should be stored.    */
DECL|method|getMagicTaskAttemptPath (TaskAttemptContext context, Path dest)
specifier|public
specifier|static
name|Path
name|getMagicTaskAttemptPath
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|,
name|Path
name|dest
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getBaseMagicTaskAttemptPath
argument_list|(
name|context
argument_list|,
name|dest
argument_list|)
argument_list|,
name|BASE
argument_list|)
return|;
block|}
comment|/**    * Get the base Magic attempt path, without any annotations to mark relative    * references.    * @param context task context.    * @param dest The output path to commit work into    * @return the path under which all attempts go    */
DECL|method|getBaseMagicTaskAttemptPath (TaskAttemptContext context, Path dest)
specifier|public
specifier|static
name|Path
name|getBaseMagicTaskAttemptPath
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|,
name|Path
name|dest
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getMagicTaskAttemptsPath
argument_list|(
name|context
argument_list|,
name|dest
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Compute a path for temporary data associated with a job.    * This data is<i>not magic</i>    * @param appAttemptId the ID of the application attempt for this job.    * @param out output directory of job    * @return the path to store temporary job attempt data.    */
DECL|method|getTempJobAttemptPath (int appAttemptId, Path out)
specifier|public
specifier|static
name|Path
name|getTempJobAttemptPath
parameter_list|(
name|int
name|appAttemptId
parameter_list|,
name|Path
name|out
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|out
argument_list|,
name|TEMP_DATA
argument_list|)
argument_list|,
name|formatAppAttemptDir
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Compute the path where the output of a given job attempt will be placed.    * @param context task context    * @param out output directory of job    * @return the path to store temporary job attempt data.    */
DECL|method|getTempTaskAttemptPath (TaskAttemptContext context, Path out)
specifier|public
specifier|static
name|Path
name|getTempTaskAttemptPath
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|,
name|Path
name|out
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getTempJobAttemptPath
argument_list|(
name|getAppAttemptId
argument_list|(
name|context
argument_list|)
argument_list|,
name|out
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get a string value of a job ID; returns meaningful text if there is no ID.    * @param context job context    * @return a string for logs    */
DECL|method|jobIdString (JobContext context)
specifier|public
specifier|static
name|String
name|jobIdString
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
name|JobID
name|jobID
init|=
name|context
operator|.
name|getJobID
argument_list|()
decl_stmt|;
return|return
name|jobID
operator|!=
literal|null
condition|?
name|jobID
operator|.
name|toString
argument_list|()
else|:
literal|"(no job ID)"
return|;
block|}
comment|/**    * Get a job name; returns meaningful text if there is no name.    * @param context job context    * @return a string for logs    */
DECL|method|jobName (JobContext context)
specifier|public
specifier|static
name|String
name|jobName
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
name|String
name|name
init|=
name|context
operator|.
name|getJobName
argument_list|()
decl_stmt|;
return|return
operator|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|name
else|:
literal|"(anonymous)"
return|;
block|}
comment|/**    * Get a configuration option, with any value in the job configuration    * taking priority over that in the filesystem.    * This allows for per-job override of FS parameters.    *    * Order is: job context, filesystem config, default value    *    * @param context job/task context    * @param fsConf filesystem configuration. Get this from the FS to guarantee    * per-bucket parameter propagation    * @param key key to look for    * @param defVal default value    * @return the configuration option.    */
DECL|method|getConfigurationOption ( JobContext context, Configuration fsConf, String key, String defVal)
specifier|public
specifier|static
name|String
name|getConfigurationOption
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|Configuration
name|fsConf
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|defVal
parameter_list|)
block|{
return|return
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|,
name|fsConf
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|,
name|defVal
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

