begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|InternalCommitterConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|ValidationFailure
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  * Static utility methods related to S3A commitment processing, both  * staging and magic.  *  *<b>Do not use in any codepath intended to be used from the S3AFS  * except in the committers themselves.</b>  */
end_comment

begin_class
DECL|class|CommitUtils
specifier|public
specifier|final
class|class
name|CommitUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommitUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|CommitUtils ()
specifier|private
name|CommitUtils
parameter_list|()
block|{   }
comment|/**    * Verify that the path is a magic one.    * @param fs filesystem    * @param path path    * @throws PathCommitException if the path isn't a magic commit path    */
DECL|method|verifyIsMagicCommitPath (S3AFileSystem fs, Path path)
specifier|public
specifier|static
name|void
name|verifyIsMagicCommitPath
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|PathCommitException
block|{
name|verifyIsMagicCommitFS
argument_list|(
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|isMagicCommitPath
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PathCommitException
argument_list|(
name|path
argument_list|,
name|E_BAD_PATH
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that an S3A FS instance is a magic commit FS.    * @param fs filesystem    * @throws PathCommitException if the FS isn't a magic commit FS.    */
DECL|method|verifyIsMagicCommitFS (S3AFileSystem fs)
specifier|public
specifier|static
name|void
name|verifyIsMagicCommitFS
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|)
throws|throws
name|PathCommitException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|isMagicCommitEnabled
argument_list|()
condition|)
block|{
comment|// dump out details to console for support diagnostics
name|String
name|fsUri
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"{}: {}:\n{}"
argument_list|,
name|E_NORMAL_FS
argument_list|,
name|fsUri
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// then fail
throw|throw
operator|new
name|PathCommitException
argument_list|(
name|fsUri
argument_list|,
name|E_NORMAL_FS
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that an FS is an S3A FS.    * @param fs filesystem    * @param path path to to use in exception    * @return the typecast FS.    * @throws PathCommitException if the FS is not an S3A FS.    */
DECL|method|verifyIsS3AFS (FileSystem fs, Path path)
specifier|public
specifier|static
name|S3AFileSystem
name|verifyIsS3AFS
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|PathCommitException
block|{
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|S3AFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|PathCommitException
argument_list|(
name|path
argument_list|,
name|E_WRONG_FS
argument_list|)
throw|;
block|}
return|return
operator|(
name|S3AFileSystem
operator|)
name|fs
return|;
block|}
comment|/**    * Get the S3A FS of a path.    * @param path path to examine    * @param conf config    * @param magicCommitRequired is magic complete required in the FS?    * @return the filesystem    * @throws PathCommitException output path isn't to an S3A FS instance, or    * if {@code magicCommitRequired} is set, if doesn't support these commits.    * @throws IOException failure to instantiate the FS    */
DECL|method|getS3AFileSystem (Path path, Configuration conf, boolean magicCommitRequired)
specifier|public
specifier|static
name|S3AFileSystem
name|getS3AFileSystem
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|magicCommitRequired
parameter_list|)
throws|throws
name|PathCommitException
throws|,
name|IOException
block|{
name|S3AFileSystem
name|s3AFS
init|=
name|verifyIsS3AFS
argument_list|(
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|magicCommitRequired
condition|)
block|{
name|verifyIsMagicCommitFS
argument_list|(
name|s3AFS
argument_list|)
expr_stmt|;
block|}
return|return
name|s3AFS
return|;
block|}
comment|/**    * Verify that all instances in a collection are of the given class.    * @param it iterator    * @param classname classname to require    * @throws ValidationFailure on a failure    */
DECL|method|validateCollectionClass (Iterable it, Class classname)
specifier|public
specifier|static
name|void
name|validateCollectionClass
parameter_list|(
name|Iterable
name|it
parameter_list|,
name|Class
name|classname
parameter_list|)
throws|throws
name|ValidationFailure
block|{
for|for
control|(
name|Object
name|o
range|:
name|it
control|)
block|{
name|verify
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|classname
argument_list|)
argument_list|,
literal|"Collection element is not a %s: %s"
argument_list|,
name|classname
argument_list|,
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

