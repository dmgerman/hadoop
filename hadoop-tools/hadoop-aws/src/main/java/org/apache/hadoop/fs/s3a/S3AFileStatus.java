begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_class
DECL|class|S3AFileStatus
specifier|public
class|class
name|S3AFileStatus
extends|extends
name|FileStatus
block|{
DECL|field|isEmptyDirectory
specifier|private
name|boolean
name|isEmptyDirectory
decl_stmt|;
comment|// Directories
DECL|method|S3AFileStatus (boolean isdir, boolean isemptydir, Path path)
specifier|public
name|S3AFileStatus
parameter_list|(
name|boolean
name|isdir
parameter_list|,
name|boolean
name|isemptydir
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|0
argument_list|,
name|isdir
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|isEmptyDirectory
operator|=
name|isemptydir
expr_stmt|;
block|}
comment|// Files
DECL|method|S3AFileStatus (long length, long modification_time, Path path)
specifier|public
name|S3AFileStatus
parameter_list|(
name|long
name|length
parameter_list|,
name|long
name|modification_time
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|length
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|modification_time
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|isEmptyDirectory
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|isEmptyDirectory ()
specifier|public
name|boolean
name|isEmptyDirectory
parameter_list|()
block|{
return|return
name|isEmptyDirectory
return|;
block|}
comment|/** Compare if this object is equal to another object    * @param   o the object to be compared.    * @return  true if two file status has the same path name; false if not.    */
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
comment|/**    * Returns a hash code value for the object, which is defined as    * the hash code of the path name.    *    * @return  a hash code value for the path name.    */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

