begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * File status for an S3A "file".  * Modification time is trouble, see {@link #getModificationTime()}.  *  * The subclass is private as it should not be created directly.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|S3AFileStatus
specifier|public
class|class
name|S3AFileStatus
extends|extends
name|FileStatus
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5955674081978903922L
decl_stmt|;
DECL|field|isEmptyDirectory
specifier|private
name|Tristate
name|isEmptyDirectory
decl_stmt|;
DECL|field|eTag
specifier|private
name|String
name|eTag
decl_stmt|;
DECL|field|versionId
specifier|private
name|String
name|versionId
decl_stmt|;
comment|/**    * Create a directory status.    * @param isemptydir is this an empty directory?    * @param path the path    * @param owner the owner    */
DECL|method|S3AFileStatus (boolean isemptydir, Path path, String owner)
specifier|public
name|S3AFileStatus
parameter_list|(
name|boolean
name|isemptydir
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|owner
parameter_list|)
block|{
name|this
argument_list|(
name|Tristate
operator|.
name|fromBool
argument_list|(
name|isemptydir
argument_list|)
argument_list|,
name|path
argument_list|,
name|owner
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a directory status.    * @param isemptydir is this an empty directory?    * @param path the path    * @param owner the owner    */
DECL|method|S3AFileStatus (Tristate isemptydir, Path path, String owner)
specifier|public
name|S3AFileStatus
parameter_list|(
name|Tristate
name|isemptydir
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|owner
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|isemptydir
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|owner
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * A simple file.    * @param length file length    * @param modification_time mod time    * @param path path    * @param blockSize block size    * @param owner owner    * @param eTag eTag of the S3 object if available, else null    * @param versionId versionId of the S3 object if available, else null    */
DECL|method|S3AFileStatus (long length, long modification_time, Path path, long blockSize, String owner, String eTag, String versionId)
specifier|public
name|S3AFileStatus
parameter_list|(
name|long
name|length
parameter_list|,
name|long
name|modification_time
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|eTag
parameter_list|,
name|String
name|versionId
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|Tristate
operator|.
name|FALSE
argument_list|,
name|length
argument_list|,
name|modification_time
argument_list|,
name|blockSize
argument_list|,
name|owner
argument_list|,
name|eTag
argument_list|,
name|versionId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Either a file or directory.    * @param path path    * @param isDir is this a directory?    * @param isemptydir is this an empty directory?    * @param length file length    * @param modificationTime mod time    * @param blockSize block size    * @param owner owner    * @param eTag eTag of the S3 object if available, else null    * @param versionId versionId of the S3 object if available, else null    */
DECL|method|S3AFileStatus (Path path, boolean isDir, Tristate isemptydir, long length, long modificationTime, long blockSize, String owner, String eTag, String versionId)
name|S3AFileStatus
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|isDir
parameter_list|,
name|Tristate
name|isemptydir
parameter_list|,
name|long
name|length
parameter_list|,
name|long
name|modificationTime
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|eTag
parameter_list|,
name|String
name|versionId
parameter_list|)
block|{
name|super
argument_list|(
name|length
argument_list|,
name|isDir
argument_list|,
literal|1
argument_list|,
name|blockSize
argument_list|,
name|modificationTime
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|owner
argument_list|,
name|owner
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|isEmptyDirectory
operator|=
name|isemptydir
expr_stmt|;
name|this
operator|.
name|eTag
operator|=
name|eTag
expr_stmt|;
name|this
operator|.
name|versionId
operator|=
name|versionId
expr_stmt|;
block|}
comment|/**    * Convenience constructor for creating from a vanilla FileStatus plus    * an isEmptyDirectory flag.    * @param source FileStatus to convert to S3AFileStatus    * @param isEmptyDirectory TRUE/FALSE if known to be / not be an empty    *     directory, UNKNOWN if that information was not computed.    * @param eTag eTag of the S3 object if available, else null    * @param versionId versionId of the S3 object if available, else null    * @return a new S3AFileStatus    */
DECL|method|fromFileStatus (FileStatus source, Tristate isEmptyDirectory, String eTag, String versionId)
specifier|public
specifier|static
name|S3AFileStatus
name|fromFileStatus
parameter_list|(
name|FileStatus
name|source
parameter_list|,
name|Tristate
name|isEmptyDirectory
parameter_list|,
name|String
name|eTag
parameter_list|,
name|String
name|versionId
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
operator|new
name|S3AFileStatus
argument_list|(
name|isEmptyDirectory
argument_list|,
name|source
operator|.
name|getPath
argument_list|()
argument_list|,
name|source
operator|.
name|getOwner
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|S3AFileStatus
argument_list|(
name|source
operator|.
name|getLen
argument_list|()
argument_list|,
name|source
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|source
operator|.
name|getPath
argument_list|()
argument_list|,
name|source
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|source
operator|.
name|getOwner
argument_list|()
argument_list|,
name|eTag
argument_list|,
name|versionId
argument_list|)
return|;
block|}
block|}
comment|/**    * @return FALSE if status is not a directory, or its a dir, but known to    * not be empty.  TRUE if it is an empty directory.  UNKNOWN if it is a    * directory, but we have not computed whether or not it is empty.    */
DECL|method|isEmptyDirectory ()
specifier|public
name|Tristate
name|isEmptyDirectory
parameter_list|()
block|{
return|return
name|isEmptyDirectory
return|;
block|}
comment|/**    * Update isEmptyDirectory attribute.    * @param isEmptyDirectory new isEmptyDirectory value    */
DECL|method|setIsEmptyDirectory (Tristate isEmptyDirectory)
specifier|public
name|void
name|setIsEmptyDirectory
parameter_list|(
name|Tristate
name|isEmptyDirectory
parameter_list|)
block|{
name|this
operator|.
name|isEmptyDirectory
operator|=
name|isEmptyDirectory
expr_stmt|;
block|}
comment|/**    * @return the S3 object eTag when available, else null.    */
DECL|method|getETag ()
specifier|public
name|String
name|getETag
parameter_list|()
block|{
return|return
name|eTag
return|;
block|}
comment|/**    * @return the S3 object versionId when available, else null.    */
DECL|method|getVersionId ()
specifier|public
name|String
name|getVersionId
parameter_list|()
block|{
return|return
name|versionId
return|;
block|}
comment|/** Compare if this object is equal to another object.    * @param   o the object to be compared.    * @return  true if two file status has the same path name; false if not.    */
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
comment|/**    * Returns a hash code value for the object, which is defined as    * the hash code of the path name.    *    * @return  a hash code value for the path name.    */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/** Get the modification time of the file/directory.    *    * s3a uses objects as "fake" directories, which are not updated to    * reflect the accurate modification time. We choose to report the    * current time because some parts of the ecosystem (e.g. the    * HistoryServer) use modification time to ignore "old" directories.    *    * @return for files the modification time in milliseconds since January 1,    *         1970 UTC or for directories the current time.    */
annotation|@
name|Override
DECL|method|getModificationTime ()
specifier|public
name|long
name|getModificationTime
parameter_list|()
block|{
if|if
condition|(
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getModificationTime
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
name|String
operator|.
name|format
argument_list|(
literal|" isEmptyDirectory=%s"
argument_list|,
name|isEmptyDirectory
argument_list|()
operator|.
name|name
argument_list|()
operator|+
name|String
operator|.
name|format
argument_list|(
literal|" eTag=%s"
argument_list|,
name|eTag
argument_list|)
operator|+
name|String
operator|.
name|format
argument_list|(
literal|" versionId=%s"
argument_list|,
name|versionId
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

