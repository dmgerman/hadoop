begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|GetObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3Object
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|NoVersionAttributeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|RemoteFileChangedException
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Change tracking for input streams: the revision ID/etag  * the previous request is recorded and when the next request comes in,  * it is compared.  * Self-contained for testing and use in different streams.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ChangeTracker
specifier|public
class|class
name|ChangeTracker
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeTracker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CHANGE_REPORTED_BY_S3
specifier|public
specifier|static
specifier|final
name|String
name|CHANGE_REPORTED_BY_S3
init|=
literal|"reported by S3"
decl_stmt|;
comment|/** Policy to use. */
DECL|field|policy
specifier|private
specifier|final
name|ChangeDetectionPolicy
name|policy
decl_stmt|;
comment|/**    * URI of file being read.    */
DECL|field|uri
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
comment|/**    * Mismatch counter; expected to be wired up to StreamStatistics except    * during testing.    */
DECL|field|versionMismatches
specifier|private
specifier|final
name|AtomicLong
name|versionMismatches
decl_stmt|;
comment|/**    * Revision identifier (e.g. eTag or versionId, depending on change    * detection policy).    */
DECL|field|revisionId
specifier|private
name|String
name|revisionId
decl_stmt|;
comment|/**    * Create a change tracker.    * @param uri URI of object being tracked    * @param policy policy to track.    * @param versionMismatches reference to the version mismatch counter    */
DECL|method|ChangeTracker (final String uri, final ChangeDetectionPolicy policy, final AtomicLong versionMismatches)
specifier|public
name|ChangeTracker
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|ChangeDetectionPolicy
name|policy
parameter_list|,
specifier|final
name|AtomicLong
name|versionMismatches
parameter_list|)
block|{
name|this
operator|.
name|policy
operator|=
name|checkNotNull
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|versionMismatches
operator|=
name|versionMismatches
expr_stmt|;
block|}
DECL|method|getRevisionId ()
specifier|public
name|String
name|getRevisionId
parameter_list|()
block|{
return|return
name|revisionId
return|;
block|}
DECL|method|getSource ()
specifier|public
name|ChangeDetectionPolicy
operator|.
name|Source
name|getSource
parameter_list|()
block|{
return|return
name|policy
operator|.
name|getSource
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getVersionMismatches ()
specifier|public
name|AtomicLong
name|getVersionMismatches
parameter_list|()
block|{
return|return
name|versionMismatches
return|;
block|}
comment|/**    * Apply any revision control set by the policy if it is to be    * enforced on the server.    * @param request request to modify    * @return true iff a constraint was added.    */
DECL|method|maybeApplyConstraint ( final GetObjectRequest request)
specifier|public
name|boolean
name|maybeApplyConstraint
parameter_list|(
specifier|final
name|GetObjectRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|policy
operator|.
name|getMode
argument_list|()
operator|==
name|ChangeDetectionPolicy
operator|.
name|Mode
operator|.
name|Server
operator|&&
name|revisionId
operator|!=
literal|null
condition|)
block|{
name|policy
operator|.
name|applyRevisionConstraint
argument_list|(
name|request
argument_list|,
name|revisionId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Process the response from the server for validation against the    * change policy.    * @param object object returned; may be null.    * @param operation operation in progress.    * @param pos offset of read    * @throws PathIOException raised on failure    * @throws RemoteFileChangedException if the remote file has changed.    */
DECL|method|processResponse (final S3Object object, final String operation, final long pos)
specifier|public
name|void
name|processResponse
parameter_list|(
specifier|final
name|S3Object
name|object
parameter_list|,
specifier|final
name|String
name|operation
parameter_list|,
specifier|final
name|long
name|pos
parameter_list|)
throws|throws
name|PathIOException
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
comment|// no object returned. Either mismatch or something odd.
if|if
condition|(
name|revisionId
operator|!=
literal|null
condition|)
block|{
comment|// the requirements of the change detection policy wasn't met: the
comment|// object was not returned.
name|versionMismatches
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RemoteFileChangedException
argument_list|(
name|uri
argument_list|,
name|operation
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s change "
operator|+
name|CHANGE_REPORTED_BY_S3
operator|+
literal|" while reading"
operator|+
literal|" at position %s."
operator|+
literal|" Version %s was unavailable"
argument_list|,
name|getSource
argument_list|()
argument_list|,
name|pos
argument_list|,
name|getRevisionId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|PathIOException
argument_list|(
name|uri
argument_list|,
literal|"No data returned from GET request"
argument_list|)
throw|;
block|}
block|}
specifier|final
name|ObjectMetadata
name|metadata
init|=
name|object
operator|.
name|getObjectMetadata
argument_list|()
decl_stmt|;
specifier|final
name|String
name|newRevisionId
init|=
name|policy
operator|.
name|getRevisionId
argument_list|(
name|metadata
argument_list|,
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|newRevisionId
operator|==
literal|null
operator|&&
name|policy
operator|.
name|isRequireVersion
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoVersionAttributeException
argument_list|(
name|uri
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Change detection policy requires %s"
argument_list|,
name|policy
operator|.
name|getSource
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|revisionId
operator|==
literal|null
condition|)
block|{
comment|// revisionId is null on first (re)open. Pin it so change can be detected
comment|// if object has been updated
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting revision ID for object at {}: {}"
argument_list|,
name|uri
argument_list|,
name|newRevisionId
argument_list|)
expr_stmt|;
name|revisionId
operator|=
name|newRevisionId
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|revisionId
operator|.
name|equals
argument_list|(
name|newRevisionId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Revision ID changed from {} to {}"
argument_list|,
name|revisionId
argument_list|,
name|newRevisionId
argument_list|)
expr_stmt|;
name|ImmutablePair
argument_list|<
name|Boolean
argument_list|,
name|RemoteFileChangedException
argument_list|>
name|pair
init|=
name|policy
operator|.
name|onChangeDetected
argument_list|(
name|revisionId
argument_list|,
name|newRevisionId
argument_list|,
name|uri
argument_list|,
name|pos
argument_list|,
name|operation
argument_list|,
name|versionMismatches
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|left
condition|)
block|{
comment|// an mismatch has occurred: note it.
name|versionMismatches
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pair
operator|.
name|right
operator|!=
literal|null
condition|)
block|{
comment|// there's an exception to raise: do it
throw|throw
name|pair
operator|.
name|right
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ChangeTracker{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"changeDetectionPolicy="
argument_list|)
operator|.
name|append
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", revisionId='"
argument_list|)
operator|.
name|append
argument_list|(
name|revisionId
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

