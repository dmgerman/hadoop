begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AWSCredentialProviderList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|RoleModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DurationInfo
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|DURATION_LOG_AT_INFO
import|;
end_import

begin_comment
comment|/**  *  An AbstractDelegationTokenBinding implementation is a class which  *  handles the binding of its underlying authentication mechanism to the  *  Hadoop Delegation token mechanism.  *  *  See also {@code org.apache.hadoop.fs.azure.security.WasbDelegationTokenManager}  *  but note that it assumes Kerberos tokens for which the renewal mechanism  *  is the sole plugin point.  *  This class is designed to be more generic.  *  *<b>Lifecycle</b>  *  *  It is a Hadoop Service, so has a standard lifecycle: once started  *  its lifecycle will follow that of the {@link S3ADelegationTokens}  *  instance which created it --which itself follows the lifecycle of the FS.  *  *  One big difference is that  *  {@link #bindToFileSystem(URI, S3AFileSystem)} will be called  *  before the {@link #init(Configuration)} operation, this is where  *  the owning FS is passed in.  *  *  Implementations are free to start background operations in their  *  {@code serviceStart()} method, provided they are safely stopped in  *  {@code serviceStop()}.  *  *<b>When to check for the ability to issue tokens</b>  *  Implementations MUST start up without actually holding the secrets  *  needed to issue tokens (config options, credentials to talk to STS etc)  *  as in server-side deployments they are not expected to have these.  *  *<b>Retry Policy</b>  *  *  All methods which talk to AWS services are expected to do translation,  *  with retries as they see fit.  */
end_comment

begin_class
DECL|class|AbstractDelegationTokenBinding
specifier|public
specifier|abstract
class|class
name|AbstractDelegationTokenBinding
extends|extends
name|AbstractDTService
block|{
comment|/** Token kind: must match that of the token identifiers issued. */
DECL|field|kind
specifier|private
specifier|final
name|Text
name|kind
decl_stmt|;
DECL|field|secretManager
specifier|private
name|SecretManager
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
name|secretManager
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractDelegationTokenBinding
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Constructor.    *    * @param name as passed to superclass for use in log messages.    * @param kind token kind.    */
DECL|method|AbstractDelegationTokenBinding (final String name, final Text kind)
specifier|protected
name|AbstractDelegationTokenBinding
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Text
name|kind
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|requireNonNull
argument_list|(
name|kind
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the kind of the tokens managed here.    * @return the token kind.    */
DECL|method|getKind ()
specifier|public
name|Text
name|getKind
parameter_list|()
block|{
return|return
name|kind
return|;
block|}
comment|/**    * Return the name of the owner to be used in tokens.    * This may be that of the UGI owner, or it could be related to    * the AWS login.    * @return a text name of the owner.    */
DECL|method|getOwnerText ()
specifier|public
name|Text
name|getOwnerText
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|(
name|getOwner
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Predicate: will this binding issue a DT?    * That is: should the filesystem declare that it is issuing    * delegation tokens? If true    * @return a declaration of what will happen when asked for a token.    */
DECL|method|getTokenIssuingPolicy ()
specifier|public
name|S3ADelegationTokens
operator|.
name|TokenIssuingPolicy
name|getTokenIssuingPolicy
parameter_list|()
block|{
return|return
name|S3ADelegationTokens
operator|.
name|TokenIssuingPolicy
operator|.
name|RequestNewToken
return|;
block|}
comment|/**    * Create a delegation token for the user.    * This will only be called if a new DT is needed, that is: the    * filesystem has been deployed unbonded.    * @param policy minimum policy to use, if known.    * @param encryptionSecrets encryption secrets for the token.    * @param renewer the principal permitted to renew the token.    * @return the token or null if the back end does not want to issue one.    * @throws IOException if one cannot be created    */
DECL|method|createDelegationToken ( final Optional<RoleModel.Policy> policy, final EncryptionSecrets encryptionSecrets, final Text renewer)
specifier|public
name|Token
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
name|createDelegationToken
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|RoleModel
operator|.
name|Policy
argument_list|>
name|policy
parameter_list|,
specifier|final
name|EncryptionSecrets
name|encryptionSecrets
parameter_list|,
specifier|final
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|requireServiceStarted
argument_list|()
expr_stmt|;
specifier|final
name|AbstractS3ATokenIdentifier
name|tokenIdentifier
init|=
name|createTokenIdentifier
argument_list|(
name|policy
argument_list|,
name|encryptionSecrets
argument_list|,
name|renewer
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenIdentifier
operator|!=
literal|null
condition|)
block|{
name|Token
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|tokenIdentifier
argument_list|,
name|secretManager
argument_list|)
decl_stmt|;
name|token
operator|.
name|setKind
argument_list|(
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created token {} with token identifier {}"
argument_list|,
name|token
argument_list|,
name|tokenIdentifier
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Create a token identifier with all the information needed    * to be included in a delegation token.    * This is where session credentials need to be extracted, etc.    * This will only be called if a new DT is needed, that is: the    * filesystem has been deployed unbonded.    *    * If {@link #createDelegationToken(Optional, EncryptionSecrets, Text)}    * is overridden, this method can be replaced with a stub.    *    * @param policy minimum policy to use, if known.    * @param encryptionSecrets encryption secrets for the token.    * @param renewer the principal permitted to renew the token.    * @return the token data to include in the token identifier.    * @throws IOException failure creating the token data.    */
DECL|method|createTokenIdentifier ( Optional<RoleModel.Policy> policy, EncryptionSecrets encryptionSecrets, Text renewer)
specifier|public
specifier|abstract
name|AbstractS3ATokenIdentifier
name|createTokenIdentifier
parameter_list|(
name|Optional
argument_list|<
name|RoleModel
operator|.
name|Policy
argument_list|>
name|policy
parameter_list|,
name|EncryptionSecrets
name|encryptionSecrets
parameter_list|,
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Verify that a token identifier is of a specific class.    * This will reject subclasses (i.e. it is stricter than    * {@code instanceof}, then cast it to that type.    * @param<T> type of S3A delegation ttoken identifier.    * @param identifier identifier to validate    * @param expectedClass class of the expected token identifier.    * @return token identifier.    * @throws DelegationTokenIOException If the wrong class was found.    */
DECL|method|convertTokenIdentifier ( final AbstractS3ATokenIdentifier identifier, final Class<T> expectedClass)
specifier|protected
parameter_list|<
name|T
extends|extends
name|AbstractS3ATokenIdentifier
parameter_list|>
name|T
name|convertTokenIdentifier
parameter_list|(
specifier|final
name|AbstractS3ATokenIdentifier
name|identifier
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|expectedClass
parameter_list|)
throws|throws
name|DelegationTokenIOException
block|{
if|if
condition|(
operator|!
name|identifier
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DelegationTokenIOException
argument_list|(
name|DelegationTokenIOException
operator|.
name|TOKEN_WRONG_CLASS
operator|+
literal|"; expected a token identifier of type "
operator|+
name|expectedClass
operator|+
literal|" but got "
operator|+
name|identifier
operator|.
name|getClass
argument_list|()
operator|+
literal|" and kind "
operator|+
name|identifier
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|(
name|T
operator|)
name|identifier
return|;
block|}
comment|/**    * Perform any actions when deploying unbonded, and return a list    * of credential providers.    * @return non-empty list of AWS credential providers to use for    * authenticating this client with AWS services.    * @throws IOException any failure.    */
DECL|method|deployUnbonded ()
specifier|public
specifier|abstract
name|AWSCredentialProviderList
name|deployUnbonded
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Bind to the token identifier, returning the credential providers to use    * for the owner to talk to S3, DDB and related AWS Services.    * @param retrievedIdentifier the unmarshalled data    * @return non-empty list of AWS credential providers to use for    * authenticating this client with AWS services.    * @throws IOException any failure.    */
DECL|method|bindToTokenIdentifier ( AbstractS3ATokenIdentifier retrievedIdentifier)
specifier|public
specifier|abstract
name|AWSCredentialProviderList
name|bindToTokenIdentifier
parameter_list|(
name|AbstractS3ATokenIdentifier
name|retrievedIdentifier
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Create a new subclass of {@link AbstractS3ATokenIdentifier}.    * This is used in the secret manager.    * @return an empty identifier.    */
DECL|method|createEmptyIdentifier ()
specifier|public
specifier|abstract
name|AbstractS3ATokenIdentifier
name|createEmptyIdentifier
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" token kind = "
operator|+
name|getKind
argument_list|()
return|;
block|}
comment|/**    * Service startup: create the secret manager.    * @throws Exception failure.    */
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|secretManager
operator|=
name|createSecretMananger
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return a description.    * This is logged during after service start and binding:    * it should be as informative as possible.    * @return a description to log.    */
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Token binding "
operator|+
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Create a secret manager.    * @return a secret manager.    * @throws IOException on failure    */
DECL|method|createSecretMananger ()
specifier|protected
name|SecretManager
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
name|createSecretMananger
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|TokenSecretManager
argument_list|()
return|;
block|}
comment|/**    * Return a string for use in building up the User-Agent field, so    * get into the S3 access logs. Useful for diagnostics.    * @return a string for the S3 logs or "" for "nothing to add"    */
DECL|method|getUserAgentField ()
specifier|public
name|String
name|getUserAgentField
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
comment|/**    * Get the password to use in secret managers.    * This is a constant; its just recalculated every time to stop findbugs    * highlighting security risks of shared mutable byte arrays.    * @return a password.    */
DECL|method|getSecretManagerPasssword ()
specifier|protected
specifier|static
name|byte
index|[]
name|getSecretManagerPasssword
parameter_list|()
block|{
return|return
literal|"non-password"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * The secret manager always uses the same secret; the    * factory for new identifiers is that of the token manager.    */
DECL|class|TokenSecretManager
specifier|protected
class|class
name|TokenSecretManager
extends|extends
name|SecretManager
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createPassword (AbstractS3ATokenIdentifier identifier)
specifier|protected
name|byte
index|[]
name|createPassword
parameter_list|(
name|AbstractS3ATokenIdentifier
name|identifier
parameter_list|)
block|{
return|return
name|getSecretManagerPasssword
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|retrievePassword (AbstractS3ATokenIdentifier identifier)
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|AbstractS3ATokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|InvalidToken
block|{
return|return
name|getSecretManagerPasssword
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|AbstractS3ATokenIdentifier
name|createIdentifier
parameter_list|()
block|{
try|try
init|(
name|DurationInfo
name|ignored
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
name|DURATION_LOG_AT_INFO
argument_list|,
literal|"Creating Delegation Token Identifier"
argument_list|)
init|)
block|{
return|return
name|AbstractDelegationTokenBinding
operator|.
name|this
operator|.
name|createEmptyIdentifier
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

