begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|internal
operator|.
name|AmazonS3ExceptionBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AmazonS3Exception
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3Object
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3ObjectInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Wrapper around S3Object so we can do failure injection on  * getObjectContent() and S3ObjectInputStream.  * See also {@link InconsistentAmazonS3Client}.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"NonSerializableFieldInSerializableClass"
block|,
literal|"serial"
block|}
argument_list|)
DECL|class|InconsistentS3Object
specifier|public
class|class
name|InconsistentS3Object
extends|extends
name|S3Object
block|{
comment|// This should be configurable, probably.
DECL|field|MAX_READ_FAILURES
specifier|public
specifier|static
specifier|final
name|int
name|MAX_READ_FAILURES
init|=
literal|100
decl_stmt|;
DECL|field|readFailureCounter
specifier|private
specifier|static
name|int
name|readFailureCounter
init|=
literal|0
decl_stmt|;
DECL|field|wrapped
specifier|private
specifier|transient
name|S3Object
name|wrapped
decl_stmt|;
DECL|field|policy
specifier|private
specifier|transient
name|FailureInjectionPolicy
name|policy
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|final
specifier|static
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InconsistentS3Object
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|InconsistentS3Object (S3Object wrapped, FailureInjectionPolicy policy)
specifier|public
name|InconsistentS3Object
parameter_list|(
name|S3Object
name|wrapped
parameter_list|,
name|FailureInjectionPolicy
name|policy
parameter_list|)
block|{
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getObjectContent ()
specifier|public
name|S3ObjectInputStream
name|getObjectContent
parameter_list|()
block|{
return|return
operator|new
name|InconsistentS3InputStream
argument_list|(
name|wrapped
operator|.
name|getObjectContent
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InconsistentS3Object wrapping: "
operator|+
name|wrapped
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getObjectMetadata ()
specifier|public
name|ObjectMetadata
name|getObjectMetadata
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getObjectMetadata
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setObjectMetadata (ObjectMetadata metadata)
specifier|public
name|void
name|setObjectMetadata
parameter_list|(
name|ObjectMetadata
name|metadata
parameter_list|)
block|{
name|wrapped
operator|.
name|setObjectMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setObjectContent (S3ObjectInputStream objectContent)
specifier|public
name|void
name|setObjectContent
parameter_list|(
name|S3ObjectInputStream
name|objectContent
parameter_list|)
block|{
name|wrapped
operator|.
name|setObjectContent
argument_list|(
name|objectContent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setObjectContent (InputStream objectContent)
specifier|public
name|void
name|setObjectContent
parameter_list|(
name|InputStream
name|objectContent
parameter_list|)
block|{
name|wrapped
operator|.
name|setObjectContent
argument_list|(
name|objectContent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBucketName ()
specifier|public
name|String
name|getBucketName
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getBucketName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setBucketName (String bucketName)
specifier|public
name|void
name|setBucketName
parameter_list|(
name|String
name|bucketName
parameter_list|)
block|{
name|wrapped
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setKey (String key)
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|wrapped
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRedirectLocation ()
specifier|public
name|String
name|getRedirectLocation
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getRedirectLocation
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setRedirectLocation (String redirectLocation)
specifier|public
name|void
name|setRedirectLocation
parameter_list|(
name|String
name|redirectLocation
parameter_list|)
block|{
name|wrapped
operator|.
name|setRedirectLocation
argument_list|(
name|redirectLocation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTaggingCount ()
specifier|public
name|Integer
name|getTaggingCount
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getTaggingCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setTaggingCount (Integer taggingCount)
specifier|public
name|void
name|setTaggingCount
parameter_list|(
name|Integer
name|taggingCount
parameter_list|)
block|{
name|wrapped
operator|.
name|setTaggingCount
argument_list|(
name|taggingCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|wrapped
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isRequesterCharged ()
specifier|public
name|boolean
name|isRequesterCharged
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|isRequesterCharged
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setRequesterCharged (boolean isRequesterCharged)
specifier|public
name|void
name|setRequesterCharged
parameter_list|(
name|boolean
name|isRequesterCharged
parameter_list|)
block|{
name|wrapped
operator|.
name|setRequesterCharged
argument_list|(
name|isRequesterCharged
argument_list|)
expr_stmt|;
block|}
DECL|method|mockException (String msg, int httpResponse)
specifier|private
name|AmazonS3Exception
name|mockException
parameter_list|(
name|String
name|msg
parameter_list|,
name|int
name|httpResponse
parameter_list|)
block|{
name|AmazonS3ExceptionBuilder
name|builder
init|=
operator|new
name|AmazonS3ExceptionBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setErrorMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStatusCode
argument_list|(
name|httpResponse
argument_list|)
expr_stmt|;
comment|// this is the important part
name|builder
operator|.
name|setErrorCode
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|httpResponse
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Insert a failiure injection point for a read call.    * @throw IOException, as codepath is on InputStream, not other SDK call.    */
DECL|method|readFailpoint (int off, int len)
specifier|private
name|void
name|readFailpoint
parameter_list|(
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|shouldInjectFailure
argument_list|(
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|error
init|=
name|String
operator|.
name|format
argument_list|(
literal|"read(b, %d, %d) on key %s failed: injecting error %d/%d"
operator|+
literal|" for test."
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|getKey
argument_list|()
argument_list|,
name|readFailureCounter
argument_list|,
name|MAX_READ_FAILURES
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
comment|/**    * Insert a failiure injection point for an InputStream skip() call.    * @throw IOException, as codepath is on InputStream, not other SDK call.    */
DECL|method|skipFailpoint (long len)
specifier|private
name|void
name|skipFailpoint
parameter_list|(
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|shouldInjectFailure
argument_list|(
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|error
init|=
name|String
operator|.
name|format
argument_list|(
literal|"skip(%d) on key %s failed: injecting error %d/%d for test."
argument_list|,
name|len
argument_list|,
name|getKey
argument_list|()
argument_list|,
name|readFailureCounter
argument_list|,
name|MAX_READ_FAILURES
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
DECL|method|shouldInjectFailure (String key)
specifier|private
name|boolean
name|shouldInjectFailure
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|policy
operator|.
name|shouldDelay
argument_list|(
name|key
argument_list|)
operator|&&
name|readFailureCounter
operator|<
name|MAX_READ_FAILURES
condition|)
block|{
name|readFailureCounter
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Wraps S3ObjectInputStream and implements failure injection.    */
DECL|class|InconsistentS3InputStream
specifier|protected
class|class
name|InconsistentS3InputStream
extends|extends
name|S3ObjectInputStream
block|{
DECL|field|wrapped
specifier|private
name|S3ObjectInputStream
name|wrapped
decl_stmt|;
DECL|method|InconsistentS3InputStream (S3ObjectInputStream wrapped)
specifier|public
name|InconsistentS3InputStream
parameter_list|(
name|S3ObjectInputStream
name|wrapped
parameter_list|)
block|{
comment|// seems awkward to have the stream wrap itself.
name|super
argument_list|(
name|wrapped
argument_list|,
name|wrapped
operator|.
name|getHttpRequest
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abort ()
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|wrapped
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|wrapped
operator|.
name|available
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|wrapped
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|skip (long n)
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|skipFailpoint
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|wrapped
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"read() for key {}"
argument_list|,
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|readFailpoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|wrapped
operator|.
name|read
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"read(b, {}, {}) for key {}"
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|readFailpoint
argument_list|(
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|wrapped
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

