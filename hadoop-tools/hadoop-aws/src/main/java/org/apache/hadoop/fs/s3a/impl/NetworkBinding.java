begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|DelegatingSSLSocketFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|DEFAULT_SSL_CHANNEL_MODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|SSL_CHANNEL_MODE
import|;
end_import

begin_comment
comment|/**  * Configures network settings when communicating with AWS services.  */
end_comment

begin_class
DECL|class|NetworkBinding
specifier|public
class|class
name|NetworkBinding
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NetworkBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AWS_SOCKET_FACTORY_CLASSNAME
specifier|private
specifier|static
specifier|final
name|String
name|AWS_SOCKET_FACTORY_CLASSNAME
init|=
literal|"com.amazonaws"
operator|+
literal|".thirdparty.apache.http.conn.ssl.SSLConnectionSocketFactory"
decl_stmt|;
comment|/**    * Configures the {@link com.amazonaws.thirdparty.apache.http.conn.ssl    * .SSLConnectionSocketFactory} used by the AWS SDK. A custom    * SSLConnectionSocketFactory can be set using the method    * {@link com.amazonaws.ApacheHttpClientConfig#setSslSocketFactory(    * com.amazonaws.thirdparty.apache.http.conn.socket.ConnectionSocketFactory)}.    * If {@link com.amazonaws.thirdparty.apache.http.conn.ssl    * .SSLConnectionSocketFactory} cannot be found on the classpath, the value    * of {@link org.apache.hadoop.fs.s3a.Constants#SSL_CHANNEL_MODE} is ignored.    *    * @param conf the {@link Configuration} used to get the client specified    *             value of {@link org.apache.hadoop.fs.s3a.Constants    *             #SSL_CHANNEL_MODE}    * @param awsConf the {@link ClientConfiguration} to set the    *                SSLConnectionSocketFactory for.    * @throws IOException if there is an error while initializing the    *                     {@link SSLSocketFactory}.    */
DECL|method|bindSSLChannelMode (Configuration conf, ClientConfiguration awsConf)
specifier|public
specifier|static
name|void
name|bindSSLChannelMode
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ClientConfiguration
name|awsConf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// Validate that SSL_CHANNEL_MODE is set to a valid value.
name|String
name|channelModeString
init|=
name|conf
operator|.
name|get
argument_list|(
name|SSL_CHANNEL_MODE
argument_list|,
name|DEFAULT_SSL_CHANNEL_MODE
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|DelegatingSSLSocketFactory
operator|.
name|SSLChannelMode
name|channelMode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DelegatingSSLSocketFactory
operator|.
name|SSLChannelMode
name|mode
range|:
name|DelegatingSSLSocketFactory
operator|.
name|SSLChannelMode
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|mode
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|channelModeString
argument_list|)
condition|)
block|{
name|channelMode
operator|=
name|mode
expr_stmt|;
block|}
block|}
if|if
condition|(
name|channelMode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|channelModeString
operator|+
literal|" is not a valid value for "
operator|+
name|SSL_CHANNEL_MODE
argument_list|)
throw|;
block|}
if|if
condition|(
name|channelMode
operator|==
name|DelegatingSSLSocketFactory
operator|.
name|SSLChannelMode
operator|.
name|OpenSSL
operator|||
name|channelMode
operator|==
name|DelegatingSSLSocketFactory
operator|.
name|SSLChannelMode
operator|.
name|Default
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"S3A does not support "
operator|+
literal|"setting "
operator|+
name|SSL_CHANNEL_MODE
operator|+
literal|" "
operator|+
name|DelegatingSSLSocketFactory
operator|.
name|SSLChannelMode
operator|.
name|OpenSSL
operator|+
literal|" or "
operator|+
name|DelegatingSSLSocketFactory
operator|.
name|SSLChannelMode
operator|.
name|Default
argument_list|)
throw|;
block|}
comment|// Look for AWS_SOCKET_FACTORY_CLASSNAME on the classpath and instantiate
comment|// an instance using the DelegatingSSLSocketFactory as the
comment|// SSLSocketFactory.
name|Class
argument_list|<
name|?
argument_list|>
name|sslConnectionSocketFactory
init|=
name|Class
operator|.
name|forName
argument_list|(
name|AWS_SOCKET_FACTORY_CLASSNAME
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|factoryConstructor
init|=
name|sslConnectionSocketFactory
operator|.
name|getDeclaredConstructor
argument_list|(
name|SSLSocketFactory
operator|.
name|class
argument_list|,
name|HostnameVerifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|DelegatingSSLSocketFactory
operator|.
name|initializeDefaultFactory
argument_list|(
name|channelMode
argument_list|)
expr_stmt|;
name|awsConf
operator|.
name|getApacheHttpClientConfig
argument_list|()
operator|.
name|setSslSocketFactory
argument_list|(
operator|(
name|com
operator|.
name|amazonaws
operator|.
name|thirdparty
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ssl
operator|.
name|SSLConnectionSocketFactory
operator|)
name|factoryConstructor
operator|.
name|newInstance
argument_list|(
name|DelegatingSSLSocketFactory
operator|.
name|getDefaultFactory
argument_list|()
argument_list|,
operator|(
name|HostnameVerifier
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
decl||
name|NoSuchMethodException
decl||
name|IllegalAccessException
decl||
name|InstantiationException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to create class {}, value of {} will be ignored"
argument_list|,
name|AWS_SOCKET_FACTORY_CLASSNAME
argument_list|,
name|SSL_CHANNEL_MODE
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

