begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|MultipartUpload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Invoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
operator|.
name|PendingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
operator|.
name|SinglePendingCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
operator|.
name|SuccessData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|PathOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DurationInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Invoker
operator|.
name|ignoreIOExceptions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitUtilsWithMR
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Abstract base class for S3A committers; allows for any commonality  * between different architectures.  *  * Although the committer APIs allow for a committer to be created without  * an output path, this is not supported in this class or its subclasses:  * a destination must be supplied. It is left to the committer factory  * to handle the creation of a committer when the destination is unknown.  *  * Requiring an output directory simplifies coding and testing.  */
end_comment

begin_class
DECL|class|AbstractS3ACommitter
specifier|public
specifier|abstract
class|class
name|AbstractS3ACommitter
extends|extends
name|PathOutputCommitter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractS3ACommitter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Thread pool for task execution.    */
DECL|field|threadPool
specifier|private
name|ExecutorService
name|threadPool
decl_stmt|;
comment|/** Underlying commit operations. */
DECL|field|commitOperations
specifier|private
specifier|final
name|CommitOperations
name|commitOperations
decl_stmt|;
comment|/**    * Final destination of work.    */
DECL|field|outputPath
specifier|private
name|Path
name|outputPath
decl_stmt|;
comment|/**    * Role: used in log/text messages.    */
DECL|field|role
specifier|private
specifier|final
name|String
name|role
decl_stmt|;
comment|/**    * This is the directory for all intermediate work: where the output format    * will write data.    *<i>This may not be on the final file system</i>    */
DECL|field|workPath
specifier|private
name|Path
name|workPath
decl_stmt|;
comment|/** Configuration of the job. */
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/** Filesystem of {@link #outputPath}. */
DECL|field|destFS
specifier|private
name|FileSystem
name|destFS
decl_stmt|;
comment|/** The job context. For a task, this can be cast to a TaskContext. */
DECL|field|jobContext
specifier|private
specifier|final
name|JobContext
name|jobContext
decl_stmt|;
comment|/** Should a job marker be created? */
DECL|field|createJobMarker
specifier|private
specifier|final
name|boolean
name|createJobMarker
decl_stmt|;
comment|/**    * Create a committer.    * This constructor binds the destination directory and configuration, but    * does not update the work path: That must be calculated by the    * implementation;    * It is omitted here to avoid subclass methods being called too early.    * @param outputPath the job's output path: MUST NOT be null.    * @param context the task's context    * @throws IOException on a failure    */
DECL|method|AbstractS3ACommitter ( Path outputPath, TaskAttemptContext context)
specifier|protected
name|AbstractS3ACommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|outputPath
operator|!=
literal|null
argument_list|,
literal|"null output path"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|context
operator|!=
literal|null
argument_list|,
literal|"null job context"
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|role
operator|=
literal|"Task committer "
operator|+
name|context
operator|.
name|getTaskAttemptID
argument_list|()
expr_stmt|;
name|setConf
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|initOutput
argument_list|(
name|outputPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} instantiated for job \"{}\" ID {} with destination {}"
argument_list|,
name|role
argument_list|,
name|jobName
argument_list|(
name|context
argument_list|)
argument_list|,
name|jobIdString
argument_list|(
name|context
argument_list|)
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getDestS3AFS
argument_list|()
decl_stmt|;
name|createJobMarker
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|CREATE_SUCCESSFUL_JOB_OUTPUT_DIR_MARKER
argument_list|,
name|DEFAULT_CREATE_SUCCESSFUL_JOB_DIR_MARKER
argument_list|)
expr_stmt|;
name|commitOperations
operator|=
operator|new
name|CommitOperations
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Init the output filesystem and path.    * TESTING ONLY; allows mock FS to cheat.    * @param out output path    * @throws IOException failure to create the FS.    */
annotation|@
name|VisibleForTesting
DECL|method|initOutput (Path out)
specifier|protected
name|void
name|initOutput
parameter_list|(
name|Path
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|getDestinationFS
argument_list|(
name|out
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|setDestFS
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|setOutputPath
argument_list|(
name|fs
operator|.
name|makeQualified
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the job/task context this committer was instantiated with.    * @return the context.    */
DECL|method|getJobContext ()
specifier|public
specifier|final
name|JobContext
name|getJobContext
parameter_list|()
block|{
return|return
name|jobContext
return|;
block|}
comment|/**    * Final path of output, in the destination FS.    * @return the path    */
annotation|@
name|Override
DECL|method|getOutputPath ()
specifier|public
specifier|final
name|Path
name|getOutputPath
parameter_list|()
block|{
return|return
name|outputPath
return|;
block|}
comment|/**    * Set the output path.    * @param outputPath new value    */
DECL|method|setOutputPath (Path outputPath)
specifier|protected
specifier|final
name|void
name|setOutputPath
parameter_list|(
name|Path
name|outputPath
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|outputPath
argument_list|,
literal|"Null output path"
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputPath
operator|=
name|outputPath
expr_stmt|;
block|}
comment|/**    * This is the critical method for {@code FileOutputFormat}; it declares    * the path for work.    * @return the working path.    */
annotation|@
name|Override
DECL|method|getWorkPath ()
specifier|public
name|Path
name|getWorkPath
parameter_list|()
block|{
return|return
name|workPath
return|;
block|}
comment|/**    * Set the work path for this committer.    * @param workPath the work path to use.    */
DECL|method|setWorkPath (Path workPath)
specifier|protected
name|void
name|setWorkPath
parameter_list|(
name|Path
name|workPath
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting work path to {}"
argument_list|,
name|workPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|workPath
operator|=
name|workPath
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|setConf (Configuration conf)
specifier|protected
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Get the destination FS, creating it on demand if needed.    * @return the filesystem; requires the output path to be set up    * @throws IOException if the FS cannot be instantiated.    */
DECL|method|getDestFS ()
specifier|public
name|FileSystem
name|getDestFS
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|destFS
operator|==
literal|null
condition|)
block|{
name|FileSystem
name|fs
init|=
name|getDestinationFS
argument_list|(
name|outputPath
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|setDestFS
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
return|return
name|destFS
return|;
block|}
comment|/**    * Get the destination as an S3A Filesystem; casting it.    * @return the dest S3A FS.    * @throws IOException if the FS cannot be instantiated.    */
DECL|method|getDestS3AFS ()
specifier|public
name|S3AFileSystem
name|getDestS3AFS
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|S3AFileSystem
operator|)
name|getDestFS
argument_list|()
return|;
block|}
comment|/**    * Set the destination FS: the FS of the final output.    * @param destFS destination FS.    */
DECL|method|setDestFS (FileSystem destFS)
specifier|protected
name|void
name|setDestFS
parameter_list|(
name|FileSystem
name|destFS
parameter_list|)
block|{
name|this
operator|.
name|destFS
operator|=
name|destFS
expr_stmt|;
block|}
comment|/**    * Compute the path where the output of a given job attempt will be placed.    * @param context the context of the job.  This is used to get the    * application attempt ID.    * @return the path to store job attempt data.    */
DECL|method|getJobAttemptPath (JobContext context)
specifier|public
name|Path
name|getJobAttemptPath
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
return|return
name|getJobAttemptPath
argument_list|(
name|getAppAttemptId
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Compute the path where the output of a given job attempt will be placed.    * @param appAttemptId the ID of the application attempt for this job.    * @return the path to store job attempt data.    */
DECL|method|getJobAttemptPath (int appAttemptId)
specifier|protected
specifier|abstract
name|Path
name|getJobAttemptPath
parameter_list|(
name|int
name|appAttemptId
parameter_list|)
function_decl|;
comment|/**    * Compute the path where the output of a task attempt is stored until    * that task is committed. This may be the normal Task attempt path    * or it may be a subdirectory.    * The default implementation returns the value of    * {@link #getBaseTaskAttemptPath(TaskAttemptContext)};    * subclasses may return different values.    * @param context the context of the task attempt.    * @return the path where a task attempt should be stored.    */
DECL|method|getTaskAttemptPath (TaskAttemptContext context)
specifier|public
name|Path
name|getTaskAttemptPath
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
block|{
return|return
name|getBaseTaskAttemptPath
argument_list|(
name|context
argument_list|)
return|;
block|}
comment|/**    * Compute the base path where the output of a task attempt is written.    * This is the path which will be deleted when a task is cleaned up and    * aborted.    *    * @param context the context of the task attempt.    * @return the path where a task attempt should be stored.    */
DECL|method|getBaseTaskAttemptPath (TaskAttemptContext context)
specifier|protected
specifier|abstract
name|Path
name|getBaseTaskAttemptPath
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
function_decl|;
comment|/**    * Get a temporary directory for data. When a task is aborted/cleaned    * up, the contents of this directory are all deleted.    * @param context task context    * @return a path for temporary data.    */
DECL|method|getTempTaskAttemptPath (TaskAttemptContext context)
specifier|public
specifier|abstract
name|Path
name|getTempTaskAttemptPath
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
function_decl|;
comment|/**    * Get the name of this committer.    * @return the committer name.    */
DECL|method|getName ()
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"AbstractS3ACommitter{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"role="
argument_list|)
operator|.
name|append
argument_list|(
name|role
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", name="
argument_list|)
operator|.
name|append
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", outputPath="
argument_list|)
operator|.
name|append
argument_list|(
name|getOutputPath
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", workPath="
argument_list|)
operator|.
name|append
argument_list|(
name|workPath
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the destination filesystem from the output path and the configuration.    * @param out output path    * @param config job/task config    * @return the associated FS    * @throws PathCommitException output path isn't to an S3A FS instance.    * @throws IOException failure to instantiate the FS.    */
DECL|method|getDestinationFS (Path out, Configuration config)
specifier|protected
name|FileSystem
name|getDestinationFS
parameter_list|(
name|Path
name|out
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getS3AFileSystem
argument_list|(
name|out
argument_list|,
name|config
argument_list|,
name|requiresDelayedCommitOutputInFileSystem
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Flag to indicate whether or not the destination filesystem needs    * to be configured to support magic paths where the output isn't immediately    * visible. If the committer returns true, then committer setup will    * fail if the FS doesn't have the capability.    * Base implementation returns false.    * @return what the requirements of the committer are of the filesystem.    */
DECL|method|requiresDelayedCommitOutputInFileSystem ()
specifier|protected
name|boolean
name|requiresDelayedCommitOutputInFileSystem
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Task recovery considered unsupported: Warn and fail.    * @param taskContext Context of the task whose output is being recovered    * @throws IOException always.    */
annotation|@
name|Override
DECL|method|recoverTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|recoverTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot recover task {}"
argument_list|,
name|taskContext
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PathCommitException
argument_list|(
name|outputPath
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Unable to recover task %s"
argument_list|,
name|taskContext
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|/**    * if the job requires a success marker on a successful job,    * create the file {@link CommitConstants#_SUCCESS}.    *    * While the classic committers create a 0-byte file, the S3Guard committers    * PUT up a the contents of a {@link SuccessData} file.    * @param context job context    * @param pending the pending commits    * @throws IOException IO failure    */
DECL|method|maybeCreateSuccessMarkerFromCommits (JobContext context, List<SinglePendingCommit> pending)
specifier|protected
name|void
name|maybeCreateSuccessMarkerFromCommits
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|pending
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|filenames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pending
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SinglePendingCommit
name|commit
range|:
name|pending
control|)
block|{
name|String
name|key
init|=
name|commit
operator|.
name|getDestinationKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// fix up so that FS.makeQualified() sets up the path OK
name|key
operator|=
literal|"/"
operator|+
name|key
expr_stmt|;
block|}
name|filenames
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|maybeCreateSuccessMarker
argument_list|(
name|context
argument_list|,
name|filenames
argument_list|)
expr_stmt|;
block|}
comment|/**    * if the job requires a success marker on a successful job,    * create the file {@link CommitConstants#_SUCCESS}.    *    * While the classic committers create a 0-byte file, the S3Guard committers    * PUT up a the contents of a {@link SuccessData} file.    * @param context job context    * @param filenames list of filenames.    * @throws IOException IO failure    */
DECL|method|maybeCreateSuccessMarker (JobContext context, List<String> filenames)
specifier|protected
name|void
name|maybeCreateSuccessMarker
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|filenames
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|createJobMarker
condition|)
block|{
comment|// create a success data structure and then save it
name|SuccessData
name|successData
init|=
operator|new
name|SuccessData
argument_list|()
decl_stmt|;
name|successData
operator|.
name|setCommitter
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|successData
operator|.
name|setDescription
argument_list|(
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
name|successData
operator|.
name|setHostname
argument_list|(
name|NetUtils
operator|.
name|getLocalHostname
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|successData
operator|.
name|setTimestamp
argument_list|(
name|now
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|successData
operator|.
name|setDate
argument_list|(
name|now
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|successData
operator|.
name|setFilenames
argument_list|(
name|filenames
argument_list|)
expr_stmt|;
name|commitOperations
operator|.
name|createSuccessMarker
argument_list|(
name|getOutputPath
argument_list|()
argument_list|,
name|successData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Base job setup deletes the success marker.    * TODO: Do we need this?    * @param context context    * @throws IOException IO failure    */
comment|/*    @Override   public void setupJob(JobContext context) throws IOException {     if (createJobMarker) {       try (DurationInfo d = new DurationInfo("Deleting _SUCCESS marker")) {         commitOperations.deleteSuccessMarker(getOutputPath());       }     }   } */
annotation|@
name|Override
DECL|method|setupTask (TaskAttemptContext context)
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DurationInfo
name|d
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Setup Task %s"
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
init|)
block|{
name|Path
name|taskAttemptPath
init|=
name|getTaskAttemptPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getTaskAttemptFilesystem
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|taskAttemptPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the task attempt path filesystem. This may not be the same as the    * final destination FS, and so may not be an S3A FS.    * @param context task attempt    * @return the filesystem    * @throws IOException failure to instantiate    */
DECL|method|getTaskAttemptFilesystem (TaskAttemptContext context)
specifier|protected
name|FileSystem
name|getTaskAttemptFilesystem
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTaskAttemptPath
argument_list|(
name|context
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Commit a list of pending uploads.    * @param context job context    * @param pending list of pending uploads    * @throws IOException on any failure    */
DECL|method|commitPendingUploads (JobContext context, List<SinglePendingCommit> pending)
specifier|protected
name|void
name|commitPendingUploads
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|pending
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{}: No pending uploads to commit"
argument_list|,
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: committing the output of {} task(s)"
argument_list|,
name|getRole
argument_list|()
argument_list|,
name|pending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tasks
operator|.
name|foreach
argument_list|(
name|pending
argument_list|)
operator|.
name|stopOnFailure
argument_list|()
operator|.
name|executeWith
argument_list|(
name|buildThreadPool
argument_list|(
name|context
argument_list|)
argument_list|)
operator|.
name|onFailure
argument_list|(
parameter_list|(
name|commit
parameter_list|,
name|exception
parameter_list|)
lambda|->
name|getCommitOperations
argument_list|()
operator|.
name|abortSingleCommit
argument_list|(
name|commit
argument_list|)
argument_list|)
operator|.
name|abortWith
argument_list|(
name|commit
lambda|->
name|getCommitOperations
argument_list|()
operator|.
name|abortSingleCommit
argument_list|(
name|commit
argument_list|)
argument_list|)
operator|.
name|revertWith
argument_list|(
name|commit
lambda|->
name|getCommitOperations
argument_list|()
operator|.
name|revertCommit
argument_list|(
name|commit
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
name|commit
lambda|->
name|getCommitOperations
argument_list|()
operator|.
name|commitOrFail
argument_list|(
name|commit
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Try to read every pendingset file and build a list of them/    * In the case of a failure to read the file, exceptions are held until all    * reads have been attempted.    * @param context job context    * @param suppressExceptions whether to suppress exceptions.    * @param fs job attempt fs    * @param pendingCommitFiles list of files found in the listing scan    * @return the list of commits    * @throws IOException on a failure when suppressExceptions is false.    */
DECL|method|loadPendingsetFiles ( JobContext context, boolean suppressExceptions, FileSystem fs, Iterable<? extends FileStatus> pendingCommitFiles)
specifier|protected
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|loadPendingsetFiles
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|boolean
name|suppressExceptions
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|FileStatus
argument_list|>
name|pendingCommitFiles
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|pending
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
decl_stmt|;
name|Tasks
operator|.
name|foreach
argument_list|(
name|pendingCommitFiles
argument_list|)
operator|.
name|suppressExceptions
argument_list|(
name|suppressExceptions
argument_list|)
operator|.
name|executeWith
argument_list|(
name|buildThreadPool
argument_list|(
name|context
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
name|pendingCommitFile
lambda|->
name|pending
operator|.
name|addAll
argument_list|(
name|PendingSet
operator|.
name|load
argument_list|(
name|fs
argument_list|,
name|pendingCommitFile
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getCommits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pending
return|;
block|}
comment|/**    * Internal Job commit operation: where the S3 requests are made    * (potentially in parallel).    * @param context job context    * @param pending pending request    * @throws IOException any failure    */
DECL|method|commitJobInternal (JobContext context, List<SinglePendingCommit> pending)
specifier|protected
name|void
name|commitJobInternal
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|pending
parameter_list|)
throws|throws
name|IOException
block|{
name|commitPendingUploads
argument_list|(
name|context
argument_list|,
name|pending
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortJob (JobContext context, JobStatus.State state)
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|JobStatus
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: aborting job {} in state {}"
argument_list|,
name|getRole
argument_list|()
argument_list|,
name|jobIdString
argument_list|(
name|context
argument_list|)
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// final cleanup operations
name|abortJobInternal
argument_list|(
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * The internal job abort operation; can be overridden in tests.    * This must clean up operations; it is called when a commit fails, as    * well as in an {@link #abortJob(JobContext, JobStatus.State)} call.    * The base implementation calls {@link #cleanup(JobContext, boolean)}    * @param context job context    * @param suppressExceptions should exceptions be suppressed?    * @throws IOException any IO problem raised when suppressExceptions is false.    */
DECL|method|abortJobInternal (JobContext context, boolean suppressExceptions)
specifier|protected
name|void
name|abortJobInternal
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|boolean
name|suppressExceptions
parameter_list|)
throws|throws
name|IOException
block|{
name|cleanup
argument_list|(
name|context
argument_list|,
name|suppressExceptions
argument_list|)
expr_stmt|;
block|}
comment|/**    * Abort all pending uploads to the destination directory during    * job cleanup operations.    * @param suppressExceptions should exceptions be suppressed    * @throws IOException IO problem    */
DECL|method|abortPendingUploadsInCleanup ( boolean suppressExceptions)
specifier|protected
name|void
name|abortPendingUploadsInCleanup
parameter_list|(
name|boolean
name|suppressExceptions
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dest
init|=
name|getOutputPath
argument_list|()
decl_stmt|;
try|try
init|(
name|DurationInfo
name|d
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Aborting all pending commits under %s"
argument_list|,
name|dest
argument_list|)
init|)
block|{
name|CommitOperations
name|ops
init|=
name|getCommitOperations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MultipartUpload
argument_list|>
name|pending
decl_stmt|;
try|try
block|{
name|pending
operator|=
name|ops
operator|.
name|listPendingUploadsUnderPath
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// raised if the listPendingUploads call failed.
name|maybeIgnore
argument_list|(
name|suppressExceptions
argument_list|,
literal|"aborting pending uploads"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|Tasks
operator|.
name|foreach
argument_list|(
name|pending
argument_list|)
operator|.
name|executeWith
argument_list|(
name|buildThreadPool
argument_list|(
name|getJobContext
argument_list|()
argument_list|)
argument_list|)
operator|.
name|suppressExceptions
argument_list|(
name|suppressExceptions
argument_list|)
operator|.
name|run
argument_list|(
name|u
lambda|->
name|ops
operator|.
name|abortMultipartCommit
argument_list|(
name|u
operator|.
name|getKey
argument_list|()
argument_list|,
name|u
operator|.
name|getUploadId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Subclass-specific pre commit actions.    * @param context job context    * @param pending the pending operations    * @throws IOException any failure    */
DECL|method|preCommitJob (JobContext context, List<SinglePendingCommit> pending)
specifier|protected
name|void
name|preCommitJob
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|pending
parameter_list|)
throws|throws
name|IOException
block|{   }
comment|/**    * Commit work.    * This consists of two stages: precommit and commit.    *<p>    * Precommit: identify pending uploads, then allow subclasses    * to validate the state of the destination and the pending uploads.    * Any failure here triggers an abort of all pending uploads.    *<p>    * Commit internal: do the final commit sequence.    *<p>    * The final commit action is to build the {@code __SUCCESS} file entry.    *</p>    * @param context job context    * @throws IOException any failure    */
annotation|@
name|Override
DECL|method|commitJob (JobContext context)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|id
init|=
name|jobIdString
argument_list|(
name|context
argument_list|)
decl_stmt|;
try|try
init|(
name|DurationInfo
name|d
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"%s: commitJob(%s)"
argument_list|,
name|getRole
argument_list|()
argument_list|,
name|id
argument_list|)
init|)
block|{
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|pending
init|=
name|listPendingUploadsToCommit
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|preCommitJob
argument_list|(
name|context
argument_list|,
name|pending
argument_list|)
expr_stmt|;
name|commitJobInternal
argument_list|(
name|context
argument_list|,
name|pending
argument_list|)
expr_stmt|;
name|jobCompleted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|maybeCreateSuccessMarkerFromCommits
argument_list|(
name|context
argument_list|,
name|pending
argument_list|)
expr_stmt|;
name|cleanup
argument_list|(
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Commit failure for job {}"
argument_list|,
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|jobCompleted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|abortJobInternal
argument_list|(
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Job completion outcome; this may be subclassed in tests.    * @param success did the job succeed.    */
DECL|method|jobCompleted (boolean success)
specifier|protected
name|void
name|jobCompleted
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|getCommitOperations
argument_list|()
operator|.
name|jobCompleted
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clean up any staging directories.    * IOEs must be caught and swallowed.    */
DECL|method|cleanupStagingDirs ()
specifier|public
specifier|abstract
name|void
name|cleanupStagingDirs
parameter_list|()
function_decl|;
comment|/**    * Get the list of pending uploads for this job attempt.    * @param context job context    * @return a list of pending uploads.    * @throws IOException Any IO failure    */
DECL|method|listPendingUploadsToCommit ( JobContext context)
specifier|protected
specifier|abstract
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|listPendingUploadsToCommit
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Cleanup the job context, including aborting anything pending.    * @param context job context    * @param suppressExceptions should exceptions be suppressed?    * @throws IOException any failure if exceptions were not suppressed.    */
DECL|method|cleanup (JobContext context, boolean suppressExceptions)
specifier|protected
name|void
name|cleanup
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|boolean
name|suppressExceptions
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DurationInfo
name|d
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Cleanup job %s"
argument_list|,
name|jobIdString
argument_list|(
name|context
argument_list|)
argument_list|)
init|)
block|{
name|abortPendingUploadsInCleanup
argument_list|(
name|suppressExceptions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupStagingDirs
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|cleanupJob (JobContext context)
specifier|public
name|void
name|cleanupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|r
init|=
name|getRole
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|jobIdString
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"{}: using deprecated cleanupJob call for {}"
argument_list|,
name|r
argument_list|,
name|id
argument_list|)
expr_stmt|;
try|try
init|(
name|DurationInfo
name|d
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"%s: cleanup Job %s"
argument_list|,
name|r
argument_list|,
name|id
argument_list|)
init|)
block|{
name|cleanup
argument_list|(
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Execute an operation; maybe suppress any raised IOException.    * @param suppress should raised IOEs be suppressed?    * @param action action (for logging when the IOE is supressed.    * @param operation operation    * @throws IOException if operation raised an IOE and suppress == false    */
DECL|method|maybeIgnore ( boolean suppress, String action, Invoker.VoidOperation operation)
specifier|protected
name|void
name|maybeIgnore
parameter_list|(
name|boolean
name|suppress
parameter_list|,
name|String
name|action
parameter_list|,
name|Invoker
operator|.
name|VoidOperation
name|operation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|suppress
condition|)
block|{
name|ignoreIOExceptions
argument_list|(
name|LOG
argument_list|,
name|action
argument_list|,
literal|""
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operation
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Log or rethrow a caught IOException.    * @param suppress should raised IOEs be suppressed?    * @param action action (for logging when the IOE is suppressed.    * @param ex  exception    * @throws IOException if suppress == false    */
DECL|method|maybeIgnore ( boolean suppress, String action, IOException ex)
specifier|protected
name|void
name|maybeIgnore
parameter_list|(
name|boolean
name|suppress
parameter_list|,
name|String
name|action
parameter_list|,
name|IOException
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|suppress
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|action
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Get the commit actions instance.    * Subclasses may provide a mock version of this.    * @return the commit actions instance to use for operations.    */
DECL|method|getCommitOperations ()
specifier|protected
name|CommitOperations
name|getCommitOperations
parameter_list|()
block|{
return|return
name|commitOperations
return|;
block|}
comment|/**    * Used in logging and reporting to help disentangle messages.    * @return the committer's role.    */
DECL|method|getRole ()
specifier|protected
name|String
name|getRole
parameter_list|()
block|{
return|return
name|role
return|;
block|}
comment|/**    * Returns an {@link ExecutorService} for parallel tasks. The number of    * threads in the thread-pool is set by s3.multipart.committer.num-threads.    * If num-threads is 0, this will return null;    *    * @param context the JobContext for this commit    * @return an {@link ExecutorService} or null for the number of threads    */
DECL|method|buildThreadPool ( JobContext context)
specifier|protected
specifier|final
specifier|synchronized
name|ExecutorService
name|buildThreadPool
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|threadPool
operator|==
literal|null
condition|)
block|{
name|int
name|numThreads
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|FS_S3A_COMMITTER_THREADS
argument_list|,
name|DEFAULT_COMMITTER_THREADS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: creating thread pool of size {}"
argument_list|,
name|getRole
argument_list|()
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
if|if
condition|(
name|numThreads
operator|>
literal|0
condition|)
block|{
name|threadPool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"s3-committer-pool-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|threadPool
return|;
block|}
comment|/**    * Delete the task attempt path without raising any errors.    * @param context task context    */
DECL|method|deleteTaskAttemptPathQuietly (TaskAttemptContext context)
specifier|protected
name|void
name|deleteTaskAttemptPathQuietly
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
block|{
name|Path
name|attemptPath
init|=
name|getBaseTaskAttemptPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|ignoreIOExceptions
argument_list|(
name|LOG
argument_list|,
literal|"Delete task attempt path"
argument_list|,
name|attemptPath
operator|.
name|toString
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|deleteQuietly
argument_list|(
name|getTaskAttemptFilesystem
argument_list|(
name|context
argument_list|)
argument_list|,
name|attemptPath
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Abort all pending uploads in the list.    * @param context job context    * @param pending pending uploads    * @param suppressExceptions should exceptions be suppressed    * @throws IOException any exception raised    */
DECL|method|abortPendingUploads (JobContext context, List<SinglePendingCommit> pending, boolean suppressExceptions)
specifier|protected
name|void
name|abortPendingUploads
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|pending
parameter_list|,
name|boolean
name|suppressExceptions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pending
operator|==
literal|null
operator|||
name|pending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: no pending commits to abort"
argument_list|,
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
name|DurationInfo
name|d
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Aborting %s uploads"
argument_list|,
name|pending
operator|.
name|size
argument_list|()
argument_list|)
init|)
block|{
name|Tasks
operator|.
name|foreach
argument_list|(
name|pending
argument_list|)
operator|.
name|executeWith
argument_list|(
name|buildThreadPool
argument_list|(
name|context
argument_list|)
argument_list|)
operator|.
name|suppressExceptions
argument_list|(
name|suppressExceptions
argument_list|)
operator|.
name|run
argument_list|(
name|commit
lambda|->
name|getCommitOperations
argument_list|()
operator|.
name|abortSingleCommit
argument_list|(
name|commit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

