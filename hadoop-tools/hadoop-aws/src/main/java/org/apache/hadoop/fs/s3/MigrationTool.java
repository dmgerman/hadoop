begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|S3Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|S3ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|impl
operator|.
name|rest
operator|.
name|httpclient
operator|.
name|RestS3Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|model
operator|.
name|S3Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|model
operator|.
name|S3Object
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|security
operator|.
name|AWSCredentials
import|;
end_import

begin_comment
comment|/**  *<p>  * This class is a tool for migrating data from an older to a newer version  * of an S3 filesystem.  *</p>  *<p>  * All files in the filesystem are migrated by re-writing the block metadata  * - no datafiles are touched.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|MigrationTool
specifier|public
class|class
name|MigrationTool
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|s3Service
specifier|private
name|S3Service
name|s3Service
decl_stmt|;
DECL|field|bucket
specifier|private
name|S3Bucket
name|bucket
decl_stmt|;
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|MigrationTool
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: MigrationTool<S3 file system URI>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\t<S3 file system URI>\tfilesystem to migrate"
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|initialize
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|FileSystemStore
name|newStore
init|=
operator|new
name|Jets3tFileSystemStore
argument_list|()
decl_stmt|;
name|newStore
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|get
argument_list|(
literal|"%2F"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Current version number is [unversioned]."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Target version number is "
operator|+
name|newStore
operator|.
name|getVersion
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|Store
name|oldStore
init|=
operator|new
name|UnversionedStore
argument_list|()
decl_stmt|;
name|migrate
argument_list|(
name|oldStore
argument_list|,
name|newStore
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|S3Object
name|root
init|=
name|get
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|String
name|version
init|=
operator|(
name|String
operator|)
name|root
operator|.
name|getMetadata
argument_list|(
literal|"fs-version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't detect version - exiting."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|newVersion
init|=
name|newStore
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Current version number is "
operator|+
name|version
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Target version number is "
operator|+
name|newVersion
operator|+
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
name|newStore
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No migration required."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// use version number to create Store
comment|//Store oldStore = ...
comment|//migrate(oldStore, newStore);
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Not currently implemented."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't detect version - exiting."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|method|initialize (URI uri)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|accessKey
init|=
literal|null
decl_stmt|;
name|String
name|secretAccessKey
init|=
literal|null
decl_stmt|;
name|String
name|userInfo
init|=
name|uri
operator|.
name|getUserInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|userInfo
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|userInfo
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|accessKey
operator|=
name|userInfo
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|secretAccessKey
operator|=
name|userInfo
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accessKey
operator|=
name|userInfo
expr_stmt|;
block|}
block|}
if|if
condition|(
name|accessKey
operator|==
literal|null
condition|)
block|{
name|accessKey
operator|=
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"fs.s3.awsAccessKeyId"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secretAccessKey
operator|==
literal|null
condition|)
block|{
name|secretAccessKey
operator|=
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"fs.s3.awsSecretAccessKey"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|accessKey
operator|==
literal|null
operator|&&
name|secretAccessKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"AWS "
operator|+
literal|"Access Key ID and Secret Access Key "
operator|+
literal|"must be specified as the username "
operator|+
literal|"or password (respectively) of a s3 URL, "
operator|+
literal|"or by setting the "
operator|+
literal|"fs.s3.awsAccessKeyId or "
operator|+
literal|"fs.s3.awsSecretAccessKey properties (respectively)."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|accessKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"AWS "
operator|+
literal|"Access Key ID must be specified "
operator|+
literal|"as the username of a s3 URL, or by setting the "
operator|+
literal|"fs.s3.awsAccessKeyId property."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|secretAccessKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"AWS "
operator|+
literal|"Secret Access Key must be specified "
operator|+
literal|"as the password of a s3 URL, or by setting the "
operator|+
literal|"fs.s3.awsSecretAccessKey property."
argument_list|)
throw|;
block|}
name|AWSCredentials
name|awsCredentials
init|=
operator|new
name|AWSCredentials
argument_list|(
name|accessKey
argument_list|,
name|secretAccessKey
argument_list|)
decl_stmt|;
name|this
operator|.
name|s3Service
operator|=
operator|new
name|RestS3Service
argument_list|(
name|awsCredentials
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|bucket
operator|=
operator|new
name|S3Bucket
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|migrate (Store oldStore, FileSystemStore newStore)
specifier|private
name|void
name|migrate
parameter_list|(
name|Store
name|oldStore
parameter_list|,
name|FileSystemStore
name|newStore
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Path
name|path
range|:
name|oldStore
operator|.
name|listAllPaths
argument_list|()
control|)
block|{
name|INode
name|inode
init|=
name|oldStore
operator|.
name|retrieveINode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|oldStore
operator|.
name|deleteINode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|newStore
operator|.
name|storeINode
argument_list|(
name|path
argument_list|,
name|inode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|get (String key)
specifier|private
name|S3Object
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
try|try
block|{
return|return
name|s3Service
operator|.
name|getObject
argument_list|(
name|bucket
operator|.
name|getName
argument_list|()
argument_list|,
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|"NoSuchKey"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getS3ErrorCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|interface|Store
interface|interface
name|Store
block|{
DECL|method|listAllPaths ()
name|Set
argument_list|<
name|Path
argument_list|>
name|listAllPaths
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|retrieveINode (Path path)
name|INode
name|retrieveINode
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|deleteINode (Path path)
name|void
name|deleteINode
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|UnversionedStore
class|class
name|UnversionedStore
implements|implements
name|Store
block|{
annotation|@
name|Override
DECL|method|listAllPaths ()
specifier|public
name|Set
argument_list|<
name|Path
argument_list|>
name|listAllPaths
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|prefix
init|=
name|urlEncode
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
name|S3Object
index|[]
name|objects
init|=
name|s3Service
operator|.
name|listObjects
argument_list|(
name|bucket
operator|.
name|getName
argument_list|()
argument_list|,
name|prefix
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|prefixes
init|=
operator|new
name|TreeSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|prefixes
operator|.
name|add
argument_list|(
name|keyToPath
argument_list|(
name|objects
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|prefixes
return|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteINode (Path path)
specifier|public
name|void
name|deleteINode
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|delete
argument_list|(
name|pathToKey
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|delete (String key)
specifier|private
name|void
name|delete
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|s3Service
operator|.
name|deleteObject
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|retrieveINode (Path path)
specifier|public
name|INode
name|retrieveINode
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|INode
operator|.
name|deserialize
argument_list|(
name|get
argument_list|(
name|pathToKey
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|get (String key)
specifier|private
name|InputStream
name|get
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|S3Object
name|object
init|=
name|s3Service
operator|.
name|getObject
argument_list|(
name|bucket
operator|.
name|getName
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
return|return
name|object
operator|.
name|getDataInputStream
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|"NoSuchKey"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getS3ErrorCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|pathToKey (Path path)
specifier|private
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Path must be absolute: "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|urlEncode
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
DECL|method|keyToPath (String key)
specifier|private
name|Path
name|keyToPath
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|urlDecode
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|urlEncode (String s)
specifier|private
name|String
name|urlEncode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
return|return
name|URLEncoder
operator|.
name|encode
argument_list|(
name|s
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// Should never happen since every implementation of the Java Platform
comment|// is required to support UTF-8.
comment|// See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|urlDecode (String s)
specifier|private
name|String
name|urlDecode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|s
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// Should never happen since every implementation of the Java Platform
comment|// is required to support UTF-8.
comment|// See http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

