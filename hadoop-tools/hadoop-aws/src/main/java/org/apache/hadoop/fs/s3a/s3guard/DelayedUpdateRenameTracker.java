begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|SdkBaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ObjectAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Tristate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
operator|.
name|StoreContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DurationInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3Guard
operator|.
name|addMoveAncestors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3Guard
operator|.
name|addMoveDir
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3Guard
operator|.
name|addMoveFile
import|;
end_import

begin_comment
comment|/**  * This is the rename updating strategy originally used:  * a collection of source paths and a list of destinations are created,  * then updated at the end (possibly slow).  *<p>  * It is not currently instantiated by any of the active trackers,  * but is preserved to show that the original rename strategy  * can be implemented via the tracker model.  */
end_comment

begin_class
DECL|class|DelayedUpdateRenameTracker
specifier|public
class|class
name|DelayedUpdateRenameTracker
extends|extends
name|RenameTracker
block|{
DECL|field|metadataStore
specifier|private
specifier|final
name|MetadataStore
name|metadataStore
decl_stmt|;
DECL|field|sourcePaths
specifier|private
specifier|final
name|Collection
argument_list|<
name|Path
argument_list|>
name|sourcePaths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|destMetas
specifier|private
specifier|final
name|List
argument_list|<
name|PathMetadata
argument_list|>
name|destMetas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|deletedPaths
specifier|private
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|deletedPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|DelayedUpdateRenameTracker ( final StoreContext storeContext, final MetadataStore metadataStore, final Path sourceRoot, final Path dest, final BulkOperationState operationState)
specifier|public
name|DelayedUpdateRenameTracker
parameter_list|(
specifier|final
name|StoreContext
name|storeContext
parameter_list|,
specifier|final
name|MetadataStore
name|metadataStore
parameter_list|,
specifier|final
name|Path
name|sourceRoot
parameter_list|,
specifier|final
name|Path
name|dest
parameter_list|,
specifier|final
name|BulkOperationState
name|operationState
parameter_list|)
block|{
name|super
argument_list|(
literal|"DelayedUpdateRenameTracker"
argument_list|,
name|storeContext
argument_list|,
name|metadataStore
argument_list|,
name|sourceRoot
argument_list|,
name|dest
argument_list|,
name|operationState
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataStore
operator|=
name|storeContext
operator|.
name|getMetadataStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fileCopied ( final Path sourcePath, final S3ObjectAttributes sourceAttributes, final S3ObjectAttributes destAttributes, final Path destPath, final long blockSize, final boolean addAncestors)
specifier|public
specifier|synchronized
name|void
name|fileCopied
parameter_list|(
specifier|final
name|Path
name|sourcePath
parameter_list|,
specifier|final
name|S3ObjectAttributes
name|sourceAttributes
parameter_list|,
specifier|final
name|S3ObjectAttributes
name|destAttributes
parameter_list|,
specifier|final
name|Path
name|destPath
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|boolean
name|addAncestors
parameter_list|)
throws|throws
name|IOException
block|{
name|addMoveFile
argument_list|(
name|metadataStore
argument_list|,
name|sourcePaths
argument_list|,
name|destMetas
argument_list|,
name|sourcePath
argument_list|,
name|destPath
argument_list|,
name|sourceAttributes
operator|.
name|getLen
argument_list|()
argument_list|,
name|blockSize
argument_list|,
name|getOwner
argument_list|()
argument_list|,
name|destAttributes
operator|.
name|getETag
argument_list|()
argument_list|,
name|destAttributes
operator|.
name|getVersionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ancestor directories may not be listed, so we explicitly add them
if|if
condition|(
name|addAncestors
condition|)
block|{
name|addMoveAncestors
argument_list|(
name|metadataStore
argument_list|,
name|sourcePaths
argument_list|,
name|destMetas
argument_list|,
name|getSourceRoot
argument_list|()
argument_list|,
name|sourcePath
argument_list|,
name|destPath
argument_list|,
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|directoryMarkerCopied (final Path sourcePath, final Path destPath, final boolean addAncestors)
specifier|public
specifier|synchronized
name|void
name|directoryMarkerCopied
parameter_list|(
specifier|final
name|Path
name|sourcePath
parameter_list|,
specifier|final
name|Path
name|destPath
parameter_list|,
specifier|final
name|boolean
name|addAncestors
parameter_list|)
throws|throws
name|IOException
block|{
name|addMoveDir
argument_list|(
name|metadataStore
argument_list|,
name|sourcePaths
argument_list|,
name|destMetas
argument_list|,
name|sourcePath
argument_list|,
name|destPath
argument_list|,
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ancestor directories may not be listed, so we explicitly add them
if|if
condition|(
name|addAncestors
condition|)
block|{
name|addMoveAncestors
argument_list|(
name|metadataStore
argument_list|,
name|sourcePaths
argument_list|,
name|destMetas
argument_list|,
name|getSourceRoot
argument_list|()
argument_list|,
name|sourcePath
argument_list|,
name|destPath
argument_list|,
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|moveSourceDirectory ()
specifier|public
specifier|synchronized
name|void
name|moveSourceDirectory
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|sourcePaths
operator|.
name|contains
argument_list|(
name|getSourceRoot
argument_list|()
argument_list|)
condition|)
block|{
name|addMoveDir
argument_list|(
name|metadataStore
argument_list|,
name|sourcePaths
argument_list|,
name|destMetas
argument_list|,
name|getSourceRoot
argument_list|()
argument_list|,
name|getDest
argument_list|()
argument_list|,
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|sourceObjectsDeleted ( final Collection<Path> paths)
specifier|public
specifier|synchronized
name|void
name|sourceObjectsDeleted
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Path
argument_list|>
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
comment|// add to the list of deleted paths.
name|deletedPaths
operator|.
name|addAll
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|completeRename ()
specifier|public
name|void
name|completeRename
parameter_list|()
throws|throws
name|IOException
block|{
name|metadataStore
operator|.
name|move
argument_list|(
name|sourcePaths
argument_list|,
name|destMetas
argument_list|,
name|getOperationState
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|completeRename
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|renameFailed (final Exception ex)
specifier|public
name|IOException
name|renameFailed
parameter_list|(
specifier|final
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Rename has failed; updating s3guard with destination state"
argument_list|)
expr_stmt|;
try|try
init|(
name|DurationInfo
name|ignored
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Cleaning up deleted paths"
argument_list|)
init|)
block|{
comment|// the destination paths are updated; the source is left alone.
name|metadataStore
operator|.
name|move
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|destMetas
argument_list|,
name|getOperationState
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|deletedPath
range|:
name|deletedPaths
control|)
block|{
comment|// this is not ideal in that it may leave parent stuff around.
name|metadataStore
operator|.
name|delete
argument_list|(
name|deletedPath
argument_list|,
name|getOperationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteParentPaths
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SdkBaseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring error raised in AWS SDK "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|renameFailed
argument_list|(
name|ex
argument_list|)
return|;
block|}
comment|/**    * Delete all the parent paths we know to be empty (by walking up the tree    * deleting as appropriate).    * @throws IOException failure    */
DECL|method|deleteParentPaths ()
specifier|private
name|void
name|deleteParentPaths
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|Path
argument_list|>
name|parentPaths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|deletedPath
range|:
name|deletedPaths
control|)
block|{
name|Path
name|parent
init|=
name|deletedPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|equals
argument_list|(
name|getSourceRoot
argument_list|()
argument_list|)
condition|)
block|{
name|parentPaths
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now there's a set of parent paths. We now want to
comment|// get them ordered by depth, so that deeper entries come first
comment|// that way: when we check for a parent path existing we can
comment|// see if it really is empty.
name|List
argument_list|<
name|Path
argument_list|>
name|parents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|parentPaths
argument_list|)
decl_stmt|;
name|parents
operator|.
name|sort
argument_list|(
name|PathOrderComparators
operator|.
name|TOPMOST_PATH_LAST
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|parent
range|:
name|parents
control|)
block|{
name|PathMetadata
name|md
init|=
name|metadataStore
operator|.
name|get
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|!=
literal|null
operator|&&
name|md
operator|.
name|isEmptyDirectory
argument_list|()
operator|==
name|Tristate
operator|.
name|TRUE
condition|)
block|{
comment|// if were confident that this is empty: delete it.
name|metadataStore
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
name|getOperationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

