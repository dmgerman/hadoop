begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Tristate
import|;
end_import

begin_comment
comment|/**  * {@code DirListingMetadata} models a directory listing stored in a  * {@link MetadataStore}.  Instances of this class are mutable and thread-safe.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DirListingMetadata
specifier|public
class|class
name|DirListingMetadata
extends|extends
name|ExpirableMetadata
block|{
comment|/**    * Convenience parameter for passing into constructor.    */
DECL|field|EMPTY_DIR
specifier|public
specifier|static
specifier|final
name|Collection
argument_list|<
name|PathMetadata
argument_list|>
name|EMPTY_DIR
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
comment|/** Using a map for fast find / remove with large directories. */
DECL|field|listMap
specifier|private
name|Map
argument_list|<
name|Path
argument_list|,
name|PathMetadata
argument_list|>
name|listMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|isAuthoritative
specifier|private
name|boolean
name|isAuthoritative
decl_stmt|;
comment|/**    * Create a directory listing metadata container.    *    * @param path Path of the directory. If this path has a host component, then    *     all paths added later via {@link #put(FileStatus)} must also have    *     the same host.    * @param listing Entries in the directory.    * @param isAuthoritative true iff listing is the full contents of the    *     directory, and the calling client reports that this may be cached as    *     the full and authoritative listing of all files in the directory.    */
DECL|method|DirListingMetadata (Path path, Collection<PathMetadata> listing, boolean isAuthoritative, long lastUpdated)
specifier|public
name|DirListingMetadata
parameter_list|(
name|Path
name|path
parameter_list|,
name|Collection
argument_list|<
name|PathMetadata
argument_list|>
name|listing
parameter_list|,
name|boolean
name|isAuthoritative
parameter_list|,
name|long
name|lastUpdated
parameter_list|)
block|{
name|checkPathAbsolute
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
if|if
condition|(
name|listing
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PathMetadata
name|entry
range|:
name|listing
control|)
block|{
name|Path
name|childPath
init|=
name|entry
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|checkChildPath
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|listMap
operator|.
name|put
argument_list|(
name|childPath
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|isAuthoritative
operator|=
name|isAuthoritative
expr_stmt|;
name|this
operator|.
name|setLastUpdated
argument_list|(
name|lastUpdated
argument_list|)
expr_stmt|;
block|}
DECL|method|DirListingMetadata (Path path, Collection<PathMetadata> listing, boolean isAuthoritative)
specifier|public
name|DirListingMetadata
parameter_list|(
name|Path
name|path
parameter_list|,
name|Collection
argument_list|<
name|PathMetadata
argument_list|>
name|listing
parameter_list|,
name|boolean
name|isAuthoritative
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
name|listing
argument_list|,
name|isAuthoritative
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy constructor.    * @param d the existing {@link DirListingMetadata} object.    */
DECL|method|DirListingMetadata (DirListingMetadata d)
specifier|public
name|DirListingMetadata
parameter_list|(
name|DirListingMetadata
name|d
parameter_list|)
block|{
name|path
operator|=
name|d
operator|.
name|path
expr_stmt|;
name|isAuthoritative
operator|=
name|d
operator|.
name|isAuthoritative
expr_stmt|;
name|this
operator|.
name|setLastUpdated
argument_list|(
name|d
operator|.
name|getLastUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|listMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
name|d
operator|.
name|listMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return {@code Path} of the directory that contains this listing.    */
DECL|method|getPath ()
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**    * @return entries in the directory    */
DECL|method|getListing ()
specifier|public
name|Collection
argument_list|<
name|PathMetadata
argument_list|>
name|getListing
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|listMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|method|listTombstones ()
specifier|public
name|Set
argument_list|<
name|Path
argument_list|>
name|listTombstones
parameter_list|()
block|{
name|Set
argument_list|<
name|Path
argument_list|>
name|tombstones
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PathMetadata
name|meta
range|:
name|listMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|meta
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|tombstones
operator|.
name|add
argument_list|(
name|meta
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tombstones
return|;
block|}
DECL|method|withoutTombstones ()
specifier|public
name|DirListingMetadata
name|withoutTombstones
parameter_list|()
block|{
name|Collection
argument_list|<
name|PathMetadata
argument_list|>
name|filteredList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PathMetadata
name|meta
range|:
name|listMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|meta
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|filteredList
operator|.
name|add
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
name|filteredList
argument_list|,
name|isAuthoritative
argument_list|,
name|this
operator|.
name|getLastUpdated
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return number of entries tracked.  This is not the same as the number    * of entries in the actual directory unless {@link #isAuthoritative()} is    * true.    */
DECL|method|numEntries ()
specifier|public
name|int
name|numEntries
parameter_list|()
block|{
return|return
name|listMap
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * @return true iff this directory listing is full and authoritative within    * the scope of the {@code MetadataStore} that returned it.    */
DECL|method|isAuthoritative ()
specifier|public
name|boolean
name|isAuthoritative
parameter_list|()
block|{
return|return
name|isAuthoritative
return|;
block|}
comment|/**    * Is the underlying directory known to be empty?    * @return FALSE if directory is known to have a child entry, TRUE if    * directory is known to be empty, UNKNOWN otherwise.    */
DECL|method|isEmpty ()
specifier|public
name|Tristate
name|isEmpty
parameter_list|()
block|{
if|if
condition|(
name|getListing
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isAuthoritative
argument_list|()
condition|)
block|{
return|return
name|Tristate
operator|.
name|TRUE
return|;
block|}
else|else
block|{
comment|// This listing is empty, but may not be full list of underlying dir.
return|return
name|Tristate
operator|.
name|UNKNOWN
return|;
block|}
block|}
else|else
block|{
comment|// not empty listing
comment|// There exists at least one child, dir not empty.
return|return
name|Tristate
operator|.
name|FALSE
return|;
block|}
block|}
comment|/**    * Marks this directory listing as full and authoritative.    * @param authoritative see {@link #isAuthoritative()}.    */
DECL|method|setAuthoritative (boolean authoritative)
specifier|public
name|void
name|setAuthoritative
parameter_list|(
name|boolean
name|authoritative
parameter_list|)
block|{
name|this
operator|.
name|isAuthoritative
operator|=
name|authoritative
expr_stmt|;
block|}
comment|/**    * Lookup entry within this directory listing.  This may return null if the    * {@code MetadataStore} only tracks a partial set of the directory entries.    * In the case where {@link #isAuthoritative()} is true, however, this    * function returns null iff the directory is known not to contain the listing    * at given path (within the scope of the {@code MetadataStore} that returned    * it).    *    * @param childPath path of entry to look for.    * @return entry, or null if it is not present or not being tracked.    */
DECL|method|get (Path childPath)
specifier|public
name|PathMetadata
name|get
parameter_list|(
name|Path
name|childPath
parameter_list|)
block|{
name|checkChildPath
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
return|return
name|listMap
operator|.
name|get
argument_list|(
name|childPath
argument_list|)
return|;
block|}
comment|/**    * Replace an entry with a tombstone.    * @param childPath path of entry to replace.    */
DECL|method|markDeleted (Path childPath)
specifier|public
name|void
name|markDeleted
parameter_list|(
name|Path
name|childPath
parameter_list|)
block|{
name|checkChildPath
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|listMap
operator|.
name|put
argument_list|(
name|childPath
argument_list|,
name|PathMetadata
operator|.
name|tombstone
argument_list|(
name|childPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove entry from this directory.    *    * @param childPath path of entry to remove.    */
DECL|method|remove (Path childPath)
specifier|public
name|void
name|remove
parameter_list|(
name|Path
name|childPath
parameter_list|)
block|{
name|checkChildPath
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|listMap
operator|.
name|remove
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add an entry to the directory listing.  If this listing already contains a    * {@code FileStatus} with the same path, it will be replaced.    *    * @param childFileStatus entry to add to this directory listing.    * @return true if the status was added or replaced with a new value. False    * if the same FileStatus value was already present.    */
DECL|method|put (FileStatus childFileStatus)
specifier|public
name|boolean
name|put
parameter_list|(
name|FileStatus
name|childFileStatus
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|childFileStatus
argument_list|,
literal|"childFileStatus must be non-null"
argument_list|)
expr_stmt|;
name|Path
name|childPath
init|=
name|childStatusToPathKey
argument_list|(
name|childFileStatus
argument_list|)
decl_stmt|;
name|PathMetadata
name|newValue
init|=
operator|new
name|PathMetadata
argument_list|(
name|childFileStatus
argument_list|)
decl_stmt|;
name|PathMetadata
name|oldValue
init|=
name|listMap
operator|.
name|put
argument_list|(
name|childPath
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
return|return
name|oldValue
operator|==
literal|null
operator|||
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DirListingMetadata{"
operator|+
literal|"path="
operator|+
name|path
operator|+
literal|", listMap="
operator|+
name|listMap
operator|+
literal|", isAuthoritative="
operator|+
name|isAuthoritative
operator|+
literal|", lastUpdated="
operator|+
name|this
operator|.
name|getLastUpdated
argument_list|()
operator|+
literal|'}'
return|;
block|}
comment|/**    * Log contents to supplied StringBuilder in a pretty fashion.    * @param sb target StringBuilder    */
DECL|method|prettyPrint (StringBuilder sb)
specifier|public
name|void
name|prettyPrint
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"DirMeta %-20s %-18s"
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|isAuthoritative
condition|?
literal|"Authoritative"
else|:
literal|"Not Authoritative"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|PathMetadata
argument_list|>
name|entry
range|:
name|listMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n   key: "
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|prettyPrint
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|prettyPrint ()
specifier|public
name|String
name|prettyPrint
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|prettyPrint
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Checks that child path is valid.    * @param childPath path to check.    */
DECL|method|checkChildPath (Path childPath)
specifier|private
name|void
name|checkChildPath
parameter_list|(
name|Path
name|childPath
parameter_list|)
block|{
name|checkPathAbsolute
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
comment|// If this dir's path has host (and thus scheme), so must its children
name|URI
name|parentUri
init|=
name|path
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|URI
name|childUri
init|=
name|childPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentUri
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|childUri
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"Expected non-null URI "
operator|+
literal|"host: %s"
argument_list|,
name|childUri
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|childUri
operator|.
name|getHost
argument_list|()
operator|.
name|equals
argument_list|(
name|parentUri
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|,
literal|"childUri %s and parentUri %s must have the same host"
argument_list|,
name|childUri
argument_list|,
name|parentUri
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|childUri
operator|.
name|getScheme
argument_list|()
argument_list|,
literal|"No scheme in path %s"
argument_list|,
name|childUri
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|childPath
operator|.
name|isRoot
argument_list|()
argument_list|,
literal|"childPath cannot be the root path: %s"
argument_list|,
name|childPath
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|parentUri
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|childPath
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|"childPath %s must be a child of %s"
argument_list|,
name|childPath
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * For Paths that are handed in directly, we assert they are in consistent    * format with checkPath().  For paths that are supplied embedded in    * FileStatus, we attempt to fill in missing scheme and host, when this    * DirListingMetadata is associated with one.    *    * @return Path suitable for consistent hashtable lookups    * @throws NullPointerException null status argument    * @throws IllegalArgumentException bad status values or failure to    *                                  create a URI.    */
DECL|method|childStatusToPathKey (FileStatus status)
specifier|private
name|Path
name|childStatusToPathKey
parameter_list|(
name|FileStatus
name|status
parameter_list|)
block|{
name|Path
name|p
init|=
name|status
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|p
argument_list|,
literal|"Child status' path cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|p
operator|.
name|isRoot
argument_list|()
argument_list|,
literal|"childPath cannot be the root path: %s"
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|p
operator|.
name|getParent
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
argument_list|,
literal|"childPath %s must be a child of %s"
argument_list|,
name|p
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|p
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|URI
name|parentUri
init|=
name|path
operator|.
name|toUri
argument_list|()
decl_stmt|;
comment|// If FileStatus' path is missing host, but should have one, add it.
if|if
condition|(
name|uri
operator|.
name|getHost
argument_list|()
operator|==
literal|null
operator|&&
name|parentUri
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
name|parentUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|parentUri
operator|.
name|getHost
argument_list|()
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|uri
operator|.
name|getFragment
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"FileStatus path invalid with"
operator|+
literal|" added "
operator|+
name|parentUri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|parentUri
operator|.
name|getHost
argument_list|()
operator|+
literal|" added"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|p
return|;
block|}
DECL|method|checkPathAbsolute (Path p)
specifier|private
name|void
name|checkPathAbsolute
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|p
argument_list|,
literal|"path must be non-null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|p
operator|.
name|isAbsolute
argument_list|()
argument_list|,
literal|"path must be absolute: %s"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

