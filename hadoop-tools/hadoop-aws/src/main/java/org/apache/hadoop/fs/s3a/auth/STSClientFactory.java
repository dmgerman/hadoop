begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|client
operator|.
name|builder
operator|.
name|AwsClientBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|securitytoken
operator|.
name|AWSSecurityTokenService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|securitytoken
operator|.
name|AWSSecurityTokenServiceClientBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|securitytoken
operator|.
name|model
operator|.
name|AssumeRoleRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|securitytoken
operator|.
name|model
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|securitytoken
operator|.
name|model
operator|.
name|GetSessionTokenRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Invoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Retries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|isEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|isNotEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Factory for creating STS Clients.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|STSClientFactory
specifier|public
class|class
name|STSClientFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|STSClientFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Create the builder ready for any final configuration options.    * Picks up connection settings from the Hadoop configuration, including    * proxy secrets.    * The endpoint comes from the configuration options    * {@link org.apache.hadoop.fs.s3a.auth.delegation.DelegationConstants#DELEGATION_TOKEN_ENDPOINT}    * and    * {@link org.apache.hadoop.fs.s3a.auth.delegation.DelegationConstants#DELEGATION_TOKEN_REGION}    * @param conf Configuration to act as source of options.    * @param bucket Optional bucket to use to look up per-bucket proxy secrets    * @param credentials AWS credential chain to use    * @return the builder to call {@code build()}    * @throws IOException problem reading proxy secrets    */
DECL|method|builder ( final Configuration conf, final String bucket, final AWSCredentialsProvider credentials)
specifier|public
specifier|static
name|AWSSecurityTokenServiceClientBuilder
name|builder
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|bucket
parameter_list|,
specifier|final
name|AWSCredentialsProvider
name|credentials
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ClientConfiguration
name|awsConf
init|=
name|S3AUtils
operator|.
name|createAwsConf
argument_list|(
name|conf
argument_list|,
name|bucket
argument_list|,
name|Constants
operator|.
name|AWS_SERVICE_IDENTIFIER_STS
argument_list|)
decl_stmt|;
name|String
name|endpoint
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|DELEGATION_TOKEN_ENDPOINT
argument_list|,
name|DEFAULT_DELEGATION_TOKEN_ENDPOINT
argument_list|)
decl_stmt|;
name|String
name|region
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|DELEGATION_TOKEN_REGION
argument_list|,
name|DEFAULT_DELEGATION_TOKEN_REGION
argument_list|)
decl_stmt|;
return|return
name|builder
argument_list|(
name|credentials
argument_list|,
name|awsConf
argument_list|,
name|endpoint
argument_list|,
name|region
argument_list|)
return|;
block|}
comment|/**    * Create the builder ready for any final configuration options.    * Picks up connection settings from the Hadoop configuration, including    * proxy secrets.    * @param conf Configuration to act as source of options.    * @param bucket Optional bucket to use to look up per-bucket proxy secrets    * @param credentials AWS credential chain to use    * @param stsEndpoint optional endpoint "https://sns.us-west-1.amazonaws.com"    * @param stsRegion AWS recommend setting the endpoint instead.    * @return the builder to call {@code build()}    * @throws IOException problem reading proxy secrets    */
DECL|method|builder ( final Configuration conf, final String bucket, final AWSCredentialsProvider credentials, final String stsEndpoint, final String stsRegion)
specifier|public
specifier|static
name|AWSSecurityTokenServiceClientBuilder
name|builder
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|bucket
parameter_list|,
specifier|final
name|AWSCredentialsProvider
name|credentials
parameter_list|,
specifier|final
name|String
name|stsEndpoint
parameter_list|,
specifier|final
name|String
name|stsRegion
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ClientConfiguration
name|awsConf
init|=
name|S3AUtils
operator|.
name|createAwsConf
argument_list|(
name|conf
argument_list|,
name|bucket
argument_list|,
name|Constants
operator|.
name|AWS_SERVICE_IDENTIFIER_STS
argument_list|)
decl_stmt|;
return|return
name|builder
argument_list|(
name|credentials
argument_list|,
name|awsConf
argument_list|,
name|stsEndpoint
argument_list|,
name|stsRegion
argument_list|)
return|;
block|}
comment|/**    * Create the builder ready for any final configuration options.    * Picks up connection settings from the Hadoop configuration, including    * proxy secrets.    * @param awsConf AWS configuration.    * @param credentials AWS credential chain to use    * @param stsEndpoint optional endpoint "https://sns.us-west-1.amazonaws.com"    * @param stsRegion the region, e.g "us-west-1". Must be set if endpoint is.    * @return the builder to call {@code build()}    */
DECL|method|builder ( final AWSCredentialsProvider credentials, final ClientConfiguration awsConf, final String stsEndpoint, final String stsRegion)
specifier|public
specifier|static
name|AWSSecurityTokenServiceClientBuilder
name|builder
parameter_list|(
specifier|final
name|AWSCredentialsProvider
name|credentials
parameter_list|,
specifier|final
name|ClientConfiguration
name|awsConf
parameter_list|,
specifier|final
name|String
name|stsEndpoint
parameter_list|,
specifier|final
name|String
name|stsRegion
parameter_list|)
block|{
specifier|final
name|AWSSecurityTokenServiceClientBuilder
name|builder
init|=
name|AWSSecurityTokenServiceClientBuilder
operator|.
name|standard
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|credentials
operator|!=
literal|null
argument_list|,
literal|"No credentials"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withClientConfiguration
argument_list|(
name|awsConf
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|boolean
name|destIsStandardEndpoint
init|=
name|STS_STANDARD
operator|.
name|equals
argument_list|(
name|stsEndpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|stsEndpoint
argument_list|)
operator|&&
operator|!
name|destIsStandardEndpoint
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|isNotEmpty
argument_list|(
name|stsRegion
argument_list|)
argument_list|,
literal|"STS endpoint is set to %s but no signing region was provided"
argument_list|,
name|stsEndpoint
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"STS Endpoint={}; region='{}'"
argument_list|,
name|stsEndpoint
argument_list|,
name|stsRegion
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withEndpointConfiguration
argument_list|(
operator|new
name|AwsClientBuilder
operator|.
name|EndpointConfiguration
argument_list|(
name|stsEndpoint
argument_list|,
name|stsRegion
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|isEmpty
argument_list|(
name|stsRegion
argument_list|)
argument_list|,
literal|"STS signing region set set to %s but no STS endpoint specified"
argument_list|,
name|stsRegion
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|/**    * Create an STS Client instance.    * @param tokenService STS instance    * @param invoker invoker to use    * @return an STS client bonded to that interface.    * @throws IOException on any failure    */
DECL|method|createClientConnection ( final AWSSecurityTokenService tokenService, final Invoker invoker)
specifier|public
specifier|static
name|STSClient
name|createClientConnection
parameter_list|(
specifier|final
name|AWSSecurityTokenService
name|tokenService
parameter_list|,
specifier|final
name|Invoker
name|invoker
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|STSClient
argument_list|(
name|tokenService
argument_list|,
name|invoker
argument_list|)
return|;
block|}
comment|/**    * STS client connection with retries.    */
DECL|class|STSClient
specifier|public
specifier|static
specifier|final
class|class
name|STSClient
implements|implements
name|Closeable
block|{
DECL|field|tokenService
specifier|private
specifier|final
name|AWSSecurityTokenService
name|tokenService
decl_stmt|;
DECL|field|invoker
specifier|private
specifier|final
name|Invoker
name|invoker
decl_stmt|;
DECL|method|STSClient (final AWSSecurityTokenService tokenService, final Invoker invoker)
specifier|private
name|STSClient
parameter_list|(
specifier|final
name|AWSSecurityTokenService
name|tokenService
parameter_list|,
specifier|final
name|Invoker
name|invoker
parameter_list|)
block|{
name|this
operator|.
name|tokenService
operator|=
name|tokenService
expr_stmt|;
name|this
operator|.
name|invoker
operator|=
name|invoker
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|tokenService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ignored
parameter_list|)
block|{
comment|// ignore this, as it is what the STS client currently
comment|// does.
block|}
block|}
comment|/**      * Request a set of session credentials.      *      * @param duration duration of the credentials      * @param timeUnit time unit of duration      * @return the role result      * @throws IOException on a failure of the request      */
annotation|@
name|Retries
operator|.
name|RetryTranslated
DECL|method|requestSessionCredentials ( final long duration, final TimeUnit timeUnit)
specifier|public
name|Credentials
name|requestSessionCredentials
parameter_list|(
specifier|final
name|long
name|duration
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|durationSeconds
init|=
operator|(
name|int
operator|)
name|timeUnit
operator|.
name|toSeconds
argument_list|(
name|duration
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Requesting session token of duration {}"
argument_list|,
name|duration
argument_list|)
expr_stmt|;
specifier|final
name|GetSessionTokenRequest
name|request
init|=
operator|new
name|GetSessionTokenRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setDurationSeconds
argument_list|(
name|durationSeconds
argument_list|)
expr_stmt|;
return|return
name|invoker
operator|.
name|retry
argument_list|(
literal|"request session credentials"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
parameter_list|()
lambda|->
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Requesting Amazon STS Session credentials"
argument_list|)
expr_stmt|;
return|return
name|tokenService
operator|.
name|getSessionToken
argument_list|(
name|request
argument_list|)
operator|.
name|getCredentials
argument_list|()
return|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Request a set of role credentials.      *      * @param roleARN ARN to request      * @param sessionName name of the session      * @param policy optional policy; "" is treated as "none"      * @param duration duration of the credentials      * @param timeUnit time unit of duration      * @return the role result      * @throws IOException on a failure of the request      */
annotation|@
name|Retries
operator|.
name|RetryTranslated
DECL|method|requestRole ( final String roleARN, final String sessionName, final String policy, final long duration, final TimeUnit timeUnit)
specifier|public
name|Credentials
name|requestRole
parameter_list|(
specifier|final
name|String
name|roleARN
parameter_list|,
specifier|final
name|String
name|sessionName
parameter_list|,
specifier|final
name|String
name|policy
parameter_list|,
specifier|final
name|long
name|duration
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Requesting role {} with duration {}; policy = {}"
argument_list|,
name|roleARN
argument_list|,
name|duration
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|AssumeRoleRequest
name|request
init|=
operator|new
name|AssumeRoleRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setDurationSeconds
argument_list|(
operator|(
name|int
operator|)
name|timeUnit
operator|.
name|toSeconds
argument_list|(
name|duration
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRoleArn
argument_list|(
name|roleARN
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRoleSessionName
argument_list|(
name|sessionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|policy
argument_list|)
condition|)
block|{
name|request
operator|.
name|setPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
return|return
name|invoker
operator|.
name|retry
argument_list|(
literal|"request role credentials"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
parameter_list|()
lambda|->
name|tokenService
operator|.
name|assumeRole
argument_list|(
name|request
argument_list|)
operator|.
name|getCredentials
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

