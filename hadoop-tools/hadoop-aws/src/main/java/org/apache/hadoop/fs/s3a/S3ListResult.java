begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ListObjectsV2Result
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3ObjectSummary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * API version-independent container for S3 List responses.  */
end_comment

begin_class
DECL|class|S3ListResult
specifier|public
class|class
name|S3ListResult
block|{
DECL|field|v1Result
specifier|private
name|ObjectListing
name|v1Result
decl_stmt|;
DECL|field|v2Result
specifier|private
name|ListObjectsV2Result
name|v2Result
decl_stmt|;
DECL|method|S3ListResult (ObjectListing v1, ListObjectsV2Result v2)
specifier|protected
name|S3ListResult
parameter_list|(
name|ObjectListing
name|v1
parameter_list|,
name|ListObjectsV2Result
name|v2
parameter_list|)
block|{
name|v1Result
operator|=
name|v1
expr_stmt|;
name|v2Result
operator|=
name|v2
expr_stmt|;
block|}
comment|/**    * Restricted constructors to ensure v1 or v2, not both.    * @param result v1 result    * @return new list result container    */
DECL|method|v1 (ObjectListing result)
specifier|public
specifier|static
name|S3ListResult
name|v1
parameter_list|(
name|ObjectListing
name|result
parameter_list|)
block|{
return|return
operator|new
name|S3ListResult
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Restricted constructors to ensure v1 or v2, not both.    * @param result v2 result    * @return new list result container    */
DECL|method|v2 (ListObjectsV2Result result)
specifier|public
specifier|static
name|S3ListResult
name|v2
parameter_list|(
name|ListObjectsV2Result
name|result
parameter_list|)
block|{
return|return
operator|new
name|S3ListResult
argument_list|(
literal|null
argument_list|,
name|result
argument_list|)
return|;
block|}
comment|/**    * Is this a v1 API result or v2?    * @return true if v1, false if v2    */
DECL|method|isV1 ()
specifier|public
name|boolean
name|isV1
parameter_list|()
block|{
return|return
name|v1Result
operator|!=
literal|null
return|;
block|}
DECL|method|getV1 ()
specifier|public
name|ObjectListing
name|getV1
parameter_list|()
block|{
return|return
name|v1Result
return|;
block|}
DECL|method|getV2 ()
specifier|public
name|ListObjectsV2Result
name|getV2
parameter_list|()
block|{
return|return
name|v2Result
return|;
block|}
DECL|method|getObjectSummaries ()
specifier|public
name|List
argument_list|<
name|S3ObjectSummary
argument_list|>
name|getObjectSummaries
parameter_list|()
block|{
if|if
condition|(
name|isV1
argument_list|()
condition|)
block|{
return|return
name|v1Result
operator|.
name|getObjectSummaries
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|v2Result
operator|.
name|getObjectSummaries
argument_list|()
return|;
block|}
block|}
DECL|method|isTruncated ()
specifier|public
name|boolean
name|isTruncated
parameter_list|()
block|{
if|if
condition|(
name|isV1
argument_list|()
condition|)
block|{
return|return
name|v1Result
operator|.
name|isTruncated
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|v2Result
operator|.
name|isTruncated
argument_list|()
return|;
block|}
block|}
DECL|method|getCommonPrefixes ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCommonPrefixes
parameter_list|()
block|{
if|if
condition|(
name|isV1
argument_list|()
condition|)
block|{
return|return
name|v1Result
operator|.
name|getCommonPrefixes
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|v2Result
operator|.
name|getCommonPrefixes
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

