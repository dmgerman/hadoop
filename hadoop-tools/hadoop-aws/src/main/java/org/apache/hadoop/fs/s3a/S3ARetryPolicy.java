begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NoRouteToHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ProvisionedThroughputExceededException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|NoAuthWithAWSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ConnectTimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The S3A request retry policy.  *  * This uses the retry options in the configuration file to determine retry  * count and delays for "normal" retries and separately, for throttling;  * the latter is best handled for longer with an exponential back-off.  *  *<ol>  *<li> Those exceptions considered unrecoverable (networking) are  *    failed fast.</li>  *<li>All non-IOEs are failed immediately. Assumed: bugs in code,  *    unrecoverable errors, etc</li>  *</ol>  *  * For non-idempotent operations, only failures due to throttling or  * from failures which are known to only arise prior to talking to S3  * are retried.  *  * The retry policy is all built around that of the normal IO exceptions,  * particularly those extracted from  * {@link S3AUtils#translateException(String, Path, AmazonClientException)}.  * Because the {@link #shouldRetry(Exception, int, int, boolean)} method  * does this translation if an {@code AmazonClientException} is processed,  * the policy defined for the IOEs also applies to the original exceptions.  *  * Put differently: this retry policy aims to work for handlers of the  * untranslated exceptions, as well as the translated ones.  * @see<a href="http://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html">S3 Error responses</a>  * @see<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/ErrorBestPractices.html">Amazon S3 Error Best Practices</a>  * @see<a href="http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/CommonErrors.html">Dynamo DB Commmon errors</a>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"visibilitymodifier"
argument_list|)
comment|// I want a struct of finals, for real.
DECL|class|S3ARetryPolicy
specifier|public
class|class
name|S3ARetryPolicy
implements|implements
name|RetryPolicy
block|{
comment|/** Final retry policy we end up with. */
DECL|field|retryPolicy
specifier|private
specifier|final
name|RetryPolicy
name|retryPolicy
decl_stmt|;
comment|// Retry policies for mapping exceptions to
comment|/** Base policy from configuration. */
DECL|field|fixedRetries
specifier|protected
specifier|final
name|RetryPolicy
name|fixedRetries
decl_stmt|;
comment|/** Rejection of all non-idempotent calls except specific failures. */
DECL|field|retryIdempotentCalls
specifier|protected
specifier|final
name|RetryPolicy
name|retryIdempotentCalls
decl_stmt|;
comment|/** Policy for throttle requests, which are considered repeatable, even for    * non-idempotent calls, as the service rejected the call entirely. */
DECL|field|throttlePolicy
specifier|protected
specifier|final
name|RetryPolicy
name|throttlePolicy
decl_stmt|;
comment|/** No retry on network and tangible API issues. */
DECL|field|fail
specifier|protected
specifier|final
name|RetryPolicy
name|fail
init|=
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
decl_stmt|;
comment|/** Client connectivity: fixed retries without care for idempotency. */
DECL|field|connectivityFailure
specifier|protected
specifier|final
name|RetryPolicy
name|connectivityFailure
decl_stmt|;
comment|/**    * Instantiate.    * @param conf configuration to read.    */
DECL|method|S3ARetryPolicy (Configuration conf)
specifier|public
name|S3ARetryPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|conf
operator|!=
literal|null
argument_list|,
literal|"Null configuration"
argument_list|)
expr_stmt|;
comment|// base policy from configuration
name|fixedRetries
operator|=
name|exponentialBackoffRetry
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|RETRY_LIMIT
argument_list|,
name|RETRY_LIMIT_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|RETRY_INTERVAL
argument_list|,
name|RETRY_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// which is wrapped by a rejection of all non-idempotent calls except
comment|// for specific failures.
name|retryIdempotentCalls
operator|=
operator|new
name|FailNonIOEs
argument_list|(
operator|new
name|IdempotencyRetryFilter
argument_list|(
name|fixedRetries
argument_list|)
argument_list|)
expr_stmt|;
comment|// and a separate policy for throttle requests, which are considered
comment|// repeatable, even for non-idempotent calls, as the service
comment|// rejected the call entirely
name|throttlePolicy
operator|=
name|createThrottleRetryPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// client connectivity: fixed retries without care for idempotency
name|connectivityFailure
operator|=
name|fixedRetries
expr_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|policyMap
init|=
name|createExceptionMap
argument_list|()
decl_stmt|;
name|retryPolicy
operator|=
name|retryByException
argument_list|(
name|retryIdempotentCalls
argument_list|,
name|policyMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the throttling policy.    * This will be called from the S3ARetryPolicy constructor, so    * subclasses must assume they are not initialized.    * @param conf configuration to use.    * @return the retry policy for throttling events.    */
DECL|method|createThrottleRetryPolicy (final Configuration conf)
specifier|protected
name|RetryPolicy
name|createThrottleRetryPolicy
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|exponentialBackoffRetry
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|RETRY_THROTTLE_LIMIT
argument_list|,
name|RETRY_THROTTLE_LIMIT_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|RETRY_THROTTLE_INTERVAL
argument_list|,
name|RETRY_THROTTLE_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|/**    * Subclasses can override this like a constructor to change behavior: call    * superclass method, then modify it as needed, and return it.    * @return Map from exception type to RetryPolicy    */
DECL|method|createExceptionMap ()
specifier|protected
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|createExceptionMap
parameter_list|()
block|{
comment|// the policy map maps the exact classname; subclasses do not
comment|// inherit policies.
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|policyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// failfast exceptions which we consider unrecoverable
name|policyMap
operator|.
name|put
argument_list|(
name|UnknownHostException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|NoRouteToHostException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|InterruptedException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
comment|// note this does not pick up subclasses (like socket timeout)
name|policyMap
operator|.
name|put
argument_list|(
name|InterruptedIOException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
comment|// Access denial and auth exceptions are not retried
name|policyMap
operator|.
name|put
argument_list|(
name|AccessDeniedException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|NoAuthWithAWSException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|InvalidRequestException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
comment|// metadata stores should do retries internally when it makes sense
comment|// so there is no point doing another layer of retries after that
name|policyMap
operator|.
name|put
argument_list|(
name|MetadataPersistenceException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
comment|// once the file has changed, trying again is not going to help
name|policyMap
operator|.
name|put
argument_list|(
name|RemoteFileChangedException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
comment|// likely only recovered by changing the policy configuration or s3
comment|// implementation
name|policyMap
operator|.
name|put
argument_list|(
name|NoVersionAttributeException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
comment|// should really be handled by resubmitting to new location;
comment|// that's beyond the scope of this retry policy
name|policyMap
operator|.
name|put
argument_list|(
name|AWSRedirectException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
comment|// throttled requests are can be retried, always
name|policyMap
operator|.
name|put
argument_list|(
name|AWSServiceThrottledException
operator|.
name|class
argument_list|,
name|throttlePolicy
argument_list|)
expr_stmt|;
comment|// connectivity problems are retried without worrying about idempotency
name|policyMap
operator|.
name|put
argument_list|(
name|ConnectTimeoutException
operator|.
name|class
argument_list|,
name|connectivityFailure
argument_list|)
expr_stmt|;
comment|// this can be a sign of an HTTP connection breaking early.
comment|// which can be reacted to by another attempt if the request was idempotent.
comment|// But: could also be a sign of trying to read past the EOF on a GET,
comment|// which isn't going to be recovered from
name|policyMap
operator|.
name|put
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
name|retryIdempotentCalls
argument_list|)
expr_stmt|;
comment|// policy on a 400/bad request still ambiguous.
comment|// Treated as an immediate failure
name|policyMap
operator|.
name|put
argument_list|(
name|AWSBadRequestException
operator|.
name|class
argument_list|,
name|fail
argument_list|)
expr_stmt|;
comment|// Status 500 error code is also treated as a connectivity problem
name|policyMap
operator|.
name|put
argument_list|(
name|AWSStatus500Exception
operator|.
name|class
argument_list|,
name|connectivityFailure
argument_list|)
expr_stmt|;
comment|// server didn't respond.
name|policyMap
operator|.
name|put
argument_list|(
name|AWSNoResponseException
operator|.
name|class
argument_list|,
name|retryIdempotentCalls
argument_list|)
expr_stmt|;
comment|// other operations
name|policyMap
operator|.
name|put
argument_list|(
name|AWSClientIOException
operator|.
name|class
argument_list|,
name|retryIdempotentCalls
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|AWSServiceIOException
operator|.
name|class
argument_list|,
name|retryIdempotentCalls
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|AWSS3IOException
operator|.
name|class
argument_list|,
name|retryIdempotentCalls
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|SocketTimeoutException
operator|.
name|class
argument_list|,
name|retryIdempotentCalls
argument_list|)
expr_stmt|;
comment|// Dynamo DB exceptions
comment|// asking for more than you should get. It's a retry but should be logged
comment|// trigger sleep
name|policyMap
operator|.
name|put
argument_list|(
name|ProvisionedThroughputExceededException
operator|.
name|class
argument_list|,
name|throttlePolicy
argument_list|)
expr_stmt|;
return|return
name|policyMap
return|;
block|}
annotation|@
name|Override
DECL|method|shouldRetry (Exception exception, int retries, int failovers, boolean idempotent)
specifier|public
name|RetryAction
name|shouldRetry
parameter_list|(
name|Exception
name|exception
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|failovers
parameter_list|,
name|boolean
name|idempotent
parameter_list|)
throws|throws
name|Exception
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|exception
operator|!=
literal|null
argument_list|,
literal|"Null exception"
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
name|exception
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|AmazonClientException
condition|)
block|{
comment|// uprate the amazon client exception for the purpose of exception
comment|// processing.
name|ex
operator|=
name|S3AUtils
operator|.
name|translateException
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
operator|(
name|AmazonClientException
operator|)
name|exception
argument_list|)
expr_stmt|;
block|}
return|return
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|ex
argument_list|,
name|retries
argument_list|,
name|failovers
argument_list|,
name|idempotent
argument_list|)
return|;
block|}
comment|/**    * Policy which fails fast any non-idempotent call; hands off    * all idempotent calls to the next retry policy.    */
DECL|class|IdempotencyRetryFilter
specifier|private
specifier|static
specifier|final
class|class
name|IdempotencyRetryFilter
implements|implements
name|RetryPolicy
block|{
DECL|field|next
specifier|private
specifier|final
name|RetryPolicy
name|next
decl_stmt|;
DECL|method|IdempotencyRetryFilter (RetryPolicy next)
name|IdempotencyRetryFilter
parameter_list|(
name|RetryPolicy
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shouldRetry (Exception e, int retries, int failovers, boolean idempotent)
specifier|public
name|RetryAction
name|shouldRetry
parameter_list|(
name|Exception
name|e
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|failovers
parameter_list|,
name|boolean
name|idempotent
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|idempotent
condition|?
name|next
operator|.
name|shouldRetry
argument_list|(
name|e
argument_list|,
name|retries
argument_list|,
name|failovers
argument_list|,
literal|true
argument_list|)
else|:
name|RetryAction
operator|.
name|FAIL
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"IdempotencyRetryFilter{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"next="
argument_list|)
operator|.
name|append
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * All non-IOE exceptions are failed.    */
DECL|class|FailNonIOEs
specifier|private
specifier|static
specifier|final
class|class
name|FailNonIOEs
implements|implements
name|RetryPolicy
block|{
DECL|field|next
specifier|private
specifier|final
name|RetryPolicy
name|next
decl_stmt|;
DECL|method|FailNonIOEs (RetryPolicy next)
specifier|private
name|FailNonIOEs
parameter_list|(
name|RetryPolicy
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shouldRetry (Exception e, int retries, int failovers, boolean isIdempotentOrAtMostOnce)
specifier|public
name|RetryAction
name|shouldRetry
parameter_list|(
name|Exception
name|e
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|failovers
parameter_list|,
name|boolean
name|isIdempotentOrAtMostOnce
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|e
operator|instanceof
name|IOException
condition|?
name|next
operator|.
name|shouldRetry
argument_list|(
name|e
argument_list|,
name|retries
argument_list|,
name|failovers
argument_list|,
literal|true
argument_list|)
else|:
name|RetryAction
operator|.
name|FAIL
return|;
block|}
block|}
block|}
end_class

end_unit

