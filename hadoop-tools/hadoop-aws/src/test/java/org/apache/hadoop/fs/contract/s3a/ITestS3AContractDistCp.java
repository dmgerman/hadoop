begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
operator|.
name|SCALE_TEST_TIMEOUT_MILLIS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|maybeEnableS3Guard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|FailureInjectionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|contract
operator|.
name|AbstractContractDistCpTest
import|;
end_import

begin_comment
comment|/**  * Contract test suite covering S3A integration with DistCp.  * Uses the block output stream, buffered to disk. This is the  * recommended output mechanism for DistCP due to its scalability.  */
end_comment

begin_class
DECL|class|ITestS3AContractDistCp
specifier|public
class|class
name|ITestS3AContractDistCp
extends|extends
name|AbstractContractDistCpTest
block|{
DECL|field|MULTIPART_SETTING
specifier|private
specifier|static
specifier|final
name|long
name|MULTIPART_SETTING
init|=
name|MULTIPART_MIN_SIZE
decl_stmt|;
annotation|@
name|Override
DECL|method|getTestTimeoutMillis ()
specifier|protected
name|int
name|getTestTimeoutMillis
parameter_list|()
block|{
return|return
name|SCALE_TEST_TIMEOUT_MILLIS
return|;
block|}
comment|/**    * Create a configuration, possibly patching in S3Guard options.    * @return a configuration    */
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|newConf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|newConf
operator|.
name|setLong
argument_list|(
name|MULTIPART_SIZE
argument_list|,
name|MULTIPART_SETTING
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|FAST_UPLOAD_BUFFER
argument_list|,
name|FAST_UPLOAD_BUFFER_DISK
argument_list|)
expr_stmt|;
comment|// patch in S3Guard options
name|maybeEnableS3Guard
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
return|return
name|newConf
return|;
block|}
annotation|@
name|Override
DECL|method|createContract (Configuration conf)
specifier|protected
name|S3AContract
name|createContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|S3AContract
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Always inject the delay path in, so if the destination is inconsistent,    * and uses this key, inconsistency triggered.    * @param filepath path string in    * @return path on the remote FS for distcp    * @throws IOException IO failure    */
annotation|@
name|Override
DECL|method|path (final String filepath)
specifier|protected
name|Path
name|path
parameter_list|(
specifier|final
name|String
name|filepath
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|super
operator|.
name|path
argument_list|(
name|filepath
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|FailureInjectionPolicy
operator|.
name|DEFAULT_DELAY_KEY_SUBSTRING
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|testDirectWrite ()
specifier|public
name|void
name|testDirectWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|resetStorageStatistics
argument_list|()
expr_stmt|;
name|super
operator|.
name|testDirectWrite
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected no renames for a direct write distcp"
argument_list|,
literal|0L
argument_list|,
name|getRenameOperationCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testNonDirectWrite ()
specifier|public
name|void
name|testNonDirectWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|resetStorageStatistics
argument_list|()
expr_stmt|;
try|try
block|{
name|super
operator|.
name|testNonDirectWrite
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// We may get this exception when data is written to a DELAY_LISTING_ME
comment|// directory causing verification of the distcp success to fail if
comment|// S3Guard is not enabled
block|}
name|assertEquals
argument_list|(
literal|"Expected 2 renames for a non-direct write distcp"
argument_list|,
literal|2L
argument_list|,
name|getRenameOperationCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|resetStorageStatistics ()
specifier|private
name|void
name|resetStorageStatistics
parameter_list|()
block|{
name|getFileSystem
argument_list|()
operator|.
name|getStorageStatistics
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|getRenameOperationCount ()
specifier|private
name|long
name|getRenameOperationCount
parameter_list|()
block|{
return|return
name|getFileSystem
argument_list|()
operator|.
name|getStorageStatistics
argument_list|()
operator|.
name|getLong
argument_list|(
name|StorageStatistics
operator|.
name|CommonStatisticNames
operator|.
name|OP_RENAME
argument_list|)
return|;
block|}
block|}
end_class

end_unit

