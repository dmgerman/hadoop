begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.integration
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|FixMethodOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|MethodSorters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|AbstractYarnClusterITest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|LoggingTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
operator|.
name|SuccessData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|magic
operator|.
name|MagicS3GuardCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|DirectoryStagingCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|PartitionedStagingCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DurationInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|lsR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|applyLocatedFiles
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|FS_S3A_COMMITTER_STAGING_TMP_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|MAGIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|_SUCCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|InternalCommitterConstants
operator|.
name|FS_S3A_COMMITTER_STAGING_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|Paths
operator|.
name|getMultipartUploadCommitsDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingCommitterConstants
operator|.
name|STAGING_UPLOADS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test an MR Job with all the different committers.  *<p>  * This is a fairly complex parameterization: it is designed to  * avoid the overhead of starting a Yarn cluster for  * individual committer types, so speed up operations.  *<p>  * It also implicitly guarantees that there is never more than one of these  * MR jobs active at a time, so avoids overloading the test machine with too  * many processes.  * How the binding works:  *<ol>  *<li>  *     Each parameterized suite is configured through its own  *     {@link CommitterTestBinding} subclass.  *</li>  *<li>  *     JUnit runs these test suites one parameterized binding at a time.  *</li>  *<li>  *     The test suites are declared to be executed in ascending order, so  *     that for a specific binding, the order is {@link #test_000()},  *     {@link #test_100()} {@link #test_200_execute()} and finally  *     {@link #test_500()}.  *</li>  *<li>  *     {@link #test_000()} calls {@link CommitterTestBinding#validate()} to  *     as to validate the state of the committer. This is primarily to  *     verify that the binding setup mechanism is working.  *</li>  *<li>  *     {@link #test_100()} is relayed to  *     {@link CommitterTestBinding#test_100()},  *     for any preflight tests.  *</li>  *<li>  *     The {@link #test_200_execute()} test runs the MR job for that  *     particular binding with standard reporting and verification of the  *     outcome.  *</li>  *<li>  *     {@link #test_500()} test is relayed to  *     {@link CommitterTestBinding#test_500()}, for any post-MR-job tests.  *</ol>  *  * A new S3A FileSystem instance is created for each test_ method, so the  * pre-execute and post-execute validators cannot inspect the state of the  * FS as part of their tests.  * However, as the MR workers and AM all run in their own processes, there's  * generally no useful information about the job in the local S3AFileSystem  * instance.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|FixMethodOrder
argument_list|(
name|MethodSorters
operator|.
name|NAME_ASCENDING
argument_list|)
DECL|class|ITestS3ACommitterMRJob
specifier|public
class|class
name|ITestS3ACommitterMRJob
extends|extends
name|AbstractYarnClusterITest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3ACommitterMRJob
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Test array for parameterized test runs.    *    * @return the committer binding for this run.    */
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
DECL|method|params ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
operator|new
name|DirectoryCommitterTestBinding
argument_list|()
block|}
block|,
block|{
operator|new
name|PartitionCommitterTestBinding
argument_list|()
block|}
block|,
block|{
operator|new
name|MagicCommitterTestBinding
argument_list|()
block|}
block|,     }
argument_list|)
return|;
block|}
comment|/**    * The committer binding for this instance.    */
DECL|field|committerTestBinding
specifier|private
specifier|final
name|CommitterTestBinding
name|committerTestBinding
decl_stmt|;
comment|/**    * Parameterized constructor.    * @param committerTestBinding binding for the test.    */
DECL|method|ITestS3ACommitterMRJob ( final CommitterTestBinding committerTestBinding)
specifier|public
name|ITestS3ACommitterMRJob
parameter_list|(
specifier|final
name|CommitterTestBinding
name|committerTestBinding
parameter_list|)
block|{
name|this
operator|.
name|committerTestBinding
operator|=
name|committerTestBinding
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
comment|// configure the test binding for this specific test case.
name|committerTestBinding
operator|.
name|setup
argument_list|(
name|getClusterBinding
argument_list|()
argument_list|,
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Rule
DECL|field|localFilesDir
specifier|public
specifier|final
name|TemporaryFolder
name|localFilesDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|committerName ()
specifier|protected
name|String
name|committerName
parameter_list|()
block|{
return|return
name|committerTestBinding
operator|.
name|getCommitterName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|useInconsistentClient ()
specifier|public
name|boolean
name|useInconsistentClient
parameter_list|()
block|{
return|return
name|committerTestBinding
operator|.
name|useInconsistentClient
argument_list|()
return|;
block|}
comment|/**    * Verify that the committer binding is happy.    */
annotation|@
name|Test
DECL|method|test_000 ()
specifier|public
name|void
name|test_000
parameter_list|()
throws|throws
name|Throwable
block|{
name|committerTestBinding
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_100 ()
specifier|public
name|void
name|test_100
parameter_list|()
throws|throws
name|Throwable
block|{
name|committerTestBinding
operator|.
name|test_100
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_200_execute ()
specifier|public
name|void
name|test_200_execute
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"Run an MR with committer %s"
argument_list|,
name|committerName
argument_list|()
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// final dest is in S3A
comment|// we can't use the method name as the template places square braces into
comment|// that and URI creation fails.
name|Path
name|outputPath
init|=
name|path
argument_list|(
literal|"ITestS3ACommitterMRJob-execute-"
operator|+
name|committerName
argument_list|()
argument_list|)
decl_stmt|;
comment|// create and delete to force in a tombstone marker -see HADOOP-16207
name|fs
operator|.
name|mkdirs
argument_list|(
name|outputPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|commitUUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|suffix
init|=
name|isUniqueFilenames
argument_list|()
condition|?
operator|(
literal|"-"
operator|+
name|commitUUID
operator|)
else|:
literal|""
decl_stmt|;
name|int
name|numFiles
init|=
name|getTestFileCount
argument_list|()
decl_stmt|;
comment|// create all the input files on the local FS.
name|List
argument_list|<
name|String
argument_list|>
name|expectedFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numFiles
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedKeys
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|+=
literal|1
control|)
block|{
name|File
name|file
init|=
name|localFilesDir
operator|.
name|newFile
argument_list|(
name|i
operator|+
literal|".text"
argument_list|)
decl_stmt|;
try|try
init|(
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
literal|"file "
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|filename
init|=
name|String
operator|.
name|format
argument_list|(
literal|"part-m-%05d%s"
argument_list|,
name|i
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|expectedFiles
operator|.
name|add
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|expectedKeys
operator|.
name|add
argument_list|(
literal|"/"
operator|+
name|fs
operator|.
name|pathToKey
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|expectedFiles
argument_list|)
expr_stmt|;
name|Job
name|mrJob
init|=
name|createJob
argument_list|(
name|newJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|(
name|JobConf
operator|)
name|mrJob
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|mrJob
operator|.
name|setOutputFormatClass
argument_list|(
name|LoggingTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|mrJob
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|File
name|mockResultsFile
init|=
name|localFilesDir
operator|.
name|newFile
argument_list|(
literal|"committer.bin"
argument_list|)
decl_stmt|;
name|mockResultsFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|String
name|committerPath
init|=
literal|"file:"
operator|+
name|mockResultsFile
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
literal|"mock-results-file"
argument_list|,
name|committerPath
argument_list|)
expr_stmt|;
comment|// setting up staging options is harmless for other committers
name|jobConf
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_UUID
argument_list|,
name|commitUUID
argument_list|)
expr_stmt|;
name|mrJob
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|mrJob
argument_list|,
operator|new
name|Path
argument_list|(
name|localFilesDir
operator|.
name|getRoot
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mrJob
operator|.
name|setMapperClass
argument_list|(
name|MapClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|mrJob
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// an attempt to set up log4j properly, which clearly doesn't work
name|URL
name|log4j
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"log4j.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|log4j
operator|!=
literal|null
operator|&&
literal|"file"
operator|.
name|equals
argument_list|(
name|log4j
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|Path
name|log4jPath
init|=
operator|new
name|Path
argument_list|(
name|log4j
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using log4j path {}"
argument_list|,
name|log4jPath
argument_list|)
expr_stmt|;
name|mrJob
operator|.
name|addFileToClassPath
argument_list|(
name|log4jPath
argument_list|)
expr_stmt|;
name|String
name|sysprops
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-Xmx128m -Dlog4j.configuration=%s"
argument_list|,
name|log4j
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_JAVA_OPTS
argument_list|,
name|sysprops
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_JAVA_OPTS
argument_list|,
name|sysprops
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
literal|"yarn.app.mapreduce.am.command-opts"
argument_list|,
name|sysprops
argument_list|)
expr_stmt|;
block|}
name|applyCustomConfigOptions
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
comment|// fail fast if anything goes wrong
name|mrJob
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|DurationInfo
name|ignore
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Job Submit"
argument_list|)
init|)
block|{
name|mrJob
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
name|String
name|jobID
init|=
name|mrJob
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|logLocation
init|=
literal|"logs under "
operator|+
name|getYarn
argument_list|()
operator|.
name|getTestWorkDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
try|try
init|(
name|DurationInfo
name|ignore
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Job Execution"
argument_list|)
init|)
block|{
name|mrJob
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|JobStatus
name|status
init|=
name|mrJob
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mrJob
operator|.
name|isSuccessful
argument_list|()
condition|)
block|{
comment|// failure of job.
comment|// be as meaningful as possible.
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Job %s failed in state %s with cause %s.\n"
operator|+
literal|"Consult %s"
argument_list|,
name|jobID
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|,
name|status
operator|.
name|getFailureInfo
argument_list|()
argument_list|,
name|logLocation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|waitForConsistency
argument_list|()
expr_stmt|;
name|Path
name|successPath
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|_SUCCESS
argument_list|)
decl_stmt|;
name|SuccessData
name|successData
init|=
name|validateSuccessFile
argument_list|(
name|outputPath
argument_list|,
name|committerName
argument_list|()
argument_list|,
name|fs
argument_list|,
literal|"MR job "
operator|+
name|jobID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|commitData
init|=
name|successData
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|results
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|outputPath
argument_list|,
name|S3AUtils
operator|.
name|HIDDEN_FILE_FILTER
argument_list|)
decl_stmt|;
name|int
name|fileCount
init|=
name|results
operator|.
name|length
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|fileCount
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"No files from job %s in output directory %s; see %s"
argument_list|,
name|jobID
argument_list|,
name|outputPath
argument_list|,
name|logLocation
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualFiles
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|results
argument_list|)
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|actualFiles
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Files found in %s"
argument_list|,
name|outputPath
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedFiles
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|successData
operator|.
name|getFilenames
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Success files listed in %s:%s"
argument_list|,
name|successPath
argument_list|,
name|commitData
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
operator|.
name|containsExactlyInAnyOrderElementsOf
argument_list|(
name|expectedKeys
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"temporary dir should only be from"
operator|+
literal|" classic file committers"
argument_list|,
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|CommitConstants
operator|.
name|TEMPORARY
argument_list|)
argument_list|)
expr_stmt|;
name|customPostExecutionValidation
argument_list|(
name|outputPath
argument_list|,
name|successData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applyCustomConfigOptions (final JobConf jobConf)
specifier|protected
name|void
name|applyCustomConfigOptions
parameter_list|(
specifier|final
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|committerTestBinding
operator|.
name|applyCustomConfigOptions
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|customPostExecutionValidation (final Path destPath, final SuccessData successData)
specifier|protected
name|void
name|customPostExecutionValidation
parameter_list|(
specifier|final
name|Path
name|destPath
parameter_list|,
specifier|final
name|SuccessData
name|successData
parameter_list|)
throws|throws
name|Exception
block|{
name|committerTestBinding
operator|.
name|validateResult
argument_list|(
name|destPath
argument_list|,
name|successData
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is the extra test which committer test bindings can add.    */
annotation|@
name|Test
DECL|method|test_500 ()
specifier|public
name|void
name|test_500
parameter_list|()
throws|throws
name|Throwable
block|{
name|committerTestBinding
operator|.
name|test_500
argument_list|()
expr_stmt|;
block|}
comment|/**    *  Test Mapper.    *  This is executed in separate process, and must not make any assumptions    *  about external state.    */
DECL|class|MapClass
specifier|public
specifier|static
class|class
name|MapClass
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|operations
specifier|private
name|int
name|operations
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
init|=
literal|""
decl_stmt|;
DECL|field|l
specifier|private
name|LongWritable
name|l
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
DECL|field|t
specifier|private
name|Text
name|t
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|setup (Context context)
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// force in Log4J logging
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|BasicConfigurator
operator|.
name|configure
argument_list|()
expr_stmt|;
comment|// and pick up scale test flag as passed down
name|boolean
name|scaleMap
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|KEY_SCALE_TESTS_ENABLED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|operations
operator|=
name|scaleMap
condition|?
name|SCALE_TEST_KEYS
else|:
name|BASE_TEST_KEYS
expr_stmt|;
name|id
operator|=
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|map (LongWritable key, Text value, Context context)
specifier|protected
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operations
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|t
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:%05d"
argument_list|,
name|id
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|l
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A binding class for committer tests.    * Subclasses of this will be instantiated and drive the parameterized    * test suite.    *    * These classes will be instantiated in a static array of the suite, and    * not bound to a cluster binding or filesystem.    *    * The per-method test {@link #setup()} method will call    * {@link #setup(ClusterBinding, S3AFileSystem)}, to link the instance    * to the specific test cluster<i>and test filesystem</i> in use    * in that test.    */
DECL|class|CommitterTestBinding
specifier|private
specifier|abstract
specifier|static
class|class
name|CommitterTestBinding
block|{
comment|/**      * Name.      */
DECL|field|committerName
specifier|private
specifier|final
name|String
name|committerName
decl_stmt|;
comment|/**      * Cluster binding.      */
DECL|field|binding
specifier|private
name|ClusterBinding
name|binding
decl_stmt|;
comment|/**      * The S3A filesystem.      */
DECL|field|remoteFS
specifier|private
name|S3AFileSystem
name|remoteFS
decl_stmt|;
comment|/**      * Constructor.      * @param committerName name of the committer for messages.      */
DECL|method|CommitterTestBinding (final String committerName)
specifier|protected
name|CommitterTestBinding
parameter_list|(
specifier|final
name|String
name|committerName
parameter_list|)
block|{
name|this
operator|.
name|committerName
operator|=
name|committerName
expr_stmt|;
block|}
comment|/**      * Set up the test binding: this is called during test setup.      * @param cluster the active test cluster.      * @param fs the S3A Filesystem used as a destination.      */
DECL|method|setup ( ClusterBinding cluster, S3AFileSystem fs)
specifier|private
name|void
name|setup
parameter_list|(
name|ClusterBinding
name|cluster
parameter_list|,
name|S3AFileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|binding
operator|=
name|cluster
expr_stmt|;
name|this
operator|.
name|remoteFS
operator|=
name|fs
expr_stmt|;
block|}
DECL|method|getCommitterName ()
specifier|protected
name|String
name|getCommitterName
parameter_list|()
block|{
return|return
name|committerName
return|;
block|}
DECL|method|getBinding ()
specifier|protected
name|ClusterBinding
name|getBinding
parameter_list|()
block|{
return|return
name|binding
return|;
block|}
DECL|method|getRemoteFS ()
specifier|protected
name|S3AFileSystem
name|getRemoteFS
parameter_list|()
block|{
return|return
name|remoteFS
return|;
block|}
DECL|method|getClusterFS ()
specifier|protected
name|FileSystem
name|getClusterFS
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getBinding
argument_list|()
operator|.
name|getClusterFS
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|committerName
return|;
block|}
comment|/**      * Override point to let implementations tune the MR Job conf.      * @param jobConf configuration      */
DECL|method|applyCustomConfigOptions (JobConf jobConf)
specifier|protected
name|void
name|applyCustomConfigOptions
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{     }
comment|/**      * Should the inconsistent S3A client be used?      * @return true for inconsistent listing      */
DECL|method|useInconsistentClient ()
specifier|public
specifier|abstract
name|boolean
name|useInconsistentClient
parameter_list|()
function_decl|;
comment|/**      * Override point for any committer specific validation operations;      * called after the base assertions have all passed.      * @param destPath destination of work      * @param successData loaded success data      * @throws Exception failure      */
DECL|method|validateResult (Path destPath, SuccessData successData)
specifier|protected
name|void
name|validateResult
parameter_list|(
name|Path
name|destPath
parameter_list|,
name|SuccessData
name|successData
parameter_list|)
throws|throws
name|Exception
block|{      }
comment|/**      * A test to run before the main {@link #test_200_execute()} test is      * invoked.      * @throws Throwable failure.      */
DECL|method|test_100 ()
name|void
name|test_100
parameter_list|()
throws|throws
name|Throwable
block|{      }
comment|/**      * A test to run after the main {@link #test_200_execute()} test is      * invoked.      * @throws Throwable failure.      */
DECL|method|test_500 ()
name|void
name|test_500
parameter_list|()
throws|throws
name|Throwable
block|{      }
comment|/**      * Validate the state of the binding.      * This is called in {@link #test_000()} so will      * fail independently of the other tests.      * @throws Throwable failure.      */
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertNotNull
argument_list|(
literal|"Not bound to a cluster"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No cluster filesystem"
argument_list|,
name|getClusterFS
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No yarn cluster"
argument_list|,
name|binding
operator|.
name|getYarn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The directory staging committer.    */
DECL|class|DirectoryCommitterTestBinding
specifier|private
specifier|static
specifier|final
class|class
name|DirectoryCommitterTestBinding
extends|extends
name|CommitterTestBinding
block|{
DECL|method|DirectoryCommitterTestBinding ()
specifier|private
name|DirectoryCommitterTestBinding
parameter_list|()
block|{
name|super
argument_list|(
name|DirectoryStagingCommitter
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return true for inconsistent listing      */
DECL|method|useInconsistentClient ()
specifier|public
name|boolean
name|useInconsistentClient
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Verify that staging commit dirs are made absolute under the user's      * home directory, so, in a secure cluster, private.      */
annotation|@
name|Override
DECL|method|test_100 ()
name|void
name|test_100
parameter_list|()
throws|throws
name|Throwable
block|{
name|FileSystem
name|fs
init|=
name|getClusterFS
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|pri
init|=
literal|"private"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_TMP_PATH
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
name|getMultipartUploadCommitsDirectory
argument_list|(
name|conf
argument_list|,
literal|"uuid"
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|dir
operator|.
name|isAbsolute
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"non-absolute path"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|stagingTempDir
init|=
name|dir
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|String
name|self
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|stagingTempDir
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Staging committer temp path in cluster"
argument_list|)
operator|.
name|contains
argument_list|(
name|pri
operator|+
literal|"/"
operator|+
name|self
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"uuid/"
operator|+
name|STAGING_UPLOADS
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The partition committer test binding.    */
DECL|class|PartitionCommitterTestBinding
specifier|private
specifier|static
specifier|final
class|class
name|PartitionCommitterTestBinding
extends|extends
name|CommitterTestBinding
block|{
DECL|method|PartitionCommitterTestBinding ()
specifier|private
name|PartitionCommitterTestBinding
parameter_list|()
block|{
name|super
argument_list|(
name|PartitionedStagingCommitter
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return true for inconsistent listing      */
DECL|method|useInconsistentClient ()
specifier|public
name|boolean
name|useInconsistentClient
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * The magic committer test binding.    * This includes extra result validation.    */
DECL|class|MagicCommitterTestBinding
specifier|private
specifier|static
specifier|final
class|class
name|MagicCommitterTestBinding
extends|extends
name|CommitterTestBinding
block|{
DECL|method|MagicCommitterTestBinding ()
specifier|private
name|MagicCommitterTestBinding
parameter_list|()
block|{
name|super
argument_list|(
name|MagicS3GuardCommitter
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return we need a consistent store.      */
DECL|method|useInconsistentClient ()
specifier|public
name|boolean
name|useInconsistentClient
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * The result validation here is that there isn't a __magic directory      * any more.      * @param destPath destination of work      * @param successData loaded success data      * @throws Exception failure      */
annotation|@
name|Override
DECL|method|validateResult (final Path destPath, final SuccessData successData)
specifier|protected
name|void
name|validateResult
parameter_list|(
specifier|final
name|Path
name|destPath
parameter_list|,
specifier|final
name|SuccessData
name|successData
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|magicDir
init|=
operator|new
name|Path
argument_list|(
name|destPath
argument_list|,
name|MAGIC
argument_list|)
decl_stmt|;
comment|// if an FNFE isn't raised on getFileStatus, list out the directory
comment|// tree
name|S3AFileSystem
name|fs
init|=
name|getRemoteFS
argument_list|()
decl_stmt|;
comment|// log the contents
name|lsR
argument_list|(
name|fs
argument_list|,
name|destPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// and look for the magic directory
comment|// HADOOP-16632 shows how partitioned/speculative tasks can leave
comment|// data here and it is not an error. So just log and continue
try|try
block|{
specifier|final
name|FileStatus
name|st
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|magicDir
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found magic dir which should"
operator|+
literal|" have been deleted at {}"
argument_list|,
name|st
argument_list|)
expr_stmt|;
name|applyLocatedFiles
argument_list|(
name|fs
operator|.
name|listFiles
argument_list|(
name|magicDir
argument_list|,
literal|true
argument_list|)
argument_list|,
parameter_list|(
name|status
parameter_list|)
lambda|->
name|LOG
operator|.
name|warn
argument_list|(
literal|"{}"
argument_list|,
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignored
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
block|}
end_class

end_unit

