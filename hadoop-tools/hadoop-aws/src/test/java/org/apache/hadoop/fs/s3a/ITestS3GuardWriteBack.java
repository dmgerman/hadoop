begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DirListingMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test cases that validate S3Guard's behavior for writing things like  * directory listings back to the MetadataStore.  */
end_comment

begin_class
DECL|class|ITestS3GuardWriteBack
specifier|public
class|class
name|ITestS3GuardWriteBack
extends|extends
name|AbstractS3ATestBase
block|{
comment|/**    * In listStatus(), when S3Guard is enabled, the full listing for a    * directory is "written back" to the MetadataStore before the listing is    * returned.  Currently this "write back" behavior occurs when    * fs.s3a.metadatastore.authoritative is true.  This test validates this    * behavior.    * @throws Exception on failure    */
annotation|@
name|Test
DECL|method|testListStatusWriteBack ()
specifier|public
name|void
name|testListStatusWriteBack
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|directory
init|=
name|path
argument_list|(
literal|"ListStatusWriteBack"
argument_list|)
decl_stmt|;
comment|// "raw" S3AFileSystem without S3Guard
name|S3AFileSystem
name|noS3Guard
init|=
name|createTestFS
argument_list|(
name|directory
operator|.
name|toUri
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Another with S3Guard and write-back disabled
name|S3AFileSystem
name|noWriteBack
init|=
name|createTestFS
argument_list|(
name|directory
operator|.
name|toUri
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Another S3Guard and write-back enabled
name|S3AFileSystem
name|yesWriteBack
init|=
name|createTestFS
argument_list|(
name|directory
operator|.
name|toUri
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// delete the existing directory (in case of last test failure)
name|noS3Guard
operator|.
name|delete
argument_list|(
name|directory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create a directory on S3 only
name|Path
name|onS3
init|=
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
literal|"OnS3"
argument_list|)
decl_stmt|;
name|noS3Guard
operator|.
name|mkdirs
argument_list|(
name|onS3
argument_list|)
expr_stmt|;
comment|// Create a directory on both S3 and metadata store
name|Path
name|onS3AndMS
init|=
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
literal|"OnS3AndMS"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|noWriteBack
argument_list|,
literal|"path"
argument_list|,
name|onS3AndMS
argument_list|)
expr_stmt|;
name|noWriteBack
operator|.
name|mkdirs
argument_list|(
name|onS3AndMS
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|fsResults
decl_stmt|;
name|DirListingMetadata
name|mdResults
decl_stmt|;
comment|// FS should return both even though S3Guard is not writing back to MS
name|fsResults
operator|=
name|noWriteBack
operator|.
name|listStatus
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filesystem enabled S3Guard without write back should have "
operator|+
literal|"both /OnS3 and /OnS3AndMS: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|fsResults
argument_list|)
argument_list|,
literal|2
argument_list|,
name|fsResults
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Metadata store without write-back should still only contain /OnS3AndMS,
comment|// because newly discovered /OnS3 is not written back to metadata store
name|mdResults
operator|=
name|noWriteBack
operator|.
name|getMetadataStore
argument_list|()
operator|.
name|listChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No results from noWriteBack listChildren "
operator|+
name|directory
argument_list|,
name|mdResults
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Metadata store without write back should still only know "
operator|+
literal|"about /OnS3AndMS, but it has: "
operator|+
name|mdResults
argument_list|,
literal|1
argument_list|,
name|mdResults
operator|.
name|numEntries
argument_list|()
argument_list|)
expr_stmt|;
comment|// FS should return both (and will write it back)
name|fsResults
operator|=
name|yesWriteBack
operator|.
name|listStatus
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filesystem enabled S3Guard with write back should have"
operator|+
literal|" both /OnS3 and /OnS3AndMS: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|fsResults
argument_list|)
argument_list|,
literal|2
argument_list|,
name|fsResults
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Metadata store with write-back should contain both because the newly
comment|// discovered /OnS3 should have been written back to metadata store
name|mdResults
operator|=
name|yesWriteBack
operator|.
name|getMetadataStore
argument_list|()
operator|.
name|listChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of results from metadata store. "
operator|+
literal|"Should have /OnS3 and /OnS3AndMS: "
operator|+
name|mdResults
argument_list|,
literal|2
argument_list|,
name|mdResults
operator|.
name|numEntries
argument_list|()
argument_list|)
expr_stmt|;
comment|// If we don't clean this up, the next test run will fail because it will
comment|// have recorded /OnS3 being deleted even after it's written to noS3Guard.
name|getFileSystem
argument_list|()
operator|.
name|getMetadataStore
argument_list|()
operator|.
name|forgetMetadata
argument_list|(
name|onS3
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a separate S3AFileSystem instance for testing.    * There's a bit of complexity as it forces pushes up s3guard options from    * the base values to the per-bucket options. This stops explicit bucket    * settings in test XML configs from unintentionally breaking tests.    */
DECL|method|createTestFS (URI fsURI, boolean disableS3Guard, boolean authoritativeMeta)
specifier|private
name|S3AFileSystem
name|createTestFS
parameter_list|(
name|URI
name|fsURI
parameter_list|,
name|boolean
name|disableS3Guard
parameter_list|,
name|boolean
name|authoritativeMeta
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
decl_stmt|;
comment|// Create a FileSystem that is S3-backed only
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|String
name|host
init|=
name|fsURI
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|metastore
decl_stmt|;
name|metastore
operator|=
name|S3GUARD_METASTORE_NULL
expr_stmt|;
if|if
condition|(
operator|!
name|disableS3Guard
condition|)
block|{
comment|// pick up the metadata store used by the main test
name|metastore
operator|=
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|S3_METADATA_STORE_IMPL
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|S3GUARD_METASTORE_NULL
argument_list|,
name|metastore
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|S3_METADATA_STORE_IMPL
argument_list|,
name|metastore
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|METADATASTORE_AUTHORITATIVE
argument_list|,
name|authoritativeMeta
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|AUTHORITATIVE_PATH
argument_list|)
expr_stmt|;
name|S3AUtils
operator|.
name|setBucketOption
argument_list|(
name|conf
argument_list|,
name|host
argument_list|,
name|METADATASTORE_AUTHORITATIVE
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|authoritativeMeta
argument_list|)
argument_list|)
expr_stmt|;
name|S3AUtils
operator|.
name|setBucketOption
argument_list|(
name|conf
argument_list|,
name|host
argument_list|,
name|S3_METADATA_STORE_IMPL
argument_list|,
name|metastore
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|asS3AFS
argument_list|(
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|fsURI
argument_list|,
name|conf
argument_list|)
argument_list|)
decl_stmt|;
comment|// do a check to verify that everything got through
name|assertEquals
argument_list|(
literal|"Metadata store should have been disabled: "
operator|+
name|fs
argument_list|,
name|disableS3Guard
argument_list|,
operator|!
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"metastore option did not propagate"
argument_list|,
name|metastore
argument_list|,
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|S3_METADATA_STORE_IMPL
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
DECL|method|asS3AFS (FileSystem fs)
specifier|private
specifier|static
name|S3AFileSystem
name|asS3AFS
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Not a S3AFileSystem: "
operator|+
name|fs
argument_list|,
name|fs
operator|instanceof
name|S3AFileSystem
argument_list|)
expr_stmt|;
return|return
operator|(
name|S3AFileSystem
operator|)
name|fs
return|;
block|}
block|}
end_class

end_unit

