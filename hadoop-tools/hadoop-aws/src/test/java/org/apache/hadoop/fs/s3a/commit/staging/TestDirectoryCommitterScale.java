begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.staging
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PartETag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|FixMethodOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|MethodSorters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|AbstractS3ACommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
operator|.
name|PendingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
operator|.
name|SinglePendingCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DurationInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|CONFLICT_MODE_APPEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|PENDINGSET_SUFFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingTestBase
operator|.
name|BUCKET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingTestBase
operator|.
name|outputPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingTestBase
operator|.
name|outputPathUri
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingTestBase
operator|.
name|pathIsDirectory
import|;
end_import

begin_comment
comment|/**  * Scale test of the directory committer: if there are many, many files  * does job commit overload.  * This is a mock test as to avoid the overhead of going near S3;  * it does use a lot of local filesystem files though so as to  * simulate real large scale deployment better.  */
end_comment

begin_class
annotation|@
name|FixMethodOrder
argument_list|(
name|MethodSorters
operator|.
name|NAME_ASCENDING
argument_list|)
DECL|class|TestDirectoryCommitterScale
specifier|public
class|class
name|TestDirectoryCommitterScale
extends|extends
name|StagingTestBase
operator|.
name|JobCommitterTest
argument_list|<
name|DirectoryStagingCommitter
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDirectoryCommitterScale
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TASKS
specifier|public
specifier|static
specifier|final
name|int
name|TASKS
init|=
literal|500
decl_stmt|;
DECL|field|FILES_PER_TASK
specifier|public
specifier|static
specifier|final
name|int
name|FILES_PER_TASK
init|=
literal|10
decl_stmt|;
DECL|field|TOTAL_COMMIT_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|TOTAL_COMMIT_COUNT
init|=
name|FILES_PER_TASK
operator|*
name|TASKS
decl_stmt|;
DECL|field|BLOCKS_PER_TASK
specifier|public
specifier|static
specifier|final
name|int
name|BLOCKS_PER_TASK
init|=
literal|1000
decl_stmt|;
DECL|field|stagingDir
specifier|private
specifier|static
name|File
name|stagingDir
decl_stmt|;
DECL|field|localFS
specifier|private
specifier|static
name|LocalFileSystem
name|localFS
decl_stmt|;
DECL|field|stagingPath
specifier|private
specifier|static
name|Path
name|stagingPath
decl_stmt|;
DECL|field|activeUploads
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|activeUploads
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|newJobCommitter ()
name|DirectoryCommitterForTesting
name|newJobCommitter
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DirectoryCommitterForTesting
argument_list|(
name|outputPath
argument_list|,
name|createTaskAttemptForJob
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupStaging ()
specifier|public
specifier|static
name|void
name|setupStaging
parameter_list|()
throws|throws
name|Exception
block|{
name|stagingDir
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"staging"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|stagingDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|stagingDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|stagingPath
operator|=
operator|new
name|Path
argument_list|(
name|stagingDir
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownStaging ()
specifier|public
specifier|static
name|void
name|teardownStaging
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|stagingDir
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|stagingDir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{      }
block|}
annotation|@
name|Override
DECL|method|createJobConf ()
specifier|protected
name|JobConf
name|createJobConf
parameter_list|()
block|{
name|JobConf
name|conf
init|=
name|super
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommitConstants
operator|.
name|FS_S3A_COMMITTER_THREADS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getJobConf ()
specifier|protected
name|Configuration
name|getJobConf
parameter_list|()
block|{
return|return
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|test_010_createTaskFiles ()
specifier|public
name|void
name|test_010_createTaskFiles
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|DurationInfo
name|ignored
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Creating %d test files in %s"
argument_list|,
name|TOTAL_COMMIT_COUNT
argument_list|,
name|stagingDir
argument_list|)
init|)
block|{
name|createTasks
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create the mock uploads of the tasks and save    * to .pendingset files.    * @throws IOException failure.    */
DECL|method|createTasks ()
specifier|private
name|void
name|createTasks
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create a stub multipart commit containing multiple files.
comment|// step1: a list of tags.
comment|// this is the md5sum of hadoop 3.2.1.tar
name|String
name|tag
init|=
literal|"9062dcf18ffaee254821303bbd11c72b"
decl_stmt|;
name|List
argument_list|<
name|PartETag
argument_list|>
name|etags
init|=
name|IntStream
operator|.
name|rangeClosed
argument_list|(
literal|1
argument_list|,
name|BLOCKS_PER_TASK
operator|+
literal|1
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
operator|new
name|PartETag
argument_list|(
name|i
argument_list|,
name|tag
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|SinglePendingCommit
name|base
init|=
operator|new
name|SinglePendingCommit
argument_list|()
decl_stmt|;
name|base
operator|.
name|setBucket
argument_list|(
name|BUCKET
argument_list|)
expr_stmt|;
name|base
operator|.
name|setJobId
argument_list|(
literal|"0000"
argument_list|)
expr_stmt|;
name|base
operator|.
name|setLength
argument_list|(
literal|914688000
argument_list|)
expr_stmt|;
name|base
operator|.
name|bindCommitData
argument_list|(
name|etags
argument_list|)
expr_stmt|;
comment|// these get overwritten
name|base
operator|.
name|setDestinationKey
argument_list|(
literal|"/base"
argument_list|)
expr_stmt|;
name|base
operator|.
name|setUploadId
argument_list|(
literal|"uploadId"
argument_list|)
expr_stmt|;
name|base
operator|.
name|setUri
argument_list|(
name|outputPathUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SinglePendingCommit
index|[]
name|singles
init|=
operator|new
name|SinglePendingCommit
index|[
name|FILES_PER_TASK
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|base
operator|.
name|toBytes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FILES_PER_TASK
condition|;
name|i
operator|++
control|)
block|{
name|singles
index|[
name|i
index|]
operator|=
name|SinglePendingCommit
operator|.
name|serializer
argument_list|()
operator|.
name|fromBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|// now create the files, using this as the template
name|int
name|uploadCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|task
init|=
literal|0
init|;
name|task
operator|<
name|TASKS
condition|;
name|task
operator|++
control|)
block|{
name|PendingSet
name|pending
init|=
operator|new
name|PendingSet
argument_list|()
decl_stmt|;
name|String
name|taskId
init|=
name|String
operator|.
name|format
argument_list|(
literal|"task-%04d"
argument_list|,
name|task
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FILES_PER_TASK
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uploadId
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%05d-task-%04d-file-%02d"
argument_list|,
name|uploadCount
argument_list|,
name|task
argument_list|,
name|i
argument_list|)
decl_stmt|;
comment|// longer paths to take up more space.
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
literal|"datasets/examples/testdirectoryscale/"
operator|+
literal|"year=2019/month=09/day=26/hour=20/second=53"
operator|+
name|uploadId
argument_list|)
decl_stmt|;
name|URI
name|dest
init|=
name|p
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|SinglePendingCommit
name|commit
init|=
name|singles
index|[
name|i
index|]
decl_stmt|;
name|String
name|key
init|=
name|dest
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|commit
operator|.
name|setDestinationKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setUri
argument_list|(
name|dest
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|touch
argument_list|(
name|Instant
operator|.
name|now
argument_list|()
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setTaskId
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setUploadId
argument_list|(
name|uploadId
argument_list|)
expr_stmt|;
name|pending
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|activeUploads
operator|.
name|put
argument_list|(
name|uploadId
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|stagingPath
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"task-%04d."
operator|+
name|PENDINGSET_SUFFIX
argument_list|,
name|task
argument_list|)
argument_list|)
decl_stmt|;
name|pending
operator|.
name|save
argument_list|(
name|localFS
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|test_020_loadFilesToAttempt ()
specifier|public
name|void
name|test_020_loadFilesToAttempt
parameter_list|()
throws|throws
name|Exception
block|{
name|DirectoryStagingCommitter
name|committer
init|=
name|newJobCommitter
argument_list|()
decl_stmt|;
name|Configuration
name|jobConf
init|=
name|getJobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
name|CONFLICT_MODE_APPEND
argument_list|)
expr_stmt|;
name|FileSystem
name|mockS3
init|=
name|getMockS3A
argument_list|()
decl_stmt|;
name|pathIsDirectory
argument_list|(
name|mockS3
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
try|try
init|(
name|DurationInfo
name|ignored
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"listing pending uploads"
argument_list|)
init|)
block|{
name|AbstractS3ACommitter
operator|.
name|ActiveCommit
name|activeCommit
init|=
name|committer
operator|.
name|listPendingUploadsToCommit
argument_list|(
name|getJob
argument_list|()
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|activeCommit
operator|.
name|getSourceFiles
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Source files of %s"
argument_list|,
name|activeCommit
argument_list|)
operator|.
name|hasSize
argument_list|(
name|TASKS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|test_030_commitFiles ()
specifier|public
name|void
name|test_030_commitFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|DirectoryCommitterForTesting
name|committer
init|=
name|newJobCommitter
argument_list|()
decl_stmt|;
name|StagingTestBase
operator|.
name|ClientResults
name|results
init|=
name|getMockResults
argument_list|()
decl_stmt|;
name|results
operator|.
name|addUploads
argument_list|(
name|activeUploads
argument_list|)
expr_stmt|;
name|Configuration
name|jobConf
init|=
name|getJobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
name|CONFLICT_MODE_APPEND
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|mockS3
init|=
name|getMockS3A
argument_list|()
decl_stmt|;
name|pathIsDirectory
argument_list|(
name|mockS3
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
try|try
init|(
name|DurationInfo
name|ignored
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|"Committing Job"
argument_list|)
init|)
block|{
name|committer
operator|.
name|commitJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assertions
operator|.
name|assertThat
argument_list|(
name|results
operator|.
name|getCommits
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"commit count"
argument_list|)
operator|.
name|hasSize
argument_list|(
name|TOTAL_COMMIT_COUNT
argument_list|)
expr_stmt|;
name|AbstractS3ACommitter
operator|.
name|ActiveCommit
name|activeCommit
init|=
name|committer
operator|.
name|activeCommit
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|activeCommit
operator|.
name|getCommittedObjects
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"committed objects in active commit"
argument_list|)
operator|.
name|hasSize
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|TOTAL_COMMIT_COUNT
argument_list|,
name|CommitConstants
operator|.
name|SUCCESS_MARKER_FILE_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|activeCommit
operator|.
name|getCommittedFileCount
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"committed objects in active commit"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TOTAL_COMMIT_COUNT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_040_abortFiles ()
specifier|public
name|void
name|test_040_abortFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|DirectoryStagingCommitter
name|committer
init|=
name|newJobCommitter
argument_list|()
decl_stmt|;
name|getMockResults
argument_list|()
operator|.
name|addUploads
argument_list|(
name|activeUploads
argument_list|)
expr_stmt|;
name|Configuration
name|jobConf
init|=
name|getJobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
name|CONFLICT_MODE_APPEND
argument_list|)
expr_stmt|;
name|FileSystem
name|mockS3
init|=
name|getMockS3A
argument_list|()
decl_stmt|;
name|pathIsDirectory
argument_list|(
name|mockS3
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|committer
operator|.
name|abortJob
argument_list|(
name|getJob
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Committer overridden for better testing.    */
DECL|class|DirectoryCommitterForTesting
specifier|private
specifier|static
specifier|final
class|class
name|DirectoryCommitterForTesting
extends|extends
name|DirectoryStagingCommitter
block|{
DECL|field|activeCommit
specifier|private
name|ActiveCommit
name|activeCommit
decl_stmt|;
DECL|method|DirectoryCommitterForTesting (Path outputPath, TaskAttemptContext context)
specifier|private
name|DirectoryCommitterForTesting
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initOutput (Path out)
specifier|protected
name|void
name|initOutput
parameter_list|(
name|Path
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initOutput
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|setOutputPath
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the mock FS without checking FS type.      * @param out output path      * @param config job/task config      * @return a filesystem.      * @throws IOException failure to get the FS      */
annotation|@
name|Override
DECL|method|getDestinationFS (Path out, Configuration config)
specifier|protected
name|FileSystem
name|getDestinationFS
parameter_list|(
name|Path
name|out
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|out
operator|.
name|getFileSystem
argument_list|(
name|config
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJobAttemptPath (JobContext context)
specifier|public
name|Path
name|getJobAttemptPath
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
return|return
name|stagingPath
return|;
block|}
annotation|@
name|Override
DECL|method|commitJobInternal (final JobContext context, final ActiveCommit pending)
specifier|protected
name|void
name|commitJobInternal
parameter_list|(
specifier|final
name|JobContext
name|context
parameter_list|,
specifier|final
name|ActiveCommit
name|pending
parameter_list|)
throws|throws
name|IOException
block|{
name|activeCommit
operator|=
name|pending
expr_stmt|;
name|super
operator|.
name|commitJobInternal
argument_list|(
name|context
argument_list|,
name|pending
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

