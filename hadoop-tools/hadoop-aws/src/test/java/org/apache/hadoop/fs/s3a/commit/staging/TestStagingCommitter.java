begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.staging
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AbortMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CompleteMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|StringStartsWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AWSClientIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|MockS3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
operator|.
name|PendingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
operator|.
name|SinglePendingCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|JobContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|InternalCommitterConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingCommitterConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|Paths
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingTestBase
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The main unit test suite of the staging committer.  * Parameterized on thread count and unique filename policy.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestStagingCommitter
specifier|public
class|class
name|TestStagingCommitter
extends|extends
name|StagingTestBase
operator|.
name|MiniDFSTest
block|{
DECL|field|JOB_ID
specifier|private
specifier|static
specifier|final
name|JobID
name|JOB_ID
init|=
operator|new
name|JobID
argument_list|(
literal|"job"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|AID
specifier|private
specifier|static
specifier|final
name|TaskAttemptID
name|AID
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|JOB_ID
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStagingCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|numThreads
specifier|private
specifier|final
name|int
name|numThreads
decl_stmt|;
DECL|field|uniqueFilenames
specifier|private
specifier|final
name|boolean
name|uniqueFilenames
decl_stmt|;
DECL|field|job
specifier|private
name|JobContext
name|job
init|=
literal|null
decl_stmt|;
DECL|field|tac
specifier|private
name|TaskAttemptContext
name|tac
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|jobCommitter
specifier|private
name|MockedStagingCommitter
name|jobCommitter
init|=
literal|null
decl_stmt|;
DECL|field|committer
specifier|private
name|MockedStagingCommitter
name|committer
init|=
literal|null
decl_stmt|;
comment|// created in Before
DECL|field|mockFS
specifier|private
name|S3AFileSystem
name|mockFS
init|=
literal|null
decl_stmt|;
DECL|field|wrapperFS
specifier|private
name|MockS3AFileSystem
name|wrapperFS
init|=
literal|null
decl_stmt|;
comment|// created in Before
DECL|field|results
specifier|private
name|StagingTestBase
operator|.
name|ClientResults
name|results
init|=
literal|null
decl_stmt|;
DECL|field|errors
specifier|private
name|StagingTestBase
operator|.
name|ClientErrors
name|errors
init|=
literal|null
decl_stmt|;
DECL|field|mockClient
specifier|private
name|AmazonS3
name|mockClient
init|=
literal|null
decl_stmt|;
DECL|field|tmpDir
specifier|private
name|File
name|tmpDir
decl_stmt|;
comment|/**    * Describe a test in the logs.    * @param text text to print    * @param args arguments to format in the printing    */
DECL|method|describe (String text, Object... args)
specifier|protected
name|void
name|describe
parameter_list|(
name|String
name|text
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n: {}\n"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|text
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test array for parameterized test runs: how many threads and    * how many files to use.    * @return a list of parameter tuples.    */
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|params ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|0
block|,
literal|false
block|}
block|,
block|{
literal|1
block|,
literal|true
block|}
block|,
block|{
literal|3
block|,
literal|true
block|}
block|,     }
argument_list|)
return|;
block|}
DECL|method|TestStagingCommitter (int numThreads, boolean uniqueFilenames)
specifier|public
name|TestStagingCommitter
parameter_list|(
name|int
name|numThreads
parameter_list|,
name|boolean
name|uniqueFilenames
parameter_list|)
block|{
name|this
operator|.
name|numThreads
operator|=
name|numThreads
expr_stmt|;
name|this
operator|.
name|uniqueFilenames
operator|=
name|uniqueFilenames
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setupCommitter ()
specifier|public
name|void
name|setupCommitter
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|jobConf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|FS_S3A_COMMITTER_THREADS
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setBoolean
argument_list|(
name|FS_S3A_COMMITTER_STAGING_UNIQUE_FILENAMES
argument_list|,
name|uniqueFilenames
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_UUID
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|results
operator|=
operator|new
name|StagingTestBase
operator|.
name|ClientResults
argument_list|()
expr_stmt|;
name|this
operator|.
name|errors
operator|=
operator|new
name|StagingTestBase
operator|.
name|ClientErrors
argument_list|()
expr_stmt|;
name|this
operator|.
name|mockClient
operator|=
name|newMockS3Client
argument_list|(
name|results
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|this
operator|.
name|mockFS
operator|=
name|createAndBindMockFSInstance
argument_list|(
name|jobConf
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|results
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|wrapperFS
operator|=
name|lookupWrapperFS
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
comment|// and bind the FS
name|wrapperFS
operator|.
name|setAmazonS3Client
argument_list|(
name|mockClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|job
operator|=
operator|new
name|JobContextImpl
argument_list|(
name|jobConf
argument_list|,
name|JOB_ID
argument_list|)
expr_stmt|;
name|this
operator|.
name|tac
operator|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
operator|new
name|Configuration
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|AID
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobCommitter
operator|=
operator|new
name|MockedStagingCommitter
argument_list|(
name|OUTPUT_PATH
argument_list|,
name|tac
argument_list|)
expr_stmt|;
name|jobCommitter
operator|.
name|setupJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// get the task's configuration copy so modifications take effect
name|this
operator|.
name|conf
operator|=
name|tac
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|MULTIPART_SIZE
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|tmpDir
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"testStagingCommitter"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|tmpDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|tmp
init|=
name|tmpDir
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|BUFFER_DIR
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s/local-0/, %s/local-1 "
argument_list|,
name|tmp
argument_list|,
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|committer
operator|=
operator|new
name|MockedStagingCommitter
argument_list|(
name|OUTPUT_PATH
argument_list|,
name|tac
argument_list|)
expr_stmt|;
name|Paths
operator|.
name|resetTempFolderCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|tmpDir
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{      }
block|}
annotation|@
name|Test
DECL|method|testUUIDPropagation ()
specifier|public
name|void
name|testUUIDPropagation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|jobUUID
init|=
name|addUUID
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Upload UUID"
argument_list|,
name|jobUUID
argument_list|,
name|StagingCommitter
operator|.
name|getUploadUUID
argument_list|(
name|config
argument_list|,
name|JOB_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addUUID (Configuration config)
specifier|private
name|String
name|addUUID
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|String
name|jobUUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_UUID
argument_list|,
name|jobUUID
argument_list|)
expr_stmt|;
return|return
name|jobUUID
return|;
block|}
annotation|@
name|Test
DECL|method|testAttemptPathConstructionNoSchema ()
specifier|public
name|void
name|testAttemptPathConstructionNoSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|jobUUID
init|=
name|addUUID
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|BUFFER_DIR
argument_list|,
literal|"/tmp/mr-local-0,/tmp/mr-local-1"
argument_list|)
expr_stmt|;
name|String
name|commonPath
init|=
literal|"file:/tmp/mr-local-"
decl_stmt|;
name|assertThat
argument_list|(
literal|"Missing scheme should produce local file paths"
argument_list|,
name|getLocalTaskAttemptTempDir
argument_list|(
name|config
argument_list|,
name|jobUUID
argument_list|,
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|StringStartsWith
operator|.
name|startsWith
argument_list|(
name|commonPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAttemptPathConstructionWithSchema ()
specifier|public
name|void
name|testAttemptPathConstructionWithSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|jobUUID
init|=
name|addUUID
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|String
name|commonPath
init|=
literal|"file:/tmp/mr-local-"
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|BUFFER_DIR
argument_list|,
literal|"file:/tmp/mr-local-0,file:/tmp/mr-local-1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Path should be the same with file scheme"
argument_list|,
name|getLocalTaskAttemptTempDir
argument_list|(
name|config
argument_list|,
name|jobUUID
argument_list|,
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|StringStartsWith
operator|.
name|startsWith
argument_list|(
name|commonPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAttemptPathConstructionWrongSchema ()
specifier|public
name|void
name|testAttemptPathConstructionWrongSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|jobUUID
init|=
name|addUUID
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|BUFFER_DIR
argument_list|,
literal|"hdfs://nn:8020/tmp/mr-local-0,hdfs://nn:8020/tmp/mr-local-1"
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|"Wrong FS"
argument_list|,
parameter_list|()
lambda|->
name|getLocalTaskAttemptTempDir
argument_list|(
name|config
argument_list|,
name|jobUUID
argument_list|,
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitPathConstruction ()
specifier|public
name|void
name|testCommitPathConstruction
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|committedTaskPath
init|=
name|committer
operator|.
name|getCommittedTaskPath
argument_list|(
name|tac
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Path should be in HDFS: "
operator|+
name|committedTaskPath
argument_list|,
literal|"hdfs"
argument_list|,
name|committedTaskPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ending
init|=
name|STAGING_UPLOADS
operator|+
literal|"/_temporary/0/task_job_0001_r_000002"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Did not end with \""
operator|+
name|ending
operator|+
literal|"\" :"
operator|+
name|committedTaskPath
argument_list|,
name|committedTaskPath
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|ending
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleTaskCommit ()
specifier|public
name|void
name|testSingleTaskCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|commitTask
argument_list|(
name|committer
argument_list|,
name|tac
argument_list|,
literal|1
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|uploads
init|=
name|results
operator|.
name|getUploads
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should initiate one upload: "
operator|+
name|results
argument_list|,
literal|1
argument_list|,
name|uploads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|committedPath
init|=
name|committer
operator|.
name|getCommittedTaskPath
argument_list|(
name|tac
argument_list|)
decl_stmt|;
name|FileSystem
name|dfs
init|=
name|committedPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should commit to HDFS: "
operator|+
name|committer
argument_list|,
name|getDFS
argument_list|()
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|stats
init|=
name|dfs
operator|.
name|listStatus
argument_list|(
name|committedPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should produce one commit file: "
operator|+
name|results
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should name the commits file with the task ID: "
operator|+
name|results
argument_list|,
literal|"task_job_0001_r_000002"
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PendingSet
name|pending
init|=
name|PendingSet
operator|.
name|load
argument_list|(
name|dfs
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have one pending commit"
argument_list|,
literal|1
argument_list|,
name|pending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SinglePendingCommit
name|commit
init|=
name|pending
operator|.
name|getCommits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should write to the correct bucket:"
operator|+
name|results
argument_list|,
name|BUCKET
argument_list|,
name|commit
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should write to the correct key: "
operator|+
name|results
argument_list|,
name|OUTPUT_PREFIX
operator|+
literal|"/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|commit
operator|.
name|getDestinationKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertValidUpload
argument_list|(
name|results
operator|.
name|getTagsByUpload
argument_list|()
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
comment|/**    * This originally verified that empty files weren't PUT. They are now.    * @throws Exception on a failure    */
annotation|@
name|Test
DECL|method|testSingleTaskEmptyFileCommit ()
specifier|public
name|void
name|testSingleTaskEmptyFileCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|committer
operator|.
name|setupTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
name|Path
name|attemptPath
init|=
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|tac
argument_list|)
decl_stmt|;
name|String
name|rand
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|writeOutputFile
argument_list|(
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|attemptPath
argument_list|,
name|rand
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|uploads
init|=
name|results
operator|.
name|getUploads
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should initiate one upload"
argument_list|,
literal|1
argument_list|,
name|uploads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|committedPath
init|=
name|committer
operator|.
name|getCommittedTaskPath
argument_list|(
name|tac
argument_list|)
decl_stmt|;
name|FileSystem
name|dfs
init|=
name|committedPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should commit to HDFS"
argument_list|,
name|getDFS
argument_list|()
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|assertIsFile
argument_list|(
name|dfs
argument_list|,
name|committedPath
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|stats
init|=
name|dfs
operator|.
name|listStatus
argument_list|(
name|committedPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should produce one commit file"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should name the commits file with the task ID"
argument_list|,
literal|"task_job_0001_r_000002"
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PendingSet
name|pending
init|=
name|PendingSet
operator|.
name|load
argument_list|(
name|dfs
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have one pending commit"
argument_list|,
literal|1
argument_list|,
name|pending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleTaskMultiFileCommit ()
specifier|public
name|void
name|testSingleTaskMultiFileCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numFiles
init|=
literal|3
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
name|commitTask
argument_list|(
name|committer
argument_list|,
name|tac
argument_list|,
name|numFiles
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|uploads
init|=
name|results
operator|.
name|getUploads
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should initiate multiple uploads"
argument_list|,
name|numFiles
argument_list|,
name|uploads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|committedPath
init|=
name|committer
operator|.
name|getCommittedTaskPath
argument_list|(
name|tac
argument_list|)
decl_stmt|;
name|FileSystem
name|dfs
init|=
name|committedPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should commit to HDFS"
argument_list|,
name|getDFS
argument_list|()
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|assertIsFile
argument_list|(
name|dfs
argument_list|,
name|committedPath
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|stats
init|=
name|dfs
operator|.
name|listStatus
argument_list|(
name|committedPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should produce one commit file"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should name the commits file with the task ID"
argument_list|,
literal|"task_job_0001_r_000002"
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|pending
init|=
name|PendingSet
operator|.
name|load
argument_list|(
name|dfs
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getCommits
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have correct number of pending commits"
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|,
name|pending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|SinglePendingCommit
name|commit
range|:
name|pending
control|)
block|{
name|assertEquals
argument_list|(
literal|"Should write to the correct bucket: "
operator|+
name|commit
argument_list|,
name|BUCKET
argument_list|,
name|commit
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|assertValidUpload
argument_list|(
name|results
operator|.
name|getTagsByUpload
argument_list|()
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|commit
operator|.
name|getDestinationKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should write to the correct key"
argument_list|,
name|files
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTaskInitializeFailure ()
specifier|public
name|void
name|testTaskInitializeFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|committer
operator|.
name|setupTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
name|errors
operator|.
name|failOnInit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Path
name|attemptPath
init|=
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|tac
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|attemptPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeOutputFile
argument_list|(
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|attemptPath
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|writeOutputFile
argument_list|(
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|attemptPath
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|AWSClientIOException
operator|.
name|class
argument_list|,
literal|"Fail on init 1"
argument_list|,
literal|"Should fail during init"
argument_list|,
parameter_list|()
lambda|->
name|committer
operator|.
name|commitTask
argument_list|(
name|tac
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have initialized one file upload"
argument_list|,
literal|1
argument_list|,
name|results
operator|.
name|getUploads
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should abort the upload"
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|results
operator|.
name|getUploads
argument_list|()
argument_list|)
argument_list|,
name|getAbortedIds
argument_list|(
name|results
operator|.
name|getAborts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"Should remove the attempt path"
argument_list|,
name|attemptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTaskSingleFileUploadFailure ()
specifier|public
name|void
name|testTaskSingleFileUploadFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"Set up a single file upload to fail on upload 2"
argument_list|)
expr_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
name|errors
operator|.
name|failOnUpload
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Path
name|attemptPath
init|=
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|tac
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|attemptPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeOutputFile
argument_list|(
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|attemptPath
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
operator|)
name|AWSClientIOException
operator|.
name|class
argument_list|,
literal|"Fail on upload 2"
argument_list|,
literal|"Should fail during upload"
argument_list|,
parameter_list|()
lambda|->
block|{
name|committer
operator|.
name|commitTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
return|return
name|committer
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have attempted one file upload"
argument_list|,
literal|1
argument_list|,
name|results
operator|.
name|getUploads
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should abort the upload"
argument_list|,
name|results
operator|.
name|getUploads
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|results
operator|.
name|getAborts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUploadId
argument_list|()
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"Should remove the attempt path"
argument_list|,
name|attemptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTaskMultiFileUploadFailure ()
specifier|public
name|void
name|testTaskMultiFileUploadFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|committer
operator|.
name|setupTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
name|errors
operator|.
name|failOnUpload
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|Path
name|attemptPath
init|=
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|tac
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|attemptPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeOutputFile
argument_list|(
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|attemptPath
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|writeOutputFile
argument_list|(
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|attemptPath
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
operator|)
name|AWSClientIOException
operator|.
name|class
argument_list|,
literal|"Fail on upload 5"
argument_list|,
literal|"Should fail during upload"
argument_list|,
parameter_list|()
lambda|->
block|{
name|committer
operator|.
name|commitTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
return|return
name|committer
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have attempted two file uploads"
argument_list|,
literal|2
argument_list|,
name|results
operator|.
name|getUploads
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should abort the upload"
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|results
operator|.
name|getUploads
argument_list|()
argument_list|)
argument_list|,
name|getAbortedIds
argument_list|(
name|results
operator|.
name|getAborts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"Should remove the attempt path"
argument_list|,
name|attemptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTaskUploadAndAbortFailure ()
specifier|public
name|void
name|testTaskUploadAndAbortFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|committer
operator|.
name|setupTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
name|errors
operator|.
name|failOnUpload
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|errors
operator|.
name|failOnAbort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Path
name|attemptPath
init|=
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|tac
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|attemptPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeOutputFile
argument_list|(
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|attemptPath
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|writeOutputFile
argument_list|(
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|attemptPath
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
operator|)
name|AWSClientIOException
operator|.
name|class
argument_list|,
literal|"Fail on upload 5"
argument_list|,
literal|"Should suppress abort failure, propagate upload failure"
argument_list|,
parameter_list|()
lambda|->
block|{
name|committer
operator|.
name|commitTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
return|return
name|committer
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have attempted two file uploads"
argument_list|,
literal|2
argument_list|,
name|results
operator|.
name|getUploads
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not have succeeded with any aborts"
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
name|getAbortedIds
argument_list|(
name|results
operator|.
name|getAborts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"Should remove the attempt path"
argument_list|,
name|attemptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleTaskAbort ()
specifier|public
name|void
name|testSingleTaskAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|committer
operator|.
name|setupTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
name|Path
name|attemptPath
init|=
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|tac
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|attemptPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|outPath
init|=
name|writeOutputFile
argument_list|(
name|tac
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|attemptPath
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|committer
operator|.
name|abortTask
argument_list|(
name|tac
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not upload anything"
argument_list|,
literal|0
argument_list|,
name|results
operator|.
name|getUploads
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not upload anything"
argument_list|,
literal|0
argument_list|,
name|results
operator|.
name|getParts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"Should remove all attempt data"
argument_list|,
name|outPath
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"Should remove the attempt path"
argument_list|,
name|attemptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobCommit ()
specifier|public
name|void
name|testJobCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|jobAttemptPath
init|=
name|jobCommitter
operator|.
name|getJobAttemptPath
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|jobAttemptPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|uploads
init|=
name|runTasks
argument_list|(
name|job
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|0
argument_list|,
name|uploads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"No job attempt path"
argument_list|,
name|jobAttemptPath
argument_list|)
expr_stmt|;
name|jobCommitter
operator|.
name|commitJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have aborted no uploads"
argument_list|,
literal|0
argument_list|,
name|results
operator|.
name|getAborts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have deleted no uploads"
argument_list|,
literal|0
argument_list|,
name|results
operator|.
name|getDeletes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have committed all uploads"
argument_list|,
name|uploads
argument_list|,
name|getCommittedIds
argument_list|(
name|results
operator|.
name|getCommits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"jobAttemptPath not deleted"
argument_list|,
name|jobAttemptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobCommitFailure ()
specifier|public
name|void
name|testJobCommitFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|jobAttemptPath
init|=
name|jobCommitter
operator|.
name|getJobAttemptPath
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|jobAttemptPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|uploads
init|=
name|runTasks
argument_list|(
name|job
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"No job attempt path"
argument_list|,
name|jobAttemptPath
argument_list|)
expr_stmt|;
name|errors
operator|.
name|failOnCommit
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|setMockLogLevel
argument_list|(
name|MockS3AFileSystem
operator|.
name|LOG_NAME
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|AWSClientIOException
operator|.
name|class
argument_list|,
literal|"Fail on commit 5"
argument_list|,
literal|"Should propagate the commit failure"
argument_list|,
parameter_list|()
lambda|->
block|{
name|jobCommitter
operator|.
name|commitJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
return|return
name|jobCommitter
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have succeeded to commit some uploads"
argument_list|,
literal|5
argument_list|,
name|results
operator|.
name|getCommits
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have deleted the files that succeeded"
argument_list|,
literal|5
argument_list|,
name|results
operator|.
name|getDeletes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|commits
init|=
name|results
operator|.
name|getCommits
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
parameter_list|(
name|commit
parameter_list|)
lambda|->
name|commit
operator|.
name|getBucketName
argument_list|()
operator|+
name|commit
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|deletes
init|=
name|results
operator|.
name|getDeletes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
parameter_list|(
name|delete
parameter_list|)
lambda|->
name|delete
operator|.
name|getBucketName
argument_list|()
operator|+
name|delete
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Committed and deleted objects should match"
argument_list|,
name|commits
argument_list|,
name|deletes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch in aborted upload count"
argument_list|,
literal|7
argument_list|,
name|results
operator|.
name|getAborts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|uploadIds
init|=
name|getCommittedIds
argument_list|(
name|results
operator|.
name|getCommits
argument_list|()
argument_list|)
decl_stmt|;
name|uploadIds
operator|.
name|addAll
argument_list|(
name|getAbortedIds
argument_list|(
name|results
operator|.
name|getAborts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have committed/deleted or aborted all uploads"
argument_list|,
name|uploads
argument_list|,
name|uploadIds
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"jobAttemptPath not deleted"
argument_list|,
name|jobAttemptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobAbort ()
specifier|public
name|void
name|testJobAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|jobAttemptPath
init|=
name|jobCommitter
operator|.
name|getJobAttemptPath
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|jobAttemptPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|uploads
init|=
name|runTasks
argument_list|(
name|job
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"No job attempt path"
argument_list|,
name|jobAttemptPath
argument_list|)
expr_stmt|;
name|jobCommitter
operator|.
name|abortJob
argument_list|(
name|job
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have committed no uploads: "
operator|+
name|jobCommitter
argument_list|,
literal|0
argument_list|,
name|results
operator|.
name|getCommits
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have deleted no uploads: "
operator|+
name|jobCommitter
argument_list|,
literal|0
argument_list|,
name|results
operator|.
name|getDeletes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have aborted all uploads: "
operator|+
name|jobCommitter
argument_list|,
name|uploads
argument_list|,
name|getAbortedIds
argument_list|(
name|results
operator|.
name|getAborts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"jobAttemptPath not deleted"
argument_list|,
name|jobAttemptPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run tasks, return the uploaded dataset. The upload data is    * extracted from the {@link #results} field; this is reset    * before the operation.    * @param jobContext job ctx    * @param numTasks number of tasks to run    * @param numFiles number of files for each task to generate    * @return a set of all uploads    * @throws IOException on a failure.    */
DECL|method|runTasks (JobContext jobContext, int numTasks, int numFiles)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|runTasks
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|int
name|numTasks
parameter_list|,
name|int
name|numFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|results
operator|.
name|resetUploads
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|uploads
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|taskId
init|=
literal|0
init|;
name|taskId
operator|<
name|numTasks
condition|;
name|taskId
operator|+=
literal|1
control|)
block|{
name|TaskAttemptID
name|attemptID
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|JOB_ID
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|taskId
argument_list|)
argument_list|,
operator|(
name|taskId
operator|*
literal|37
operator|)
operator|%
name|numTasks
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|attempt
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
operator|new
name|Configuration
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|attemptID
argument_list|)
decl_stmt|;
name|MockedStagingCommitter
name|taskCommitter
init|=
operator|new
name|MockedStagingCommitter
argument_list|(
name|OUTPUT_PATH
argument_list|,
name|attempt
argument_list|)
decl_stmt|;
name|commitTask
argument_list|(
name|taskCommitter
argument_list|,
name|attempt
argument_list|,
name|numFiles
argument_list|)
expr_stmt|;
block|}
name|uploads
operator|.
name|addAll
argument_list|(
name|results
operator|.
name|getUploads
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|uploads
return|;
block|}
DECL|method|getAbortedIds ( List<AbortMultipartUploadRequest> aborts)
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getAbortedIds
parameter_list|(
name|List
argument_list|<
name|AbortMultipartUploadRequest
argument_list|>
name|aborts
parameter_list|)
block|{
return|return
name|aborts
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|AbortMultipartUploadRequest
operator|::
name|getUploadId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCommittedIds ( List<CompleteMultipartUploadRequest> commits)
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getCommittedIds
parameter_list|(
name|List
argument_list|<
name|CompleteMultipartUploadRequest
argument_list|>
name|commits
parameter_list|)
block|{
return|return
name|commits
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|CompleteMultipartUploadRequest
operator|::
name|getUploadId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|commitTask (StagingCommitter staging, TaskAttemptContext attempt, int numFiles)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|commitTask
parameter_list|(
name|StagingCommitter
name|staging
parameter_list|,
name|TaskAttemptContext
name|attempt
parameter_list|,
name|int
name|numFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|attemptPath
init|=
name|staging
operator|.
name|getTaskAttemptPath
argument_list|(
name|attempt
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|+=
literal|1
control|)
block|{
name|Path
name|outPath
init|=
name|writeOutputFile
argument_list|(
name|attempt
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|attemptPath
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|OUTPUT_PREFIX
operator|+
literal|"/"
operator|+
name|outPath
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|uniqueFilenames
condition|?
operator|(
literal|"-"
operator|+
name|staging
operator|.
name|getUUID
argument_list|()
operator|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|staging
operator|.
name|commitTask
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
return|return
name|files
return|;
block|}
DECL|method|assertValidUpload (Map<String, List<String>> parts, SinglePendingCommit commit)
specifier|private
specifier|static
name|void
name|assertValidUpload
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parts
parameter_list|,
name|SinglePendingCommit
name|commit
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Should commit a valid uploadId"
argument_list|,
name|parts
operator|.
name|containsKey
argument_list|(
name|commit
operator|.
name|getUploadId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tags
init|=
name|parts
operator|.
name|get
argument_list|(
name|commit
operator|.
name|getUploadId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should commit the correct number of file parts"
argument_list|,
name|tags
operator|.
name|size
argument_list|()
argument_list|,
name|commit
operator|.
name|getPartCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tags
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|1
control|)
block|{
name|assertEquals
argument_list|(
literal|"Should commit the correct part tags"
argument_list|,
name|tags
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|commit
operator|.
name|getEtags
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeOutputFile (TaskAttemptID id, Path dest, String content, long copies)
specifier|private
specifier|static
name|Path
name|writeOutputFile
parameter_list|(
name|TaskAttemptID
name|id
parameter_list|,
name|Path
name|dest
parameter_list|,
name|String
name|content
parameter_list|,
name|long
name|copies
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
operator|(
operator|(
name|id
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
operator|)
condition|?
literal|"r_"
else|:
literal|"m_"
operator|)
operator|+
name|id
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"_"
operator|+
name|id
operator|.
name|getId
argument_list|()
operator|+
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|outPath
init|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|outPath
operator|.
name|getFileSystem
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|outPath
argument_list|)
init|)
block|{
name|byte
index|[]
name|bytes
init|=
name|content
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copies
condition|;
name|i
operator|+=
literal|1
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|outPath
return|;
block|}
comment|/**    * Used during debugging mock test failures; cranks up logging of method    * calls.    * @param level log level    */
DECL|method|setMockLogLevel (int level)
specifier|private
name|void
name|setMockLogLevel
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|wrapperFS
operator|.
name|setLogEvents
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

