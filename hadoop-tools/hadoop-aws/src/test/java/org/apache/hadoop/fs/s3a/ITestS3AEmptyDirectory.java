begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Tests which exercise treatment of empty/non-empty directories.  */
end_comment

begin_class
DECL|class|ITestS3AEmptyDirectory
specifier|public
class|class
name|ITestS3AEmptyDirectory
extends|extends
name|AbstractS3ATestBase
block|{
annotation|@
name|Test
DECL|method|testDirectoryBecomesEmpty ()
specifier|public
name|void
name|testDirectoryBecomesEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// 1. set up non-empty dir
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"testEmptyDir"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
name|path
argument_list|(
literal|"testEmptyDir/dir2"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|S3AFileStatus
name|status
init|=
name|getS3AFileStatus
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|assertEmptyDirectory
argument_list|(
literal|false
argument_list|,
name|status
argument_list|)
expr_stmt|;
comment|// 2. Make testEmptyDir empty
name|assertDeleted
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|=
name|getS3AFileStatus
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|assertEmptyDirectory
argument_list|(
literal|true
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEmptyDirectory (boolean isEmpty, S3AFileStatus s)
specifier|private
specifier|static
name|void
name|assertEmptyDirectory
parameter_list|(
name|boolean
name|isEmpty
parameter_list|,
name|S3AFileStatus
name|s
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"dir is empty"
decl_stmt|;
comment|// Should *not* be Tristate.UNKNOWN since we request a definitive value
comment|// in getS3AFileStatus() below
name|Tristate
name|expected
init|=
name|Tristate
operator|.
name|fromBool
argument_list|(
name|isEmpty
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expected
argument_list|,
name|s
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDirectoryBecomesNonEmpty ()
specifier|public
name|void
name|testDirectoryBecomesNonEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// 1. create empty dir
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"testEmptyDir"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|S3AFileStatus
name|status
init|=
name|getS3AFileStatus
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|assertEmptyDirectory
argument_list|(
literal|true
argument_list|,
name|status
argument_list|)
expr_stmt|;
comment|// 2. Make testEmptyDir non-empty
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|path
argument_list|(
literal|"testEmptyDir/file1"
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|getS3AFileStatus
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|assertEmptyDirectory
argument_list|(
literal|false
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|getS3AFileStatus (S3AFileSystem fs, Path p)
specifier|private
name|S3AFileStatus
name|getS3AFileStatus
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|innerGetFileStatus
argument_list|(
name|p
argument_list|,
literal|true
comment|/* want isEmptyDirectory value */
argument_list|)
return|;
block|}
block|}
end_class

end_unit

