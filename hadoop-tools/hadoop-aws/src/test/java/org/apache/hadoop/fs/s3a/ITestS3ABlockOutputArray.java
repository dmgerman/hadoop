begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests small file upload functionality for  * {@link S3ABlockOutputStream} with the blocks buffered in byte arrays.  *  * File sizes are kept small to reduce test duration on slow connections;  * multipart tests are kept in scale tests.  */
end_comment

begin_class
DECL|class|ITestS3ABlockOutputArray
specifier|public
class|class
name|ITestS3ABlockOutputArray
extends|extends
name|AbstractS3ATestBase
block|{
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MIN_MULTIPART_THRESHOLD
argument_list|,
name|MULTIPART_MIN_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MULTIPART_SIZE
argument_list|,
name|MULTIPART_MIN_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|Constants
operator|.
name|FAST_UPLOAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FAST_UPLOAD_BUFFER
argument_list|,
name|getBlockOutputBufferName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getBlockOutputBufferName ()
specifier|protected
name|String
name|getBlockOutputBufferName
parameter_list|()
block|{
return|return
name|FAST_UPLOAD_BUFFER_ARRAY
return|;
block|}
annotation|@
name|Test
DECL|method|testZeroByteUpload ()
specifier|public
name|void
name|testZeroByteUpload
parameter_list|()
throws|throws
name|IOException
block|{
name|verifyUpload
argument_list|(
literal|"0"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegularUpload ()
specifier|public
name|void
name|testRegularUpload
parameter_list|()
throws|throws
name|IOException
block|{
name|verifyUpload
argument_list|(
literal|"regular"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testDoubleStreamClose ()
specifier|public
name|void
name|testDoubleStreamClose
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|dest
init|=
name|path
argument_list|(
literal|"testDoubleStreamClose"
argument_list|)
decl_stmt|;
name|describe
argument_list|(
literal|" testDoubleStreamClose"
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|stream
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|dest
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ContractTestUtils
operator|.
name|dataset
argument_list|(
literal|16
argument_list|,
literal|'a'
argument_list|,
literal|26
argument_list|)
decl_stmt|;
try|try
block|{
name|stream
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyUpload (String name, int fileSize)
specifier|public
name|void
name|verifyUpload
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fileSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dest
init|=
name|path
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|describe
argument_list|(
name|name
operator|+
literal|" upload to "
operator|+
name|dest
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|createAndVerifyFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|dest
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

