begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AMultipartUploader
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AMultipartUploader
operator|.
name|parsePartHandlePayload
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test multipart upload support methods and classes.  */
end_comment

begin_class
DECL|class|TestS3AMultipartUploaderSupport
specifier|public
class|class
name|TestS3AMultipartUploaderSupport
extends|extends
name|HadoopTestBase
block|{
annotation|@
name|Test
DECL|method|testRoundTrip ()
specifier|public
name|void
name|testRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|Pair
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|result
init|=
name|roundTrip
argument_list|(
literal|"tag"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tag"
argument_list|,
name|result
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getLeft
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRoundTrip2 ()
specifier|public
name|void
name|testRoundTrip2
parameter_list|()
throws|throws
name|Throwable
block|{
name|long
name|len
init|=
literal|1L
operator|+
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|Pair
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|result
init|=
name|roundTrip
argument_list|(
literal|"11223344"
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"11223344"
argument_list|,
name|result
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|result
operator|.
name|getLeft
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoEtag ()
specifier|public
name|void
name|testNoEtag
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|buildPartHandlePayload
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoLen ()
specifier|public
name|void
name|testNoLen
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|buildPartHandlePayload
argument_list|(
literal|"tag"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadPayload ()
specifier|public
name|void
name|testBadPayload
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parsePartHandlePayload
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadHeader ()
specifier|public
name|void
name|testBadHeader
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|bytes
init|=
name|buildPartHandlePayload
argument_list|(
literal|"tag"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|bytes
index|[
literal|2
index|]
operator|=
literal|'f'
expr_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"header"
argument_list|,
parameter_list|()
lambda|->
name|parsePartHandlePayload
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|roundTrip (final String tag, final long len)
specifier|private
name|Pair
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|roundTrip
parameter_list|(
specifier|final
name|String
name|tag
parameter_list|,
specifier|final
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|buildPartHandlePayload
argument_list|(
name|tag
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
name|parsePartHandlePayload
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

