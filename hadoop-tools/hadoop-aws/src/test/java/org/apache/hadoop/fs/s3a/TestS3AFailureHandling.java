begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AmazonS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractFSContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractFSContractTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|s3a
operator|.
name|S3AContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test S3A Failure translation, including a functional test  * generating errors during stream IO.  */
end_comment

begin_class
DECL|class|TestS3AFailureHandling
specifier|public
class|class
name|TestS3AFailureHandling
extends|extends
name|AbstractFSContractTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestS3AFailureHandling
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createContract (Configuration conf)
specifier|protected
name|AbstractFSContract
name|createContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|S3AContract
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testReadFileChanged ()
specifier|public
name|void
name|testReadFileChanged
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"overwrite a file with a shorter one during a read, seek"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fullLength
init|=
literal|8192
decl_stmt|;
specifier|final
name|byte
index|[]
name|fullDataset
init|=
name|dataset
argument_list|(
name|fullLength
argument_list|,
literal|'a'
argument_list|,
literal|32
argument_list|)
decl_stmt|;
specifier|final
name|int
name|shortLen
init|=
literal|4096
decl_stmt|;
specifier|final
name|byte
index|[]
name|shortDataset
init|=
name|dataset
argument_list|(
name|shortLen
argument_list|,
literal|'A'
argument_list|,
literal|32
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|testpath
init|=
name|path
argument_list|(
literal|"readFileToChange.txt"
argument_list|)
decl_stmt|;
comment|// initial write
name|writeDataset
argument_list|(
name|fs
argument_list|,
name|testpath
argument_list|,
name|fullDataset
argument_list|,
name|fullDataset
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|instream
init|=
name|fs
operator|.
name|open
argument_list|(
name|testpath
argument_list|)
init|)
block|{
name|instream
operator|.
name|seek
argument_list|(
name|fullLength
operator|-
literal|16
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no data to read"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// overwrite
name|writeDataset
argument_list|(
name|fs
argument_list|,
name|testpath
argument_list|,
name|shortDataset
argument_list|,
name|shortDataset
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// here the file length is less. Probe the file to see if this is true,
comment|// with a spin and wait
name|eventually
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|shortLen
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testpath
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// here length is shorter. Assuming it has propagated to all replicas,
comment|// the position of the input stream is now beyond the EOF.
comment|// An attempt to seek backwards to a position greater than the
comment|// short length will raise an exception from AWS S3, which must be
comment|// translated into an EOF
name|instream
operator|.
name|seek
argument_list|(
name|shortLen
operator|+
literal|1024
argument_list|)
expr_stmt|;
name|int
name|c
init|=
name|instream
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertIsEOF
argument_list|(
literal|"read()"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
name|assertIsEOF
argument_list|(
literal|"read(buffer)"
argument_list|,
name|instream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|assertIsEOF
argument_list|(
literal|"read(offset)"
argument_list|,
name|instream
operator|.
name|read
argument_list|(
name|instream
operator|.
name|getPos
argument_list|()
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// now do a block read fully, again, backwards from the current pos
try|try
block|{
name|instream
operator|.
name|readFully
argument_list|(
name|shortLen
operator|+
literal|512
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected readFully to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Expected EOF: "
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|assertIsEOF
argument_list|(
literal|"read(offset)"
argument_list|,
name|instream
operator|.
name|read
argument_list|(
name|shortLen
operator|+
literal|510
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// seek somewhere useful
name|instream
operator|.
name|seek
argument_list|(
name|shortLen
operator|-
literal|256
argument_list|)
expr_stmt|;
comment|// delete the file. Reads must fail
name|fs
operator|.
name|delete
argument_list|(
name|testpath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|r
init|=
name|instream
operator|.
name|read
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|instream
operator|.
name|readFully
argument_list|(
literal|2048
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected readFully to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
comment|/**    * Assert that a read operation returned an EOF value.    * @param operation specific operation    * @param readResult result    */
DECL|method|assertIsEOF (String operation, int readResult)
specifier|private
name|void
name|assertIsEOF
parameter_list|(
name|String
name|operation
parameter_list|,
name|int
name|readResult
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Expected EOF from "
operator|+
name|operation
operator|+
literal|"; got char "
operator|+
operator|(
name|char
operator|)
name|readResult
argument_list|,
operator|-
literal|1
argument_list|,
name|readResult
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test404isNotFound ()
specifier|public
name|void
name|test404isNotFound
parameter_list|()
throws|throws
name|Throwable
block|{
name|verifyTranslated
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|createS3Exception
argument_list|(
literal|404
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTranslated (Class clazz, AmazonClientException exception)
specifier|protected
name|Exception
name|verifyTranslated
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|AmazonClientException
name|exception
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|verifyExceptionClass
argument_list|(
name|clazz
argument_list|,
name|translateException
argument_list|(
literal|"test"
argument_list|,
literal|"/"
argument_list|,
name|exception
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|test401isNotPermittedFound ()
specifier|public
name|void
name|test401isNotPermittedFound
parameter_list|()
throws|throws
name|Throwable
block|{
name|verifyTranslated
argument_list|(
name|AccessDeniedException
operator|.
name|class
argument_list|,
name|createS3Exception
argument_list|(
literal|401
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createS3Exception (int code)
specifier|protected
name|AmazonS3Exception
name|createS3Exception
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|AmazonS3Exception
name|source
init|=
operator|new
name|AmazonS3Exception
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|source
operator|.
name|setStatusCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
annotation|@
name|Test
DECL|method|testGenericS3Exception ()
specifier|public
name|void
name|testGenericS3Exception
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// S3 exception of no known type
name|AWSS3IOException
name|ex
init|=
operator|(
name|AWSS3IOException
operator|)
name|verifyTranslated
argument_list|(
name|AWSS3IOException
operator|.
name|class
argument_list|,
name|createS3Exception
argument_list|(
literal|451
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|451
argument_list|,
name|ex
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenericServiceS3Exception ()
specifier|public
name|void
name|testGenericServiceS3Exception
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// service exception of no known type
name|AmazonServiceException
name|ase
init|=
operator|new
name|AmazonServiceException
argument_list|(
literal|"unwind"
argument_list|)
decl_stmt|;
name|ase
operator|.
name|setStatusCode
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|AWSServiceIOException
name|ex
init|=
operator|(
name|AWSServiceIOException
operator|)
name|verifyTranslated
argument_list|(
name|AWSServiceIOException
operator|.
name|class
argument_list|,
name|ase
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|ex
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenericClientException ()
specifier|public
name|void
name|testGenericClientException
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Generic Amazon exception
name|verifyTranslated
argument_list|(
name|AWSClientIOException
operator|.
name|class
argument_list|,
operator|new
name|AmazonClientException
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

