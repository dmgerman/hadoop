begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|s3a
operator|.
name|S3AContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test whether or not encryption settings propagate by choosing an invalid  * one. We expect the S3AFileSystem to fail to initialize.  */
end_comment

begin_class
annotation|@
name|Ignore
DECL|class|ITestS3AEncryptionAlgorithmValidation
specifier|public
class|class
name|ITestS3AEncryptionAlgorithmValidation
extends|extends
name|AbstractS3ATestBase
block|{
annotation|@
name|Test
DECL|method|testEncryptionAlgorithmSetToDES ()
specifier|public
name|void
name|testEncryptionAlgorithmSetToDES
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//skip tests if they aren't enabled
name|assumeEnabled
argument_list|()
expr_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"Unknown Server Side algorithm DES"
argument_list|,
parameter_list|()
lambda|->
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
comment|//DES is an invalid encryption algorithm
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|,
literal|"DES"
argument_list|)
expr_stmt|;
name|S3AContract
name|contract
init|=
operator|(
name|S3AContract
operator|)
name|createContract
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|contract
operator|.
name|init
argument_list|()
expr_stmt|;
comment|//extract the test FS
name|FileSystem
name|fileSystem
init|=
name|contract
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null filesystem"
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
name|URI
name|fsURI
init|=
name|fileSystem
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test filesystem = {} implemented by {}"
argument_list|,
name|fsURI
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong filesystem of "
operator|+
name|fsURI
argument_list|,
name|contract
operator|.
name|getScheme
argument_list|()
argument_list|,
name|fsURI
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|initialize
argument_list|(
name|fsURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Do not reach here"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionAlgorithmSSECWithNoEncryptionKey ()
specifier|public
name|void
name|testEncryptionAlgorithmSSECWithNoEncryptionKey
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//skip tests if they aren't enabled
name|assumeEnabled
argument_list|()
expr_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|"The value of property "
operator|+
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
operator|+
literal|" must not be null"
argument_list|,
parameter_list|()
lambda|->
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
comment|//SSE-C must be configured with an encryption key
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|,
name|S3AEncryptionMethods
operator|.
name|SSE_C
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|S3AContract
name|contract
init|=
operator|(
name|S3AContract
operator|)
name|createContract
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|contract
operator|.
name|init
argument_list|()
expr_stmt|;
comment|//extract the test FS
name|FileSystem
name|fileSystem
init|=
name|contract
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null filesystem"
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
name|URI
name|fsURI
init|=
name|fileSystem
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test filesystem = {} implemented by {}"
argument_list|,
name|fsURI
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong filesystem of "
operator|+
name|fsURI
argument_list|,
name|contract
operator|.
name|getScheme
argument_list|()
argument_list|,
name|fsURI
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|initialize
argument_list|(
name|fsURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Do not reach here"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionAlgorithmSSECWithBlankEncryptionKey ()
specifier|public
name|void
name|testEncryptionAlgorithmSSECWithBlankEncryptionKey
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|SSE_C_NO_KEY_ERROR
argument_list|,
parameter_list|()
lambda|->
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
comment|//SSE-C must be configured with an encryption key
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|,
name|S3AEncryptionMethods
operator|.
name|SSE_C
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|S3AContract
name|contract
init|=
operator|(
name|S3AContract
operator|)
name|createContract
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|contract
operator|.
name|init
argument_list|()
expr_stmt|;
comment|//extract the test FS
name|FileSystem
name|fileSystem
init|=
name|contract
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null filesystem"
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
name|URI
name|fsURI
init|=
name|fileSystem
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test filesystem = {} implemented by {}"
argument_list|,
name|fsURI
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong filesystem of "
operator|+
name|fsURI
argument_list|,
name|contract
operator|.
name|getScheme
argument_list|()
argument_list|,
name|fsURI
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|initialize
argument_list|(
name|fsURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Do not reach here"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionAlgorithmSSES3WithEncryptionKey ()
specifier|public
name|void
name|testEncryptionAlgorithmSSES3WithEncryptionKey
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//skip tests if they aren't enabled
name|assumeEnabled
argument_list|()
expr_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|SSE_S3_WITH_KEY_ERROR
argument_list|,
parameter_list|()
lambda|->
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
comment|//SSE-S3 cannot be configured with an encryption key
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|,
name|S3AEncryptionMethods
operator|.
name|SSE_S3
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
argument_list|,
literal|"4niV/jPK5VFRHY+KNb6wtqYd4xXyMgdJ9XQJpcQUVbs="
argument_list|)
expr_stmt|;
name|S3AContract
name|contract
init|=
operator|(
name|S3AContract
operator|)
name|createContract
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|contract
operator|.
name|init
argument_list|()
expr_stmt|;
comment|//extract the test FS
name|FileSystem
name|fileSystem
init|=
name|contract
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null filesystem"
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
name|URI
name|fsURI
init|=
name|fileSystem
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test filesystem = {} implemented by {}"
argument_list|,
name|fsURI
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong filesystem of "
operator|+
name|fsURI
argument_list|,
name|contract
operator|.
name|getScheme
argument_list|()
argument_list|,
name|fsURI
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|initialize
argument_list|(
name|fsURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Do not reach here"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make this a no-op so test setup doesn't fail.    * @param path path path    * @throws IOException on any failure    */
annotation|@
name|Override
DECL|method|mkdirs (Path path)
specifier|protected
name|void
name|mkdirs
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{    }
block|}
end_class

end_unit

