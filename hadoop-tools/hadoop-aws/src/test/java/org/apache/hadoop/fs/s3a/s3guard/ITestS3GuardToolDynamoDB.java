begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|DynamoDB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardTool
operator|.
name|Destroy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardTool
operator|.
name|Init
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_comment
comment|/**  * Test S3Guard related CLI commands against DynamoDB.  */
end_comment

begin_class
DECL|class|ITestS3GuardToolDynamoDB
specifier|public
class|class
name|ITestS3GuardToolDynamoDB
extends|extends
name|AbstractS3GuardToolTestBase
block|{
annotation|@
name|Override
DECL|method|newMetadataStore ()
specifier|protected
name|MetadataStore
name|newMetadataStore
parameter_list|()
block|{
return|return
operator|new
name|DynamoDBMetadataStore
argument_list|()
return|;
block|}
comment|// Check the existence of a given DynamoDB table.
DECL|method|exist (DynamoDB dynamoDB, String tableName)
specifier|private
specifier|static
name|boolean
name|exist
parameter_list|(
name|DynamoDB
name|dynamoDB
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|dynamoDB
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"empty table name"
argument_list|,
name|tableName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|dynamoDB
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|describe
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
DECL|method|testInvalidRegion ()
specifier|public
name|void
name|testInvalidRegion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testTableName
init|=
literal|"testInvalidRegion"
operator|+
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testRegion
init|=
literal|"invalidRegion"
decl_stmt|;
comment|// Initialize MetadataStore
specifier|final
name|Init
name|initCmd
init|=
operator|new
name|Init
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
operator|new
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|initCmd
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"init"
block|,
literal|"-region"
block|,
name|testRegion
block|,
literal|"-meta"
block|,
literal|"dynamodb://"
operator|+
name|testTableName
block|}
argument_list|)
decl_stmt|;
return|return
literal|"Use of invalid region did not fail, returning "
operator|+
name|res
operator|+
literal|"- table may have been "
operator|+
literal|"created and not cleaned up: "
operator|+
name|testTableName
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDynamoDBInitDestroyCycle ()
specifier|public
name|void
name|testDynamoDBInitDestroyCycle
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testTableName
init|=
literal|"testDynamoDBInitDestroy"
operator|+
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|testS3Url
init|=
name|path
argument_list|(
name|testTableName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|DynamoDB
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Initialize MetadataStore
name|Init
name|initCmd
init|=
operator|new
name|Init
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|expectSuccess
argument_list|(
literal|"Init command did not exit successfully - see output"
argument_list|,
name|initCmd
argument_list|,
literal|"init"
argument_list|,
literal|"-meta"
argument_list|,
literal|"dynamodb://"
operator|+
name|testTableName
argument_list|,
name|testS3Url
argument_list|)
expr_stmt|;
comment|// Verify it exists
name|MetadataStore
name|ms
init|=
name|getMetadataStore
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"metadata store should be DynamoDBMetadataStore"
argument_list|,
name|ms
operator|instanceof
name|DynamoDBMetadataStore
argument_list|)
expr_stmt|;
name|DynamoDBMetadataStore
name|dynamoMs
init|=
operator|(
name|DynamoDBMetadataStore
operator|)
name|ms
decl_stmt|;
name|db
operator|=
name|dynamoMs
operator|.
name|getDynamoDB
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s does not exist"
argument_list|,
name|testTableName
argument_list|)
argument_list|,
name|exist
argument_list|(
name|db
argument_list|,
name|testTableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Destroy MetadataStore
name|Destroy
name|destroyCmd
init|=
operator|new
name|Destroy
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|expectSuccess
argument_list|(
literal|"Destroy command did not exit successfully - see output"
argument_list|,
name|destroyCmd
argument_list|,
literal|"destroy"
argument_list|,
literal|"-meta"
argument_list|,
literal|"dynamodb://"
operator|+
name|testTableName
argument_list|,
name|testS3Url
argument_list|)
expr_stmt|;
comment|// Verify it does not exist
name|assertFalse
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s still exists"
argument_list|,
name|testTableName
argument_list|)
argument_list|,
name|exist
argument_list|(
name|db
argument_list|,
name|testTableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete again and expect success again
name|expectSuccess
argument_list|(
literal|"Destroy command did not exit successfully - see output"
argument_list|,
name|destroyCmd
argument_list|,
literal|"destroy"
argument_list|,
literal|"-meta"
argument_list|,
literal|"dynamodb://"
operator|+
name|testTableName
argument_list|,
name|testS3Url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"DynamoDB table %s does not exist"
argument_list|,
name|testTableName
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Table may have not been cleaned up: "
operator|+
name|testTableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|Table
name|table
init|=
name|db
operator|.
name|getTable
argument_list|(
name|testTableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|table
operator|.
name|delete
argument_list|()
expr_stmt|;
name|table
operator|.
name|waitForDelete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
comment|/* Ignore */
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

