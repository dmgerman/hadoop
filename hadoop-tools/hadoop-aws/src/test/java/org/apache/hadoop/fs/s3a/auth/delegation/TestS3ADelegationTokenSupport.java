begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AEncryptionMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|MarshalledCredentialBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|MarshalledCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|FULL_TOKEN_KIND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|SESSION_TOKEN_KIND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Unit tests related to S3A DT support.  */
end_comment

begin_class
DECL|class|TestS3ADelegationTokenSupport
specifier|public
class|class
name|TestS3ADelegationTokenSupport
block|{
DECL|field|landsatUri
specifier|private
specifier|static
name|URI
name|landsatUri
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|classSetup ()
specifier|public
specifier|static
name|void
name|classSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|landsatUri
operator|=
operator|new
name|URI
argument_list|(
name|S3ATestConstants
operator|.
name|DEFAULT_CSVTEST_FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSessionTokenKind ()
specifier|public
name|void
name|testSessionTokenKind
parameter_list|()
throws|throws
name|Throwable
block|{
name|AbstractS3ATokenIdentifier
name|identifier
init|=
operator|new
name|SessionTokenIdentifier
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SESSION_TOKEN_KIND
argument_list|,
name|identifier
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSessionTokenDecode ()
specifier|public
name|void
name|testSessionTokenDecode
parameter_list|()
throws|throws
name|Throwable
block|{
name|Text
name|alice
init|=
operator|new
name|Text
argument_list|(
literal|"alice"
argument_list|)
decl_stmt|;
name|Text
name|renewer
init|=
operator|new
name|Text
argument_list|(
literal|"yarn"
argument_list|)
decl_stmt|;
name|AbstractS3ATokenIdentifier
name|identifier
init|=
operator|new
name|SessionTokenIdentifier
argument_list|(
name|SESSION_TOKEN_KIND
argument_list|,
name|alice
argument_list|,
name|renewer
argument_list|,
operator|new
name|URI
argument_list|(
literal|"s3a://landsat-pds/"
argument_list|)
argument_list|,
operator|new
name|MarshalledCredentials
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|EncryptionSecrets
argument_list|(
name|S3AEncryptionMethods
operator|.
name|SSE_S3
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|"origin"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
name|t1
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|identifier
argument_list|,
operator|new
name|SessionSecretManager
argument_list|()
argument_list|)
decl_stmt|;
name|AbstractS3ATokenIdentifier
name|decoded
init|=
name|t1
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|decoded
operator|.
name|validate
argument_list|()
expr_stmt|;
name|MarshalledCredentials
name|creds
init|=
operator|(
operator|(
name|SessionTokenIdentifier
operator|)
name|decoded
operator|)
operator|.
name|getMarshalledCredentials
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"credentials"
argument_list|,
name|MarshalledCredentialBinding
operator|.
name|toAWSCredentials
argument_list|(
name|creds
argument_list|,
name|MarshalledCredentials
operator|.
name|CredentialTypeRequired
operator|.
name|AnyNonEmpty
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|alice
argument_list|,
name|decoded
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|decodedUser
init|=
name|decoded
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"name of "
operator|+
name|decodedUser
argument_list|,
literal|"alice"
argument_list|,
name|decodedUser
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"renewer"
argument_list|,
name|renewer
argument_list|,
name|decoded
operator|.
name|getRenewer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Authentication method of "
operator|+
name|decodedUser
argument_list|,
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|TOKEN
argument_list|,
name|decodedUser
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"origin"
argument_list|,
name|decoded
operator|.
name|getOrigin
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullTokenKind ()
specifier|public
name|void
name|testFullTokenKind
parameter_list|()
throws|throws
name|Throwable
block|{
name|AbstractS3ATokenIdentifier
name|identifier
init|=
operator|new
name|FullCredentialsTokenIdentifier
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|FULL_TOKEN_KIND
argument_list|,
name|identifier
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSessionTokenIdentifierRoundTrip ()
specifier|public
name|void
name|testSessionTokenIdentifierRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|Text
name|renewer
init|=
operator|new
name|Text
argument_list|(
literal|"yarn"
argument_list|)
decl_stmt|;
name|SessionTokenIdentifier
name|id
init|=
operator|new
name|SessionTokenIdentifier
argument_list|(
name|SESSION_TOKEN_KIND
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
name|renewer
argument_list|,
name|landsatUri
argument_list|,
operator|new
name|MarshalledCredentials
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
operator|new
name|EncryptionSecrets
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|SessionTokenIdentifier
name|result
init|=
name|S3ATestUtils
operator|.
name|roundTrip
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|ids
init|=
name|id
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI in "
operator|+
name|ids
argument_list|,
name|id
operator|.
name|getUri
argument_list|()
argument_list|,
name|result
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"credentials in "
operator|+
name|ids
argument_list|,
name|id
operator|.
name|getMarshalledCredentials
argument_list|()
argument_list|,
name|result
operator|.
name|getMarshalledCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"renewer in "
operator|+
name|ids
argument_list|,
name|renewer
argument_list|,
name|id
operator|.
name|getRenewer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSessionTokenIdentifierRoundTripNoRenewer ()
specifier|public
name|void
name|testSessionTokenIdentifierRoundTripNoRenewer
parameter_list|()
throws|throws
name|Throwable
block|{
name|SessionTokenIdentifier
name|id
init|=
operator|new
name|SessionTokenIdentifier
argument_list|(
name|SESSION_TOKEN_KIND
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
literal|null
argument_list|,
name|landsatUri
argument_list|,
operator|new
name|MarshalledCredentials
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
operator|new
name|EncryptionSecrets
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|SessionTokenIdentifier
name|result
init|=
name|S3ATestUtils
operator|.
name|roundTrip
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|ids
init|=
name|id
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI in "
operator|+
name|ids
argument_list|,
name|id
operator|.
name|getUri
argument_list|()
argument_list|,
name|result
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"credentials in "
operator|+
name|ids
argument_list|,
name|id
operator|.
name|getMarshalledCredentials
argument_list|()
argument_list|,
name|result
operator|.
name|getMarshalledCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"renewer in "
operator|+
name|ids
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
name|id
operator|.
name|getRenewer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRoleTokenIdentifierRoundTrip ()
specifier|public
name|void
name|testRoleTokenIdentifierRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|RoleTokenIdentifier
name|id
init|=
operator|new
name|RoleTokenIdentifier
argument_list|(
name|landsatUri
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
operator|new
name|MarshalledCredentials
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
operator|new
name|EncryptionSecrets
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|RoleTokenIdentifier
name|result
init|=
name|S3ATestUtils
operator|.
name|roundTrip
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|ids
init|=
name|id
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI in "
operator|+
name|ids
argument_list|,
name|id
operator|.
name|getUri
argument_list|()
argument_list|,
name|result
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"credentials in "
operator|+
name|ids
argument_list|,
name|id
operator|.
name|getMarshalledCredentials
argument_list|()
argument_list|,
name|result
operator|.
name|getMarshalledCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"renewer in "
operator|+
name|ids
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
name|id
operator|.
name|getRenewer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullTokenIdentifierRoundTrip ()
specifier|public
name|void
name|testFullTokenIdentifierRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|Text
name|renewer
init|=
operator|new
name|Text
argument_list|(
literal|"renewerName"
argument_list|)
decl_stmt|;
name|FullCredentialsTokenIdentifier
name|id
init|=
operator|new
name|FullCredentialsTokenIdentifier
argument_list|(
name|landsatUri
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
name|renewer
argument_list|,
operator|new
name|MarshalledCredentials
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|EncryptionSecrets
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|FullCredentialsTokenIdentifier
name|result
init|=
name|S3ATestUtils
operator|.
name|roundTrip
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|ids
init|=
name|id
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI in "
operator|+
name|ids
argument_list|,
name|id
operator|.
name|getUri
argument_list|()
argument_list|,
name|result
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"credentials in "
operator|+
name|ids
argument_list|,
name|id
operator|.
name|getMarshalledCredentials
argument_list|()
argument_list|,
name|result
operator|.
name|getMarshalledCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"renewer in "
operator|+
name|ids
argument_list|,
name|renewer
argument_list|,
name|result
operator|.
name|getRenewer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * The secret manager always uses the same secret; the    * factory for new identifiers is that of the token manager.    */
DECL|class|SessionSecretManager
specifier|private
class|class
name|SessionSecretManager
extends|extends
name|SecretManager
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createPassword (AbstractS3ATokenIdentifier identifier)
specifier|protected
name|byte
index|[]
name|createPassword
parameter_list|(
name|AbstractS3ATokenIdentifier
name|identifier
parameter_list|)
block|{
return|return
literal|"PASSWORD"
operator|.
name|getBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|retrievePassword (AbstractS3ATokenIdentifier identifier)
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|AbstractS3ATokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|InvalidToken
block|{
return|return
literal|"PASSWORD"
operator|.
name|getBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|AbstractS3ATokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|SessionTokenIdentifier
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

