begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProviderFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestS3Credentials
specifier|public
class|class
name|TestS3Credentials
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestS3Credentials
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|test
specifier|public
specifier|final
name|TestName
name|test
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|announce ()
specifier|public
name|void
name|announce
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running test "
operator|+
name|test
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|EXAMPLE_ID
specifier|private
specifier|static
specifier|final
name|String
name|EXAMPLE_ID
init|=
literal|"AKASOMEACCESSKEY"
decl_stmt|;
DECL|field|EXAMPLE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|EXAMPLE_KEY
init|=
literal|"RGV0cm9pdCBSZ/WQgY2xl/YW5lZCB1cAEXAMPLE"
decl_stmt|;
annotation|@
name|Test
DECL|method|testInvalidHostnameWithUnderscores ()
specifier|public
name|void
name|testInvalidHostnameWithUnderscores
parameter_list|()
throws|throws
name|Exception
block|{
name|S3Credentials
name|s3Credentials
init|=
operator|new
name|S3Credentials
argument_list|()
decl_stmt|;
try|try
block|{
name|s3Credentials
operator|.
name|initialize
argument_list|(
operator|new
name|URI
argument_list|(
literal|"s3://a:b@c_d"
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid hostname in URI s3://a:b@c_d"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPlaintextConfigPassword ()
specifier|public
name|void
name|testPlaintextConfigPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|S3Credentials
name|s3Credentials
init|=
operator|new
name|S3Credentials
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.s3.awsAccessKeyId"
argument_list|,
name|EXAMPLE_ID
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.s3.awsSecretAccessKey"
argument_list|,
name|EXAMPLE_KEY
argument_list|)
expr_stmt|;
name|s3Credentials
operator|.
name|initialize
argument_list|(
operator|new
name|URI
argument_list|(
literal|"s3://foobar"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Could not retrieve proper access key"
argument_list|,
name|EXAMPLE_ID
argument_list|,
name|s3Credentials
operator|.
name|getAccessKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Could not retrieve proper secret"
argument_list|,
name|EXAMPLE_KEY
argument_list|,
name|s3Credentials
operator|.
name|getSecretAccessKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPlaintextConfigPasswordWithWhitespace ()
specifier|public
name|void
name|testPlaintextConfigPasswordWithWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|S3Credentials
name|s3Credentials
init|=
operator|new
name|S3Credentials
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.s3.awsAccessKeyId"
argument_list|,
literal|"\r\n "
operator|+
name|EXAMPLE_ID
operator|+
literal|" \r\n"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.s3.awsSecretAccessKey"
argument_list|,
literal|"\r\n "
operator|+
name|EXAMPLE_KEY
operator|+
literal|" \r\n"
argument_list|)
expr_stmt|;
name|s3Credentials
operator|.
name|initialize
argument_list|(
operator|new
name|URI
argument_list|(
literal|"s3://foobar"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Could not retrieve proper access key"
argument_list|,
name|EXAMPLE_ID
argument_list|,
name|s3Credentials
operator|.
name|getAccessKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Could not retrieve proper secret"
argument_list|,
name|EXAMPLE_KEY
argument_list|,
name|s3Credentials
operator|.
name|getSecretAccessKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|tempDir
specifier|public
specifier|final
name|TemporaryFolder
name|tempDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testCredentialProvider ()
specifier|public
name|void
name|testCredentialProvider
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up conf to have a cred provider
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|File
name|file
init|=
name|tempDir
operator|.
name|newFile
argument_list|(
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|jks
init|=
name|ProviderUtils
operator|.
name|nestURIForLocalJavaKeyStoreProvider
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|jks
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// add our creds to the provider
specifier|final
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
literal|"fs.s3.awsSecretAccessKey"
argument_list|,
name|EXAMPLE_KEY
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// make sure S3Creds can retrieve things.
name|S3Credentials
name|s3Credentials
init|=
operator|new
name|S3Credentials
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.s3.awsAccessKeyId"
argument_list|,
name|EXAMPLE_ID
argument_list|)
expr_stmt|;
name|s3Credentials
operator|.
name|initialize
argument_list|(
operator|new
name|URI
argument_list|(
literal|"s3://foobar"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Could not retrieve proper access key"
argument_list|,
name|EXAMPLE_ID
argument_list|,
name|s3Credentials
operator|.
name|getAccessKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Could not retrieve proper secret"
argument_list|,
name|EXAMPLE_KEY
argument_list|,
name|s3Credentials
operator|.
name|getSecretAccessKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
annotation|@
name|Ignore
DECL|method|noSecretShouldThrow ()
specifier|public
name|void
name|noSecretShouldThrow
parameter_list|()
throws|throws
name|Exception
block|{
name|S3Credentials
name|s3Credentials
init|=
operator|new
name|S3Credentials
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.s3.awsAccessKeyId"
argument_list|,
name|EXAMPLE_ID
argument_list|)
expr_stmt|;
name|s3Credentials
operator|.
name|initialize
argument_list|(
operator|new
name|URI
argument_list|(
literal|"s3://foobar"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
annotation|@
name|Ignore
DECL|method|noAccessIdShouldThrow ()
specifier|public
name|void
name|noAccessIdShouldThrow
parameter_list|()
throws|throws
name|Exception
block|{
name|S3Credentials
name|s3Credentials
init|=
operator|new
name|S3Credentials
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.s3.awsSecretAccessKey"
argument_list|,
name|EXAMPLE_KEY
argument_list|)
expr_stmt|;
name|s3Credentials
operator|.
name|initialize
argument_list|(
operator|new
name|URI
argument_list|(
literal|"s3://foobar"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

