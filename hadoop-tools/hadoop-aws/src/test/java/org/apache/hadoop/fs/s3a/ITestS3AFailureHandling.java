begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|MultiObjectDeleteException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
operator|.
name|MultiObjectDeleteSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|test
operator|.
name|ExtraAssertions
operator|.
name|failIf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
operator|.
name|MultiObjectDeleteSupport
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
operator|.
name|TestPartialDeleteFailures
operator|.
name|keysToDelete
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * ITest for failure handling, primarily multipart deletion.  */
end_comment

begin_class
DECL|class|ITestS3AFailureHandling
specifier|public
class|class
name|ITestS3AFailureHandling
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3AFailureHandling
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|Constants
operator|.
name|ENABLE_MULTI_DELETE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Assert that a read operation returned an EOF value.    * @param operation specific operation    * @param readResult result    */
DECL|method|assertIsEOF (String operation, int readResult)
specifier|private
name|void
name|assertIsEOF
parameter_list|(
name|String
name|operation
parameter_list|,
name|int
name|readResult
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Expected EOF from "
operator|+
name|operation
operator|+
literal|"; got char "
operator|+
operator|(
name|char
operator|)
name|readResult
argument_list|,
operator|-
literal|1
argument_list|,
name|readResult
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiObjectDeleteNoFile ()
specifier|public
name|void
name|testMultiObjectDeleteNoFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Deleting a missing object"
argument_list|)
expr_stmt|;
name|removeKeys
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
literal|"ITestS3AFailureHandling/missingFile"
argument_list|)
expr_stmt|;
block|}
DECL|method|removeKeys (S3AFileSystem fileSystem, String... keys)
specifier|private
name|void
name|removeKeys
parameter_list|(
name|S3AFileSystem
name|fileSystem
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
throws|throws
name|IOException
block|{
name|fileSystem
operator|.
name|removeKeys
argument_list|(
name|buildDeleteRequest
argument_list|(
name|keys
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|buildDeleteRequest ( final String[] keys)
specifier|private
name|List
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
name|buildDeleteRequest
parameter_list|(
specifier|final
name|String
index|[]
name|keys
parameter_list|)
block|{
name|List
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
name|request
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|keys
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|request
operator|.
name|add
argument_list|(
operator|new
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
annotation|@
name|Test
DECL|method|testMultiObjectDeleteSomeFiles ()
specifier|public
name|void
name|testMultiObjectDeleteSomeFiles
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|valid
init|=
name|path
argument_list|(
literal|"ITestS3AFailureHandling/validFile"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|valid
argument_list|)
expr_stmt|;
name|NanoTimer
name|timer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|removeKeys
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|pathToKey
argument_list|(
name|valid
argument_list|)
argument_list|,
literal|"ITestS3AFailureHandling/missingFile"
argument_list|)
expr_stmt|;
name|timer
operator|.
name|end
argument_list|(
literal|"removeKeys"
argument_list|)
expr_stmt|;
block|}
DECL|method|maybeGetCsvPath ()
specifier|private
name|Path
name|maybeGetCsvPath
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|csvFile
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|KEY_CSVTEST_FILE
argument_list|,
name|DEFAULT_CSVTEST_FILE
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"CSV test file is not the default"
argument_list|,
name|DEFAULT_CSVTEST_FILE
operator|.
name|equals
argument_list|(
name|csvFile
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|csvFile
argument_list|)
return|;
block|}
comment|/**    * Test low-level failure handling with low level delete request.    */
annotation|@
name|Test
DECL|method|testMultiObjectDeleteNoPermissions ()
specifier|public
name|void
name|testMultiObjectDeleteNoPermissions
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Delete the landsat CSV file and expect it to fail"
argument_list|)
expr_stmt|;
name|Path
name|csvPath
init|=
name|maybeGetCsvPath
argument_list|()
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
operator|(
name|S3AFileSystem
operator|)
name|csvPath
operator|.
name|getFileSystem
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
name|keys
init|=
name|buildDeleteRequest
argument_list|(
operator|new
name|String
index|[]
block|{
name|fs
operator|.
name|pathToKey
argument_list|(
name|csvPath
argument_list|)
block|,
literal|"missing-key.csv"
block|}
argument_list|)
decl_stmt|;
name|MultiObjectDeleteException
name|ex
init|=
name|intercept
argument_list|(
name|MultiObjectDeleteException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|removeKeys
argument_list|(
name|keys
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|undeleted
init|=
name|extractUndeletedPaths
argument_list|(
name|ex
argument_list|,
name|fs
operator|::
name|keyToQualifiedPath
argument_list|)
decl_stmt|;
name|String
name|undeletedFiles
init|=
name|join
argument_list|(
name|undeleted
argument_list|)
decl_stmt|;
name|failIf
argument_list|(
name|undeleted
operator|.
name|size
argument_list|()
operator|!=
literal|2
argument_list|,
literal|"undeleted list size wrong: "
operator|+
name|undeletedFiles
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no CSV in "
operator|+
name|undeletedFiles
argument_list|,
name|undeleted
operator|.
name|contains
argument_list|(
name|csvPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// and a full split, after adding a new key
name|String
name|marker
init|=
literal|"/marker"
decl_stmt|;
name|Path
name|markerPath
init|=
name|fs
operator|.
name|keyToQualifiedPath
argument_list|(
name|marker
argument_list|)
decl_stmt|;
name|keys
operator|.
name|add
argument_list|(
operator|new
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|(
name|marker
argument_list|)
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|List
argument_list|<
name|Path
argument_list|>
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|pair
init|=
operator|new
name|MultiObjectDeleteSupport
argument_list|(
name|fs
operator|.
name|createStoreContext
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|splitUndeletedKeys
argument_list|(
name|ex
argument_list|,
name|keys
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|undeleted
argument_list|,
name|pair
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|right
init|=
name|pair
operator|.
name|getRight
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong size for "
operator|+
name|join
argument_list|(
name|right
argument_list|)
argument_list|,
literal|1
argument_list|,
name|right
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|markerPath
argument_list|,
name|right
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * See what happens when you delete two entries which do not exist.    * It must not raise an exception.    */
annotation|@
name|Test
DECL|method|testMultiObjectDeleteMissingEntriesSucceeds ()
specifier|public
name|void
name|testMultiObjectDeleteMissingEntriesSucceeds
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Delete keys which don't exist"
argument_list|)
expr_stmt|;
name|Path
name|base
init|=
name|path
argument_list|(
literal|"missing"
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
name|keys
init|=
name|keysToDelete
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|removeKeys
argument_list|(
name|keys
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|join (final Iterable iterable)
specifier|private
name|String
name|join
parameter_list|(
specifier|final
name|Iterable
name|iterable
parameter_list|)
block|{
return|return
literal|"["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|iterable
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/**    * Test low-level failure handling with a single-entry file.    * This is deleted as a single call, so isn't that useful.    */
annotation|@
name|Test
DECL|method|testSingleObjectDeleteNoPermissionsTranslated ()
specifier|public
name|void
name|testSingleObjectDeleteNoPermissionsTranslated
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Delete the landsat CSV file and expect it to fail"
argument_list|)
expr_stmt|;
name|Path
name|csvPath
init|=
name|maybeGetCsvPath
argument_list|()
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
operator|(
name|S3AFileSystem
operator|)
name|csvPath
operator|.
name|getFileSystem
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|AccessDeniedException
name|aex
init|=
name|intercept
argument_list|(
name|AccessDeniedException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|delete
argument_list|(
name|csvPath
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Throwable
name|cause
init|=
name|aex
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|failIf
argument_list|(
name|cause
operator|==
literal|null
argument_list|,
literal|"no nested exception"
argument_list|,
name|aex
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

