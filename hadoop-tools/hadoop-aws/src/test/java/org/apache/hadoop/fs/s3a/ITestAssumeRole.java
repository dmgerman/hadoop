begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|securitytoken
operator|.
name|model
operator|.
name|AWSSecurityTokenServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Tests use of assumed roles.  * Only run if an assumed role is provided.  */
end_comment

begin_class
DECL|class|ITestAssumeRole
specifier|public
class|class
name|ITestAssumeRole
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestAssumeRole
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ARN_EXAMPLE
specifier|private
specifier|static
specifier|final
name|String
name|ARN_EXAMPLE
init|=
literal|"arn:aws:kms:eu-west-1:00000000000:key/"
operator|+
literal|"0000000-16c9-4832-a1a9-c8bbef25ec8b"
decl_stmt|;
DECL|field|E_BAD_ROLE
specifier|private
specifier|static
specifier|final
name|String
name|E_BAD_ROLE
init|=
literal|"Not authorized to perform sts:AssumeRole"
decl_stmt|;
comment|/**    * This is AWS policy removes read access.    */
DECL|field|RESTRICTED_POLICY
specifier|public
specifier|static
specifier|final
name|String
name|RESTRICTED_POLICY
init|=
literal|"{\n"
operator|+
literal|"   \"Version\": \"2012-10-17\",\n"
operator|+
literal|"   \"Statement\": [{\n"
operator|+
literal|"      \"Effect\": \"Deny\",\n"
operator|+
literal|"      \"Action\": \"s3:ListObjects\",\n"
operator|+
literal|"      \"Resource\": \"*\"\n"
operator|+
literal|"    }\n"
operator|+
literal|"   ]\n"
operator|+
literal|"}"
decl_stmt|;
DECL|method|assumeRoleTests ()
specifier|private
name|void
name|assumeRoleTests
parameter_list|()
block|{
name|assume
argument_list|(
literal|"No ARN for role tests"
argument_list|,
operator|!
name|getAssumedRoleARN
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getAssumedRoleARN ()
specifier|private
name|String
name|getAssumedRoleARN
parameter_list|()
block|{
return|return
name|getContract
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|ASSUMED_ROLE_ARN
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**    * Expect a filesystem to fail to instantiate.    * @param conf config to use    * @param clazz class of exception to expect    * @param text text in exception    * @param<E> type of exception as inferred from clazz    * @throws Exception if the exception was the wrong class    */
DECL|method|expectFileSystemFailure ( Configuration conf, Class<E> clazz, String text)
specifier|private
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|void
name|expectFileSystemFailure
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|Exception
block|{
name|interceptC
argument_list|(
name|clazz
argument_list|,
name|text
argument_list|,
parameter_list|()
lambda|->
operator|new
name|Path
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Experimental variant of intercept() which closes any Closeable    * returned.    */
DECL|method|interceptC ( Class<E> clazz, String text, Callable<Closeable> eval)
specifier|private
specifier|static
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|E
name|interceptC
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|,
name|String
name|text
parameter_list|,
name|Callable
argument_list|<
name|Closeable
argument_list|>
name|eval
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|intercept
argument_list|(
name|clazz
argument_list|,
name|text
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
init|(
name|Closeable
name|c
init|=
name|eval
operator|.
name|call
argument_list|()
init|)
block|{
return|return
name|c
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testCreateCredentialProvider ()
specifier|public
name|void
name|testCreateCredentialProvider
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Create the credential provider"
argument_list|)
expr_stmt|;
name|String
name|roleARN
init|=
name|getAssumedRoleARN
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|getContract
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_ARN
argument_list|,
name|roleARN
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_SESSION_NAME
argument_list|,
literal|"valid"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_SESSION_DURATION
argument_list|,
literal|"45m"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_POLICY
argument_list|,
name|RESTRICTED_POLICY
argument_list|)
expr_stmt|;
try|try
init|(
name|AssumedRoleCredentialProvider
name|provider
init|=
operator|new
name|AssumedRoleCredentialProvider
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Provider is {}"
argument_list|,
name|provider
argument_list|)
expr_stmt|;
name|AWSCredentials
name|credentials
init|=
name|provider
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null credentials from "
operator|+
name|provider
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAssumeRoleCreateFS ()
specifier|public
name|void
name|testAssumeRoleCreateFS
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Create an FS client with the role and do some basic IO"
argument_list|)
expr_stmt|;
name|String
name|roleARN
init|=
name|getAssumedRoleARN
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createAssumedRoleConfig
argument_list|(
name|roleARN
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_SESSION_NAME
argument_list|,
literal|"valid"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_SESSION_DURATION
argument_list|,
literal|"45m"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating test FS and user {} with assumed role {}"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|ACCESS_KEY
argument_list|)
argument_list|,
name|roleARN
argument_list|)
expr_stmt|;
try|try
init|(
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|(
literal|"testAssumeRoleFS"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAssumeRoleRestrictedPolicyFS ()
specifier|public
name|void
name|testAssumeRoleRestrictedPolicyFS
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Restrict the policy for this session; verify that reads fail"
argument_list|)
expr_stmt|;
name|String
name|roleARN
init|=
name|getAssumedRoleARN
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createAssumedRoleConfig
argument_list|(
name|roleARN
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_POLICY
argument_list|,
name|RESTRICTED_POLICY
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|intercept
argument_list|(
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"getFileStatus"
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"getFileStatus"
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"getFileStatus"
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|(
literal|"testAssumeRoleFS"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAssumeRoleFSBadARN ()
specifier|public
name|void
name|testAssumeRoleFSBadARN
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Attemnpt to create the FS with an invalid ARN"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createAssumedRoleConfig
argument_list|(
name|getAssumedRoleARN
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_ARN
argument_list|,
name|ARN_EXAMPLE
argument_list|)
expr_stmt|;
name|expectFileSystemFailure
argument_list|(
name|conf
argument_list|,
name|AccessDeniedException
operator|.
name|class
argument_list|,
name|E_BAD_ROLE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssumeRoleNoARN ()
specifier|public
name|void
name|testAssumeRoleNoARN
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Attemnpt to create the FS with no ARN"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createAssumedRoleConfig
argument_list|(
name|getAssumedRoleARN
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|ASSUMED_ROLE_ARN
argument_list|)
expr_stmt|;
name|expectFileSystemFailure
argument_list|(
name|conf
argument_list|,
name|IOException
operator|.
name|class
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|E_NO_ROLE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssumeRoleFSBadPolicy ()
specifier|public
name|void
name|testAssumeRoleFSBadPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Attemnpt to create the FS with malformed JSON"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createAssumedRoleConfig
argument_list|(
name|getAssumedRoleARN
argument_list|()
argument_list|)
decl_stmt|;
comment|// add some malformed JSON
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_POLICY
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
name|expectFileSystemFailure
argument_list|(
name|conf
argument_list|,
name|AWSBadRequestException
operator|.
name|class
argument_list|,
literal|"JSON"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssumeRoleFSBadPolicy2 ()
specifier|public
name|void
name|testAssumeRoleFSBadPolicy2
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Attemnpt to create the FS with valid but non-compliant JSON"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createAssumedRoleConfig
argument_list|(
name|getAssumedRoleARN
argument_list|()
argument_list|)
decl_stmt|;
comment|// add some invalid JSON
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_POLICY
argument_list|,
literal|"{'json':'but not what AWS wants}"
argument_list|)
expr_stmt|;
name|expectFileSystemFailure
argument_list|(
name|conf
argument_list|,
name|AWSBadRequestException
operator|.
name|class
argument_list|,
literal|"Syntax errors in policy"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssumeRoleCannotAuthAssumedRole ()
specifier|public
name|void
name|testAssumeRoleCannotAuthAssumedRole
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Assert that you can't use assumed roles to auth assumed roles"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createAssumedRoleConfig
argument_list|(
name|getAssumedRoleARN
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_CREDENTIALS_PROVIDER
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|expectFileSystemFailure
argument_list|(
name|conf
argument_list|,
name|IOException
operator|.
name|class
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|E_FORBIDDEN_PROVIDER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssumeRoleBadInnerAuth ()
specifier|public
name|void
name|testAssumeRoleBadInnerAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Try to authenticate with a keypair with spaces"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createAssumedRoleConfig
argument_list|(
name|getAssumedRoleARN
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_CREDENTIALS_PROVIDER
argument_list|,
name|SimpleAWSCredentialsProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ACCESS_KEY
argument_list|,
literal|"not valid"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SECRET_KEY
argument_list|,
literal|"not secret"
argument_list|)
expr_stmt|;
name|expectFileSystemFailure
argument_list|(
name|conf
argument_list|,
name|AWSBadRequestException
operator|.
name|class
argument_list|,
literal|"not a valid "
operator|+
literal|"key=value pair (missing equal-sign) in Authorization header"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssumeRoleBadInnerAuth2 ()
specifier|public
name|void
name|testAssumeRoleBadInnerAuth2
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Try to authenticate with an invalid keypair"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createAssumedRoleConfig
argument_list|(
name|getAssumedRoleARN
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_CREDENTIALS_PROVIDER
argument_list|,
name|SimpleAWSCredentialsProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ACCESS_KEY
argument_list|,
literal|"notvalid"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SECRET_KEY
argument_list|,
literal|"notsecret"
argument_list|)
expr_stmt|;
name|expectFileSystemFailure
argument_list|(
name|conf
argument_list|,
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"The security token included in the request is invalid"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssumeRoleBadSession ()
specifier|public
name|void
name|testAssumeRoleBadSession
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Try to authenticate with an invalid session"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createAssumedRoleConfig
argument_list|(
name|getAssumedRoleARN
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_SESSION_NAME
argument_list|,
literal|"Session Names cannot Hava Spaces!"
argument_list|)
expr_stmt|;
name|expectFileSystemFailure
argument_list|(
name|conf
argument_list|,
name|AWSBadRequestException
operator|.
name|class
argument_list|,
literal|"Member must satisfy regular expression pattern"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a config for an assumed role; it also disables FS caching.    * @param roleARN ARN of role    * @return the configuration    */
DECL|method|createAssumedRoleConfig (String roleARN)
specifier|private
name|Configuration
name|createAssumedRoleConfig
parameter_list|(
name|String
name|roleARN
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|getContract
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_ARN
argument_list|,
name|roleARN
argument_list|)
expr_stmt|;
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
DECL|method|testAssumedRoleCredentialProviderValidation ()
specifier|public
name|void
name|testAssumedRoleCredentialProviderValidation
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_ARN
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|interceptC
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|E_NO_ROLE
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AssumedRoleCredentialProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssumedDuration ()
specifier|public
name|void
name|testAssumedDuration
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Expect the constructor to fail if the session is to short"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_SESSION_DURATION
argument_list|,
literal|"30s"
argument_list|)
expr_stmt|;
name|interceptC
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AssumedRoleCredentialProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssumedInvalidRole ()
specifier|public
name|void
name|testAssumedInvalidRole
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Expect the constructor to fail if the role is invalid"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ASSUMED_ROLE_ARN
argument_list|,
name|ARN_EXAMPLE
argument_list|)
expr_stmt|;
name|interceptC
argument_list|(
name|AWSSecurityTokenServiceException
operator|.
name|class
argument_list|,
name|E_BAD_ROLE
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AssumedRoleCredentialProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is here to check up on the S3ATestUtils probes themselves.    * @see S3ATestUtils#authenticationContains(Configuration, String).    */
annotation|@
name|Test
DECL|method|testauthenticationContainsProbes ()
specifier|public
name|void
name|testauthenticationContainsProbes
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"found AssumedRoleCredentialProvider"
argument_list|,
name|authenticationContains
argument_list|(
name|conf
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"didn't find AssumedRoleCredentialProvider"
argument_list|,
name|authenticationContains
argument_list|(
name|conf
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

