begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|MagicCommitPaths
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests for {@link MagicCommitPaths} path operations.  */
end_comment

begin_class
DECL|class|TestMagicCommitPaths
specifier|public
class|class
name|TestMagicCommitPaths
extends|extends
name|Assert
block|{
DECL|field|MAGIC_AT_ROOT
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|MAGIC_AT_ROOT
init|=
name|list
argument_list|(
name|MAGIC
argument_list|)
decl_stmt|;
DECL|field|MAGIC_AT_ROOT_WITH_CHILD
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|MAGIC_AT_ROOT_WITH_CHILD
init|=
name|list
argument_list|(
name|MAGIC
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
DECL|field|MAGIC_WITH_CHILD
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|MAGIC_WITH_CHILD
init|=
name|list
argument_list|(
literal|"parent"
argument_list|,
name|MAGIC
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
DECL|field|MAGIC_AT_WITHOUT_CHILD
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|MAGIC_AT_WITHOUT_CHILD
init|=
name|list
argument_list|(
literal|"parent"
argument_list|,
name|MAGIC
argument_list|)
decl_stmt|;
DECL|field|DEEP_MAGIC
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|DEEP_MAGIC
init|=
name|list
argument_list|(
literal|"parent1"
argument_list|,
literal|"parent2"
argument_list|,
name|MAGIC
argument_list|,
literal|"child1"
argument_list|,
literal|"child2"
argument_list|)
decl_stmt|;
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|EMPTY
init|=
block|{}
decl_stmt|;
annotation|@
name|Test
DECL|method|testSplitPathEmpty ()
specifier|public
name|void
name|testSplitPathEmpty
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|splitPathToElements
argument_list|(
operator|new
name|Path
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitPathDoubleBackslash ()
specifier|public
name|void
name|testSplitPathDoubleBackslash
parameter_list|()
block|{
name|assertPathSplits
argument_list|(
literal|"//"
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitRootPath ()
specifier|public
name|void
name|testSplitRootPath
parameter_list|()
block|{
name|assertPathSplits
argument_list|(
literal|"/"
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitBasic ()
specifier|public
name|void
name|testSplitBasic
parameter_list|()
block|{
name|assertPathSplits
argument_list|(
literal|"/a/b/c"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitTrailingSlash ()
specifier|public
name|void
name|testSplitTrailingSlash
parameter_list|()
block|{
name|assertPathSplits
argument_list|(
literal|"/a/b/c/"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitShortPath ()
specifier|public
name|void
name|testSplitShortPath
parameter_list|()
block|{
name|assertPathSplits
argument_list|(
literal|"/a"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitShortPathTrailingSlash ()
specifier|public
name|void
name|testSplitShortPathTrailingSlash
parameter_list|()
block|{
name|assertPathSplits
argument_list|(
literal|"/a/"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParentsMagicRoot ()
specifier|public
name|void
name|testParentsMagicRoot
parameter_list|()
block|{
name|assertParents
argument_list|(
name|EMPTY
argument_list|,
name|MAGIC_AT_ROOT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChildrenMagicRoot ()
specifier|public
name|void
name|testChildrenMagicRoot
parameter_list|()
block|{
name|assertChildren
argument_list|(
name|EMPTY
argument_list|,
name|MAGIC_AT_ROOT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParentsMagicRootWithChild ()
specifier|public
name|void
name|testParentsMagicRootWithChild
parameter_list|()
block|{
name|assertParents
argument_list|(
name|EMPTY
argument_list|,
name|MAGIC_AT_ROOT_WITH_CHILD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChildMagicRootWithChild ()
specifier|public
name|void
name|testChildMagicRootWithChild
parameter_list|()
block|{
name|assertChildren
argument_list|(
name|a
argument_list|(
literal|"child"
argument_list|)
argument_list|,
name|MAGIC_AT_ROOT_WITH_CHILD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChildrenMagicWithoutChild ()
specifier|public
name|void
name|testChildrenMagicWithoutChild
parameter_list|()
block|{
name|assertChildren
argument_list|(
name|EMPTY
argument_list|,
name|MAGIC_AT_WITHOUT_CHILD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChildMagicWithChild ()
specifier|public
name|void
name|testChildMagicWithChild
parameter_list|()
block|{
name|assertChildren
argument_list|(
name|a
argument_list|(
literal|"child"
argument_list|)
argument_list|,
name|MAGIC_WITH_CHILD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParentMagicWithChild ()
specifier|public
name|void
name|testParentMagicWithChild
parameter_list|()
block|{
name|assertParents
argument_list|(
name|a
argument_list|(
literal|"parent"
argument_list|)
argument_list|,
name|MAGIC_WITH_CHILD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParentDeepMagic ()
specifier|public
name|void
name|testParentDeepMagic
parameter_list|()
block|{
name|assertParents
argument_list|(
name|a
argument_list|(
literal|"parent1"
argument_list|,
literal|"parent2"
argument_list|)
argument_list|,
name|DEEP_MAGIC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChildrenDeepMagic ()
specifier|public
name|void
name|testChildrenDeepMagic
parameter_list|()
block|{
name|assertChildren
argument_list|(
name|a
argument_list|(
literal|"child1"
argument_list|,
literal|"child2"
argument_list|)
argument_list|,
name|DEEP_MAGIC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLastElementEmpty ()
specifier|public
name|void
name|testLastElementEmpty
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|lastElement
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLastElementSingle ()
specifier|public
name|void
name|testLastElementSingle
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"first"
argument_list|,
name|lastElement
argument_list|(
name|l
argument_list|(
literal|"first"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLastElementDouble ()
specifier|public
name|void
name|testLastElementDouble
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|lastElement
argument_list|(
name|l
argument_list|(
literal|"first"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinalDestinationNoMagic ()
specifier|public
name|void
name|testFinalDestinationNoMagic
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|l
argument_list|(
literal|"first"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|finalDestination
argument_list|(
name|l
argument_list|(
literal|"first"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinalDestinationMagic1 ()
specifier|public
name|void
name|testFinalDestinationMagic1
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|l
argument_list|(
literal|"first"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|finalDestination
argument_list|(
name|l
argument_list|(
literal|"first"
argument_list|,
name|MAGIC
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinalDestinationMagic2 ()
specifier|public
name|void
name|testFinalDestinationMagic2
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|l
argument_list|(
literal|"first"
argument_list|,
literal|"3.txt"
argument_list|)
argument_list|,
name|finalDestination
argument_list|(
name|l
argument_list|(
literal|"first"
argument_list|,
name|MAGIC
argument_list|,
literal|"2"
argument_list|,
literal|"3.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinalDestinationRootMagic2 ()
specifier|public
name|void
name|testFinalDestinationRootMagic2
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|l
argument_list|(
literal|"3.txt"
argument_list|)
argument_list|,
name|finalDestination
argument_list|(
name|l
argument_list|(
name|MAGIC
argument_list|,
literal|"2"
argument_list|,
literal|"3.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testFinalDestinationMagicNoChild ()
specifier|public
name|void
name|testFinalDestinationMagicNoChild
parameter_list|()
block|{
name|finalDestination
argument_list|(
name|l
argument_list|(
name|MAGIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinalDestinationBaseDirectChild ()
specifier|public
name|void
name|testFinalDestinationBaseDirectChild
parameter_list|()
block|{
name|finalDestination
argument_list|(
name|l
argument_list|(
name|MAGIC
argument_list|,
name|BASE
argument_list|,
literal|"3.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testFinalDestinationBaseNoChild ()
specifier|public
name|void
name|testFinalDestinationBaseNoChild
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|l
argument_list|()
argument_list|,
name|finalDestination
argument_list|(
name|l
argument_list|(
name|MAGIC
argument_list|,
name|BASE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinalDestinationBaseSubdirsChild ()
specifier|public
name|void
name|testFinalDestinationBaseSubdirsChild
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|l
argument_list|(
literal|"2"
argument_list|,
literal|"3.txt"
argument_list|)
argument_list|,
name|finalDestination
argument_list|(
name|l
argument_list|(
name|MAGIC
argument_list|,
literal|"4"
argument_list|,
name|BASE
argument_list|,
literal|"2"
argument_list|,
literal|"3.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the base is above the magic dir, it's ignored.    */
annotation|@
name|Test
DECL|method|testFinalDestinationIgnoresBaseBeforeMagic ()
specifier|public
name|void
name|testFinalDestinationIgnoresBaseBeforeMagic
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|l
argument_list|(
name|BASE
argument_list|,
literal|"home"
argument_list|,
literal|"3.txt"
argument_list|)
argument_list|,
name|finalDestination
argument_list|(
name|l
argument_list|(
name|BASE
argument_list|,
literal|"home"
argument_list|,
name|MAGIC
argument_list|,
literal|"2"
argument_list|,
literal|"3.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** varargs to array. */
DECL|method|a (String... str)
specifier|private
specifier|static
name|String
index|[]
name|a
parameter_list|(
name|String
modifier|...
name|str
parameter_list|)
block|{
return|return
name|str
return|;
block|}
comment|/** list to array. */
DECL|method|l (String... str)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|l
parameter_list|(
name|String
modifier|...
name|str
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|str
argument_list|)
return|;
block|}
comment|/**    * Varags to list.    * @param args arguments    * @return a list    */
DECL|method|list (String... args)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
return|;
block|}
DECL|method|assertParents (String[] expected, List<String> elements)
specifier|public
name|void
name|assertParents
parameter_list|(
name|String
index|[]
name|expected
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
name|assertListEquals
argument_list|(
name|expected
argument_list|,
name|magicPathParents
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertChildren (String[] expected, List<String> elements)
specifier|public
name|void
name|assertChildren
parameter_list|(
name|String
index|[]
name|expected
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
name|assertListEquals
argument_list|(
name|expected
argument_list|,
name|magicPathChildren
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPathSplits (String pathString, String[] expected)
specifier|private
name|void
name|assertPathSplits
parameter_list|(
name|String
name|pathString
parameter_list|,
name|String
index|[]
name|expected
parameter_list|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"From path "
operator|+
name|path
argument_list|,
name|expected
argument_list|,
name|splitPathToElements
argument_list|(
name|path
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertListEquals (String[] expected, List<String> actual)
specifier|private
name|void
name|assertListEquals
parameter_list|(
name|String
index|[]
name|expected
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|actual
parameter_list|)
block|{
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

