begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.staging
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|MockS3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingTestBase
operator|.
name|ClientErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingTestBase
operator|.
name|ClientResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_comment
comment|/**  * Committer subclass that uses a mocked S3A connection for testing.  */
end_comment

begin_class
DECL|class|MockedStagingCommitter
class|class
name|MockedStagingCommitter
extends|extends
name|StagingCommitter
block|{
DECL|method|MockedStagingCommitter (Path outputPath, TaskAttemptContext context)
name|MockedStagingCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the mock FS without checking FS type.    * @param out output path    * @param config job/task config    * @return a filesystem.    * @throws IOException IO failure    */
annotation|@
name|Override
DECL|method|getDestinationFS (Path out, Configuration config)
specifier|protected
name|FileSystem
name|getDestinationFS
parameter_list|(
name|Path
name|out
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|out
operator|.
name|getFileSystem
argument_list|(
name|config
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|commitJob (JobContext context)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// turn off stamping an output marker, as that codepath isn't mocked yet.
name|super
operator|.
name|commitJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|jobCommitterPath
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mock-results-file"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobCommitterPath
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|ObjectOutputStream
name|out
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|jobCommitterPath
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
init|)
block|{
name|out
operator|.
name|writeObject
argument_list|(
name|getResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing, the test will fail
block|}
block|}
annotation|@
name|Override
DECL|method|maybeCreateSuccessMarker (JobContext context, List<String> filenames)
specifier|protected
name|void
name|maybeCreateSuccessMarker
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|filenames
parameter_list|)
throws|throws
name|IOException
block|{
comment|//skipped
block|}
DECL|method|getResults ()
specifier|public
name|ClientResults
name|getResults
parameter_list|()
throws|throws
name|IOException
block|{
name|MockS3AFileSystem
name|mockFS
init|=
operator|(
name|MockS3AFileSystem
operator|)
name|getDestS3AFS
argument_list|()
decl_stmt|;
return|return
name|mockFS
operator|.
name|getOutcome
argument_list|()
operator|.
name|getKey
argument_list|()
return|;
block|}
DECL|method|getErrors ()
specifier|public
name|ClientErrors
name|getErrors
parameter_list|()
throws|throws
name|IOException
block|{
name|MockS3AFileSystem
name|mockFS
init|=
operator|(
name|MockS3AFileSystem
operator|)
name|getDestS3AFS
argument_list|()
decl_stmt|;
return|return
name|mockFS
operator|.
name|getOutcome
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MockedStagingCommitter{ "
operator|+
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" "
return|;
block|}
block|}
end_class

end_unit

