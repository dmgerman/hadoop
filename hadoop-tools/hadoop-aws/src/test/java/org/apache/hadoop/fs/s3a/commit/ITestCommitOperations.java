begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PartETag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|files
operator|.
name|SinglePendingCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|magic
operator|.
name|MagicCommitTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|magic
operator|.
name|MagicS3GuardCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|magic
operator|.
name|MagicS3GuardCommitterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|PathOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|PathOutputCommitterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|MagicCommitPaths
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|PathOutputCommitterFactory
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test the low-level binding of the S3A FS to the magic commit mechanism,  * and handling of the commit operations.  * This is done with an inconsistent client.  */
end_comment

begin_class
DECL|class|ITestCommitOperations
specifier|public
class|class
name|ITestCommitOperations
extends|extends
name|AbstractCommitITest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestCommitOperations
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DATASET
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DATASET
init|=
name|dataset
argument_list|(
literal|1000
argument_list|,
literal|'a'
argument_list|,
literal|32
argument_list|)
decl_stmt|;
DECL|field|S3A_FACTORY_KEY
specifier|private
specifier|static
specifier|final
name|String
name|S3A_FACTORY_KEY
init|=
name|String
operator|.
name|format
argument_list|(
name|COMMITTER_FACTORY_SCHEME_PATTERN
argument_list|,
literal|"s3a"
argument_list|)
decl_stmt|;
comment|/**    * A compile time flag which allows you to disable failure reset before    * assertions and teardown.    * As S3A is now required to be resilient to failure on all FS operations,    * setting it to false ensures that even the assertions are checking    * the resilience codepaths.    */
DECL|field|RESET_FAILURES_ENABLED
specifier|private
specifier|static
specifier|final
name|boolean
name|RESET_FAILURES_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|HIGH_THROTTLE
specifier|private
specifier|static
specifier|final
name|float
name|HIGH_THROTTLE
init|=
literal|0.25f
decl_stmt|;
DECL|field|FULL_THROTTLE
specifier|private
specifier|static
specifier|final
name|float
name|FULL_THROTTLE
init|=
literal|1.0f
decl_stmt|;
DECL|field|STANDARD_FAILURE_LIMIT
specifier|private
specifier|static
specifier|final
name|int
name|STANDARD_FAILURE_LIMIT
init|=
literal|2
decl_stmt|;
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|bindCommitter
argument_list|(
name|conf
argument_list|,
name|CommitConstants
operator|.
name|S3A_COMMITTER_FACTORY
argument_list|,
name|CommitConstants
operator|.
name|COMMITTER_NAME_MAGIC
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|useInconsistentClient ()
specifier|public
name|boolean
name|useInconsistentClient
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|verifyIsMagicCommitFS
argument_list|(
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
comment|// abort,; rethrow on failure
name|setThrottling
argument_list|(
name|HIGH_THROTTLE
argument_list|,
name|STANDARD_FAILURE_LIMIT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateTrackerNormalPath ()
specifier|public
name|void
name|testCreateTrackerNormalPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|MagicCommitIntegration
name|integration
init|=
operator|new
name|MagicCommitIntegration
argument_list|(
name|fs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
literal|"notdelayed.txt"
decl_stmt|;
name|Path
name|destFile
init|=
name|methodPath
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|String
name|origKey
init|=
name|fs
operator|.
name|pathToKey
argument_list|(
name|destFile
argument_list|)
decl_stmt|;
name|PutTracker
name|tracker
init|=
name|integration
operator|.
name|createTracker
argument_list|(
name|destFile
argument_list|,
name|origKey
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"wrong type: "
operator|+
name|tracker
operator|+
literal|" for "
operator|+
name|destFile
argument_list|,
name|tracker
operator|instanceof
name|MagicCommitTracker
argument_list|)
expr_stmt|;
block|}
comment|/**    * On a magic path, the magic tracker is returned.    * @throws Throwable failure    */
annotation|@
name|Test
DECL|method|testCreateTrackerMagicPath ()
specifier|public
name|void
name|testCreateTrackerMagicPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|MagicCommitIntegration
name|integration
init|=
operator|new
name|MagicCommitIntegration
argument_list|(
name|fs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
literal|"delayed.txt"
decl_stmt|;
name|Path
name|destFile
init|=
name|methodPath
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|String
name|origKey
init|=
name|fs
operator|.
name|pathToKey
argument_list|(
name|destFile
argument_list|)
decl_stmt|;
name|Path
name|pendingPath
init|=
name|makeMagic
argument_list|(
name|destFile
argument_list|)
decl_stmt|;
name|verifyIsMagicCommitPath
argument_list|(
name|fs
argument_list|,
name|pendingPath
argument_list|)
expr_stmt|;
name|String
name|pendingPathKey
init|=
name|fs
operator|.
name|pathToKey
argument_list|(
name|pendingPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"wrong path of "
operator|+
name|pendingPathKey
argument_list|,
name|pendingPathKey
operator|.
name|endsWith
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
name|splitPathToElements
argument_list|(
name|pendingPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"splitPathToElements()"
argument_list|,
name|filename
argument_list|,
name|lastElement
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|finalDestination
init|=
name|finalDestination
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"finalDestination()"
argument_list|,
name|filename
argument_list|,
name|lastElement
argument_list|(
name|finalDestination
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|destKey
init|=
name|elementsToKey
argument_list|(
name|finalDestination
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"destination key"
argument_list|,
name|origKey
argument_list|,
name|destKey
argument_list|)
expr_stmt|;
name|PutTracker
name|tracker
init|=
name|integration
operator|.
name|createTracker
argument_list|(
name|pendingPath
argument_list|,
name|pendingPathKey
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"wrong type: "
operator|+
name|tracker
operator|+
literal|" for "
operator|+
name|pendingPathKey
argument_list|,
name|tracker
operator|instanceof
name|MagicCommitTracker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tracker destination key"
argument_list|,
name|origKey
argument_list|,
name|tracker
operator|.
name|getDestKey
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|pendingSuffixedPath
init|=
operator|new
name|Path
argument_list|(
name|pendingPath
argument_list|,
literal|"part-0000"
operator|+
name|PENDING_SUFFIX
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"still a delayed complete path "
operator|+
name|pendingSuffixedPath
argument_list|,
name|fs
operator|.
name|isMagicCommitPath
argument_list|(
name|pendingSuffixedPath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|pendingSet
init|=
operator|new
name|Path
argument_list|(
name|pendingPath
argument_list|,
literal|"part-0000"
operator|+
name|PENDINGSET_SUFFIX
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"still a delayed complete path "
operator|+
name|pendingSet
argument_list|,
name|fs
operator|.
name|isMagicCommitPath
argument_list|(
name|pendingSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateAbortEmptyFile ()
specifier|public
name|void
name|testCreateAbortEmptyFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create then abort an empty file; throttled"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|"empty-abort.txt"
decl_stmt|;
name|Path
name|destFile
init|=
name|methodPath
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|Path
name|pendingFilePath
init|=
name|makeMagic
argument_list|(
name|destFile
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|pendingFilePath
argument_list|)
expr_stmt|;
name|validateIntermediateAndFinalPaths
argument_list|(
name|pendingFilePath
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
name|Path
name|pendingDataPath
init|=
name|validatePendingCommitData
argument_list|(
name|filename
argument_list|,
name|pendingFilePath
argument_list|)
decl_stmt|;
name|CommitOperations
name|actions
init|=
name|newCommitOperations
argument_list|()
decl_stmt|;
comment|// abort,; rethrow on failure
name|fullThrottle
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Abort call"
argument_list|)
expr_stmt|;
name|actions
operator|.
name|abortAllSinglePendingCommits
argument_list|(
name|pendingDataPath
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|maybeRethrow
argument_list|()
expr_stmt|;
name|resetFailures
argument_list|()
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"pending file not deleted"
argument_list|,
name|pendingDataPath
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"dest file was created"
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
block|}
DECL|method|fullThrottle ()
specifier|private
name|void
name|fullThrottle
parameter_list|()
block|{
name|setThrottling
argument_list|(
name|FULL_THROTTLE
argument_list|,
name|STANDARD_FAILURE_LIMIT
argument_list|)
expr_stmt|;
block|}
DECL|method|newCommitOperations ()
specifier|private
name|CommitOperations
name|newCommitOperations
parameter_list|()
block|{
return|return
operator|new
name|CommitOperations
argument_list|(
name|getFileSystem
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|resetFailures ()
specifier|protected
name|void
name|resetFailures
parameter_list|()
block|{
if|if
condition|(
operator|!
name|RESET_FAILURES_ENABLED
condition|)
block|{
name|super
operator|.
name|resetFailures
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create a new path which has the same filename as the dest file, but    * is in a magic directory under the destination dir.    * @param destFile final destination file    * @return magic path    */
DECL|method|makeMagic (Path destFile)
specifier|private
specifier|static
name|Path
name|makeMagic
parameter_list|(
name|Path
name|destFile
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|destFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|MAGIC
operator|+
literal|'/'
operator|+
name|destFile
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testCommitEmptyFile ()
specifier|public
name|void
name|testCommitEmptyFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create then commit an empty file"
argument_list|)
expr_stmt|;
name|createCommitAndVerify
argument_list|(
literal|"empty-commit.txt"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitSmallFile ()
specifier|public
name|void
name|testCommitSmallFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create then commit an empty file"
argument_list|)
expr_stmt|;
name|createCommitAndVerify
argument_list|(
literal|"small-commit.txt"
argument_list|,
name|DATASET
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAbortNonexistentDir ()
specifier|public
name|void
name|testAbortNonexistentDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Attempt to abort a directory that does not exist"
argument_list|)
expr_stmt|;
name|Path
name|destFile
init|=
name|methodPath
argument_list|(
literal|"testAbortNonexistentPath"
argument_list|)
decl_stmt|;
name|newCommitOperations
argument_list|()
operator|.
name|abortAllSinglePendingCommits
argument_list|(
name|destFile
argument_list|,
literal|true
argument_list|)
operator|.
name|maybeRethrow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitterFactoryDefault ()
specifier|public
name|void
name|testCommitterFactoryDefault
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|dest
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|COMMITTER_FACTORY_CLASS
argument_list|,
name|MagicS3GuardCommitterFactory
operator|.
name|CLASSNAME
argument_list|)
expr_stmt|;
name|PathOutputCommitterFactory
name|factory
init|=
name|getCommitterFactory
argument_list|(
name|dest
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|PathOutputCommitter
name|committer
init|=
name|factory
operator|.
name|createOutputCommitter
argument_list|(
name|methodPath
argument_list|()
argument_list|,
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong committer"
argument_list|,
name|MagicS3GuardCommitter
operator|.
name|class
argument_list|,
name|committer
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitterFactorySchema ()
specifier|public
name|void
name|testCommitterFactorySchema
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|dest
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3A_FACTORY_KEY
argument_list|,
name|MagicS3GuardCommitterFactory
operator|.
name|CLASSNAME
argument_list|)
expr_stmt|;
name|PathOutputCommitterFactory
name|factory
init|=
name|getCommitterFactory
argument_list|(
name|dest
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// the casting is an implicit type check
name|MagicS3GuardCommitter
name|s3a
init|=
operator|(
name|MagicS3GuardCommitter
operator|)
name|factory
operator|.
name|createOutputCommitter
argument_list|(
name|methodPath
argument_list|()
argument_list|,
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// should never get here
name|assertNotNull
argument_list|(
name|s3a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBaseRelativePath ()
specifier|public
name|void
name|testBaseRelativePath
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Test creating file with a __base marker and verify that it ends"
operator|+
literal|" up in where expected"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|destDir
init|=
name|methodPath
argument_list|(
literal|"testBaseRelativePath"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|destDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|pendingBaseDir
init|=
operator|new
name|Path
argument_list|(
name|destDir
argument_list|,
name|MAGIC
operator|+
literal|"/child/"
operator|+
name|BASE
argument_list|)
decl_stmt|;
name|String
name|child
init|=
literal|"subdir/child.txt"
decl_stmt|;
name|Path
name|pendingChildPath
init|=
operator|new
name|Path
argument_list|(
name|pendingBaseDir
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|Path
name|expectedDestPath
init|=
operator|new
name|Path
argument_list|(
name|destDir
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"dest file was found before upload"
argument_list|,
name|expectedDestPath
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|pendingChildPath
argument_list|,
literal|true
argument_list|,
name|DATASET
argument_list|)
expr_stmt|;
name|commit
argument_list|(
literal|"child.txt"
argument_list|,
name|pendingChildPath
argument_list|,
name|expectedDestPath
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|createCommitAndVerify (String filename, byte[] data)
specifier|private
name|void
name|createCommitAndVerify
parameter_list|(
name|String
name|filename
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|destFile
init|=
name|methodPath
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|destFile
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|magicDest
init|=
name|makeMagic
argument_list|(
name|destFile
argument_list|)
decl_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"Magic file should not exist"
argument_list|,
name|magicDest
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|magicDest
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|stream
operator|.
name|hasCapability
argument_list|(
name|STREAM_CAPABILITY_MAGIC_OUTPUT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileStatus
name|status
init|=
name|getFileStatusEventually
argument_list|(
name|fs
argument_list|,
name|magicDest
argument_list|,
name|CONSISTENCY_WAIT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Non empty marker file: "
operator|+
name|status
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|filename
argument_list|,
name|destFile
argument_list|,
name|HIGH_THROTTLE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyFileContents
argument_list|(
name|fs
argument_list|,
name|destFile
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**    * Commit the file, with before and after checks on the dest and magic    * values.    * Failures can be set; they'll be reset after the commit.    * @param filename filename of file    * @param destFile destination path of file    * @param throttle probability of commit throttling    * @param failures failure limit    * @throws Exception any failure of the operation    */
DECL|method|commit (String filename, Path destFile, float throttle, int failures)
specifier|private
name|void
name|commit
parameter_list|(
name|String
name|filename
parameter_list|,
name|Path
name|destFile
parameter_list|,
name|float
name|throttle
parameter_list|,
name|int
name|failures
parameter_list|)
throws|throws
name|Exception
block|{
name|commit
argument_list|(
name|filename
argument_list|,
name|makeMagic
argument_list|(
name|destFile
argument_list|)
argument_list|,
name|destFile
argument_list|,
name|throttle
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
comment|/**    * Commit to a write to {@code magicFile} which is expected to    * be saved to {@code destFile}.    * Failures can be set; they'll be reset after the commit.    * @param magicFile path to write to    * @param destFile destination to verify    * @param throttle probability of commit throttling    * @param failures failure limit    */
DECL|method|commit (String filename, Path magicFile, Path destFile, float throttle, int failures)
specifier|private
name|void
name|commit
parameter_list|(
name|String
name|filename
parameter_list|,
name|Path
name|magicFile
parameter_list|,
name|Path
name|destFile
parameter_list|,
name|float
name|throttle
parameter_list|,
name|int
name|failures
parameter_list|)
throws|throws
name|IOException
block|{
name|resetFailures
argument_list|()
expr_stmt|;
name|validateIntermediateAndFinalPaths
argument_list|(
name|magicFile
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
name|SinglePendingCommit
name|commit
init|=
name|SinglePendingCommit
operator|.
name|load
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|validatePendingCommitData
argument_list|(
name|filename
argument_list|,
name|magicFile
argument_list|)
argument_list|)
decl_stmt|;
name|setThrottling
argument_list|(
name|throttle
argument_list|,
name|failures
argument_list|)
expr_stmt|;
name|commitOrFail
argument_list|(
name|destFile
argument_list|,
name|commit
argument_list|,
name|newCommitOperations
argument_list|()
argument_list|)
expr_stmt|;
name|resetFailures
argument_list|()
expr_stmt|;
name|verifyCommitExists
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
DECL|method|commitOrFail (final Path destFile, final SinglePendingCommit commit, final CommitOperations actions)
specifier|private
name|void
name|commitOrFail
parameter_list|(
specifier|final
name|Path
name|destFile
parameter_list|,
specifier|final
name|SinglePendingCommit
name|commit
parameter_list|,
specifier|final
name|CommitOperations
name|actions
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|CommitOperations
operator|.
name|CommitContext
name|commitContext
init|=
name|actions
operator|.
name|initiateCommitOperation
argument_list|(
name|destFile
argument_list|)
init|)
block|{
name|commitContext
operator|.
name|commitOrFail
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Perform any validation of paths.    * @param magicFilePath path to magic file    * @param destFile ultimate destination file    * @throws IOException IO failure    */
DECL|method|validateIntermediateAndFinalPaths (Path magicFilePath, Path destFile)
specifier|private
name|void
name|validateIntermediateAndFinalPaths
parameter_list|(
name|Path
name|magicFilePath
parameter_list|,
name|Path
name|destFile
parameter_list|)
throws|throws
name|IOException
block|{
name|assertPathDoesNotExist
argument_list|(
literal|"dest file was found"
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the path at the end of a commit exists.    * This does not validate the size.    * @param commit commit to verify    * @throws FileNotFoundException dest doesn't exist    * @throws ValidationFailure commit arg is invalid    * @throws IOException invalid commit, IO failure    */
DECL|method|verifyCommitExists (SinglePendingCommit commit)
specifier|private
name|void
name|verifyCommitExists
parameter_list|(
name|SinglePendingCommit
name|commit
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|ValidationFailure
throws|,
name|IOException
block|{
name|commit
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// this will force an existence check
name|Path
name|path
init|=
name|getFileSystem
argument_list|()
operator|.
name|keyToQualifiedPath
argument_list|(
name|commit
operator|.
name|getDestinationKey
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Destination entry: {}"
argument_list|,
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathCommitException
argument_list|(
name|path
argument_list|,
literal|"Not a file: "
operator|+
name|status
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validate that a pending commit data file exists, load it and validate    * its contents.    * @param filename short file name    * @param magicFile path that the file thinks that it was written to    * @return the path to the pending set    * @throws IOException IO problems    */
DECL|method|validatePendingCommitData (String filename, Path magicFile)
specifier|private
name|Path
name|validatePendingCommitData
parameter_list|(
name|String
name|filename
parameter_list|,
name|Path
name|magicFile
parameter_list|)
throws|throws
name|IOException
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|pendingDataPath
init|=
operator|new
name|Path
argument_list|(
name|magicFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|filename
operator|+
name|PENDING_SUFFIX
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|verifyPathExists
argument_list|(
name|fs
argument_list|,
literal|"no pending file"
argument_list|,
name|pendingDataPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No data in "
operator|+
name|fileStatus
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|data
init|=
name|read
argument_list|(
name|fs
argument_list|,
name|pendingDataPath
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Contents of {}: \n{}"
argument_list|,
name|pendingDataPath
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// really read it in and parse
name|SinglePendingCommit
name|persisted
init|=
name|SinglePendingCommit
operator|.
name|serializer
argument_list|()
operator|.
name|load
argument_list|(
name|fs
argument_list|,
name|pendingDataPath
argument_list|)
decl_stmt|;
name|persisted
operator|.
name|validate
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"created timestamp wrong in "
operator|+
name|persisted
argument_list|,
name|persisted
operator|.
name|getCreated
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"saved timestamp wrong in "
operator|+
name|persisted
argument_list|,
name|persisted
operator|.
name|getSaved
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|etags
init|=
name|persisted
operator|.
name|getEtags
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"etag list "
operator|+
name|persisted
argument_list|,
literal|1
argument_list|,
name|etags
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartETag
argument_list|>
name|partList
init|=
name|CommitOperations
operator|.
name|toPartEtags
argument_list|(
name|etags
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"part list "
operator|+
name|persisted
argument_list|,
literal|1
argument_list|,
name|partList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pendingDataPath
return|;
block|}
comment|/**    * Get a method-relative path.    * @param filename filename    * @return new path    * @throws IOException failure to create/parse the path.    */
DECL|method|methodPath (String filename)
specifier|private
name|Path
name|methodPath
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
name|methodPath
argument_list|()
argument_list|,
name|filename
argument_list|)
return|;
block|}
comment|/**    * Get a unique path for a method.    * @return a path    * @throws IOException    */
DECL|method|methodPath ()
specifier|protected
name|Path
name|methodPath
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|path
argument_list|(
name|getMethodName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testUploadEmptyFile ()
specifier|public
name|void
name|testUploadEmptyFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"commit"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|CommitOperations
name|actions
init|=
name|newCommitOperations
argument_list|()
decl_stmt|;
name|Path
name|dest
init|=
name|methodPath
argument_list|(
literal|"testUploadEmptyFile"
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fullThrottle
argument_list|()
expr_stmt|;
name|SinglePendingCommit
name|pendingCommit
init|=
name|actions
operator|.
name|uploadFileToPendingCommit
argument_list|(
name|tempFile
argument_list|,
name|dest
argument_list|,
literal|null
argument_list|,
name|DEFAULT_MULTIPART_SIZE
argument_list|)
decl_stmt|;
name|resetFailures
argument_list|()
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"pending commit"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|fullThrottle
argument_list|()
expr_stmt|;
name|commitOrFail
argument_list|(
name|dest
argument_list|,
name|pendingCommit
argument_list|,
name|actions
argument_list|)
expr_stmt|;
name|resetFailures
argument_list|()
expr_stmt|;
name|FileStatus
name|status
init|=
name|verifyPathExists
argument_list|(
name|fs
argument_list|,
literal|"uploaded file commit"
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"File length in "
operator|+
name|status
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUploadSmallFile ()
specifier|public
name|void
name|testUploadSmallFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"commit"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"hello, world"
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|tempFile
argument_list|,
name|text
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|CommitOperations
name|actions
init|=
name|newCommitOperations
argument_list|()
decl_stmt|;
name|Path
name|dest
init|=
name|methodPath
argument_list|(
literal|"testUploadSmallFile"
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dest
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fullThrottle
argument_list|()
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"test setup"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|SinglePendingCommit
name|pendingCommit
init|=
name|actions
operator|.
name|uploadFileToPendingCommit
argument_list|(
name|tempFile
argument_list|,
name|dest
argument_list|,
literal|null
argument_list|,
name|DEFAULT_MULTIPART_SIZE
argument_list|)
decl_stmt|;
name|resetFailures
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Precommit validation"
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"pending commit"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|fullThrottle
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Postcommit validation"
argument_list|)
expr_stmt|;
name|commitOrFail
argument_list|(
name|dest
argument_list|,
name|pendingCommit
argument_list|,
name|actions
argument_list|)
expr_stmt|;
name|resetFailures
argument_list|()
expr_stmt|;
name|String
name|s
init|=
name|readUTF8
argument_list|(
name|fs
argument_list|,
name|dest
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testUploadMissingFile ()
specifier|public
name|void
name|testUploadMissingFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"commit"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|CommitOperations
name|actions
init|=
name|newCommitOperations
argument_list|()
decl_stmt|;
name|Path
name|dest
init|=
name|methodPath
argument_list|(
literal|"testUploadMissingile"
argument_list|)
decl_stmt|;
name|fullThrottle
argument_list|()
expr_stmt|;
name|actions
operator|.
name|uploadFileToPendingCommit
argument_list|(
name|tempFile
argument_list|,
name|dest
argument_list|,
literal|null
argument_list|,
name|DEFAULT_MULTIPART_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRevertCommit ()
specifier|public
name|void
name|testRevertCommit
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|destFile
init|=
name|methodPath
argument_list|(
literal|"part-0000"
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
name|CommitOperations
name|actions
init|=
name|newCommitOperations
argument_list|()
decl_stmt|;
name|SinglePendingCommit
name|commit
init|=
operator|new
name|SinglePendingCommit
argument_list|()
decl_stmt|;
name|commit
operator|.
name|setDestinationKey
argument_list|(
name|fs
operator|.
name|pathToKey
argument_list|(
name|destFile
argument_list|)
argument_list|)
expr_stmt|;
name|fullThrottle
argument_list|()
expr_stmt|;
name|actions
operator|.
name|revertCommit
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|resetFailures
argument_list|()
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"parent of reverted commit"
argument_list|,
name|destFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRevertMissingCommit ()
specifier|public
name|void
name|testRevertMissingCommit
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|destFile
init|=
name|methodPath
argument_list|(
literal|"part-0000"
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|destFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|CommitOperations
name|actions
init|=
name|newCommitOperations
argument_list|()
decl_stmt|;
name|SinglePendingCommit
name|commit
init|=
operator|new
name|SinglePendingCommit
argument_list|()
decl_stmt|;
name|commit
operator|.
name|setDestinationKey
argument_list|(
name|fs
operator|.
name|pathToKey
argument_list|(
name|destFile
argument_list|)
argument_list|)
expr_stmt|;
name|fullThrottle
argument_list|()
expr_stmt|;
name|actions
operator|.
name|revertCommit
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"parent of reverted (nonexistent) commit"
argument_list|,
name|destFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailuresInAbortListing ()
specifier|public
name|void
name|testFailuresInAbortListing
parameter_list|()
throws|throws
name|Throwable
block|{
name|CommitOperations
name|actions
init|=
name|newCommitOperations
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testFailuresInAbort"
argument_list|)
decl_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|setThrottling
argument_list|(
name|HIGH_THROTTLE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting"
argument_list|)
expr_stmt|;
name|actions
operator|.
name|abortPendingUploadsUnderPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Abort completed"
argument_list|)
expr_stmt|;
name|resetFailures
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test a normal stream still works as expected in a magic filesystem,    * with a call of {@code hasCapability()} to check that it is normal.    * @throws Throwable failure    */
annotation|@
name|Test
DECL|method|testWriteNormalStream ()
specifier|public
name|void
name|testWriteNormalStream
parameter_list|()
throws|throws
name|Throwable
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Filesystem does not have magic support enabled: "
operator|+
name|fs
argument_list|,
name|fs
operator|.
name|hasCapability
argument_list|(
name|STORE_CAPABILITY_MAGIC_COMMITTER
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|destFile
init|=
name|path
argument_list|(
literal|"normal"
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|destFile
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|out
operator|.
name|writeChars
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"stream has magic output: "
operator|+
name|out
argument_list|,
name|out
operator|.
name|hasCapability
argument_list|(
name|STREAM_CAPABILITY_MAGIC_OUTPUT
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileStatus
name|status
init|=
name|getFileStatusEventually
argument_list|(
name|fs
argument_list|,
name|destFile
argument_list|,
name|CONSISTENCY_WAIT
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Empty marker file: "
operator|+
name|status
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a bulk commit and commits multiple files.    * If the DDB metastore is in use, use the instrumentation to    * verify that the write count is as expected.    * This is done without actually looking into the store -just monitoring    * changes in the filesystem's instrumentation counters.    * As changes to the store may be made during get/list calls,    * when the counters must be reset before each commit, this must be    * *after* all probes for the outcome of the previous operation.    */
annotation|@
name|Test
DECL|method|testBulkCommitFiles ()
specifier|public
name|void
name|testBulkCommitFiles
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify bulk commit including metastore update count"
argument_list|)
expr_stmt|;
name|File
name|localFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"commit"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|CommitOperations
name|actions
init|=
name|newCommitOperations
argument_list|()
decl_stmt|;
name|Path
name|destDir
init|=
name|methodPath
argument_list|(
literal|"out"
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|destDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fullThrottle
argument_list|()
expr_stmt|;
name|Path
name|destFile1
init|=
operator|new
name|Path
argument_list|(
name|destDir
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
comment|// this subdir will only be created in the commit of file 2
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|destDir
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
comment|// file 2
name|Path
name|destFile2
init|=
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|Path
name|destFile3
init|=
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|destinations
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|destFile1
argument_list|,
name|destFile2
argument_list|,
name|destFile3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SinglePendingCommit
argument_list|>
name|commits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|destination
range|:
name|destinations
control|)
block|{
name|SinglePendingCommit
name|commit1
init|=
name|actions
operator|.
name|uploadFileToPendingCommit
argument_list|(
name|localFile
argument_list|,
name|destination
argument_list|,
literal|null
argument_list|,
name|DEFAULT_MULTIPART_SIZE
argument_list|)
decl_stmt|;
name|commits
operator|.
name|add
argument_list|(
name|commit1
argument_list|)
expr_stmt|;
block|}
name|resetFailures
argument_list|()
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"destination dir"
argument_list|,
name|destDir
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"subdirectory"
argument_list|,
name|subdir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initiating commit operations"
argument_list|)
expr_stmt|;
try|try
init|(
name|CommitOperations
operator|.
name|CommitContext
name|commitContext
init|=
name|actions
operator|.
name|initiateCommitOperation
argument_list|(
name|destDir
argument_list|)
init|)
block|{
comment|// how many records have been written
name|MetricDiff
name|writes
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|S3GUARD_METADATASTORE_RECORD_WRITES
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Commit #1"
argument_list|)
expr_stmt|;
name|commitContext
operator|.
name|commitOrFail
argument_list|(
name|commits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|firstCommitContextString
init|=
name|commitContext
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First Commit state {}"
argument_list|,
name|firstCommitContextString
argument_list|)
expr_stmt|;
name|long
name|writesOnFirstCommit
init|=
name|writes
operator|.
name|diff
argument_list|()
decl_stmt|;
name|assertPathExists
argument_list|(
literal|"destFile1"
argument_list|,
name|destFile1
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"destination dir"
argument_list|,
name|destDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Commit #2"
argument_list|)
expr_stmt|;
name|writes
operator|.
name|reset
argument_list|()
expr_stmt|;
name|commitContext
operator|.
name|commitOrFail
argument_list|(
name|commits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"subdirectory"
argument_list|,
name|subdir
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"destFile2"
argument_list|,
name|destFile2
argument_list|)
expr_stmt|;
specifier|final
name|String
name|secondCommitContextString
init|=
name|commitContext
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Second Commit state {}"
argument_list|,
name|secondCommitContextString
argument_list|)
expr_stmt|;
if|if
condition|(
name|writesOnFirstCommit
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DynamoDB Metastore is in use: checking write count"
argument_list|)
expr_stmt|;
comment|// S3Guard is in use against DDB, so the metrics can be checked
comment|// to see how many records were updated.
comment|// there should only be two new entries: one for the file and
comment|// one for the parent.
comment|// we include the string values of the contexts because that includes
comment|// the internals of the bulk operation state.
name|writes
operator|.
name|assertDiffEquals
argument_list|(
literal|"Number of records written after commit #2"
operator|+
literal|"; first commit had "
operator|+
name|writesOnFirstCommit
operator|+
literal|"; first commit ancestors "
operator|+
name|firstCommitContextString
operator|+
literal|"; second commit ancestors: "
operator|+
name|secondCommitContextString
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Commit #3"
argument_list|)
expr_stmt|;
name|writes
operator|.
name|reset
argument_list|()
expr_stmt|;
name|commitContext
operator|.
name|commitOrFail
argument_list|(
name|commits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"destFile3"
argument_list|,
name|destFile3
argument_list|)
expr_stmt|;
if|if
condition|(
name|writesOnFirstCommit
operator|!=
literal|0
condition|)
block|{
comment|// this file is in the same dir as destFile2, so only its entry
comment|// is added
name|writes
operator|.
name|assertDiffEquals
argument_list|(
literal|"Number of records written after third commit; "
operator|+
literal|"first commit had "
operator|+
name|writesOnFirstCommit
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|resetFailures
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

