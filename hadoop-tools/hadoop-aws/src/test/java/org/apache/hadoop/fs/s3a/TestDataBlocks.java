begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link S3ADataBlocks}.  */
end_comment

begin_class
DECL|class|TestDataBlocks
specifier|public
class|class
name|TestDataBlocks
extends|extends
name|Assert
block|{
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|nameThread ()
specifier|public
name|void
name|nameThread
parameter_list|()
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"JUnit"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the {@link S3ADataBlocks.ByteBufferBlockFactory}.    * That code implements an input stream over a ByteBuffer, and has to    * return the buffer to the pool after the read complete.    *    * This test verifies the basic contract of the process.    */
annotation|@
name|Test
DECL|method|testByteBufferIO ()
specifier|public
name|void
name|testByteBufferIO
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
init|(
name|S3ADataBlocks
operator|.
name|ByteBufferBlockFactory
name|factory
init|=
operator|new
name|S3ADataBlocks
operator|.
name|ByteBufferBlockFactory
argument_list|(
literal|null
argument_list|)
init|)
block|{
name|int
name|limit
init|=
literal|128
decl_stmt|;
name|S3ADataBlocks
operator|.
name|ByteBufferBlockFactory
operator|.
name|ByteBufferBlock
name|block
init|=
name|factory
operator|.
name|create
argument_list|(
name|limit
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"outstanding buffers in "
operator|+
name|factory
argument_list|,
literal|1
argument_list|,
name|factory
operator|.
name|getOutstandingBufferCount
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|ContractTestUtils
operator|.
name|toAsciiByteArray
argument_list|(
literal|"test data"
argument_list|)
decl_stmt|;
name|int
name|bufferLen
init|=
name|buffer
operator|.
name|length
decl_stmt|;
name|block
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferLen
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bufferLen
argument_list|,
name|block
operator|.
name|dataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity in "
operator|+
name|block
argument_list|,
name|limit
operator|-
name|bufferLen
argument_list|,
name|block
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hasCapacity(64) in "
operator|+
name|block
argument_list|,
name|block
operator|.
name|hasCapacity
argument_list|(
literal|64
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No capacity in "
operator|+
name|block
argument_list|,
name|block
operator|.
name|hasCapacity
argument_list|(
name|limit
operator|-
name|bufferLen
argument_list|)
argument_list|)
expr_stmt|;
comment|// now start the write
name|S3ADataBlocks
operator|.
name|ByteBufferBlockFactory
operator|.
name|ByteBufferInputStream
name|stream
init|=
name|block
operator|.
name|startUpload
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"!hasRemaining() in "
operator|+
name|stream
argument_list|,
name|stream
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|expected
init|=
name|bufferLen
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong available() in "
operator|+
name|stream
argument_list|,
name|expected
argument_list|,
name|stream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'t'
argument_list|,
name|stream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|--
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong available() in "
operator|+
name|stream
argument_list|,
name|expected
argument_list|,
name|stream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the block. The buffer must remain outstanding here;
comment|// the stream manages the lifecycle of it now
name|block
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"outstanding buffers in "
operator|+
name|factory
argument_list|,
literal|1
argument_list|,
name|factory
operator|.
name|getOutstandingBufferCount
argument_list|()
argument_list|)
expr_stmt|;
name|block
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read into a byte array with an offset
name|int
name|offset
init|=
literal|5
decl_stmt|;
name|byte
index|[]
name|in
init|=
operator|new
name|byte
index|[
name|limit
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stream
operator|.
name|read
argument_list|(
name|in
argument_list|,
name|offset
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'e'
argument_list|,
name|in
index|[
name|offset
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'s'
argument_list|,
name|in
index|[
name|offset
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|expected
operator|-=
literal|2
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong available() in "
operator|+
name|stream
argument_list|,
name|expected
argument_list|,
name|stream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// read to end
name|byte
index|[]
name|remainder
init|=
operator|new
name|byte
index|[
name|limit
index|]
decl_stmt|;
name|int
name|c
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|stream
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|remainder
index|[
name|index
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|c
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'a'
argument_list|,
name|remainder
index|[
operator|--
name|index
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong available() in "
operator|+
name|stream
argument_list|,
literal|0
argument_list|,
name|stream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hasRemaining() in "
operator|+
name|stream
argument_list|,
operator|!
name|stream
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|// when the stream is closed, the data should be returned
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"outstanding buffers in "
operator|+
name|factory
argument_list|,
literal|0
argument_list|,
name|factory
operator|.
name|getOutstandingBufferCount
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"outstanding buffers in "
operator|+
name|factory
argument_list|,
literal|0
argument_list|,
name|factory
operator|.
name|getOutstandingBufferCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

