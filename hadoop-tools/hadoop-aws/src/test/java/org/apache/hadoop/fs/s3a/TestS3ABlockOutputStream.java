begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|PutTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link S3ABlockOutputStream}.  */
end_comment

begin_class
DECL|class|TestS3ABlockOutputStream
specifier|public
class|class
name|TestS3ABlockOutputStream
extends|extends
name|AbstractS3AMockTest
block|{
DECL|field|stream
specifier|private
name|S3ABlockOutputStream
name|stream
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executorService
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|Progressable
name|progressable
init|=
name|mock
argument_list|(
name|Progressable
operator|.
name|class
argument_list|)
decl_stmt|;
name|S3ADataBlocks
operator|.
name|BlockFactory
name|blockFactory
init|=
name|mock
argument_list|(
name|S3ADataBlocks
operator|.
name|BlockFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|blockSize
init|=
name|Constants
operator|.
name|DEFAULT_MULTIPART_SIZE
decl_stmt|;
name|S3AInstrumentation
operator|.
name|OutputStreamStatistics
name|statistics
init|=
literal|null
decl_stmt|;
name|WriteOperationHelper
name|oHelper
init|=
name|mock
argument_list|(
name|WriteOperationHelper
operator|.
name|class
argument_list|)
decl_stmt|;
name|PutTracker
name|putTracker
init|=
name|mock
argument_list|(
name|PutTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|stream
operator|=
name|spy
argument_list|(
operator|new
name|S3ABlockOutputStream
argument_list|(
name|fs
argument_list|,
literal|""
argument_list|,
name|executorService
argument_list|,
name|progressable
argument_list|,
name|blockSize
argument_list|,
name|blockFactory
argument_list|,
name|statistics
argument_list|,
name|oHelper
argument_list|,
name|putTracker
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFlushNoOpWhenStreamClosed ()
specifier|public
name|void
name|testFlushNoOpWhenStreamClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|stream
argument_list|)
operator|.
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not have any exception."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

