begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3Guard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|MetricDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|BulkOperationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|LocalMetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|NullMetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|PathMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Tests failed writes to metadata store generate the expected  * MetadataPersistenceException.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|ITestS3AMetadataPersistenceException
specifier|public
class|class
name|ITestS3AMetadataPersistenceException
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3AMetadataPersistenceException
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|S3AFileSystem
name|fs
decl_stmt|;
DECL|field|ioException
specifier|private
name|IOException
name|ioException
decl_stmt|;
DECL|field|failOnError
specifier|private
specifier|final
name|boolean
name|failOnError
decl_stmt|;
DECL|method|ITestS3AMetadataPersistenceException (boolean failOnError)
specifier|public
name|ITestS3AMetadataPersistenceException
parameter_list|(
name|boolean
name|failOnError
parameter_list|)
block|{
name|this
operator|.
name|failOnError
operator|=
name|failOnError
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|params ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|true
block|}
block|,
block|{
literal|false
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|FAIL_ON_METADATA_WRITE_ERROR
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|failOnError
argument_list|)
argument_list|)
expr_stmt|;
comment|// replaced in setup() by IOExceptionMetadataStore
name|conf
operator|.
name|setClass
argument_list|(
name|Constants
operator|.
name|S3_METADATA_STORE_IMPL
argument_list|,
name|NullMetadataStore
operator|.
name|class
argument_list|,
name|MetadataStore
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|S3AFileSystem
name|contractFs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|=
operator|(
name|S3AFileSystem
operator|)
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|contractFs
operator|.
name|getUri
argument_list|()
argument_list|,
name|contractFs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|ioException
operator|=
operator|new
name|IOException
argument_list|()
expr_stmt|;
name|IOExceptionMetadataStore
name|metadataStore
init|=
operator|new
name|IOExceptionMetadataStore
argument_list|(
name|ioException
argument_list|)
decl_stmt|;
name|metadataStore
operator|.
name|initialize
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setMetadataStore
argument_list|(
name|metadataStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailedMetadataUpdate ()
specifier|public
name|void
name|testFailedMetadataUpdate
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// write a trivial file
name|Path
name|testFile
init|=
name|path
argument_list|(
literal|"testFailedMetadataUpdate"
argument_list|)
decl_stmt|;
try|try
block|{
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|failOnError
condition|)
block|{
comment|// close should throw the expected exception
name|MetadataPersistenceException
name|thrown
init|=
name|intercept
argument_list|(
name|MetadataPersistenceException
operator|.
name|class
argument_list|,
name|outputStream
operator|::
name|close
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cause didn't match original exception"
argument_list|,
name|ioException
argument_list|,
name|thrown
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MetricDiff
name|ignoredCount
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|IGNORED_ERRORS
argument_list|)
decl_stmt|;
comment|// close should merely log and increment the statistic
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|ignoredCount
operator|.
name|assertDiffEquals
argument_list|(
literal|"ignored errors"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// turn off the store and forcibly delete from the raw bucket.
name|fs
operator|.
name|setMetadataStore
argument_list|(
operator|new
name|NullMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IOExceptionMetadataStore
specifier|private
specifier|static
class|class
name|IOExceptionMetadataStore
extends|extends
name|LocalMetadataStore
block|{
DECL|field|ioException
specifier|private
specifier|final
name|IOException
name|ioException
decl_stmt|;
DECL|method|IOExceptionMetadataStore (IOException ioException)
specifier|private
name|IOExceptionMetadataStore
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
name|this
operator|.
name|ioException
operator|=
name|ioException
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|put (PathMetadata meta, final BulkOperationState operationState)
specifier|public
name|void
name|put
parameter_list|(
name|PathMetadata
name|meta
parameter_list|,
specifier|final
name|BulkOperationState
name|operationState
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
name|ioException
throw|;
block|}
annotation|@
name|Override
DECL|method|put (final PathMetadata meta)
specifier|public
name|void
name|put
parameter_list|(
specifier|final
name|PathMetadata
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|meta
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

