begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DirListingMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|touch
import|;
end_import

begin_comment
comment|/**  * Home for testing the creation of new files and directories with S3Guard  * enabled.  */
end_comment

begin_class
DECL|class|ITestS3GuardCreate
specifier|public
class|class
name|ITestS3GuardCreate
extends|extends
name|AbstractS3ATestBase
block|{
comment|/**    * Test that ancestor creation during S3AFileSystem#create() is properly    * accounted for in the MetadataStore.  This should be handled by the    * FileSystem, and be a FS contract test, but S3A does not handle ancestors on    * create(), so we need to take care in the S3Guard code to do the right    * thing.  This may change: See HADOOP-13221 for more detail.    */
annotation|@
name|Test
DECL|method|testCreatePopulatesFileAncestors ()
specifier|public
name|void
name|testCreatePopulatesFileAncestors
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MetadataStore
name|ms
init|=
name|fs
operator|.
name|getMetadataStore
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|parent
init|=
name|path
argument_list|(
literal|"testCreatePopulatesFileAncestors"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|nestedFile
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir1/dir2/file4"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|nestedFile
argument_list|)
expr_stmt|;
name|DirListingMetadata
name|list
init|=
name|ms
operator|.
name|listChildren
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"MetadataStore falsely reports authoritative empty list"
argument_list|,
name|list
operator|.
name|isEmpty
argument_list|()
operator|==
name|Tristate
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

