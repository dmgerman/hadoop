begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.scale
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|scale
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests for create(): performance and/or load testing.  */
end_comment

begin_class
DECL|class|ITestS3ACreatePerformance
specifier|public
class|class
name|ITestS3ACreatePerformance
extends|extends
name|S3AScaleTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3ADirectoryPerformance
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|basePath
specifier|private
name|Path
name|basePath
decl_stmt|;
DECL|field|basePathDepth
specifier|private
name|int
name|basePathDepth
decl_stmt|;
DECL|field|PATH_DEPTH
specifier|private
specifier|static
specifier|final
name|int
name|PATH_DEPTH
init|=
literal|10
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|basePath
operator|=
name|getTestPath
argument_list|()
expr_stmt|;
name|basePathDepth
operator|=
name|basePath
operator|.
name|depth
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test rate at which we can create deeply-nested files from a single thread.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDeepSequentialCreate ()
specifier|public
name|void
name|testDeepSequentialCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|numOperations
init|=
name|getOperationCount
argument_list|()
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|NanoTimer
name|timer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOperations
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
name|getPathIteration
argument_list|(
name|i
argument_list|,
name|PATH_DEPTH
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|40
argument_list|)
expr_stmt|;
comment|// one byte file with some value 40
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|timer
operator|.
name|end
argument_list|(
literal|"Time to create %d files of depth %d"
argument_list|,
name|getOperationCount
argument_list|()
argument_list|,
name|PATH_DEPTH
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per create: {} msec"
argument_list|,
name|timer
operator|.
name|nanosPerOperation
argument_list|(
name|numOperations
argument_list|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|/* Get a unique path of depth totalDepth for given test iteration. */
DECL|method|getPathIteration (long iter, int totalDepth)
specifier|private
name|Path
name|getPathIteration
parameter_list|(
name|long
name|iter
parameter_list|,
name|int
name|totalDepth
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Test path too long, increase PATH_DEPTH in test."
argument_list|,
name|totalDepth
operator|>
name|basePathDepth
argument_list|)
expr_stmt|;
name|int
name|neededDirs
init|=
name|totalDepth
operator|-
name|basePathDepth
operator|-
literal|1
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|neededDirs
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"iter-"
argument_list|)
operator|.
name|append
argument_list|(
name|iter
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"-dir-"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"file"
argument_list|)
operator|.
name|append
argument_list|(
name|iter
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|basePath
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

