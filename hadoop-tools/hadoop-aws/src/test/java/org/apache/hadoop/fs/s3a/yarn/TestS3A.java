begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.yarn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|yarn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestS3A
specifier|public
class|class
name|TestS3A
block|{
DECL|field|fc
specifier|private
name|FileContext
name|fc
decl_stmt|;
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
specifier|final
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|90000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|fc
operator|=
name|S3ATestUtils
operator|.
name|createTestFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fc
operator|.
name|delete
argument_list|(
name|getTestPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestPath ()
specifier|protected
name|Path
name|getTestPath
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/tests3afc"
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testS3AStatus ()
specifier|public
name|void
name|testS3AStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|FsStatus
name|fsStatus
init|=
name|fc
operator|.
name|getFsStatus
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fsStatus
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Used capacity should be positive: "
operator|+
name|fsStatus
operator|.
name|getUsed
argument_list|()
argument_list|,
name|fsStatus
operator|.
name|getUsed
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Remaining capacity should be positive: "
operator|+
name|fsStatus
operator|.
name|getRemaining
argument_list|()
argument_list|,
name|fsStatus
operator|.
name|getRemaining
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Capacity should be positive: "
operator|+
name|fsStatus
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|fsStatus
operator|.
name|getCapacity
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testS3ACreateFileInSubDir ()
specifier|public
name|void
name|testS3ACreateFileInSubDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dirPath
init|=
name|getTestPath
argument_list|()
decl_stmt|;
name|fc
operator|.
name|mkdir
argument_list|(
name|dirPath
argument_list|,
name|FileContext
operator|.
name|DIR_DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|file
init|=
name|fc
operator|.
name|create
argument_list|(
name|filePath
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
init|)
block|{
name|file
operator|.
name|write
argument_list|(
literal|666
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

