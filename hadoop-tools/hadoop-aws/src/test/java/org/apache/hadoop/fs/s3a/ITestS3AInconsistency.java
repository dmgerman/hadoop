begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractFSContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|s3a
operator|.
name|S3AContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|touch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|InconsistentAmazonS3Client
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests S3A behavior under forced inconsistency via {@link  * InconsistentAmazonS3Client}.  *  * These tests are for validating expected behavior *without* S3Guard, but  * may also run with S3Guard enabled.  For tests that validate S3Guard's  * consistency features, see {@link ITestS3GuardListConsistency}.  */
end_comment

begin_class
DECL|class|ITestS3AInconsistency
specifier|public
class|class
name|ITestS3AInconsistency
extends|extends
name|AbstractS3ATestBase
block|{
annotation|@
name|Override
DECL|method|createContract (Configuration conf)
specifier|protected
name|AbstractFSContract
name|createContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|S3_CLIENT_FACTORY_IMPL
argument_list|,
name|InconsistentS3ClientFactory
operator|.
name|class
argument_list|,
name|S3ClientFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_KEY
argument_list|,
name|DEFAULT_DELAY_KEY_SUBSTRING
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_PROBABILITY
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_MSEC
argument_list|,
name|DEFAULT_DELAY_KEY_MSEC
argument_list|)
expr_stmt|;
return|return
operator|new
name|S3AContract
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testGetFileStatus ()
specifier|public
name|void
name|testGetFileStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// 1. Make sure no ancestor dirs exist
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"ancestor"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitUntilDeleted
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// 2. Create a descendant file, which implicitly creates ancestors
comment|// This file has delayed visibility.
name|touch
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|(
literal|"ancestor/file-"
operator|+
name|DEFAULT_DELAY_KEY_SUBSTRING
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. Assert expected behavior.  If S3Guard is enabled, we should be able
comment|// to get status for ancestor.  If S3Guard is *not* enabled, S3A will
comment|// fail to infer the existence of the ancestor since visibility of the
comment|// child file is delayed, and its key prefix search will return nothing.
try|try
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|hasMetadataStore
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Ancestor is dir"
argument_list|,
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"getFileStatus should fail due to delayed visibility."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|.
name|hasMetadataStore
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"S3Guard failed to list parent of inconsistent child."
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"File not found, as expected."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitUntilDeleted (final Path p)
specifier|private
name|void
name|waitUntilDeleted
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|LambdaTestUtils
operator|.
name|eventually
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|1000
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|assertPathDoesNotExist
argument_list|(
literal|"Dir should be deleted"
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

