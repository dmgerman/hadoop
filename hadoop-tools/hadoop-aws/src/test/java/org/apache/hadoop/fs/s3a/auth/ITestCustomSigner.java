begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|SignableRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|Signer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3ClientBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|internal
operator|.
name|AWSS3V4Signer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AbstractS3ATestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|SimpleAWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|ITestCustomSigner
operator|.
name|CustomSignerInitializer
operator|.
name|StoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|CUSTOM_SIGNERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|SIGNING_ALGORITHM_S3
import|;
end_import

begin_comment
comment|/**  * Tests for custom Signers and SignerInitializers.  */
end_comment

begin_class
DECL|class|ITestCustomSigner
specifier|public
class|class
name|ITestCustomSigner
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestCustomSigner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_ID_KEY
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ID_KEY
init|=
literal|"TEST_ID_KEY"
decl_stmt|;
DECL|field|TEST_REGION_KEY
specifier|private
specifier|static
specifier|final
name|String
name|TEST_REGION_KEY
init|=
literal|"TEST_REGION_KEY"
decl_stmt|;
DECL|field|regionName
specifier|private
name|String
name|regionName
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|regionName
operator|=
name|determineRegion
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Determined region name to be [{}] for bucket [{}]"
argument_list|,
name|regionName
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomSignerAndInitializer ()
specifier|public
name|void
name|testCustomSignerAndInitializer
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|ugi1
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|runMkDirAndVerify
argument_list|(
name|ugi1
argument_list|,
literal|"/customsignerpath1"
argument_list|,
literal|"id1"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi2
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"user2"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs2
init|=
name|runMkDirAndVerify
argument_list|(
name|ugi2
argument_list|,
literal|"/customsignerpath2"
argument_list|,
literal|"id2"
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|CustomSignerInitializer
operator|.
name|knownStores
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
literal|"Num registered stores mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fs1
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|CustomSignerInitializer
operator|.
name|knownStores
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
literal|"Num registered stores mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|CustomSignerInitializer
operator|.
name|knownStores
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
literal|"Num registered stores mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|runMkDirAndVerify (UserGroupInformation ugi, String pathString, String identifier)
specifier|private
name|FileSystem
name|runMkDirAndVerify
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|String
name|pathString
parameter_list|,
name|String
name|identifier
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|createTestConfig
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|makeQualified
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|finalPath
init|=
name|path
decl_stmt|;
return|return
name|ugi
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|int
name|invocationCount
operator|=
name|CustomSigner
operator|.
name|invocationCount
block|;
name|FileSystem
name|fs
operator|=
name|finalPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
block|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|finalPath
argument_list|)
block|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|CustomSigner
operator|.
name|invocationCount
argument_list|)
operator|.
name|as
argument_list|(
literal|"Invocation count lower than expected"
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|invocationCount
argument_list|)
block|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|CustomSigner
operator|.
name|lastStoreValue
argument_list|)
operator|.
name|as
argument_list|(
literal|"Store value should not be null"
argument_list|)
operator|.
name|isNotNull
argument_list|()
block|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|CustomSigner
operator|.
name|lastStoreValue
operator|.
name|conf
argument_list|)
operator|.
name|as
argument_list|(
literal|"Configuration should not be null"
argument_list|)
operator|.
name|isNotNull
argument_list|()
block|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|CustomSigner
operator|.
name|lastStoreValue
operator|.
name|conf
operator|.
name|get
argument_list|(
name|TEST_ID_KEY
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
literal|"Configuration TEST_KEY mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|identifier
argument_list|)
block|;
return|return
name|fs
return|;
block|}
block|)
function|;
block|}
end_class

begin_function
DECL|method|createTestConfig (String identifier)
specifier|private
name|Configuration
name|createTestConfig
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CUSTOM_SIGNERS
argument_list|,
literal|"CustomS3Signer:"
operator|+
name|CustomSigner
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|CustomSignerInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SIGNING_ALGORITHM_S3
argument_list|,
literal|"CustomS3Signer"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TEST_ID_KEY
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TEST_REGION_KEY
argument_list|,
name|regionName
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
end_function

begin_function
DECL|method|determineRegion (String bucketName)
specifier|private
name|String
name|determineRegion
parameter_list|(
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|AmazonS3
name|s3
init|=
name|AmazonS3ClientBuilder
operator|.
name|standard
argument_list|()
operator|.
name|withCredentials
argument_list|(
operator|new
name|SimpleAWSCredentialsProvider
argument_list|(
literal|null
argument_list|,
name|createConfiguration
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withForceGlobalBucketAccessEnabled
argument_list|(
literal|true
argument_list|)
operator|.
name|withRegion
argument_list|(
literal|"us-east-1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|region
init|=
name|s3
operator|.
name|getBucketLocation
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
comment|//  See: https://forums.aws.amazon.com/thread.jspa?messageID=796829&tstart=0
if|if
condition|(
name|region
operator|.
name|equals
argument_list|(
literal|"US"
argument_list|)
condition|)
block|{
name|region
operator|=
literal|"us-east-1"
expr_stmt|;
block|}
return|return
name|region
return|;
block|}
end_function

begin_class
annotation|@
name|Private
DECL|class|CustomSigner
specifier|public
specifier|static
specifier|final
class|class
name|CustomSigner
implements|implements
name|Signer
block|{
DECL|field|invocationCount
specifier|private
specifier|static
name|int
name|invocationCount
init|=
literal|0
decl_stmt|;
DECL|field|lastStoreValue
specifier|private
specifier|static
name|StoreValue
name|lastStoreValue
decl_stmt|;
annotation|@
name|Override
DECL|method|sign (SignableRequest<?> request, AWSCredentials credentials)
specifier|public
name|void
name|sign
parameter_list|(
name|SignableRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|AWSCredentials
name|credentials
parameter_list|)
block|{
name|invocationCount
operator|++
expr_stmt|;
name|String
name|host
init|=
name|request
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|host
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|lastStoreValue
operator|=
name|CustomSignerInitializer
operator|.
name|getStoreValue
argument_list|(
name|bucketName
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to get current Ugi"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|AWSS3V4Signer
name|realSigner
init|=
operator|new
name|AWSS3V4Signer
argument_list|()
decl_stmt|;
name|realSigner
operator|.
name|setServiceName
argument_list|(
literal|"s3"
argument_list|)
expr_stmt|;
name|realSigner
operator|.
name|setRegionName
argument_list|(
name|lastStoreValue
operator|.
name|conf
operator|.
name|get
argument_list|(
name|TEST_REGION_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|realSigner
operator|.
name|sign
argument_list|(
name|request
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
annotation|@
name|Private
DECL|class|CustomSignerInitializer
specifier|public
specifier|static
specifier|final
class|class
name|CustomSignerInitializer
implements|implements
name|AwsSignerInitializer
block|{
DECL|field|knownStores
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|StoreKey
argument_list|,
name|StoreValue
argument_list|>
name|knownStores
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|registerStore (String bucketName, Configuration storeConf, DelegationTokenProvider dtProvider, UserGroupInformation storeUgi)
specifier|public
name|void
name|registerStore
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|Configuration
name|storeConf
parameter_list|,
name|DelegationTokenProvider
name|dtProvider
parameter_list|,
name|UserGroupInformation
name|storeUgi
parameter_list|)
block|{
name|StoreKey
name|storeKey
init|=
operator|new
name|StoreKey
argument_list|(
name|bucketName
argument_list|,
name|storeUgi
argument_list|)
decl_stmt|;
name|StoreValue
name|storeValue
init|=
operator|new
name|StoreValue
argument_list|(
name|storeConf
argument_list|,
name|dtProvider
argument_list|)
decl_stmt|;
name|knownStores
operator|.
name|put
argument_list|(
name|storeKey
argument_list|,
name|storeValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unregisterStore (String bucketName, Configuration storeConf, DelegationTokenProvider dtProvider, UserGroupInformation storeUgi)
specifier|public
name|void
name|unregisterStore
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|Configuration
name|storeConf
parameter_list|,
name|DelegationTokenProvider
name|dtProvider
parameter_list|,
name|UserGroupInformation
name|storeUgi
parameter_list|)
block|{
name|StoreKey
name|storeKey
init|=
operator|new
name|StoreKey
argument_list|(
name|bucketName
argument_list|,
name|storeUgi
argument_list|)
decl_stmt|;
name|knownStores
operator|.
name|remove
argument_list|(
name|storeKey
argument_list|)
expr_stmt|;
block|}
DECL|method|getStoreValue (String bucketName, UserGroupInformation ugi)
specifier|public
specifier|static
name|StoreValue
name|getStoreValue
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
name|StoreKey
name|storeKey
init|=
operator|new
name|StoreKey
argument_list|(
name|bucketName
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
return|return
name|knownStores
operator|.
name|get
argument_list|(
name|storeKey
argument_list|)
return|;
block|}
DECL|class|StoreKey
specifier|private
specifier|static
class|class
name|StoreKey
block|{
DECL|field|bucketName
specifier|private
specifier|final
name|String
name|bucketName
decl_stmt|;
DECL|field|ugi
specifier|private
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|method|StoreKey (String bucketName, UserGroupInformation ugi)
specifier|public
name|StoreKey
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
name|this
operator|.
name|bucketName
operator|=
name|bucketName
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|StoreKey
name|storeKey
init|=
operator|(
name|StoreKey
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|bucketName
argument_list|,
name|storeKey
operator|.
name|bucketName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|ugi
argument_list|,
name|storeKey
operator|.
name|ugi
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|bucketName
argument_list|,
name|ugi
argument_list|)
return|;
block|}
block|}
DECL|class|StoreValue
specifier|static
class|class
name|StoreValue
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|dtProvider
specifier|private
specifier|final
name|DelegationTokenProvider
name|dtProvider
decl_stmt|;
DECL|method|StoreValue (Configuration conf, DelegationTokenProvider dtProvider)
specifier|public
name|StoreValue
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|DelegationTokenProvider
name|dtProvider
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|dtProvider
operator|=
name|dtProvider
expr_stmt|;
block|}
block|}
block|}
end_class

unit|}
end_unit

