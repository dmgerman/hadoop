begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|WordCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MockJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|MiniMRYarnCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3GUARD_METASTORE_NULL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|assumeSessionTestsEnabled
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|deployService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|getTestPropertyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|terminateService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|RoleTestUtils
operator|.
name|probeForAssumedRoleARN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|MiniKerberizedHadoopCluster
operator|.
name|assertSecurityEnabled
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|MiniKerberizedHadoopCluster
operator|.
name|closeUserFileSystems
import|;
end_import

begin_comment
comment|/**  * Submit a job with S3 delegation tokens.  *  * YARN will not collect DTs unless it is running secure, and turning  * security on complicates test setup "significantly".  * Specifically: buts of MR refuse to work on a local FS unless the  * native libraries are loaded and it can use lower level POSIX APIs  * for creating files and directories with specific permissions.  * In production, this is a good thing. In tests, this is not.  *  * To address this, Job to YARN communications are mocked.  * The client-side job submission is as normal, but the implementation  * of org.apache.hadoop.mapreduce.protocol.ClientProtocol is mock.  *  * It's still an ITest though, as it does use S3A as the source and  * dest so as to collect delegation tokens.  *  * It also uses the open street map open bucket, so that there's an extra  * S3 URL in job submission which can be added as a job resource.  * This is needed to verify that job resources have their tokens extracted  * too.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|ITestDelegatedMRJob
specifier|public
class|class
name|ITestDelegatedMRJob
extends|extends
name|AbstractDelegationIT
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestDelegatedMRJob
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Created in static {@link #setupCluster()} call.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StaticNonFinalField"
argument_list|)
DECL|field|cluster
specifier|private
specifier|static
name|MiniKerberizedHadoopCluster
name|cluster
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|tokenBinding
specifier|private
specifier|final
name|String
name|tokenBinding
decl_stmt|;
DECL|field|tokenKind
specifier|private
specifier|final
name|Text
name|tokenKind
decl_stmt|;
comment|/**    * Created in test setup.    */
DECL|field|yarn
specifier|private
name|MiniMRYarnCluster
name|yarn
decl_stmt|;
DECL|field|destPath
specifier|private
name|Path
name|destPath
decl_stmt|;
DECL|field|EXTRA_JOB_RESOURCE_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|EXTRA_JOB_RESOURCE_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://osm-pds/planet/planet-latest.orc"
argument_list|)
decl_stmt|;
DECL|field|jobResource
specifier|public
specifier|static
specifier|final
name|URI
name|jobResource
init|=
name|EXTRA_JOB_RESOURCE_PATH
operator|.
name|toUri
argument_list|()
decl_stmt|;
comment|/**    * Test array for parameterized test runs.    * @return a list of parameter tuples.    */
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|params ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"session"
block|,
name|DELEGATION_TOKEN_SESSION_BINDING
block|,
name|SESSION_TOKEN_KIND
block|}
block|,
block|{
literal|"full"
block|,
name|DELEGATION_TOKEN_FULL_CREDENTIALS_BINDING
block|,
name|FULL_TOKEN_KIND
block|}
block|,
block|{
literal|"role"
block|,
name|DELEGATION_TOKEN_ROLE_BINDING
block|,
name|ROLE_TOKEN_KIND
block|}
block|,     }
argument_list|)
return|;
block|}
DECL|method|ITestDelegatedMRJob (String name, String tokenBinding, Text tokenKind)
specifier|public
name|ITestDelegatedMRJob
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|tokenBinding
parameter_list|,
name|Text
name|tokenKind
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|tokenBinding
operator|=
name|tokenBinding
expr_stmt|;
name|this
operator|.
name|tokenKind
operator|=
name|tokenKind
expr_stmt|;
block|}
comment|/***    * Set up the clusters.    */
annotation|@
name|BeforeClass
DECL|method|setupCluster ()
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|assumeSessionTestsEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|deployService
argument_list|(
name|conf
argument_list|,
operator|new
name|MiniKerberizedHadoopCluster
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tear down the cluster.    */
annotation|@
name|AfterClass
DECL|method|teardownCluster ()
specifier|public
specifier|static
name|void
name|teardownCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|terminateService
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|YarnConfiguration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|parent
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|patchConfigWithYARNBindings
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// fail fairly fast
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
argument_list|,
literal|10_000
argument_list|)
expr_stmt|;
comment|// turn off DDB for the job resource bucket
name|String
name|host
init|=
name|jobResource
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"fs.s3a.bucket.%s.metadatastore.impl"
argument_list|,
name|host
argument_list|)
argument_list|,
name|S3GUARD_METASTORE_NULL
argument_list|)
expr_stmt|;
comment|// and fix to the main endpoint if the caller has moved
name|conf
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"fs.s3a.bucket.%s.endpoint"
argument_list|,
name|host
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// set up DTs
name|enableDelegationTokens
argument_list|(
name|conf
argument_list|,
name|tokenBinding
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|protected
name|YarnConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
operator|(
name|YarnConfiguration
operator|)
name|super
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|loginPrincipal
argument_list|()
expr_stmt|;
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|DELEGATION_TOKEN_ROLE_BINDING
operator|.
name|equals
argument_list|(
name|tokenBinding
argument_list|)
condition|)
block|{
comment|// get the ARN or skip the test
name|probeForAssumedRoleARN
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// filesystems are cached across the test so that
comment|// instrumentation fields can be asserted on
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertSecurityEnabled
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting MiniMRCluster"
argument_list|)
expr_stmt|;
name|yarn
operator|=
name|deployService
argument_list|(
name|conf
argument_list|,
operator|new
name|MiniMRYarnCluster
argument_list|(
literal|"ITestDelegatedMRJob"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"Teardown operations"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
operator|&&
name|destPath
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|destPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|yarn
operator|=
name|terminateService
argument_list|(
name|yarn
argument_list|)
expr_stmt|;
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
name|closeUserFileSystems
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the test timeout in seconds.    * @return the test timeout as set in system properties or the default.    */
DECL|method|getTestTimeoutSeconds ()
specifier|protected
name|int
name|getTestTimeoutSeconds
parameter_list|()
block|{
return|return
name|getTestPropertyInt
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|KEY_TEST_TIMEOUT
argument_list|,
name|SCALE_TEST_TIMEOUT_SECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTestTimeoutMillis ()
specifier|protected
name|int
name|getTestTimeoutMillis
parameter_list|()
block|{
return|return
name|getTestTimeoutSeconds
argument_list|()
operator|*
literal|1000
return|;
block|}
annotation|@
name|Test
DECL|method|testCommonCrawlLookup ()
specifier|public
name|void
name|testCommonCrawlLookup
parameter_list|()
throws|throws
name|Throwable
block|{
name|FileSystem
name|resourceFS
init|=
name|EXTRA_JOB_RESOURCE_PATH
operator|.
name|getFileSystem
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|resourceFS
operator|.
name|getFileStatus
argument_list|(
name|EXTRA_JOB_RESOURCE_PATH
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Extra job resource is {}"
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not encrypted: "
operator|+
name|status
argument_list|,
name|status
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobSubmissionCollectsTokens ()
specifier|public
name|void
name|testJobSubmissionCollectsTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"Mock Job test"
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// the input here is the landsat file; which lets
comment|// us differentiate source URI from dest URI
name|Path
name|input
init|=
operator|new
name|Path
argument_list|(
name|DEFAULT_CSVTEST_FILE
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|sourceFS
init|=
name|input
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// output is in the writable test FS.
specifier|final
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|destPath
operator|=
name|path
argument_list|(
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|destPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|Path
name|output
init|=
operator|new
name|Path
argument_list|(
name|destPath
argument_list|,
literal|"output/"
argument_list|)
decl_stmt|;
name|output
operator|=
name|output
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|MockJob
name|job
init|=
operator|new
name|MockJob
argument_list|(
name|conf
argument_list|,
literal|"word count"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|WordCount
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|WordCount
operator|.
name|TokenizerMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setCombinerClass
argument_list|(
name|WordCount
operator|.
name|IntSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|WordCount
operator|.
name|IntSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// and a file for a different store.
comment|// This is to actually stress the terasort code for which
comment|// the yarn ResourceLocalizationService was having problems with
comment|// fetching resources from.
name|URI
name|partitionUri
init|=
operator|new
name|URI
argument_list|(
name|EXTRA_JOB_RESOURCE_PATH
operator|.
name|toString
argument_list|()
operator|+
literal|"#_partition.lst"
argument_list|)
decl_stmt|;
name|job
operator|.
name|addCacheFile
argument_list|(
name|partitionUri
argument_list|)
expr_stmt|;
name|describe
argument_list|(
literal|"Executing Mock Job Submission to %s"
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
specifier|final
name|JobStatus
name|status
init|=
name|job
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"not a mock job"
argument_list|,
name|MockJob
operator|.
name|NAME
argument_list|,
name|status
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job State"
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Credentials
name|submittedCredentials
init|=
name|requireNonNull
argument_list|(
name|job
operator|.
name|getSubmittedCredentials
argument_list|()
argument_list|,
literal|"job submitted credentials"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokens
init|=
name|submittedCredentials
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
comment|// log all the tokens for debugging failed test runs
name|LOG
operator|.
name|info
argument_list|(
literal|"Token Count = {}"
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
comment|// verify the source token exists
name|lookupToken
argument_list|(
name|submittedCredentials
argument_list|,
name|sourceFS
operator|.
name|getUri
argument_list|()
argument_list|,
name|tokenKind
argument_list|)
expr_stmt|;
comment|// look up the destination token
name|lookupToken
argument_list|(
name|submittedCredentials
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|tokenKind
argument_list|)
expr_stmt|;
name|lookupToken
argument_list|(
name|submittedCredentials
argument_list|,
name|EXTRA_JOB_RESOURCE_PATH
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|tokenKind
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

