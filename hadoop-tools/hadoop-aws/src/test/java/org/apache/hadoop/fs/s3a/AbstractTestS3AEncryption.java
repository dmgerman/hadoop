begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test whether or not encryption works by turning it on. Some checks  * are made for different file sizes as there have been reports that the  * file length may be rounded up to match word boundaries.  */
end_comment

begin_class
DECL|class|AbstractTestS3AEncryption
specifier|public
specifier|abstract
class|class
name|AbstractTestS3AEncryption
extends|extends
name|AbstractS3ATestBase
block|{
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|,
name|getSSEAlgorithm
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|field|SIZES
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|SIZES
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|254
block|,
literal|255
block|,
literal|256
block|,
literal|257
block|,
literal|2
operator|^
literal|12
operator|-
literal|1
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testEncryption ()
specifier|public
name|void
name|testEncryption
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|size
range|:
name|SIZES
control|)
block|{
name|validateEncryptionForFilesize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEncryptionOverRename ()
specifier|public
name|void
name|testEncryptionOverRename
parameter_list|()
throws|throws
name|Throwable
block|{
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|src
init|=
name|path
argument_list|(
name|createFilename
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
literal|1024
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|writeDataset
argument_list|(
name|fs
argument_list|,
name|src
argument_list|,
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|verifyFileContents
argument_list|(
name|fs
argument_list|,
name|src
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Path
name|dest
init|=
name|path
argument_list|(
name|src
operator|.
name|getName
argument_list|()
operator|+
literal|"-copy"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|verifyFileContents
argument_list|(
name|fs
argument_list|,
name|dest
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertEncrypted
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
DECL|method|validateEncryptionForFilesize (int len)
specifier|protected
name|void
name|validateEncryptionForFilesize
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|describe
argument_list|(
literal|"Create an encrypted file of size "
operator|+
name|len
argument_list|)
expr_stmt|;
name|String
name|src
init|=
name|createFilename
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
name|writeThenReadFile
argument_list|(
name|src
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|assertEncrypted
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|rm
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|createFilename (int len)
specifier|protected
name|String
name|createFilename
parameter_list|(
name|int
name|len
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s-%04x"
argument_list|,
name|methodName
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|len
argument_list|)
return|;
block|}
comment|/**    * Assert that at path references an encrypted blob.    * @param path path    * @throws IOException on a failure    */
DECL|method|assertEncrypted (Path path)
specifier|protected
name|void
name|assertEncrypted
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMetadata
name|md
init|=
name|getFileSystem
argument_list|()
operator|.
name|getObjectMetadata
argument_list|(
name|path
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|getSSEAlgorithm
argument_list|()
condition|)
block|{
case|case
name|SSE_C
case|:
name|assertEquals
argument_list|(
literal|"AES256"
argument_list|,
name|md
operator|.
name|getSSECustomerAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|md5Key
init|=
name|convertKeyToMd5
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md5Key
argument_list|,
name|md
operator|.
name|getSSECustomerKeyMd5
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SSE_KMS
case|:
name|assertEquals
argument_list|(
literal|"aws:kms"
argument_list|,
name|md
operator|.
name|getSSEAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
comment|//S3 will return full arn of the key, so specify global arn in properties
name|assertEquals
argument_list|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
argument_list|)
argument_list|,
name|md
operator|.
name|getSSEAwsKmsKeyId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|assertEquals
argument_list|(
literal|"AES256"
argument_list|,
name|md
operator|.
name|getSSEAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Decodes the SERVER_SIDE_ENCRYPTION_KEY from base64 into an AES key, then    * gets the md5 of it, then encodes it in base64 so it will match the version    * that AWS returns to us.    *    * @return md5'd base64 encoded representation of the server side encryption    * key    */
DECL|method|convertKeyToMd5 ()
specifier|private
name|String
name|convertKeyToMd5
parameter_list|()
block|{
name|String
name|base64Key
init|=
name|getConfiguration
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|base64Key
argument_list|)
decl_stmt|;
name|byte
index|[]
name|md5
init|=
name|DigestUtils
operator|.
name|md5
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|md5
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|getSSEAlgorithm ()
specifier|protected
specifier|abstract
name|S3AEncryptionMethods
name|getSSEAlgorithm
parameter_list|()
function_decl|;
block|}
end_class

end_unit

