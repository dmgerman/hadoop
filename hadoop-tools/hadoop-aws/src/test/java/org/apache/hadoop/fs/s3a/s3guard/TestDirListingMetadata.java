begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit tests of {@link DirListingMetadata}.  */
end_comment

begin_class
DECL|class|TestDirListingMetadata
specifier|public
class|class
name|TestDirListingMetadata
block|{
DECL|field|TEST_OWNER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_OWNER
init|=
literal|"hadoop"
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testNullPath ()
specifier|public
name|void
name|testNullPath
parameter_list|()
block|{
name|exception
operator|.
name|expect
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|notNullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|DirListingMetadata
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullListing ()
specifier|public
name|void
name|testNullListing
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|meta
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyListing ()
specifier|public
name|void
name|testEmptyListing
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|PathMetadata
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|meta
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListing ()
specifier|public
name|void
name|testListing
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta1
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta2
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir2"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta3
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
literal|8192
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PathMetadata
argument_list|>
name|listing
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|pathMeta1
argument_list|,
name|pathMeta2
argument_list|,
name|pathMeta3
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
name|listing
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|meta
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListingUnmodifiable ()
specifier|public
name|void
name|testListingUnmodifiable
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
name|makeTwoDirsOneFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthoritative ()
specifier|public
name|void
name|testAuthoritative
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|meta
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAuthoritative ()
specifier|public
name|void
name|testSetAuthoritative
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|meta
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|setAuthoritative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta1
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta2
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir2"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta3
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
literal|8192
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PathMetadata
argument_list|>
name|listing
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|pathMeta1
argument_list|,
name|pathMeta2
argument_list|,
name|pathMeta3
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
name|listing
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|meta
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pathMeta1
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|pathMeta1
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pathMeta2
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|pathMeta2
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pathMeta3
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|pathMeta3
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|meta
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"notfound"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNull ()
specifier|public
name|void
name|testGetNull
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|notNullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRoot ()
specifier|public
name|void
name|testGetRoot
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|notNullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNotChild ()
specifier|public
name|void
name|testGetNotChild
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|notNullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/different/ancestor"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPut ()
specifier|public
name|void
name|testPut
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta1
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta2
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir2"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta3
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
literal|8192
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PathMetadata
argument_list|>
name|listing
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|pathMeta1
argument_list|,
name|pathMeta2
argument_list|,
name|pathMeta3
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
name|listing
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|meta
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
name|PathMetadata
name|pathMeta4
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir3"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|pathMeta4
operator|.
name|getFileStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pathMeta4
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|pathMeta4
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutNull ()
specifier|public
name|void
name|testPutNull
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|notNullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutNullPath ()
specifier|public
name|void
name|testPutNullPath
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|notNullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutRoot ()
specifier|public
name|void
name|testPutRoot
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|notNullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutNotChild ()
specifier|public
name|void
name|testPutNotChild
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|notNullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/different/ancestor"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemove ()
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta1
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir1"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta2
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"dir2"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta3
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
literal|8192
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PathMetadata
argument_list|>
name|listing
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|pathMeta1
argument_list|,
name|pathMeta2
argument_list|,
name|pathMeta3
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
name|listing
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|meta
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|remove
argument_list|(
name|pathMeta1
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|getListing
argument_list|()
operator|.
name|contains
argument_list|(
name|pathMeta1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|meta
operator|.
name|get
argument_list|(
name|pathMeta1
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveNull ()
specifier|public
name|void
name|testRemoveNull
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|notNullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveRoot ()
specifier|public
name|void
name|testRemoveRoot
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|notNullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|remove
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveNotChild ()
specifier|public
name|void
name|testRemoveNotChild
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|meta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|notNullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|remove
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/different/ancestor"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Create DirListingMetadata with two dirs and one file living in directory    * 'parent'    */
DECL|method|makeTwoDirsOneFile (Path parent)
specifier|private
specifier|static
name|DirListingMetadata
name|makeTwoDirsOneFile
parameter_list|(
name|Path
name|parent
parameter_list|)
block|{
name|PathMetadata
name|pathMeta1
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir1"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta2
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir2"
argument_list|)
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|PathMetadata
name|pathMeta3
init|=
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|,
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
literal|8192
argument_list|,
name|TEST_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PathMetadata
argument_list|>
name|listing
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|pathMeta1
argument_list|,
name|pathMeta2
argument_list|,
name|pathMeta3
argument_list|)
decl_stmt|;
return|return
operator|new
name|DirListingMetadata
argument_list|(
name|parent
argument_list|,
name|listing
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

