begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Tristate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|DEFAULT_METADATASTORE_METADATA_TTL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|METADATASTORE_METADATA_TTL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link S3Guard} utility class.  */
end_comment

begin_class
DECL|class|TestS3Guard
specifier|public
class|class
name|TestS3Guard
extends|extends
name|Assert
block|{
comment|/**    * Basic test to ensure results from S3 and MetadataStore are merged    * correctly.    */
annotation|@
name|Test
DECL|method|testDirListingUnion ()
specifier|public
name|void
name|testDirListingUnion
parameter_list|()
throws|throws
name|Exception
block|{
name|MetadataStore
name|ms
init|=
operator|new
name|LocalMetadataStore
argument_list|()
decl_stmt|;
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/dir"
argument_list|)
decl_stmt|;
comment|// Two files in metadata store listing
name|PathMetadata
name|m1
init|=
name|makePathMeta
argument_list|(
literal|"s3a://bucket/dir/ms-file1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PathMetadata
name|m2
init|=
name|makePathMeta
argument_list|(
literal|"s3a://bucket/dir/ms-file2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|dirMeta
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|dirPath
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Two other files in s3
name|List
argument_list|<
name|S3AFileStatus
argument_list|>
name|s3Listing
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|makeFileStatus
argument_list|(
literal|"s3a://bucket/dir/s3-file3"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|makeFileStatus
argument_list|(
literal|"s3a://bucket/dir/s3-file4"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|ITtlTimeProvider
name|timeProvider
init|=
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|DEFAULT_METADATASTORE_METADATA_TTL
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|result
init|=
name|S3Guard
operator|.
name|dirListingUnion
argument_list|(
name|ms
argument_list|,
name|dirPath
argument_list|,
name|s3Listing
argument_list|,
name|dirMeta
argument_list|,
literal|false
argument_list|,
name|timeProvider
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"listing length"
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertContainsPath
argument_list|(
name|result
argument_list|,
literal|"s3a://bucket/dir/ms-file1"
argument_list|)
expr_stmt|;
name|assertContainsPath
argument_list|(
name|result
argument_list|,
literal|"s3a://bucket/dir/ms-file2"
argument_list|)
expr_stmt|;
name|assertContainsPath
argument_list|(
name|result
argument_list|,
literal|"s3a://bucket/dir/s3-file3"
argument_list|)
expr_stmt|;
name|assertContainsPath
argument_list|(
name|result
argument_list|,
literal|"s3a://bucket/dir/s3-file4"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutWithTtlDirListingMeta ()
specifier|public
name|void
name|testPutWithTtlDirListingMeta
parameter_list|()
throws|throws
name|Exception
block|{
comment|// arrange
name|DirListingMetadata
name|dlm
init|=
operator|new
name|DirListingMetadata
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MetadataStore
name|ms
init|=
name|spy
argument_list|(
name|MetadataStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|ITtlTimeProvider
name|timeProvider
init|=
name|mock
argument_list|(
name|ITtlTimeProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|timeProvider
operator|.
name|getNow
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
comment|// act
name|S3Guard
operator|.
name|putWithTtl
argument_list|(
name|ms
argument_list|,
name|dlm
argument_list|,
name|timeProvider
argument_list|)
expr_stmt|;
comment|// assert
name|assertEquals
argument_list|(
literal|"last update in "
operator|+
name|dlm
argument_list|,
literal|100L
argument_list|,
name|dlm
operator|.
name|getLastUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|timeProvider
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getNow
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|ms
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|dlm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutWithTtlFileMeta ()
specifier|public
name|void
name|testPutWithTtlFileMeta
parameter_list|()
throws|throws
name|Exception
block|{
comment|// arrange
name|S3AFileStatus
name|fileStatus
init|=
name|mock
argument_list|(
name|S3AFileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|PathMetadata
name|pm
init|=
operator|new
name|PathMetadata
argument_list|(
name|fileStatus
argument_list|)
decl_stmt|;
name|MetadataStore
name|ms
init|=
name|spy
argument_list|(
name|MetadataStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|ITtlTimeProvider
name|timeProvider
init|=
name|mock
argument_list|(
name|ITtlTimeProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|timeProvider
operator|.
name|getNow
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
comment|// act
name|S3Guard
operator|.
name|putWithTtl
argument_list|(
name|ms
argument_list|,
name|pm
argument_list|,
name|timeProvider
argument_list|)
expr_stmt|;
comment|// assert
name|assertEquals
argument_list|(
literal|"last update in "
operator|+
name|pm
argument_list|,
literal|100L
argument_list|,
name|pm
operator|.
name|getLastUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|timeProvider
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getNow
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|ms
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|pm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutWithTtlCollection ()
specifier|public
name|void
name|testPutWithTtlCollection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// arrange
name|S3AFileStatus
name|fileStatus
init|=
name|mock
argument_list|(
name|S3AFileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PathMetadata
argument_list|>
name|pmCollection
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|pmCollection
operator|.
name|add
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|fileStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MetadataStore
name|ms
init|=
name|spy
argument_list|(
name|MetadataStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|ITtlTimeProvider
name|timeProvider
init|=
name|mock
argument_list|(
name|ITtlTimeProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|timeProvider
operator|.
name|getNow
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
comment|// act
name|S3Guard
operator|.
name|putWithTtl
argument_list|(
name|ms
argument_list|,
name|pmCollection
argument_list|,
name|timeProvider
argument_list|)
expr_stmt|;
comment|// assert
name|pmCollection
operator|.
name|forEach
argument_list|(
name|pm
lambda|->
name|assertEquals
argument_list|(
literal|100L
argument_list|,
name|pm
operator|.
name|getLastUpdated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|timeProvider
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getNow
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|ms
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|pmCollection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetWithTtlExpired ()
specifier|public
name|void
name|testGetWithTtlExpired
parameter_list|()
throws|throws
name|Exception
block|{
comment|// arrange
name|S3AFileStatus
name|fileStatus
init|=
name|mock
argument_list|(
name|S3AFileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|PathMetadata
name|pm
init|=
operator|new
name|PathMetadata
argument_list|(
name|fileStatus
argument_list|)
decl_stmt|;
name|pm
operator|.
name|setLastUpdated
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|MetadataStore
name|ms
init|=
name|mock
argument_list|(
name|MetadataStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ms
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|ITtlTimeProvider
name|timeProvider
init|=
name|mock
argument_list|(
name|ITtlTimeProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|timeProvider
operator|.
name|getNow
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|101L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timeProvider
operator|.
name|getMetadataTtl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
comment|// act
specifier|final
name|PathMetadata
name|pmExpired
init|=
name|S3Guard
operator|.
name|getWithTtl
argument_list|(
name|ms
argument_list|,
name|path
argument_list|,
name|timeProvider
argument_list|)
decl_stmt|;
comment|// assert
name|assertNull
argument_list|(
name|pmExpired
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetWithTtlNotExpired ()
specifier|public
name|void
name|testGetWithTtlNotExpired
parameter_list|()
throws|throws
name|Exception
block|{
comment|// arrange
name|S3AFileStatus
name|fileStatus
init|=
name|mock
argument_list|(
name|S3AFileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|PathMetadata
name|pm
init|=
operator|new
name|PathMetadata
argument_list|(
name|fileStatus
argument_list|)
decl_stmt|;
name|pm
operator|.
name|setLastUpdated
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|MetadataStore
name|ms
init|=
name|mock
argument_list|(
name|MetadataStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ms
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|ITtlTimeProvider
name|timeProvider
init|=
name|mock
argument_list|(
name|ITtlTimeProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|timeProvider
operator|.
name|getNow
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|101L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timeProvider
operator|.
name|getMetadataTtl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
comment|// act
specifier|final
name|PathMetadata
name|pmNotExpired
init|=
name|S3Guard
operator|.
name|getWithTtl
argument_list|(
name|ms
argument_list|,
name|path
argument_list|,
name|timeProvider
argument_list|)
decl_stmt|;
comment|// assert
name|assertNotNull
argument_list|(
name|pmNotExpired
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetWithZeroLastUpdatedNotExpired ()
specifier|public
name|void
name|testGetWithZeroLastUpdatedNotExpired
parameter_list|()
throws|throws
name|Exception
block|{
comment|// arrange
name|S3AFileStatus
name|fileStatus
init|=
name|mock
argument_list|(
name|S3AFileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|PathMetadata
name|pm
init|=
operator|new
name|PathMetadata
argument_list|(
name|fileStatus
argument_list|)
decl_stmt|;
comment|// we set 0 this time as the last updated: can happen eg. when we use an
comment|// old dynamo table
name|pm
operator|.
name|setLastUpdated
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|MetadataStore
name|ms
init|=
name|mock
argument_list|(
name|MetadataStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ms
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|ITtlTimeProvider
name|timeProvider
init|=
name|mock
argument_list|(
name|ITtlTimeProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|timeProvider
operator|.
name|getNow
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|101L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timeProvider
operator|.
name|getMetadataTtl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
comment|// act
specifier|final
name|PathMetadata
name|pmExpired
init|=
name|S3Guard
operator|.
name|getWithTtl
argument_list|(
name|ms
argument_list|,
name|path
argument_list|,
name|timeProvider
argument_list|)
decl_stmt|;
comment|// assert
name|assertNotNull
argument_list|(
name|pmExpired
argument_list|)
expr_stmt|;
block|}
comment|/**    * Makes sure that all uses of TTL timeouts use a consistent time unit.    * @throws Throwable failure    */
annotation|@
name|Test
DECL|method|testTTLConstruction ()
specifier|public
name|void
name|testTTLConstruction
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// first one
name|ITtlTimeProvider
name|timeProviderExplicit
init|=
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|DEFAULT_METADATASTORE_METADATA_TTL
argument_list|)
decl_stmt|;
comment|// mirror the FS construction,
comment|// from a config guaranteed to be empty (i.e. the code defval)
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|long
name|millitime
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|METADATASTORE_METADATA_TTL
argument_list|,
name|DEFAULT_METADATASTORE_METADATA_TTL
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|15
operator|*
literal|60_000
argument_list|,
name|millitime
argument_list|)
expr_stmt|;
name|S3Guard
operator|.
name|TtlTimeProvider
name|fsConstruction
init|=
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|millitime
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"explicit vs fs construction"
argument_list|,
name|timeProviderExplicit
argument_list|,
name|fsConstruction
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first and second constructor"
argument_list|,
name|timeProviderExplicit
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the conf to a time without unit
name|conf
operator|.
name|setLong
argument_list|(
name|METADATASTORE_METADATA_TTL
argument_list|,
name|DEFAULT_METADATASTORE_METADATA_TTL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first and second time set through long"
argument_list|,
name|timeProviderExplicit
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|timeInSeconds
init|=
name|DEFAULT_METADATASTORE_METADATA_TTL
operator|/
literal|1000
decl_stmt|;
name|double
name|timeInMinutes
init|=
name|timeInSeconds
operator|/
literal|60
decl_stmt|;
name|String
name|timeStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%dm"
argument_list|,
operator|(
name|int
operator|)
name|timeInMinutes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|":wrong time in minutes from "
operator|+
name|timeInMinutes
argument_list|,
literal|"15m"
argument_list|,
name|timeStr
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|METADATASTORE_METADATA_TTL
argument_list|,
name|timeStr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Time in millis as string from "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|METADATASTORE_METADATA_TTL
argument_list|)
argument_list|,
name|timeProviderExplicit
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertContainsPath (FileStatus[] statuses, String pathStr)
name|void
name|assertContainsPath
parameter_list|(
name|FileStatus
index|[]
name|statuses
parameter_list|,
name|String
name|pathStr
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"listing doesn't contain "
operator|+
name|pathStr
argument_list|,
name|containsPath
argument_list|(
name|statuses
argument_list|,
name|pathStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|containsPath (FileStatus[] statuses, String pathStr)
name|boolean
name|containsPath
parameter_list|(
name|FileStatus
index|[]
name|statuses
parameter_list|,
name|String
name|pathStr
parameter_list|)
block|{
for|for
control|(
name|FileStatus
name|s
range|:
name|statuses
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|pathStr
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|makePathMeta (String pathStr, boolean isDir)
specifier|private
name|PathMetadata
name|makePathMeta
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|boolean
name|isDir
parameter_list|)
block|{
return|return
operator|new
name|PathMetadata
argument_list|(
name|makeFileStatus
argument_list|(
name|pathStr
argument_list|,
name|isDir
argument_list|)
argument_list|)
return|;
block|}
DECL|method|makeFileStatus (String pathStr, boolean isDir)
specifier|private
name|S3AFileStatus
name|makeFileStatus
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|boolean
name|isDir
parameter_list|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|pathStr
argument_list|)
decl_stmt|;
name|S3AFileStatus
name|fileStatus
decl_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
name|fileStatus
operator|=
operator|new
name|S3AFileStatus
argument_list|(
name|Tristate
operator|.
name|UNKNOWN
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileStatus
operator|=
operator|new
name|S3AFileStatus
argument_list|(
literal|100
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|p
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|fileStatus
return|;
block|}
block|}
end_class

end_unit

