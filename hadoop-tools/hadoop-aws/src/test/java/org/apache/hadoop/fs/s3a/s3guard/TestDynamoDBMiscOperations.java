begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|waiters
operator|.
name|WaiterTimedOutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AWSClientIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DynamoDBMetadataStoreTableManager
operator|.
name|translateTableWaitFailure
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Unit test suite for misc dynamoDB metastore operations.  */
end_comment

begin_class
DECL|class|TestDynamoDBMiscOperations
specifier|public
class|class
name|TestDynamoDBMiscOperations
extends|extends
name|HadoopTestBase
block|{
DECL|field|TIMEOUT_ERROR_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|TIMEOUT_ERROR_MESSAGE
init|=
literal|"Table table-name did not transition into ACTIVE state."
decl_stmt|;
annotation|@
name|Test
DECL|method|testUnwrapTableWaitTimeout ()
specifier|public
name|void
name|testUnwrapTableWaitTimeout
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|Exception
name|waiterTimedOut
init|=
operator|new
name|WaiterTimedOutException
argument_list|(
literal|"waiter timed out"
argument_list|)
decl_stmt|;
specifier|final
name|AWSClientIOException
name|ex
init|=
name|intercept
argument_list|(
name|AWSClientIOException
operator|.
name|class
argument_list|,
name|TIMEOUT_ERROR_MESSAGE
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
name|translateTableWaitFailure
argument_list|(
literal|"example"
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
name|TIMEOUT_ERROR_MESSAGE
argument_list|,
name|waiterTimedOut
argument_list|)
argument_list|)
throw|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|waiterTimedOut
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTranslateIllegalArgumentException ()
specifier|public
name|void
name|testTranslateIllegalArgumentException
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|IllegalArgumentException
name|e
init|=
operator|new
name|IllegalArgumentException
argument_list|(
name|TIMEOUT_ERROR_MESSAGE
argument_list|)
decl_stmt|;
specifier|final
name|IOException
name|ex
init|=
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|TIMEOUT_ERROR_MESSAGE
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
name|translateTableWaitFailure
argument_list|(
literal|"example"
argument_list|,
name|e
argument_list|)
throw|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTranslateWrappedDDBException ()
specifier|public
name|void
name|testTranslateWrappedDDBException
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|Exception
name|inner
init|=
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"ddb"
argument_list|)
decl_stmt|;
specifier|final
name|IllegalArgumentException
name|e
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"outer"
argument_list|,
name|inner
argument_list|)
decl_stmt|;
specifier|final
name|FileNotFoundException
name|ex
init|=
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
literal|"outer"
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
name|translateTableWaitFailure
argument_list|(
literal|"example"
argument_list|,
name|e
argument_list|)
throw|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|inner
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTranslateWrappedOtherException ()
specifier|public
name|void
name|testTranslateWrappedOtherException
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|Exception
name|inner
init|=
operator|new
name|NullPointerException
argument_list|(
literal|"npe"
argument_list|)
decl_stmt|;
specifier|final
name|IllegalArgumentException
name|e
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"outer"
argument_list|,
name|inner
argument_list|)
decl_stmt|;
specifier|final
name|IOException
name|ex
init|=
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"outer"
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
name|translateTableWaitFailure
argument_list|(
literal|"example"
argument_list|,
name|e
argument_list|)
throw|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInnerListChildrenDirectoryNpe ()
specifier|public
name|void
name|testInnerListChildrenDirectoryNpe
parameter_list|()
throws|throws
name|Exception
block|{
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PathMetadata
argument_list|>
name|metas
init|=
name|mock
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|metas
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|DDBPathMetadata
name|dirPathMeta
init|=
literal|null
decl_stmt|;
name|assertNull
argument_list|(
literal|"The return value should be null."
argument_list|,
name|ddbms
operator|.
name|getDirListingMetadataFromDirMetaAndList
argument_list|(
name|p
argument_list|,
name|metas
argument_list|,
name|dirPathMeta
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAncestorStateForDir ()
specifier|public
name|void
name|testAncestorStateForDir
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|DynamoDBMetadataStore
operator|.
name|AncestorState
name|ancestorState
init|=
operator|new
name|DynamoDBMetadataStore
operator|.
name|AncestorState
argument_list|(
literal|null
argument_list|,
name|BulkOperationState
operator|.
name|OperationType
operator|.
name|Rename
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// path 1 is a directory
specifier|final
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/1"
argument_list|)
decl_stmt|;
specifier|final
name|S3AFileStatus
name|status1
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
name|path1
argument_list|,
literal|"hadoop"
argument_list|)
decl_stmt|;
specifier|final
name|DDBPathMetadata
name|md1
init|=
operator|new
name|DDBPathMetadata
argument_list|(
name|status1
argument_list|)
decl_stmt|;
name|ancestorState
operator|.
name|put
argument_list|(
name|md1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Status not found in ancestors"
argument_list|,
name|ancestorState
operator|.
name|contains
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DDBPathMetadata
name|result
init|=
name|ancestorState
operator|.
name|get
argument_list|(
name|path1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|status1
argument_list|,
name|result
operator|.
name|getFileStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Lookup failed"
argument_list|,
name|ancestorState
operator|.
name|findEntry
argument_list|(
name|path1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/2"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Lookup didn't fail"
argument_list|,
name|ancestorState
operator|.
name|findEntry
argument_list|(
name|path2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Lookup didn't fail"
argument_list|,
name|ancestorState
operator|.
name|contains
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Lookup didn't fail"
argument_list|,
name|ancestorState
operator|.
name|get
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAncestorStateForFile ()
specifier|public
name|void
name|testAncestorStateForFile
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|DynamoDBMetadataStore
operator|.
name|AncestorState
name|ancestorState
init|=
operator|new
name|DynamoDBMetadataStore
operator|.
name|AncestorState
argument_list|(
literal|null
argument_list|,
name|BulkOperationState
operator|.
name|OperationType
operator|.
name|Rename
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// path 1 is a file
specifier|final
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/1"
argument_list|)
decl_stmt|;
specifier|final
name|S3AFileStatus
name|status1
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|1024_1024_1024L
argument_list|,
literal|0
argument_list|,
name|path1
argument_list|,
literal|32_000_000
argument_list|,
literal|"hadoop"
argument_list|,
literal|"e4"
argument_list|,
literal|"f5"
argument_list|)
decl_stmt|;
specifier|final
name|DDBPathMetadata
name|md1
init|=
operator|new
name|DDBPathMetadata
argument_list|(
name|status1
argument_list|)
decl_stmt|;
name|ancestorState
operator|.
name|put
argument_list|(
name|md1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Lookup failed"
argument_list|,
name|ancestorState
operator|.
name|findEntry
argument_list|(
name|path1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|PathIOException
operator|.
name|class
argument_list|,
name|DynamoDBMetadataStore
operator|.
name|E_INCONSISTENT_UPDATE
argument_list|,
parameter_list|()
lambda|->
name|ancestorState
operator|.
name|findEntry
argument_list|(
name|path1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoBulkRenameThroughInitiateBulkWrite ()
specifier|public
name|void
name|testNoBulkRenameThroughInitiateBulkWrite
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|S3Guard
operator|.
name|initiateBulkWrite
argument_list|(
literal|null
argument_list|,
name|BulkOperationState
operator|.
name|OperationType
operator|.
name|Rename
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitiateBulkWrite ()
specifier|public
name|void
name|testInitiateBulkWrite
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertNull
argument_list|(
name|S3Guard
operator|.
name|initiateBulkWrite
argument_list|(
literal|null
argument_list|,
name|BulkOperationState
operator|.
name|OperationType
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

