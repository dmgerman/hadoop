begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathExistsException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test {@link S3AFileSystem#copyFromLocalFile(boolean, boolean, Path, Path)}.  * Some of the tests have been disabled pending a fix for HADOOP-15932 and  * recursive directory copying; the test cases themselves may be obsolete.  */
end_comment

begin_class
DECL|class|ITestS3ACopyFromLocalFile
specifier|public
class|class
name|ITestS3ACopyFromLocalFile
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|ASCII
specifier|private
specifier|static
specifier|final
name|Charset
name|ASCII
init|=
name|StandardCharsets
operator|.
name|US_ASCII
decl_stmt|;
DECL|field|file
specifier|private
name|File
name|file
decl_stmt|;
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCopyEmptyFile ()
specifier|public
name|void
name|testCopyEmptyFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|file
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|".txt"
argument_list|)
expr_stmt|;
name|Path
name|dest
init|=
name|upload
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertPathExists
argument_list|(
literal|"uploaded file"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyFile ()
specifier|public
name|void
name|testCopyFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|message
init|=
literal|"hello"
decl_stmt|;
name|file
operator|=
name|createTempFile
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Path
name|dest
init|=
name|upload
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertPathExists
argument_list|(
literal|"uploaded file not found"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"File length of "
operator|+
name|status
argument_list|,
name|message
operator|.
name|getBytes
argument_list|(
name|ASCII
argument_list|)
operator|.
name|length
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertFileTextEquals
argument_list|(
name|dest
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFileTextEquals (Path path, String expected)
specifier|public
name|void
name|assertFileTextEquals
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"Wrong data in "
operator|+
name|path
argument_list|,
name|expected
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|ASCII
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyFileNoOverwrite ()
specifier|public
name|void
name|testCopyFileNoOverwrite
parameter_list|()
throws|throws
name|Throwable
block|{
name|file
operator|=
name|createTempFile
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|Path
name|dest
init|=
name|upload
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// HADOOP-15932: the exception type changes here
name|intercept
argument_list|(
name|PathExistsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|upload
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyFileOverwrite ()
specifier|public
name|void
name|testCopyFileOverwrite
parameter_list|()
throws|throws
name|Throwable
block|{
name|file
operator|=
name|createTempFile
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|Path
name|dest
init|=
name|upload
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|updated
init|=
literal|"updated"
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|file
argument_list|,
name|updated
argument_list|,
name|ASCII
argument_list|)
expr_stmt|;
name|upload
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFileTextEquals
argument_list|(
name|dest
argument_list|,
name|updated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"HADOOP-15932"
argument_list|)
DECL|method|testCopyFileNoOverwriteDirectory ()
specifier|public
name|void
name|testCopyFileNoOverwriteDirectory
parameter_list|()
throws|throws
name|Throwable
block|{
name|file
operator|=
name|createTempFile
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|Path
name|dest
init|=
name|upload
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|FileAlreadyExistsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|upload
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyMissingFile ()
specifier|public
name|void
name|testCopyMissingFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|file
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|".txt"
argument_list|)
expr_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// first upload to create
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
name|upload
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"HADOOP-15932"
argument_list|)
DECL|method|testCopyDirectoryFile ()
specifier|public
name|void
name|testCopyDirectoryFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|file
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|".txt"
argument_list|)
expr_stmt|;
comment|// first upload to create
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
literal|"Not a file"
argument_list|,
parameter_list|()
lambda|->
name|upload
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalFilesOnly ()
specifier|public
name|void
name|testLocalFilesOnly
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"testLocalFilesOnly"
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|getFileSystem
argument_list|()
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|dst
argument_list|,
name|dst
argument_list|)
expr_stmt|;
return|return
literal|"copy successful"
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|upload (File srcFile, boolean overwrite)
specifier|public
name|Path
name|upload
parameter_list|(
name|File
name|srcFile
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|srcFile
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
name|srcFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
name|overwrite
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
return|return
name|dst
return|;
block|}
comment|/**    * Create a temp file with some text.    * @param text text for the file    * @return the file    * @throws IOException on a failure    */
DECL|method|createTempFile (String text)
specifier|public
name|File
name|createTempFile
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|f
argument_list|,
name|text
argument_list|,
name|ASCII
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
block|}
end_class

end_unit

