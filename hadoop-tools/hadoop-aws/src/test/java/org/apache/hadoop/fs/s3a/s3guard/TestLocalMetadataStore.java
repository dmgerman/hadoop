begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
import|;
end_import

begin_comment
comment|/**  * MetadataStore unit test for {@link LocalMetadataStore}.  */
end_comment

begin_class
DECL|class|TestLocalMetadataStore
specifier|public
class|class
name|TestLocalMetadataStore
extends|extends
name|MetadataStoreTestBase
block|{
DECL|field|MAX_ENTRIES_STR
specifier|private
specifier|static
specifier|final
name|String
name|MAX_ENTRIES_STR
init|=
literal|"16"
decl_stmt|;
DECL|class|LocalMSContract
specifier|private
specifier|final
specifier|static
class|class
name|LocalMSContract
extends|extends
name|AbstractMSContract
block|{
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|method|LocalMSContract ()
specifier|private
name|LocalMSContract
parameter_list|()
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalMSContract (Configuration config)
specifier|private
name|LocalMSContract
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|config
operator|.
name|set
argument_list|(
name|LocalMetadataStore
operator|.
name|CONF_MAX_RECORDS
argument_list|,
name|MAX_ENTRIES_STR
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileSystem ()
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
annotation|@
name|Override
DECL|method|getMetadataStore ()
specifier|public
name|MetadataStore
name|getMetadataStore
parameter_list|()
throws|throws
name|IOException
block|{
name|LocalMetadataStore
name|lms
init|=
operator|new
name|LocalMetadataStore
argument_list|()
decl_stmt|;
return|return
name|lms
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createContract ()
specifier|public
name|AbstractMSContract
name|createContract
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|LocalMSContract
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createContract (Configuration conf)
specifier|public
name|AbstractMSContract
name|createContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LocalMSContract
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testClearByAncestor ()
specifier|public
name|void
name|testClearByAncestor
parameter_list|()
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|PathMetadata
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 1. Test paths without scheme/host
name|assertClearResult
argument_list|(
name|map
argument_list|,
literal|""
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertClearResult
argument_list|(
name|map
argument_list|,
literal|""
argument_list|,
literal|"/dirA/dirB"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertClearResult
argument_list|(
name|map
argument_list|,
literal|""
argument_list|,
literal|"/invalid"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// 2. Test paths w/ scheme/host
name|String
name|p
init|=
literal|"s3a://fake-bucket-name"
decl_stmt|;
name|assertClearResult
argument_list|(
name|map
argument_list|,
name|p
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertClearResult
argument_list|(
name|map
argument_list|,
name|p
argument_list|,
literal|"/dirA/dirB"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertClearResult
argument_list|(
name|map
argument_list|,
name|p
argument_list|,
literal|"/invalid"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|populateMap (Map<Path, PathMetadata> map, String prefix)
specifier|private
specifier|static
name|void
name|populateMap
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|PathMetadata
argument_list|>
name|map
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|populateEntry
argument_list|(
name|map
argument_list|,
operator|new
name|Path
argument_list|(
name|prefix
operator|+
literal|"/dirA/dirB/"
argument_list|)
argument_list|)
expr_stmt|;
name|populateEntry
argument_list|(
name|map
argument_list|,
operator|new
name|Path
argument_list|(
name|prefix
operator|+
literal|"/dirA/dirB/dirC"
argument_list|)
argument_list|)
expr_stmt|;
name|populateEntry
argument_list|(
name|map
argument_list|,
operator|new
name|Path
argument_list|(
name|prefix
operator|+
literal|"/dirA/dirB/dirC/file1"
argument_list|)
argument_list|)
expr_stmt|;
name|populateEntry
argument_list|(
name|map
argument_list|,
operator|new
name|Path
argument_list|(
name|prefix
operator|+
literal|"/dirA/dirB/dirC/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|populateEntry
argument_list|(
name|map
argument_list|,
operator|new
name|Path
argument_list|(
name|prefix
operator|+
literal|"/dirA/file1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|populateEntry (Map<Path, PathMetadata> map, Path path)
specifier|private
specifier|static
name|void
name|populateEntry
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|PathMetadata
argument_list|>
name|map
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|path
argument_list|,
operator|new
name|PathMetadata
argument_list|(
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sizeOfMap (Map<Path, PathMetadata> map)
specifier|private
specifier|static
name|int
name|sizeOfMap
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|PathMetadata
argument_list|>
name|map
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PathMetadata
name|meta
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|meta
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
DECL|method|assertClearResult (Map <Path, PathMetadata> map, String prefixStr, String pathStr, int leftoverSize)
specifier|private
specifier|static
name|void
name|assertClearResult
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|PathMetadata
argument_list|>
name|map
parameter_list|,
name|String
name|prefixStr
parameter_list|,
name|String
name|pathStr
parameter_list|,
name|int
name|leftoverSize
parameter_list|)
block|{
name|populateMap
argument_list|(
name|map
argument_list|,
name|prefixStr
argument_list|)
expr_stmt|;
name|LocalMetadataStore
operator|.
name|deleteHashByAncestor
argument_list|(
operator|new
name|Path
argument_list|(
name|prefixStr
operator|+
name|pathStr
argument_list|)
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Map should have %d entries"
argument_list|,
name|leftoverSize
argument_list|)
argument_list|,
name|leftoverSize
argument_list|,
name|sizeOfMap
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|verifyFileStatus (FileStatus status, long size)
specifier|protected
name|void
name|verifyFileStatus
parameter_list|(
name|FileStatus
name|status
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|S3ATestUtils
operator|.
name|verifyFileStatus
argument_list|(
name|status
argument_list|,
name|size
argument_list|,
name|REPLICATION
argument_list|,
name|getModTime
argument_list|()
argument_list|,
name|getAccessTime
argument_list|()
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|OWNER
argument_list|,
name|GROUP
argument_list|,
name|PERMISSION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|verifyDirStatus (FileStatus status)
specifier|protected
name|void
name|verifyDirStatus
parameter_list|(
name|FileStatus
name|status
parameter_list|)
block|{
name|S3ATestUtils
operator|.
name|verifyDirStatus
argument_list|(
name|status
argument_list|,
name|REPLICATION
argument_list|,
name|getModTime
argument_list|()
argument_list|,
name|getAccessTime
argument_list|()
argument_list|,
name|OWNER
argument_list|,
name|GROUP
argument_list|,
name|PERMISSION
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

