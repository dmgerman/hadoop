begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.staging
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AbortMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AmazonS3Exception
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CompleteMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CompleteMultipartUploadResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|InitiateMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|InitiateMultipartUploadResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ListMultipartUploadsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|MultipartUpload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|MultipartUploadListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|UploadPartRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|UploadPartResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|MockS3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|AbstractCommitITest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|InternalCommitterConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|MiniDFSClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|JobContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|util
operator|.
name|MRBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test base for mock tests of staging committers:  * core constants and static methods, inner classes  * for specific test types.  *  * Some of the verification methods here are unused...they are being left  * in place in case changes on the implementation make the verifications  * relevant again.  */
end_comment

begin_class
DECL|class|StagingTestBase
specifier|public
class|class
name|StagingTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StagingTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BUCKET
specifier|public
specifier|static
specifier|final
name|String
name|BUCKET
init|=
name|MockS3AFileSystem
operator|.
name|BUCKET
decl_stmt|;
DECL|field|OUTPUT_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_PREFIX
init|=
literal|"output/path"
decl_stmt|;
comment|/** The raw bucket URI Path before any canonicalization. */
DECL|field|RAW_BUCKET_PATH
specifier|public
specifier|static
specifier|final
name|Path
name|RAW_BUCKET_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://"
operator|+
name|BUCKET
operator|+
literal|"/"
argument_list|)
decl_stmt|;
comment|/** The raw bucket URI Path before any canonicalization. */
DECL|field|RAW_BUCKET_URI
specifier|public
specifier|static
specifier|final
name|URI
name|RAW_BUCKET_URI
init|=
name|RAW_BUCKET_PATH
operator|.
name|toUri
argument_list|()
decl_stmt|;
DECL|field|outputPath
specifier|public
specifier|static
name|Path
name|outputPath
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://"
operator|+
name|BUCKET
operator|+
literal|"/"
operator|+
name|OUTPUT_PREFIX
argument_list|)
decl_stmt|;
DECL|field|outputPathUri
specifier|public
specifier|static
name|URI
name|outputPathUri
init|=
name|outputPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
DECL|field|root
specifier|public
specifier|static
name|Path
name|root
decl_stmt|;
DECL|method|StagingTestBase ()
specifier|protected
name|StagingTestBase
parameter_list|()
block|{   }
comment|/**    * Sets up the mock filesystem instance and binds it to the    * {@link FileSystem#get(URI, Configuration)} call for the supplied URI    * and config.    * All standard mocking setup MUST go here.    * @param conf config to use    * @param outcome tuple of outcomes to store in mock FS    * @return the filesystem created    * @throws IOException IO problems.    */
DECL|method|createAndBindMockFSInstance (Configuration conf, Pair<StagingTestBase.ClientResults, StagingTestBase.ClientErrors> outcome)
specifier|protected
specifier|static
name|S3AFileSystem
name|createAndBindMockFSInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Pair
argument_list|<
name|StagingTestBase
operator|.
name|ClientResults
argument_list|,
name|StagingTestBase
operator|.
name|ClientErrors
argument_list|>
name|outcome
parameter_list|)
throws|throws
name|IOException
block|{
name|S3AFileSystem
name|mockFs
init|=
name|mockS3AFileSystemRobustly
argument_list|()
decl_stmt|;
name|MockS3AFileSystem
name|wrapperFS
init|=
operator|new
name|MockS3AFileSystem
argument_list|(
name|mockFs
argument_list|,
name|outcome
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|RAW_BUCKET_URI
decl_stmt|;
name|wrapperFS
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|root
operator|=
name|wrapperFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|outputPath
operator|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|OUTPUT_PREFIX
argument_list|)
expr_stmt|;
name|outputPathUri
operator|=
name|outputPath
operator|.
name|toUri
argument_list|()
expr_stmt|;
name|FileSystemTestHelper
operator|.
name|addFileSystemForTesting
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|,
name|wrapperFS
argument_list|)
expr_stmt|;
return|return
name|mockFs
return|;
block|}
DECL|method|mockS3AFileSystemRobustly ()
specifier|private
specifier|static
name|S3AFileSystem
name|mockS3AFileSystemRobustly
parameter_list|()
block|{
name|S3AFileSystem
name|mockFS
init|=
name|mock
argument_list|(
name|S3AFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mockFS
argument_list|)
operator|.
name|incrementReadOperations
argument_list|()
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mockFS
argument_list|)
operator|.
name|incrementWriteOperations
argument_list|()
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mockFS
argument_list|)
operator|.
name|incrementWriteOperations
argument_list|()
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mockFS
argument_list|)
operator|.
name|incrementWriteOperations
argument_list|()
expr_stmt|;
return|return
name|mockFS
return|;
block|}
comment|/**    * Look up the FS by URI, return a (cast) Mock wrapper.    * @param conf config    * @return the FS    * @throws IOException IO Failure    */
DECL|method|lookupWrapperFS (Configuration conf)
specifier|public
specifier|static
name|MockS3AFileSystem
name|lookupWrapperFS
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|MockS3AFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|outputPathUri
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|verifyCompletion (FileSystem mockS3)
specifier|public
specifier|static
name|void
name|verifyCompletion
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyCleanupTempFiles
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDeleted (FileSystem mockS3, Path path)
specifier|public
specifier|static
name|void
name|verifyDeleted
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|verify
argument_list|(
name|mockS3
argument_list|)
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDeleted (FileSystem mockS3, String child)
specifier|public
specifier|static
name|void
name|verifyDeleted
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|String
name|child
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyDeleted
argument_list|(
name|mockS3
argument_list|,
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyCleanupTempFiles (FileSystem mockS3)
specifier|public
specifier|static
name|void
name|verifyCleanupTempFiles
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyDeleted
argument_list|(
name|mockS3
argument_list|,
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|CommitConstants
operator|.
name|TEMPORARY
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertConflictResolution ( StagingCommitter committer, JobContext job, ConflictResolution mode)
specifier|protected
specifier|static
name|void
name|assertConflictResolution
parameter_list|(
name|StagingCommitter
name|committer
parameter_list|,
name|JobContext
name|job
parameter_list|,
name|ConflictResolution
name|mode
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Conflict resolution mode in "
operator|+
name|committer
argument_list|,
name|mode
argument_list|,
name|committer
operator|.
name|getConflictResolutionMode
argument_list|(
name|job
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|pathsExist (FileSystem mockS3, String... children)
specifier|public
specifier|static
name|void
name|pathsExist
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|String
modifier|...
name|children
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|pathExists
argument_list|(
name|mockS3
argument_list|,
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|pathExists (FileSystem mockS3, Path path)
specifier|public
specifier|static
name|void
name|pathExists
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|mockS3
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|pathIsDirectory (FileSystem mockS3, Path path)
specifier|public
specifier|static
name|void
name|pathIsDirectory
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|hasFileStatus
argument_list|(
name|mockS3
argument_list|,
name|path
argument_list|,
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|pathIsFile (FileSystem mockS3, Path path)
specifier|public
specifier|static
name|void
name|pathIsFile
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|pathExists
argument_list|(
name|mockS3
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|hasFileStatus
argument_list|(
name|mockS3
argument_list|,
name|path
argument_list|,
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|pathDoesNotExist (FileSystem mockS3, Path path)
specifier|public
specifier|static
name|void
name|pathDoesNotExist
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|mockS3
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockS3
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|FileNotFoundException
argument_list|(
literal|"mock fnfe of "
operator|+
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|hasFileStatus (FileSystem mockS3, Path path, FileStatus status)
specifier|public
specifier|static
name|void
name|hasFileStatus
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|Path
name|path
parameter_list|,
name|FileStatus
name|status
parameter_list|)
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|mockS3
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|mkdirsHasOutcome (FileSystem mockS3, Path path, boolean outcome)
specifier|public
specifier|static
name|void
name|mkdirsHasOutcome
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|outcome
parameter_list|)
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|mockS3
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|outcome
argument_list|)
expr_stmt|;
block|}
DECL|method|canDelete (FileSystem mockS3, String... children)
specifier|public
specifier|static
name|void
name|canDelete
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|String
modifier|...
name|children
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|canDelete
argument_list|(
name|mockS3
argument_list|,
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|canDelete (FileSystem mockS3, Path f)
specifier|public
specifier|static
name|void
name|canDelete
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|mockS3
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
comment|/* recursive */
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyExistenceChecked (FileSystem mockS3, String child)
specifier|public
specifier|static
name|void
name|verifyExistenceChecked
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|String
name|child
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyExistenceChecked
argument_list|(
name|mockS3
argument_list|,
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyExistenceChecked (FileSystem mockS3, Path path)
specifier|public
specifier|static
name|void
name|verifyExistenceChecked
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|verify
argument_list|(
name|mockS3
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that mkdirs was invoked once.    * @param mockS3 mock    * @param path path to check    * @throws IOException from the mkdirs signature.    */
DECL|method|verifyMkdirsInvoked (FileSystem mockS3, Path path)
specifier|public
specifier|static
name|void
name|verifyMkdirsInvoked
parameter_list|(
name|FileSystem
name|mockS3
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|verify
argument_list|(
name|mockS3
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * Provides setup/teardown of a MiniDFSCluster for tests that need one.    */
DECL|class|MiniDFSTest
specifier|public
specifier|static
class|class
name|MiniDFSTest
extends|extends
name|HadoopTestBase
block|{
DECL|field|hdfs
specifier|private
specifier|static
name|MiniDFSClusterService
name|hdfs
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|JobConf
name|conf
init|=
literal|null
decl_stmt|;
DECL|method|getConfiguration ()
specifier|protected
specifier|static
name|JobConf
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|getDFS ()
specifier|protected
specifier|static
name|FileSystem
name|getDFS
parameter_list|()
block|{
return|return
name|hdfs
operator|.
name|getClusterFS
argument_list|()
return|;
block|}
comment|/**      * Setup the mini HDFS cluster.      * @throws IOException Failure      */
annotation|@
name|BeforeClass
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|setupHDFS ()
specifier|public
specifier|static
name|void
name|setupHDFS
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hdfs
operator|==
literal|null
condition|)
block|{
name|JobConf
name|c
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|hdfs
operator|=
operator|new
name|MiniDFSClusterService
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|init
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|=
name|c
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableNotThrown"
argument_list|)
annotation|@
name|AfterClass
DECL|method|teardownFS ()
specifier|public
specifier|static
name|void
name|teardownFS
parameter_list|()
throws|throws
name|IOException
block|{
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|hdfs
argument_list|)
expr_stmt|;
name|conf
operator|=
literal|null
expr_stmt|;
name|hdfs
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Base class for job committer tests.    * @param<C> committer    */
DECL|class|JobCommitterTest
specifier|public
specifier|abstract
specifier|static
class|class
name|JobCommitterTest
parameter_list|<
name|C
extends|extends
name|OutputCommitter
parameter_list|>
extends|extends
name|HadoopTestBase
block|{
DECL|field|JOB_ID
specifier|private
specifier|static
specifier|final
name|JobID
name|JOB_ID
init|=
operator|new
name|JobID
argument_list|(
literal|"job"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|jobConf
specifier|private
name|JobConf
name|jobConf
decl_stmt|;
comment|// created in BeforeClass
DECL|field|mockFS
specifier|private
name|S3AFileSystem
name|mockFS
init|=
literal|null
decl_stmt|;
DECL|field|wrapperFS
specifier|private
name|MockS3AFileSystem
name|wrapperFS
init|=
literal|null
decl_stmt|;
DECL|field|job
specifier|private
name|JobContext
name|job
init|=
literal|null
decl_stmt|;
comment|// created in Before
DECL|field|results
specifier|private
name|StagingTestBase
operator|.
name|ClientResults
name|results
init|=
literal|null
decl_stmt|;
DECL|field|errors
specifier|private
name|StagingTestBase
operator|.
name|ClientErrors
name|errors
init|=
literal|null
decl_stmt|;
DECL|field|mockClient
specifier|private
name|AmazonS3
name|mockClient
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setupJob ()
specifier|public
name|void
name|setupJob
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|jobConf
operator|=
name|createJobConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|job
operator|=
operator|new
name|JobContextImpl
argument_list|(
name|jobConf
argument_list|,
name|JOB_ID
argument_list|)
expr_stmt|;
name|this
operator|.
name|results
operator|=
operator|new
name|StagingTestBase
operator|.
name|ClientResults
argument_list|()
expr_stmt|;
name|this
operator|.
name|errors
operator|=
operator|new
name|StagingTestBase
operator|.
name|ClientErrors
argument_list|()
expr_stmt|;
name|this
operator|.
name|mockClient
operator|=
name|newMockS3Client
argument_list|(
name|results
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|this
operator|.
name|mockFS
operator|=
name|createAndBindMockFSInstance
argument_list|(
name|jobConf
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|results
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|wrapperFS
operator|=
name|lookupWrapperFS
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
comment|// and bind the FS
name|wrapperFS
operator|.
name|setAmazonS3Client
argument_list|(
name|mockClient
argument_list|)
expr_stmt|;
block|}
DECL|method|createJobConf ()
specifier|protected
name|JobConf
name|createJobConf
parameter_list|()
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|InternalCommitterConstants
operator|.
name|FS_S3A_COMMITTER_STAGING_UUID
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommitConstants
operator|.
name|CREATE_SUCCESSFUL_JOB_OUTPUT_DIR_MARKER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getMockS3A ()
specifier|public
name|S3AFileSystem
name|getMockS3A
parameter_list|()
block|{
return|return
name|mockFS
return|;
block|}
DECL|method|getWrapperFS ()
specifier|public
name|MockS3AFileSystem
name|getWrapperFS
parameter_list|()
block|{
return|return
name|wrapperFS
return|;
block|}
DECL|method|getJob ()
specifier|public
name|JobContext
name|getJob
parameter_list|()
block|{
return|return
name|job
return|;
block|}
comment|/**      * Create a task attempt for a job by creating a stub task ID.      * @return a task attempt      */
DECL|method|createTaskAttemptForJob ()
specifier|public
name|TaskAttemptContext
name|createTaskAttemptForJob
parameter_list|()
block|{
return|return
name|AbstractCommitITest
operator|.
name|taskAttemptForJob
argument_list|(
name|MRBuilderUtils
operator|.
name|newJobId
argument_list|(
literal|1
argument_list|,
name|JOB_ID
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
name|job
argument_list|)
return|;
block|}
DECL|method|getMockResults ()
specifier|protected
name|StagingTestBase
operator|.
name|ClientResults
name|getMockResults
parameter_list|()
block|{
return|return
name|results
return|;
block|}
DECL|method|getMockErrors ()
specifier|protected
name|StagingTestBase
operator|.
name|ClientErrors
name|getMockErrors
parameter_list|()
block|{
return|return
name|errors
return|;
block|}
DECL|method|newJobCommitter ()
specifier|abstract
name|C
name|newJobCommitter
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
comment|/** Abstract test of task commits. */
DECL|class|TaskCommitterTest
specifier|public
specifier|abstract
specifier|static
class|class
name|TaskCommitterTest
parameter_list|<
name|C
extends|extends
name|OutputCommitter
parameter_list|>
extends|extends
name|JobCommitterTest
argument_list|<
name|C
argument_list|>
block|{
DECL|field|AID
specifier|private
specifier|static
specifier|final
name|TaskAttemptID
name|AID
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|JobCommitterTest
operator|.
name|JOB_ID
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
DECL|field|jobCommitter
specifier|private
name|C
name|jobCommitter
init|=
literal|null
decl_stmt|;
DECL|field|tac
specifier|private
name|TaskAttemptContext
name|tac
init|=
literal|null
decl_stmt|;
DECL|field|tempDir
specifier|private
name|File
name|tempDir
decl_stmt|;
annotation|@
name|Before
DECL|method|setupTask ()
specifier|public
name|void
name|setupTask
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|jobCommitter
operator|=
name|newJobCommitter
argument_list|()
expr_stmt|;
name|jobCommitter
operator|.
name|setupJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|tac
operator|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
operator|new
name|Configuration
argument_list|(
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|AID
argument_list|)
expr_stmt|;
comment|// get the task's configuration copy so modifications take effect
name|String
name|tmp
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|StagingCommitterConstants
operator|.
name|JAVA_IO_TMPDIR
argument_list|)
decl_stmt|;
name|tempDir
operator|=
operator|new
name|File
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|tac
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|BUFFER_DIR
argument_list|,
name|tmp
operator|+
literal|"/buffer"
argument_list|)
expr_stmt|;
name|tac
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CommitConstants
operator|.
name|FS_S3A_COMMITTER_STAGING_TMP_PATH
argument_list|,
name|tmp
operator|+
literal|"/cluster"
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobCommitter ()
specifier|protected
name|C
name|getJobCommitter
parameter_list|()
block|{
return|return
name|jobCommitter
return|;
block|}
DECL|method|getTAC ()
specifier|protected
name|TaskAttemptContext
name|getTAC
parameter_list|()
block|{
return|return
name|tac
return|;
block|}
DECL|method|newTaskCommitter ()
specifier|abstract
name|C
name|newTaskCommitter
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|getTempDir ()
specifier|protected
name|File
name|getTempDir
parameter_list|()
block|{
return|return
name|tempDir
return|;
block|}
block|}
comment|/**    * Results accrued during mock runs.    * This data is serialized in MR Tests and read back in in the test runner    */
DECL|class|ClientResults
specifier|public
specifier|static
class|class
name|ClientResults
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3137637327090709905L
decl_stmt|;
comment|// For inspection of what the committer did
DECL|field|requests
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|InitiateMultipartUploadRequest
argument_list|>
name|requests
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|uploads
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|uploads
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|parts
specifier|private
specifier|final
name|List
argument_list|<
name|UploadPartRequest
argument_list|>
name|parts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|tagsByUpload
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tagsByUpload
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|commits
specifier|private
specifier|final
name|List
argument_list|<
name|CompleteMultipartUploadRequest
argument_list|>
name|commits
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|aborts
specifier|private
specifier|final
name|List
argument_list|<
name|AbortMultipartUploadRequest
argument_list|>
name|aborts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|activeUploads
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|activeUploads
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|deletes
specifier|private
specifier|final
name|List
argument_list|<
name|DeleteObjectRequest
argument_list|>
name|deletes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|method|getRequests ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|InitiateMultipartUploadRequest
argument_list|>
name|getRequests
parameter_list|()
block|{
return|return
name|requests
return|;
block|}
DECL|method|getUploads ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getUploads
parameter_list|()
block|{
return|return
name|uploads
return|;
block|}
DECL|method|getParts ()
specifier|public
name|List
argument_list|<
name|UploadPartRequest
argument_list|>
name|getParts
parameter_list|()
block|{
return|return
name|parts
return|;
block|}
DECL|method|getTagsByUpload ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getTagsByUpload
parameter_list|()
block|{
return|return
name|tagsByUpload
return|;
block|}
DECL|method|getCommits ()
specifier|public
name|List
argument_list|<
name|CompleteMultipartUploadRequest
argument_list|>
name|getCommits
parameter_list|()
block|{
return|return
name|commits
return|;
block|}
DECL|method|getAborts ()
specifier|public
name|List
argument_list|<
name|AbortMultipartUploadRequest
argument_list|>
name|getAborts
parameter_list|()
block|{
return|return
name|aborts
return|;
block|}
DECL|method|getDeletes ()
specifier|public
name|List
argument_list|<
name|DeleteObjectRequest
argument_list|>
name|getDeletes
parameter_list|()
block|{
return|return
name|deletes
return|;
block|}
DECL|method|getDeletePaths ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDeletePaths
parameter_list|()
block|{
return|return
name|deletes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DeleteObjectRequest
operator|::
name|getKey
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|resetDeletes ()
specifier|public
name|void
name|resetDeletes
parameter_list|()
block|{
name|deletes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|resetUploads ()
specifier|public
name|void
name|resetUploads
parameter_list|()
block|{
name|uploads
operator|.
name|clear
argument_list|()
expr_stmt|;
name|activeUploads
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|resetCommits ()
specifier|public
name|void
name|resetCommits
parameter_list|()
block|{
name|commits
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|resetRequests ()
specifier|public
name|void
name|resetRequests
parameter_list|()
block|{
name|requests
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|addUpload (String id, String key)
specifier|public
name|void
name|addUpload
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|activeUploads
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|addUploads (Map<String, String> uploadMap)
specifier|public
name|void
name|addUploads
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uploadMap
parameter_list|)
block|{
name|activeUploads
operator|.
name|putAll
argument_list|(
name|uploadMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{ requests="
argument_list|)
operator|.
name|append
argument_list|(
name|requests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", uploads="
argument_list|)
operator|.
name|append
argument_list|(
name|uploads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", parts="
argument_list|)
operator|.
name|append
argument_list|(
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", tagsByUpload="
argument_list|)
operator|.
name|append
argument_list|(
name|tagsByUpload
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", commits="
argument_list|)
operator|.
name|append
argument_list|(
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", aborts="
argument_list|)
operator|.
name|append
argument_list|(
name|aborts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", deletes="
argument_list|)
operator|.
name|append
argument_list|(
name|deletes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/** Control errors to raise in mock S3 client. */
DECL|class|ClientErrors
specifier|public
specifier|static
class|class
name|ClientErrors
block|{
comment|// For injecting errors
DECL|field|failOnInit
specifier|private
name|int
name|failOnInit
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|failOnUpload
specifier|private
name|int
name|failOnUpload
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|failOnCommit
specifier|private
name|int
name|failOnCommit
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|failOnAbort
specifier|private
name|int
name|failOnAbort
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|recover
specifier|private
name|boolean
name|recover
init|=
literal|false
decl_stmt|;
DECL|method|failOnInit (int initNum)
specifier|public
name|void
name|failOnInit
parameter_list|(
name|int
name|initNum
parameter_list|)
block|{
name|this
operator|.
name|failOnInit
operator|=
name|initNum
expr_stmt|;
block|}
DECL|method|failOnUpload (int uploadNum)
specifier|public
name|void
name|failOnUpload
parameter_list|(
name|int
name|uploadNum
parameter_list|)
block|{
name|this
operator|.
name|failOnUpload
operator|=
name|uploadNum
expr_stmt|;
block|}
DECL|method|failOnCommit (int commitNum)
specifier|public
name|void
name|failOnCommit
parameter_list|(
name|int
name|commitNum
parameter_list|)
block|{
name|this
operator|.
name|failOnCommit
operator|=
name|commitNum
expr_stmt|;
block|}
DECL|method|failOnAbort (int abortNum)
specifier|public
name|void
name|failOnAbort
parameter_list|(
name|int
name|abortNum
parameter_list|)
block|{
name|this
operator|.
name|failOnAbort
operator|=
name|abortNum
expr_stmt|;
block|}
DECL|method|recoverAfterFailure ()
specifier|public
name|void
name|recoverAfterFailure
parameter_list|()
block|{
name|this
operator|.
name|recover
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ClientErrors{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"failOnInit="
argument_list|)
operator|.
name|append
argument_list|(
name|failOnInit
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", failOnUpload="
argument_list|)
operator|.
name|append
argument_list|(
name|failOnUpload
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", failOnCommit="
argument_list|)
operator|.
name|append
argument_list|(
name|failOnCommit
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", failOnAbort="
argument_list|)
operator|.
name|append
argument_list|(
name|failOnAbort
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", recover="
argument_list|)
operator|.
name|append
argument_list|(
name|recover
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getFailOnInit ()
specifier|public
name|int
name|getFailOnInit
parameter_list|()
block|{
return|return
name|failOnInit
return|;
block|}
DECL|method|getFailOnUpload ()
specifier|public
name|int
name|getFailOnUpload
parameter_list|()
block|{
return|return
name|failOnUpload
return|;
block|}
DECL|method|getFailOnCommit ()
specifier|public
name|int
name|getFailOnCommit
parameter_list|()
block|{
return|return
name|failOnCommit
return|;
block|}
DECL|method|getFailOnAbort ()
specifier|public
name|int
name|getFailOnAbort
parameter_list|()
block|{
return|return
name|failOnAbort
return|;
block|}
DECL|method|isRecover ()
specifier|public
name|boolean
name|isRecover
parameter_list|()
block|{
return|return
name|recover
return|;
block|}
block|}
comment|/**    * InvocationOnMock.getArgumentAt comes and goes with Mockito versions; this    * helper method is designed to be resilient to change.    * @param invocation invocation to query    * @param index argument index    * @param clazz class of return type    * @param<T> type of return    * @return the argument of the invocation, cast to the given type.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getArgumentAt (InvocationOnMock invocation, int index, Class<T> clazz)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getArgumentAt
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|,
name|int
name|index
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
name|index
index|]
return|;
block|}
comment|/**    * Instantiate mock client with the results and errors requested.    * @param results results to accrue    * @param errors when (if any) to fail    * @return the mock client to patch in to a committer/FS instance    */
DECL|method|newMockS3Client (final ClientResults results, final ClientErrors errors)
specifier|public
specifier|static
name|AmazonS3
name|newMockS3Client
parameter_list|(
specifier|final
name|ClientResults
name|results
parameter_list|,
specifier|final
name|ClientErrors
name|errors
parameter_list|)
block|{
name|AmazonS3Client
name|mockClient
init|=
name|mock
argument_list|(
name|AmazonS3Client
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// initiateMultipartUpload
name|when
argument_list|(
name|mockClient
operator|.
name|initiateMultipartUpload
argument_list|(
name|any
argument_list|(
name|InitiateMultipartUploadRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"initiateMultipartUpload for {}"
argument_list|,
name|mockClient
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|results
operator|.
name|requests
operator|.
name|size
argument_list|()
operator|==
name|errors
operator|.
name|failOnInit
condition|)
block|{
if|if
condition|(
name|errors
operator|.
name|recover
condition|)
block|{
name|errors
operator|.
name|failOnInit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AmazonClientException
argument_list|(
literal|"Mock Fail on init "
operator|+
name|results
operator|.
name|requests
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|uploadId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|InitiateMultipartUploadRequest
name|req
init|=
name|getArgumentAt
argument_list|(
name|invocation
argument_list|,
literal|0
argument_list|,
name|InitiateMultipartUploadRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|results
operator|.
name|requests
operator|.
name|put
argument_list|(
name|uploadId
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|results
operator|.
name|activeUploads
operator|.
name|put
argument_list|(
name|uploadId
argument_list|,
name|req
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|uploads
operator|.
name|add
argument_list|(
name|uploadId
argument_list|)
expr_stmt|;
return|return
name|newResult
argument_list|(
name|results
operator|.
name|requests
operator|.
name|get
argument_list|(
name|uploadId
argument_list|)
argument_list|,
name|uploadId
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// uploadPart
name|when
argument_list|(
name|mockClient
operator|.
name|uploadPart
argument_list|(
name|any
argument_list|(
name|UploadPartRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"uploadPart for {}"
argument_list|,
name|mockClient
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|results
operator|.
name|parts
operator|.
name|size
argument_list|()
operator|==
name|errors
operator|.
name|failOnUpload
condition|)
block|{
if|if
condition|(
name|errors
operator|.
name|recover
condition|)
block|{
name|errors
operator|.
name|failOnUpload
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Triggering upload failure"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AmazonClientException
argument_list|(
literal|"Mock Fail on upload "
operator|+
name|results
operator|.
name|parts
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|UploadPartRequest
name|req
init|=
name|getArgumentAt
argument_list|(
name|invocation
argument_list|,
literal|0
argument_list|,
name|UploadPartRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|results
operator|.
name|parts
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|String
name|etag
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|etags
init|=
name|results
operator|.
name|tagsByUpload
operator|.
name|get
argument_list|(
name|req
operator|.
name|getUploadId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|etags
operator|==
literal|null
condition|)
block|{
name|etags
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|results
operator|.
name|tagsByUpload
operator|.
name|put
argument_list|(
name|req
operator|.
name|getUploadId
argument_list|()
argument_list|,
name|etags
argument_list|)
expr_stmt|;
block|}
name|etags
operator|.
name|add
argument_list|(
name|etag
argument_list|)
expr_stmt|;
return|return
name|newResult
argument_list|(
name|req
argument_list|,
name|etag
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// completeMultipartUpload
name|when
argument_list|(
name|mockClient
operator|.
name|completeMultipartUpload
argument_list|(
name|any
argument_list|(
name|CompleteMultipartUploadRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"completeMultipartUpload for {}"
argument_list|,
name|mockClient
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|results
operator|.
name|commits
operator|.
name|size
argument_list|()
operator|==
name|errors
operator|.
name|failOnCommit
condition|)
block|{
if|if
condition|(
name|errors
operator|.
name|recover
condition|)
block|{
name|errors
operator|.
name|failOnCommit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AmazonClientException
argument_list|(
literal|"Mock Fail on commit "
operator|+
name|results
operator|.
name|commits
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|CompleteMultipartUploadRequest
name|req
init|=
name|getArgumentAt
argument_list|(
name|invocation
argument_list|,
literal|0
argument_list|,
name|CompleteMultipartUploadRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|uploadId
init|=
name|req
operator|.
name|getUploadId
argument_list|()
decl_stmt|;
name|removeUpload
argument_list|(
name|results
argument_list|,
name|uploadId
argument_list|)
expr_stmt|;
name|results
operator|.
name|commits
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
return|return
name|newResult
argument_list|(
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// abortMultipartUpload mocking
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"abortMultipartUpload for {}"
argument_list|,
name|mockClient
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|results
operator|.
name|aborts
operator|.
name|size
argument_list|()
operator|==
name|errors
operator|.
name|failOnAbort
condition|)
block|{
if|if
condition|(
name|errors
operator|.
name|recover
condition|)
block|{
name|errors
operator|.
name|failOnAbort
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AmazonClientException
argument_list|(
literal|"Mock Fail on abort "
operator|+
name|results
operator|.
name|aborts
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|AbortMultipartUploadRequest
name|req
init|=
name|getArgumentAt
argument_list|(
name|invocation
argument_list|,
literal|0
argument_list|,
name|AbortMultipartUploadRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|req
operator|.
name|getUploadId
argument_list|()
decl_stmt|;
name|removeUpload
argument_list|(
name|results
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|results
operator|.
name|aborts
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|abortMultipartUpload
argument_list|(
name|any
argument_list|(
name|AbortMultipartUploadRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// deleteObject mocking
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteObject for {}"
argument_list|,
name|mockClient
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|results
operator|.
name|deletes
operator|.
name|add
argument_list|(
name|getArgumentAt
argument_list|(
name|invocation
argument_list|,
literal|0
argument_list|,
name|DeleteObjectRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|deleteObject
argument_list|(
name|any
argument_list|(
name|DeleteObjectRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// deleteObject mocking
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteObject for {}"
argument_list|,
name|mockClient
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|results
operator|.
name|deletes
operator|.
name|add
argument_list|(
operator|new
name|DeleteObjectRequest
argument_list|(
name|getArgumentAt
argument_list|(
name|invocation
argument_list|,
literal|0
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|getArgumentAt
argument_list|(
name|invocation
argument_list|,
literal|1
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|deleteObject
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// to String returns the debug information
name|when
argument_list|(
name|mockClient
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
literal|"Mock3AClient "
operator|+
name|results
operator|+
literal|" "
operator|+
name|errors
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockClient
operator|.
name|listMultipartUploads
argument_list|(
name|any
argument_list|(
name|ListMultipartUploadsRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|MultipartUploadListing
name|l
init|=
operator|new
name|MultipartUploadListing
argument_list|()
decl_stmt|;
name|l
operator|.
name|setMultipartUploads
argument_list|(
name|results
operator|.
name|activeUploads
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|newMPU
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|mockClient
return|;
block|}
comment|/**    * Remove an upload from the upload map.    * @param results result set    * @param uploadId The upload ID to remove    * @throws AmazonS3Exception with error code 404 if the id is unknown.    */
DECL|method|removeUpload (final ClientResults results, final String uploadId)
specifier|protected
specifier|static
name|void
name|removeUpload
parameter_list|(
specifier|final
name|ClientResults
name|results
parameter_list|,
specifier|final
name|String
name|uploadId
parameter_list|)
block|{
name|String
name|removed
init|=
name|results
operator|.
name|activeUploads
operator|.
name|remove
argument_list|(
name|uploadId
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|==
literal|null
condition|)
block|{
comment|// upload doesn't exist
name|AmazonS3Exception
name|ex
init|=
operator|new
name|AmazonS3Exception
argument_list|(
literal|"not found "
operator|+
name|uploadId
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStatusCode
argument_list|(
literal|404
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|newResult ( CompleteMultipartUploadRequest req)
specifier|private
specifier|static
name|CompleteMultipartUploadResult
name|newResult
parameter_list|(
name|CompleteMultipartUploadRequest
name|req
parameter_list|)
block|{
return|return
operator|new
name|CompleteMultipartUploadResult
argument_list|()
return|;
block|}
DECL|method|newMPU (String id, String path)
specifier|private
specifier|static
name|MultipartUpload
name|newMPU
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|MultipartUpload
name|up
init|=
operator|new
name|MultipartUpload
argument_list|()
decl_stmt|;
name|up
operator|.
name|setUploadId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|setKey
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|up
return|;
block|}
DECL|method|newResult (UploadPartRequest request, String etag)
specifier|private
specifier|static
name|UploadPartResult
name|newResult
parameter_list|(
name|UploadPartRequest
name|request
parameter_list|,
name|String
name|etag
parameter_list|)
block|{
name|UploadPartResult
name|result
init|=
operator|new
name|UploadPartResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|setPartNumber
argument_list|(
name|request
operator|.
name|getPartNumber
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setETag
argument_list|(
name|etag
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|newResult ( InitiateMultipartUploadRequest request, String uploadId)
specifier|private
specifier|static
name|InitiateMultipartUploadResult
name|newResult
parameter_list|(
name|InitiateMultipartUploadRequest
name|request
parameter_list|,
name|String
name|uploadId
parameter_list|)
block|{
name|InitiateMultipartUploadResult
name|result
init|=
operator|new
name|InitiateMultipartUploadResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|setUploadId
argument_list|(
name|uploadId
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * create files in the attempt path that should be found by    * {@code getTaskOutput}.    * @param relativeFiles list of files relative to address path    * @param attemptPath attempt path    * @param conf config for FS    * @throws IOException on any failure    */
DECL|method|createTestOutputFiles (List<String> relativeFiles, Path attemptPath, Configuration conf)
specifier|public
specifier|static
name|void
name|createTestOutputFiles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|relativeFiles
parameter_list|,
name|Path
name|attemptPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|//
name|FileSystem
name|attemptFS
init|=
name|attemptPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|attemptFS
operator|.
name|delete
argument_list|(
name|attemptPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|relative
range|:
name|relativeFiles
control|)
block|{
comment|// 0-length files are ignored, so write at least one byte
name|OutputStream
name|out
init|=
name|attemptFS
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|attemptPath
argument_list|,
name|relative
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|34
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

