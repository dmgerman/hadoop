begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test whether or not encryption settings propagate by choosing an invalid  * one. We expect the write to fail with a 400 bad request error  */
end_comment

begin_class
DECL|class|ITestS3AEncryptionAlgorithmPropagation
specifier|public
class|class
name|ITestS3AEncryptionAlgorithmPropagation
extends|extends
name|AbstractS3ATestBase
block|{
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|,
literal|"DES"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncrypt0 ()
specifier|public
name|void
name|testEncrypt0
parameter_list|()
throws|throws
name|Throwable
block|{
name|writeThenReadFileToFailure
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncrypt256 ()
specifier|public
name|void
name|testEncrypt256
parameter_list|()
throws|throws
name|Throwable
block|{
name|writeThenReadFileToFailure
argument_list|(
literal|256
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make this a no-op so test setup doesn't fail.    * @param path path path    * @throws IOException on any failure    */
annotation|@
name|Override
DECL|method|mkdirs (Path path)
specifier|protected
name|void
name|mkdirs
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{    }
DECL|method|writeThenReadFileToFailure (int len)
specifier|protected
name|void
name|writeThenReadFileToFailure
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|describe
argument_list|(
literal|"Create an encrypted file of size "
operator|+
name|len
argument_list|)
expr_stmt|;
try|try
block|{
name|writeThenReadFile
argument_list|(
name|methodName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|'-'
operator|+
name|len
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception about an illegal encryption algorithm"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AWSS3IOException
name|e
parameter_list|)
block|{
name|assertStatusCode
argument_list|(
name|e
argument_list|,
literal|400
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

