begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractFSContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractFSContractTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|s3a
operator|.
name|S3AContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|fileStatsToString
import|;
end_import

begin_comment
comment|/**  * S3A tests for configuring block size.  */
end_comment

begin_class
DECL|class|ITestS3ABlocksize
specifier|public
class|class
name|ITestS3ABlocksize
extends|extends
name|AbstractFSContractTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3ABlocksize
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createContract (Configuration conf)
specifier|protected
name|AbstractFSContract
name|createContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|S3AContract
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30
operator|*
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testBlockSize ()
specifier|public
name|void
name|testBlockSize
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|long
name|defaultBlockSize
init|=
name|fs
operator|.
name|getDefaultBlockSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect blocksize"
argument_list|,
name|S3AFileSystem
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
name|defaultBlockSize
argument_list|)
expr_stmt|;
name|long
name|newBlockSize
init|=
name|defaultBlockSize
operator|*
literal|2
decl_stmt|;
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|Constants
operator|.
name|FS_S3A_BLOCK_SIZE
argument_list|,
name|newBlockSize
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"testBlockSize"
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
literal|true
argument_list|,
name|dataset
argument_list|(
literal|1024
argument_list|,
literal|'a'
argument_list|,
literal|'z'
operator|-
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Double default block size in stat(): "
operator|+
name|fileStatus
argument_list|,
name|newBlockSize
argument_list|,
name|fileStatus
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the listing& assert that the block size is picked up by
comment|// this route too.
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|FileStatus
index|[]
name|listing
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|listing
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"entry: {}"
argument_list|,
name|stat
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|equals
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Double default block size in ls(): "
operator|+
name|stat
argument_list|,
name|newBlockSize
argument_list|,
name|stat
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Did not find "
operator|+
name|fileStatsToString
argument_list|(
name|listing
argument_list|,
literal|", "
argument_list|)
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRootFileStatusHasBlocksize ()
specifier|public
name|void
name|testRootFileStatusHasBlocksize
parameter_list|()
throws|throws
name|Throwable
block|{
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid root blocksize"
argument_list|,
name|status
operator|.
name|getBlockSize
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

