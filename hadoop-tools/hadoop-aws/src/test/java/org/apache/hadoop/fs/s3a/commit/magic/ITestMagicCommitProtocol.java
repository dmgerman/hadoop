begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.magic
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|magic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|AbstractITCommitProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|AbstractS3ACommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitterFaultInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitterFaultInjectionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_comment
comment|/**  * Test the magic committer's commit protocol.  */
end_comment

begin_class
DECL|class|ITestMagicCommitProtocol
specifier|public
class|class
name|ITestMagicCommitProtocol
extends|extends
name|AbstractITCommitProtocol
block|{
annotation|@
name|Override
DECL|method|suitename ()
specifier|protected
name|String
name|suitename
parameter_list|()
block|{
return|return
literal|"ITestMagicCommitProtocol"
return|;
block|}
comment|/**    * Need consistency here.    * @return false    */
annotation|@
name|Override
DECL|method|useInconsistentClient ()
specifier|public
name|boolean
name|useInconsistentClient
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MAGIC_COMMITTER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|getCommitterFactoryName ()
specifier|protected
name|String
name|getCommitterFactoryName
parameter_list|()
block|{
return|return
name|CommitConstants
operator|.
name|S3A_COMMITTER_FACTORY
return|;
block|}
annotation|@
name|Override
DECL|method|getCommitterName ()
specifier|protected
name|String
name|getCommitterName
parameter_list|()
block|{
return|return
name|CommitConstants
operator|.
name|COMMITTER_NAME_MAGIC
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|CommitUtils
operator|.
name|verifyIsMagicCommitFS
argument_list|(
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertJobAbortCleanedUp (JobData jobData)
specifier|public
name|void
name|assertJobAbortCleanedUp
parameter_list|(
name|JobData
name|jobData
parameter_list|)
throws|throws
name|Exception
block|{
comment|// special handling of magic directory; harmless in staging
name|Path
name|magicDir
init|=
operator|new
name|Path
argument_list|(
name|getOutDir
argument_list|()
argument_list|,
name|MAGIC
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
literal|"magic dir "
argument_list|,
name|magicDir
argument_list|)
expr_stmt|;
name|super
operator|.
name|assertJobAbortCleanedUp
argument_list|(
name|jobData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCommitter ( Path outputPath, TaskAttemptContext context)
specifier|protected
name|AbstractS3ACommitter
name|createCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MagicS3GuardCommitter
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|createFailingCommitter ( TaskAttemptContext tContext)
specifier|public
name|AbstractS3ACommitter
name|createFailingCommitter
parameter_list|(
name|TaskAttemptContext
name|tContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CommitterWithFailedThenSucceed
argument_list|(
name|getOutDir
argument_list|()
argument_list|,
name|tContext
argument_list|)
return|;
block|}
DECL|method|validateTaskAttemptPathDuringWrite (Path p)
specifier|protected
name|void
name|validateTaskAttemptPathDuringWrite
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|pathStr
init|=
name|p
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not magic "
operator|+
name|pathStr
argument_list|,
name|pathStr
operator|.
name|contains
argument_list|(
name|MAGIC
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"task attempt visible"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
DECL|method|validateTaskAttemptPathAfterWrite (Path p)
specifier|protected
name|void
name|validateTaskAttemptPathAfterWrite
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|st
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"file length in "
operator|+
name|st
argument_list|,
literal|0
argument_list|,
name|st
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|pendingFile
init|=
operator|new
name|Path
argument_list|(
name|p
operator|.
name|toString
argument_list|()
operator|+
name|PENDING_SUFFIX
argument_list|)
decl_stmt|;
name|assertPathExists
argument_list|(
literal|"pending file"
argument_list|,
name|pendingFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * The magic committer paths are always on S3, and always have    * "__magic" in the path.    * @param committer committer instance    * @param context task attempt context    * @throws IOException IO failure    */
annotation|@
name|Override
DECL|method|validateTaskAttemptWorkingDirectory ( final AbstractS3ACommitter committer, final TaskAttemptContext context)
specifier|protected
name|void
name|validateTaskAttemptWorkingDirectory
parameter_list|(
specifier|final
name|AbstractS3ACommitter
name|committer
parameter_list|,
specifier|final
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|wd
init|=
name|committer
operator|.
name|getWorkPath
argument_list|()
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong schema for working dir "
operator|+
name|wd
operator|+
literal|" with committer "
operator|+
name|committer
argument_list|,
literal|"s3a"
argument_list|,
name|wd
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|wd
operator|.
name|getPath
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|'/'
operator|+
name|CommitConstants
operator|.
name|MAGIC
operator|+
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The class provides a overridden implementation of commitJobInternal which    * causes the commit failed for the first time then succeed.    */
DECL|class|CommitterWithFailedThenSucceed
specifier|private
specifier|static
specifier|final
class|class
name|CommitterWithFailedThenSucceed
extends|extends
name|MagicS3GuardCommitter
implements|implements
name|CommitterFaultInjection
block|{
DECL|field|injection
specifier|private
specifier|final
name|CommitterFaultInjectionImpl
name|injection
decl_stmt|;
DECL|method|CommitterWithFailedThenSucceed (Path outputPath, TaskAttemptContext context)
name|CommitterWithFailedThenSucceed
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|injection
operator|=
operator|new
name|CommitterFaultInjectionImpl
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setupJob (JobContext context)
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|setupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|setupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortJob (JobContext context, JobStatus.State state)
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|JobStatus
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|abortJob
argument_list|(
name|context
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|super
operator|.
name|abortJob
argument_list|(
name|context
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|cleanupJob (JobContext context)
specifier|public
name|void
name|cleanupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|cleanupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|cleanupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setupTask (TaskAttemptContext context)
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|setupTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|setupTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitTask (TaskAttemptContext context)
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|commitTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|commitTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortTask (TaskAttemptContext context)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|abortTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|abortTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitJob (JobContext context)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|commitJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|commitJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsTaskCommit (TaskAttemptContext context)
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|needsTaskCommit
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|needsTaskCommit
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setFaults (CommitterFaultInjection.Faults... faults)
specifier|public
name|void
name|setFaults
parameter_list|(
name|CommitterFaultInjection
operator|.
name|Faults
modifier|...
name|faults
parameter_list|)
block|{
name|injection
operator|.
name|setFaults
argument_list|(
name|faults
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

