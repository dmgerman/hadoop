begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CompleteMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CompleteMultipartUploadResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|GetObjectMetadataRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|GetObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|InitiateMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|InitiateMultipartUploadResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ListObjectsV2Request
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ListObjectsV2Result
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PutObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PutObjectResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3Object
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|UploadPartRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|UploadPartResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|BaseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AbstractS3AMockTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|CHANGE_DETECT_MODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|CHANGE_DETECT_MODE_SERVER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|CHANGE_DETECT_SOURCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|CHANGE_DETECT_SOURCE_ETAG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|CHANGE_DETECT_SOURCE_VERSION_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|hamcrest
operator|.
name|MockitoHamcrest
operator|.
name|argThat
import|;
end_import

begin_comment
comment|/**  * Unit tests to ensure object eTag and versionId are captured on S3 PUT and  * used on GET.  * Further (integration) testing is performed in  * {@link org.apache.hadoop.fs.s3a.ITestS3ARemoteFileChanged}.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestObjectChangeDetectionAttributes
specifier|public
class|class
name|TestObjectChangeDetectionAttributes
extends|extends
name|AbstractS3AMockTest
block|{
DECL|field|changeDetectionSource
specifier|private
specifier|final
name|String
name|changeDetectionSource
decl_stmt|;
DECL|method|TestObjectChangeDetectionAttributes (String changeDetectionSource)
specifier|public
name|TestObjectChangeDetectionAttributes
parameter_list|(
name|String
name|changeDetectionSource
parameter_list|)
block|{
name|this
operator|.
name|changeDetectionSource
operator|=
name|changeDetectionSource
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"change={0}"
argument_list|)
DECL|method|params ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|CHANGE_DETECT_SOURCE_ETAG
block|}
block|,
block|{
name|CHANGE_DETECT_SOURCE_VERSION_ID
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|public
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|Constants
operator|.
name|S3_METADATA_STORE_IMPL
argument_list|,
name|LocalMetadataStore
operator|.
name|class
argument_list|,
name|MetadataStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CHANGE_DETECT_SOURCE
argument_list|,
name|changeDetectionSource
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CHANGE_DETECT_MODE
argument_list|,
name|CHANGE_DETECT_MODE_SERVER
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Tests a file uploaded with a single PUT to ensure eTag is captured and used    * on file read.    */
annotation|@
name|Test
DECL|method|testCreateAndReadFileSinglePart ()
specifier|public
name|void
name|testCreateAndReadFileSinglePart
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bucket
init|=
literal|"s3a://mock-bucket/"
decl_stmt|;
name|String
name|file
init|=
literal|"single-part-file"
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|bucket
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|byte
index|[]
name|content
init|=
literal|"content"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|String
name|eTag
init|=
literal|"abc"
decl_stmt|;
name|String
name|versionId
init|=
literal|"def"
decl_stmt|;
name|putObject
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|content
argument_list|,
name|eTag
argument_list|,
name|versionId
argument_list|)
expr_stmt|;
comment|// make sure the eTag and versionId were put into the metadataStore
name|assertVersionAttributes
argument_list|(
name|path
argument_list|,
name|eTag
argument_list|,
name|versionId
argument_list|)
expr_stmt|;
comment|// Ensure underlying S3 getObject call uses the stored eTag or versionId
comment|// when reading data back.  If it doesn't, the read won't work and the
comment|// assert will fail.
name|assertContent
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|content
argument_list|,
name|eTag
argument_list|,
name|versionId
argument_list|)
expr_stmt|;
comment|// test overwrite
name|byte
index|[]
name|newConent
init|=
literal|"newcontent"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|String
name|newETag
init|=
literal|"newETag"
decl_stmt|;
name|String
name|newVersionId
init|=
literal|"newVersionId"
decl_stmt|;
name|putObject
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|newConent
argument_list|,
name|newETag
argument_list|,
name|newVersionId
argument_list|)
expr_stmt|;
name|assertVersionAttributes
argument_list|(
name|path
argument_list|,
name|newETag
argument_list|,
name|newVersionId
argument_list|)
expr_stmt|;
name|assertContent
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|newConent
argument_list|,
name|newETag
argument_list|,
name|newVersionId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a file uploaded with multi-part upload to ensure eTag is captured    * and used on file read.    */
annotation|@
name|Test
DECL|method|testCreateAndReadFileMultiPart ()
specifier|public
name|void
name|testCreateAndReadFileMultiPart
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bucket
init|=
literal|"s3a://mock-bucket/"
decl_stmt|;
name|String
name|file
init|=
literal|"multi-part-file"
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|bucket
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
name|Constants
operator|.
name|MULTIPART_MIN_SIZE
operator|+
literal|1
index|]
decl_stmt|;
name|String
name|eTag
init|=
literal|"abc"
decl_stmt|;
name|String
name|versionId
init|=
literal|"def"
decl_stmt|;
name|multipartUpload
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|content
argument_list|,
name|eTag
argument_list|,
name|versionId
argument_list|)
expr_stmt|;
comment|// make sure the eTag and versionId were put into the metadataStore
name|assertVersionAttributes
argument_list|(
name|path
argument_list|,
name|eTag
argument_list|,
name|versionId
argument_list|)
expr_stmt|;
comment|// Ensure underlying S3 getObject call uses the stored eTag or versionId
comment|// when reading data back.  If it doesn't, the read won't work and the
comment|// assert will fail.
name|assertContent
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|content
argument_list|,
name|eTag
argument_list|,
name|versionId
argument_list|)
expr_stmt|;
comment|// test overwrite
name|byte
index|[]
name|newContent
init|=
operator|new
name|byte
index|[
name|Constants
operator|.
name|MULTIPART_MIN_SIZE
operator|+
literal|1
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|newContent
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|String
name|newETag
init|=
literal|"newETag"
decl_stmt|;
name|String
name|newVersionId
init|=
literal|"newVersionId"
decl_stmt|;
name|multipartUpload
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|newContent
argument_list|,
name|newETag
argument_list|,
name|newVersionId
argument_list|)
expr_stmt|;
name|assertVersionAttributes
argument_list|(
name|path
argument_list|,
name|newETag
argument_list|,
name|newVersionId
argument_list|)
expr_stmt|;
name|assertContent
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|newContent
argument_list|,
name|newETag
argument_list|,
name|newVersionId
argument_list|)
expr_stmt|;
block|}
DECL|method|putObject (String file, Path path, byte[] content, String eTag, String versionId)
specifier|private
name|void
name|putObject
parameter_list|(
name|String
name|file
parameter_list|,
name|Path
name|path
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|eTag
parameter_list|,
name|String
name|versionId
parameter_list|)
throws|throws
name|IOException
block|{
name|PutObjectResult
name|putObjectResult
init|=
operator|new
name|PutObjectResult
argument_list|()
decl_stmt|;
name|ObjectMetadata
name|objectMetadata
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
name|objectMetadata
operator|.
name|setContentLength
argument_list|(
name|content
operator|.
name|length
argument_list|)
expr_stmt|;
name|putObjectResult
operator|.
name|setMetadata
argument_list|(
name|objectMetadata
argument_list|)
expr_stmt|;
name|putObjectResult
operator|.
name|setETag
argument_list|(
name|eTag
argument_list|)
expr_stmt|;
name|putObjectResult
operator|.
name|setVersionId
argument_list|(
name|versionId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|s3
operator|.
name|getObjectMetadata
argument_list|(
name|any
argument_list|(
name|GetObjectMetadataRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|s3
operator|.
name|putObject
argument_list|(
name|argThat
argument_list|(
name|correctPutObjectRequest
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|putObjectResult
argument_list|)
expr_stmt|;
name|ListObjectsV2Result
name|emptyListing
init|=
operator|new
name|ListObjectsV2Result
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|s3
operator|.
name|listObjectsV2
argument_list|(
name|argThat
argument_list|(
name|correctListObjectsRequest
argument_list|(
name|file
operator|+
literal|"/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|emptyListing
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|multipartUpload (String file, Path path, byte[] content, String eTag, String versionId)
specifier|private
name|void
name|multipartUpload
parameter_list|(
name|String
name|file
parameter_list|,
name|Path
name|path
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|eTag
parameter_list|,
name|String
name|versionId
parameter_list|)
throws|throws
name|IOException
block|{
name|CompleteMultipartUploadResult
name|uploadResult
init|=
operator|new
name|CompleteMultipartUploadResult
argument_list|()
decl_stmt|;
name|uploadResult
operator|.
name|setVersionId
argument_list|(
name|versionId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|s3
operator|.
name|getObjectMetadata
argument_list|(
name|any
argument_list|(
name|GetObjectMetadataRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|InitiateMultipartUploadResult
name|initiateMultipartUploadResult
init|=
operator|new
name|InitiateMultipartUploadResult
argument_list|()
decl_stmt|;
name|initiateMultipartUploadResult
operator|.
name|setUploadId
argument_list|(
literal|"uploadId"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|s3
operator|.
name|initiateMultipartUpload
argument_list|(
name|argThat
argument_list|(
name|correctInitiateMultipartUploadRequest
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|initiateMultipartUploadResult
argument_list|)
expr_stmt|;
name|UploadPartResult
name|uploadPartResult
init|=
operator|new
name|UploadPartResult
argument_list|()
decl_stmt|;
name|uploadPartResult
operator|.
name|setETag
argument_list|(
literal|"partETag"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|s3
operator|.
name|uploadPart
argument_list|(
name|argThat
argument_list|(
name|correctUploadPartRequest
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uploadPartResult
argument_list|)
expr_stmt|;
name|CompleteMultipartUploadResult
name|multipartUploadResult
init|=
operator|new
name|CompleteMultipartUploadResult
argument_list|()
decl_stmt|;
name|multipartUploadResult
operator|.
name|setETag
argument_list|(
name|eTag
argument_list|)
expr_stmt|;
name|multipartUploadResult
operator|.
name|setVersionId
argument_list|(
name|versionId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|s3
operator|.
name|completeMultipartUpload
argument_list|(
name|argThat
argument_list|(
name|correctMultipartUploadRequest
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|multipartUploadResult
argument_list|)
expr_stmt|;
name|ListObjectsV2Result
name|emptyListing
init|=
operator|new
name|ListObjectsV2Result
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|s3
operator|.
name|listObjectsV2
argument_list|(
name|argThat
argument_list|(
name|correctListObjectsRequest
argument_list|(
name|file
operator|+
literal|"/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|emptyListing
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertContent (String file, Path path, byte[] content, String eTag, String versionId)
specifier|private
name|void
name|assertContent
parameter_list|(
name|String
name|file
parameter_list|,
name|Path
name|path
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|eTag
parameter_list|,
name|String
name|versionId
parameter_list|)
throws|throws
name|IOException
block|{
name|S3Object
name|s3Object
init|=
operator|new
name|S3Object
argument_list|()
decl_stmt|;
name|ObjectMetadata
name|metadata
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|S3_VERSION_ID
argument_list|,
name|versionId
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setHeader
argument_list|(
name|Headers
operator|.
name|ETAG
argument_list|,
name|eTag
argument_list|)
expr_stmt|;
name|s3Object
operator|.
name|setObjectMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|s3Object
operator|.
name|setObjectContent
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|s3
operator|.
name|getObject
argument_list|(
name|argThat
argument_list|(
name|correctGetObjectRequest
argument_list|(
name|file
argument_list|,
name|eTag
argument_list|,
name|versionId
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|s3Object
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|readContent
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|content
argument_list|,
name|readContent
argument_list|)
expr_stmt|;
block|}
DECL|method|assertVersionAttributes (Path path, String eTag, String versionId)
specifier|private
name|void
name|assertVersionAttributes
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|eTag
parameter_list|,
name|String
name|versionId
parameter_list|)
throws|throws
name|IOException
block|{
name|MetadataStore
name|metadataStore
init|=
name|fs
operator|.
name|getMetadataStore
argument_list|()
decl_stmt|;
name|PathMetadata
name|pathMetadata
init|=
name|metadataStore
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|pathMetadata
argument_list|)
expr_stmt|;
name|S3AFileStatus
name|fileStatus
init|=
name|pathMetadata
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|eTag
argument_list|,
name|fileStatus
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionId
argument_list|,
name|fileStatus
operator|.
name|getVersionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|correctGetObjectRequest (final String key, final String eTag, final String versionId)
specifier|private
name|Matcher
argument_list|<
name|GetObjectRequest
argument_list|>
name|correctGetObjectRequest
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|String
name|eTag
parameter_list|,
specifier|final
name|String
name|versionId
parameter_list|)
block|{
return|return
operator|new
name|BaseMatcher
argument_list|<
name|GetObjectRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|GetObjectRequest
condition|)
block|{
name|GetObjectRequest
name|getObjectRequest
init|=
operator|(
name|GetObjectRequest
operator|)
name|item
decl_stmt|;
if|if
condition|(
name|getObjectRequest
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|changeDetectionSource
operator|.
name|equals
argument_list|(
name|CHANGE_DETECT_SOURCE_ETAG
argument_list|)
condition|)
block|{
return|return
name|getObjectRequest
operator|.
name|getMatchingETagConstraints
argument_list|()
operator|.
name|contains
argument_list|(
name|eTag
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|changeDetectionSource
operator|.
name|equals
argument_list|(
name|CHANGE_DETECT_SOURCE_VERSION_ID
argument_list|)
condition|)
block|{
return|return
name|getObjectRequest
operator|.
name|getVersionId
argument_list|()
operator|.
name|equals
argument_list|(
name|versionId
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"key and "
operator|+
name|changeDetectionSource
operator|+
literal|" matches"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|correctUploadPartRequest ( final String key)
specifier|private
name|Matcher
argument_list|<
name|UploadPartRequest
argument_list|>
name|correctUploadPartRequest
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|BaseMatcher
argument_list|<
name|UploadPartRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|UploadPartRequest
condition|)
block|{
name|UploadPartRequest
name|request
init|=
operator|(
name|UploadPartRequest
operator|)
name|item
decl_stmt|;
return|return
name|request
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"key matches"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
name|Matcher
argument_list|<
name|InitiateMultipartUploadRequest
argument_list|>
DECL|method|correctInitiateMultipartUploadRequest (final String key)
name|correctInitiateMultipartUploadRequest
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|BaseMatcher
argument_list|<
name|InitiateMultipartUploadRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"key matches"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|InitiateMultipartUploadRequest
condition|)
block|{
name|InitiateMultipartUploadRequest
name|request
init|=
operator|(
name|InitiateMultipartUploadRequest
operator|)
name|item
decl_stmt|;
return|return
name|request
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Matcher
argument_list|<
name|CompleteMultipartUploadRequest
argument_list|>
DECL|method|correctMultipartUploadRequest (final String key)
name|correctMultipartUploadRequest
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|BaseMatcher
argument_list|<
name|CompleteMultipartUploadRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|CompleteMultipartUploadRequest
condition|)
block|{
name|CompleteMultipartUploadRequest
name|request
init|=
operator|(
name|CompleteMultipartUploadRequest
operator|)
name|item
decl_stmt|;
return|return
name|request
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"key matches"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|correctListObjectsRequest ( final String key)
specifier|private
name|Matcher
argument_list|<
name|ListObjectsV2Request
argument_list|>
name|correctListObjectsRequest
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|BaseMatcher
argument_list|<
name|ListObjectsV2Request
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|ListObjectsV2Request
condition|)
block|{
name|ListObjectsV2Request
name|listObjectsRequest
init|=
operator|(
name|ListObjectsV2Request
operator|)
name|item
decl_stmt|;
return|return
name|listObjectsRequest
operator|.
name|getPrefix
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"key matches"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|correctPutObjectRequest ( final String key)
specifier|private
name|Matcher
argument_list|<
name|PutObjectRequest
argument_list|>
name|correctPutObjectRequest
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|BaseMatcher
argument_list|<
name|PutObjectRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|PutObjectRequest
condition|)
block|{
name|PutObjectRequest
name|putObjectRequest
init|=
operator|(
name|PutObjectRequest
operator|)
name|item
decl_stmt|;
return|return
name|putObjectRequest
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"key matches"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

