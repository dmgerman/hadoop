begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * This is a mock job which doesn't talk to YARN.  * It's in this package as the JobSubmitter API is package-scoped.  */
end_comment

begin_class
DECL|class|MockJob
specifier|public
class|class
name|MockJob
extends|extends
name|Job
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MockJob
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"mock"
decl_stmt|;
DECL|field|mockClient
specifier|private
specifier|final
name|ClientProtocol
name|mockClient
decl_stmt|;
DECL|field|jobIdCounter
specifier|private
specifier|static
name|int
name|jobIdCounter
decl_stmt|;
DECL|field|trackerId
specifier|private
specifier|static
name|String
name|trackerId
init|=
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|submittedCredentials
specifier|private
name|Credentials
name|submittedCredentials
decl_stmt|;
DECL|method|MockJob (final JobConf conf, final String jobName)
specifier|public
name|MockJob
parameter_list|(
specifier|final
name|JobConf
name|conf
parameter_list|,
specifier|final
name|String
name|jobName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setJobName
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
name|mockClient
operator|=
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|when
argument_list|(
name|mockClient
operator|.
name|submitJob
argument_list|(
name|any
argument_list|(
name|JobID
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
specifier|final
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|args
index|[
literal|1
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitted Job {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|submittedCredentials
operator|=
operator|(
name|Credentials
operator|)
name|args
index|[
literal|2
index|]
expr_stmt|;
specifier|final
name|JobStatus
name|status
init|=
operator|new
name|JobStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setState
argument_list|(
name|JobStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|status
operator|.
name|setSchedulingInfo
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|status
operator|.
name|setTrackingUrl
argument_list|(
literal|"http://localhost:8080/"
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockClient
operator|.
name|getNewJobID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|JobID
argument_list|(
name|trackerId
argument_list|,
name|jobIdCounter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockClient
operator|.
name|getQueueAdmins
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|AccessControlList
argument_list|(
name|AccessControlList
operator|.
name|WILDCARD_ACL_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isSuccessful ()
specifier|public
name|boolean
name|isSuccessful
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
comment|/** Only for mocking via unit tests. */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|getJobSubmitter (FileSystem fs, ClientProtocol submitClient)
name|JobSubmitter
name|getJobSubmitter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|ClientProtocol
name|submitClient
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JobSubmitter
argument_list|(
name|fs
argument_list|,
name|mockClient
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|connect ()
specifier|synchronized
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|super
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
DECL|method|getSubmittedCredentials ()
specifier|public
name|Credentials
name|getSubmittedCredentials
parameter_list|()
block|{
return|return
name|submittedCredentials
return|;
block|}
annotation|@
name|Override
DECL|method|updateStatus ()
specifier|synchronized
name|void
name|updateStatus
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no-op
block|}
block|}
end_class

end_unit

