begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|PathOrderComparators
operator|.
name|TOPMOST_PATH_FIRST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|PathOrderComparators
operator|.
name|TOPMOST_PATH_LAST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test ordering of paths with the comparator matches requirements.  */
end_comment

begin_class
DECL|class|TestPathOrderComparators
specifier|public
class|class
name|TestPathOrderComparators
block|{
DECL|field|ROOT
specifier|private
specifier|static
specifier|final
name|Path
name|ROOT
init|=
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/"
argument_list|)
decl_stmt|;
DECL|field|DIR_A
specifier|public
specifier|static
specifier|final
name|Path
name|DIR_A
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|"dirA"
argument_list|)
decl_stmt|;
DECL|field|DIR_B
specifier|public
specifier|static
specifier|final
name|Path
name|DIR_B
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|"dirB"
argument_list|)
decl_stmt|;
DECL|field|DIR_A_FILE_1
specifier|public
specifier|static
specifier|final
name|Path
name|DIR_A_FILE_1
init|=
operator|new
name|Path
argument_list|(
name|DIR_A
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
DECL|field|DIR_A_FILE_2
specifier|public
specifier|static
specifier|final
name|Path
name|DIR_A_FILE_2
init|=
operator|new
name|Path
argument_list|(
name|DIR_A
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
DECL|field|DIR_B_FILE_3
specifier|public
specifier|static
specifier|final
name|Path
name|DIR_B_FILE_3
init|=
operator|new
name|Path
argument_list|(
name|DIR_B
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
DECL|field|DIR_B_FILE_4
specifier|public
specifier|static
specifier|final
name|Path
name|DIR_B_FILE_4
init|=
operator|new
name|Path
argument_list|(
name|DIR_B
argument_list|,
literal|"file4"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testRootEqual ()
specifier|public
name|void
name|testRootEqual
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertComparesEqual
argument_list|(
name|ROOT
argument_list|,
name|ROOT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRootFirst ()
specifier|public
name|void
name|testRootFirst
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertComparesTopmost
argument_list|(
name|ROOT
argument_list|,
name|DIR_A_FILE_1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDirOrdering ()
specifier|public
name|void
name|testDirOrdering
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertComparesTopmost
argument_list|(
name|DIR_A
argument_list|,
name|DIR_B
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilesEqual ()
specifier|public
name|void
name|testFilesEqual
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertComparesEqual
argument_list|(
name|DIR_A_FILE_1
argument_list|,
name|DIR_A_FILE_1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilesInSameDir ()
specifier|public
name|void
name|testFilesInSameDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertComparesTopmost
argument_list|(
name|ROOT
argument_list|,
name|DIR_A_FILE_1
argument_list|)
expr_stmt|;
name|assertComparesTopmost
argument_list|(
name|DIR_A
argument_list|,
name|DIR_A_FILE_1
argument_list|)
expr_stmt|;
name|assertComparesTopmost
argument_list|(
name|DIR_A
argument_list|,
name|DIR_A_FILE_2
argument_list|)
expr_stmt|;
name|assertComparesTopmost
argument_list|(
name|DIR_A_FILE_1
argument_list|,
name|DIR_A_FILE_2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReversedFiles ()
specifier|public
name|void
name|testReversedFiles
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertReverseOrder
argument_list|(
name|DIR_A_FILE_1
argument_list|,
name|ROOT
argument_list|)
expr_stmt|;
name|assertReverseOrder
argument_list|(
name|DIR_A_FILE_1
argument_list|,
name|DIR_A
argument_list|)
expr_stmt|;
name|assertReverseOrder
argument_list|(
name|DIR_A_FILE_2
argument_list|,
name|DIR_A
argument_list|)
expr_stmt|;
name|assertReverseOrder
argument_list|(
name|DIR_A_FILE_2
argument_list|,
name|DIR_A_FILE_1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilesAndDifferentShallowDir ()
specifier|public
name|void
name|testFilesAndDifferentShallowDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertComparesTopmost
argument_list|(
name|DIR_B
argument_list|,
name|DIR_A_FILE_1
argument_list|)
expr_stmt|;
name|assertComparesTopmost
argument_list|(
name|DIR_A
argument_list|,
name|DIR_B_FILE_3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrderRoot ()
specifier|public
name|void
name|testOrderRoot
parameter_list|()
throws|throws
name|Throwable
block|{
name|verifySorted
argument_list|(
name|ROOT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrderRootDirs ()
specifier|public
name|void
name|testOrderRootDirs
parameter_list|()
throws|throws
name|Throwable
block|{
name|verifySorted
argument_list|(
name|ROOT
argument_list|,
name|DIR_A
argument_list|,
name|DIR_B
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrderRootDirsAndFiles ()
specifier|public
name|void
name|testOrderRootDirsAndFiles
parameter_list|()
throws|throws
name|Throwable
block|{
name|verifySorted
argument_list|(
name|ROOT
argument_list|,
name|DIR_A
argument_list|,
name|DIR_B
argument_list|,
name|DIR_A_FILE_1
argument_list|,
name|DIR_A_FILE_2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrderRootDirsAndAllFiles ()
specifier|public
name|void
name|testOrderRootDirsAndAllFiles
parameter_list|()
throws|throws
name|Throwable
block|{
name|verifySorted
argument_list|(
name|ROOT
argument_list|,
name|DIR_A
argument_list|,
name|DIR_B
argument_list|,
name|DIR_A_FILE_1
argument_list|,
name|DIR_A_FILE_2
argument_list|,
name|DIR_B_FILE_3
argument_list|,
name|DIR_B_FILE_4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSortOrderConstant ()
specifier|public
name|void
name|testSortOrderConstant
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|sort1
init|=
name|verifySorted
argument_list|(
name|ROOT
argument_list|,
name|DIR_A
argument_list|,
name|DIR_B
argument_list|,
name|DIR_A_FILE_1
argument_list|,
name|DIR_A_FILE_2
argument_list|,
name|DIR_B_FILE_3
argument_list|,
name|DIR_B_FILE_4
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|sort2
init|=
name|newArrayList
argument_list|(
name|sort1
argument_list|)
decl_stmt|;
name|assertSortsTo
argument_list|(
name|sort2
argument_list|,
name|sort1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSortReverse ()
specifier|public
name|void
name|testSortReverse
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|sort1
init|=
name|newArrayList
argument_list|(
name|ROOT
argument_list|,
name|DIR_A
argument_list|,
name|DIR_B
argument_list|,
name|DIR_A_FILE_1
argument_list|,
name|DIR_A_FILE_2
argument_list|,
name|DIR_B_FILE_3
argument_list|,
name|DIR_B_FILE_4
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|expected
init|=
name|newArrayList
argument_list|(
name|DIR_B_FILE_4
argument_list|,
name|DIR_B_FILE_3
argument_list|,
name|DIR_A_FILE_2
argument_list|,
name|DIR_A_FILE_1
argument_list|,
name|DIR_B
argument_list|,
name|DIR_A
argument_list|,
name|ROOT
argument_list|)
decl_stmt|;
name|assertSortsTo
argument_list|(
name|expected
argument_list|,
name|sort1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySorted (Path... paths)
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|verifySorted
parameter_list|(
name|Path
modifier|...
name|paths
parameter_list|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|original
init|=
name|newArrayList
argument_list|(
name|paths
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|sorted
init|=
name|newArrayList
argument_list|(
name|paths
argument_list|)
decl_stmt|;
name|assertSortsTo
argument_list|(
name|original
argument_list|,
name|sorted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|sorted
return|;
block|}
DECL|method|assertSortsTo ( final List<Path> original, final List<Path> sorted, boolean topmost)
specifier|private
name|void
name|assertSortsTo
parameter_list|(
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|original
parameter_list|,
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|sorted
parameter_list|,
name|boolean
name|topmost
parameter_list|)
block|{
name|sorted
operator|.
name|sort
argument_list|(
name|topmost
condition|?
name|TOPMOST_PATH_FIRST
else|:
name|TOPMOST_PATH_LAST
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sorted
argument_list|)
operator|.
name|as
argument_list|(
literal|"Sorted paths"
argument_list|)
operator|.
name|containsExactlyElementsOf
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
DECL|method|assertComparesEqual (Path l, Path r)
specifier|private
name|void
name|assertComparesEqual
parameter_list|(
name|Path
name|l
parameter_list|,
name|Path
name|r
parameter_list|)
block|{
name|assertOrder
argument_list|(
literal|0
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
DECL|method|assertComparesTopmost (Path l, Path r)
specifier|private
name|void
name|assertComparesTopmost
parameter_list|(
name|Path
name|l
parameter_list|,
name|Path
name|r
parameter_list|)
block|{
name|assertOrder
argument_list|(
operator|-
literal|1
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
literal|1
argument_list|,
name|r
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|assertReverseOrder (Path l, Path r)
specifier|private
name|void
name|assertReverseOrder
parameter_list|(
name|Path
name|l
parameter_list|,
name|Path
name|r
parameter_list|)
block|{
name|assertComparesTo
argument_list|(
operator|-
literal|1
argument_list|,
name|TOPMOST_PATH_LAST
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|assertComparesTo
argument_list|(
literal|1
argument_list|,
name|TOPMOST_PATH_LAST
argument_list|,
name|r
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|assertOrder (int res, Path l, Path r)
specifier|private
name|void
name|assertOrder
parameter_list|(
name|int
name|res
parameter_list|,
name|Path
name|l
parameter_list|,
name|Path
name|r
parameter_list|)
block|{
name|assertComparesTo
argument_list|(
name|res
argument_list|,
name|TOPMOST_PATH_FIRST
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
DECL|method|assertComparesTo (final int expected, final Comparator<Path> comparator, final Path l, final Path r)
specifier|private
name|void
name|assertComparesTo
parameter_list|(
specifier|final
name|int
name|expected
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|Path
argument_list|>
name|comparator
parameter_list|,
specifier|final
name|Path
name|l
parameter_list|,
specifier|final
name|Path
name|r
parameter_list|)
block|{
name|int
name|actual
init|=
name|comparator
operator|.
name|compare
argument_list|(
name|l
argument_list|,
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|actual
operator|<
operator|-
literal|1
condition|)
block|{
name|actual
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|actual
operator|>
literal|1
condition|)
block|{
name|actual
operator|=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Comparing "
operator|+
name|l
operator|+
literal|" to "
operator|+
name|r
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

