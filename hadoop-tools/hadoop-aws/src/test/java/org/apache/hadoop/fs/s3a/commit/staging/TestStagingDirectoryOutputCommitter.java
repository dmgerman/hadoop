begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.staging
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|InternalCommitterConstants
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingTestBase
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/** Mocking test of directory committer. */
end_comment

begin_class
DECL|class|TestStagingDirectoryOutputCommitter
specifier|public
class|class
name|TestStagingDirectoryOutputCommitter
extends|extends
name|StagingTestBase
operator|.
name|JobCommitterTest
argument_list|<
name|DirectoryStagingCommitter
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStagingDirectoryOutputCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|newJobCommitter ()
name|DirectoryStagingCommitter
name|newJobCommitter
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DirectoryStagingCommitter
argument_list|(
name|outputPath
argument_list|,
name|createTaskAttemptForJob
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testBadConflictMode ()
specifier|public
name|void
name|testBadConflictMode
parameter_list|()
throws|throws
name|Throwable
block|{
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
literal|"merge"
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|"MERGE"
argument_list|,
literal|"committer conflict"
argument_list|,
name|this
operator|::
name|newJobCommitter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultConflictResolution ()
specifier|public
name|void
name|testDefaultConflictResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|unset
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|)
expr_stmt|;
name|pathIsDirectory
argument_list|(
name|getMockS3A
argument_list|()
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|verifyJobSetupAndCommit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailConflictResolution ()
specifier|public
name|void
name|testFailConflictResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
name|CONFLICT_MODE_FAIL
argument_list|)
expr_stmt|;
name|verifyFailureConflictOutcome
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyFailureConflictOutcome ()
specifier|protected
name|void
name|verifyFailureConflictOutcome
parameter_list|()
throws|throws
name|Exception
block|{
name|pathIsDirectory
argument_list|(
name|getMockS3A
argument_list|()
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
specifier|final
name|DirectoryStagingCommitter
name|committer
init|=
name|newJobCommitter
argument_list|()
decl_stmt|;
comment|// this should fail
name|intercept
argument_list|(
name|PathExistsException
operator|.
name|class
argument_list|,
name|InternalCommitterConstants
operator|.
name|E_DEST_EXISTS
argument_list|,
literal|"Should throw an exception because the path exists"
argument_list|,
parameter_list|()
lambda|->
name|committer
operator|.
name|setupJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// but there are no checks in job commit (HADOOP-15469)
name|committer
operator|.
name|commitJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
operator|(
name|FileSystem
operator|)
name|getMockS3A
argument_list|()
argument_list|)
expr_stmt|;
name|pathDoesNotExist
argument_list|(
name|getMockS3A
argument_list|()
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|committer
operator|.
name|setupJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
name|verifyExistenceChecked
argument_list|(
name|getMockS3A
argument_list|()
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|verifyMkdirsInvoked
argument_list|(
name|getMockS3A
argument_list|()
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
operator|(
name|FileSystem
operator|)
name|getMockS3A
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
operator|(
name|FileSystem
operator|)
name|getMockS3A
argument_list|()
argument_list|)
expr_stmt|;
name|pathDoesNotExist
argument_list|(
name|getMockS3A
argument_list|()
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCompletion
argument_list|(
name|getMockS3A
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendConflictResolution ()
specifier|public
name|void
name|testAppendConflictResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
name|CONFLICT_MODE_APPEND
argument_list|)
expr_stmt|;
name|FileSystem
name|mockS3
init|=
name|getMockS3A
argument_list|()
decl_stmt|;
name|pathIsDirectory
argument_list|(
name|mockS3
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|verifyJobSetupAndCommit
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyJobSetupAndCommit ()
specifier|protected
name|void
name|verifyJobSetupAndCommit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DirectoryStagingCommitter
name|committer
init|=
name|newJobCommitter
argument_list|()
decl_stmt|;
name|committer
operator|.
name|setupJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|mockS3
init|=
name|getMockS3A
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|reset
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
name|pathExists
argument_list|(
name|mockS3
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCompletion
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplaceConflictResolution ()
specifier|public
name|void
name|testReplaceConflictResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|mockS3
init|=
name|getMockS3A
argument_list|()
decl_stmt|;
name|pathIsDirectory
argument_list|(
name|mockS3
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
name|CONFLICT_MODE_REPLACE
argument_list|)
expr_stmt|;
specifier|final
name|DirectoryStagingCommitter
name|committer
init|=
name|newJobCommitter
argument_list|()
decl_stmt|;
name|committer
operator|.
name|setupJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|reset
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
name|pathExists
argument_list|(
name|mockS3
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|canDelete
argument_list|(
name|mockS3
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDeleted
argument_list|(
name|mockS3
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|verifyCompletion
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplaceConflictFailsIfDestIsFile ()
specifier|public
name|void
name|testReplaceConflictFailsIfDestIsFile
parameter_list|()
throws|throws
name|Exception
block|{
name|pathIsFile
argument_list|(
name|getMockS3A
argument_list|()
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
name|CONFLICT_MODE_REPLACE
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|PathExistsException
operator|.
name|class
argument_list|,
name|InternalCommitterConstants
operator|.
name|E_DEST_EXISTS
argument_list|,
literal|"Expected a PathExistsException as the destination"
operator|+
literal|" was a file"
argument_list|,
parameter_list|()
lambda|->
block|{
name|newJobCommitter
argument_list|()
operator|.
name|setupJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendConflictFailsIfDestIsFile ()
specifier|public
name|void
name|testAppendConflictFailsIfDestIsFile
parameter_list|()
throws|throws
name|Exception
block|{
name|pathIsFile
argument_list|(
name|getMockS3A
argument_list|()
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
name|CONFLICT_MODE_APPEND
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|PathExistsException
operator|.
name|class
argument_list|,
name|InternalCommitterConstants
operator|.
name|E_DEST_EXISTS
argument_list|,
literal|"Expected a PathExistsException as a the destination"
operator|+
literal|" is a file"
argument_list|,
parameter_list|()
lambda|->
block|{
name|newJobCommitter
argument_list|()
operator|.
name|setupJob
argument_list|(
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateDefaultConflictMode ()
specifier|public
name|void
name|testValidateDefaultConflictMode
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|baseConf
init|=
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|sources
init|=
name|baseConf
operator|.
name|getPropertySources
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|)
decl_stmt|;
name|String
name|sourceStr
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|sources
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"source of conflict mode {}"
argument_list|,
name|sourceStr
argument_list|)
expr_stmt|;
name|String
name|baseConfVal
init|=
name|baseConf
operator|.
name|getTrimmed
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"conflict mode in core config from "
operator|+
name|sourceStr
argument_list|,
name|CONFLICT_MODE_APPEND
argument_list|,
name|baseConfVal
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

