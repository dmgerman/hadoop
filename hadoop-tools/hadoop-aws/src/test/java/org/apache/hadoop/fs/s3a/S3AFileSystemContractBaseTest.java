begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemContractBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  *  Tests a live S3 system. If you keys and bucket aren't specified, all tests   *  are marked as passed   *    *  This uses BlockJUnit4ClassRunner because FileSystemContractBaseTest from   *  TestCase which uses the old Junit3 runner that doesn't ignore assumptions   *  properly making it impossible to skip the tests if we don't have a valid  *  bucket.  **/
end_comment

begin_class
DECL|class|S3AFileSystemContractBaseTest
specifier|public
class|class
name|S3AFileSystemContractBaseTest
extends|extends
name|FileSystemContractBaseTest
block|{
DECL|field|TEST_BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|TEST_BUFFER_SIZE
init|=
literal|128
decl_stmt|;
DECL|field|MODULUS
specifier|private
specifier|static
specifier|final
name|int
name|MODULUS
init|=
literal|128
decl_stmt|;
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3AFileSystemContractBaseTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URI
name|testURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"test.fs.s3a.name"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|liveTest
init|=
name|testURI
operator|!=
literal|null
operator|&&
operator|!
name|testURI
operator|.
name|equals
argument_list|(
literal|"s3a:///"
argument_list|)
decl_stmt|;
comment|// This doesn't work with our JUnit 3 style test cases, so instead we'll
comment|// make this whole class not run by default
name|assumeTrue
argument_list|(
name|liveTest
argument_list|)
expr_stmt|;
name|fs
operator|=
operator|new
name|S3AFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|testURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|(
literal|"/tests3a"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testMkdirs ()
specifier|public
name|void
name|testMkdirs
parameter_list|()
throws|throws
name|IOException
block|{
comment|// No trailing slash
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|(
literal|"/tests3a/a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// With trailing slash
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|(
literal|"/tests3a/b/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/b/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two levels deep
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|(
literal|"/tests3a/c/a/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/c/a/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mismatched slashes
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/c/a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test deleting an empty directory
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|(
literal|"/tests3a/d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|(
literal|"/tests3a/d"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test deleting a deep empty directory
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|(
literal|"/tests3a/e/f/g/h"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|(
literal|"/tests3a/e/f/g"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/e/f/g/h"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/e/f/g"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/e/f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test delete of just a file
name|writeFile
argument_list|(
name|path
argument_list|(
literal|"/tests3a/f/f/file"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/f/f/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|(
literal|"/tests3a/f/f/file"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/f/f/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test delete of a path with files in various directories
name|writeFile
argument_list|(
name|path
argument_list|(
literal|"/tests3a/g/h/i/file"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/g/h/i/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|path
argument_list|(
literal|"/tests3a/g/h/j/file"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/g/h/j/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|(
literal|"/tests3a/g/h"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected delete to fail with recursion turned off"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{}
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/g/h/j/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|(
literal|"/tests3a/g/h"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/tests3a/g/h/j"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3600000
argument_list|)
DECL|method|testOpenCreate ()
specifier|public
name|void
name|testOpenCreate
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|createAndReadFileTest
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|createAndReadFileTest
argument_list|(
literal|5
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|createAndReadFileTest
argument_list|(
literal|20
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*     Enable to test the multipart upload     try {       createAndReadFileTest((long)6 * 1024 * 1024 * 1024);     } catch (IOException e) {       fail(e.getMessage());     }     */
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1200000
argument_list|)
DECL|method|testRenameFile ()
specifier|public
name|void
name|testRenameFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|srcPath
init|=
name|path
argument_list|(
literal|"/tests3a/a/srcfile"
argument_list|)
decl_stmt|;
specifier|final
name|OutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|srcPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|generateTestData
argument_list|(
name|outputStream
argument_list|,
literal|11
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|srcPath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dstPath
init|=
name|path
argument_list|(
literal|"/tests3a/b/dstfile"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dstPath
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|dstPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|srcPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|srcPath
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testRenameDirectory ()
specifier|public
name|void
name|testRenameDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|srcPath
init|=
name|path
argument_list|(
literal|"/tests3a/a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|srcPath
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
operator|new
name|Path
argument_list|(
name|srcPath
argument_list|,
literal|"b/testfile"
argument_list|)
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|Path
name|nonEmptyPath
init|=
name|path
argument_list|(
literal|"/tests3a/nonempty"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
operator|new
name|Path
argument_list|(
name|nonEmptyPath
argument_list|,
literal|"b/testfile"
argument_list|)
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|nonEmptyPath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dstPath
init|=
name|path
argument_list|(
literal|"/tests3a/b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|srcPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dstPath
argument_list|,
literal|"b/testfile"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSeek ()
specifier|public
name|void
name|testSeek
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"/tests3a/testfile.seek"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|path
argument_list|,
name|TEST_BUFFER_SIZE
operator|*
literal|10
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|,
name|TEST_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|inputStream
operator|.
name|getPos
argument_list|()
operator|+
name|MODULUS
argument_list|)
expr_stmt|;
name|testReceivedData
argument_list|(
name|inputStream
argument_list|,
name|TEST_BUFFER_SIZE
operator|*
literal|10
operator|-
name|MODULUS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates and reads a file with the given size in S3. The test file is     * generated according to a specific pattern.    * During the read phase the incoming data stream is also checked against this pattern.    *    * @param fileSize    * the size of the file to be generated in bytes    * @throws IOException    * thrown if an I/O error occurs while writing or reading the test file    */
DECL|method|createAndReadFileTest (final long fileSize)
specifier|private
name|void
name|createAndReadFileTest
parameter_list|(
specifier|final
name|long
name|fileSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|objectName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|objectPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tests3a/"
argument_list|,
name|objectName
argument_list|)
decl_stmt|;
comment|// Write test file to S3
specifier|final
name|OutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|objectPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|generateTestData
argument_list|(
name|outputStream
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now read the same file back from S3
specifier|final
name|InputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|objectPath
argument_list|)
decl_stmt|;
name|testReceivedData
argument_list|(
name|inputStream
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Delete test file
name|fs
operator|.
name|delete
argument_list|(
name|objectPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Receives test data from the given input stream and checks the size of the     * data as well as the pattern inside the received data.    *    * @param inputStream    * the input stream to read the test data from    * @param expectedSize    * the expected size of the data to be read from the input stream in bytes    * @throws IOException    * thrown if an error occurs while reading the data    */
DECL|method|testReceivedData (final InputStream inputStream, final long expectedSize)
specifier|private
name|void
name|testReceivedData
parameter_list|(
specifier|final
name|InputStream
name|inputStream
parameter_list|,
specifier|final
name|long
name|expectedSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|testBuffer
init|=
operator|new
name|byte
index|[
name|TEST_BUFFER_SIZE
index|]
decl_stmt|;
name|long
name|totalBytesRead
init|=
literal|0
decl_stmt|;
name|int
name|nextExpectedNumber
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|bytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|testBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|totalBytesRead
operator|+=
name|bytesRead
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesRead
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|testBuffer
index|[
name|i
index|]
operator|!=
name|nextExpectedNumber
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Read number "
operator|+
name|testBuffer
index|[
name|i
index|]
operator|+
literal|" but expected "
operator|+
name|nextExpectedNumber
argument_list|)
throw|;
block|}
operator|++
name|nextExpectedNumber
expr_stmt|;
if|if
condition|(
name|nextExpectedNumber
operator|==
name|MODULUS
condition|)
block|{
name|nextExpectedNumber
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|totalBytesRead
operator|!=
name|expectedSize
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected to read "
operator|+
name|expectedSize
operator|+
literal|" bytes but only received "
operator|+
name|totalBytesRead
argument_list|)
throw|;
block|}
block|}
comment|/**    * Generates test data of the given size according to some specific pattern    * and writes it to the provided output stream.    *    * @param outputStream    * the output stream to write the data to    * @param size    * the size of the test data to be generated in bytes    * @throws IOException    * thrown if an error occurs while writing the data    */
DECL|method|generateTestData (final OutputStream outputStream, final long size)
specifier|private
name|void
name|generateTestData
parameter_list|(
specifier|final
name|OutputStream
name|outputStream
parameter_list|,
specifier|final
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|testBuffer
init|=
operator|new
name|byte
index|[
name|TEST_BUFFER_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testBuffer
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|testBuffer
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|%
name|MODULUS
argument_list|)
expr_stmt|;
block|}
name|long
name|bytesWritten
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bytesWritten
operator|<
name|size
condition|)
block|{
specifier|final
name|long
name|diff
init|=
name|size
operator|-
name|bytesWritten
decl_stmt|;
if|if
condition|(
name|diff
operator|<
name|testBuffer
operator|.
name|length
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|testBuffer
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|diff
argument_list|)
expr_stmt|;
name|bytesWritten
operator|+=
name|diff
expr_stmt|;
block|}
else|else
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|testBuffer
argument_list|)
expr_stmt|;
name|bytesWritten
operator|+=
name|testBuffer
operator|.
name|length
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeFile (Path name, int fileSize)
specifier|private
name|void
name|writeFile
parameter_list|(
name|Path
name|name
parameter_list|,
name|int
name|fileSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|generateTestData
argument_list|(
name|outputStream
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

