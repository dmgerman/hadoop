begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractContractRenameTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractFSContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Statistic
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|verifyFileContents
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|writeDataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
operator|.
name|S3A_TEST_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|maybeEnableS3Guard
import|;
end_import

begin_comment
comment|/**  * S3A contract tests covering rename.  */
end_comment

begin_class
DECL|class|ITestS3AContractRename
specifier|public
class|class
name|ITestS3AContractRename
extends|extends
name|AbstractContractRenameTest
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3AContractRename
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getTestTimeoutMillis ()
specifier|protected
name|int
name|getTestTimeoutMillis
parameter_list|()
block|{
return|return
name|S3A_TEST_TIMEOUT
return|;
block|}
comment|/**    * Create a configuration, possibly patching in S3Guard options.    * @return a configuration    */
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
comment|// patch in S3Guard options
name|maybeEnableS3Guard
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|createContract (Configuration conf)
specifier|protected
name|AbstractFSContract
name|createContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|S3AContract
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"\nTeardown\n"
argument_list|)
expr_stmt|;
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testRenameDirIntoExistingDir ()
specifier|public
name|void
name|testRenameDirIntoExistingDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Verify renaming a dir into an existing dir puts the files"
operator|+
literal|" from the source dir into the existing dir"
operator|+
literal|" and leaves existing files alone"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|sourceSubdir
init|=
literal|"source"
decl_stmt|;
name|Path
name|srcDir
init|=
name|path
argument_list|(
name|sourceSubdir
argument_list|)
decl_stmt|;
name|Path
name|srcFilePath
init|=
operator|new
name|Path
argument_list|(
name|srcDir
argument_list|,
literal|"source-256.txt"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|srcDataset
init|=
name|dataset
argument_list|(
literal|256
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|writeDataset
argument_list|(
name|fs
argument_list|,
name|srcFilePath
argument_list|,
name|srcDataset
argument_list|,
name|srcDataset
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|destDir
init|=
name|path
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
name|Path
name|destFilePath
init|=
operator|new
name|Path
argument_list|(
name|destDir
argument_list|,
literal|"dest-512.txt"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|destDataset
init|=
name|dataset
argument_list|(
literal|512
argument_list|,
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
decl_stmt|;
name|writeDataset
argument_list|(
name|fs
argument_list|,
name|destFilePath
argument_list|,
name|destDataset
argument_list|,
name|destDataset
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertIsFile
argument_list|(
name|destFilePath
argument_list|)
expr_stmt|;
name|boolean
name|rename
init|=
name|fs
operator|.
name|rename
argument_list|(
name|srcDir
argument_list|,
name|destDir
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"s3a doesn't support rename to non-empty directory"
argument_list|,
name|rename
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that after renaming, the nested file is moved along with all its    * ancestors. It is similar to {@link #testRenamePopulatesDirectoryAncestors}.    *    * This is an extension testRenamePopulatesFileAncestors    * of the superclass version which does better    * logging of the state of the store before the assertions.    */
annotation|@
name|Test
DECL|method|testRenamePopulatesFileAncestors2 ()
specifier|public
name|void
name|testRenamePopulatesFileAncestors2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|S3AFileSystem
name|fs
init|=
operator|(
name|S3AFileSystem
operator|)
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|base
init|=
name|path
argument_list|(
literal|"testRenamePopulatesFileAncestors2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"src"
argument_list|)
decl_stmt|;
name|Path
name|dest
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"dest"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
specifier|final
name|String
name|nestedFile
init|=
literal|"/dir1/dir2/dir3/fileA"
decl_stmt|;
comment|// size of file to create
name|int
name|filesize
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
name|byte
index|[]
name|srcDataset
init|=
name|dataset
argument_list|(
name|filesize
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|Path
name|srcFile
init|=
name|path
argument_list|(
name|src
operator|+
name|nestedFile
argument_list|)
decl_stmt|;
name|Path
name|destFile
init|=
name|path
argument_list|(
name|dest
operator|+
name|nestedFile
argument_list|)
decl_stmt|;
name|writeDataset
argument_list|(
name|fs
argument_list|,
name|srcFile
argument_list|,
name|srcDataset
argument_list|,
name|srcDataset
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|S3ATestUtils
operator|.
name|MetricDiff
name|fileCopyDiff
init|=
operator|new
name|S3ATestUtils
operator|.
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|FILES_COPIED
argument_list|)
decl_stmt|;
name|S3ATestUtils
operator|.
name|MetricDiff
name|fileCopyBytes
init|=
operator|new
name|S3ATestUtils
operator|.
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|FILES_COPIED_BYTES
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|describe
argument_list|(
literal|"Rename has completed, examining data under "
operator|+
name|base
argument_list|)
expr_stmt|;
name|fileCopyDiff
operator|.
name|assertDiffEquals
argument_list|(
literal|"Number of files copied"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fileCopyBytes
operator|.
name|assertDiffEquals
argument_list|(
literal|"Number of bytes copied"
argument_list|,
name|filesize
argument_list|)
expr_stmt|;
comment|// log everything in the base directory.
name|S3ATestUtils
operator|.
name|lsR
argument_list|(
name|fs
argument_list|,
name|base
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// look at the data.
name|verifyFileContents
argument_list|(
name|fs
argument_list|,
name|destFile
argument_list|,
name|srcDataset
argument_list|)
expr_stmt|;
name|describe
argument_list|(
literal|"validating results"
argument_list|)
expr_stmt|;
name|validateAncestorsMoved
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|nestedFile
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

