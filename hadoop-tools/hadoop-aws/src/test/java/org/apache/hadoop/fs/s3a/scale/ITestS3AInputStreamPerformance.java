begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.scale
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|scale
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AInputPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AInstrumentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|assume
import|;
end_import

begin_comment
comment|/**  * Look at the performance of S3a operations.  */
end_comment

begin_class
DECL|class|ITestS3AInputStreamPerformance
specifier|public
class|class
name|ITestS3AInputStreamPerformance
extends|extends
name|S3AScaleTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3AInputStreamPerformance
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|s3aFS
specifier|private
name|S3AFileSystem
name|s3aFS
decl_stmt|;
DECL|field|testData
specifier|private
name|Path
name|testData
decl_stmt|;
DECL|field|testDataStatus
specifier|private
name|S3AFileStatus
name|testDataStatus
decl_stmt|;
DECL|field|in
specifier|private
name|FSDataInputStream
name|in
decl_stmt|;
DECL|field|streamStatistics
specifier|private
name|S3AInstrumentation
operator|.
name|InputStreamStatistics
name|streamStatistics
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
DECL|field|BIG_BLOCK_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BIG_BLOCK_SIZE
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
comment|/** Tests only run if the there is a named test file that can be read. */
DECL|field|testDataAvailable
specifier|private
name|boolean
name|testDataAvailable
init|=
literal|true
decl_stmt|;
DECL|field|assumptionMessage
specifier|private
name|String
name|assumptionMessage
init|=
literal|"test file"
decl_stmt|;
comment|/**    * Open the FS and the test data. The input stream is always set up here.    * @throws IOException IO Problems.    */
annotation|@
name|Before
DECL|method|openFS ()
specifier|public
name|void
name|openFS
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|SOCKET_SEND_BUFFER
argument_list|,
literal|16
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|SOCKET_RECV_BUFFER
argument_list|,
literal|16
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|String
name|testFile
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|KEY_CSVTEST_FILE
argument_list|,
name|DEFAULT_CSVTEST_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|testFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assumptionMessage
operator|=
literal|"Empty test property: "
operator|+
name|KEY_CSVTEST_FILE
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|assumptionMessage
argument_list|)
expr_stmt|;
name|testDataAvailable
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|testData
operator|=
operator|new
name|Path
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using {} as input stream source"
argument_list|,
name|testData
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|this
operator|.
name|testData
decl_stmt|;
name|bindS3aFS
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|testDataStatus
operator|=
name|s3aFS
operator|.
name|getFileStatus
argument_list|(
name|this
operator|.
name|testData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to read file {} specified in {}"
argument_list|,
name|testFile
argument_list|,
name|KEY_CSVTEST_FILE
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|bindS3aFS (Path path)
specifier|private
name|void
name|bindS3aFS
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|s3aFS
operator|=
operator|(
name|S3AFileSystem
operator|)
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cleanup: close the stream, close the FS.    */
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|describe
argument_list|(
literal|"cleanup"
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|s3aFS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Declare that the test requires the CSV test dataset.    */
DECL|method|requireCSVTestData ()
specifier|private
name|void
name|requireCSVTestData
parameter_list|()
block|{
name|assume
argument_list|(
name|assumptionMessage
argument_list|,
name|testDataAvailable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Open the test file with the read buffer specified in the setting.    * {@link #KEY_READ_BUFFER_SIZE}; use the {@code Normal} policy    * @return the stream, wrapping an S3a one    * @throws IOException IO problems    */
DECL|method|openTestFile ()
name|FSDataInputStream
name|openTestFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|openTestFile
argument_list|(
name|S3AInputPolicy
operator|.
name|Normal
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Open the test file with the read buffer specified in the setting    * {@link #KEY_READ_BUFFER_SIZE}.    * This includes the {@link #requireCSVTestData()} assumption; so    * if called before any FS op, will automatically skip the test    * if the CSV file is absent.    *    * @param inputPolicy input policy to use    * @param readahead readahead/buffer size    * @return the stream, wrapping an S3a one    * @throws IOException IO problems    */
DECL|method|openTestFile (S3AInputPolicy inputPolicy, long readahead)
name|FSDataInputStream
name|openTestFile
parameter_list|(
name|S3AInputPolicy
name|inputPolicy
parameter_list|,
name|long
name|readahead
parameter_list|)
throws|throws
name|IOException
block|{
name|requireCSVTestData
argument_list|()
expr_stmt|;
return|return
name|openDataFile
argument_list|(
name|s3aFS
argument_list|,
name|this
operator|.
name|testData
argument_list|,
name|inputPolicy
argument_list|,
name|readahead
argument_list|)
return|;
block|}
comment|/**    * Open a test file with the read buffer specified in the setting    * {@link org.apache.hadoop.fs.s3a.S3ATestConstants#KEY_READ_BUFFER_SIZE}.    *    * @param path path to open    * @param inputPolicy input policy to use    * @param readahead readahead/buffer size    * @return the stream, wrapping an S3a one    * @throws IOException IO problems    */
DECL|method|openDataFile (S3AFileSystem fs, Path path, S3AInputPolicy inputPolicy, long readahead)
specifier|private
name|FSDataInputStream
name|openDataFile
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|S3AInputPolicy
name|inputPolicy
parameter_list|,
name|long
name|readahead
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bufferSize
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|KEY_READ_BUFFER_SIZE
argument_list|,
name|DEFAULT_READ_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|S3AInputPolicy
name|policy
init|=
name|fs
operator|.
name|getInputPolicy
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setInputPolicy
argument_list|(
name|inputPolicy
argument_list|)
expr_stmt|;
try|try
block|{
name|FSDataInputStream
name|stream
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|readahead
operator|>=
literal|0
condition|)
block|{
name|stream
operator|.
name|setReadahead
argument_list|(
name|readahead
argument_list|)
expr_stmt|;
block|}
name|streamStatistics
operator|=
name|getInputStreamStatistics
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|stream
return|;
block|}
finally|finally
block|{
name|fs
operator|.
name|setInputPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assert that the stream was only ever opened once.    */
DECL|method|assertStreamOpenedExactlyOnce ()
specifier|protected
name|void
name|assertStreamOpenedExactlyOnce
parameter_list|()
block|{
name|assertOpenOperationCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make an assertion count about the number of open operations.    * @param expected the expected number    */
DECL|method|assertOpenOperationCount (long expected)
specifier|private
name|void
name|assertOpenOperationCount
parameter_list|(
name|long
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"open operations in\n"
operator|+
name|in
argument_list|,
name|expected
argument_list|,
name|streamStatistics
operator|.
name|openOperations
argument_list|)
expr_stmt|;
block|}
comment|/**    * Log how long an IOP took, by dividing the total time by the    * count of operations, printing in a human-readable form.    * @param operation operation being measured    * @param timer timing data    * @param count IOP count.    */
DECL|method|logTimePerIOP (String operation, NanoTimer timer, long count)
specifier|protected
name|void
name|logTimePerIOP
parameter_list|(
name|String
name|operation
parameter_list|,
name|NanoTimer
name|timer
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per {}: {} nS"
argument_list|,
name|operation
argument_list|,
name|toHuman
argument_list|(
name|timer
operator|.
name|duration
argument_list|()
operator|/
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeToOpenAndReadWholeFileBlocks ()
specifier|public
name|void
name|testTimeToOpenAndReadWholeFileBlocks
parameter_list|()
throws|throws
name|Throwable
block|{
name|requireCSVTestData
argument_list|()
expr_stmt|;
name|int
name|blockSize
init|=
name|_1MB
decl_stmt|;
name|describe
argument_list|(
literal|"Open the test file %s and read it in blocks of size %d"
argument_list|,
name|testData
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|testDataStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|in
operator|=
name|openTestFile
argument_list|()
expr_stmt|;
name|byte
index|[]
name|block
init|=
operator|new
name|byte
index|[
name|blockSize
index|]
decl_stmt|;
name|NanoTimer
name|timer2
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
comment|// implicitly rounding down here
name|long
name|blockCount
init|=
name|len
operator|/
name|blockSize
decl_stmt|;
name|long
name|totalToRead
init|=
name|blockCount
operator|*
name|blockSize
decl_stmt|;
name|long
name|minimumBandwidth
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
name|int
name|maxResetCount
init|=
literal|4
decl_stmt|;
name|int
name|resetCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|remaining
init|=
name|blockSize
decl_stmt|;
name|long
name|blockId
init|=
name|i
operator|+
literal|1
decl_stmt|;
name|NanoTimer
name|blockTimer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|int
name|reads
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|NanoTimer
name|readTimer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|block
argument_list|,
name|offset
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|reads
operator|++
expr_stmt|;
if|if
condition|(
name|bytesRead
operator|==
literal|1
condition|)
block|{
break|break;
block|}
name|remaining
operator|-=
name|bytesRead
expr_stmt|;
name|offset
operator|+=
name|bytesRead
expr_stmt|;
name|count
operator|+=
name|bytesRead
expr_stmt|;
name|readTimer
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|bytesRead
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bytes in read #{}: {} , block bytes: {},"
operator|+
literal|" remaining in block: {}"
operator|+
literal|" duration={} nS; ns/byte: {}, bandwidth={} MB/s"
argument_list|,
name|reads
argument_list|,
name|bytesRead
argument_list|,
name|blockSize
operator|-
name|remaining
argument_list|,
name|remaining
argument_list|,
name|readTimer
operator|.
name|duration
argument_list|()
argument_list|,
name|readTimer
operator|.
name|nanosPerOperation
argument_list|(
name|bytesRead
argument_list|)
argument_list|,
name|readTimer
operator|.
name|bandwidthDescription
argument_list|(
name|bytesRead
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"0 bytes returned by read() operation #{}"
argument_list|,
name|reads
argument_list|)
expr_stmt|;
block|}
block|}
name|blockTimer
operator|.
name|end
argument_list|(
literal|"Reading block %d in %d reads"
argument_list|,
name|blockId
argument_list|,
name|reads
argument_list|)
expr_stmt|;
name|String
name|bw
init|=
name|blockTimer
operator|.
name|bandwidthDescription
argument_list|(
name|blockSize
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bandwidth of block {}: {} MB/s: "
argument_list|,
name|blockId
argument_list|,
name|bw
argument_list|)
expr_stmt|;
if|if
condition|(
name|bandwidth
argument_list|(
name|blockTimer
argument_list|,
name|blockSize
argument_list|)
operator|<
name|minimumBandwidth
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bandwidth {} too low on block {}: resetting connection"
argument_list|,
name|bw
argument_list|,
name|blockId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Bandwidth of "
operator|+
name|bw
operator|+
literal|" too low after  "
operator|+
name|resetCount
operator|+
literal|" attempts"
argument_list|,
name|resetCount
operator|<=
name|maxResetCount
argument_list|)
expr_stmt|;
name|resetCount
operator|++
expr_stmt|;
comment|// reset the connection
name|getS3AInputStream
argument_list|(
name|in
argument_list|)
operator|.
name|resetConnection
argument_list|()
expr_stmt|;
block|}
block|}
name|timer2
operator|.
name|end
argument_list|(
literal|"Time to read %d bytes in %d blocks"
argument_list|,
name|totalToRead
argument_list|,
name|blockCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Overall Bandwidth {} MB/s; reset connections {}"
argument_list|,
name|timer2
operator|.
name|bandwidth
argument_list|(
name|totalToRead
argument_list|)
argument_list|,
name|resetCount
argument_list|)
expr_stmt|;
name|logStreamStatistics
argument_list|()
expr_stmt|;
block|}
comment|/**    * Work out the bandwidth in bytes/second.    * @param timer timer measuring the duration    * @param bytes bytes    * @return the number of bytes/second of the recorded operation    */
DECL|method|bandwidth (NanoTimer timer, long bytes)
specifier|public
specifier|static
name|double
name|bandwidth
parameter_list|(
name|NanoTimer
name|timer
parameter_list|,
name|long
name|bytes
parameter_list|)
block|{
return|return
name|bytes
operator|*
literal|1.0e9
operator|/
name|timer
operator|.
name|duration
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testLazySeekEnabled ()
specifier|public
name|void
name|testLazySeekEnabled
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Verify that seeks do not trigger any IO"
argument_list|)
expr_stmt|;
name|in
operator|=
name|openTestFile
argument_list|()
expr_stmt|;
name|long
name|len
init|=
name|testDataStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|NanoTimer
name|timer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|long
name|blockCount
init|=
name|len
operator|/
name|BLOCK_SIZE
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockCount
condition|;
name|i
operator|++
control|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|in
operator|.
name|getPos
argument_list|()
operator|+
name|BLOCK_SIZE
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|blockCount
operator|++
expr_stmt|;
name|timer
operator|.
name|end
argument_list|(
literal|"Time to execute %d seeks"
argument_list|,
name|blockCount
argument_list|)
expr_stmt|;
name|logTimePerIOP
argument_list|(
literal|"seek()"
argument_list|,
name|timer
argument_list|,
name|blockCount
argument_list|)
expr_stmt|;
name|logStreamStatistics
argument_list|()
expr_stmt|;
name|assertOpenOperationCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bytes read"
argument_list|,
literal|0
argument_list|,
name|streamStatistics
operator|.
name|bytesRead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadaheadOutOfRange ()
specifier|public
name|void
name|testReadaheadOutOfRange
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|in
operator|=
name|openTestFile
argument_list|()
expr_stmt|;
name|in
operator|.
name|setReadahead
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Stream should have rejected the request "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testReadWithNormalPolicy ()
specifier|public
name|void
name|testReadWithNormalPolicy
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Read big blocks with a big readahead"
argument_list|)
expr_stmt|;
name|executeSeekReadSequence
argument_list|(
name|BIG_BLOCK_SIZE
argument_list|,
name|BIG_BLOCK_SIZE
operator|*
literal|2
argument_list|,
name|S3AInputPolicy
operator|.
name|Normal
argument_list|)
expr_stmt|;
name|assertStreamOpenedExactlyOnce
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecompressionSequential128K ()
specifier|public
name|void
name|testDecompressionSequential128K
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Decompress with a 128K readahead"
argument_list|)
expr_stmt|;
name|executeDecompression
argument_list|(
literal|128
operator|*
literal|1024
argument_list|,
name|S3AInputPolicy
operator|.
name|Sequential
argument_list|)
expr_stmt|;
name|assertStreamOpenedExactlyOnce
argument_list|()
expr_stmt|;
block|}
comment|/**    * Execute a decompression + line read with the given input policy.    * @param readahead byte readahead    * @param inputPolicy read policy    * @throws IOException IO Problems    */
DECL|method|executeDecompression (long readahead, S3AInputPolicy inputPolicy)
specifier|private
name|void
name|executeDecompression
parameter_list|(
name|long
name|readahead
parameter_list|,
name|S3AInputPolicy
name|inputPolicy
parameter_list|)
throws|throws
name|IOException
block|{
name|CompressionCodecFactory
name|factory
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|factory
operator|.
name|getCodec
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
name|int
name|lines
init|=
literal|0
decl_stmt|;
name|FSDataInputStream
name|objectIn
init|=
name|openTestFile
argument_list|(
name|inputPolicy
argument_list|,
name|readahead
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
try|try
init|(
name|LineReader
name|lineReader
init|=
operator|new
name|LineReader
argument_list|(
name|codec
operator|.
name|createInputStream
argument_list|(
name|objectIn
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|)
init|)
block|{
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|int
name|read
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|bytesRead
operator|+=
name|read
expr_stmt|;
name|lines
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
comment|// done
block|}
name|timer
operator|.
name|end
argument_list|(
literal|"Time to read %d lines [%d bytes expanded, %d raw]"
operator|+
literal|" with readahead = %d"
argument_list|,
name|lines
argument_list|,
name|bytesRead
argument_list|,
name|testDataStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|readahead
argument_list|)
expr_stmt|;
name|logTimePerIOP
argument_list|(
literal|"line read"
argument_list|,
name|timer
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|logStreamStatistics
argument_list|()
expr_stmt|;
block|}
DECL|method|logStreamStatistics ()
specifier|private
name|void
name|logStreamStatistics
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Stream Statistics%n{}"
argument_list|)
argument_list|,
name|streamStatistics
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute a seek+read sequence.    * @param blockSize block size for seeks    * @param readahead what the readahead value of the stream should be    * @throws IOException IO problems    */
DECL|method|executeSeekReadSequence (long blockSize, long readahead, S3AInputPolicy policy)
specifier|protected
name|void
name|executeSeekReadSequence
parameter_list|(
name|long
name|blockSize
parameter_list|,
name|long
name|readahead
parameter_list|,
name|S3AInputPolicy
name|policy
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|=
name|openTestFile
argument_list|(
name|policy
argument_list|,
name|readahead
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|testDataStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|NanoTimer
name|timer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|long
name|blockCount
init|=
name|len
operator|/
name|blockSize
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading {} blocks, readahead = {}"
argument_list|,
name|blockCount
argument_list|,
name|readahead
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockCount
condition|;
name|i
operator|++
control|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|in
operator|.
name|getPos
argument_list|()
operator|+
name|blockSize
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// this is the read
name|assertTrue
argument_list|(
name|in
operator|.
name|read
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
name|timer
operator|.
name|end
argument_list|(
literal|"Time to execute %d seeks of distance %d with readahead = %d"
argument_list|,
name|blockCount
argument_list|,
name|blockSize
argument_list|,
name|readahead
argument_list|)
expr_stmt|;
name|logTimePerIOP
argument_list|(
literal|"seek(pos + "
operator|+
name|blockCount
operator|+
literal|"); read()"
argument_list|,
name|timer
argument_list|,
name|blockCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Effective bandwidth {} MB/S"
argument_list|,
name|timer
operator|.
name|bandwidthDescription
argument_list|(
name|streamStatistics
operator|.
name|bytesRead
operator|-
name|streamStatistics
operator|.
name|bytesSkippedOnSeek
argument_list|)
argument_list|)
expr_stmt|;
name|logStreamStatistics
argument_list|()
expr_stmt|;
block|}
DECL|field|_4K
specifier|public
specifier|static
specifier|final
name|int
name|_4K
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
DECL|field|_8K
specifier|public
specifier|static
specifier|final
name|int
name|_8K
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
DECL|field|_16K
specifier|public
specifier|static
specifier|final
name|int
name|_16K
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
DECL|field|_32K
specifier|public
specifier|static
specifier|final
name|int
name|_32K
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
DECL|field|_64K
specifier|public
specifier|static
specifier|final
name|int
name|_64K
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
DECL|field|_128K
specifier|public
specifier|static
specifier|final
name|int
name|_128K
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
DECL|field|_256K
specifier|public
specifier|static
specifier|final
name|int
name|_256K
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
DECL|field|_1MB
specifier|public
specifier|static
specifier|final
name|int
name|_1MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|_2MB
specifier|public
specifier|static
specifier|final
name|int
name|_2MB
init|=
literal|2
operator|*
name|_1MB
decl_stmt|;
DECL|field|_10MB
specifier|public
specifier|static
specifier|final
name|int
name|_10MB
init|=
name|_1MB
operator|*
literal|10
decl_stmt|;
DECL|field|_5MB
specifier|public
specifier|static
specifier|final
name|int
name|_5MB
init|=
name|_1MB
operator|*
literal|5
decl_stmt|;
DECL|field|RANDOM_IO_SEQUENCE
specifier|private
specifier|static
specifier|final
name|int
index|[]
index|[]
name|RANDOM_IO_SEQUENCE
init|=
block|{
block|{
name|_2MB
block|,
name|_128K
block|}
block|,
block|{
name|_128K
block|,
name|_128K
block|}
block|,
block|{
name|_5MB
block|,
name|_64K
block|}
block|,
block|{
name|_1MB
block|,
name|_1MB
block|}
block|,   }
decl_stmt|;
annotation|@
name|Test
DECL|method|testRandomIORandomPolicy ()
specifier|public
name|void
name|testRandomIORandomPolicy
parameter_list|()
throws|throws
name|Throwable
block|{
name|executeRandomIO
argument_list|(
name|S3AInputPolicy
operator|.
name|Random
argument_list|,
operator|(
name|long
operator|)
name|RANDOM_IO_SEQUENCE
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"streams aborted in "
operator|+
name|streamStatistics
argument_list|,
literal|0
argument_list|,
name|streamStatistics
operator|.
name|aborted
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomIONormalPolicy ()
specifier|public
name|void
name|testRandomIONormalPolicy
parameter_list|()
throws|throws
name|Throwable
block|{
name|long
name|expectedOpenCount
init|=
name|RANDOM_IO_SEQUENCE
operator|.
name|length
decl_stmt|;
name|executeRandomIO
argument_list|(
name|S3AInputPolicy
operator|.
name|Normal
argument_list|,
name|expectedOpenCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"streams aborted in "
operator|+
name|streamStatistics
argument_list|,
literal|4
argument_list|,
name|streamStatistics
operator|.
name|aborted
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute the random IO {@code readFully(pos, bytes[])} sequence defined by    * {@link #RANDOM_IO_SEQUENCE}. The stream is closed afterwards; that's used    * in the timing too    * @param policy read policy    * @param expectedOpenCount expected number of stream openings    * @throws IOException IO problems    * @return the timer    */
DECL|method|executeRandomIO (S3AInputPolicy policy, long expectedOpenCount)
specifier|private
name|ContractTestUtils
operator|.
name|NanoTimer
name|executeRandomIO
parameter_list|(
name|S3AInputPolicy
name|policy
parameter_list|,
name|long
name|expectedOpenCount
parameter_list|)
throws|throws
name|IOException
block|{
name|describe
argument_list|(
literal|"Random IO with policy \"%s\""
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|_1MB
index|]
decl_stmt|;
name|long
name|totalBytesRead
init|=
literal|0
decl_stmt|;
name|in
operator|=
name|openTestFile
argument_list|(
name|policy
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
index|[]
name|action
range|:
name|RANDOM_IO_SEQUENCE
control|)
block|{
name|int
name|position
init|=
name|action
index|[
literal|0
index|]
decl_stmt|;
name|int
name|range
init|=
name|action
index|[
literal|1
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|totalBytesRead
operator|+=
name|range
expr_stmt|;
block|}
name|int
name|reads
init|=
name|RANDOM_IO_SEQUENCE
operator|.
name|length
decl_stmt|;
name|timer
operator|.
name|end
argument_list|(
literal|"Time to execute %d reads of total size %d bytes"
argument_list|,
name|reads
argument_list|,
name|totalBytesRead
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertOpenOperationCount
argument_list|(
name|expectedOpenCount
argument_list|)
expr_stmt|;
name|logTimePerIOP
argument_list|(
literal|"byte read"
argument_list|,
name|timer
argument_list|,
name|totalBytesRead
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Effective bandwidth {} MB/S"
argument_list|,
name|timer
operator|.
name|bandwidthDescription
argument_list|(
name|streamStatistics
operator|.
name|bytesRead
operator|-
name|streamStatistics
operator|.
name|bytesSkippedOnSeek
argument_list|)
argument_list|)
expr_stmt|;
name|logStreamStatistics
argument_list|()
expr_stmt|;
return|return
name|timer
return|;
block|}
DECL|method|getS3aStream ()
name|S3AInputStream
name|getS3aStream
parameter_list|()
block|{
return|return
operator|(
name|S3AInputStream
operator|)
name|in
operator|.
name|getWrappedStream
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testRandomReadOverBuffer ()
specifier|public
name|void
name|testRandomReadOverBuffer
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"read over a buffer, making sure that the requests"
operator|+
literal|" spans readahead ranges"
argument_list|)
expr_stmt|;
name|int
name|datasetLen
init|=
name|_32K
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dataFile
init|=
name|path
argument_list|(
literal|"testReadOverBuffer.bin"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sourceData
init|=
name|dataset
argument_list|(
name|datasetLen
argument_list|,
literal|0
argument_list|,
literal|64
argument_list|)
decl_stmt|;
comment|// relies on the field 'fs' referring to the R/W FS
name|writeDataset
argument_list|(
name|fs
argument_list|,
name|dataFile
argument_list|,
name|sourceData
argument_list|,
name|datasetLen
argument_list|,
name|_16K
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|datasetLen
index|]
decl_stmt|;
name|int
name|readahead
init|=
name|_8K
decl_stmt|;
name|int
name|halfReadahead
init|=
name|_4K
decl_stmt|;
name|in
operator|=
name|openDataFile
argument_list|(
name|fs
argument_list|,
name|dataFile
argument_list|,
name|S3AInputPolicy
operator|.
name|Random
argument_list|,
name|readahead
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting initial reads"
argument_list|)
expr_stmt|;
name|S3AInputStream
name|s3aStream
init|=
name|getS3aStream
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|readahead
argument_list|,
name|s3aStream
operator|.
name|getReadahead
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|oneByte
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|in
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|oneByte
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// make some assertions about the current state
name|assertEquals
argument_list|(
literal|"remaining in\n"
operator|+
name|in
argument_list|,
name|readahead
operator|-
literal|1
argument_list|,
name|s3aStream
operator|.
name|remainingInCurrentRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"range start in\n"
operator|+
name|in
argument_list|,
literal|0
argument_list|,
name|s3aStream
operator|.
name|getContentRangeStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"range finish in\n"
operator|+
name|in
argument_list|,
name|readahead
argument_list|,
name|s3aStream
operator|.
name|getContentRangeFinish
argument_list|()
argument_list|)
expr_stmt|;
name|assertStreamOpenedExactlyOnce
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Starting sequence of positioned read calls over\n%s"
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|NanoTimer
name|readTimer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|int
name|currentPos
init|=
name|halfReadahead
decl_stmt|;
name|int
name|offset
init|=
name|currentPos
decl_stmt|;
name|int
name|bytesRead
init|=
literal|0
decl_stmt|;
name|int
name|readOps
init|=
literal|0
decl_stmt|;
comment|// make multiple read() calls
while|while
condition|(
name|bytesRead
operator|<
name|halfReadahead
condition|)
block|{
name|int
name|length
init|=
name|buffer
operator|.
name|length
operator|-
name|offset
decl_stmt|;
name|int
name|read
init|=
name|in
operator|.
name|read
argument_list|(
name|currentPos
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|bytesRead
operator|+=
name|read
expr_stmt|;
name|offset
operator|+=
name|read
expr_stmt|;
name|readOps
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|"open operations on request #"
operator|+
name|readOps
operator|+
literal|" after reading "
operator|+
name|bytesRead
operator|+
literal|" current position in stream "
operator|+
name|currentPos
operator|+
literal|" in\n"
operator|+
name|fs
operator|+
literal|"\n "
operator|+
name|in
argument_list|,
literal|1
argument_list|,
name|streamStatistics
operator|.
name|openOperations
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|currentPos
init|;
name|i
operator|<
name|currentPos
operator|+
name|read
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Wrong value from byte "
operator|+
name|i
argument_list|,
name|sourceData
index|[
name|i
index|]
argument_list|,
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|currentPos
operator|+=
name|read
expr_stmt|;
block|}
name|assertStreamOpenedExactlyOnce
argument_list|()
expr_stmt|;
comment|// assert at the end of the original block
name|assertEquals
argument_list|(
name|readahead
argument_list|,
name|currentPos
argument_list|)
expr_stmt|;
name|readTimer
operator|.
name|end
argument_list|(
literal|"read %d in %d operations"
argument_list|,
name|bytesRead
argument_list|,
name|readOps
argument_list|)
expr_stmt|;
name|bandwidth
argument_list|(
name|readTimer
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per byte(): {} nS"
argument_list|,
name|toHuman
argument_list|(
name|readTimer
operator|.
name|nanosPerOperation
argument_list|(
name|bytesRead
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per read(): {} nS"
argument_list|,
name|toHuman
argument_list|(
name|readTimer
operator|.
name|nanosPerOperation
argument_list|(
name|readOps
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|describe
argument_list|(
literal|"read last byte"
argument_list|)
expr_stmt|;
comment|// read one more
name|int
name|read
init|=
name|in
operator|.
name|read
argument_list|(
name|currentPos
argument_list|,
name|buffer
argument_list|,
name|bytesRead
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"-1 from last read"
argument_list|,
name|read
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertOpenOperationCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value from read "
argument_list|,
name|sourceData
index|[
name|currentPos
index|]
argument_list|,
operator|(
name|int
operator|)
name|buffer
index|[
name|currentPos
index|]
argument_list|)
expr_stmt|;
name|currentPos
operator|++
expr_stmt|;
comment|// now scan all the way to the end of the file, using single byte read()
comment|// calls
name|describe
argument_list|(
literal|"read() to EOF over \n%s"
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|long
name|readCount
init|=
literal|0
decl_stmt|;
name|NanoTimer
name|timer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"seeking"
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|currentPos
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"reading"
argument_list|)
expr_stmt|;
while|while
condition|(
name|currentPos
operator|<
name|datasetLen
condition|)
block|{
name|int
name|r
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Negative read() at position "
operator|+
name|currentPos
operator|+
literal|" in\n"
operator|+
name|in
argument_list|,
name|r
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|buffer
index|[
name|currentPos
index|]
operator|=
operator|(
name|byte
operator|)
name|r
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value from read from\n"
operator|+
name|in
argument_list|,
name|sourceData
index|[
name|currentPos
index|]
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|currentPos
operator|++
expr_stmt|;
name|readCount
operator|++
expr_stmt|;
block|}
name|timer
operator|.
name|end
argument_list|(
literal|"read %d bytes"
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
name|bandwidth
argument_list|(
name|timer
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per read(): {} nS"
argument_list|,
name|toHuman
argument_list|(
name|timer
operator|.
name|nanosPerOperation
argument_list|(
name|readCount
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"last read in "
operator|+
name|in
argument_list|,
operator|-
literal|1
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

