begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|PathOutputCommitter
import|;
end_import

begin_comment
comment|/**  * Implementation of the fault injection lifecycle.  * Can reset a fault on failure or always raise it.  */
end_comment

begin_class
DECL|class|CommitterFaultInjectionImpl
specifier|public
specifier|final
class|class
name|CommitterFaultInjectionImpl
extends|extends
name|PathOutputCommitter
implements|implements
name|CommitterFaultInjection
block|{
DECL|field|faults
specifier|private
name|Set
argument_list|<
name|Faults
argument_list|>
name|faults
decl_stmt|;
DECL|field|resetOnFailure
specifier|private
name|boolean
name|resetOnFailure
decl_stmt|;
DECL|method|CommitterFaultInjectionImpl (Path outputPath, JobContext context, boolean resetOnFailure, Faults... faults)
specifier|public
name|CommitterFaultInjectionImpl
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|JobContext
name|context
parameter_list|,
name|boolean
name|resetOnFailure
parameter_list|,
name|Faults
modifier|...
name|faults
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|setFaults
argument_list|(
name|faults
argument_list|)
expr_stmt|;
name|this
operator|.
name|resetOnFailure
operator|=
name|resetOnFailure
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setFaults (Faults... faults)
specifier|public
name|void
name|setFaults
parameter_list|(
name|Faults
modifier|...
name|faults
parameter_list|)
block|{
name|this
operator|.
name|faults
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|faults
operator|.
name|length
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|faults
argument_list|,
name|faults
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fail if the condition is in the set of faults, may optionally reset    * it before failing.    * @param condition condition to check for    * @throws Failure if the condition is faulting    */
DECL|method|maybeFail (Faults condition)
specifier|private
name|void
name|maybeFail
parameter_list|(
name|Faults
name|condition
parameter_list|)
throws|throws
name|Failure
block|{
if|if
condition|(
name|faults
operator|.
name|contains
argument_list|(
name|condition
argument_list|)
condition|)
block|{
if|if
condition|(
name|resetOnFailure
condition|)
block|{
name|faults
operator|.
name|remove
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|Failure
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getWorkPath ()
specifier|public
name|Path
name|getWorkPath
parameter_list|()
throws|throws
name|IOException
block|{
name|maybeFail
argument_list|(
name|Faults
operator|.
name|getWorkPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputPath ()
specifier|public
name|Path
name|getOutputPath
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setupJob (JobContext jobContext)
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
name|maybeFail
argument_list|(
name|Faults
operator|.
name|setupJob
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setupTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|maybeFail
argument_list|(
name|Faults
operator|.
name|setupTask
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsTaskCommit (TaskAttemptContext taskContext)
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|maybeFail
argument_list|(
name|Faults
operator|.
name|needsTaskCommit
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|commitTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|maybeFail
argument_list|(
name|Faults
operator|.
name|commitTask
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortTask (TaskAttemptContext taskContext)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
throws|throws
name|IOException
block|{
name|maybeFail
argument_list|(
name|Faults
operator|.
name|abortTask
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitJob (JobContext jobContext)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
name|maybeFail
argument_list|(
name|Faults
operator|.
name|commitJob
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortJob (JobContext jobContext, JobStatus.State state)
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|JobStatus
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|maybeFail
argument_list|(
name|Faults
operator|.
name|abortJob
argument_list|)
expr_stmt|;
block|}
comment|/**    * The exception raised on failure.    */
DECL|class|Failure
specifier|public
specifier|static
class|class
name|Failure
extends|extends
name|IOException
block|{
DECL|method|Failure ()
specifier|public
name|Failure
parameter_list|()
block|{
name|super
argument_list|(
name|COMMIT_FAILURE_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

