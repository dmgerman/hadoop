begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AmazonS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_comment
comment|/**  * Unit test suite covering translation of AWS SDK exceptions to S3A exceptions,  * and retry/recovery policies.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableNotThrown"
argument_list|)
DECL|class|TestS3AExceptionTranslation
specifier|public
class|class
name|TestS3AExceptionTranslation
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ConnectTimeoutException
DECL|field|HTTP_CONNECTION_TIMEOUT_EX
name|HTTP_CONNECTION_TIMEOUT_EX
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ConnectTimeoutException
argument_list|(
literal|"apache"
argument_list|)
decl_stmt|;
DECL|field|SOCKET_TIMEOUT_EX
specifier|private
specifier|static
specifier|final
name|SocketTimeoutException
name|SOCKET_TIMEOUT_EX
init|=
operator|new
name|SocketTimeoutException
argument_list|(
literal|"socket"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|test301ContainsEndpoint ()
specifier|public
name|void
name|test301ContainsEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bucket
init|=
literal|"bucket.s3-us-west-2.amazonaws.com"
decl_stmt|;
name|int
name|sc301
init|=
literal|301
decl_stmt|;
name|AmazonS3Exception
name|s3Exception
init|=
name|createS3Exception
argument_list|(
literal|"wrong endpoint"
argument_list|,
name|sc301
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|S3AUtils
operator|.
name|ENDPOINT_KEY
argument_list|,
name|bucket
argument_list|)
argument_list|)
decl_stmt|;
name|AWSRedirectException
name|ex
init|=
name|verifyTranslated
argument_list|(
name|AWSRedirectException
operator|.
name|class
argument_list|,
name|s3Exception
argument_list|)
decl_stmt|;
name|assertStatusCode
argument_list|(
name|sc301
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertContained
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertContained
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ENDPOINT
argument_list|)
expr_stmt|;
name|assertExceptionContains
argument_list|(
name|ENDPOINT
argument_list|,
name|ex
argument_list|,
literal|"endpoint"
argument_list|)
expr_stmt|;
name|assertExceptionContains
argument_list|(
name|bucket
argument_list|,
name|ex
argument_list|,
literal|"bucket name"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertContained (String text, String contained)
specifier|protected
name|void
name|assertContained
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|contained
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"string \""
operator|+
name|contained
operator|+
literal|"\" not found in \""
operator|+
name|text
operator|+
literal|"\""
argument_list|,
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|contains
argument_list|(
name|contained
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTranslated ( int status, Class<E> expected)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|void
name|verifyTranslated
parameter_list|(
name|int
name|status
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
name|expected
argument_list|,
name|createS3Exception
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test400isBad ()
specifier|public
name|void
name|test400isBad
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
literal|400
argument_list|,
name|AWSBadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test401isNotPermittedFound ()
specifier|public
name|void
name|test401isNotPermittedFound
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
literal|401
argument_list|,
name|AccessDeniedException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test403isNotPermittedFound ()
specifier|public
name|void
name|test403isNotPermittedFound
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
literal|403
argument_list|,
name|AccessDeniedException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test404isNotFound ()
specifier|public
name|void
name|test404isNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
literal|404
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test410isNotFound ()
specifier|public
name|void
name|test410isNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
literal|410
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test416isEOF ()
specifier|public
name|void
name|test416isEOF
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
literal|416
argument_list|,
name|EOFException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenericS3Exception ()
specifier|public
name|void
name|testGenericS3Exception
parameter_list|()
throws|throws
name|Exception
block|{
comment|// S3 exception of no known type
name|AWSS3IOException
name|ex
init|=
name|verifyTranslated
argument_list|(
name|AWSS3IOException
operator|.
name|class
argument_list|,
name|createS3Exception
argument_list|(
literal|451
argument_list|)
argument_list|)
decl_stmt|;
name|assertStatusCode
argument_list|(
literal|451
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenericServiceS3Exception ()
specifier|public
name|void
name|testGenericServiceS3Exception
parameter_list|()
throws|throws
name|Exception
block|{
comment|// service exception of no known type
name|AmazonServiceException
name|ase
init|=
operator|new
name|AmazonServiceException
argument_list|(
literal|"unwind"
argument_list|)
decl_stmt|;
name|ase
operator|.
name|setStatusCode
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|AWSServiceIOException
name|ex
init|=
name|verifyTranslated
argument_list|(
name|AWSStatus500Exception
operator|.
name|class
argument_list|,
name|ase
argument_list|)
decl_stmt|;
name|assertStatusCode
argument_list|(
literal|500
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
DECL|method|assertStatusCode (int expected, AWSServiceIOException ex)
specifier|protected
name|void
name|assertStatusCode
parameter_list|(
name|int
name|expected
parameter_list|,
name|AWSServiceIOException
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Null exception"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|!=
name|ex
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected status code "
operator|+
name|expected
operator|+
literal|"but got "
operator|+
name|ex
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGenericClientException ()
specifier|public
name|void
name|testGenericClientException
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Generic Amazon exception
name|verifyTranslated
argument_list|(
name|AWSClientIOException
operator|.
name|class
argument_list|,
operator|new
name|AmazonClientException
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createS3Exception (int code)
specifier|private
specifier|static
name|AmazonS3Exception
name|createS3Exception
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
name|createS3Exception
argument_list|(
literal|""
argument_list|,
name|code
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createS3Exception (String message, int code, Map<String, String> additionalDetails)
specifier|private
specifier|static
name|AmazonS3Exception
name|createS3Exception
parameter_list|(
name|String
name|message
parameter_list|,
name|int
name|code
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|additionalDetails
parameter_list|)
block|{
name|AmazonS3Exception
name|source
init|=
operator|new
name|AmazonS3Exception
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|source
operator|.
name|setStatusCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|source
operator|.
name|setAdditionalDetails
argument_list|(
name|additionalDetails
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
DECL|method|verifyTranslated (Class<E> clazz, AmazonClientException exception)
specifier|private
specifier|static
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|E
name|verifyTranslated
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|,
name|AmazonClientException
name|exception
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|verifyExceptionClass
argument_list|(
name|clazz
argument_list|,
name|translateException
argument_list|(
literal|"test"
argument_list|,
literal|"/"
argument_list|,
name|exception
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assertContainsInterrupted (boolean expected, Throwable thrown)
specifier|private
name|void
name|assertContainsInterrupted
parameter_list|(
name|boolean
name|expected
parameter_list|,
name|Throwable
name|thrown
parameter_list|)
throws|throws
name|Throwable
block|{
name|boolean
name|wasInterrupted
init|=
name|containsInterruptedException
argument_list|(
name|thrown
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|wasInterrupted
operator|!=
name|expected
condition|)
block|{
throw|throw
name|thrown
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInterruptExceptionDetecting ()
specifier|public
name|void
name|testInterruptExceptionDetecting
parameter_list|()
throws|throws
name|Throwable
block|{
name|InterruptedException
name|interrupted
init|=
operator|new
name|InterruptedException
argument_list|(
literal|"irq"
argument_list|)
decl_stmt|;
name|assertContainsInterrupted
argument_list|(
literal|true
argument_list|,
name|interrupted
argument_list|)
expr_stmt|;
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
literal|"ioe"
argument_list|)
decl_stmt|;
name|assertContainsInterrupted
argument_list|(
literal|false
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|assertContainsInterrupted
argument_list|(
literal|true
argument_list|,
name|ioe
operator|.
name|initCause
argument_list|(
name|interrupted
argument_list|)
argument_list|)
expr_stmt|;
name|assertContainsInterrupted
argument_list|(
literal|true
argument_list|,
operator|new
name|InterruptedIOException
argument_list|(
literal|"ioirq"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InterruptedIOException
operator|.
name|class
argument_list|)
DECL|method|testExtractInterrupted ()
specifier|public
name|void
name|testExtractInterrupted
parameter_list|()
throws|throws
name|Throwable
block|{
throw|throw
name|extractException
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|ExecutionException
argument_list|(
operator|new
name|AmazonClientException
argument_list|(
operator|new
name|InterruptedException
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InterruptedIOException
operator|.
name|class
argument_list|)
DECL|method|testExtractInterruptedIO ()
specifier|public
name|void
name|testExtractInterruptedIO
parameter_list|()
throws|throws
name|Throwable
block|{
throw|throw
name|extractException
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|ExecutionException
argument_list|(
operator|new
name|AmazonClientException
argument_list|(
operator|new
name|InterruptedIOException
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

