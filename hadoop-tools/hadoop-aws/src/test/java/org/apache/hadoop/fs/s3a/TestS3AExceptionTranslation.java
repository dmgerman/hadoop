begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AmazonS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test suite covering translation of AWS SDK exceptions to S3A exceptions.  */
end_comment

begin_class
DECL|class|TestS3AExceptionTranslation
specifier|public
class|class
name|TestS3AExceptionTranslation
block|{
annotation|@
name|Test
DECL|method|test301ContainsEndpoint ()
specifier|public
name|void
name|test301ContainsEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|AmazonS3Exception
name|s3Exception
init|=
name|createS3Exception
argument_list|(
literal|"wrong endpoint"
argument_list|,
literal|301
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|S3AUtils
operator|.
name|ENDPOINT_KEY
argument_list|,
literal|"bucket.s3-us-west-2.amazonaws.com"
argument_list|)
argument_list|)
decl_stmt|;
name|AWSS3IOException
name|ex
init|=
operator|(
name|AWSS3IOException
operator|)
name|verifyTranslated
argument_list|(
name|AWSS3IOException
operator|.
name|class
argument_list|,
name|s3Exception
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|301
argument_list|,
name|ex
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bucket.s3-us-west-2.amazonaws.com"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|ENDPOINT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test401isNotPermittedFound ()
specifier|public
name|void
name|test401isNotPermittedFound
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
name|AccessDeniedException
operator|.
name|class
argument_list|,
name|createS3Exception
argument_list|(
literal|401
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test403isNotPermittedFound ()
specifier|public
name|void
name|test403isNotPermittedFound
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
name|AccessDeniedException
operator|.
name|class
argument_list|,
name|createS3Exception
argument_list|(
literal|403
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test404isNotFound ()
specifier|public
name|void
name|test404isNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|createS3Exception
argument_list|(
literal|404
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test410isNotFound ()
specifier|public
name|void
name|test410isNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|createS3Exception
argument_list|(
literal|410
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test416isEOF ()
specifier|public
name|void
name|test416isEOF
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
name|createS3Exception
argument_list|(
literal|416
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenericS3Exception ()
specifier|public
name|void
name|testGenericS3Exception
parameter_list|()
throws|throws
name|Exception
block|{
comment|// S3 exception of no known type
name|AWSS3IOException
name|ex
init|=
operator|(
name|AWSS3IOException
operator|)
name|verifyTranslated
argument_list|(
name|AWSS3IOException
operator|.
name|class
argument_list|,
name|createS3Exception
argument_list|(
literal|451
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|451
argument_list|,
name|ex
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenericServiceS3Exception ()
specifier|public
name|void
name|testGenericServiceS3Exception
parameter_list|()
throws|throws
name|Exception
block|{
comment|// service exception of no known type
name|AmazonServiceException
name|ase
init|=
operator|new
name|AmazonServiceException
argument_list|(
literal|"unwind"
argument_list|)
decl_stmt|;
name|ase
operator|.
name|setStatusCode
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|AWSServiceIOException
name|ex
init|=
operator|(
name|AWSServiceIOException
operator|)
name|verifyTranslated
argument_list|(
name|AWSServiceIOException
operator|.
name|class
argument_list|,
name|ase
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|ex
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenericClientException ()
specifier|public
name|void
name|testGenericClientException
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Generic Amazon exception
name|verifyTranslated
argument_list|(
name|AWSClientIOException
operator|.
name|class
argument_list|,
operator|new
name|AmazonClientException
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createS3Exception (int code)
specifier|private
specifier|static
name|AmazonS3Exception
name|createS3Exception
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
name|createS3Exception
argument_list|(
literal|""
argument_list|,
name|code
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createS3Exception (String message, int code, Map<String, String> additionalDetails)
specifier|private
specifier|static
name|AmazonS3Exception
name|createS3Exception
parameter_list|(
name|String
name|message
parameter_list|,
name|int
name|code
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|additionalDetails
parameter_list|)
block|{
name|AmazonS3Exception
name|source
init|=
operator|new
name|AmazonS3Exception
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|source
operator|.
name|setStatusCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|source
operator|.
name|setAdditionalDetails
argument_list|(
name|additionalDetails
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
DECL|method|verifyTranslated (Class clazz, AmazonClientException exception)
specifier|private
specifier|static
name|Exception
name|verifyTranslated
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|AmazonClientException
name|exception
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|verifyExceptionClass
argument_list|(
name|clazz
argument_list|,
name|translateException
argument_list|(
literal|"test"
argument_list|,
literal|"/"
argument_list|,
name|exception
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

