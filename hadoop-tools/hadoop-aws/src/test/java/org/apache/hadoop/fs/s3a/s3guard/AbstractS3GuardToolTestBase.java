begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AbstractS3ATestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardTool
operator|.
name|SUCCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Common functionality for S3GuardTool test cases.  */
end_comment

begin_class
DECL|class|AbstractS3GuardToolTestBase
specifier|public
specifier|abstract
class|class
name|AbstractS3GuardToolTestBase
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|OWNER
specifier|protected
specifier|static
specifier|final
name|String
name|OWNER
init|=
literal|"hdfs"
decl_stmt|;
DECL|field|DYNAMODB_TABLE
specifier|protected
specifier|static
specifier|final
name|String
name|DYNAMODB_TABLE
init|=
literal|"dynamodb://ireland-team"
decl_stmt|;
DECL|field|S3A_THIS_BUCKET_DOES_NOT_EXIST
specifier|protected
specifier|static
specifier|final
name|String
name|S3A_THIS_BUCKET_DOES_NOT_EXIST
init|=
literal|"s3a://this-bucket-does-not-exist-00000000000"
decl_stmt|;
DECL|field|ms
specifier|private
name|MetadataStore
name|ms
decl_stmt|;
DECL|method|expectResult (int expected, String message, S3GuardTool tool, String... args)
specifier|protected
specifier|static
name|void
name|expectResult
parameter_list|(
name|int
name|expected
parameter_list|,
name|String
name|message
parameter_list|,
name|S3GuardTool
name|tool
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|tool
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectSuccess ( String message, S3GuardTool tool, String... args)
specifier|protected
specifier|static
name|void
name|expectSuccess
parameter_list|(
name|String
name|message
parameter_list|,
name|S3GuardTool
name|tool
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|message
argument_list|,
name|SUCCESS
argument_list|,
name|tool
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run a S3GuardTool command from a varags list.    * @param conf configuration    * @param args argument list    * @return the return code    * @throws Exception any exception    */
DECL|method|run (Configuration conf, String... args)
specifier|protected
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|S3GuardTool
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Run a S3GuardTool command from a varags list and the    * configuration returned by {@code getConfiguration()}.    * @param args argument list    * @return the return code    * @throws Exception any exception    */
DECL|method|run (String... args)
specifier|protected
name|int
name|run
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|S3GuardTool
operator|.
name|run
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Run a S3GuardTool command from a varags list, catch any raised    * ExitException and verify the status code matches that expected.    * @param status expected status code of the exception    * @param args argument list    * @throws Exception any exception    */
DECL|method|runToFailure (int status, String... args)
specifier|protected
name|void
name|runToFailure
parameter_list|(
name|int
name|status
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ExitUtil
operator|.
name|ExitException
name|ex
init|=
name|intercept
argument_list|(
name|ExitUtil
operator|.
name|ExitException
operator|.
name|class
argument_list|,
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|run
argument_list|(
name|args
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|.
name|status
operator|!=
name|status
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|getMetadataStore ()
specifier|protected
name|MetadataStore
name|getMetadataStore
parameter_list|()
block|{
return|return
name|ms
return|;
block|}
DECL|method|newMetadataStore ()
specifier|protected
specifier|abstract
name|MetadataStore
name|newMetadataStore
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|S3ATestUtils
operator|.
name|assumeS3GuardState
argument_list|(
literal|true
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|ms
operator|=
name|newMetadataStore
argument_list|()
expr_stmt|;
name|ms
operator|.
name|initialize
argument_list|(
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|ms
argument_list|)
expr_stmt|;
block|}
DECL|method|mkdirs (Path path, boolean onS3, boolean onMetadataStore)
specifier|protected
name|void
name|mkdirs
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|onS3
parameter_list|,
name|boolean
name|onMetadataStore
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|onS3
condition|)
block|{
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|onMetadataStore
condition|)
block|{
name|S3AFileStatus
name|status
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
name|path
argument_list|,
name|OWNER
argument_list|)
decl_stmt|;
name|ms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putFile (MetadataStore ms, S3AFileStatus f)
specifier|protected
specifier|static
name|void
name|putFile
parameter_list|(
name|MetadataStore
name|ms
parameter_list|,
name|S3AFileStatus
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNotNull
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|ms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|parent
init|=
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|S3AFileStatus
name|dir
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|false
argument_list|,
name|parent
argument_list|,
name|f
operator|.
name|getOwner
argument_list|()
argument_list|)
decl_stmt|;
name|ms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create file either on S3 or in metadata store.    * @param path the file path.    * @param onS3 set to true to create the file on S3.    * @param onMetadataStore set to true to create the file on the    *                        metadata store.    * @throws IOException IO problem    */
DECL|method|createFile (Path path, boolean onS3, boolean onMetadataStore)
specifier|protected
name|void
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|onS3
parameter_list|,
name|boolean
name|onMetadataStore
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|onS3
condition|)
block|{
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|onMetadataStore
condition|)
block|{
name|S3AFileStatus
name|status
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|100L
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|qualify
argument_list|(
name|path
argument_list|)
argument_list|,
literal|512L
argument_list|,
literal|"hdfs"
argument_list|)
decl_stmt|;
name|putFile
argument_list|(
name|ms
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPruneCommand (Configuration cmdConf, String...args)
specifier|private
name|void
name|testPruneCommand
parameter_list|(
name|Configuration
name|cmdConf
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|parent
init|=
name|path
argument_list|(
literal|"prune-cli"
argument_list|)
decl_stmt|;
try|try
block|{
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|S3GuardTool
operator|.
name|Prune
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|Prune
argument_list|(
name|cmdConf
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setMetadataStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"stale"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"fresh"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMetastoreListingCount
argument_list|(
name|parent
argument_list|,
literal|"Children count before pruning"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|exec
argument_list|(
name|cmd
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertMetastoreListingCount
argument_list|(
name|parent
argument_list|,
literal|"Pruned children count"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ms
operator|.
name|prune
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertMetastoreListingCount (Path parent, String message, int expected)
specifier|private
name|void
name|assertMetastoreListingCount
parameter_list|(
name|Path
name|parent
parameter_list|,
name|String
name|message
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|PathMetadata
argument_list|>
name|listing
init|=
name|ms
operator|.
name|listChildren
argument_list|(
name|parent
argument_list|)
operator|.
name|getListing
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|message
operator|+
literal|" ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|listing
argument_list|)
operator|+
literal|"]"
argument_list|,
name|expected
argument_list|,
name|listing
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPruneCommandCLI ()
specifier|public
name|void
name|testPruneCommandCLI
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testPath
init|=
name|path
argument_list|(
literal|"testPruneCommandCLI"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|testPruneCommand
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
literal|"prune"
argument_list|,
literal|"-seconds"
argument_list|,
literal|"1"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPruneCommandConf ()
specifier|public
name|void
name|testPruneCommandConf
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|Constants
operator|.
name|S3GUARD_CLI_PRUNE_AGE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|testPath
init|=
name|path
argument_list|(
literal|"testPruneCommandConf"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|testPruneCommand
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|"prune"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDestroyNoBucket ()
specifier|public
name|void
name|testDestroyNoBucket
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|run
argument_list|(
name|S3GuardTool
operator|.
name|Destroy
operator|.
name|NAME
argument_list|,
name|S3A_THIS_BUCKET_DOES_NOT_EXIST
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the test CSV file; assume() that it is not modified (i.e. we haven't    * switched to a new storage infrastructure where the bucket is no longer    * read only).    * @return test file.    */
DECL|method|getLandsatCSVFile ()
specifier|protected
name|String
name|getLandsatCSVFile
parameter_list|()
block|{
name|String
name|csvFile
init|=
name|getConfiguration
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|KEY_CSVTEST_FILE
argument_list|,
name|DEFAULT_CSVTEST_FILE
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"CSV test file is not the default"
argument_list|,
name|DEFAULT_CSVTEST_FILE
operator|.
name|equals
argument_list|(
name|csvFile
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|csvFile
return|;
block|}
comment|/**    * Execute a command, returning the buffer if the command actually completes.    * If an exception is raised the output is logged instead.    * @param cmd command    * @param buf buffer to use for tool output (not SLF4J output)    * @param args argument list    * @throws Exception on any failure    */
DECL|method|exec (S3GuardTool cmd, String...args)
specifier|public
name|String
name|exec
parameter_list|(
name|S3GuardTool
name|cmd
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|exec
argument_list|(
name|cmd
argument_list|,
name|buf
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Command {} failed: \n{}"
argument_list|,
name|cmd
argument_list|,
name|buf
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Execute a command, saving the output into the buffer.    * @param cmd command    * @param buf buffer to use for tool output (not SLF4J output)    * @param args argument list    * @throws Exception on any failure    */
DECL|method|exec (S3GuardTool cmd, ByteArrayOutputStream buf, String...args)
specifier|protected
name|void
name|exec
parameter_list|(
name|S3GuardTool
name|cmd
parameter_list|,
name|ByteArrayOutputStream
name|buf
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"exec {}"
argument_list|,
operator|(
name|Object
operator|)
name|args
argument_list|)
expr_stmt|;
name|int
name|r
init|=
literal|0
decl_stmt|;
try|try
init|(
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|buf
argument_list|)
init|)
block|{
name|r
operator|=
name|cmd
operator|.
name|run
argument_list|(
name|args
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Command "
operator|+
name|cmd
operator|+
literal|" failed\n"
operator|+
name|buf
argument_list|,
literal|0
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

