begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AbstractS3ATestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|METADATASTORE_AUTHORITATIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3GUARD_DDB_REGION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3GUARD_DDB_TABLE_CREATE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3GUARD_DDB_TABLE_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3GUARD_METASTORE_NULL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3_METADATA_STORE_IMPL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|clearBucketOption
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardTool
operator|.
name|E_BAD_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardTool
operator|.
name|INVALID_ARGUMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardTool
operator|.
name|SUCCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardToolTestHelper
operator|.
name|exec
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Common functionality for S3GuardTool test cases.  */
end_comment

begin_class
DECL|class|AbstractS3GuardToolTestBase
specifier|public
specifier|abstract
class|class
name|AbstractS3GuardToolTestBase
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|OWNER
specifier|protected
specifier|static
specifier|final
name|String
name|OWNER
init|=
literal|"hdfs"
decl_stmt|;
DECL|field|DYNAMODB_TABLE
specifier|protected
specifier|static
specifier|final
name|String
name|DYNAMODB_TABLE
init|=
literal|"ireland-team"
decl_stmt|;
DECL|field|S3A_THIS_BUCKET_DOES_NOT_EXIST
specifier|protected
specifier|static
specifier|final
name|String
name|S3A_THIS_BUCKET_DOES_NOT_EXIST
init|=
literal|"s3a://this-bucket-does-not-exist-00000000000"
decl_stmt|;
DECL|field|PRUNE_MAX_AGE_SECS
specifier|private
specifier|static
specifier|final
name|int
name|PRUNE_MAX_AGE_SECS
init|=
literal|2
decl_stmt|;
DECL|field|ms
specifier|private
name|MetadataStore
name|ms
decl_stmt|;
DECL|field|rawFs
specifier|private
name|S3AFileSystem
name|rawFs
decl_stmt|;
comment|/**    * The test timeout is increased in case previous tests have created    * many tombstone markers which now need to be purged.    * @return the test timeout.    */
annotation|@
name|Override
DECL|method|getTestTimeoutMillis ()
specifier|protected
name|int
name|getTestTimeoutMillis
parameter_list|()
block|{
return|return
name|SCALE_TEST_TIMEOUT_SECONDS
operator|*
literal|1000
return|;
block|}
DECL|method|expectResult (int expected, String message, S3GuardTool tool, String... args)
specifier|protected
specifier|static
name|void
name|expectResult
parameter_list|(
name|int
name|expected
parameter_list|,
name|String
name|message
parameter_list|,
name|S3GuardTool
name|tool
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|tool
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expect a command to succeed.    * @param message any extra text to include in the assertion error message    * @param tool tool to run    * @param args arguments to the command    * @return the output of any successful run    * @throws Exception failure    */
DECL|method|expectSuccess ( String message, S3GuardTool tool, String... args)
specifier|public
specifier|static
name|String
name|expectSuccess
parameter_list|(
name|String
name|message
parameter_list|,
name|S3GuardTool
name|tool
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|exec
argument_list|(
name|SUCCESS
argument_list|,
name|message
argument_list|,
name|tool
argument_list|,
name|buf
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Run a S3GuardTool command from a varags list.    * @param conf configuration    * @param args argument list    * @return the return code    * @throws Exception any exception    */
DECL|method|run (Configuration conf, String... args)
specifier|protected
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|S3GuardTool
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Run a S3GuardTool command from a varags list and the    * configuration returned by {@code getConfiguration()}.    * @param args argument list    * @return the return code    * @throws Exception any exception    */
DECL|method|run (String... args)
specifier|protected
name|int
name|run
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|S3GuardTool
operator|.
name|run
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Run a S3GuardTool command from a varags list, catch any raised    * ExitException and verify the status code matches that expected.    * @param status expected status code of the exception    * @param args argument list    * @throws Exception any exception    */
DECL|method|runToFailure (int status, String... args)
specifier|protected
name|void
name|runToFailure
parameter_list|(
name|int
name|status
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ExitUtil
operator|.
name|ExitException
name|ex
init|=
name|intercept
argument_list|(
name|ExitUtil
operator|.
name|ExitException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|.
name|status
operator|!=
name|status
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|getMetadataStore ()
specifier|protected
name|MetadataStore
name|getMetadataStore
parameter_list|()
block|{
return|return
name|ms
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|S3ATestUtils
operator|.
name|assumeS3GuardState
argument_list|(
literal|true
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|ms
operator|=
name|fs
operator|.
name|getMetadataStore
argument_list|()
expr_stmt|;
comment|// Also create a "raw" fs without any MetadataStore configured
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|clearBucketOption
argument_list|(
name|conf
argument_list|,
name|fs
operator|.
name|getBucket
argument_list|()
argument_list|,
name|S3_METADATA_STORE_IMPL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3_METADATA_STORE_IMPL
argument_list|,
name|S3GUARD_METASTORE_NULL
argument_list|)
expr_stmt|;
name|URI
name|fsUri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|S3AUtils
operator|.
name|setBucketOption
argument_list|(
name|conf
argument_list|,
name|fsUri
operator|.
name|getHost
argument_list|()
argument_list|,
name|METADATASTORE_AUTHORITATIVE
argument_list|,
name|S3GUARD_METASTORE_NULL
argument_list|)
expr_stmt|;
name|rawFs
operator|=
operator|(
name|S3AFileSystem
operator|)
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|fsUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|ms
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|rawFs
argument_list|)
expr_stmt|;
block|}
DECL|method|mkdirs (Path path, boolean onS3, boolean onMetadataStore)
specifier|protected
name|void
name|mkdirs
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|onS3
parameter_list|,
name|boolean
name|onMetadataStore
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|onS3
operator|||
name|onMetadataStore
argument_list|)
expr_stmt|;
comment|// getFileSystem() returns an fs with MetadataStore configured
name|S3AFileSystem
name|fs
init|=
name|onMetadataStore
condition|?
name|getFileSystem
argument_list|()
else|:
name|rawFs
decl_stmt|;
if|if
condition|(
name|onS3
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|onMetadataStore
condition|)
block|{
name|S3AFileStatus
name|status
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
name|path
argument_list|,
name|OWNER
argument_list|)
decl_stmt|;
name|ms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|status
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putFile (MetadataStore ms, S3AFileStatus f)
specifier|protected
specifier|static
name|void
name|putFile
parameter_list|(
name|MetadataStore
name|ms
parameter_list|,
name|S3AFileStatus
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNotNull
argument_list|(
name|f
argument_list|)
expr_stmt|;
try|try
init|(
name|BulkOperationState
name|bulkWrite
init|=
name|ms
operator|.
name|initiateBulkWrite
argument_list|(
name|BulkOperationState
operator|.
name|OperationType
operator|.
name|Put
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
init|)
block|{
name|ms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|f
argument_list|)
argument_list|,
name|bulkWrite
argument_list|)
expr_stmt|;
name|Path
name|parent
init|=
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|S3AFileStatus
name|dir
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|false
argument_list|,
name|parent
argument_list|,
name|f
operator|.
name|getOwner
argument_list|()
argument_list|)
decl_stmt|;
name|ms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|dir
argument_list|)
argument_list|,
name|bulkWrite
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create file either on S3 or in metadata store.    * @param path the file path.    * @param onS3 set to true to create the file on S3.    * @param onMetadataStore set to true to create the file on the    *                        metadata store.    * @throws IOException IO problem    */
DECL|method|createFile (Path path, boolean onS3, boolean onMetadataStore)
specifier|protected
name|void
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|onS3
parameter_list|,
name|boolean
name|onMetadataStore
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|onS3
operator|||
name|onMetadataStore
argument_list|)
expr_stmt|;
comment|// getFileSystem() returns an fs with MetadataStore configured
name|S3AFileSystem
name|fs
init|=
name|onMetadataStore
condition|?
name|getFileSystem
argument_list|()
else|:
name|rawFs
decl_stmt|;
if|if
condition|(
name|onS3
condition|)
block|{
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|onMetadataStore
condition|)
block|{
name|S3AFileStatus
name|status
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|100L
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|fs
operator|.
name|qualify
argument_list|(
name|path
argument_list|)
argument_list|,
literal|512L
argument_list|,
literal|"hdfs"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|putFile
argument_list|(
name|ms
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Attempt to test prune() with sleep() without having flaky tests    * when things run slowly. Test is basically:    * 1. Set max path age to X seconds    * 2. Create some files (which writes entries to MetadataStore)    * 3. Sleep X+2 seconds (all files from above are now "stale")    * 4. Create some other files (these are "fresh").    * 5. Run prune on MetadataStore.    * 6. Assert that only files that were created before the sleep() were pruned.    *    * Problem is: #6 can fail if X seconds elapse between steps 4 and 5, since    * the newer files also become stale and get pruned.  This is easy to    * reproduce by running all integration tests in parallel with a ton of    * threads, or anything else that slows down execution a lot.    *    * Solution: Keep track of time elapsed between #4 and #5, and if it    * exceeds X, just print a warn() message instead of failing.    *    * @param cmdConf configuration for command    * @param parent path    * @param args command args    * @throws Exception    */
DECL|method|testPruneCommand (Configuration cmdConf, Path parent, String...args)
specifier|private
name|void
name|testPruneCommand
parameter_list|(
name|Configuration
name|cmdConf
parameter_list|,
name|Path
name|parent
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|keepParent
init|=
name|path
argument_list|(
literal|"prune-cli-keep"
argument_list|)
decl_stmt|;
name|StopWatch
name|timer
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
specifier|final
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|S3GuardTool
operator|.
name|Prune
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|Prune
argument_list|(
name|cmdConf
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setMetadataStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|keepParent
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"stale"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|keepParent
argument_list|,
literal|"stale-to-keep"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|PRUNE_MAX_AGE_SECS
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"fresh"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMetastoreListingCount
argument_list|(
name|parent
argument_list|,
literal|"Children count before pruning"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|exec
argument_list|(
name|cmd
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|long
name|msecElapsed
init|=
name|timer
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|msecElapsed
operator|>=
name|PRUNE_MAX_AGE_SECS
operator|*
literal|1000
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping an assertion: Test running too slowly ({} msec)"
argument_list|,
name|msecElapsed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertMetastoreListingCount
argument_list|(
name|parent
argument_list|,
literal|"Pruned children count remaining"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertMetastoreListingCount
argument_list|(
name|keepParent
argument_list|,
literal|"This child should have been kept (prefix restriction)."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|keepParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ms
operator|.
name|prune
argument_list|(
name|MetadataStore
operator|.
name|PruneMode
operator|.
name|ALL_BY_MODTIME
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|fs
operator|.
name|pathToKey
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|prune
argument_list|(
name|MetadataStore
operator|.
name|PruneMode
operator|.
name|ALL_BY_MODTIME
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|fs
operator|.
name|pathToKey
argument_list|(
name|keepParent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertMetastoreListingCount (Path parent, String message, int expected)
specifier|private
name|void
name|assertMetastoreListingCount
parameter_list|(
name|Path
name|parent
parameter_list|,
name|String
name|message
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|PathMetadata
argument_list|>
name|listing
init|=
name|ms
operator|.
name|listChildren
argument_list|(
name|parent
argument_list|)
operator|.
name|getListing
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|message
operator|+
literal|" ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|listing
argument_list|)
operator|+
literal|"]"
argument_list|,
name|expected
argument_list|,
name|listing
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPruneCommandCLI ()
specifier|public
name|void
name|testPruneCommandCLI
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testPath
init|=
name|path
argument_list|(
literal|"testPruneCommandCLI"
argument_list|)
decl_stmt|;
name|testPruneCommand
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|testPath
argument_list|,
literal|"prune"
argument_list|,
literal|"-seconds"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|PRUNE_MAX_AGE_SECS
argument_list|)
argument_list|,
name|testPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPruneCommandTombstones ()
specifier|public
name|void
name|testPruneCommandTombstones
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testPath
init|=
name|path
argument_list|(
literal|"testPruneCommandTombstones"
argument_list|)
decl_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|S3GuardTool
operator|.
name|Prune
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|Prune
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setMetadataStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|exec
argument_list|(
name|cmd
argument_list|,
literal|"prune"
argument_list|,
literal|"-"
operator|+
name|S3GuardTool
operator|.
name|Prune
operator|.
name|TOMBSTONE
argument_list|,
literal|"-seconds"
argument_list|,
literal|"0"
argument_list|,
name|testPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Command did not create a filesystem"
argument_list|,
name|cmd
operator|.
name|getFilesystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * HADOOP-16457. In certain cases prune doesn't create an FS.    */
annotation|@
name|Test
DECL|method|testMaybeInitFilesystem ()
specifier|public
name|void
name|testMaybeInitFilesystem
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testPath
init|=
name|path
argument_list|(
literal|"maybeInitFilesystem"
argument_list|)
decl_stmt|;
name|S3GuardTool
operator|.
name|Prune
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|Prune
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|maybeInitFilesystem
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Command did not create a filesystem"
argument_list|,
name|cmd
operator|.
name|getFilesystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * HADOOP-16457. In certain cases prune doesn't create an FS.    */
annotation|@
name|Test
DECL|method|testMaybeInitFilesystemNoPath ()
specifier|public
name|void
name|testMaybeInitFilesystemNoPath
parameter_list|()
throws|throws
name|Exception
block|{
name|S3GuardTool
operator|.
name|Prune
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|Prune
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|maybeInitFilesystem
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Command should not have created a filesystem"
argument_list|,
name|cmd
operator|.
name|getFilesystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPruneCommandNoPath ()
specifier|public
name|void
name|testPruneCommandNoPath
parameter_list|()
throws|throws
name|Exception
block|{
name|runToFailure
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|S3GuardTool
operator|.
name|Prune
operator|.
name|NAME
argument_list|,
literal|"-"
operator|+
name|S3GuardTool
operator|.
name|Prune
operator|.
name|TOMBSTONE
argument_list|,
literal|"-seconds"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPruneCommandConf ()
specifier|public
name|void
name|testPruneCommandConf
parameter_list|()
throws|throws
name|Exception
block|{
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|Constants
operator|.
name|S3GUARD_CLI_PRUNE_AGE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|PRUNE_MAX_AGE_SECS
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|testPath
init|=
name|path
argument_list|(
literal|"testPruneCommandConf"
argument_list|)
decl_stmt|;
name|testPruneCommand
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|testPath
argument_list|,
literal|"prune"
argument_list|,
name|testPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetCapacityFailFastOnReadWriteOfZero ()
specifier|public
name|void
name|testSetCapacityFailFastOnReadWriteOfZero
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|bucket
init|=
name|getFileSystem
argument_list|()
operator|.
name|getBucket
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|S3GuardTool
operator|.
name|SetCapacity
name|cmdR
init|=
operator|new
name|S3GuardTool
operator|.
name|SetCapacity
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|argsR
init|=
operator|new
name|String
index|[]
block|{
name|cmdR
operator|.
name|getName
argument_list|()
block|,
literal|"-read"
block|,
literal|"0"
block|,
literal|"s3a://"
operator|+
name|bucket
block|}
decl_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|SetCapacity
operator|.
name|READ_CAP_INVALID
argument_list|,
parameter_list|()
lambda|->
name|cmdR
operator|.
name|run
argument_list|(
name|argsR
argument_list|)
argument_list|)
expr_stmt|;
name|S3GuardTool
operator|.
name|SetCapacity
name|cmdW
init|=
operator|new
name|S3GuardTool
operator|.
name|SetCapacity
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|argsW
init|=
operator|new
name|String
index|[]
block|{
name|cmdW
operator|.
name|getName
argument_list|()
block|,
literal|"-write"
block|,
literal|"0"
block|,
literal|"s3a://"
operator|+
name|bucket
block|}
decl_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|SetCapacity
operator|.
name|WRITE_CAP_INVALID
argument_list|,
parameter_list|()
lambda|->
name|cmdW
operator|.
name|run
argument_list|(
name|argsW
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBucketInfoUnguarded ()
specifier|public
name|void
name|testBucketInfoUnguarded
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|URI
name|fsUri
init|=
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|bucket
init|=
name|fsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|clearBucketOption
argument_list|(
name|conf
argument_list|,
name|bucket
argument_list|,
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|)
expr_stmt|;
name|clearBucketOption
argument_list|(
name|conf
argument_list|,
name|bucket
argument_list|,
name|S3_METADATA_STORE_IMPL
argument_list|)
expr_stmt|;
name|clearBucketOption
argument_list|(
name|conf
argument_list|,
name|bucket
argument_list|,
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3_METADATA_STORE_IMPL
argument_list|,
name|S3GUARD_METASTORE_NULL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
literal|"testBucketInfoUnguarded-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
comment|// run a bucket info command and look for
comment|// confirmation that it got the output from DDB diags
name|S3GuardTool
operator|.
name|BucketInfo
name|infocmd
init|=
operator|new
name|S3GuardTool
operator|.
name|BucketInfo
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|info
init|=
name|exec
argument_list|(
name|infocmd
argument_list|,
name|S3GuardTool
operator|.
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"-"
operator|+
name|S3GuardTool
operator|.
name|BucketInfo
operator|.
name|UNGUARDED_FLAG
argument_list|,
name|fsUri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Output should contain information about S3A client "
operator|+
name|info
argument_list|,
name|info
operator|.
name|contains
argument_list|(
literal|"S3A Client"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetCapacityFailFastIfNotGuarded ()
specifier|public
name|void
name|testSetCapacityFailFastIfNotGuarded
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|bindToNonexistentTable
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|bucket
init|=
name|rawFs
operator|.
name|getBucket
argument_list|()
decl_stmt|;
name|clearBucketOption
argument_list|(
name|conf
argument_list|,
name|bucket
argument_list|,
name|S3_METADATA_STORE_IMPL
argument_list|)
expr_stmt|;
name|clearBucketOption
argument_list|(
name|conf
argument_list|,
name|bucket
argument_list|,
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|)
expr_stmt|;
name|clearBucketOption
argument_list|(
name|conf
argument_list|,
name|bucket
argument_list|,
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3_METADATA_STORE_IMPL
argument_list|,
name|S3GUARD_METASTORE_NULL
argument_list|)
expr_stmt|;
name|S3GuardTool
operator|.
name|SetCapacity
name|cmdR
init|=
operator|new
name|S3GuardTool
operator|.
name|SetCapacity
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|argsR
init|=
operator|new
name|String
index|[]
block|{
name|cmdR
operator|.
name|getName
argument_list|()
block|,
literal|"s3a://"
operator|+
name|getFileSystem
argument_list|()
operator|.
name|getBucket
argument_list|()
block|}
decl_stmt|;
name|intercept
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
literal|"unguarded"
argument_list|,
parameter_list|()
lambda|->
name|cmdR
operator|.
name|run
argument_list|(
name|argsR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Binds the configuration to a nonexistent table.    * @param conf    */
DECL|method|bindToNonexistentTable (final Configuration conf)
specifier|private
name|void
name|bindToNonexistentTable
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make an S3GuardTool of the specific subtype with binded configuration    * to a nonexistent table.    * @param tool    */
DECL|method|makeBindedTool (Class<? extends S3GuardTool> tool)
specifier|private
name|S3GuardTool
name|makeBindedTool
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|S3GuardTool
argument_list|>
name|tool
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// set a table as a safety check in case the test goes wrong
comment|// and deletes it.
name|bindToNonexistentTable
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|tool
operator|.
name|getDeclaredConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testToolsNoBucket ()
specifier|public
name|void
name|testToolsNoBucket
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|S3GuardTool
argument_list|>
argument_list|>
name|tools
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|S3GuardTool
operator|.
name|Destroy
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|BucketInfo
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|Diff
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|Import
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|Prune
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|SetCapacity
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|Uploads
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|S3GuardTool
argument_list|>
name|tool
range|:
name|tools
control|)
block|{
name|S3GuardTool
name|cmdR
init|=
name|makeBindedTool
argument_list|(
name|tool
argument_list|)
decl_stmt|;
name|describe
argument_list|(
literal|"Calling "
operator|+
name|cmdR
operator|.
name|getName
argument_list|()
operator|+
literal|" on a bucket that does not exist."
argument_list|)
expr_stmt|;
name|String
index|[]
name|argsR
init|=
operator|new
name|String
index|[]
block|{
name|cmdR
operator|.
name|getName
argument_list|()
block|,
name|S3A_THIS_BUCKET_DOES_NOT_EXIST
block|}
decl_stmt|;
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|cmdR
operator|.
name|run
argument_list|(
name|argsR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testToolsNoArgsForBucketAndDDBTable ()
specifier|public
name|void
name|testToolsNoArgsForBucketAndDDBTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|S3GuardTool
argument_list|>
argument_list|>
name|tools
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|S3GuardTool
operator|.
name|Destroy
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|Init
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|S3GuardTool
argument_list|>
name|tool
range|:
name|tools
control|)
block|{
name|S3GuardTool
name|cmdR
init|=
name|makeBindedTool
argument_list|(
name|tool
argument_list|)
decl_stmt|;
name|describe
argument_list|(
literal|"Calling "
operator|+
name|cmdR
operator|.
name|getName
argument_list|()
operator|+
literal|" without any arguments."
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|ExitUtil
operator|.
name|ExitException
operator|.
name|class
argument_list|,
literal|"S3 bucket url or DDB table name have to be provided explicitly"
argument_list|,
parameter_list|()
lambda|->
name|cmdR
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
name|tool
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testToolsNoArgsForBucket ()
specifier|public
name|void
name|testToolsNoArgsForBucket
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|S3GuardTool
argument_list|>
argument_list|>
name|tools
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|S3GuardTool
operator|.
name|BucketInfo
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|Diff
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|Import
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|Prune
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|SetCapacity
operator|.
name|class
argument_list|,
name|S3GuardTool
operator|.
name|Uploads
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|S3GuardTool
argument_list|>
name|tool
range|:
name|tools
control|)
block|{
name|S3GuardTool
name|cmdR
init|=
name|makeBindedTool
argument_list|(
name|tool
argument_list|)
decl_stmt|;
name|describe
argument_list|(
literal|"Calling "
operator|+
name|cmdR
operator|.
name|getName
argument_list|()
operator|+
literal|" without any arguments."
argument_list|)
expr_stmt|;
name|assertExitCode
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|intercept
argument_list|(
name|ExitUtil
operator|.
name|ExitException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|cmdR
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
name|tool
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProbeForMagic ()
specifier|public
name|void
name|testProbeForMagic
parameter_list|()
throws|throws
name|Throwable
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|S3GuardTool
operator|.
name|BucketInfo
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|BucketInfo
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|hasCapability
argument_list|(
name|CommitConstants
operator|.
name|STORE_CAPABILITY_MAGIC_COMMITTER
argument_list|)
condition|)
block|{
comment|// if the FS is magic, expect this to work
name|exec
argument_list|(
name|cmd
argument_list|,
name|S3GuardTool
operator|.
name|BucketInfo
operator|.
name|MAGIC_FLAG
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if the FS isn't magic, expect the probe to fail
name|assertExitCode
argument_list|(
name|E_BAD_STATE
argument_list|,
name|intercept
argument_list|(
name|ExitUtil
operator|.
name|ExitException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|exec
argument_list|(
name|cmd
argument_list|,
name|S3GuardTool
operator|.
name|BucketInfo
operator|.
name|MAGIC_FLAG
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assert that an exit exception had a specific error code.    * @param expectedErrorCode expected code.    * @param e exit exception    * @throws AssertionError with the exit exception nested inside    */
DECL|method|assertExitCode (final int expectedErrorCode, final ExitUtil.ExitException e)
specifier|protected
name|void
name|assertExitCode
parameter_list|(
specifier|final
name|int
name|expectedErrorCode
parameter_list|,
specifier|final
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getExitCode
argument_list|()
operator|!=
name|expectedErrorCode
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected error code "
operator|+
name|expectedErrorCode
operator|+
literal|" in "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDestroyFailsIfNoBucketNameOrDDBTableSet ()
specifier|public
name|void
name|testDestroyFailsIfNoBucketNameOrDDBTableSet
parameter_list|()
throws|throws
name|Exception
block|{
name|intercept
argument_list|(
name|ExitUtil
operator|.
name|ExitException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|run
argument_list|(
name|S3GuardTool
operator|.
name|Destroy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitFailsIfNoBucketNameOrDDBTableSet ()
specifier|public
name|void
name|testInitFailsIfNoBucketNameOrDDBTableSet
parameter_list|()
throws|throws
name|Exception
block|{
name|intercept
argument_list|(
name|ExitUtil
operator|.
name|ExitException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|run
argument_list|(
name|S3GuardTool
operator|.
name|Init
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testDiffCommand ()
name|testDiffCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|ms
operator|=
name|getMetadataStore
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|filesOnS3
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// files on S3.
name|Set
argument_list|<
name|Path
argument_list|>
name|filesOnMS
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// files on metadata store.
name|Path
name|testPath
init|=
name|path
argument_list|(
literal|"test-diff"
argument_list|)
decl_stmt|;
comment|// clean up through the store and behind it.
name|fs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rawFs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|msOnlyPath
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"ms_only"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|msOnlyPath
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|filesOnMS
operator|.
name|add
argument_list|(
name|msOnlyPath
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|msOnlyPath
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"file-%d"
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|filesOnMS
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|Path
name|s3OnlyPath
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"s3_only"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|s3OnlyPath
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|filesOnS3
operator|.
name|add
argument_list|(
name|s3OnlyPath
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|s3OnlyPath
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"file-%d"
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|filesOnS3
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|S3GuardTool
operator|.
name|Diff
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|Diff
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|String
name|table
init|=
literal|"dynamo://"
operator|+
name|getTestTableName
argument_list|(
name|DYNAMODB_TABLE
argument_list|)
decl_stmt|;
name|exec
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
name|cmd
argument_list|,
name|buf
argument_list|,
literal|"diff"
argument_list|,
literal|"-meta"
argument_list|,
name|table
argument_list|,
name|testPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|actualOnS3
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|actualOnMS
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|duplicates
init|=
literal|false
decl_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|fields
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|line
operator|+
literal|"] does not have enough fields"
argument_list|,
literal|4
argument_list|,
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|where
init|=
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|fields
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|S3GuardTool
operator|.
name|Diff
operator|.
name|S3_PREFIX
operator|.
name|equals
argument_list|(
name|where
argument_list|)
condition|)
block|{
name|duplicates
operator|=
name|duplicates
operator|||
name|actualOnS3
operator|.
name|contains
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|actualOnS3
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|S3GuardTool
operator|.
name|Diff
operator|.
name|MS_PREFIX
operator|.
name|equals
argument_list|(
name|where
argument_list|)
condition|)
block|{
name|duplicates
operator|=
name|duplicates
operator|||
name|actualOnMS
operator|.
name|contains
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|actualOnMS
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unknown prefix: "
operator|+
name|where
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|actualOut
init|=
name|buf
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched metadata store outputs: "
operator|+
name|actualOut
argument_list|,
name|filesOnMS
argument_list|,
name|actualOnMS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched s3 outputs: "
operator|+
name|actualOut
argument_list|,
name|filesOnS3
argument_list|,
name|actualOnS3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Diff contained duplicates"
argument_list|,
name|duplicates
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

