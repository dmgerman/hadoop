begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Something to track throttles in DynamoDB metastores.  * The constructor sets the counters to the current count in the  * DDB table; a call to {@link #reset()} will set it to the latest values.  * The {@link #probe()} will pick up the latest values to compare them with  * the original counts.  *<p>  * The toString value logs the state.  *<p>  * This class was originally part of ITestDynamoDBMetadataStoreScale;  * it was converted to a toplevel class for broader use.  */
end_comment

begin_class
DECL|class|ThrottleTracker
class|class
name|ThrottleTracker
block|{
DECL|field|ddbms
specifier|private
specifier|final
name|DynamoDBMetadataStore
name|ddbms
decl_stmt|;
DECL|field|writeThrottleEventOrig
specifier|private
name|long
name|writeThrottleEventOrig
init|=
literal|0
decl_stmt|;
DECL|field|readThrottleEventOrig
specifier|private
name|long
name|readThrottleEventOrig
init|=
literal|0
decl_stmt|;
DECL|field|batchWriteThrottleCountOrig
specifier|private
name|long
name|batchWriteThrottleCountOrig
init|=
literal|0
decl_stmt|;
DECL|field|readThrottles
specifier|private
name|long
name|readThrottles
decl_stmt|;
DECL|field|writeThrottles
specifier|private
name|long
name|writeThrottles
decl_stmt|;
DECL|field|batchThrottles
specifier|private
name|long
name|batchThrottles
decl_stmt|;
DECL|method|ThrottleTracker (final DynamoDBMetadataStore ddbms)
name|ThrottleTracker
parameter_list|(
specifier|final
name|DynamoDBMetadataStore
name|ddbms
parameter_list|)
block|{
name|this
operator|.
name|ddbms
operator|=
name|ddbms
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * Reset the counters.    */
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|writeThrottleEventOrig
operator|=
name|ddbms
operator|.
name|getWriteThrottleEventCount
argument_list|()
expr_stmt|;
name|readThrottleEventOrig
operator|=
name|ddbms
operator|.
name|getReadThrottleEventCount
argument_list|()
expr_stmt|;
name|batchWriteThrottleCountOrig
operator|=
name|ddbms
operator|.
name|getBatchWriteCapacityExceededCount
argument_list|()
expr_stmt|;
block|}
comment|/**    * Update the latest throttle count; synchronized.    * @return true if throttling has been detected.    */
DECL|method|probe ()
specifier|public
specifier|synchronized
name|boolean
name|probe
parameter_list|()
block|{
name|setReadThrottles
argument_list|(
name|ddbms
operator|.
name|getReadThrottleEventCount
argument_list|()
operator|-
name|readThrottleEventOrig
argument_list|)
expr_stmt|;
name|setWriteThrottles
argument_list|(
name|ddbms
operator|.
name|getWriteThrottleEventCount
argument_list|()
operator|-
name|writeThrottleEventOrig
argument_list|)
expr_stmt|;
name|setBatchThrottles
argument_list|(
name|ddbms
operator|.
name|getBatchWriteCapacityExceededCount
argument_list|()
operator|-
name|batchWriteThrottleCountOrig
argument_list|)
expr_stmt|;
return|return
name|isThrottlingDetected
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Tracker with read throttle events = %d;"
operator|+
literal|" write events = %d;"
operator|+
literal|" batch throttles = %d"
argument_list|,
name|getReadThrottles
argument_list|()
argument_list|,
name|getWriteThrottles
argument_list|()
argument_list|,
name|getBatchThrottles
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Assert that throttling has been detected.    */
DECL|method|assertThrottlingDetected ()
specifier|public
name|void
name|assertThrottlingDetected
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No throttling detected in "
operator|+
name|this
operator|+
literal|" against "
operator|+
name|ddbms
operator|.
name|toString
argument_list|()
argument_list|,
name|isThrottlingDetected
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Has there been any throttling on an operation?    * @return true iff read, write or batch operations were throttled.    */
DECL|method|isThrottlingDetected ()
specifier|public
name|boolean
name|isThrottlingDetected
parameter_list|()
block|{
return|return
name|getReadThrottles
argument_list|()
operator|>
literal|0
operator|||
name|getWriteThrottles
argument_list|()
operator|>
literal|0
operator|||
name|getBatchThrottles
argument_list|()
operator|>
literal|0
return|;
block|}
DECL|method|getReadThrottles ()
specifier|public
name|long
name|getReadThrottles
parameter_list|()
block|{
return|return
name|readThrottles
return|;
block|}
DECL|method|setReadThrottles (long readThrottles)
specifier|public
name|void
name|setReadThrottles
parameter_list|(
name|long
name|readThrottles
parameter_list|)
block|{
name|this
operator|.
name|readThrottles
operator|=
name|readThrottles
expr_stmt|;
block|}
DECL|method|getWriteThrottles ()
specifier|public
name|long
name|getWriteThrottles
parameter_list|()
block|{
return|return
name|writeThrottles
return|;
block|}
DECL|method|setWriteThrottles (long writeThrottles)
specifier|public
name|void
name|setWriteThrottles
parameter_list|(
name|long
name|writeThrottles
parameter_list|)
block|{
name|this
operator|.
name|writeThrottles
operator|=
name|writeThrottles
expr_stmt|;
block|}
DECL|method|getBatchThrottles ()
specifier|public
name|long
name|getBatchThrottles
parameter_list|()
block|{
return|return
name|batchThrottles
return|;
block|}
DECL|method|setBatchThrottles (long batchThrottles)
specifier|public
name|void
name|setBatchThrottles
parameter_list|(
name|long
name|batchThrottles
parameter_list|)
block|{
name|this
operator|.
name|batchThrottles
operator|=
name|batchThrottles
expr_stmt|;
block|}
block|}
end_class

end_unit

