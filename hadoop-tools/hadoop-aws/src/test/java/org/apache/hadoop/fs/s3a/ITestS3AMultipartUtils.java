begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|MultipartUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tests for {@link MultipartUtils}.  */
end_comment

begin_class
DECL|class|ITestS3AMultipartUtils
specifier|public
class|class
name|ITestS3AMultipartUtils
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|UPLOAD_LEN
specifier|private
specifier|static
specifier|final
name|int
name|UPLOAD_LEN
init|=
literal|1024
decl_stmt|;
DECL|field|PART_FILENAME_BASE
specifier|private
specifier|static
specifier|final
name|String
name|PART_FILENAME_BASE
init|=
literal|"pending-part"
decl_stmt|;
DECL|field|LIST_BATCH_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|LIST_BATCH_SIZE
init|=
literal|2
decl_stmt|;
DECL|field|NUM_KEYS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_KEYS
init|=
literal|5
decl_stmt|;
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Forces listings to come back in multiple batches to test that part of
comment|// the iterators.
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|MAX_PAGING_KEYS
argument_list|,
name|LIST_BATCH_SIZE
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Main test case for upload part listing and iterator paging.    * @throws Exception on failure.    */
annotation|@
name|Test
DECL|method|testListMultipartUploads ()
specifier|public
name|void
name|testListMultipartUploads
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|MultipartTestUtils
operator|.
name|IdKey
argument_list|>
name|keySet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// 1. Create NUM_KEYS pending upload parts
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_KEYS
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|filePath
init|=
name|getPartFilename
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|fs
operator|.
name|pathToKey
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|describe
argument_list|(
literal|"creating upload part with key %s"
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// create a multipart upload
name|MultipartTestUtils
operator|.
name|IdKey
name|idKey
init|=
name|MultipartTestUtils
operator|.
name|createPartUpload
argument_list|(
name|fs
argument_list|,
name|key
argument_list|,
name|UPLOAD_LEN
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|keySet
operator|.
name|add
argument_list|(
name|idKey
argument_list|)
expr_stmt|;
block|}
comment|// 2. Verify all uploads are found listing by prefix
name|describe
argument_list|(
literal|"Verifying upload list by prefix"
argument_list|)
expr_stmt|;
name|MultipartUtils
operator|.
name|UploadIterator
name|uploads
init|=
name|fs
operator|.
name|listUploads
argument_list|(
name|getPartPrefix
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|assertUploadsPresent
argument_list|(
name|uploads
argument_list|,
name|keySet
argument_list|)
expr_stmt|;
comment|// 3. Verify all uploads are found listing without prefix
name|describe
argument_list|(
literal|"Verifying list all uploads"
argument_list|)
expr_stmt|;
name|uploads
operator|=
name|fs
operator|.
name|listUploads
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertUploadsPresent
argument_list|(
name|uploads
argument_list|,
name|keySet
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// 4. Delete all uploads we created
name|MultipartTestUtils
operator|.
name|cleanupParts
argument_list|(
name|fs
argument_list|,
name|keySet
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assert that all provided multipart uploads are contained in the upload    * iterator's results.    * @param list upload iterator    * @param ourUploads set up uploads that should be present    * @throws IOException on I/O error    */
DECL|method|assertUploadsPresent (MultipartUtils.UploadIterator list, Set<MultipartTestUtils.IdKey> ourUploads)
specifier|private
name|void
name|assertUploadsPresent
parameter_list|(
name|MultipartUtils
operator|.
name|UploadIterator
name|list
parameter_list|,
name|Set
argument_list|<
name|MultipartTestUtils
operator|.
name|IdKey
argument_list|>
name|ourUploads
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Don't modify passed-in set, use copy.
name|Set
argument_list|<
name|MultipartTestUtils
operator|.
name|IdKey
argument_list|>
name|uploads
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|ourUploads
argument_list|)
decl_stmt|;
while|while
condition|(
name|list
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MultipartTestUtils
operator|.
name|IdKey
name|listing
init|=
name|toIdKey
argument_list|(
name|list
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uploads
operator|.
name|contains
argument_list|(
name|listing
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Matched: {},{}"
argument_list|,
name|listing
operator|.
name|getKey
argument_list|()
argument_list|,
name|listing
operator|.
name|getUploadId
argument_list|()
argument_list|)
expr_stmt|;
name|uploads
operator|.
name|remove
argument_list|(
name|listing
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not our upload {},{}"
argument_list|,
name|listing
operator|.
name|getKey
argument_list|()
argument_list|,
name|listing
operator|.
name|getUploadId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Not all our uploads were listed"
argument_list|,
name|uploads
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|toIdKey (MultipartUpload mu)
specifier|private
name|MultipartTestUtils
operator|.
name|IdKey
name|toIdKey
parameter_list|(
name|MultipartUpload
name|mu
parameter_list|)
block|{
return|return
operator|new
name|MultipartTestUtils
operator|.
name|IdKey
argument_list|(
name|mu
operator|.
name|getKey
argument_list|()
argument_list|,
name|mu
operator|.
name|getUploadId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getPartFilename (int index)
specifier|private
name|Path
name|getPartFilename
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|path
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s-%d"
argument_list|,
name|PART_FILENAME_BASE
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getPartPrefix (S3AFileSystem fs)
specifier|private
name|String
name|getPartPrefix
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|pathToKey
argument_list|(
name|path
argument_list|(
literal|"blah"
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

