begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DurationInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|applyLocatedFiles
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Some extra assertions for tests.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ExtraAssertions
specifier|public
specifier|final
class|class
name|ExtraAssertions
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExtraAssertions
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ExtraAssertions ()
specifier|private
name|ExtraAssertions
parameter_list|()
block|{   }
comment|/**    * Assert that the number of files in a destination matches that expected.    * @param message text to use in the message    * @param fs filesystem    * @param path path to list (recursively)    * @param expected expected count    * @throws IOException IO problem    */
DECL|method|assertFileCount (final String message, final FileSystem fs, final Path path, final long expected)
specifier|public
specifier|static
name|void
name|assertFileCount
parameter_list|(
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|long
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DurationInfo
name|ignored
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|false
argument_list|,
literal|"Counting files in %s"
argument_list|,
name|path
argument_list|)
init|)
block|{
name|applyLocatedFiles
argument_list|(
name|fs
operator|.
name|listFiles
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
parameter_list|(
name|status
parameter_list|)
lambda|->
name|files
operator|.
name|add
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|actual
init|=
name|files
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|actual
operator|!=
name|expected
condition|)
block|{
name|String
name|ls
init|=
name|files
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|message
operator|+
literal|": expected "
operator|+
name|expected
operator|+
literal|" files in "
operator|+
name|path
operator|+
literal|" but got "
operator|+
name|actual
operator|+
literal|"\n"
operator|+
name|ls
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assert that a string contains a piece of text.    * @param text text to can.    * @param contained text to look for.    */
DECL|method|assertTextContains (String text, String contained)
specifier|public
specifier|static
name|void
name|assertTextContains
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|contained
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"string \""
operator|+
name|contained
operator|+
literal|"\" not found in \""
operator|+
name|text
operator|+
literal|"\""
argument_list|,
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|contains
argument_list|(
name|contained
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the condition is met, throw an AssertionError with the message    * and any nested exception.    * @param condition condition    * @param message text to use in the exception    * @param cause a (possibly null) throwable to init the cause with    * @throws AssertionError with the text and throwable if condition == true.    */
DECL|method|failIf (boolean condition, String message, Throwable cause)
specifier|public
specifier|static
name|void
name|failIf
parameter_list|(
name|boolean
name|condition
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
if|if
condition|(
name|condition
condition|)
block|{
name|ContractTestUtils
operator|.
name|fail
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If the condition is met, throw an AssertionError with the message    * and any nested exception.    * @param condition condition    * @param message text to use in the exception    * @param cause a (possibly null) throwable to init the cause with    * @throws AssertionError with the text and throwable if condition == true.    */
DECL|method|failUnless (boolean condition, String message, Throwable cause)
specifier|public
specifier|static
name|void
name|failUnless
parameter_list|(
name|boolean
name|condition
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|failIf
argument_list|(
operator|!
name|condition
argument_list|,
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/**    * Extract the inner cause of an exception.    * @param expected  expected class of the cause    * @param thrown thrown exception.    * @param<T> type of the cause    * @return the extracted exception.    * @throws AssertionError with the text and throwable if the cause is not as    * expected    */
DECL|method|extractCause (Class<T> expected, Throwable thrown)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|T
name|extractCause
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|expected
parameter_list|,
name|Throwable
name|thrown
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|thrown
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|failIf
argument_list|(
name|cause
operator|==
literal|null
argument_list|,
literal|"No inner cause"
argument_list|,
name|thrown
argument_list|)
expr_stmt|;
name|failUnless
argument_list|(
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
argument_list|,
literal|"Inner cause is of wrong type : expected "
operator|+
name|expected
argument_list|,
name|thrown
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|cause
return|;
block|}
block|}
end_class

end_unit

