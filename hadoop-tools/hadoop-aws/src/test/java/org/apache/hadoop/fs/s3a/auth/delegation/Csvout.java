begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_comment
comment|/**  * This is a small utility class to write out rows to a CSV/TSV file.  * It does not do any escaping of written text, so don't write entries  * containing separators.  * Quoting must be done external to this class.  */
end_comment

begin_class
DECL|class|Csvout
specifier|public
specifier|final
class|class
name|Csvout
implements|implements
name|Closeable
block|{
DECL|field|out
specifier|private
specifier|final
name|Writer
name|out
decl_stmt|;
DECL|field|separator
specifier|private
specifier|final
name|String
name|separator
decl_stmt|;
DECL|field|eol
specifier|private
specifier|final
name|String
name|eol
decl_stmt|;
DECL|field|isStartOfLine
specifier|private
name|boolean
name|isStartOfLine
init|=
literal|true
decl_stmt|;
comment|/**    * Instantiate.    * @param out output stream.    * @param separator field separator.    * @param eol end of line sequence    */
DECL|method|Csvout (final Writer out, final String separator, final String eol)
specifier|public
name|Csvout
parameter_list|(
specifier|final
name|Writer
name|out
parameter_list|,
specifier|final
name|String
name|separator
parameter_list|,
specifier|final
name|String
name|eol
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
name|this
operator|.
name|eol
operator|=
name|eol
expr_stmt|;
block|}
comment|/**    * Close the output stream.    * @throws IOException IO failure.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Write a single object's string value.    * @param o object to write.    * @return this instance    * @throws IOException IO failure.    */
DECL|method|write (Object o)
specifier|public
name|Csvout
name|write
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isStartOfLine
condition|)
block|{
name|isStartOfLine
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Write a newline.    * @return this instance    * @throws IOException IO failure.    */
DECL|method|newline ()
specifier|public
name|Csvout
name|newline
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|eol
argument_list|)
expr_stmt|;
name|isStartOfLine
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Write a collection of objects.    * @param objects varags list of objects to write    * @return this instance.    * @throws IOException IO failure.    */
DECL|method|write (Object... objects)
specifier|public
name|Csvout
name|write
parameter_list|(
name|Object
modifier|...
name|objects
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
name|write
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

