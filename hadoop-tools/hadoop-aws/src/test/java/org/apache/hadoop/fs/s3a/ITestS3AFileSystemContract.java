begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemContractBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  *  Tests a live S3 system. If your keys and bucket aren't specified, all tests  *  are marked as passed.  *  *  This uses BlockJUnit4ClassRunner because FileSystemContractBaseTest from  *  TestCase which uses the old Junit3 runner that doesn't ignore assumptions  *  properly making it impossible to skip the tests if we don't have a valid  *  bucket.  **/
end_comment

begin_class
DECL|class|ITestS3AFileSystemContract
specifier|public
class|class
name|ITestS3AFileSystemContract
extends|extends
name|FileSystemContractBaseTest
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3AFileSystemContract
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testMkdirsWithUmask ()
specifier|public
name|void
name|testMkdirsWithUmask
parameter_list|()
throws|throws
name|Exception
block|{
comment|// not supported
block|}
annotation|@
name|Override
DECL|method|testRenameFileAsExistingFile ()
specifier|public
name|void
name|testRenameFileAsExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
block|{
return|return;
block|}
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"/test/new/newfile"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dst
argument_list|)
expr_stmt|;
comment|// s3 doesn't support rename option
comment|// rename-overwrites-dest is always allowed.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testRenameDirectoryAsExistingDirectory ()
specifier|public
name|void
name|testRenameDirectoryAsExistingDirectory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
block|{
return|return;
block|}
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/dir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/file1"
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/subdir/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"/test/new/newdir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nested file1 exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/file1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nested file2 exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/subdir/file2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Renamed nested file1 exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/new/newdir/file1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Renamed nested exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/new/newdir/subdir/file2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//  @Override
DECL|method|testMoveDirUnderParent ()
specifier|public
name|void
name|testMoveDirUnderParent
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// not support because
comment|// Fails if dst is a directory that is not empty.
block|}
block|}
end_class

end_unit

