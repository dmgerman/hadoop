begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Integration test for calling  * {@link org.apache.hadoop.fs.CanUnbuffer#unbuffer} on {@link S3AInputStream}.  * Validates that the object has been closed using the  * {@link S3AInputStream#isObjectStreamOpen()} method. Unlike the  * {@link org.apache.hadoop.fs.contract.s3a.ITestS3AContractUnbuffer} tests,  * these tests leverage the fact that isObjectStreamOpen exposes if the  * underlying stream has been closed or not.  */
end_comment

begin_class
DECL|class|ITestS3AUnbuffer
specifier|public
class|class
name|ITestS3AUnbuffer
extends|extends
name|AbstractS3ATestBase
block|{
annotation|@
name|Test
DECL|method|testUnbuffer ()
specifier|public
name|void
name|testUnbuffer
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Setup test file
name|Path
name|dest
init|=
name|path
argument_list|(
literal|"testUnbuffer"
argument_list|)
decl_stmt|;
name|describe
argument_list|(
literal|"testUnbuffer"
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataOutputStream
name|outputStream
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|dest
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|byte
index|[]
name|data
init|=
name|ContractTestUtils
operator|.
name|dataset
argument_list|(
literal|16
argument_list|,
literal|'a'
argument_list|,
literal|26
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|// Open file, read half the data, and then call unbuffer
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|dest
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|inputStream
operator|.
name|getWrappedStream
argument_list|()
operator|instanceof
name|S3AInputStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|inputStream
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isObjectStreamOpen
argument_list|(
name|inputStream
argument_list|)
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|unbuffer
argument_list|()
expr_stmt|;
comment|// Check the the wrapped stream is closed
name|assertFalse
argument_list|(
name|isObjectStreamOpen
argument_list|(
name|inputStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isObjectStreamOpen (FSDataInputStream inputStream)
specifier|private
name|boolean
name|isObjectStreamOpen
parameter_list|(
name|FSDataInputStream
name|inputStream
parameter_list|)
block|{
return|return
operator|(
operator|(
name|S3AInputStream
operator|)
name|inputStream
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|isObjectStreamOpen
argument_list|()
return|;
block|}
block|}
end_class

end_unit

