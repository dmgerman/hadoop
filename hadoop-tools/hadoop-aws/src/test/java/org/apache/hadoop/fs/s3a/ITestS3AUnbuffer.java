begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Statistic
operator|.
name|STREAM_SEEK_BYTES_READ
import|;
end_import

begin_comment
comment|/**  * Integration test for calling  * {@link org.apache.hadoop.fs.CanUnbuffer#unbuffer} on {@link S3AInputStream}.  * Validates that the object has been closed using the  * {@link S3AInputStream#isObjectStreamOpen()} method. Unlike the  * {@link org.apache.hadoop.fs.contract.s3a.ITestS3AContractUnbuffer} tests,  * these tests leverage the fact that isObjectStreamOpen exposes if the  * underlying stream has been closed or not.  */
end_comment

begin_class
DECL|class|ITestS3AUnbuffer
specifier|public
class|class
name|ITestS3AUnbuffer
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|dest
specifier|private
name|Path
name|dest
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|dest
operator|=
name|path
argument_list|(
literal|"ITestS3AUnbuffer"
argument_list|)
expr_stmt|;
name|describe
argument_list|(
literal|"ITestS3AUnbuffer"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|ContractTestUtils
operator|.
name|dataset
argument_list|(
literal|16
argument_list|,
literal|'a'
argument_list|,
literal|26
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|writeDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|dest
argument_list|,
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|16
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnbuffer ()
specifier|public
name|void
name|testUnbuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|describe
argument_list|(
literal|"testUnbuffer"
argument_list|)
expr_stmt|;
comment|// Open file, read half the data, and then call unbuffer
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|dest
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|inputStream
operator|.
name|getWrappedStream
argument_list|()
operator|instanceof
name|S3AInputStream
argument_list|)
expr_stmt|;
name|readAndAssertBytesRead
argument_list|(
name|inputStream
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isObjectStreamOpen
argument_list|(
name|inputStream
argument_list|)
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|unbuffer
argument_list|()
expr_stmt|;
comment|// Check the the wrapped stream is closed
name|assertFalse
argument_list|(
name|isObjectStreamOpen
argument_list|(
name|inputStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that calling {@link S3AInputStream#unbuffer()} merges a stream's    * {@link org.apache.hadoop.fs.s3a.S3AInstrumentation.InputStreamStatistics}    * into the {@link S3AFileSystem}'s {@link S3AInstrumentation} instance.    */
annotation|@
name|Test
DECL|method|testUnbufferStreamStatistics ()
specifier|public
name|void
name|testUnbufferStreamStatistics
parameter_list|()
throws|throws
name|IOException
block|{
name|describe
argument_list|(
literal|"testUnbufferStreamStatistics"
argument_list|)
expr_stmt|;
comment|// Validate bytesRead is updated correctly
name|S3ATestUtils
operator|.
name|MetricDiff
name|bytesRead
init|=
operator|new
name|S3ATestUtils
operator|.
name|MetricDiff
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|STREAM_SEEK_BYTES_READ
argument_list|)
decl_stmt|;
comment|// Open file, read half the data, and then call unbuffer
name|FSDataInputStream
name|inputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|inputStream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|readAndAssertBytesRead
argument_list|(
name|inputStream
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|unbuffer
argument_list|()
expr_stmt|;
comment|// Validate that calling unbuffer updates the input stream statistics
name|bytesRead
operator|.
name|assertDiffEquals
argument_list|(
literal|8
argument_list|)
expr_stmt|;
comment|// Validate that calling unbuffer twice in a row updates the statistics
comment|// correctly
name|readAndAssertBytesRead
argument_list|(
name|inputStream
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|unbuffer
argument_list|()
expr_stmt|;
name|bytesRead
operator|.
name|assertDiffEquals
argument_list|(
literal|12
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
comment|// Validate that closing the file does not further change the statistics
name|bytesRead
operator|.
name|assertDiffEquals
argument_list|(
literal|12
argument_list|)
expr_stmt|;
comment|// Validate that the input stream stats are correct when the file is closed
name|assertEquals
argument_list|(
literal|"S3AInputStream statistics were not updated properly"
argument_list|,
literal|12
argument_list|,
operator|(
operator|(
name|S3AInputStream
operator|)
name|inputStream
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|getS3AStreamStatistics
argument_list|()
operator|.
name|bytesRead
argument_list|)
expr_stmt|;
block|}
DECL|method|isObjectStreamOpen (FSDataInputStream inputStream)
specifier|private
name|boolean
name|isObjectStreamOpen
parameter_list|(
name|FSDataInputStream
name|inputStream
parameter_list|)
block|{
return|return
operator|(
operator|(
name|S3AInputStream
operator|)
name|inputStream
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|isObjectStreamOpen
argument_list|()
return|;
block|}
comment|/**    * Read the specified number of bytes from the given    * {@link FSDataInputStream} and assert that    * {@link FSDataInputStream#read(byte[])} read the specified number of bytes.    */
DECL|method|readAndAssertBytesRead (FSDataInputStream inputStream, int bytesToRead)
specifier|private
specifier|static
name|void
name|readAndAssertBytesRead
parameter_list|(
name|FSDataInputStream
name|inputStream
parameter_list|,
name|int
name|bytesToRead
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"S3AInputStream#read did not read the correct number of "
operator|+
literal|"bytes"
argument_list|,
name|bytesToRead
argument_list|,
name|inputStream
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
name|bytesToRead
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

