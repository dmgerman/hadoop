begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.staging
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|Paths
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test {@link org.apache.hadoop.fs.s3a.commit.staging.Paths}.  */
end_comment

begin_class
DECL|class|TestPaths
specifier|public
class|class
name|TestPaths
extends|extends
name|HadoopTestBase
block|{
annotation|@
name|Test
DECL|method|testUUIDPart ()
specifier|public
name|void
name|testUUIDPart
parameter_list|()
block|{
name|assertUUIDAdded
argument_list|(
literal|"/part-0000"
argument_list|,
literal|"/part-0000-UUID"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUUIDPartSuffix ()
specifier|public
name|void
name|testUUIDPartSuffix
parameter_list|()
block|{
name|assertUUIDAdded
argument_list|(
literal|"/part-0000.gz.csv"
argument_list|,
literal|"/part-0000-UUID.gz.csv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUUIDDottedPath ()
specifier|public
name|void
name|testUUIDDottedPath
parameter_list|()
block|{
name|assertUUIDAdded
argument_list|(
literal|"/parent.dir/part-0000"
argument_list|,
literal|"/parent.dir/part-0000-UUID"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUUIDPartUUID ()
specifier|public
name|void
name|testUUIDPartUUID
parameter_list|()
block|{
name|assertUUIDAdded
argument_list|(
literal|"/part-0000-UUID.gz.csv"
argument_list|,
literal|"/part-0000-UUID.gz.csv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUUIDParentUUID ()
specifier|public
name|void
name|testUUIDParentUUID
parameter_list|()
block|{
name|assertUUIDAdded
argument_list|(
literal|"/UUID/part-0000.gz.csv"
argument_list|,
literal|"/UUID/part-0000.gz.csv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUUIDDir ()
specifier|public
name|void
name|testUUIDDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|addUUID
argument_list|(
literal|"/dest/"
argument_list|,
literal|"UUID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUUIDEmptyDir ()
specifier|public
name|void
name|testUUIDEmptyDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|addUUID
argument_list|(
literal|""
argument_list|,
literal|"UUID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyUUID ()
specifier|public
name|void
name|testEmptyUUID
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|addUUID
argument_list|(
literal|"part-0000.gz"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertUUIDAdded (String path, String expected)
specifier|private
name|void
name|assertUUIDAdded
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"from "
operator|+
name|path
argument_list|,
name|expected
argument_list|,
name|addUUID
argument_list|(
name|path
argument_list|,
literal|"UUID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|DATA
specifier|private
specifier|static
specifier|final
name|String
name|DATA
init|=
literal|"s3a://landsat-pds/data/"
decl_stmt|;
DECL|field|BASE
specifier|private
specifier|static
specifier|final
name|Path
name|BASE
init|=
operator|new
name|Path
argument_list|(
name|DATA
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testRelativizeOneLevel ()
specifier|public
name|void
name|testRelativizeOneLevel
parameter_list|()
block|{
name|String
name|suffix
init|=
literal|"year=2017"
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|DATA
operator|+
name|suffix
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|suffix
argument_list|,
name|getRelativePath
argument_list|(
name|BASE
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelativizeTwoLevel ()
specifier|public
name|void
name|testRelativizeTwoLevel
parameter_list|()
block|{
name|String
name|suffix
init|=
literal|"year=2017/month=10"
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
name|BASE
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|suffix
argument_list|,
name|getRelativePath
argument_list|(
name|BASE
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelativizeSelf ()
specifier|public
name|void
name|testRelativizeSelf
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|getRelativePath
argument_list|(
name|BASE
argument_list|,
name|BASE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelativizeParent ()
specifier|public
name|void
name|testRelativizeParent
parameter_list|()
block|{
comment|// goes up to the parent if one is above the other
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|getRelativePath
argument_list|(
name|BASE
argument_list|,
name|BASE
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPartition ()
specifier|public
name|void
name|testGetPartition
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"year=2017/month=10"
argument_list|,
name|getPartition
argument_list|(
literal|"year=2017/month=10/part-0000.avro"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMPUCommitDir ()
specifier|public
name|void
name|testMPUCommitDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|LocalFileSystem
name|localFS
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|getMultipartUploadCommitsDirectory
argument_list|(
name|localFS
argument_list|,
name|conf
argument_list|,
literal|"UUID"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"UUID/"
operator|+
name|StagingCommitterConstants
operator|.
name|STAGING_UPLOADS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

