begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonWebServiceRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|DefaultRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|SignableRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|Signer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|SignerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|TestSignerManager
operator|.
name|SignerInitializerForTest
operator|.
name|StoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|CUSTOM_SIGNERS
import|;
end_import

begin_comment
comment|/**  * Tests for the SignerManager.  */
end_comment

begin_class
DECL|class|TestSignerManager
specifier|public
class|class
name|TestSignerManager
block|{
DECL|field|TEST_TOKEN_KIND
specifier|private
specifier|static
specifier|final
name|Text
name|TEST_TOKEN_KIND
init|=
operator|new
name|Text
argument_list|(
literal|"TestTokenKind"
argument_list|)
decl_stmt|;
DECL|field|TEST_TOKEN_SERVICE
specifier|private
specifier|static
specifier|final
name|Text
name|TEST_TOKEN_SERVICE
init|=
operator|new
name|Text
argument_list|(
literal|"TestTokenService"
argument_list|)
decl_stmt|;
DECL|field|TEST_KEY_IDENTIFIER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_KEY_IDENTIFIER
init|=
literal|"TEST_KEY_IDENTIFIER"
decl_stmt|;
DECL|field|BUCKET1
specifier|private
specifier|static
specifier|final
name|String
name|BUCKET1
init|=
literal|"bucket1"
decl_stmt|;
DECL|field|BUCKET2
specifier|private
specifier|static
specifier|final
name|String
name|BUCKET2
init|=
literal|"bucket2"
decl_stmt|;
DECL|field|TESTUSER1
specifier|private
specifier|static
specifier|final
name|String
name|TESTUSER1
init|=
literal|"testuser1"
decl_stmt|;
DECL|field|TESTUSER2
specifier|private
specifier|static
specifier|final
name|String
name|TESTUSER2
init|=
literal|"testuser2"
decl_stmt|;
DECL|field|testTimeout
annotation|@
name|Rule
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10_000L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|beforeTest ()
specifier|public
name|void
name|beforeTest
parameter_list|()
block|{
name|SignerForTest1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|SignerForTest2
operator|.
name|reset
argument_list|()
expr_stmt|;
name|SignerInitializerForTest
operator|.
name|reset
argument_list|()
expr_stmt|;
name|SignerForInitializerTest
operator|.
name|reset
argument_list|()
expr_stmt|;
name|SignerInitializer2ForTest
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPredefinedSignerInitialization ()
specifier|public
name|void
name|testPredefinedSignerInitialization
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Try initializing a pre-defined Signer type.
comment|// Should run through without an exception.
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Pre-defined signer types as of AWS-SDK 1.11.563
comment|// AWS4SignerType, QueryStringSignerType, AWSS3V4SignerType
name|config
operator|.
name|set
argument_list|(
name|CUSTOM_SIGNERS
argument_list|,
literal|"AWS4SignerType"
argument_list|)
expr_stmt|;
name|SignerManager
name|signerManager
init|=
operator|new
name|SignerManager
argument_list|(
literal|"dontcare"
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
decl_stmt|;
name|signerManager
operator|.
name|initCustomSigners
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomSignerFailureIfNotRegistered ()
specifier|public
name|void
name|testCustomSignerFailureIfNotRegistered
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CUSTOM_SIGNERS
argument_list|,
literal|"testsignerUnregistered"
argument_list|)
expr_stmt|;
name|SignerManager
name|signerManager
init|=
operator|new
name|SignerManager
argument_list|(
literal|"dontcare"
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
decl_stmt|;
comment|// Make sure the config is respected.
name|signerManager
operator|.
name|initCustomSigners
argument_list|()
expr_stmt|;
comment|// Simulate a call from the AWS SDK to create the signer.
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|SignerFactory
operator|.
name|createSigner
argument_list|(
literal|"testsignerUnregistered"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expecting generic Exception.class to handle future implementation
comment|// changes.
comment|// For now, this is an NPE
block|}
annotation|@
name|Test
DECL|method|testCustomSignerInitialization ()
specifier|public
name|void
name|testCustomSignerInitialization
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CUSTOM_SIGNERS
argument_list|,
literal|"testsigner1:"
operator|+
name|SignerForTest1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SignerManager
name|signerManager
init|=
operator|new
name|SignerManager
argument_list|(
literal|"dontcare"
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
decl_stmt|;
name|signerManager
operator|.
name|initCustomSigners
argument_list|()
expr_stmt|;
name|Signer
name|s1
init|=
name|SignerFactory
operator|.
name|createSigner
argument_list|(
literal|"testsigner1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|s1
operator|.
name|sign
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerForTest1
operator|.
name|initialized
argument_list|)
operator|.
name|as
argument_list|(
name|SignerForTest1
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" not initialized"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleCustomSignerInitialization ()
specifier|public
name|void
name|testMultipleCustomSignerInitialization
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CUSTOM_SIGNERS
argument_list|,
literal|"testsigner1:"
operator|+
name|SignerForTest1
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
literal|"testsigner2:"
operator|+
name|SignerForTest2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SignerManager
name|signerManager
init|=
operator|new
name|SignerManager
argument_list|(
literal|"dontcare"
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
decl_stmt|;
name|signerManager
operator|.
name|initCustomSigners
argument_list|()
expr_stmt|;
name|Signer
name|s1
init|=
name|SignerFactory
operator|.
name|createSigner
argument_list|(
literal|"testsigner1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|s1
operator|.
name|sign
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerForTest1
operator|.
name|initialized
argument_list|)
operator|.
name|as
argument_list|(
name|SignerForTest1
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" not initialized"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Signer
name|s2
init|=
name|SignerFactory
operator|.
name|createSigner
argument_list|(
literal|"testsigner2"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|s2
operator|.
name|sign
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerForTest2
operator|.
name|initialized
argument_list|)
operator|.
name|as
argument_list|(
name|SignerForTest2
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" not initialized"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleSignerInitializer ()
specifier|public
name|void
name|testSimpleSignerInitializer
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CUSTOM_SIGNERS
argument_list|,
literal|"testsigner1:"
operator|+
name|SignerForTest1
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
name|createTokenForTest
argument_list|(
literal|"identifier"
argument_list|)
decl_stmt|;
name|DelegationTokenProvider
name|dtProvider
init|=
operator|new
name|DelegationTokenProviderForTest
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"testuser"
argument_list|)
decl_stmt|;
name|SignerManager
name|signerManager
init|=
operator|new
name|SignerManager
argument_list|(
literal|"bucket1"
argument_list|,
name|dtProvider
argument_list|,
name|config
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
name|signerManager
operator|.
name|initCustomSigners
argument_list|()
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|instanceCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" creation count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|registerCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|unregisterCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|signerManager
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|unregisterCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleSignerInitializers ()
specifier|public
name|void
name|testMultipleSignerInitializers
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CUSTOM_SIGNERS
argument_list|,
literal|"testsigner1:"
operator|+
name|SignerForTest1
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
comment|// 2nd signer
operator|+
literal|"testsigner2:"
operator|+
name|SignerForTest2
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
comment|// 3rd signer
operator|+
literal|"testsigner3:"
operator|+
name|SignerForTest2
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|SignerInitializer2ForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
name|createTokenForTest
argument_list|(
literal|"identifier"
argument_list|)
decl_stmt|;
name|DelegationTokenProvider
name|dtProvider
init|=
operator|new
name|DelegationTokenProviderForTest
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"testuser"
argument_list|)
decl_stmt|;
name|SignerManager
name|signerManager
init|=
operator|new
name|SignerManager
argument_list|(
literal|"bucket1"
argument_list|,
name|dtProvider
argument_list|,
name|config
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
name|signerManager
operator|.
name|initCustomSigners
argument_list|()
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|instanceCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" creation count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|registerCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|unregisterCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializer2ForTest
operator|.
name|instanceCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializer2ForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" creation count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializer2ForTest
operator|.
name|registerCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializer2ForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializer2ForTest
operator|.
name|unregisterCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializer2ForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|signerManager
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|unregisterCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializer2ForTest
operator|.
name|unregisterCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializer2ForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSignerInitializerMultipleInstances ()
specifier|public
name|void
name|testSignerInitializerMultipleInstances
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|id1
init|=
literal|"id1"
decl_stmt|;
name|String
name|id2
init|=
literal|"id2"
decl_stmt|;
name|String
name|id3
init|=
literal|"id3"
decl_stmt|;
name|UserGroupInformation
name|ugiU1
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|TESTUSER1
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugiU2
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|TESTUSER2
argument_list|)
decl_stmt|;
name|SignerManager
name|signerManagerU1B1
init|=
name|fakeS3AInstanceCreation
argument_list|(
name|id1
argument_list|,
name|SignerForInitializerTest
operator|.
name|class
argument_list|,
name|SignerInitializerForTest
operator|.
name|class
argument_list|,
name|BUCKET1
argument_list|,
name|ugiU1
argument_list|)
decl_stmt|;
name|SignerManager
name|signerManagerU2B1
init|=
name|fakeS3AInstanceCreation
argument_list|(
name|id2
argument_list|,
name|SignerForInitializerTest
operator|.
name|class
argument_list|,
name|SignerInitializerForTest
operator|.
name|class
argument_list|,
name|BUCKET1
argument_list|,
name|ugiU2
argument_list|)
decl_stmt|;
name|SignerManager
name|signerManagerU2B2
init|=
name|fakeS3AInstanceCreation
argument_list|(
name|id3
argument_list|,
name|SignerForInitializerTest
operator|.
name|class
argument_list|,
name|SignerInitializerForTest
operator|.
name|class
argument_list|,
name|BUCKET2
argument_list|,
name|ugiU2
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|instanceCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" creation count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|registerCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|unregisterCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Simulate U1B1 making a request
name|attemptSignAndVerify
argument_list|(
name|id1
argument_list|,
name|BUCKET1
argument_list|,
name|ugiU1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Simulate U2B1 making a request
name|attemptSignAndVerify
argument_list|(
name|id2
argument_list|,
name|BUCKET1
argument_list|,
name|ugiU2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Simulate U2B2 making a request
name|attemptSignAndVerify
argument_list|(
name|id3
argument_list|,
name|BUCKET2
argument_list|,
name|ugiU2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Simulate U1B2 (not defined - so Signer should get a null)
name|attemptSignAndVerify
argument_list|(
literal|"dontcare"
argument_list|,
name|BUCKET2
argument_list|,
name|ugiU1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|closeAndVerifyNull
argument_list|(
name|signerManagerU1B1
argument_list|,
name|BUCKET1
argument_list|,
name|ugiU1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|closeAndVerifyNull
argument_list|(
name|signerManagerU2B2
argument_list|,
name|BUCKET2
argument_list|,
name|ugiU2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|closeAndVerifyNull
argument_list|(
name|signerManagerU2B1
argument_list|,
name|BUCKET1
argument_list|,
name|ugiU2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|unregisterCount
argument_list|)
operator|.
name|as
argument_list|(
name|SignerInitializerForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" registration count mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|attemptSignAndVerify (String identifier, String bucket, UserGroupInformation ugi, boolean expectNullStoreInfo)
specifier|private
name|void
name|attemptSignAndVerify
parameter_list|(
name|String
name|identifier
parameter_list|,
name|String
name|bucket
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|boolean
name|expectNullStoreInfo
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ugi
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|Signer
name|signer
operator|=
operator|new
name|SignerForInitializerTest
argument_list|()
block|;
name|SignableRequest
argument_list|<
name|?
argument_list|>
name|signableRequest
operator|=
name|constructSignableRequest
argument_list|(
name|bucket
argument_list|)
block|;
name|signer
operator|.
name|sign
argument_list|(
name|signableRequest
argument_list|,
literal|null
argument_list|)
block|;
name|verifyStoreValueInSigner
argument_list|(
name|expectNullStoreInfo
argument_list|,
name|bucket
argument_list|,
name|identifier
argument_list|)
block|;
return|return
literal|null
return|;
block|}
block|)
function|;
block|}
end_class

begin_function
DECL|method|verifyStoreValueInSigner (boolean expectNull, String bucketName, String identifier)
specifier|private
name|void
name|verifyStoreValueInSigner
parameter_list|(
name|boolean
name|expectNull
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|identifier
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|expectNull
condition|)
block|{
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerForInitializerTest
operator|.
name|retrievedStoreValue
argument_list|)
operator|.
name|as
argument_list|(
literal|"Retrieved store value expected to be null"
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|StoreValue
name|storeValue
init|=
name|SignerForInitializerTest
operator|.
name|retrievedStoreValue
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|storeValue
argument_list|)
operator|.
name|as
argument_list|(
literal|"StoreValue should not be null"
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|storeValue
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
literal|"Bucket Name mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|storeValue
operator|.
name|getStoreConf
argument_list|()
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|conf
argument_list|)
operator|.
name|as
argument_list|(
literal|"Configuration should not be null"
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|TEST_KEY_IDENTIFIER
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
literal|"Identifier mistmatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
name|storeValue
operator|.
name|getDtProvider
argument_list|()
operator|.
name|getFsDelegationToken
argument_list|()
decl_stmt|;
name|String
name|tokenId
init|=
operator|new
name|String
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|tokenId
argument_list|)
operator|.
name|as
argument_list|(
literal|"Mismatch in delegation token identifier"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|createTokenIdentifierString
argument_list|(
name|identifier
argument_list|,
name|bucketName
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|closeAndVerifyNull (Closeable closeable, String bucketName, UserGroupInformation ugi, int expectedCount)
specifier|private
name|void
name|closeAndVerifyNull
parameter_list|(
name|Closeable
name|closeable
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|int
name|expectedCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
name|attemptSignAndVerify
argument_list|(
literal|"dontcare"
argument_list|,
name|bucketName
argument_list|,
name|ugi
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerInitializerForTest
operator|.
name|storeCache
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
literal|"StoreCache size mismatch"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedCount
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * SignerForTest1.    */
end_comment

begin_class
annotation|@
name|Private
DECL|class|SignerForTest1
specifier|public
specifier|static
class|class
name|SignerForTest1
implements|implements
name|Signer
block|{
DECL|field|initialized
specifier|private
specifier|static
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|sign (SignableRequest<?> request, AWSCredentials credentials)
specifier|public
name|void
name|sign
parameter_list|(
name|SignableRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|AWSCredentials
name|credentials
parameter_list|)
block|{
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * SignerForTest2.    */
end_comment

begin_class
annotation|@
name|Private
DECL|class|SignerForTest2
specifier|public
specifier|static
class|class
name|SignerForTest2
implements|implements
name|Signer
block|{
DECL|field|initialized
specifier|private
specifier|static
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|sign (SignableRequest<?> request, AWSCredentials credentials)
specifier|public
name|void
name|sign
parameter_list|(
name|SignableRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|AWSCredentials
name|credentials
parameter_list|)
block|{
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * SignerInitializerForTest.    */
end_comment

begin_class
annotation|@
name|Private
DECL|class|SignerInitializerForTest
specifier|public
specifier|static
class|class
name|SignerInitializerForTest
implements|implements
name|AwsSignerInitializer
block|{
DECL|field|registerCount
specifier|private
specifier|static
name|int
name|registerCount
init|=
literal|0
decl_stmt|;
DECL|field|unregisterCount
specifier|private
specifier|static
name|int
name|unregisterCount
init|=
literal|0
decl_stmt|;
DECL|field|instanceCount
specifier|private
specifier|static
name|int
name|instanceCount
init|=
literal|0
decl_stmt|;
DECL|field|storeCache
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|StoreKey
argument_list|,
name|StoreValue
argument_list|>
name|storeCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|SignerInitializerForTest ()
specifier|public
name|SignerInitializerForTest
parameter_list|()
block|{
name|instanceCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerStore (String bucketName, Configuration storeConf, DelegationTokenProvider dtProvider, UserGroupInformation storeUgi)
specifier|public
name|void
name|registerStore
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|Configuration
name|storeConf
parameter_list|,
name|DelegationTokenProvider
name|dtProvider
parameter_list|,
name|UserGroupInformation
name|storeUgi
parameter_list|)
block|{
name|registerCount
operator|++
expr_stmt|;
name|StoreKey
name|storeKey
init|=
operator|new
name|StoreKey
argument_list|(
name|bucketName
argument_list|,
name|storeUgi
argument_list|)
decl_stmt|;
name|StoreValue
name|storeValue
init|=
operator|new
name|StoreValue
argument_list|(
name|bucketName
argument_list|,
name|storeConf
argument_list|,
name|dtProvider
argument_list|)
decl_stmt|;
name|storeCache
operator|.
name|put
argument_list|(
name|storeKey
argument_list|,
name|storeValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unregisterStore (String bucketName, Configuration storeConf, DelegationTokenProvider dtProvider, UserGroupInformation storeUgi)
specifier|public
name|void
name|unregisterStore
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|Configuration
name|storeConf
parameter_list|,
name|DelegationTokenProvider
name|dtProvider
parameter_list|,
name|UserGroupInformation
name|storeUgi
parameter_list|)
block|{
name|unregisterCount
operator|++
expr_stmt|;
name|StoreKey
name|storeKey
init|=
operator|new
name|StoreKey
argument_list|(
name|bucketName
argument_list|,
name|storeUgi
argument_list|)
decl_stmt|;
name|storeCache
operator|.
name|remove
argument_list|(
name|storeKey
argument_list|)
expr_stmt|;
block|}
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|registerCount
operator|=
literal|0
expr_stmt|;
name|unregisterCount
operator|=
literal|0
expr_stmt|;
name|instanceCount
operator|=
literal|0
expr_stmt|;
name|storeCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getStoreInfo (String bucketName, UserGroupInformation storeUgi)
specifier|public
specifier|static
name|StoreValue
name|getStoreInfo
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|UserGroupInformation
name|storeUgi
parameter_list|)
block|{
name|StoreKey
name|storeKey
init|=
operator|new
name|StoreKey
argument_list|(
name|bucketName
argument_list|,
name|storeUgi
argument_list|)
decl_stmt|;
return|return
name|storeCache
operator|.
name|get
argument_list|(
name|storeKey
argument_list|)
return|;
block|}
DECL|class|StoreKey
specifier|private
specifier|static
class|class
name|StoreKey
block|{
DECL|field|bucketName
specifier|private
specifier|final
name|String
name|bucketName
decl_stmt|;
DECL|field|ugi
specifier|private
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|method|StoreKey (String bucketName, UserGroupInformation ugi)
specifier|public
name|StoreKey
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
name|this
operator|.
name|bucketName
operator|=
name|bucketName
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|StoreKey
name|storeKey
init|=
operator|(
name|StoreKey
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|bucketName
argument_list|,
name|storeKey
operator|.
name|bucketName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|ugi
argument_list|,
name|storeKey
operator|.
name|ugi
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|bucketName
argument_list|,
name|ugi
argument_list|)
return|;
block|}
block|}
DECL|class|StoreValue
specifier|static
class|class
name|StoreValue
block|{
DECL|field|bucketName
specifier|private
specifier|final
name|String
name|bucketName
decl_stmt|;
DECL|field|storeConf
specifier|private
specifier|final
name|Configuration
name|storeConf
decl_stmt|;
DECL|field|dtProvider
specifier|private
specifier|final
name|DelegationTokenProvider
name|dtProvider
decl_stmt|;
DECL|method|StoreValue (String bucketName, Configuration storeConf, DelegationTokenProvider dtProvider)
specifier|public
name|StoreValue
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|Configuration
name|storeConf
parameter_list|,
name|DelegationTokenProvider
name|dtProvider
parameter_list|)
block|{
name|this
operator|.
name|bucketName
operator|=
name|bucketName
expr_stmt|;
name|this
operator|.
name|storeConf
operator|=
name|storeConf
expr_stmt|;
name|this
operator|.
name|dtProvider
operator|=
name|dtProvider
expr_stmt|;
block|}
DECL|method|getBucketName ()
name|String
name|getBucketName
parameter_list|()
block|{
return|return
name|bucketName
return|;
block|}
DECL|method|getStoreConf ()
name|Configuration
name|getStoreConf
parameter_list|()
block|{
return|return
name|storeConf
return|;
block|}
DECL|method|getDtProvider ()
name|DelegationTokenProvider
name|getDtProvider
parameter_list|()
block|{
return|return
name|dtProvider
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * To be used in conjunction with {@link SignerInitializerForTest}.    */
end_comment

begin_class
annotation|@
name|Private
DECL|class|SignerForInitializerTest
specifier|public
specifier|static
class|class
name|SignerForInitializerTest
implements|implements
name|Signer
block|{
DECL|field|retrievedStoreValue
specifier|private
specifier|static
name|StoreValue
name|retrievedStoreValue
decl_stmt|;
annotation|@
name|Override
DECL|method|sign (SignableRequest<?> request, AWSCredentials credentials)
specifier|public
name|void
name|sign
parameter_list|(
name|SignableRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|AWSCredentials
name|credentials
parameter_list|)
block|{
name|String
name|bucketName
init|=
name|request
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
try|try
block|{
name|retrievedStoreValue
operator|=
name|SignerInitializerForTest
operator|.
name|getStoreInfo
argument_list|(
name|bucketName
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to get current ugi"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|retrievedStoreValue
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * DelegationTokenProviderForTest.    */
end_comment

begin_class
annotation|@
name|Private
DECL|class|DelegationTokenProviderForTest
specifier|private
specifier|static
class|class
name|DelegationTokenProviderForTest
implements|implements
name|DelegationTokenProvider
block|{
DECL|field|token
specifier|private
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
decl_stmt|;
DECL|method|DelegationTokenProviderForTest ( Token<? extends TokenIdentifier> token)
specifier|private
name|DelegationTokenProviderForTest
parameter_list|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFsDelegationToken ()
specifier|public
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|getFsDelegationToken
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|token
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * SignerInitializer2ForTest.    */
end_comment

begin_class
annotation|@
name|Private
DECL|class|SignerInitializer2ForTest
specifier|public
specifier|static
class|class
name|SignerInitializer2ForTest
implements|implements
name|AwsSignerInitializer
block|{
DECL|field|registerCount
specifier|private
specifier|static
name|int
name|registerCount
init|=
literal|0
decl_stmt|;
DECL|field|unregisterCount
specifier|private
specifier|static
name|int
name|unregisterCount
init|=
literal|0
decl_stmt|;
DECL|field|instanceCount
specifier|private
specifier|static
name|int
name|instanceCount
init|=
literal|0
decl_stmt|;
DECL|method|SignerInitializer2ForTest ()
specifier|public
name|SignerInitializer2ForTest
parameter_list|()
block|{
name|instanceCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerStore (String bucketName, Configuration storeConf, DelegationTokenProvider dtProvider, UserGroupInformation storeUgi)
specifier|public
name|void
name|registerStore
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|Configuration
name|storeConf
parameter_list|,
name|DelegationTokenProvider
name|dtProvider
parameter_list|,
name|UserGroupInformation
name|storeUgi
parameter_list|)
block|{
name|registerCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unregisterStore (String bucketName, Configuration storeConf, DelegationTokenProvider dtProvider, UserGroupInformation storeUgi)
specifier|public
name|void
name|unregisterStore
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|Configuration
name|storeConf
parameter_list|,
name|DelegationTokenProvider
name|dtProvider
parameter_list|,
name|UserGroupInformation
name|storeUgi
parameter_list|)
block|{
name|unregisterCount
operator|++
expr_stmt|;
block|}
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|registerCount
operator|=
literal|0
expr_stmt|;
name|unregisterCount
operator|=
literal|0
expr_stmt|;
name|instanceCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|createTokenForTest (String idString)
specifier|private
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|createTokenForTest
parameter_list|(
name|String
name|idString
parameter_list|)
block|{
name|byte
index|[]
name|identifier
init|=
name|idString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|password
init|=
literal|"notapassword"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|identifier
argument_list|,
name|password
argument_list|,
name|TEST_TOKEN_KIND
argument_list|,
name|TEST_TOKEN_SERVICE
argument_list|)
decl_stmt|;
return|return
name|token
return|;
block|}
end_function

begin_function
DECL|method|fakeS3AInstanceCreation (String identifier, Class<? extends Signer> signerClazz, Class<? extends AwsSignerInitializer> signerInitializerClazz, String bucketName, UserGroupInformation ugi)
specifier|private
name|SignerManager
name|fakeS3AInstanceCreation
parameter_list|(
name|String
name|identifier
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Signer
argument_list|>
name|signerClazz
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|AwsSignerInitializer
argument_list|>
name|signerInitializerClazz
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
comment|// Simulate new S3A instance interactions.
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|signerClazz
argument_list|,
literal|"SignerClazz missing"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|signerInitializerClazz
argument_list|,
literal|"SignerInitializerClazzMissing"
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|TEST_KEY_IDENTIFIER
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CUSTOM_SIGNERS
argument_list|,
name|signerClazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|":"
operator|+
name|signerClazz
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|signerInitializerClazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token1
init|=
name|createTokenForTest
argument_list|(
name|createTokenIdentifierString
argument_list|(
name|identifier
argument_list|,
name|bucketName
argument_list|,
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DelegationTokenProvider
name|dtProvider1
init|=
operator|new
name|DelegationTokenProviderForTest
argument_list|(
name|token1
argument_list|)
decl_stmt|;
name|SignerManager
name|signerManager
init|=
operator|new
name|SignerManager
argument_list|(
name|bucketName
argument_list|,
name|dtProvider1
argument_list|,
name|config
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
name|signerManager
operator|.
name|initCustomSigners
argument_list|()
expr_stmt|;
return|return
name|signerManager
return|;
block|}
end_function

begin_function
DECL|method|createTokenIdentifierString (String identifier, String bucketName, String user)
specifier|private
name|String
name|createTokenIdentifierString
parameter_list|(
name|String
name|identifier
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|user
parameter_list|)
block|{
return|return
name|identifier
operator|+
literal|"_"
operator|+
name|bucketName
operator|+
literal|"_"
operator|+
name|user
return|;
block|}
end_function

begin_function
DECL|method|constructSignableRequest (String bucketName)
specifier|private
name|SignableRequest
argument_list|<
name|?
argument_list|>
name|constructSignableRequest
parameter_list|(
name|String
name|bucketName
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|DefaultRequest
name|signableRequest
init|=
operator|new
name|DefaultRequest
argument_list|(
name|AmazonWebServiceRequest
operator|.
name|NOOP
argument_list|,
literal|"fakeservice"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"s3://"
operator|+
name|bucketName
operator|+
literal|"/"
argument_list|)
decl_stmt|;
name|signableRequest
operator|.
name|setEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
name|signableRequest
return|;
block|}
end_function

unit|}
end_unit

