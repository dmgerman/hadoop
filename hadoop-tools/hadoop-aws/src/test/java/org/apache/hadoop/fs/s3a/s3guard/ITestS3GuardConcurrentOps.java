begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|DynamoDB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AWSCredentialProviderList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AbstractS3ATestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3GUARD_DDB_REGION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3GUARD_DDB_TABLE_CAPACITY_READ_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY
import|;
end_import

begin_comment
comment|/**  * Tests concurrent operations on S3Guard.  */
end_comment

begin_class
DECL|class|ITestS3GuardConcurrentOps
specifier|public
class|class
name|ITestS3GuardConcurrentOps
extends|extends
name|AbstractS3ATestBase
block|{
annotation|@
name|Rule
DECL|field|timeout
specifier|public
specifier|final
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|5
operator|*
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
comment|//patch the read/write capacity
name|conf
operator|.
name|setInt
argument_list|(
name|S3GUARD_DDB_TABLE_CAPACITY_READ_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|failIfTableExists (DynamoDB db, String tableName)
specifier|private
name|void
name|failIfTableExists
parameter_list|(
name|DynamoDB
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|boolean
name|tableExists
init|=
literal|true
decl_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|describe
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|tableExists
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|tableExists
condition|)
block|{
name|fail
argument_list|(
literal|"Table already exists: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteTable (DynamoDB db, String tableName)
specifier|private
name|void
name|deleteTable
parameter_list|(
name|DynamoDB
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|Table
name|table
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|waitForActive
argument_list|()
expr_stmt|;
name|table
operator|.
name|delete
argument_list|()
expr_stmt|;
name|table
operator|.
name|waitForDelete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete {}, as it was not found"
argument_list|,
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConcurrentTableCreations ()
specifier|public
name|void
name|testConcurrentTableCreations
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Test only applies when DynamoDB is used for S3Guard"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|S3_METADATA_STORE_IMPL
argument_list|)
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|S3GUARD_METASTORE_DYNAMO
argument_list|)
argument_list|)
expr_stmt|;
name|AWSCredentialProviderList
name|sharedCreds
init|=
name|fs
operator|.
name|shareCredentials
argument_list|(
literal|"testConcurrentTableCreations"
argument_list|)
decl_stmt|;
comment|// close that shared copy.
name|sharedCreds
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// this is the original reference count.
name|int
name|originalRefCount
init|=
name|sharedCreds
operator|.
name|getRefCount
argument_list|()
decl_stmt|;
comment|//now init the store; this should increment the ref count.
name|DynamoDBMetadataStore
name|ms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
decl_stmt|;
name|ms
operator|.
name|initialize
argument_list|(
name|fs
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// the ref count should have gone up
name|assertEquals
argument_list|(
literal|"Credential Ref count unchanged after initializing metastore "
operator|+
name|sharedCreds
argument_list|,
name|originalRefCount
operator|+
literal|1
argument_list|,
name|sharedCreds
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|DynamoDB
name|db
init|=
name|ms
operator|.
name|getDynamoDB
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|getTestTableName
argument_list|(
literal|"testConcurrentTableCreations"
operator|+
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|Constants
operator|.
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|String
name|region
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|region
argument_list|)
condition|)
block|{
comment|// no region set, so pick it up from the test bucket
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|,
name|fs
operator|.
name|getBucketLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|concurrentOps
init|=
literal|16
decl_stmt|;
name|int
name|iterations
init|=
literal|4
decl_stmt|;
name|failIfTableExists
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|concurrentOps
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|private
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
literal|"testConcurrentTableCreations"
operator|+
name|count
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executor
operator|)
operator|.
name|prestartAllCoreThreads
argument_list|()
expr_stmt|;
name|Future
argument_list|<
name|Exception
argument_list|>
index|[]
name|futures
init|=
operator|new
name|Future
index|[
name|concurrentOps
index|]
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|concurrentOps
condition|;
name|f
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|f
decl_stmt|;
name|futures
index|[
name|f
index|]
operator|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Exception
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|Exception
name|result
init|=
literal|null
decl_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|store
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|store
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|e
expr_stmt|;
block|}
name|timer
operator|.
name|end
argument_list|(
literal|"Parallel DynamoDB client creation %d"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Parallel DynamoDB client creation {} ran from {} to {}"
argument_list|,
name|index
argument_list|,
name|timer
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|timer
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|concurrentOps
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|concurrentOps
condition|;
name|f
operator|++
control|)
block|{
name|Exception
name|outcome
init|=
name|futures
index|[
name|f
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|outcome
operator|!=
literal|null
condition|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|outcome
argument_list|)
expr_stmt|;
block|}
block|}
name|deleteTable
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|int
name|exceptionsThrown
init|=
name|exceptions
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|exceptionsThrown
operator|>
literal|0
condition|)
block|{
comment|// at least one exception was thrown. Fail the test& nest the first
comment|// exception caught
throw|throw
operator|new
name|AssertionError
argument_list|(
name|exceptionsThrown
operator|+
literal|"/"
operator|+
name|concurrentOps
operator|+
literal|" threads threw exceptions while initializing on iteration "
operator|+
name|i
argument_list|,
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|ms
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Credential Ref count unchanged after closing metastore: "
operator|+
name|sharedCreds
argument_list|,
name|originalRefCount
argument_list|,
name|sharedCreds
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

