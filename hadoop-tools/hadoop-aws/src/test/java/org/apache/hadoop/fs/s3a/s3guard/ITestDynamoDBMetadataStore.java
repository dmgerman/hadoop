begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|DynamoDB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|PrimaryKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ListTagsOfResourceRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|TableDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|s3a
operator|.
name|S3AContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Tristate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DurationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|clearBucketOption
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|PathMetadataDynamoDBTranslation
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DynamoDBMetadataStore
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test that {@link DynamoDBMetadataStore} implements {@link MetadataStore}.  *  * In this integration test, we use a real AWS DynamoDB. A  * {@link DynamoDBMetadataStore} object is created in the @BeforeClass method,  * and shared for all test in the @BeforeClass method. You will be charged  * bills for AWS S3 or DynamoDB when you run these tests.  *  * According to the base class, every test case will have independent contract  * to create a new {@link S3AFileSystem} instance and initializes it.  * A table will be created and shared between the tests; some tests also  * create their own.  *  * Important: Any new test which creates a table must do the following  *<ol>  *<li>Enable on-demand pricing.</li>  *<li>Always destroy the table, even if an assertion fails.</li>  *</ol>  * This is needed to avoid "leaking" DDB tables and running up bills.  */
end_comment

begin_class
DECL|class|ITestDynamoDBMetadataStore
specifier|public
class|class
name|ITestDynamoDBMetadataStore
extends|extends
name|MetadataStoreTestBase
block|{
DECL|field|MINUTE
specifier|public
specifier|static
specifier|final
name|int
name|MINUTE
init|=
literal|60_000
decl_stmt|;
DECL|method|ITestDynamoDBMetadataStore ()
specifier|public
name|ITestDynamoDBMetadataStore
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestDynamoDBMetadataStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimaryKey
DECL|field|VERSION_MARKER_PRIMARY_KEY
name|VERSION_MARKER_PRIMARY_KEY
init|=
name|createVersionMarkerPrimaryKey
argument_list|(
name|DynamoDBMetadataStore
operator|.
name|VERSION_MARKER
argument_list|)
decl_stmt|;
DECL|field|fileSystem
specifier|private
name|S3AFileSystem
name|fileSystem
decl_stmt|;
DECL|field|s3AContract
specifier|private
name|S3AContract
name|s3AContract
decl_stmt|;
DECL|field|fsUri
specifier|private
name|URI
name|fsUri
decl_stmt|;
DECL|field|bucket
specifier|private
name|String
name|bucket
decl_stmt|;
DECL|field|ddbmsStatic
specifier|private
specifier|static
name|DynamoDBMetadataStore
name|ddbmsStatic
decl_stmt|;
DECL|field|testDynamoDBTableName
specifier|private
specifier|static
name|String
name|testDynamoDBTableName
decl_stmt|;
comment|/**    * Create a path under the test path provided by    * the FS contract.    * @param filepath path string in    * @return a path qualified by the test filesystem    */
DECL|method|path (String filepath)
specifier|protected
name|Path
name|path
parameter_list|(
name|String
name|filepath
parameter_list|)
block|{
return|return
name|getFileSystem
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|s3AContract
operator|.
name|getTestPath
argument_list|()
argument_list|,
name|filepath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|prepareTestConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|assumeThatDynamoMetadataStoreImpl
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Test DynamoDB table name should be set to run "
operator|+
literal|"integration tests."
argument_list|,
name|testDynamoDBTableName
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|testDynamoDBTableName
argument_list|)
expr_stmt|;
name|enableOnDemand
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|s3AContract
operator|=
operator|new
name|S3AContract
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|s3AContract
operator|.
name|init
argument_list|()
expr_stmt|;
name|fileSystem
operator|=
operator|(
name|S3AFileSystem
operator|)
name|s3AContract
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
name|assume
argument_list|(
literal|"No test filesystem"
argument_list|,
name|s3AContract
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No test filesystem"
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
name|fsUri
operator|=
name|fileSystem
operator|.
name|getUri
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|fileSystem
operator|.
name|getBucket
argument_list|()
expr_stmt|;
try|try
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"MetadataStoreTestBase setup failed. Waiting for table to be "
operator|+
literal|"deleted before trying again."
argument_list|)
expr_stmt|;
name|ddbmsStatic
operator|.
name|getTable
argument_list|()
operator|.
name|waitForDelete
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClassSetup ()
specifier|public
specifier|static
name|void
name|beforeClassSetup
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|prepareTestConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|assumeThatDynamoMetadataStoreImpl
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// S3GUARD_DDB_TEST_TABLE_NAME_KEY and S3GUARD_DDB_TABLE_NAME_KEY should
comment|// be configured to use this test.
name|testDynamoDBTableName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|S3ATestConstants
operator|.
name|S3GUARD_DDB_TEST_TABLE_NAME_KEY
argument_list|)
expr_stmt|;
name|String
name|dynamoDbTableName
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"No DynamoDB table name configured in "
operator|+
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|dynamoDbTableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// We should assert that the table name is configured, so the test should
comment|// fail if it's not configured.
name|assertNotNull
argument_list|(
literal|"Test DynamoDB table name '"
operator|+
name|S3ATestConstants
operator|.
name|S3GUARD_DDB_TEST_TABLE_NAME_KEY
operator|+
literal|"'"
operator|+
literal|" should be set to run integration tests."
argument_list|,
name|testDynamoDBTableName
argument_list|)
expr_stmt|;
comment|// We should assert that the test table is not the same as the production
comment|// table, as the test table could be modified and destroyed multiple
comment|// times during the test.
name|assertNotEquals
argument_list|(
literal|"Test DynamoDB table name: "
operator|+
literal|"'"
operator|+
name|S3ATestConstants
operator|.
name|S3GUARD_DDB_TEST_TABLE_NAME_KEY
operator|+
literal|"'"
operator|+
literal|" and production table name: "
operator|+
literal|"'"
operator|+
name|S3GUARD_DDB_TABLE_NAME_KEY
operator|+
literal|"' can not be the same."
argument_list|,
name|testDynamoDBTableName
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
comment|// We can use that table in the test if these assertions are valid
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|testDynamoDBTableName
argument_list|)
expr_stmt|;
comment|// remove some prune delays
name|conf
operator|.
name|setInt
argument_list|(
name|S3GUARD_DDB_BACKGROUND_SLEEP_MSEC_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// clear all table tagging config before this test
name|conf
operator|.
name|getPropsWithPrefix
argument_list|(
name|S3GUARD_DDB_TABLE_TAG
argument_list|)
operator|.
name|keySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|propKey
lambda|->
name|conf
operator|.
name|unset
argument_list|(
name|S3GUARD_DDB_TABLE_TAG
operator|+
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the tags on the table so that it can be tested later.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tagMap
init|=
name|createTagMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tagEntry
range|:
name|tagMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_TAG
operator|+
name|tagEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|tagEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating static ddbms which will be shared between tests."
argument_list|)
expr_stmt|;
name|enableOnDemand
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ddbmsStatic
operator|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
expr_stmt|;
name|ddbmsStatic
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClassTeardown ()
specifier|public
specifier|static
name|void
name|afterClassTeardown
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Destroying static DynamoDBMetadataStore."
argument_list|)
expr_stmt|;
name|destroy
argument_list|(
name|ddbmsStatic
argument_list|)
expr_stmt|;
name|ddbmsStatic
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Destroy and then close() a metastore instance.    * Exceptions are caught and logged at debug.    * @param ddbms store -may be null.    */
DECL|method|destroy (final DynamoDBMetadataStore ddbms)
specifier|private
specifier|static
name|void
name|destroy
parameter_list|(
specifier|final
name|DynamoDBMetadataStore
name|ddbms
parameter_list|)
block|{
if|if
condition|(
name|ddbms
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|ddbms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"On ddbms shutdown"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assumeThatDynamoMetadataStoreImpl (Configuration conf)
specifier|private
specifier|static
name|void
name|assumeThatDynamoMetadataStoreImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Test only applies when DynamoDB is used for S3Guard"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|S3_METADATA_STORE_IMPL
argument_list|)
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|S3GUARD_METASTORE_DYNAMO
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This teardown does not call super.teardown() so as to avoid the DDMBS table    * from being destroyed.    *<p>    * This is potentially quite slow, depending on DDB IO Capacity and number    * of entries to forget.    */
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing data from ddbms table in teardown."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"Teardown"
argument_list|)
expr_stmt|;
comment|// The following is a way to be sure the table will be cleared and there
comment|// will be no leftovers after the test.
try|try
block|{
name|deleteAllMetadata
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Forget all metadata in the store.    * This originally did an iterate and forget, but using prune() hands off the    * bulk IO into the metastore itself; the forgetting is used    * to purge anything which wasn't pruned.    */
DECL|method|deleteAllMetadata ()
specifier|private
name|void
name|deleteAllMetadata
parameter_list|()
throws|throws
name|IOException
block|{
comment|// The following is a way to be sure the table will be cleared and there
comment|// will be no leftovers after the test.
comment|// only executed if there is a filesystem, as failure during test setup
comment|// means that strToPath will NPE.
if|if
condition|(
name|getContract
argument_list|()
operator|!=
literal|null
operator|&&
name|getContract
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|deleteMetadataUnderPath
argument_list|(
name|ddbmsStatic
argument_list|,
name|strToPath
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Delete all metadata under a path.    * Attempt to use prune first as it scales slightly better.    * @param ms store    * @param path path to prune under    * @param suppressErrors should errors be suppressed?    * @throws IOException if there is a failure and suppressErrors == false    */
DECL|method|deleteMetadataUnderPath (final DynamoDBMetadataStore ms, final Path path, final boolean suppressErrors)
specifier|public
specifier|static
name|void
name|deleteMetadataUnderPath
parameter_list|(
specifier|final
name|DynamoDBMetadataStore
name|ms
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|suppressErrors
parameter_list|)
throws|throws
name|IOException
block|{
name|ThrottleTracker
name|throttleTracker
init|=
operator|new
name|ThrottleTracker
argument_list|(
name|ms
argument_list|)
decl_stmt|;
name|int
name|forgotten
init|=
literal|0
decl_stmt|;
try|try
init|(
name|DurationInfo
name|ignored
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|true
argument_list|,
literal|"forget"
argument_list|)
init|)
block|{
name|PathMetadata
name|meta
init|=
name|ms
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DescendantsIterator
name|desc
init|=
operator|new
name|DescendantsIterator
argument_list|(
name|ms
argument_list|,
name|meta
argument_list|)
init|;
name|desc
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|forgotten
operator|++
expr_stmt|;
name|ms
operator|.
name|forgetMetadata
argument_list|(
name|desc
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Forgot {} entries"
argument_list|,
name|forgotten
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// there is no table.
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to forget entries under {}"
argument_list|,
name|path
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|suppressErrors
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Throttle statistics: {}"
argument_list|,
name|throttleTracker
argument_list|)
expr_stmt|;
block|}
DECL|method|getPathStringForPrune (String path)
annotation|@
name|Override
specifier|protected
name|String
name|getPathStringForPrune
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|b
init|=
name|getTestBucketName
argument_list|(
name|getContract
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
return|return
literal|"/"
operator|+
name|b
operator|+
literal|"/dir2"
return|;
block|}
comment|/**    * Each contract has its own S3AFileSystem and DynamoDBMetadataStore objects.    */
DECL|class|DynamoDBMSContract
specifier|private
class|class
name|DynamoDBMSContract
extends|extends
name|AbstractMSContract
block|{
DECL|method|DynamoDBMSContract (Configuration conf)
name|DynamoDBMSContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{     }
DECL|method|DynamoDBMSContract ()
name|DynamoDBMSContract
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileSystem ()
specifier|public
name|S3AFileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|ITestDynamoDBMetadataStore
operator|.
name|this
operator|.
name|fileSystem
return|;
block|}
annotation|@
name|Override
DECL|method|getMetadataStore ()
specifier|public
name|DynamoDBMetadataStore
name|getMetadataStore
parameter_list|()
block|{
return|return
name|ITestDynamoDBMetadataStore
operator|.
name|ddbmsStatic
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createContract ()
specifier|public
name|DynamoDBMSContract
name|createContract
parameter_list|()
block|{
return|return
operator|new
name|DynamoDBMSContract
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createContract (Configuration conf)
specifier|public
name|DynamoDBMSContract
name|createContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|DynamoDBMSContract
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|basicFileStatus (Path path, int size, boolean isDir)
specifier|protected
name|S3AFileStatus
name|basicFileStatus
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|size
parameter_list|,
name|boolean
name|isDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|owner
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
return|return
name|isDir
condition|?
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
name|path
argument_list|,
name|owner
argument_list|)
else|:
operator|new
name|S3AFileStatus
argument_list|(
name|size
argument_list|,
name|getModTime
argument_list|()
argument_list|,
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|owner
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Create a directory status entry.    * @param dir directory.    * @return the status    */
DECL|method|dirStatus (Path dir)
specifier|private
name|S3AFileStatus
name|dirStatus
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|basicFileStatus
argument_list|(
name|dir
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getDynamoMetadataStore ()
specifier|private
name|DynamoDBMetadataStore
name|getDynamoMetadataStore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|DynamoDBMetadataStore
operator|)
name|getContract
argument_list|()
operator|.
name|getMetadataStore
argument_list|()
return|;
block|}
DECL|method|getFileSystem ()
specifier|private
name|S3AFileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileSystem
return|;
block|}
comment|/**    * Force the configuration into DDB on demand, so that    * even if a test bucket isn't cleaned up, the cost is $0.    * @param conf configuration to patch.    */
DECL|method|enableOnDemand (Configuration conf)
specifier|public
specifier|static
name|void
name|enableOnDemand
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|S3GUARD_DDB_TABLE_CAPACITY_READ_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the configuration needed to create a table; extracts    * it from the filesystem then always patches it to be on demand.    * Why the patch? It means even if a cached FS has brought in    * some provisioned values, they get reset.    * @return a new configuration    */
DECL|method|getTableCreationConfig ()
specifier|private
name|Configuration
name|getTableCreationConfig
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|enableOnDemand
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * This tests that after initialize() using an S3AFileSystem object, the    * instance should have been initialized successfully, and tables are ACTIVE.    */
annotation|@
name|Test
DECL|method|testInitialize ()
specifier|public
name|void
name|testInitialize
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|S3AFileSystem
name|s3afs
init|=
name|this
operator|.
name|fileSystem
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|getTestTableName
argument_list|(
literal|"testInitialize"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|enableOnDemand
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
decl_stmt|;
try|try
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|s3afs
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|verifyTableInitialized
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ddbms
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedRegion
init|=
name|conf
operator|.
name|get
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|,
name|s3afs
operator|.
name|getBucketLocation
argument_list|(
name|bucket
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DynamoDB table should be in configured region or the same"
operator|+
literal|" region as S3 bucket"
argument_list|,
name|expectedRegion
argument_list|,
name|ddbms
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|destroy
argument_list|(
name|ddbms
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This tests that after initialize() using a Configuration object, the    * instance should have been initialized successfully, and tables are ACTIVE.    */
annotation|@
name|Test
DECL|method|testInitializeWithConfiguration ()
specifier|public
name|void
name|testInitializeWithConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|tableName
init|=
name|getTestTableName
argument_list|(
literal|"testInitializeWithConfiguration"
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|getTableCreationConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|)
expr_stmt|;
name|String
name|savedRegion
init|=
name|conf
operator|.
name|get
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getBucketLocation
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed because the table name is not set!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
comment|// config table name
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed because as the region is not set!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
comment|// config region
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|,
name|savedRegion
argument_list|)
expr_stmt|;
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
decl_stmt|;
try|try
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|verifyTableInitialized
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ddbms
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected key schema found!"
argument_list|,
name|keySchema
argument_list|()
argument_list|,
name|ddbms
operator|.
name|getTable
argument_list|()
operator|.
name|describe
argument_list|()
operator|.
name|getKeySchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|destroy
argument_list|(
name|ddbms
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This should really drive a parameterized test run of 5^2 entries, but it    * would require a major refactoring to set things up.    * For now, each source test has its own entry, with the destination written    * to.    * This seems to be enough to stop DDB throttling from triggering test    * timeouts.    */
DECL|field|NUM_METAS_TO_DELETE_OR_PUT
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|NUM_METAS_TO_DELETE_OR_PUT
init|=
block|{
operator|-
literal|1
block|,
comment|// null
literal|0
block|,
comment|// empty collection
literal|1
block|,
comment|// one path
name|S3GUARD_DDB_BATCH_WRITE_REQUEST_LIMIT
block|,
comment|// exact limit of a batch request
name|S3GUARD_DDB_BATCH_WRITE_REQUEST_LIMIT
operator|+
literal|1
comment|// limit + 1
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testBatchWrite00 ()
specifier|public
name|void
name|testBatchWrite00
parameter_list|()
throws|throws
name|IOException
block|{
name|doBatchWriteForOneSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBatchWrite01 ()
specifier|public
name|void
name|testBatchWrite01
parameter_list|()
throws|throws
name|IOException
block|{
name|doBatchWriteForOneSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBatchWrite02 ()
specifier|public
name|void
name|testBatchWrite02
parameter_list|()
throws|throws
name|IOException
block|{
name|doBatchWriteForOneSet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBatchWrite03 ()
specifier|public
name|void
name|testBatchWrite03
parameter_list|()
throws|throws
name|IOException
block|{
name|doBatchWriteForOneSet
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBatchWrite04 ()
specifier|public
name|void
name|testBatchWrite04
parameter_list|()
throws|throws
name|IOException
block|{
name|doBatchWriteForOneSet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that for a large batch write request, the limit is handled correctly.    * With cleanup afterwards.    */
DECL|method|doBatchWriteForOneSet (int index)
specifier|private
name|void
name|doBatchWriteForOneSet
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|numNewMetas
range|:
name|NUM_METAS_TO_DELETE_OR_PUT
control|)
block|{
name|doTestBatchWrite
argument_list|(
name|NUM_METAS_TO_DELETE_OR_PUT
index|[
name|index
index|]
argument_list|,
name|numNewMetas
argument_list|,
name|getDynamoMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The following is a way to be sure the table will be cleared and there
comment|// will be no leftovers after the test.
name|deleteMetadataUnderPath
argument_list|(
name|ddbmsStatic
argument_list|,
name|strToPath
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that for a large batch write request, the limit is handled correctly.    */
DECL|method|doTestBatchWrite (int numDelete, int numPut, DynamoDBMetadataStore ms)
specifier|private
name|void
name|doTestBatchWrite
parameter_list|(
name|int
name|numDelete
parameter_list|,
name|int
name|numPut
parameter_list|,
name|DynamoDBMetadataStore
name|ms
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/ITestDynamoDBMetadataStore_testBatchWrite_"
operator|+
name|numDelete
operator|+
literal|'_'
operator|+
name|numPut
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|root
init|=
name|fileSystem
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|oldDir
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"oldDir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|newDir
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"newDir"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestBatchWrite: oldDir={}, newDir={}"
argument_list|,
name|oldDir
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Bulk put=%d; delete=%d"
argument_list|,
name|numPut
argument_list|,
name|numDelete
argument_list|)
argument_list|)
expr_stmt|;
name|AncestorState
name|putState
init|=
name|checkNotNull
argument_list|(
name|ms
operator|.
name|initiateBulkWrite
argument_list|(
name|BulkOperationState
operator|.
name|OperationType
operator|.
name|Put
argument_list|,
name|newDir
argument_list|)
argument_list|,
literal|"No state from initiateBulkWrite()"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|dirStatus
argument_list|(
name|oldDir
argument_list|)
argument_list|)
argument_list|,
name|putState
argument_list|)
expr_stmt|;
name|ms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|dirStatus
argument_list|(
name|newDir
argument_list|)
argument_list|)
argument_list|,
name|putState
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|PathMetadata
argument_list|>
name|oldMetas
init|=
name|numDelete
operator|<
literal|0
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numDelete
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDelete
condition|;
name|i
operator|++
control|)
block|{
name|oldMetas
operator|.
name|add
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|oldDir
argument_list|,
literal|"child"
operator|+
name|i
argument_list|)
argument_list|,
name|i
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|PathMetadata
argument_list|>
name|newMetas
init|=
name|numPut
operator|<
literal|0
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numPut
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPut
condition|;
name|i
operator|++
control|)
block|{
name|newMetas
operator|.
name|add
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|newDir
argument_list|,
literal|"child"
operator|+
name|i
argument_list|)
argument_list|,
name|i
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Path
argument_list|>
name|pathsToDelete
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|oldMetas
operator|!=
literal|null
condition|)
block|{
comment|// put all metadata of old paths and verify
name|ms
operator|.
name|put
argument_list|(
operator|new
name|DirListingMetadata
argument_list|(
name|oldDir
argument_list|,
name|oldMetas
argument_list|,
literal|false
argument_list|)
argument_list|,
name|putState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Child count"
argument_list|,
literal|0
argument_list|,
name|ms
operator|.
name|listChildren
argument_list|(
name|newDir
argument_list|)
operator|.
name|withoutTombstones
argument_list|()
operator|.
name|numEntries
argument_list|()
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|listChildren
argument_list|(
name|oldDir
argument_list|)
operator|.
name|getListing
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Old Directory listing"
argument_list|)
operator|.
name|containsExactlyInAnyOrderElementsOf
argument_list|(
name|oldMetas
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CollectionUtils
operator|.
name|isEqualCollection
argument_list|(
name|oldMetas
argument_list|,
name|ms
operator|.
name|listChildren
argument_list|(
name|oldDir
argument_list|)
operator|.
name|getListing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pathsToDelete
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|oldMetas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PathMetadata
name|meta
range|:
name|oldMetas
control|)
block|{
name|pathsToDelete
operator|.
name|add
argument_list|(
name|meta
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// move the old paths to new paths and verify
name|AncestorState
name|state
init|=
name|checkNotNull
argument_list|(
name|ms
operator|.
name|initiateBulkWrite
argument_list|(
name|BulkOperationState
operator|.
name|OperationType
operator|.
name|Put
argument_list|,
name|newDir
argument_list|)
argument_list|,
literal|"No state from initiateBulkWrite()"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bulk write destination"
argument_list|,
name|newDir
argument_list|,
name|state
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
name|ThrottleTracker
name|throttleTracker
init|=
operator|new
name|ThrottleTracker
argument_list|(
name|ms
argument_list|)
decl_stmt|;
try|try
init|(
name|DurationInfo
name|ignored
init|=
operator|new
name|DurationInfo
argument_list|(
name|LOG
argument_list|,
literal|true
argument_list|,
literal|"Move"
argument_list|)
init|)
block|{
name|ms
operator|.
name|move
argument_list|(
name|pathsToDelete
argument_list|,
name|newMetas
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Throttle status {}"
argument_list|,
name|throttleTracker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of children in source directory"
argument_list|,
literal|0
argument_list|,
name|ms
operator|.
name|listChildren
argument_list|(
name|oldDir
argument_list|)
operator|.
name|withoutTombstones
argument_list|()
operator|.
name|numEntries
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newMetas
operator|!=
literal|null
condition|)
block|{
name|Assertions
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|listChildren
argument_list|(
name|newDir
argument_list|)
operator|.
name|getListing
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Directory listing"
argument_list|)
operator|.
name|containsAll
argument_list|(
name|newMetas
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newMetas
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Assertions
operator|.
name|assertThat
argument_list|(
name|state
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Size of ancestor state"
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|newMetas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testInitExistingTable ()
specifier|public
name|void
name|testInitExistingTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DynamoDBMetadataStore
name|ddbms
init|=
name|getDynamoMetadataStore
argument_list|()
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|ddbms
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|verifyTableInitialized
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
argument_list|)
expr_stmt|;
comment|// create existing table
name|ddbms
operator|.
name|initTable
argument_list|()
expr_stmt|;
name|verifyTableInitialized
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the low level version check code.    */
annotation|@
name|Test
DECL|method|testItemVersionCompatibility ()
specifier|public
name|void
name|testItemVersionCompatibility
parameter_list|()
throws|throws
name|Throwable
block|{
name|verifyVersionCompatibility
argument_list|(
literal|"table"
argument_list|,
name|createVersionMarker
argument_list|(
name|VERSION_MARKER
argument_list|,
name|VERSION
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a version marker entry without the version number field    * is rejected as incompatible with a meaningful error message.    */
annotation|@
name|Test
DECL|method|testItemLacksVersion ()
specifier|public
name|void
name|testItemLacksVersion
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|E_NOT_VERSION_MARKER
argument_list|,
parameter_list|()
lambda|->
name|verifyVersionCompatibility
argument_list|(
literal|"table"
argument_list|,
operator|new
name|Item
argument_list|()
operator|.
name|withPrimaryKey
argument_list|(
name|createVersionMarkerPrimaryKey
argument_list|(
name|VERSION_MARKER
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test versioning handling.    *<ol>    *<li>Create the table.</li>    *<li>Verify tag propagation.</li>    *<li>Delete the version marker -verify failure.</li>    *<li>Reinstate a different version marker -verify failure</li>    *</ol>    * Delete the version marker and verify that table init fails.    * This also includes the checks for tagging, which goes against all    * principles of unit tests.    * However, merging the routines saves    */
annotation|@
name|Test
DECL|method|testTableVersioning ()
specifier|public
name|void
name|testTableVersioning
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
name|getTestTableName
argument_list|(
literal|"testTableVersionRequired"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|getTableCreationConfig
argument_list|()
decl_stmt|;
name|int
name|maxRetries
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|S3GUARD_DDB_MAX_RETRIES
argument_list|,
name|S3GUARD_DDB_MAX_RETRIES_DEFAULT
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|S3GUARD_DDB_MAX_RETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|tagConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
decl_stmt|;
try|try
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|verifyTableInitialized
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
argument_list|)
decl_stmt|;
comment|// check the tagging too
name|verifyStoreTags
argument_list|(
name|createTagMap
argument_list|()
argument_list|,
name|ddbms
argument_list|)
expr_stmt|;
name|Item
name|originalVersionMarker
init|=
name|table
operator|.
name|getItem
argument_list|(
name|VERSION_MARKER_PRIMARY_KEY
argument_list|)
decl_stmt|;
name|table
operator|.
name|deleteItem
argument_list|(
name|VERSION_MARKER_PRIMARY_KEY
argument_list|)
expr_stmt|;
comment|// create existing table
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|E_NO_VERSION_MARKER
argument_list|,
parameter_list|()
lambda|->
name|ddbms
operator|.
name|initTable
argument_list|()
argument_list|)
expr_stmt|;
comment|// now add a different version marker
name|Item
name|v200
init|=
name|createVersionMarker
argument_list|(
name|VERSION_MARKER
argument_list|,
name|VERSION
operator|*
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|table
operator|.
name|putItem
argument_list|(
name|v200
argument_list|)
expr_stmt|;
comment|// create existing table
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|E_INCOMPATIBLE_VERSION
argument_list|,
parameter_list|()
lambda|->
name|ddbms
operator|.
name|initTable
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a marker with no version and expect failure
specifier|final
name|Item
name|invalidMarker
init|=
operator|new
name|Item
argument_list|()
operator|.
name|withPrimaryKey
argument_list|(
name|createVersionMarkerPrimaryKey
argument_list|(
name|VERSION_MARKER
argument_list|)
argument_list|)
operator|.
name|withLong
argument_list|(
name|TABLE_CREATED
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|table
operator|.
name|putItem
argument_list|(
name|invalidMarker
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|E_NOT_VERSION_MARKER
argument_list|,
parameter_list|()
lambda|->
name|ddbms
operator|.
name|initTable
argument_list|()
argument_list|)
expr_stmt|;
comment|// reinstate the version marker
name|table
operator|.
name|putItem
argument_list|(
name|originalVersionMarker
argument_list|)
expr_stmt|;
name|ddbms
operator|.
name|initTable
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|S3GUARD_DDB_MAX_RETRIES
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|destroy
argument_list|(
name|ddbms
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that initTable fails with IOException when table does not exist and    * table auto-creation is disabled.    */
annotation|@
name|Test
DECL|method|testFailNonexistentTable ()
specifier|public
name|void
name|testFailNonexistentTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|tableName
init|=
name|getTestTableName
argument_list|(
literal|"testFailNonexistentTable"
argument_list|)
decl_stmt|;
specifier|final
name|S3AFileSystem
name|s3afs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|s3afs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|enableOnDemand
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|String
name|b
init|=
name|fsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|clearBucketOption
argument_list|(
name|conf
argument_list|,
name|b
argument_list|,
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|)
expr_stmt|;
name|clearBucketOption
argument_list|(
name|conf
argument_list|,
name|b
argument_list|,
name|S3_METADATA_STORE_IMPL
argument_list|)
expr_stmt|;
name|clearBucketOption
argument_list|(
name|conf
argument_list|,
name|b
argument_list|,
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|s3afs
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// if an exception was not raised, a table was created.
comment|// So destroy it before failing.
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed as table does not exist and table auto-creation"
operator|+
literal|" is disabled"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{     }
block|}
comment|/**    * Test cases about root directory as it is not in the DynamoDB table.    */
annotation|@
name|Test
DECL|method|testRootDirectory ()
specifier|public
name|void
name|testRootDirectory
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DynamoDBMetadataStore
name|ddbms
init|=
name|getDynamoMetadataStore
argument_list|()
decl_stmt|;
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|fsUri
argument_list|)
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|verifyRootDirectory
argument_list|(
name|ddbms
operator|.
name|get
argument_list|(
name|rootPath
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ddbms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|rootPath
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyRootDirectory
argument_list|(
name|ddbms
operator|.
name|get
argument_list|(
name|rootPath
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRootDirectory (PathMetadata rootMeta, boolean isEmpty)
specifier|private
name|void
name|verifyRootDirectory
parameter_list|(
name|PathMetadata
name|rootMeta
parameter_list|,
name|boolean
name|isEmpty
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|rootMeta
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|status
init|=
name|rootMeta
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNKNOWN is always a valid option, but true / false should not contradict
if|if
condition|(
name|isEmpty
condition|)
block|{
name|assertNotSame
argument_list|(
literal|"Should not be marked non-empty"
argument_list|,
name|Tristate
operator|.
name|FALSE
argument_list|,
name|rootMeta
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotSame
argument_list|(
literal|"Should not be marked empty"
argument_list|,
name|Tristate
operator|.
name|TRUE
argument_list|,
name|rootMeta
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that when moving nested paths, all its ancestors up to destination    * root will also be created.    * Here is the directory tree before move:    *<pre>    * testMovePopulateAncestors    * âââ a    * âÂ Â  âââ b    * âÂ Â      âââ src    * âÂ Â          âââ dir1    * âÂ Â          âÂ Â  âââ dir2    * âÂ Â          âââ file1.txt    * âââ c    *     âââ d    *         âââ dest    *</pre>    * As part of rename(a/b/src, d/c/dest), S3A will enumerate the subtree at    * a/b/src.  This test verifies that after the move, the new subtree at    * 'dest' is reachable from the root (i.e. c/ and c/d exist in the table.    * DynamoDBMetadataStore depends on this property to do recursive delete    * without a full table scan.    */
annotation|@
name|Test
DECL|method|testMovePopulatesAncestors ()
specifier|public
name|void
name|testMovePopulatesAncestors
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DynamoDBMetadataStore
name|ddbms
init|=
name|getDynamoMetadataStore
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testRoot
init|=
literal|"/testMovePopulatesAncestors"
decl_stmt|;
specifier|final
name|String
name|srcRoot
init|=
name|testRoot
operator|+
literal|"/a/b/src"
decl_stmt|;
specifier|final
name|String
name|destRoot
init|=
name|testRoot
operator|+
literal|"/c/d/e/dest"
decl_stmt|;
specifier|final
name|Path
name|nestedPath1
init|=
name|strToPath
argument_list|(
name|srcRoot
operator|+
literal|"/file1.txt"
argument_list|)
decl_stmt|;
name|AncestorState
name|bulkWrite
init|=
name|ddbms
operator|.
name|initiateBulkWrite
argument_list|(
name|BulkOperationState
operator|.
name|OperationType
operator|.
name|Put
argument_list|,
name|nestedPath1
argument_list|)
decl_stmt|;
name|ddbms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|nestedPath1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
name|bulkWrite
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|nestedPath2
init|=
name|strToPath
argument_list|(
name|srcRoot
operator|+
literal|"/dir1/dir2"
argument_list|)
decl_stmt|;
name|ddbms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|nestedPath2
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|bulkWrite
argument_list|)
expr_stmt|;
comment|// We don't put the destRoot path here, since put() would create ancestor
comment|// entries, and we want to ensure that move() does it, instead.
comment|// Build enumeration of src / dest paths and do the move()
specifier|final
name|Collection
argument_list|<
name|Path
argument_list|>
name|fullSourcePaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|strToPath
argument_list|(
name|srcRoot
argument_list|)
argument_list|,
name|strToPath
argument_list|(
name|srcRoot
operator|+
literal|"/dir1"
argument_list|)
argument_list|,
name|strToPath
argument_list|(
name|srcRoot
operator|+
literal|"/dir1/dir2"
argument_list|)
argument_list|,
name|strToPath
argument_list|(
name|srcRoot
operator|+
literal|"/file1.txt"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|finalFile
init|=
name|destRoot
operator|+
literal|"/file1.txt"
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|PathMetadata
argument_list|>
name|pathsToCreate
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|strToPath
argument_list|(
name|destRoot
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|strToPath
argument_list|(
name|destRoot
operator|+
literal|"/dir1"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|strToPath
argument_list|(
name|destRoot
operator|+
literal|"/dir1/dir2"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|strToPath
argument_list|(
name|finalFile
argument_list|)
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ddbms
operator|.
name|move
argument_list|(
name|fullSourcePaths
argument_list|,
name|pathsToCreate
argument_list|,
name|bulkWrite
argument_list|)
expr_stmt|;
name|bulkWrite
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// assert that all the ancestors should have been populated automatically
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|testRoot
operator|+
literal|"/c"
argument_list|,
name|testRoot
operator|+
literal|"/c/d"
argument_list|,
name|testRoot
operator|+
literal|"/c/d/e"
argument_list|,
name|destRoot
argument_list|,
name|destRoot
operator|+
literal|"/dir1"
argument_list|,
name|destRoot
operator|+
literal|"/dir1/dir2"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|assertCached
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|verifyInAncestor
argument_list|(
name|bulkWrite
argument_list|,
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Also check moved files while we're at it
name|assertCached
argument_list|(
name|finalFile
argument_list|)
expr_stmt|;
name|verifyInAncestor
argument_list|(
name|bulkWrite
argument_list|,
name|finalFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAncestorOverwriteConflict ()
specifier|public
name|void
name|testAncestorOverwriteConflict
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|DynamoDBMetadataStore
name|ddbms
init|=
name|getDynamoMetadataStore
argument_list|()
decl_stmt|;
name|String
name|testRoot
init|=
literal|"/"
operator|+
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|parent
init|=
name|testRoot
operator|+
literal|"/parent"
decl_stmt|;
name|Path
name|parentPath
init|=
name|strToPath
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|String
name|child
init|=
name|parent
operator|+
literal|"/child"
decl_stmt|;
name|Path
name|childPath
init|=
name|strToPath
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|String
name|grandchild
init|=
name|child
operator|+
literal|"/grandchild"
decl_stmt|;
name|Path
name|grandchildPath
init|=
name|strToPath
argument_list|(
name|grandchild
argument_list|)
decl_stmt|;
name|String
name|child2
init|=
name|parent
operator|+
literal|"/child2"
decl_stmt|;
name|String
name|grandchild2
init|=
name|child2
operator|+
literal|"/grandchild2"
decl_stmt|;
name|Path
name|grandchild2Path
init|=
name|strToPath
argument_list|(
name|grandchild2
argument_list|)
decl_stmt|;
name|AncestorState
name|bulkWrite
init|=
name|ddbms
operator|.
name|initiateBulkWrite
argument_list|(
name|BulkOperationState
operator|.
name|OperationType
operator|.
name|Put
argument_list|,
name|parentPath
argument_list|)
decl_stmt|;
comment|// writing a child creates ancestors
name|ddbms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|childPath
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
name|bulkWrite
argument_list|)
expr_stmt|;
name|verifyInAncestor
argument_list|(
name|bulkWrite
argument_list|,
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyInAncestor
argument_list|(
name|bulkWrite
argument_list|,
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// overwrite an ancestor with a file entry in the same operation
comment|// is an error.
name|intercept
argument_list|(
name|PathIOException
operator|.
name|class
argument_list|,
name|E_INCONSISTENT_UPDATE
argument_list|,
parameter_list|()
lambda|->
name|ddbms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|parentPath
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
name|bulkWrite
argument_list|)
argument_list|)
expr_stmt|;
comment|// now put a file under the child and expect the put operation
comment|// to fail fast, because the ancestor state includes a file at a parent.
name|intercept
argument_list|(
name|PathIOException
operator|.
name|class
argument_list|,
name|E_INCONSISTENT_UPDATE
argument_list|,
parameter_list|()
lambda|->
name|ddbms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|grandchildPath
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
name|bulkWrite
argument_list|)
argument_list|)
expr_stmt|;
comment|// and expect a failure for directory update under the child
name|DirListingMetadata
name|grandchildListing
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|grandchildPath
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|PathIOException
operator|.
name|class
argument_list|,
name|E_INCONSISTENT_UPDATE
argument_list|,
parameter_list|()
lambda|->
name|ddbms
operator|.
name|put
argument_list|(
name|grandchildListing
argument_list|,
name|bulkWrite
argument_list|)
argument_list|)
expr_stmt|;
comment|// but a directory update under another path is fine
name|DirListingMetadata
name|grandchild2Listing
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|grandchild2Path
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ddbms
operator|.
name|put
argument_list|(
name|grandchild2Listing
argument_list|,
name|bulkWrite
argument_list|)
expr_stmt|;
comment|// and it creates a new entry for its parent
name|verifyInAncestor
argument_list|(
name|bulkWrite
argument_list|,
name|child2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that a path has an entry in the ancestor state.    * @param state ancestor state    * @param path path to look for    * @param isDirectory is it a directory    * @return the value    * @throws IOException IO failure    * @throws AssertionError assertion failure.    */
DECL|method|verifyInAncestor (AncestorState state, String path, final boolean isDirectory)
specifier|private
name|DDBPathMetadata
name|verifyInAncestor
parameter_list|(
name|AncestorState
name|state
parameter_list|,
name|String
name|path
parameter_list|,
specifier|final
name|boolean
name|isDirectory
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|p
init|=
name|strToPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Path "
operator|+
name|p
operator|+
literal|" not found in ancestor state"
argument_list|,
name|state
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DDBPathMetadata
name|md
init|=
name|state
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Ancestor value for "
operator|+
name|path
argument_list|,
name|isDirectory
condition|?
name|md
operator|.
name|getFileStatus
argument_list|()
operator|.
name|isDirectory
argument_list|()
else|:
name|md
operator|.
name|getFileStatus
argument_list|()
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|md
return|;
block|}
annotation|@
name|Test
DECL|method|testDeleteTable ()
specifier|public
name|void
name|testDeleteTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
name|getTestTableName
argument_list|(
literal|"testDeleteTable"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|fsUri
argument_list|)
argument_list|,
literal|"/"
operator|+
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|S3AFileSystem
name|s3afs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|getTableCreationConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|enableOnDemand
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
decl_stmt|;
try|try
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|s3afs
argument_list|,
operator|new
name|S3Guard
operator|.
name|TtlTimeProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// we can list the empty table
name|ddbms
operator|.
name|listChildren
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|DynamoDB
name|dynamoDB
init|=
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
decl_stmt|;
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|verifyTableNotExist
argument_list|(
name|tableName
argument_list|,
name|dynamoDB
argument_list|)
expr_stmt|;
comment|// delete table once more; the ResourceNotFoundException swallowed
comment|// silently
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|verifyTableNotExist
argument_list|(
name|tableName
argument_list|,
name|dynamoDB
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|"Should have failed after the table is destroyed!"
argument_list|,
parameter_list|()
lambda|->
name|ddbms
operator|.
name|listChildren
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|"Destroyed table should raise FileNotFoundException when pruned"
argument_list|,
parameter_list|()
lambda|->
name|ddbms
operator|.
name|prune
argument_list|(
name|PruneMode
operator|.
name|ALL_BY_MODTIME
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|destroy
argument_list|(
name|ddbms
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyStoreTags (final Map<String, String> tagMap, final DynamoDBMetadataStore store)
specifier|protected
name|void
name|verifyStoreTags
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tagMap
parameter_list|,
specifier|final
name|DynamoDBMetadataStore
name|store
parameter_list|)
block|{
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|listTagsOfStore
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|actual
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tags
operator|.
name|forEach
argument_list|(
name|t
lambda|->
name|actual
operator|.
name|put
argument_list|(
name|t
operator|.
name|getKey
argument_list|()
argument_list|,
name|t
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Tags from DDB table"
argument_list|)
operator|.
name|containsExactlyEntriesOf
argument_list|(
name|tagMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tagMap
operator|.
name|size
argument_list|()
argument_list|,
name|tags
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|listTagsOfStore (final DynamoDBMetadataStore store)
specifier|protected
name|List
argument_list|<
name|Tag
argument_list|>
name|listTagsOfStore
parameter_list|(
specifier|final
name|DynamoDBMetadataStore
name|store
parameter_list|)
block|{
name|ListTagsOfResourceRequest
name|listTagsOfResourceRequest
init|=
operator|new
name|ListTagsOfResourceRequest
argument_list|()
operator|.
name|withResourceArn
argument_list|(
name|store
operator|.
name|getTable
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|.
name|getTableArn
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|store
operator|.
name|getAmazonDynamoDB
argument_list|()
operator|.
name|listTagsOfResource
argument_list|(
name|listTagsOfResourceRequest
argument_list|)
operator|.
name|getTags
argument_list|()
return|;
block|}
DECL|method|createTagMap ()
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createTagMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tagMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tagMap
operator|.
name|put
argument_list|(
literal|"hello"
argument_list|,
literal|"dynamo"
argument_list|)
expr_stmt|;
name|tagMap
operator|.
name|put
argument_list|(
literal|"tag"
argument_list|,
literal|"youre it"
argument_list|)
expr_stmt|;
return|return
name|tagMap
return|;
block|}
DECL|method|tagConfiguration (Configuration conf)
specifier|private
specifier|static
name|void
name|tagConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// set the tags on the table so that it can be tested later.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tagMap
init|=
name|createTagMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tagEntry
range|:
name|tagMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_TAG
operator|+
name|tagEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|tagEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetEmptyDirFlagCanSetTrue ()
specifier|public
name|void
name|testGetEmptyDirFlagCanSetTrue
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|authoritativeDirectoryListing
init|=
literal|true
decl_stmt|;
name|testGetEmptyDirFlagCanSetTrueOrUnknown
argument_list|(
name|authoritativeDirectoryListing
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetEmptyDirFlagCanSetUnknown ()
specifier|public
name|void
name|testGetEmptyDirFlagCanSetUnknown
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|authoritativeDirectoryListing
init|=
literal|false
decl_stmt|;
name|testGetEmptyDirFlagCanSetTrueOrUnknown
argument_list|(
name|authoritativeDirectoryListing
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetEmptyDirFlagCanSetTrueOrUnknown (boolean auth)
specifier|private
name|void
name|testGetEmptyDirFlagCanSetTrueOrUnknown
parameter_list|(
name|boolean
name|auth
parameter_list|)
throws|throws
name|IOException
block|{
comment|// setup
specifier|final
name|DynamoDBMetadataStore
name|ms
init|=
name|getDynamoMetadataStore
argument_list|()
decl_stmt|;
name|String
name|rootPath
init|=
literal|"/testAuthoritativeEmptyDirFlag-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|String
name|filePath
init|=
name|rootPath
operator|+
literal|"/file1"
decl_stmt|;
specifier|final
name|Path
name|dirToPut
init|=
name|fileSystem
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|rootPath
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fileToPut
init|=
name|fileSystem
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|filePath
argument_list|)
argument_list|)
decl_stmt|;
comment|// Create non-auth DirListingMetadata
name|DirListingMetadata
name|dlm
init|=
operator|new
name|DirListingMetadata
argument_list|(
name|dirToPut
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|auth
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
condition|)
block|{
name|assertEquals
argument_list|(
name|Tristate
operator|.
name|TRUE
argument_list|,
name|dlm
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Tristate
operator|.
name|UNKNOWN
argument_list|,
name|dlm
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|auth
argument_list|,
name|dlm
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with non-authoritative listing, empty dir
name|ms
operator|.
name|put
argument_list|(
name|dlm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|PathMetadata
name|pmdResultEmpty
init|=
name|ms
operator|.
name|get
argument_list|(
name|dirToPut
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
condition|)
block|{
name|assertEquals
argument_list|(
name|Tristate
operator|.
name|TRUE
argument_list|,
name|pmdResultEmpty
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Tristate
operator|.
name|UNKNOWN
argument_list|,
name|pmdResultEmpty
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test with non-authoritative listing, non-empty dir
name|dlm
operator|.
name|put
argument_list|(
name|basicFileStatus
argument_list|(
name|fileToPut
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|put
argument_list|(
name|dlm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|PathMetadata
name|pmdResultNotEmpty
init|=
name|ms
operator|.
name|get
argument_list|(
name|dirToPut
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Tristate
operator|.
name|FALSE
argument_list|,
name|pmdResultNotEmpty
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This validates the table is created and ACTIVE in DynamoDB.    *    * This should not rely on the {@link DynamoDBMetadataStore} implementation.    * Return the table    */
DECL|method|verifyTableInitialized (String tableName, DynamoDB dynamoDB)
specifier|private
name|Table
name|verifyTableInitialized
parameter_list|(
name|String
name|tableName
parameter_list|,
name|DynamoDB
name|dynamoDB
parameter_list|)
block|{
specifier|final
name|Table
name|table
init|=
name|dynamoDB
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|TableDescription
name|td
init|=
name|table
operator|.
name|describe
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ACTIVE"
argument_list|,
name|td
operator|.
name|getTableStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
comment|/**    * This validates the table is not found in DynamoDB.    *    * This should not rely on the {@link DynamoDBMetadataStore} implementation.    */
DECL|method|verifyTableNotExist (String tableName, DynamoDB dynamoDB)
specifier|private
name|void
name|verifyTableNotExist
parameter_list|(
name|String
name|tableName
parameter_list|,
name|DynamoDB
name|dynamoDB
parameter_list|)
throws|throws
name|Exception
block|{
name|intercept
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|dynamoDB
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|describe
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestTableName (String suffix)
specifier|private
name|String
name|getTestTableName
parameter_list|(
name|String
name|suffix
parameter_list|)
block|{
return|return
name|getTestDynamoTablePrefix
argument_list|(
name|s3AContract
operator|.
name|getConf
argument_list|()
argument_list|)
operator|+
name|suffix
return|;
block|}
annotation|@
name|Test
DECL|method|testPruneAgainstInvalidTable ()
specifier|public
name|void
name|testPruneAgainstInvalidTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Create an Invalid listing and prune it"
argument_list|)
expr_stmt|;
name|DynamoDBMetadataStore
name|ms
init|=
name|ITestDynamoDBMetadataStore
operator|.
name|ddbmsStatic
decl_stmt|;
name|String
name|base
init|=
literal|"/"
operator|+
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|subdir
init|=
name|base
operator|+
literal|"/subdir"
decl_stmt|;
name|Path
name|subDirPath
init|=
name|strToPath
argument_list|(
name|subdir
argument_list|)
decl_stmt|;
name|createNewDirs
argument_list|(
name|base
argument_list|,
name|subdir
argument_list|)
expr_stmt|;
name|String
name|subFile
init|=
name|subdir
operator|+
literal|"/file1"
decl_stmt|;
name|Path
name|subFilePath
init|=
name|strToPath
argument_list|(
name|subFile
argument_list|)
decl_stmt|;
name|putListStatusFiles
argument_list|(
name|subdir
argument_list|,
literal|true
argument_list|,
name|subFile
argument_list|)
expr_stmt|;
specifier|final
name|DDBPathMetadata
name|subDirMetadataOrig
init|=
name|ms
operator|.
name|get
argument_list|(
name|subDirPath
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|subDirMetadataOrig
operator|.
name|isAuthoritativeDir
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Subdirectory %s"
argument_list|,
name|subDirMetadataOrig
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// now let's corrupt the graph by putting a file
comment|// over the subdirectory
name|long
name|now
init|=
name|getTime
argument_list|()
decl_stmt|;
name|long
name|oldTime
init|=
name|now
operator|-
name|MINUTE
decl_stmt|;
name|putFile
argument_list|(
name|subdir
argument_list|,
name|oldTime
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getFile
argument_list|(
name|subdir
argument_list|)
expr_stmt|;
name|Path
name|basePath
init|=
name|strToPath
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|DirListingMetadata
name|listing
init|=
name|ms
operator|.
name|listChildren
argument_list|(
name|basePath
argument_list|)
decl_stmt|;
name|String
name|childText
init|=
name|listing
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Listing {}"
argument_list|,
name|childText
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PathMetadata
argument_list|>
name|childList
init|=
name|listing
operator|.
name|getListing
argument_list|()
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|childList
argument_list|)
operator|.
name|as
argument_list|(
literal|"listing of %s with %s"
argument_list|,
name|basePath
argument_list|,
name|childText
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PathMetadata
index|[]
name|pm
init|=
operator|new
name|PathMetadata
index|[
literal|0
index|]
decl_stmt|;
name|S3AFileStatus
name|status
init|=
name|childList
operator|.
name|toArray
argument_list|(
name|pm
argument_list|)
index|[
literal|0
index|]
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|status
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
literal|"Entry %s"
argument_list|,
operator|(
name|Object
operator|)
name|pm
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|getNonNull
argument_list|(
name|subFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Pruning"
argument_list|)
expr_stmt|;
comment|// now prune
name|ms
operator|.
name|prune
argument_list|(
name|PruneMode
operator|.
name|ALL_BY_MODTIME
argument_list|,
name|now
operator|+
name|MINUTE
argument_list|,
name|subdir
argument_list|)
expr_stmt|;
name|ms
operator|.
name|get
argument_list|(
name|subFilePath
argument_list|)
expr_stmt|;
specifier|final
name|PathMetadata
name|subDirMetadataFinal
init|=
name|getNonNull
argument_list|(
name|subdir
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|subDirMetadataFinal
operator|.
name|getFileStatus
argument_list|()
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Subdirectory entry %s is still a file"
argument_list|,
name|subDirMetadataFinal
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutFileDirectlyUnderTombstone ()
specifier|public
name|void
name|testPutFileDirectlyUnderTombstone
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Put a file under a tombstone; verify the tombstone"
argument_list|)
expr_stmt|;
name|String
name|base
init|=
literal|"/"
operator|+
name|getMethodName
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|getTime
argument_list|()
decl_stmt|;
name|putTombstone
argument_list|(
name|base
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|PathMetadata
name|baseMeta1
init|=
name|get
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|baseMeta1
operator|.
name|isDeleted
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
literal|"Metadata %s"
argument_list|,
name|baseMeta1
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|child
init|=
name|base
operator|+
literal|"/file"
decl_stmt|;
name|putFile
argument_list|(
name|child
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getDirectory
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPruneTombstoneUnderTombstone ()
specifier|public
name|void
name|testPruneTombstoneUnderTombstone
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Put a tombsteone under a tombstone, prune the pair"
argument_list|)
expr_stmt|;
name|String
name|base
init|=
literal|"/"
operator|+
name|getMethodName
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|getTime
argument_list|()
decl_stmt|;
name|String
name|dir
init|=
name|base
operator|+
literal|"/dir"
decl_stmt|;
name|putTombstone
argument_list|(
name|dir
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertIsTombstone
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// parent dir is created
name|assertCached
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|String
name|child
init|=
name|dir
operator|+
literal|"/file"
decl_stmt|;
name|String
name|child2
init|=
name|dir
operator|+
literal|"/file2"
decl_stmt|;
comment|// this will actually mark the parent as a dir,
comment|// so that lists of that dir will pick up the tombstone
name|putTombstone
argument_list|(
name|child
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// tombstone the dir
name|putTombstone
argument_list|(
name|dir
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// add another child entry; this will update the dir entry from being
comment|// tombstone to dir
name|putFile
argument_list|(
name|child2
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// put a tombstone over the directory again
name|putTombstone
argument_list|(
name|dir
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// verify
name|assertIsTombstone
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|//prune all tombstones
name|getDynamoMetadataStore
argument_list|()
operator|.
name|prune
argument_list|(
name|PruneMode
operator|.
name|TOMBSTONES_BY_LASTUPDATED
argument_list|,
name|now
operator|+
name|MINUTE
argument_list|)
expr_stmt|;
comment|// the child is gone
name|assertNotFound
argument_list|(
name|child
argument_list|)
expr_stmt|;
comment|// *AND* the parent dir has not been created
name|assertNotFound
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// the child2 entry is still there, though it's now orphan (the store isn't
comment|// meeting the rule "all entries must have a parent which exists"
name|getFile
argument_list|(
name|child2
argument_list|)
expr_stmt|;
comment|// a full prune will still find and delete it, as this
comment|// doesn't walk the tree
name|getDynamoMetadataStore
argument_list|()
operator|.
name|prune
argument_list|(
name|PruneMode
operator|.
name|ALL_BY_MODTIME
argument_list|,
name|now
operator|+
name|MINUTE
argument_list|)
expr_stmt|;
name|assertNotFound
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|assertNotFound
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPruneFileUnderTombstone ()
specifier|public
name|void
name|testPruneFileUnderTombstone
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Put a file under a tombstone, prune the pair"
argument_list|)
expr_stmt|;
name|String
name|base
init|=
literal|"/"
operator|+
name|getMethodName
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|getTime
argument_list|()
decl_stmt|;
name|String
name|dir
init|=
name|base
operator|+
literal|"/dir"
decl_stmt|;
name|putTombstone
argument_list|(
name|dir
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertIsTombstone
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// parent dir is created
name|assertCached
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|String
name|child
init|=
name|dir
operator|+
literal|"/file"
decl_stmt|;
comment|// this will actually mark the parent as a dir,
comment|// so that lists of that dir will pick up the tombstone
name|putFile
argument_list|(
name|child
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// dir is reinstated
name|getDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// put a tombstone
name|putTombstone
argument_list|(
name|dir
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// prune all entries
name|getDynamoMetadataStore
argument_list|()
operator|.
name|prune
argument_list|(
name|PruneMode
operator|.
name|ALL_BY_MODTIME
argument_list|,
name|now
operator|+
name|MINUTE
argument_list|)
expr_stmt|;
comment|// the child is gone
name|assertNotFound
argument_list|(
name|child
argument_list|)
expr_stmt|;
comment|// *AND* the parent dir has not been created
name|assertNotFound
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Keep in sync with code changes in S3AFileSystem.finishedWrite() so that    * the production code can be tested here.    */
annotation|@
name|Test
DECL|method|testPutFileDeepUnderTombstone ()
specifier|public
name|void
name|testPutFileDeepUnderTombstone
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Put a file two levels under a tombstone"
argument_list|)
expr_stmt|;
name|String
name|base
init|=
literal|"/"
operator|+
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|dir
init|=
name|base
operator|+
literal|"/dir"
decl_stmt|;
name|long
name|now
init|=
name|getTime
argument_list|()
decl_stmt|;
comment|// creating a file MUST create its parents
name|String
name|child
init|=
name|dir
operator|+
literal|"/file"
decl_stmt|;
name|Path
name|childPath
init|=
name|strToPath
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|putFile
argument_list|(
name|child
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getFile
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|getDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|getDirectory
argument_list|(
name|base
argument_list|)
expr_stmt|;
comment|// now put the tombstone
name|putTombstone
argument_list|(
name|base
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertIsTombstone
argument_list|(
name|base
argument_list|)
expr_stmt|;
comment|/*- --------------------------------------------*/
comment|/* Begin S3FileSystem.finishedWrite() sequence. */
comment|/* ---------------------------------------------*/
name|AncestorState
name|ancestorState
init|=
name|getDynamoMetadataStore
argument_list|()
operator|.
name|initiateBulkWrite
argument_list|(
name|BulkOperationState
operator|.
name|OperationType
operator|.
name|Put
argument_list|,
name|childPath
argument_list|)
decl_stmt|;
name|S3Guard
operator|.
name|addAncestors
argument_list|(
name|getDynamoMetadataStore
argument_list|()
argument_list|,
name|childPath
argument_list|,
name|getTtlTimeProvider
argument_list|()
argument_list|,
name|ancestorState
argument_list|)
expr_stmt|;
comment|// now write the file again.
name|putFile
argument_list|(
name|child
argument_list|,
name|now
argument_list|,
name|ancestorState
argument_list|)
expr_stmt|;
comment|/* -------------------------------------------*/
comment|/* End S3FileSystem.finishedWrite() sequence. */
comment|/* -------------------------------------------*/
name|getFile
argument_list|(
name|child
argument_list|)
expr_stmt|;
comment|// the ancestor will now exist.
name|getDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|getDirectory
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDumpTable ()
specifier|public
name|void
name|testDumpTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Dump the table contents, but not the S3 Store"
argument_list|)
expr_stmt|;
name|String
name|target
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.dir"
argument_list|,
literal|"target"
argument_list|)
decl_stmt|;
name|File
name|buildDir
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|"ITestDynamoDBMetadataStore"
decl_stmt|;
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|buildDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|DumpS3GuardDynamoTable
operator|.
name|dumpStore
argument_list|(
literal|null
argument_list|,
name|ddbmsStatic
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|destFile
argument_list|,
name|fsUri
argument_list|)
expr_stmt|;
name|File
name|storeFile
init|=
operator|new
name|File
argument_list|(
name|buildDir
argument_list|,
name|name
operator|+
name|DumpS3GuardDynamoTable
operator|.
name|SCAN_CSV
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|storeFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|line
range|:
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|readLines
argument_list|(
name|in
argument_list|)
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPurgeTableNoForce ()
specifier|public
name|void
name|testPurgeTableNoForce
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Purge the table"
argument_list|)
expr_stmt|;
name|putTombstone
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
argument_list|,
name|getTime
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|r
init|=
name|PurgeS3GuardDynamoTable
operator|.
name|purgeStore
argument_list|(
literal|null
argument_list|,
name|ddbmsStatic
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|fsUri
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|r
operator|.
name|getLeft
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"entries found in %s"
argument_list|,
name|r
argument_list|)
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|r
operator|.
name|getRight
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"entries deleted in %s"
argument_list|,
name|r
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPurgeTableForce ()
specifier|public
name|void
name|testPurgeTableForce
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Purge the table -force"
argument_list|)
expr_stmt|;
name|putTombstone
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
argument_list|,
name|getTime
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|r
init|=
name|PurgeS3GuardDynamoTable
operator|.
name|purgeStore
argument_list|(
literal|null
argument_list|,
name|ddbmsStatic
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|fsUri
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|r
operator|.
name|getLeft
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"entries found in %s"
argument_list|,
name|r
argument_list|)
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|r
operator|.
name|getRight
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"entries deleted in %s"
argument_list|,
name|r
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
comment|// second iteration will have zero entries
name|r
operator|=
name|PurgeS3GuardDynamoTable
operator|.
name|purgeStore
argument_list|(
literal|null
argument_list|,
name|ddbmsStatic
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|fsUri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|r
operator|.
name|getLeft
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"entries found in %s"
argument_list|,
name|r
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|r
operator|.
name|getRight
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"entries deleted in %s"
argument_list|,
name|r
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
block|}
comment|/**    * Assert that an entry exists and is a directory.    * @param pathStr path    * @throws IOException IO failure.    */
DECL|method|verifyAuthDirStatus (String pathStr, boolean authDirFlag)
specifier|protected
name|DDBPathMetadata
name|verifyAuthDirStatus
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|boolean
name|authDirFlag
parameter_list|)
throws|throws
name|IOException
block|{
name|DDBPathMetadata
name|md
init|=
operator|(
name|DDBPathMetadata
operator|)
name|getDirectory
argument_list|(
name|pathStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"isAuthoritativeDir() mismatch in "
operator|+
name|md
argument_list|,
name|authDirFlag
argument_list|,
name|md
operator|.
name|isAuthoritativeDir
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|md
return|;
block|}
block|}
end_class

end_unit

