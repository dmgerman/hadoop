begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|DynamoDB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|PrimaryKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|document
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ListTagsOfResourceRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ProvisionedThroughputDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|TableDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|s3a
operator|.
name|S3AContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Tristate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|PathMetadataDynamoDBTranslation
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DynamoDBMetadataStore
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test that {@link DynamoDBMetadataStore} implements {@link MetadataStore}.  *  * In this integration test, we use a real AWS DynamoDB. A  * {@link DynamoDBMetadataStore} object is created in the @BeforeClass method,  * and shared for all test in the @BeforeClass method. You will be charged  * bills for AWS S3 or DynamoDB when you run these tests.  *  * According to the base class, every test case will have independent contract  * to create a new {@link S3AFileSystem} instance and initializes it.  * A table will be created and shared between the tests,  */
end_comment

begin_class
DECL|class|ITestDynamoDBMetadataStore
specifier|public
class|class
name|ITestDynamoDBMetadataStore
extends|extends
name|MetadataStoreTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestDynamoDBMetadataStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimaryKey
DECL|field|VERSION_MARKER_PRIMARY_KEY
name|VERSION_MARKER_PRIMARY_KEY
init|=
name|createVersionMarkerPrimaryKey
argument_list|(
name|DynamoDBMetadataStore
operator|.
name|VERSION_MARKER
argument_list|)
decl_stmt|;
DECL|field|fileSystem
specifier|private
name|S3AFileSystem
name|fileSystem
decl_stmt|;
DECL|field|s3AContract
specifier|private
name|S3AContract
name|s3AContract
decl_stmt|;
DECL|field|fsUri
specifier|private
name|URI
name|fsUri
decl_stmt|;
DECL|field|bucket
specifier|private
name|String
name|bucket
decl_stmt|;
DECL|field|ddbmsStatic
specifier|private
specifier|static
name|DynamoDBMetadataStore
name|ddbmsStatic
decl_stmt|;
DECL|field|testDynamoDBTableName
specifier|private
specifier|static
name|String
name|testDynamoDBTableName
decl_stmt|;
comment|/**    * Create a path under the test path provided by    * the FS contract.    * @param filepath path string in    * @return a path qualified by the test filesystem    */
DECL|method|path (String filepath)
specifier|protected
name|Path
name|path
parameter_list|(
name|String
name|filepath
parameter_list|)
block|{
return|return
name|getFileSystem
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|s3AContract
operator|.
name|getTestPath
argument_list|()
argument_list|,
name|filepath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|prepareTestConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatDynamoMetadataStoreImpl
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Test DynamoDB table name should be set to run "
operator|+
literal|"integration tests."
argument_list|,
name|testDynamoDBTableName
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|testDynamoDBTableName
argument_list|)
expr_stmt|;
name|s3AContract
operator|=
operator|new
name|S3AContract
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|s3AContract
operator|.
name|init
argument_list|()
expr_stmt|;
name|fileSystem
operator|=
operator|(
name|S3AFileSystem
operator|)
name|s3AContract
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
name|assume
argument_list|(
literal|"No test filesystem"
argument_list|,
name|s3AContract
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No test filesystem"
argument_list|,
name|fileSystem
argument_list|)
expr_stmt|;
name|fsUri
operator|=
name|fileSystem
operator|.
name|getUri
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|fileSystem
operator|.
name|getBucket
argument_list|()
expr_stmt|;
try|try
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"MetadataStoreTestBase setup failed. Waiting for table to be "
operator|+
literal|"deleted before trying again."
argument_list|)
expr_stmt|;
name|ddbmsStatic
operator|.
name|getTable
argument_list|()
operator|.
name|waitForDelete
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClassSetup ()
specifier|public
specifier|static
name|void
name|beforeClassSetup
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|prepareTestConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatDynamoMetadataStoreImpl
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testDynamoDBTableName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|S3GUARD_DDB_TEST_TABLE_NAME_KEY
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Test DynamoDB table name should be set to run "
operator|+
literal|"integration tests."
argument_list|,
name|testDynamoDBTableName
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|testDynamoDBTableName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating static ddbms which will be shared between tests."
argument_list|)
expr_stmt|;
name|ddbmsStatic
operator|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
expr_stmt|;
name|ddbmsStatic
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClassTeardown ()
specifier|public
specifier|static
name|void
name|afterClassTeardown
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Destroying static DynamoDBMetadataStore."
argument_list|)
expr_stmt|;
if|if
condition|(
name|ddbmsStatic
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ddbmsStatic
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to destroy tables in teardown"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|ddbmsStatic
argument_list|)
expr_stmt|;
name|ddbmsStatic
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|assertThatDynamoMetadataStoreImpl (Configuration conf)
specifier|private
specifier|static
name|void
name|assertThatDynamoMetadataStoreImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Test only applies when DynamoDB is used for S3Guard"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|S3_METADATA_STORE_IMPL
argument_list|)
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|S3GUARD_METASTORE_DYNAMO
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing data from ddbms table in teardown."
argument_list|)
expr_stmt|;
comment|// The following is a way to be sure the table will be cleared and there
comment|// will be no leftovers after the test.
name|PathMetadata
name|meta
init|=
name|ddbmsStatic
operator|.
name|get
argument_list|(
name|strToPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DescendantsIterator
name|desc
init|=
operator|new
name|DescendantsIterator
argument_list|(
name|ddbmsStatic
argument_list|,
name|meta
argument_list|)
init|;
name|desc
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ddbmsStatic
operator|.
name|forgetMetadata
argument_list|(
name|desc
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fileSystem
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Each contract has its own S3AFileSystem and DynamoDBMetadataStore objects.    */
DECL|class|DynamoDBMSContract
specifier|private
class|class
name|DynamoDBMSContract
extends|extends
name|AbstractMSContract
block|{
DECL|method|DynamoDBMSContract (Configuration conf)
name|DynamoDBMSContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{     }
DECL|method|DynamoDBMSContract ()
name|DynamoDBMSContract
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileSystem ()
specifier|public
name|S3AFileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|ITestDynamoDBMetadataStore
operator|.
name|this
operator|.
name|fileSystem
return|;
block|}
annotation|@
name|Override
DECL|method|getMetadataStore ()
specifier|public
name|DynamoDBMetadataStore
name|getMetadataStore
parameter_list|()
block|{
return|return
name|ITestDynamoDBMetadataStore
operator|.
name|ddbmsStatic
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createContract ()
specifier|public
name|DynamoDBMSContract
name|createContract
parameter_list|()
block|{
return|return
operator|new
name|DynamoDBMSContract
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createContract (Configuration conf)
specifier|public
name|DynamoDBMSContract
name|createContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|DynamoDBMSContract
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|basicFileStatus (Path path, int size, boolean isDir)
name|FileStatus
name|basicFileStatus
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|size
parameter_list|,
name|boolean
name|isDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|owner
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
return|return
name|isDir
condition|?
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
name|path
argument_list|,
name|owner
argument_list|)
else|:
operator|new
name|S3AFileStatus
argument_list|(
name|size
argument_list|,
name|getModTime
argument_list|()
argument_list|,
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|owner
argument_list|)
return|;
block|}
DECL|method|getDynamoMetadataStore ()
specifier|private
name|DynamoDBMetadataStore
name|getDynamoMetadataStore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|DynamoDBMetadataStore
operator|)
name|getContract
argument_list|()
operator|.
name|getMetadataStore
argument_list|()
return|;
block|}
DECL|method|getFileSystem ()
specifier|private
name|S3AFileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileSystem
return|;
block|}
comment|/**    * This tests that after initialize() using an S3AFileSystem object, the    * instance should have been initialized successfully, and tables are ACTIVE.    */
annotation|@
name|Test
DECL|method|testInitialize ()
specifier|public
name|void
name|testInitialize
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|S3AFileSystem
name|s3afs
init|=
name|this
operator|.
name|fileSystem
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
literal|"testInitialize"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|s3afs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|s3afs
argument_list|)
expr_stmt|;
name|verifyTableInitialized
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ddbms
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedRegion
init|=
name|conf
operator|.
name|get
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|,
name|s3afs
operator|.
name|getBucketLocation
argument_list|(
name|bucket
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DynamoDB table should be in configured region or the same"
operator|+
literal|" region as S3 bucket"
argument_list|,
name|expectedRegion
argument_list|,
name|ddbms
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This tests that after initialize() using a Configuration object, the    * instance should have been initialized successfully, and tables are ACTIVE.    */
annotation|@
name|Test
DECL|method|testInitializeWithConfiguration ()
specifier|public
name|void
name|testInitializeWithConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|tableName
init|=
literal|"testInitializeWithConfiguration"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|)
expr_stmt|;
name|String
name|savedRegion
init|=
name|conf
operator|.
name|get
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getBucketLocation
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed because the table name is not set!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
comment|// config table name
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed because as the region is not set!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
comment|// config region
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_REGION_KEY
argument_list|,
name|savedRegion
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifyTableInitialized
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ddbms
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected key schema found!"
argument_list|,
name|keySchema
argument_list|()
argument_list|,
name|ddbms
operator|.
name|getTable
argument_list|()
operator|.
name|describe
argument_list|()
operator|.
name|getKeySchema
argument_list|()
argument_list|)
expr_stmt|;
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that for a large batch write request, the limit is handled correctly.    */
annotation|@
name|Test
DECL|method|testBatchWrite ()
specifier|public
name|void
name|testBatchWrite
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
index|[]
name|numMetasToDeleteOrPut
init|=
block|{
operator|-
literal|1
block|,
comment|// null
literal|0
block|,
comment|// empty collection
literal|1
block|,
comment|// one path
name|S3GUARD_DDB_BATCH_WRITE_REQUEST_LIMIT
block|,
comment|// exact limit of a batch request
name|S3GUARD_DDB_BATCH_WRITE_REQUEST_LIMIT
operator|+
literal|1
comment|// limit + 1
block|}
decl_stmt|;
name|DynamoDBMetadataStore
name|ms
init|=
name|getDynamoMetadataStore
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|numOldMetas
range|:
name|numMetasToDeleteOrPut
control|)
block|{
for|for
control|(
name|int
name|numNewMetas
range|:
name|numMetasToDeleteOrPut
control|)
block|{
name|doTestBatchWrite
argument_list|(
name|numOldMetas
argument_list|,
name|numNewMetas
argument_list|,
name|ms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doTestBatchWrite (int numDelete, int numPut, DynamoDBMetadataStore ms)
specifier|private
name|void
name|doTestBatchWrite
parameter_list|(
name|int
name|numDelete
parameter_list|,
name|int
name|numPut
parameter_list|,
name|DynamoDBMetadataStore
name|ms
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/ITestDynamoDBMetadataStore_testBatchWrite_"
operator|+
name|numDelete
operator|+
literal|'_'
operator|+
name|numPut
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|root
init|=
name|fileSystem
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|oldDir
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"oldDir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|newDir
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"newDir"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestBatchWrite: oldDir={}, newDir={}"
argument_list|,
name|oldDir
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
name|ms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|oldDir
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|newDir
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|PathMetadata
argument_list|>
name|oldMetas
init|=
name|numDelete
operator|<
literal|0
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numDelete
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDelete
condition|;
name|i
operator|++
control|)
block|{
name|oldMetas
operator|.
name|add
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|oldDir
argument_list|,
literal|"child"
operator|+
name|i
argument_list|)
argument_list|,
name|i
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|PathMetadata
argument_list|>
name|newMetas
init|=
name|numPut
operator|<
literal|0
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numPut
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPut
condition|;
name|i
operator|++
control|)
block|{
name|newMetas
operator|.
name|add
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|newDir
argument_list|,
literal|"child"
operator|+
name|i
argument_list|)
argument_list|,
name|i
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Path
argument_list|>
name|pathsToDelete
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|oldMetas
operator|!=
literal|null
condition|)
block|{
comment|// put all metadata of old paths and verify
name|ms
operator|.
name|put
argument_list|(
operator|new
name|DirListingMetadata
argument_list|(
name|oldDir
argument_list|,
name|oldMetas
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ms
operator|.
name|listChildren
argument_list|(
name|newDir
argument_list|)
operator|.
name|withoutTombstones
argument_list|()
operator|.
name|numEntries
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CollectionUtils
operator|.
name|isEqualCollection
argument_list|(
name|oldMetas
argument_list|,
name|ms
operator|.
name|listChildren
argument_list|(
name|oldDir
argument_list|)
operator|.
name|getListing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pathsToDelete
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|oldMetas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PathMetadata
name|meta
range|:
name|oldMetas
control|)
block|{
name|pathsToDelete
operator|.
name|add
argument_list|(
name|meta
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// move the old paths to new paths and verify
name|ms
operator|.
name|move
argument_list|(
name|pathsToDelete
argument_list|,
name|newMetas
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ms
operator|.
name|listChildren
argument_list|(
name|oldDir
argument_list|)
operator|.
name|withoutTombstones
argument_list|()
operator|.
name|numEntries
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newMetas
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|CollectionUtils
operator|.
name|isEqualCollection
argument_list|(
name|newMetas
argument_list|,
name|ms
operator|.
name|listChildren
argument_list|(
name|newDir
argument_list|)
operator|.
name|getListing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInitExistingTable ()
specifier|public
name|void
name|testInitExistingTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DynamoDBMetadataStore
name|ddbms
init|=
name|getDynamoMetadataStore
argument_list|()
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|ddbms
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|verifyTableInitialized
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
argument_list|)
expr_stmt|;
comment|// create existing table
name|ddbms
operator|.
name|initTable
argument_list|()
expr_stmt|;
name|verifyTableInitialized
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the low level version check code.    */
annotation|@
name|Test
DECL|method|testItemVersionCompatibility ()
specifier|public
name|void
name|testItemVersionCompatibility
parameter_list|()
throws|throws
name|Throwable
block|{
name|verifyVersionCompatibility
argument_list|(
literal|"table"
argument_list|,
name|createVersionMarker
argument_list|(
name|VERSION_MARKER
argument_list|,
name|VERSION
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a version marker entry without the version number field    * is rejected as incompatible with a meaningful error message.    */
annotation|@
name|Test
DECL|method|testItemLacksVersion ()
specifier|public
name|void
name|testItemLacksVersion
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|E_NOT_VERSION_MARKER
argument_list|,
parameter_list|()
lambda|->
name|verifyVersionCompatibility
argument_list|(
literal|"table"
argument_list|,
operator|new
name|Item
argument_list|()
operator|.
name|withPrimaryKey
argument_list|(
name|createVersionMarkerPrimaryKey
argument_list|(
name|VERSION_MARKER
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete the version marker and verify that table init fails.    */
annotation|@
name|Test
DECL|method|testTableVersionRequired ()
specifier|public
name|void
name|testTableVersionRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"testTableVersionRequired"
decl_stmt|;
name|Configuration
name|conf
init|=
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|int
name|maxRetries
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|S3GUARD_DDB_MAX_RETRIES
argument_list|,
name|S3GUARD_DDB_MAX_RETRIES_DEFAULT
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|S3GUARD_DDB_MAX_RETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|verifyTableInitialized
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|deleteItem
argument_list|(
name|VERSION_MARKER_PRIMARY_KEY
argument_list|)
expr_stmt|;
comment|// create existing table
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|E_NO_VERSION_MARKER
argument_list|,
parameter_list|()
lambda|->
name|ddbms
operator|.
name|initTable
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|S3GUARD_DDB_MAX_RETRIES
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set the version value to a different number and verify that    * table init fails.    */
annotation|@
name|Test
DECL|method|testTableVersionMismatch ()
specifier|public
name|void
name|testTableVersionMismatch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"testTableVersionMismatch"
decl_stmt|;
name|Configuration
name|conf
init|=
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|verifyTableInitialized
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|deleteItem
argument_list|(
name|VERSION_MARKER_PRIMARY_KEY
argument_list|)
expr_stmt|;
name|Item
name|v200
init|=
name|createVersionMarker
argument_list|(
name|VERSION_MARKER
argument_list|,
literal|200
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|table
operator|.
name|putItem
argument_list|(
name|v200
argument_list|)
expr_stmt|;
comment|// create existing table
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|E_INCOMPATIBLE_VERSION
argument_list|,
parameter_list|()
lambda|->
name|ddbms
operator|.
name|initTable
argument_list|()
argument_list|)
expr_stmt|;
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that initTable fails with IOException when table does not exist and    * table auto-creation is disabled.    */
annotation|@
name|Test
DECL|method|testFailNonexistentTable ()
specifier|public
name|void
name|testFailNonexistentTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|tableName
init|=
literal|"testFailNonexistentTable"
decl_stmt|;
specifier|final
name|S3AFileSystem
name|s3afs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|s3afs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|s3afs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed as table does not exist and table auto-creation"
operator|+
literal|" is disabled"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{     }
block|}
comment|/**    * Test cases about root directory as it is not in the DynamoDB table.    */
annotation|@
name|Test
DECL|method|testRootDirectory ()
specifier|public
name|void
name|testRootDirectory
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DynamoDBMetadataStore
name|ddbms
init|=
name|getDynamoMetadataStore
argument_list|()
decl_stmt|;
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|fsUri
argument_list|)
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|verifyRootDirectory
argument_list|(
name|ddbms
operator|.
name|get
argument_list|(
name|rootPath
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ddbms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
operator|new
name|S3AFileStatus
argument_list|(
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|rootPath
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRootDirectory
argument_list|(
name|ddbms
operator|.
name|get
argument_list|(
name|rootPath
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRootDirectory (PathMetadata rootMeta, boolean isEmpty)
specifier|private
name|void
name|verifyRootDirectory
parameter_list|(
name|PathMetadata
name|rootMeta
parameter_list|,
name|boolean
name|isEmpty
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|rootMeta
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|status
init|=
name|rootMeta
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNKNOWN is always a valid option, but true / false should not contradict
if|if
condition|(
name|isEmpty
condition|)
block|{
name|assertNotSame
argument_list|(
literal|"Should not be marked non-empty"
argument_list|,
name|Tristate
operator|.
name|FALSE
argument_list|,
name|rootMeta
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotSame
argument_list|(
literal|"Should not be marked empty"
argument_list|,
name|Tristate
operator|.
name|TRUE
argument_list|,
name|rootMeta
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that when moving nested paths, all its ancestors up to destination    * root will also be created.    * Here is the directory tree before move:    *<pre>    * testMovePopulateAncestors    * âââ a    * âÂ Â  âââ b    * âÂ Â      âââ src    * âÂ Â          âââ dir1    * âÂ Â          âÂ Â  âââ dir2    * âÂ Â          âââ file1.txt    * âââ c    *     âââ d    *         âââ dest    *</pre>    * As part of rename(a/b/src, d/c/dest), S3A will enumerate the subtree at    * a/b/src.  This test verifies that after the move, the new subtree at    * 'dest' is reachable from the root (i.e. c/ and c/d exist in the table.    * DynamoDBMetadataStore depends on this property to do recursive delete    * without a full table scan.    */
annotation|@
name|Test
DECL|method|testMovePopulatesAncestors ()
specifier|public
name|void
name|testMovePopulatesAncestors
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DynamoDBMetadataStore
name|ddbms
init|=
name|getDynamoMetadataStore
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testRoot
init|=
literal|"/testMovePopulatesAncestors"
decl_stmt|;
specifier|final
name|String
name|srcRoot
init|=
name|testRoot
operator|+
literal|"/a/b/src"
decl_stmt|;
specifier|final
name|String
name|destRoot
init|=
name|testRoot
operator|+
literal|"/c/d/e/dest"
decl_stmt|;
specifier|final
name|Path
name|nestedPath1
init|=
name|strToPath
argument_list|(
name|srcRoot
operator|+
literal|"/file1.txt"
argument_list|)
decl_stmt|;
name|ddbms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|nestedPath1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|nestedPath2
init|=
name|strToPath
argument_list|(
name|srcRoot
operator|+
literal|"/dir1/dir2"
argument_list|)
decl_stmt|;
name|ddbms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|nestedPath2
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// We don't put the destRoot path here, since put() would create ancestor
comment|// entries, and we want to ensure that move() does it, instead.
comment|// Build enumeration of src / dest paths and do the move()
specifier|final
name|Collection
argument_list|<
name|Path
argument_list|>
name|fullSourcePaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|strToPath
argument_list|(
name|srcRoot
argument_list|)
argument_list|,
name|strToPath
argument_list|(
name|srcRoot
operator|+
literal|"/dir1"
argument_list|)
argument_list|,
name|strToPath
argument_list|(
name|srcRoot
operator|+
literal|"/dir1/dir2"
argument_list|)
argument_list|,
name|strToPath
argument_list|(
name|srcRoot
operator|+
literal|"/file1.txt"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|PathMetadata
argument_list|>
name|pathsToCreate
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|strToPath
argument_list|(
name|destRoot
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|strToPath
argument_list|(
name|destRoot
operator|+
literal|"/dir1"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|strToPath
argument_list|(
name|destRoot
operator|+
literal|"/dir1/dir2"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PathMetadata
argument_list|(
name|basicFileStatus
argument_list|(
name|strToPath
argument_list|(
name|destRoot
operator|+
literal|"/file1.txt"
argument_list|)
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ddbms
operator|.
name|move
argument_list|(
name|fullSourcePaths
argument_list|,
name|pathsToCreate
argument_list|)
expr_stmt|;
comment|// assert that all the ancestors should have been populated automatically
name|assertCached
argument_list|(
name|testRoot
operator|+
literal|"/c"
argument_list|)
expr_stmt|;
name|assertCached
argument_list|(
name|testRoot
operator|+
literal|"/c/d"
argument_list|)
expr_stmt|;
name|assertCached
argument_list|(
name|testRoot
operator|+
literal|"/c/d/e"
argument_list|)
expr_stmt|;
name|assertCached
argument_list|(
name|destRoot
comment|/* /c/d/e/dest */
argument_list|)
expr_stmt|;
comment|// Also check moved files while we're at it
name|assertCached
argument_list|(
name|destRoot
operator|+
literal|"/dir1"
argument_list|)
expr_stmt|;
name|assertCached
argument_list|(
name|destRoot
operator|+
literal|"/dir1/dir2"
argument_list|)
expr_stmt|;
name|assertCached
argument_list|(
name|destRoot
operator|+
literal|"/file1.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProvisionTable ()
specifier|public
name|void
name|testProvisionTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|tableName
init|=
literal|"testProvisionTable"
decl_stmt|;
name|Configuration
name|conf
init|=
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DynamoDB
name|dynamoDB
init|=
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
decl_stmt|;
specifier|final
name|ProvisionedThroughputDescription
name|oldProvision
init|=
name|dynamoDB
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|describe
argument_list|()
operator|.
name|getProvisionedThroughput
argument_list|()
decl_stmt|;
name|ddbms
operator|.
name|provisionTable
argument_list|(
name|oldProvision
operator|.
name|getReadCapacityUnits
argument_list|()
operator|*
literal|2
argument_list|,
name|oldProvision
operator|.
name|getWriteCapacityUnits
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|ddbms
operator|.
name|initTable
argument_list|()
expr_stmt|;
specifier|final
name|ProvisionedThroughputDescription
name|newProvision
init|=
name|dynamoDB
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|describe
argument_list|()
operator|.
name|getProvisionedThroughput
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Old provision = {}, new provision = {}"
argument_list|,
name|oldProvision
argument_list|,
name|newProvision
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldProvision
operator|.
name|getReadCapacityUnits
argument_list|()
operator|*
literal|2
argument_list|,
name|newProvision
operator|.
name|getReadCapacityUnits
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldProvision
operator|.
name|getWriteCapacityUnits
argument_list|()
operator|*
literal|2
argument_list|,
name|newProvision
operator|.
name|getWriteCapacityUnits
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteTable ()
specifier|public
name|void
name|testDeleteTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
literal|"testDeleteTable"
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|fsUri
argument_list|)
argument_list|,
literal|"/"
operator|+
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|S3AFileSystem
name|s3afs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|s3afs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|s3afs
argument_list|)
expr_stmt|;
comment|// we can list the empty table
name|ddbms
operator|.
name|listChildren
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|DynamoDB
name|dynamoDB
init|=
name|ddbms
operator|.
name|getDynamoDB
argument_list|()
decl_stmt|;
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|verifyTableNotExist
argument_list|(
name|tableName
argument_list|,
name|dynamoDB
argument_list|)
expr_stmt|;
comment|// delete table once more; be ResourceNotFoundException swallowed silently
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|verifyTableNotExist
argument_list|(
name|tableName
argument_list|,
name|dynamoDB
argument_list|)
expr_stmt|;
try|try
block|{
comment|// we can no longer list the destroyed table
name|ddbms
operator|.
name|listChildren
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed after the table is destroyed!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{       }
name|ddbms
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTableTagging ()
specifier|public
name|void
name|testTableTagging
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// clear all table tagging config before this test
name|conf
operator|.
name|getPropsWithPrefix
argument_list|(
name|S3GUARD_DDB_TABLE_TAG
argument_list|)
operator|.
name|keySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|propKey
lambda|->
name|conf
operator|.
name|unset
argument_list|(
name|S3GUARD_DDB_TABLE_TAG
operator|+
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
literal|"testTableTagging-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tagMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tagMap
operator|.
name|put
argument_list|(
literal|"hello"
argument_list|,
literal|"dynamo"
argument_list|)
expr_stmt|;
name|tagMap
operator|.
name|put
argument_list|(
literal|"tag"
argument_list|,
literal|"youre it"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tagEntry
range|:
name|tagMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|S3GUARD_DDB_TABLE_TAG
operator|+
name|tagEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|tagEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|DynamoDBMetadataStore
name|ddbms
init|=
operator|new
name|DynamoDBMetadataStore
argument_list|()
init|)
block|{
name|ddbms
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ddbms
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|ddbms
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|ListTagsOfResourceRequest
name|listTagsOfResourceRequest
init|=
operator|new
name|ListTagsOfResourceRequest
argument_list|()
operator|.
name|withResourceArn
argument_list|(
name|ddbms
operator|.
name|getTable
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|.
name|getTableArn
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|ddbms
operator|.
name|getAmazonDynamoDB
argument_list|()
operator|.
name|listTagsOfResource
argument_list|(
name|listTagsOfResourceRequest
argument_list|)
operator|.
name|getTags
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|tagMap
operator|.
name|size
argument_list|()
argument_list|,
name|tags
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tagMap
operator|.
name|get
argument_list|(
name|tag
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|tag
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This validates the table is created and ACTIVE in DynamoDB.    *    * This should not rely on the {@link DynamoDBMetadataStore} implementation.    * Return the table    */
DECL|method|verifyTableInitialized (String tableName, DynamoDB dynamoDB)
specifier|private
name|Table
name|verifyTableInitialized
parameter_list|(
name|String
name|tableName
parameter_list|,
name|DynamoDB
name|dynamoDB
parameter_list|)
block|{
specifier|final
name|Table
name|table
init|=
name|dynamoDB
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|TableDescription
name|td
init|=
name|table
operator|.
name|describe
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ACTIVE"
argument_list|,
name|td
operator|.
name|getTableStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
comment|/**    * This validates the table is not found in DynamoDB.    *    * This should not rely on the {@link DynamoDBMetadataStore} implementation.    */
DECL|method|verifyTableNotExist (String tableName, DynamoDB dynamoDB)
specifier|private
name|void
name|verifyTableNotExist
parameter_list|(
name|String
name|tableName
parameter_list|,
name|DynamoDB
name|dynamoDB
parameter_list|)
throws|throws
name|Exception
block|{
name|intercept
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|dynamoDB
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|describe
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

