begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageStatistics
import|;
end_import

begin_comment
comment|/**  * Class to track storage statistics of a filesystem, generate diffs.  */
end_comment

begin_class
DECL|class|StorageStatisticsTracker
specifier|public
class|class
name|StorageStatisticsTracker
block|{
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|stats
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|stats
decl_stmt|;
DECL|method|StorageStatisticsTracker (FileSystem fs)
specifier|public
name|StorageStatisticsTracker
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|snapshot
argument_list|()
expr_stmt|;
block|}
DECL|method|mark ()
specifier|public
name|void
name|mark
parameter_list|()
block|{
name|stats
operator|=
name|snapshot
argument_list|()
expr_stmt|;
block|}
DECL|method|compare (Map<String, Long> current)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|compare
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|current
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|diff
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|stats
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|stats
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Long
name|latest
init|=
name|current
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|latest
operator|!=
literal|null
operator|&&
operator|!
name|latest
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|diff
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|-
name|latest
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|diff
return|;
block|}
DECL|method|compareToCurrent ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|compareToCurrent
parameter_list|()
block|{
return|return
name|compare
argument_list|(
name|snapshot
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toString (Map<String, Long> map)
specifier|public
name|String
name|toString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
parameter_list|)
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|"="
argument_list|)
operator|.
name|join
argument_list|(
name|map
argument_list|)
return|;
block|}
DECL|method|snapshot ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|snapshot
parameter_list|()
block|{
name|StatsIterator
name|values
init|=
name|latestValues
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|snapshot
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|stats
operator|==
literal|null
condition|?
literal|0
else|:
name|stats
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageStatistics
operator|.
name|LongStatistic
name|value
range|:
name|values
control|)
block|{
name|snapshot
operator|.
name|put
argument_list|(
name|value
operator|.
name|getName
argument_list|()
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|snapshot
return|;
block|}
DECL|method|latestValues ()
specifier|public
name|StatsIterator
name|latestValues
parameter_list|()
block|{
return|return
operator|new
name|StatsIterator
argument_list|(
name|fs
operator|.
name|getStorageStatistics
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Provide an iterator to the stats.    */
DECL|class|StatsIterator
specifier|public
specifier|static
class|class
name|StatsIterator
implements|implements
name|Iterable
argument_list|<
name|StorageStatistics
operator|.
name|LongStatistic
argument_list|>
block|{
DECL|field|statistics
specifier|private
specifier|final
name|StorageStatistics
name|statistics
decl_stmt|;
DECL|method|StatsIterator (StorageStatistics statistics)
specifier|public
name|StatsIterator
parameter_list|(
name|StorageStatistics
name|statistics
parameter_list|)
block|{
name|this
operator|.
name|statistics
operator|=
name|statistics
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|StorageStatistics
operator|.
name|LongStatistic
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|statistics
operator|.
name|getLongStatistics
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

