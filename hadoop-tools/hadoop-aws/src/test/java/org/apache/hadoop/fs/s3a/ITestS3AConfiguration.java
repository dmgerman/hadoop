begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|S3ClientOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|reflect
operator|.
name|FieldUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3native
operator|.
name|S3xLoginHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
operator|.
name|TEST_FS_S3A_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * S3A tests for configuration.  */
end_comment

begin_class
DECL|class|ITestS3AConfiguration
specifier|public
class|class
name|ITestS3AConfiguration
block|{
DECL|field|EXAMPLE_ID
specifier|private
specifier|static
specifier|final
name|String
name|EXAMPLE_ID
init|=
literal|"AKASOMEACCESSKEY"
decl_stmt|;
DECL|field|EXAMPLE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|EXAMPLE_KEY
init|=
literal|"RGV0cm9pdCBSZ/WQgY2xl/YW5lZCB1cAEXAMPLE"
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|fs
specifier|private
name|S3AFileSystem
name|fs
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3AConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
name|S3ATestConstants
operator|.
name|S3A_TEST_TIMEOUT
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|tempDir
specifier|public
specifier|final
name|TemporaryFolder
name|tempDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
comment|/**    * Test if custom endpoint is picked up.    *<p>    * The test expects {@link S3ATestConstants#CONFIGURATION_TEST_ENDPOINT}    * to be defined in the Configuration    * describing the endpoint of the bucket to which TEST_FS_S3A_NAME points    * (i.e. "s3-eu-west-1.amazonaws.com" if the bucket is located in Ireland).    * Evidently, the bucket has to be hosted in the region denoted by the    * endpoint for the test to succeed.    *<p>    * More info and the list of endpoint identifiers:    * @see<a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">endpoint list</a>.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testEndpoint ()
specifier|public
name|void
name|testEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|String
name|endpoint
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|S3ATestConstants
operator|.
name|CONFIGURATION_TEST_ENDPOINT
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Custom endpoint test skipped as "
operator|+
name|S3ATestConstants
operator|.
name|CONFIGURATION_TEST_ENDPOINT
operator|+
literal|"config "
operator|+
literal|"setting was not detected"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|ENDPOINT
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AmazonS3
name|s3
init|=
name|fs
operator|.
name|getAmazonS3ClientForTesting
argument_list|(
literal|"test endpoint"
argument_list|)
decl_stmt|;
name|String
name|endPointRegion
init|=
literal|""
decl_stmt|;
comment|// Differentiate handling of "s3-" and "s3." based endpoint identifiers
name|String
index|[]
name|endpointParts
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|endpoint
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpointParts
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|endPointRegion
operator|=
name|endpointParts
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|endpointParts
operator|.
name|length
operator|==
literal|4
condition|)
block|{
name|endPointRegion
operator|=
name|endpointParts
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unexpected endpoint"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Endpoint config setting and bucket location differ: "
argument_list|,
name|endPointRegion
argument_list|,
name|s3
operator|.
name|getBucketLocation
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyConnection ()
specifier|public
name|void
name|testProxyConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|MAX_ERROR_RETRIES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|PROXY_HOST
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|PROXY_PORT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|proxy
init|=
name|conf
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|PROXY_HOST
argument_list|)
operator|+
literal|":"
operator|+
name|conf
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|PROXY_PORT
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a connection error for proxy server at "
operator|+
name|proxy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AWSClientIOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyPortWithoutHost ()
specifier|public
name|void
name|testProxyPortWithoutHost
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|Constants
operator|.
name|PROXY_HOST
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|MAX_ERROR_RETRIES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|PROXY_PORT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a proxy configuration error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|msg
operator|.
name|contains
argument_list|(
name|Constants
operator|.
name|PROXY_HOST
argument_list|)
operator|&&
operator|!
name|msg
operator|.
name|contains
argument_list|(
name|Constants
operator|.
name|PROXY_PORT
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAutomaticProxyPortSelection ()
specifier|public
name|void
name|testAutomaticProxyPortSelection
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|Constants
operator|.
name|PROXY_PORT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|MAX_ERROR_RETRIES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|PROXY_HOST
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SECURE_CONNECTIONS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a connection error for proxy server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AWSClientIOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SECURE_CONNECTIONS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a connection error for proxy server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AWSClientIOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testUsernameInconsistentWithPassword ()
specifier|public
name|void
name|testUsernameInconsistentWithPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|MAX_ERROR_RETRIES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|PROXY_HOST
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|PROXY_PORT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|PROXY_USERNAME
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a connection error for proxy server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|msg
operator|.
name|contains
argument_list|(
name|Constants
operator|.
name|PROXY_USERNAME
argument_list|)
operator|&&
operator|!
name|msg
operator|.
name|contains
argument_list|(
name|Constants
operator|.
name|PROXY_PASSWORD
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|MAX_ERROR_RETRIES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|PROXY_HOST
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|PROXY_PORT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|PROXY_PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a connection error for proxy server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|msg
operator|.
name|contains
argument_list|(
name|Constants
operator|.
name|PROXY_USERNAME
argument_list|)
operator|&&
operator|!
name|msg
operator|.
name|contains
argument_list|(
name|Constants
operator|.
name|PROXY_PASSWORD
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCredsFromCredentialProvider ()
specifier|public
name|void
name|testCredsFromCredentialProvider
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up conf to have a cred provider
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|File
name|file
init|=
name|tempDir
operator|.
name|newFile
argument_list|(
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|jks
init|=
name|ProviderUtils
operator|.
name|nestURIForLocalJavaKeyStoreProvider
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|jks
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|provisionAccessKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|ACCESS_KEY
argument_list|,
name|EXAMPLE_ID
operator|+
literal|"LJM"
argument_list|)
expr_stmt|;
name|S3xLoginHelper
operator|.
name|Login
name|creds
init|=
name|S3AUtils
operator|.
name|getAWSAccessKeys
argument_list|(
operator|new
name|URI
argument_list|(
literal|"s3a://foobar"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AccessKey incorrect."
argument_list|,
name|EXAMPLE_ID
argument_list|,
name|creds
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SecretKey incorrect."
argument_list|,
name|EXAMPLE_KEY
argument_list|,
name|creds
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|provisionAccessKeys (final Configuration conf)
name|void
name|provisionAccessKeys
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// add our creds to the provider
specifier|final
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|Constants
operator|.
name|ACCESS_KEY
argument_list|,
name|EXAMPLE_ID
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|Constants
operator|.
name|SECRET_KEY
argument_list|,
name|EXAMPLE_KEY
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCredsFromUserInfo ()
specifier|public
name|void
name|testCredsFromUserInfo
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up conf to have a cred provider
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|File
name|file
init|=
name|tempDir
operator|.
name|newFile
argument_list|(
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|jks
init|=
name|ProviderUtils
operator|.
name|nestURIForLocalJavaKeyStoreProvider
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|jks
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|provisionAccessKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|ACCESS_KEY
argument_list|,
name|EXAMPLE_ID
operator|+
literal|"LJM"
argument_list|)
expr_stmt|;
name|URI
name|uriWithUserInfo
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://123:456@foobar"
argument_list|)
decl_stmt|;
name|S3xLoginHelper
operator|.
name|Login
name|creds
init|=
name|S3AUtils
operator|.
name|getAWSAccessKeys
argument_list|(
name|uriWithUserInfo
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AccessKey incorrect."
argument_list|,
literal|"123"
argument_list|,
name|creds
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SecretKey incorrect."
argument_list|,
literal|"456"
argument_list|,
name|creds
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIDFromUserInfoSecretFromCredentialProvider ()
specifier|public
name|void
name|testIDFromUserInfoSecretFromCredentialProvider
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up conf to have a cred provider
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|File
name|file
init|=
name|tempDir
operator|.
name|newFile
argument_list|(
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|jks
init|=
name|ProviderUtils
operator|.
name|nestURIForLocalJavaKeyStoreProvider
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|jks
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|provisionAccessKeys
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|ACCESS_KEY
argument_list|,
name|EXAMPLE_ID
operator|+
literal|"LJM"
argument_list|)
expr_stmt|;
name|URI
name|uriWithUserInfo
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://123@foobar"
argument_list|)
decl_stmt|;
name|S3xLoginHelper
operator|.
name|Login
name|creds
init|=
name|S3AUtils
operator|.
name|getAWSAccessKeys
argument_list|(
name|uriWithUserInfo
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AccessKey incorrect."
argument_list|,
literal|"123"
argument_list|,
name|creds
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SecretKey incorrect."
argument_list|,
name|EXAMPLE_KEY
argument_list|,
name|creds
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecretFromCredentialProviderIDFromConfig ()
specifier|public
name|void
name|testSecretFromCredentialProviderIDFromConfig
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up conf to have a cred provider
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|File
name|file
init|=
name|tempDir
operator|.
name|newFile
argument_list|(
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|jks
init|=
name|ProviderUtils
operator|.
name|nestURIForLocalJavaKeyStoreProvider
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|jks
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// add our creds to the provider
specifier|final
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|Constants
operator|.
name|SECRET_KEY
argument_list|,
name|EXAMPLE_KEY
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|ACCESS_KEY
argument_list|,
name|EXAMPLE_ID
argument_list|)
expr_stmt|;
name|S3xLoginHelper
operator|.
name|Login
name|creds
init|=
name|S3AUtils
operator|.
name|getAWSAccessKeys
argument_list|(
operator|new
name|URI
argument_list|(
literal|"s3a://foobar"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AccessKey incorrect."
argument_list|,
name|EXAMPLE_ID
argument_list|,
name|creds
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SecretKey incorrect."
argument_list|,
name|EXAMPLE_KEY
argument_list|,
name|creds
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIDFromCredentialProviderSecretFromConfig ()
specifier|public
name|void
name|testIDFromCredentialProviderSecretFromConfig
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up conf to have a cred provider
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|File
name|file
init|=
name|tempDir
operator|.
name|newFile
argument_list|(
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|jks
init|=
name|ProviderUtils
operator|.
name|nestURIForLocalJavaKeyStoreProvider
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|jks
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// add our creds to the provider
specifier|final
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|Constants
operator|.
name|ACCESS_KEY
argument_list|,
name|EXAMPLE_ID
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SECRET_KEY
argument_list|,
name|EXAMPLE_KEY
argument_list|)
expr_stmt|;
name|S3xLoginHelper
operator|.
name|Login
name|creds
init|=
name|S3AUtils
operator|.
name|getAWSAccessKeys
argument_list|(
operator|new
name|URI
argument_list|(
literal|"s3a://foobar"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AccessKey incorrect."
argument_list|,
name|EXAMPLE_ID
argument_list|,
name|creds
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SecretKey incorrect."
argument_list|,
name|EXAMPLE_KEY
argument_list|,
name|creds
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExcludingS3ACredentialProvider ()
specifier|public
name|void
name|testExcludingS3ACredentialProvider
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up conf to have a cred provider
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|File
name|file
init|=
name|tempDir
operator|.
name|newFile
argument_list|(
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|jks
init|=
name|ProviderUtils
operator|.
name|nestURIForLocalJavaKeyStoreProvider
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"jceks://s3a/foobar,"
operator|+
name|jks
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// first make sure that the s3a based provider is removed
name|Configuration
name|c
init|=
name|ProviderUtils
operator|.
name|excludeIncompatibleCredentialProviders
argument_list|(
name|conf
argument_list|,
name|S3AFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|newPath
init|=
name|conf
operator|.
name|get
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Provider Path incorrect"
argument_list|,
name|newPath
operator|.
name|contains
argument_list|(
literal|"s3a://"
argument_list|)
argument_list|)
expr_stmt|;
comment|// now let's make sure the new path is created by the S3AFileSystem
comment|// and the integration still works. Let's provision the keys through
comment|// the altered configuration instance and then try and access them
comment|// using the original config with the s3a provider in the path.
name|provisionAccessKeys
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|ACCESS_KEY
argument_list|,
name|EXAMPLE_ID
operator|+
literal|"LJM"
argument_list|)
expr_stmt|;
name|URI
name|uriWithUserInfo
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://123:456@foobar"
argument_list|)
decl_stmt|;
name|S3xLoginHelper
operator|.
name|Login
name|creds
init|=
name|S3AUtils
operator|.
name|getAWSAccessKeys
argument_list|(
name|uriWithUserInfo
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AccessKey incorrect."
argument_list|,
literal|"123"
argument_list|,
name|creds
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SecretKey incorrect."
argument_list|,
literal|"456"
argument_list|,
name|creds
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldBeAbleToSwitchOnS3PathStyleAccessViaConfigProperty ()
specifier|public
name|void
name|shouldBeAbleToSwitchOnS3PathStyleAccessViaConfigProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|PATH_STYLE_ACCESS
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|Constants
operator|.
name|PATH_STYLE_ACCESS
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|AmazonS3
name|s3
init|=
name|fs
operator|.
name|getAmazonS3ClientForTesting
argument_list|(
literal|"configuration"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s3
argument_list|)
expr_stmt|;
name|S3ClientOptions
name|clientOptions
init|=
name|getField
argument_list|(
name|s3
argument_list|,
name|S3ClientOptions
operator|.
name|class
argument_list|,
literal|"clientOptions"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to find path style access to be switched on!"
argument_list|,
name|clientOptions
operator|.
name|isPathStyleAccess
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|file
init|=
name|ContractTestUtils
operator|.
name|toAsciiByteArray
argument_list|(
literal|"test file"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|writeAndRead
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/path/style/access/testFile"
argument_list|)
argument_list|,
name|file
argument_list|,
name|file
operator|.
name|length
argument_list|,
operator|(
name|int
operator|)
name|conf
operator|.
name|getLongBytes
argument_list|(
name|Constants
operator|.
name|FS_S3A_BLOCK_SIZE
argument_list|,
name|file
operator|.
name|length
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|AWSS3IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Catch/pass standard path style access behaviour when live bucket
comment|// isn't in the same region as the s3 client default. See
comment|// http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html
name|assertEquals
argument_list|(
name|e
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|HttpStatus
operator|.
name|SC_MOVED_PERMANENTLY
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultUserAgent ()
specifier|public
name|void
name|testDefaultUserAgent
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|AmazonS3
name|s3
init|=
name|fs
operator|.
name|getAmazonS3ClientForTesting
argument_list|(
literal|"User Agent"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s3
argument_list|)
expr_stmt|;
name|ClientConfiguration
name|awsConf
init|=
name|getField
argument_list|(
name|s3
argument_list|,
name|ClientConfiguration
operator|.
name|class
argument_list|,
literal|"clientConfiguration"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hadoop "
operator|+
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|,
name|awsConf
operator|.
name|getUserAgentPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomUserAgent ()
specifier|public
name|void
name|testCustomUserAgent
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|USER_AGENT_PREFIX
argument_list|,
literal|"MyApp"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|AmazonS3
name|s3
init|=
name|fs
operator|.
name|getAmazonS3ClientForTesting
argument_list|(
literal|"User agent"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s3
argument_list|)
expr_stmt|;
name|ClientConfiguration
name|awsConf
init|=
name|getField
argument_list|(
name|s3
argument_list|,
name|ClientConfiguration
operator|.
name|class
argument_list|,
literal|"clientConfiguration"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"MyApp, Hadoop "
operator|+
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|,
name|awsConf
operator|.
name|getUserAgentPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseIdempotent ()
specifier|public
name|void
name|testCloseIdempotent
parameter_list|()
throws|throws
name|Throwable
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDirectoryAllocatorDefval ()
specifier|public
name|void
name|testDirectoryAllocatorDefval
parameter_list|()
throws|throws
name|Throwable
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|Constants
operator|.
name|BUFFER_DIR
argument_list|)
expr_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|File
name|tmp
init|=
name|fs
operator|.
name|createTmpFileForWrite
argument_list|(
literal|"out-"
argument_list|,
literal|1024
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not found: "
operator|+
name|tmp
argument_list|,
name|tmp
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDirectoryAllocatorRR ()
specifier|public
name|void
name|testDirectoryAllocatorRR
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|dir1
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
decl_stmt|;
name|File
name|dir2
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
decl_stmt|;
name|dir1
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|BUFFER_DIR
argument_list|,
name|dir1
operator|+
literal|", "
operator|+
name|dir2
argument_list|)
expr_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|File
name|tmp1
init|=
name|fs
operator|.
name|createTmpFileForWrite
argument_list|(
literal|"out-"
argument_list|,
literal|1024
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|tmp1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|File
name|tmp2
init|=
name|fs
operator|.
name|createTmpFileForWrite
argument_list|(
literal|"out-"
argument_list|,
literal|1024
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|tmp2
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"round robin not working"
argument_list|,
name|tmp1
operator|.
name|getParent
argument_list|()
argument_list|,
name|tmp2
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadAheadRange ()
specifier|public
name|void
name|testReadAheadRange
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|READAHEAD_RANGE
argument_list|,
literal|"300K"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|long
name|readAheadRange
init|=
name|fs
operator|.
name|getReadAheadRange
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|readAheadRange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Read Ahead Range Incorrect."
argument_list|,
literal|300
operator|*
literal|1024
argument_list|,
name|readAheadRange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUsernameFromUGI ()
specifier|public
name|void
name|testUsernameFromUGI
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|String
name|alice
init|=
literal|"alice"
decl_stmt|;
name|UserGroupInformation
name|fakeUser
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|alice
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"users"
block|,
literal|"administrators"
block|}
argument_list|)
decl_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|fakeUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|S3AFileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|S3AFileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"username"
argument_list|,
name|alice
argument_list|,
name|fs
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"owner in "
operator|+
name|status
argument_list|,
name|alice
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"group in "
operator|+
name|status
argument_list|,
name|alice
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reads and returns a field from an object using reflection.  If the field    * cannot be found, is null, or is not the expected type, then this method    * fails the test.    *    * @param target object to read    * @param fieldType type of field to read, which will also be the return type    * @param fieldName name of field to read    * @return field that was read    * @throws IllegalAccessException if access not allowed    */
DECL|method|getField (Object target, Class<T> fieldType, String fieldName)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getField
parameter_list|(
name|Object
name|target
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|fieldType
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
name|Object
name|obj
init|=
name|FieldUtils
operator|.
name|readField
argument_list|(
name|target
argument_list|,
name|fieldName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not read field named %s in object with class %s."
argument_list|,
name|fieldName
argument_list|,
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected type found for field named %s, expected %s, actual %s."
argument_list|,
name|fieldName
argument_list|,
name|fieldType
operator|.
name|getName
argument_list|()
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|fieldType
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fieldType
operator|.
name|cast
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testBucketConfigurationPropagation ()
specifier|public
name|void
name|testBucketConfigurationPropagation
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|,
literal|"base"
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|String
name|basekey
init|=
literal|"fs.s3a.base"
decl_stmt|;
name|assertOptionEquals
argument_list|(
name|config
argument_list|,
name|basekey
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|bucketKey
init|=
literal|"fs.s3a.bucket.b.base"
decl_stmt|;
name|assertOptionEquals
argument_list|(
name|config
argument_list|,
name|bucketKey
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|Configuration
name|updated
init|=
name|propagateBucketOptions
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
name|basekey
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
comment|// original conf is not updated
name|assertOptionEquals
argument_list|(
name|config
argument_list|,
name|basekey
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
index|[]
name|sources
init|=
name|updated
operator|.
name|getPropertySources
argument_list|(
name|basekey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sources
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|sourceInfo
init|=
name|sources
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Wrong source "
operator|+
name|sourceInfo
argument_list|,
name|sourceInfo
operator|.
name|contains
argument_list|(
name|bucketKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBucketConfigurationPropagationResolution ()
specifier|public
name|void
name|testBucketConfigurationPropagationResolution
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|basekey
init|=
literal|"fs.s3a.base"
decl_stmt|;
name|String
name|baseref
init|=
literal|"fs.s3a.baseref"
decl_stmt|;
name|String
name|baseref2
init|=
literal|"fs.s3a.baseref2"
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|basekey
argument_list|,
literal|"orig"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|baseref2
argument_list|,
literal|"${fs.s3a.base}"
argument_list|)
expr_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|,
name|basekey
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|,
name|baseref
argument_list|,
literal|"${fs.s3a.base}"
argument_list|)
expr_stmt|;
name|Configuration
name|updated
init|=
name|propagateBucketOptions
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
name|basekey
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
name|baseref
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
name|baseref2
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleBucketConfigurations ()
specifier|public
name|void
name|testMultipleBucketConfigurations
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|,
name|USER_AGENT_PREFIX
argument_list|,
literal|"UA-b"
argument_list|)
expr_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
literal|"c"
argument_list|,
name|USER_AGENT_PREFIX
argument_list|,
literal|"UA-c"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|USER_AGENT_PREFIX
argument_list|,
literal|"UA-orig"
argument_list|)
expr_stmt|;
name|Configuration
name|updated
init|=
name|propagateBucketOptions
argument_list|(
name|config
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
name|USER_AGENT_PREFIX
argument_list|,
literal|"UA-c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClearBucketOption ()
specifier|public
name|void
name|testClearBucketOption
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|USER_AGENT_PREFIX
argument_list|,
literal|"base"
argument_list|)
expr_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
literal|"bucket"
argument_list|,
name|USER_AGENT_PREFIX
argument_list|,
literal|"overridden"
argument_list|)
expr_stmt|;
name|clearBucketOption
argument_list|(
name|config
argument_list|,
literal|"bucket"
argument_list|,
name|USER_AGENT_PREFIX
argument_list|)
expr_stmt|;
name|Configuration
name|updated
init|=
name|propagateBucketOptions
argument_list|(
name|config
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
name|USER_AGENT_PREFIX
argument_list|,
literal|"base"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBucketConfigurationSkipsUnmodifiable ()
specifier|public
name|void
name|testBucketConfigurationSkipsUnmodifiable
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|impl
init|=
literal|"fs.s3a.impl"
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|impl
argument_list|,
literal|"orig"
argument_list|)
expr_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|,
name|impl
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|String
name|metastoreImpl
init|=
literal|"fs.s3a.metadatastore.impl"
decl_stmt|;
name|String
name|ddb
init|=
literal|"org.apache.hadoop.fs.s3a.s3guard.DynamoDBMetadataStore"
decl_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|,
name|metastoreImpl
argument_list|,
name|ddb
argument_list|)
expr_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|,
literal|"impl2"
argument_list|,
literal|"b2"
argument_list|)
expr_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|,
literal|"bucket.b.loop"
argument_list|,
literal|"b3"
argument_list|)
expr_stmt|;
name|assertOptionEquals
argument_list|(
name|config
argument_list|,
literal|"fs.s3a.bucket.b.impl"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|Configuration
name|updated
init|=
name|propagateBucketOptions
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
name|impl
argument_list|,
literal|"orig"
argument_list|)
expr_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
literal|"fs.s3a.impl2"
argument_list|,
literal|"b2"
argument_list|)
expr_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
name|metastoreImpl
argument_list|,
name|ddb
argument_list|)
expr_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
literal|"fs.s3a.bucket.b.loop"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfOptionPropagationToFS ()
specifier|public
name|void
name|testConfOptionPropagationToFS
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|testFSName
init|=
name|config
operator|.
name|getTrimmed
argument_list|(
name|TEST_FS_S3A_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
operator|new
name|URI
argument_list|(
name|testFSName
argument_list|)
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
name|bucket
argument_list|,
literal|"propagation"
argument_list|,
literal|"propagated"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Configuration
name|updated
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
literal|"fs.s3a.propagation"
argument_list|,
literal|"propagated"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecurityCredentialPropagationNoOverride ()
specifier|public
name|void
name|testSecurityCredentialPropagationNoOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"base"
argument_list|)
expr_stmt|;
name|patchSecurityCredentialProviders
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertOptionEquals
argument_list|(
name|config
argument_list|,
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"base"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecurityCredentialPropagationOverrideNoBase ()
specifier|public
name|void
name|testSecurityCredentialPropagationOverrideNoBase
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|unset
argument_list|(
name|CREDENTIAL_PROVIDER_PATH
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|S3A_SECURITY_CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"override"
argument_list|)
expr_stmt|;
name|patchSecurityCredentialProviders
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertOptionEquals
argument_list|(
name|config
argument_list|,
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"override"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecurityCredentialPropagationOverride ()
specifier|public
name|void
name|testSecurityCredentialPropagationOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"base"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|S3A_SECURITY_CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"override"
argument_list|)
expr_stmt|;
name|patchSecurityCredentialProviders
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertOptionEquals
argument_list|(
name|config
argument_list|,
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"override,base"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|all
init|=
name|config
operator|.
name|getStringCollection
argument_list|(
name|CREDENTIAL_PROVIDER_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|all
operator|.
name|contains
argument_list|(
literal|"override"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|all
operator|.
name|contains
argument_list|(
literal|"base"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecurityCredentialPropagationEndToEnd ()
specifier|public
name|void
name|testSecurityCredentialPropagationEndToEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"base"
argument_list|)
expr_stmt|;
name|setBucketOption
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|,
name|S3A_SECURITY_CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"override"
argument_list|)
expr_stmt|;
name|Configuration
name|updated
init|=
name|propagateBucketOptions
argument_list|(
name|config
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|patchSecurityCredentialProviders
argument_list|(
name|updated
argument_list|)
expr_stmt|;
name|assertOptionEquals
argument_list|(
name|updated
argument_list|,
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"override,base"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

