begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AbstractS3ATestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|AWS_CREDENTIALS_PROVIDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|removeBaseAndBucketOverrides
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|DELEGATION_TOKEN_BINDING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|S3ADelegationTokens
operator|.
name|lookupS3ADelegationToken
import|;
end_import

begin_comment
comment|/**  * superclass class for DT tests.  */
end_comment

begin_class
DECL|class|AbstractDelegationIT
specifier|public
specifier|abstract
class|class
name|AbstractDelegationIT
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|YARN_RM
specifier|protected
specifier|static
specifier|final
name|String
name|YARN_RM
init|=
literal|"yarn-rm@EXAMPLE.COM"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractDelegationIT
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Look up a token from the submitted credentials.    * @param submittedCredentials credentials    * @param uri URI of the FS    * @param kind required kind of the token (which is asserted on)    * @return the token    * @throws IOException IO failure    */
DECL|method|lookupToken ( Credentials submittedCredentials, URI uri, Text kind)
specifier|public
specifier|static
name|AbstractS3ATokenIdentifier
name|lookupToken
parameter_list|(
name|Credentials
name|submittedCredentials
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Text
name|kind
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Token
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
name|token
init|=
name|requireNonNull
argument_list|(
name|lookupS3ADelegationToken
argument_list|(
name|submittedCredentials
argument_list|,
name|uri
argument_list|)
argument_list|,
literal|"No Token for "
operator|+
name|uri
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Kind of token "
operator|+
name|token
argument_list|,
name|kind
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractS3ATokenIdentifier
name|tid
init|=
name|token
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found for URI {}, token {}"
argument_list|,
name|uri
argument_list|,
name|tid
argument_list|)
expr_stmt|;
return|return
name|tid
return|;
block|}
comment|/**    * Create credentials with the DTs of the given FS.    * @param fs filesystem    * @return a non-empty set of credentials.    * @throws IOException failure to create.    */
DECL|method|mkTokens (final S3AFileSystem fs)
specifier|protected
specifier|static
name|Credentials
name|mkTokens
parameter_list|(
specifier|final
name|S3AFileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Credentials
name|cred
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|fs
operator|.
name|addDelegationTokens
argument_list|(
name|AbstractDelegationIT
operator|.
name|YARN_RM
argument_list|,
name|cred
argument_list|)
expr_stmt|;
return|return
name|cred
return|;
block|}
comment|/**    * Create and Init an FS instance.    * @param uri URI    * @param conf config to use    * @return the instance    * @throws IOException failure to create/init    */
DECL|method|newS3AInstance (final URI uri, final Configuration conf)
specifier|protected
specifier|static
name|S3AFileSystem
name|newS3AInstance
parameter_list|(
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|S3AFileSystem
name|fs
init|=
operator|new
name|S3AFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
comment|/**    * Assert that a filesystem is bound to a DT; that is: it is a delegate FS.    * @param fs filesystem    * @param tokenKind the kind of the token to require    */
DECL|method|assertBoundToDT (final S3AFileSystem fs, final Text tokenKind)
specifier|protected
specifier|static
name|void
name|assertBoundToDT
parameter_list|(
specifier|final
name|S3AFileSystem
name|fs
parameter_list|,
specifier|final
name|Text
name|tokenKind
parameter_list|)
block|{
specifier|final
name|S3ADelegationTokens
name|dtSupport
init|=
name|fs
operator|.
name|getDelegationTokens
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected bound to a delegation token: "
operator|+
name|dtSupport
argument_list|,
name|dtSupport
operator|.
name|isBoundToDT
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong token kind"
argument_list|,
name|tokenKind
argument_list|,
name|dtSupport
operator|.
name|getBoundDT
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that the number of tokens created by an FS matches the    * expected value.    * @param fs filesystem    * @param expected expected creation count.    */
DECL|method|assertTokenCreationCount (final S3AFileSystem fs, final int expected)
specifier|protected
specifier|static
name|void
name|assertTokenCreationCount
parameter_list|(
specifier|final
name|S3AFileSystem
name|fs
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"DT creation count from "
operator|+
name|fs
operator|.
name|getDelegationTokens
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|expected
argument_list|,
name|getTokenCreationCount
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the token creation count of a filesystem.    * @param fs FS    * @return creation count    */
DECL|method|getTokenCreationCount (final S3AFileSystem fs)
specifier|private
specifier|static
name|int
name|getTokenCreationCount
parameter_list|(
specifier|final
name|S3AFileSystem
name|fs
parameter_list|)
block|{
return|return
name|fs
operator|.
name|getDelegationTokens
argument_list|()
operator|.
name|map
argument_list|(
name|S3ADelegationTokens
operator|::
name|getCreationCount
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Patch the current config with the DT binding.    * @param conf configuration to patch    * @param binding binding to use    */
DECL|method|enableDelegationTokens (Configuration conf, String binding)
specifier|protected
name|void
name|enableDelegationTokens
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|binding
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Enabling delegation token support for {}"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DELEGATION_TOKEN_BINDING
argument_list|,
name|binding
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reset UGI info.    */
DECL|method|resetUGI ()
specifier|protected
name|void
name|resetUGI
parameter_list|()
block|{
name|UserGroupInformation
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * Bind the provider list to the args supplied.    * At least one must be provided, to stop the default list being    * picked up.    * @param config configuration to patch.    * @param bucket bucket to clear.    * @param providerClassnames providers    */
DECL|method|bindProviderList (String bucket, Configuration config, String... providerClassnames)
specifier|protected
name|void
name|bindProviderList
parameter_list|(
name|String
name|bucket
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|String
modifier|...
name|providerClassnames
parameter_list|)
block|{
name|removeBaseAndBucketOverrides
argument_list|(
name|bucket
argument_list|,
name|config
argument_list|,
name|AWS_CREDENTIALS_PROVIDER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No providers to bind to"
argument_list|,
name|providerClassnames
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStrings
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|providerClassnames
argument_list|)
expr_stmt|;
block|}
comment|/**    * Save a DT to a file.    * @param tokenFile destination file    * @param token token to save    * @throws IOException failure    */
DECL|method|saveDT (final File tokenFile, final Token<?> token)
specifier|protected
name|void
name|saveDT
parameter_list|(
specifier|final
name|File
name|tokenFile
parameter_list|,
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|requireNonNull
argument_list|(
name|token
argument_list|,
literal|"Null token"
argument_list|)
expr_stmt|;
name|Credentials
name|cred
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|cred
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
try|try
init|(
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|tokenFile
argument_list|)
argument_list|)
init|)
block|{
name|cred
operator|.
name|writeTokenStorageToStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create and init an S3a DT instance, but don't start it.    * @param conf conf to use    * @return a new instance    * @throws IOException IOE    */
DECL|method|instantiateDTSupport (Configuration conf)
specifier|public
name|S3ADelegationTokens
name|instantiateDTSupport
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|S3ADelegationTokens
name|tokens
init|=
operator|new
name|S3ADelegationTokens
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|bindToFileSystem
argument_list|(
name|fs
operator|.
name|getCanonicalUri
argument_list|()
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|tokens
return|;
block|}
block|}
end_class

end_unit

