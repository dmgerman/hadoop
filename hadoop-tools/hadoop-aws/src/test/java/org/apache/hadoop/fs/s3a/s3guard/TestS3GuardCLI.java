begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardTool
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test the S3Guard CLI entry point.  */
end_comment

begin_class
DECL|class|TestS3GuardCLI
specifier|public
class|class
name|TestS3GuardCLI
extends|extends
name|Assert
block|{
comment|/**    * Run a S3GuardTool command from a varags list.    * @param args argument list    * @return the return code    * @throws Exception any exception    */
DECL|method|run (String... args)
specifier|protected
name|int
name|run
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
return|return
name|S3GuardTool
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Run a S3GuardTool command from a varags list, catch any raised    * ExitException and verify the status code matches that expected.    * @param status expected status code of an exception    * @param args argument list    * @throws Exception any exception    */
DECL|method|runToFailure (int status, String... args)
specifier|protected
name|void
name|runToFailure
parameter_list|(
name|int
name|status
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ExitUtil
operator|.
name|ExitException
name|ex
init|=
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|ExitUtil
operator|.
name|ExitException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|.
name|status
operator|!=
name|status
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInfoNoArgs ()
specifier|public
name|void
name|testInfoNoArgs
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|BucketInfo
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfoWrongFilesystem ()
specifier|public
name|void
name|testInfoWrongFilesystem
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"file://"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoCommand ()
specifier|public
name|void
name|testNoCommand
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|E_USAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnknownCommand ()
specifier|public
name|void
name|testUnknownCommand
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|E_USAGE
argument_list|,
literal|"unknown"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPruneNoArgs ()
specifier|public
name|void
name|testPruneNoArgs
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|Prune
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiffNoArgs ()
specifier|public
name|void
name|testDiffNoArgs
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|Diff
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testImportNoArgs ()
specifier|public
name|void
name|testImportNoArgs
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|Import
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDestroyNoArgs ()
specifier|public
name|void
name|testDestroyNoArgs
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|Destroy
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDestroyUnknownTableNoRegion ()
specifier|public
name|void
name|testDestroyUnknownTableNoRegion
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|Destroy
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
literal|"dynamodb://ireland-team"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitBucketAndRegion ()
specifier|public
name|void
name|testInitBucketAndRegion
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|Init
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
literal|"dynamodb://ireland-team"
argument_list|,
literal|"-region"
argument_list|,
literal|"eu-west-1"
argument_list|,
name|S3ATestConstants
operator|.
name|DEFAULT_CSVTEST_FILE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

