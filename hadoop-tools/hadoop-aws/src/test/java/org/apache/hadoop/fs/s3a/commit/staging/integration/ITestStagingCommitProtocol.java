begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.staging.integration
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|InconsistentS3ClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|AbstractITCommitProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|AbstractS3ACommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitterFaultInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitterFaultInjectionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|InternalCommitterConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3_CLIENT_FACTORY_IMPL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/** Test the staging committer's handling of the base protocol operations. */
end_comment

begin_class
DECL|class|ITestStagingCommitProtocol
specifier|public
class|class
name|ITestStagingCommitProtocol
extends|extends
name|AbstractITCommitProtocol
block|{
annotation|@
name|Override
DECL|method|suitename ()
specifier|protected
name|String
name|suitename
parameter_list|()
block|{
return|return
literal|"ITestStagingCommitProtocol"
return|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FS_S3A_COMMITTER_THREADS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// switch to the inconsistent filesystem
name|conf
operator|.
name|setClass
argument_list|(
name|S3_CLIENT_FACTORY_IMPL
argument_list|,
name|InconsistentS3ClientFactory
operator|.
name|class
argument_list|,
name|S3ClientFactory
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// disable unique filenames so that the protocol tests of FileOutputFormat
comment|// and this test generate consistent names.
name|conf
operator|.
name|setBoolean
argument_list|(
name|FS_S3A_COMMITTER_STAGING_UNIQUE_FILENAMES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
comment|// identify working dir for staging and delete
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
name|StagingCommitter
operator|.
name|getUploadUUID
argument_list|(
name|conf
argument_list|,
name|getTaskAttempt0
argument_list|()
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
name|Paths
operator|.
name|getLocalTaskAttemptTempDir
argument_list|(
name|conf
argument_list|,
name|uuid
argument_list|,
name|getTaskAttempt0
argument_list|()
argument_list|)
decl_stmt|;
name|rmdir
argument_list|(
name|tempDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCommitterName ()
specifier|protected
name|String
name|getCommitterName
parameter_list|()
block|{
return|return
name|InternalCommitterConstants
operator|.
name|COMMITTER_NAME_STAGING
return|;
block|}
annotation|@
name|Override
DECL|method|createCommitter (Path outputPath, TaskAttemptContext context)
specifier|protected
name|AbstractS3ACommitter
name|createCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StagingCommitter
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|createFailingCommitter ( TaskAttemptContext tContext)
specifier|public
name|AbstractS3ACommitter
name|createFailingCommitter
parameter_list|(
name|TaskAttemptContext
name|tContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CommitterWithFailedThenSucceed
argument_list|(
name|getOutDir
argument_list|()
argument_list|,
name|tContext
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shouldExpectSuccessMarker ()
specifier|protected
name|boolean
name|shouldExpectSuccessMarker
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|expectJobCommitToFail (JobContext jContext, AbstractS3ACommitter committer)
specifier|protected
name|void
name|expectJobCommitToFail
parameter_list|(
name|JobContext
name|jContext
parameter_list|,
name|AbstractS3ACommitter
name|committer
parameter_list|)
throws|throws
name|Exception
block|{
name|expectJobCommitFailure
argument_list|(
name|jContext
argument_list|,
name|committer
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|validateTaskAttemptPathDuringWrite (Path p)
specifier|protected
name|void
name|validateTaskAttemptPathDuringWrite
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
comment|// this is expected to be local FS
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|getLocalFS
argument_list|()
argument_list|,
literal|"task attempt"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
DECL|method|validateTaskAttemptPathAfterWrite (Path p)
specifier|protected
name|void
name|validateTaskAttemptPathAfterWrite
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
comment|// this is expected to be local FS
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|getLocalFS
argument_list|()
argument_list|,
literal|"task attempt"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocalFS ()
specifier|protected
name|FileSystem
name|getLocalFS
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * The class provides a overridden implementation of commitJobInternal which    * causes the commit failed for the first time then succeed.    */
DECL|class|CommitterWithFailedThenSucceed
specifier|private
specifier|static
specifier|final
class|class
name|CommitterWithFailedThenSucceed
extends|extends
name|StagingCommitter
implements|implements
name|CommitterFaultInjection
block|{
DECL|field|injection
specifier|private
specifier|final
name|CommitterFaultInjectionImpl
name|injection
decl_stmt|;
DECL|method|CommitterWithFailedThenSucceed (Path outputPath, TaskAttemptContext context)
name|CommitterWithFailedThenSucceed
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|injection
operator|=
operator|new
name|CommitterFaultInjectionImpl
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setupJob (JobContext context)
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|setupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|setupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortJob (JobContext context, JobStatus.State state)
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|JobStatus
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|abortJob
argument_list|(
name|context
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|super
operator|.
name|abortJob
argument_list|(
name|context
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|cleanupJob (JobContext context)
specifier|public
name|void
name|cleanupJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|cleanupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|cleanupJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setupTask (TaskAttemptContext context)
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|setupTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|setupTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitTask (TaskAttemptContext context)
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|commitTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|commitTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortTask (TaskAttemptContext context)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|abortTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|abortTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitJob (JobContext context)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|commitJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|super
operator|.
name|commitJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsTaskCommit (TaskAttemptContext context)
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|injection
operator|.
name|needsTaskCommit
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|needsTaskCommit
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setFaults (Faults... faults)
specifier|public
name|void
name|setFaults
parameter_list|(
name|Faults
modifier|...
name|faults
parameter_list|)
block|{
name|injection
operator|.
name|setFaults
argument_list|(
name|faults
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

