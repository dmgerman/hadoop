begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AWSCredentialProviderList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|DefaultS3ClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Invoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AEncryptionMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DelegationTokenFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|DtUtilShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|assumeSessionTestsEnabled
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|removeBaseAndBucketOverrides
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|unsetHadoopCredentialProviders
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationTokenIOException
operator|.
name|TOKEN_MISMATCH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|MiniKerberizedHadoopCluster
operator|.
name|ALICE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|MiniKerberizedHadoopCluster
operator|.
name|assertSecurityEnabled
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|S3ADelegationTokens
operator|.
name|lookupS3ADelegationToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|doAs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|collection
operator|.
name|IsCollectionWithSize
operator|.
name|hasSize
import|;
end_import

begin_comment
comment|/**  * Tests use of Hadoop delegation tokens within the FS itself.  * This instantiates a MiniKDC as some of the operations tested require  * UGI to be initialized with security enabled.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StaticNonFinalField"
argument_list|)
DECL|class|ITestSessionDelegationInFileystem
specifier|public
class|class
name|ITestSessionDelegationInFileystem
extends|extends
name|AbstractDelegationIT
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestSessionDelegationInFileystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniKerberizedHadoopCluster
name|cluster
decl_stmt|;
DECL|field|bobUser
specifier|private
name|UserGroupInformation
name|bobUser
decl_stmt|;
DECL|field|aliceUser
specifier|private
name|UserGroupInformation
name|aliceUser
decl_stmt|;
DECL|field|delegationTokens
specifier|private
name|S3ADelegationTokens
name|delegationTokens
decl_stmt|;
comment|/***    * Set up a mini Cluster with two users in the keytab.    */
annotation|@
name|BeforeClass
DECL|method|setupCluster ()
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniKerberizedHadoopCluster
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tear down the Cluster.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableNotThrown"
argument_list|)
annotation|@
name|AfterClass
DECL|method|teardownCluster ()
specifier|public
specifier|static
name|void
name|teardownCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|LOG
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
DECL|method|getCluster ()
specifier|protected
specifier|static
name|MiniKerberizedHadoopCluster
name|getCluster
parameter_list|()
block|{
return|return
name|cluster
return|;
block|}
comment|/**    * Get the delegation token binding for this test suite.    * @return which DT binding to use.    */
DECL|method|getDelegationBinding ()
specifier|protected
name|String
name|getDelegationBinding
parameter_list|()
block|{
return|return
name|DELEGATION_TOKEN_SESSION_BINDING
return|;
block|}
comment|/**    * Get the kind of the tokens which are generated.    * @return the kind of DT    */
DECL|method|getTokenKind ()
specifier|public
name|Text
name|getTokenKind
parameter_list|()
block|{
return|return
name|SESSION_TOKEN_KIND
return|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
comment|// disable if assume role opts are off
name|assumeSessionTestsEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|enableDelegationTokens
argument_list|(
name|conf
argument_list|,
name|getDelegationBinding
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// switch to SSE_S3.
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|KEY_ENCRYPTION_TESTS
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|,
name|S3AEncryptionMethods
operator|.
name|SSE_S3
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set the YARN RM up for YARN tests.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
name|YARN_RM
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// clear any existing tokens from the FS
name|resetUGI
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|createConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|aliceUser
operator|=
name|cluster
operator|.
name|createAliceUser
argument_list|()
expr_stmt|;
name|bobUser
operator|=
name|cluster
operator|.
name|createBobUser
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|aliceUser
argument_list|)
expr_stmt|;
name|assertSecurityEnabled
argument_list|()
expr_stmt|;
comment|// only now do the setup, so that any FS created is secure
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// make sure there aren't any tokens
name|assertNull
argument_list|(
literal|"Unexpectedly found an S3A token"
argument_list|,
name|lookupS3ADelegationToken
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getCredentials
argument_list|()
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// DTs are inited but not started.
name|delegationTokens
operator|=
name|instantiateDTSupport
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableNotThrown"
argument_list|)
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|LOG
argument_list|,
name|delegationTokens
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|closeAllForUGI
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
name|MiniKerberizedHadoopCluster
operator|.
name|closeUserFileSystems
argument_list|(
name|aliceUser
argument_list|)
expr_stmt|;
name|MiniKerberizedHadoopCluster
operator|.
name|closeUserFileSystems
argument_list|(
name|bobUser
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|resetUGI
argument_list|()
expr_stmt|;
block|}
comment|/**    * Are encryption tests enabled?    * @return true if encryption is turned on.    */
DECL|method|encryptionTestEnabled ()
specifier|protected
name|boolean
name|encryptionTestEnabled
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|KEY_ENCRYPTION_TESTS
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testGetDTfromFileSystem ()
specifier|public
name|void
name|testGetDTfromFileSystem
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Enable delegation tokens and request one"
argument_list|)
expr_stmt|;
name|delegationTokens
operator|.
name|start
argument_list|()
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No tokens from "
operator|+
name|fs
argument_list|,
name|fs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
name|S3ATestUtils
operator|.
name|MetricDiff
name|invocationDiff
init|=
operator|new
name|S3ATestUtils
operator|.
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|INVOCATION_GET_DELEGATION_TOKEN
argument_list|)
decl_stmt|;
name|S3ATestUtils
operator|.
name|MetricDiff
name|issueDiff
init|=
operator|new
name|S3ATestUtils
operator|.
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|DELEGATION_TOKENS_ISSUED
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
name|token
init|=
name|requireNonNull
argument_list|(
name|fs
operator|.
name|getDelegationToken
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|"no token from filesystem "
operator|+
name|fs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"token kind"
argument_list|,
name|getTokenKind
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenCreationCount
argument_list|(
name|fs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fsInfo
init|=
name|fs
operator|.
name|toString
argument_list|()
decl_stmt|;
name|invocationDiff
operator|.
name|assertDiffEquals
argument_list|(
literal|"getDelegationToken() in "
operator|+
name|fsInfo
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|issueDiff
operator|.
name|assertDiffEquals
argument_list|(
literal|"DTs issued in "
operator|+
name|delegationTokens
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Text
name|service
init|=
name|delegationTokens
operator|.
name|getService
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"service name"
argument_list|,
name|service
argument_list|,
name|token
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|service
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"retrieve token from "
operator|+
name|creds
argument_list|,
name|token
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddTokensFromFileSystem ()
specifier|public
name|void
name|testAddTokensFromFileSystem
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify FileSystem.addDelegationTokens() collects tokens"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Credentials
name|cred
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|tokens
init|=
name|fs
operator|.
name|addDelegationTokens
argument_list|(
name|YARN_RM
argument_list|,
name|cred
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of tokens"
argument_list|,
literal|1
argument_list|,
name|tokens
operator|.
name|length
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|requireNonNull
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|,
literal|"token"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"FS token is {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Text
name|service
init|=
name|delegationTokens
operator|.
name|getService
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|retrieved
init|=
name|requireNonNull
argument_list|(
name|cred
operator|.
name|getToken
argument_list|(
name|service
argument_list|)
argument_list|,
literal|"retrieved token with key "
operator|+
name|service
operator|+
literal|"; expected "
operator|+
name|token
argument_list|)
decl_stmt|;
name|delegationTokens
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// this only sneaks in because there isn't a state check here
name|delegationTokens
operator|.
name|resetTokenBindingToDT
argument_list|(
operator|(
name|Token
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
operator|)
name|retrieved
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bind to existing DT failed"
argument_list|,
name|delegationTokens
operator|.
name|isBoundToDT
argument_list|()
argument_list|)
expr_stmt|;
name|AWSCredentialProviderList
name|providerList
init|=
name|requireNonNull
argument_list|(
name|delegationTokens
operator|.
name|getCredentialProviders
argument_list|()
argument_list|,
literal|"providers"
argument_list|)
decl_stmt|;
name|providerList
operator|.
name|getCredentials
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCanRetrieveTokenFromCurrentUserCreds ()
specifier|public
name|void
name|testCanRetrieveTokenFromCurrentUserCreds
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Create a DT, add it to the current UGI credentials,"
operator|+
literal|" then retrieve"
argument_list|)
expr_stmt|;
name|delegationTokens
operator|.
name|start
argument_list|()
expr_stmt|;
name|Credentials
name|cred
init|=
name|createDelegationTokens
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addCredentials
argument_list|(
name|cred
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|tokens
init|=
name|cred
operator|.
name|getAllTokens
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Token
argument_list|<
name|?
argument_list|>
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token0
init|=
name|tokens
index|[
literal|0
index|]
decl_stmt|;
name|Text
name|service
init|=
name|token0
operator|.
name|getService
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Token = "
operator|+
name|token0
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token1
init|=
name|requireNonNull
argument_list|(
name|ugi
operator|.
name|getCredentials
argument_list|()
operator|.
name|getToken
argument_list|(
name|service
argument_list|)
argument_list|,
literal|"Token from "
operator|+
name|service
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"retrieved token"
argument_list|,
name|token0
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"token identifier of "
operator|+
name|token1
argument_list|,
name|token1
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDTCredentialProviderFromCurrentUserCreds ()
specifier|public
name|void
name|testDTCredentialProviderFromCurrentUserCreds
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Add credentials to the current user, "
operator|+
literal|"then verify that they can be found when S3ADelegationTokens binds"
argument_list|)
expr_stmt|;
name|Credentials
name|cred
init|=
name|createDelegationTokens
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Token size"
argument_list|,
name|cred
operator|.
name|getAllTokens
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|addCredentials
argument_list|(
name|cred
argument_list|)
expr_stmt|;
name|delegationTokens
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bind to existing DT failed"
argument_list|,
name|delegationTokens
operator|.
name|isBoundToDT
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create credentials with the DTs of the current FS.    * @return a non-empty set of credentials.    * @throws IOException failure to create.    */
DECL|method|createDelegationTokens ()
specifier|protected
name|Credentials
name|createDelegationTokens
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|mkTokens
argument_list|(
name|getFileSystem
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a FS with a delegated token, verify it works as a filesystem,    * and that you can pick up the same DT from that FS too.    */
annotation|@
name|Test
DECL|method|testDelegatedFileSystem ()
specifier|public
name|void
name|testDelegatedFileSystem
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Delegation tokens can be passed to a new filesystem;"
operator|+
literal|" if role restricted, permissions are tightened."
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|readLandsatMetadata
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|// create delegation tokens from the test suites FS.
name|Credentials
name|creds
init|=
name|createDelegationTokens
argument_list|()
decl_stmt|;
specifier|final
name|Text
name|tokenKind
init|=
name|getTokenKind
argument_list|()
decl_stmt|;
name|AbstractS3ATokenIdentifier
name|origTokenId
init|=
name|requireNonNull
argument_list|(
name|lookupToken
argument_list|(
name|creds
argument_list|,
name|uri
argument_list|,
name|tokenKind
argument_list|)
argument_list|,
literal|"original"
argument_list|)
decl_stmt|;
comment|// attach to the user, so that when tokens are looked for, they get picked
comment|// up
specifier|final
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|currentUser
operator|.
name|addCredentials
argument_list|(
name|creds
argument_list|)
expr_stmt|;
comment|// verify that the tokens went over
name|requireNonNull
argument_list|(
name|lookupToken
argument_list|(
name|currentUser
operator|.
name|getCredentials
argument_list|()
argument_list|,
name|uri
argument_list|,
name|tokenKind
argument_list|)
argument_list|,
literal|"user credentials"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|fs
operator|.
name|getBucket
argument_list|()
decl_stmt|;
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|unsetHadoopCredentialProviders
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// remove any secrets we don't want the delegated FS to accidentally
comment|// pick up.
comment|// this is to simulate better a remote deployment.
name|removeBaseAndBucketOverrides
argument_list|(
name|bucket
argument_list|,
name|conf
argument_list|,
name|ACCESS_KEY
argument_list|,
name|SECRET_KEY
argument_list|,
name|SESSION_TOKEN
argument_list|,
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|,
name|DELEGATION_TOKEN_ROLE_ARN
argument_list|,
name|DELEGATION_TOKEN_ENDPOINT
argument_list|)
expr_stmt|;
comment|// this is done to make sure you cannot create an STS session no
comment|// matter how you pick up credentials.
name|conf
operator|.
name|set
argument_list|(
name|DELEGATION_TOKEN_ENDPOINT
argument_list|,
literal|"http://localhost:8080/"
argument_list|)
expr_stmt|;
name|bindProviderList
argument_list|(
name|bucket
argument_list|,
name|conf
argument_list|,
name|CountInvocationsProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|long
name|originalCount
init|=
name|CountInvocationsProvider
operator|.
name|getInvocationCount
argument_list|()
decl_stmt|;
comment|// create a new FS instance, which is expected to pick up the
comment|// existing token
name|Path
name|testPath
init|=
name|path
argument_list|(
literal|"testDTFileSystemClient"
argument_list|)
decl_stmt|;
try|try
init|(
name|S3AFileSystem
name|delegatedFS
init|=
name|newS3AInstance
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Delegated filesystem is: {}"
argument_list|,
name|delegatedFS
argument_list|)
expr_stmt|;
name|assertBoundToDT
argument_list|(
name|delegatedFS
argument_list|,
name|tokenKind
argument_list|)
expr_stmt|;
if|if
condition|(
name|encryptionTestEnabled
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Encryption propagation failed"
argument_list|,
name|S3AEncryptionMethods
operator|.
name|SSE_S3
argument_list|,
name|delegatedFS
operator|.
name|getServerSideEncryptionAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verifyRestrictedPermissions
argument_list|(
name|delegatedFS
argument_list|)
expr_stmt|;
name|executeDelegatedFSOperations
argument_list|(
name|delegatedFS
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|delegatedFS
operator|.
name|mkdirs
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|S3ATestUtils
operator|.
name|MetricDiff
name|issueDiff
init|=
operator|new
name|S3ATestUtils
operator|.
name|MetricDiff
argument_list|(
name|delegatedFS
argument_list|,
name|Statistic
operator|.
name|DELEGATION_TOKENS_ISSUED
argument_list|)
decl_stmt|;
comment|// verify that the FS returns the existing token when asked
comment|// so that chained deployments will work
name|AbstractS3ATokenIdentifier
name|tokenFromDelegatedFS
init|=
name|requireNonNull
argument_list|(
name|delegatedFS
operator|.
name|getDelegationToken
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|"New token"
argument_list|)
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Newly issued token != old one"
argument_list|,
name|origTokenId
argument_list|,
name|tokenFromDelegatedFS
argument_list|)
expr_stmt|;
name|issueDiff
operator|.
name|assertDiffEquals
argument_list|(
literal|"DTs issued in "
operator|+
name|delegatedFS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// the DT auth chain should override the original one.
name|assertEquals
argument_list|(
literal|"invocation count"
argument_list|,
name|originalCount
argument_list|,
name|CountInvocationsProvider
operator|.
name|getInvocationCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a second instance, which will pick up the same value
try|try
init|(
name|S3AFileSystem
name|secondDelegate
init|=
name|newS3AInstance
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|assertBoundToDT
argument_list|(
name|secondDelegate
argument_list|,
name|tokenKind
argument_list|)
expr_stmt|;
if|if
condition|(
name|encryptionTestEnabled
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Encryption propagation failed"
argument_list|,
name|S3AEncryptionMethods
operator|.
name|SSE_S3
argument_list|,
name|secondDelegate
operator|.
name|getServerSideEncryptionAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ContractTestUtils
operator|.
name|assertDeleted
argument_list|(
name|secondDelegate
argument_list|,
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unbounded DT"
argument_list|,
name|secondDelegate
operator|.
name|getDelegationToken
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Override/extension point: run operations within a delegated FS.    * @param delegatedFS filesystem.    * @param testPath path to work on.    * @throws IOException failures    */
DECL|method|executeDelegatedFSOperations (final S3AFileSystem delegatedFS, final Path testPath)
specifier|protected
name|void
name|executeDelegatedFSOperations
parameter_list|(
specifier|final
name|S3AFileSystem
name|delegatedFS
parameter_list|,
specifier|final
name|Path
name|testPath
parameter_list|)
throws|throws
name|Exception
block|{
name|ContractTestUtils
operator|.
name|assertIsDirectory
argument_list|(
name|delegatedFS
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|delegatedFS
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertDeleted
argument_list|(
name|delegatedFS
argument_list|,
name|testPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|delegatedFS
operator|.
name|mkdirs
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertIsDirectory
argument_list|(
name|delegatedFS
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|Path
name|srcFile
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"src.txt"
argument_list|)
decl_stmt|;
name|Path
name|destFile
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"dest.txt"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|delegatedFS
argument_list|,
name|srcFile
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|rename
argument_list|(
name|delegatedFS
argument_list|,
name|srcFile
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
comment|// this file is deleted afterwards, so leave alone
name|ContractTestUtils
operator|.
name|assertIsFile
argument_list|(
name|delegatedFS
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertDeleted
argument_list|(
name|delegatedFS
argument_list|,
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Session tokens can read the landsat bucket without problems.    * @param delegatedFS delegated FS    * @throws Exception failure    */
DECL|method|verifyRestrictedPermissions (final S3AFileSystem delegatedFS)
specifier|protected
name|void
name|verifyRestrictedPermissions
parameter_list|(
specifier|final
name|S3AFileSystem
name|delegatedFS
parameter_list|)
throws|throws
name|Exception
block|{
name|readLandsatMetadata
argument_list|(
name|delegatedFS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationBindingMismatch1 ()
specifier|public
name|void
name|testDelegationBindingMismatch1
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Verify that when the DT client and remote bindings are different,"
operator|+
literal|" the failure is meaningful"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|addCredentials
argument_list|(
name|createDelegationTokens
argument_list|()
argument_list|)
expr_stmt|;
comment|// create the remote FS with a full credential binding
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|fs
operator|.
name|getBucket
argument_list|()
decl_stmt|;
name|removeBaseAndBucketOverrides
argument_list|(
name|bucket
argument_list|,
name|conf
argument_list|,
name|ACCESS_KEY
argument_list|,
name|SECRET_KEY
argument_list|,
name|SESSION_TOKEN
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ACCESS_KEY
argument_list|,
literal|"aaaaa"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SECRET_KEY
argument_list|,
literal|"bbbb"
argument_list|)
expr_stmt|;
name|bindProviderList
argument_list|(
name|bucket
argument_list|,
name|conf
argument_list|,
name|CountInvocationsProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DELEGATION_TOKEN_BINDING
argument_list|,
name|DELEGATION_TOKEN_FULL_CREDENTIALS_BINDING
argument_list|)
expr_stmt|;
name|ServiceStateException
name|e
init|=
name|intercept
argument_list|(
name|ServiceStateException
operator|.
name|class
argument_list|,
name|TOKEN_MISMATCH
argument_list|,
parameter_list|()
lambda|->
block|{
name|S3AFileSystem
name|remote
init|=
name|newS3AInstance
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// if we get this far, provide info for the exception which will
comment|// be raised.
name|String
name|s
init|=
name|remote
operator|.
name|toString
argument_list|()
decl_stmt|;
name|remote
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DelegationTokenIOException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDelegationBindingMismatch2 ()
specifier|public
name|void
name|testDelegationBindingMismatch2
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"assert mismatch reported when client DT is a "
operator|+
literal|"subclass of the remote one"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|// create the remote FS with a full credential binding
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|fs
operator|.
name|getBucket
argument_list|()
decl_stmt|;
name|enableDelegationTokens
argument_list|(
name|conf
argument_list|,
name|DELEGATION_TOKEN_FULL_CREDENTIALS_BINDING
argument_list|)
expr_stmt|;
comment|// create a new FS with Full tokens
name|Credentials
name|fullTokens
decl_stmt|;
name|Token
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
name|firstDT
decl_stmt|;
try|try
init|(
name|S3AFileSystem
name|fullFS
init|=
name|newS3AInstance
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
init|)
block|{
comment|// add the tokens to the user group
name|fullTokens
operator|=
name|mkTokens
argument_list|(
name|fullFS
argument_list|)
expr_stmt|;
name|assertTokenCreationCount
argument_list|(
name|fullFS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|firstDT
operator|=
name|fullFS
operator|.
name|getDelegationToken
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|assertTokenCreationCount
argument_list|(
name|fullFS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
name|secondDT
init|=
name|fullFS
operator|.
name|getDelegationToken
argument_list|(
literal|"second"
argument_list|)
decl_stmt|;
name|assertTokenCreationCount
argument_list|(
name|fullFS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"DT identifiers"
argument_list|,
name|firstDT
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|secondDT
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// expect a token
name|AbstractS3ATokenIdentifier
name|origTokenId
init|=
name|requireNonNull
argument_list|(
name|lookupToken
argument_list|(
name|fullTokens
argument_list|,
name|uri
argument_list|,
name|FULL_TOKEN_KIND
argument_list|)
argument_list|,
literal|"token from credentials"
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|addCredentials
argument_list|(
name|fullTokens
argument_list|)
expr_stmt|;
comment|// a remote FS with those tokens
try|try
init|(
name|S3AFileSystem
name|delegatedFS
init|=
name|newS3AInstance
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|assertBoundToDT
argument_list|(
name|delegatedFS
argument_list|,
name|FULL_TOKEN_KIND
argument_list|)
expr_stmt|;
name|delegatedFS
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|SessionTokenIdentifier
name|tokenFromDelegatedFS
init|=
operator|(
name|SessionTokenIdentifier
operator|)
name|requireNonNull
argument_list|(
name|delegatedFS
operator|.
name|getDelegationToken
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|"New token"
argument_list|)
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|assertTokenCreationCount
argument_list|(
name|delegatedFS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Newly issued token != old one"
argument_list|,
name|origTokenId
argument_list|,
name|tokenFromDelegatedFS
argument_list|)
expr_stmt|;
block|}
comment|// now create a configuration which expects a session token.
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|removeBaseAndBucketOverrides
argument_list|(
name|bucket
argument_list|,
name|conf2
argument_list|,
name|ACCESS_KEY
argument_list|,
name|SECRET_KEY
argument_list|,
name|SESSION_TOKEN
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DELEGATION_TOKEN_BINDING
argument_list|,
name|getDelegationBinding
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceStateException
name|e
init|=
name|intercept
argument_list|(
name|ServiceStateException
operator|.
name|class
argument_list|,
name|TOKEN_MISMATCH
argument_list|,
parameter_list|()
lambda|->
block|{
name|S3AFileSystem
name|remote
init|=
name|newS3AInstance
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// if we get this far, provide info for the exception which will
comment|// be raised.
name|String
name|s
init|=
name|remote
operator|.
name|toString
argument_list|()
decl_stmt|;
name|remote
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DelegationTokenIOException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * This verifies that the granted credentials only access the target bucket    * by using the credentials in a new S3 client to query the AWS-owned landsat    * bucket.    * @param delegatedFS delegated FS with role-restricted access.    * @throws AccessDeniedException if the delegated FS's credentials can't    * access the bucket.    * @return result of the HEAD    * @throws Exception failure    */
DECL|method|readLandsatMetadata (final S3AFileSystem delegatedFS)
specifier|protected
name|ObjectMetadata
name|readLandsatMetadata
parameter_list|(
specifier|final
name|S3AFileSystem
name|delegatedFS
parameter_list|)
throws|throws
name|Exception
block|{
name|AWSCredentialProviderList
name|testing
init|=
name|delegatedFS
operator|.
name|shareCredentials
argument_list|(
literal|"testing"
argument_list|)
decl_stmt|;
name|URI
name|landsat
init|=
operator|new
name|URI
argument_list|(
name|DEFAULT_CSVTEST_FILE
argument_list|)
decl_stmt|;
name|DefaultS3ClientFactory
name|factory
init|=
operator|new
name|DefaultS3ClientFactory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|delegatedFS
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ENDPOINT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|host
init|=
name|landsat
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|AmazonS3
name|s3
init|=
name|factory
operator|.
name|createS3Client
argument_list|(
name|landsat
argument_list|,
name|host
argument_list|,
name|testing
argument_list|,
literal|"ITestSessionDelegationInFileystem"
argument_list|)
decl_stmt|;
return|return
name|Invoker
operator|.
name|once
argument_list|(
literal|"HEAD"
argument_list|,
name|host
argument_list|,
parameter_list|()
lambda|->
name|s3
operator|.
name|getObjectMetadata
argument_list|(
name|host
argument_list|,
name|landsat
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * YARN job submission uses    * {@link TokenCache#obtainTokensForNamenodes(Credentials, Path[], Configuration)}    * for token retrieval: call it here to verify it works.    */
annotation|@
name|Test
DECL|method|testYarnCredentialPickup ()
specifier|public
name|void
name|testYarnCredentialPickup
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Verify tokens are picked up by the YARN"
operator|+
literal|" TokenCache.obtainTokensForNamenodes() API Call"
argument_list|)
expr_stmt|;
name|Credentials
name|cred
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Path
name|yarnPath
init|=
name|path
argument_list|(
literal|"testYarnCredentialPickup"
argument_list|)
decl_stmt|;
name|Path
index|[]
name|paths
init|=
operator|new
name|Path
index|[]
block|{
name|yarnPath
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|TokenCache
operator|.
name|obtainTokensForNamenodes
argument_list|(
name|cred
argument_list|,
name|paths
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No Token in credentials file"
argument_list|,
name|lookupToken
argument_list|(
name|cred
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|getTokenKind
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the {@code hdfs fetchdt} command works with S3A tokens.    */
annotation|@
name|Test
DECL|method|testHDFSFetchDTCommand ()
specifier|public
name|void
name|testHDFSFetchDTCommand
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Use the HDFS fetchdt CLI to fetch a token"
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|URI
name|fsUri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|String
name|fsurl
init|=
name|fsUri
operator|.
name|toString
argument_list|()
decl_stmt|;
name|File
name|tokenfile
init|=
name|createTempTokenFile
argument_list|()
decl_stmt|;
comment|// this will create (& leak) a new FS instance as caching is disabled.
comment|// but as teardown destroys all filesystems for this user, it
comment|// gets cleaned up at the end of the test
name|String
name|tokenFilePath
init|=
name|tokenfile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|// create the tokens as Bob.
name|doAs
argument_list|(
name|bobUser
argument_list|,
parameter_list|()
lambda|->
name|DelegationTokenFetcher
operator|.
name|main
argument_list|(
name|conf
argument_list|,
name|args
argument_list|(
literal|"--webservice"
argument_list|,
name|fsurl
argument_list|,
name|tokenFilePath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token file was not created: "
operator|+
name|tokenfile
argument_list|,
name|tokenfile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// print to stdout
name|String
name|s
init|=
name|DelegationTokenFetcher
operator|.
name|printTokensToString
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|tokenfile
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Tokens: {}"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|DelegationTokenFetcher
operator|.
name|main
argument_list|(
name|conf
argument_list|,
name|args
argument_list|(
literal|"--print"
argument_list|,
name|tokenFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|DelegationTokenFetcher
operator|.
name|main
argument_list|(
name|conf
argument_list|,
name|args
argument_list|(
literal|"--print"
argument_list|,
literal|"--verbose"
argument_list|,
name|tokenFilePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// read in and retrieve token
name|Credentials
name|creds
init|=
name|Credentials
operator|.
name|readTokenStorageFile
argument_list|(
name|tokenfile
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|AbstractS3ATokenIdentifier
name|identifier
init|=
name|requireNonNull
argument_list|(
name|lookupToken
argument_list|(
name|creds
argument_list|,
name|fsUri
argument_list|,
name|getTokenKind
argument_list|()
argument_list|)
argument_list|,
literal|"Token lookup"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"encryption secrets"
argument_list|,
name|fs
operator|.
name|getEncryptionSecrets
argument_list|()
argument_list|,
name|identifier
operator|.
name|getEncryptionSecrets
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Username of decoded token"
argument_list|,
name|bobUser
operator|.
name|getUserName
argument_list|()
argument_list|,
name|identifier
operator|.
name|getUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
comment|// renew
name|DelegationTokenFetcher
operator|.
name|main
argument_list|(
name|conf
argument_list|,
name|args
argument_list|(
literal|"--renew"
argument_list|,
name|tokenFilePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// cancel
name|DelegationTokenFetcher
operator|.
name|main
argument_list|(
name|conf
argument_list|,
name|args
argument_list|(
literal|"--cancel"
argument_list|,
name|tokenFilePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createTempTokenFile ()
specifier|protected
name|File
name|createTempTokenFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|tokenfile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tokens"
argument_list|,
literal|".bin"
argument_list|,
name|cluster
operator|.
name|getWorkDir
argument_list|()
argument_list|)
decl_stmt|;
name|tokenfile
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|tokenfile
return|;
block|}
comment|/**    * Convert a vargs list to an array.    * @param args vararg list of arguments    * @return the generated array.    */
DECL|method|args (String...args)
specifier|private
name|String
index|[]
name|args
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
return|return
name|args
return|;
block|}
comment|/**    * This test looks at the identity which goes with a DT.    * It assumes that the username of a token == the user who created it.    * Some tokens may change that in future (maybe use Role ARN?).    */
annotation|@
name|Test
DECL|method|testFileSystemBoundToCreator ()
specifier|public
name|void
name|testFileSystemBoundToCreator
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Run tests to verify the DT Setup is bound to the creator"
argument_list|)
expr_stmt|;
comment|// quick sanity check to make sure alice and bob are different
name|assertNotEquals
argument_list|(
literal|"Alice and Bob logins"
argument_list|,
name|aliceUser
operator|.
name|getUserName
argument_list|()
argument_list|,
name|bobUser
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FS username in doAs()"
argument_list|,
name|ALICE
argument_list|,
name|doAs
argument_list|(
name|bobUser
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|getUsername
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|fsOwner
init|=
name|doAs
argument_list|(
name|bobUser
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|getDelegationTokens
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"username mismatch"
argument_list|,
name|aliceUser
operator|.
name|getUserName
argument_list|()
argument_list|,
name|fsOwner
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|AbstractS3ATokenIdentifier
argument_list|>
name|dt
init|=
name|fs
operator|.
name|getDelegationToken
argument_list|(
name|ALICE
argument_list|)
decl_stmt|;
name|AbstractS3ATokenIdentifier
name|identifier
init|=
name|dt
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|identifier
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"User in DT"
argument_list|,
name|aliceUser
operator|.
name|getUserName
argument_list|()
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|dtutil (int expected, String...args)
specifier|protected
name|String
name|dtutil
parameter_list|(
name|int
name|expected
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ByteArrayOutputStream
name|dtUtilContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DtUtilShell
name|dt
init|=
operator|new
name|DtUtilShell
argument_list|()
decl_stmt|;
name|dt
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|dtUtilContent
argument_list|)
argument_list|)
expr_stmt|;
name|dtUtilContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|doAs
argument_list|(
name|aliceUser
argument_list|,
parameter_list|()
lambda|->
name|ToolRunner
operator|.
name|run
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|dt
argument_list|,
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|dtUtilContent
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"\n{}"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Test
DECL|method|testDTUtilShell ()
specifier|public
name|void
name|testDTUtilShell
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Verify the dtutil shell command can fetch tokens"
argument_list|)
expr_stmt|;
name|File
name|tokenfile
init|=
name|createTempTokenFile
argument_list|()
decl_stmt|;
name|String
name|tfs
init|=
name|tokenfile
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|fsURI
init|=
name|getFileSystem
argument_list|()
operator|.
name|getCanonicalUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|dtutil
argument_list|(
literal|0
argument_list|,
literal|"get"
argument_list|,
name|fsURI
argument_list|,
literal|"-format"
argument_list|,
literal|"protobuf"
argument_list|,
name|tfs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not created: "
operator|+
name|tokenfile
argument_list|,
name|tokenfile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File is empty"
operator|+
name|tokenfile
argument_list|,
name|tokenfile
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File only contains header"
operator|+
name|tokenfile
argument_list|,
name|tokenfile
operator|.
name|length
argument_list|()
operator|>
literal|6
argument_list|)
expr_stmt|;
name|String
name|printed
init|=
name|dtutil
argument_list|(
literal|0
argument_list|,
literal|"print"
argument_list|,
name|tfs
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|printed
argument_list|,
name|containsString
argument_list|(
name|fsURI
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|printed
argument_list|,
name|containsString
argument_list|(
name|getTokenKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

