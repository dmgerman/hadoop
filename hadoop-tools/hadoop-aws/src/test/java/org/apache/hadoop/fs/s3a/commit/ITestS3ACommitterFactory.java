begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|magic
operator|.
name|MagicS3GuardCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|DirectoryStagingCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|PartitionedStagingCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|PathOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests for some aspects of the committer factory.  * All tests are grouped into one single test so that only one  * S3A FS client is set up and used for the entire run.  * Saves time and money.  */
end_comment

begin_class
DECL|class|ITestS3ACommitterFactory
specifier|public
class|class
name|ITestS3ACommitterFactory
extends|extends
name|AbstractCommitITest
block|{
DECL|field|INVALID_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|INVALID_NAME
init|=
literal|"invalid-name"
decl_stmt|;
comment|/**    * Counter to guarantee that even in parallel test runs, no job has the same    * ID.    */
DECL|field|jobId
specifier|private
name|String
name|jobId
decl_stmt|;
comment|// A random task attempt id for testing.
DECL|field|attempt0
specifier|private
name|String
name|attempt0
decl_stmt|;
DECL|field|taskAttempt0
specifier|private
name|TaskAttemptID
name|taskAttempt0
decl_stmt|;
DECL|field|outDir
specifier|private
name|Path
name|outDir
decl_stmt|;
DECL|field|factory
specifier|private
name|S3ACommitterFactory
name|factory
decl_stmt|;
DECL|field|tContext
specifier|private
name|TaskAttemptContext
name|tContext
decl_stmt|;
comment|/**    * Parameterized list of bindings of committer name in config file to    * expected class instantiated.    */
DECL|field|bindings
specifier|private
specifier|static
specifier|final
name|Object
index|[]
index|[]
name|bindings
init|=
block|{
block|{
name|COMMITTER_NAME_FILE
block|,
name|FileOutputCommitter
operator|.
name|class
block|}
block|,
block|{
name|COMMITTER_NAME_DIRECTORY
block|,
name|DirectoryStagingCommitter
operator|.
name|class
block|}
block|,
block|{
name|COMMITTER_NAME_PARTITIONED
block|,
name|PartitionedStagingCommitter
operator|.
name|class
block|}
block|,
block|{
name|InternalCommitterConstants
operator|.
name|COMMITTER_NAME_STAGING
block|,
name|StagingCommitter
operator|.
name|class
block|}
block|,
block|{
name|COMMITTER_NAME_MAGIC
block|,
name|MagicS3GuardCommitter
operator|.
name|class
block|}
block|}
decl_stmt|;
comment|/**    * This is a ref to the FS conf, so changes here are visible    * to callers querying the FS config.    */
DECL|field|filesystemConfRef
specifier|private
name|Configuration
name|filesystemConfRef
decl_stmt|;
DECL|field|taskConfRef
specifier|private
name|Configuration
name|taskConfRef
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|jobId
operator|=
name|randomJobId
argument_list|()
expr_stmt|;
name|attempt0
operator|=
literal|"attempt_"
operator|+
name|jobId
operator|+
literal|"_m_000000_0"
expr_stmt|;
name|taskAttempt0
operator|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|attempt0
argument_list|)
expr_stmt|;
name|outDir
operator|=
name|path
argument_list|(
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|=
operator|new
name|S3ACommitterFactory
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|OUTDIR
argument_list|,
name|outDir
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|,
name|attempt0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|APPLICATION_ATTEMPT_ID
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|filesystemConfRef
operator|=
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|tContext
operator|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
name|taskAttempt0
argument_list|)
expr_stmt|;
name|taskConfRef
operator|=
name|tContext
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEverything ()
specifier|public
name|void
name|testEverything
parameter_list|()
throws|throws
name|Throwable
block|{
name|testImplicitFileBinding
argument_list|()
expr_stmt|;
name|testBindingsInTask
argument_list|()
expr_stmt|;
name|testBindingsInFSConfig
argument_list|()
expr_stmt|;
name|testInvalidFileBinding
argument_list|()
expr_stmt|;
name|testInvalidTaskBinding
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that if all config options are unset, the FileOutputCommitter    *    * is returned.    */
DECL|method|testImplicitFileBinding ()
specifier|public
name|void
name|testImplicitFileBinding
parameter_list|()
throws|throws
name|Throwable
block|{
name|taskConfRef
operator|.
name|unset
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|)
expr_stmt|;
name|filesystemConfRef
operator|.
name|unset
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|)
expr_stmt|;
name|assertFactoryCreatesExpectedCommitter
argument_list|(
name|FileOutputCommitter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that task bindings are picked up.    */
DECL|method|testBindingsInTask ()
specifier|public
name|void
name|testBindingsInTask
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// set this to an invalid value to be confident it is not
comment|// being checked.
name|filesystemConfRef
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|,
literal|"INVALID"
argument_list|)
expr_stmt|;
name|taskConfRef
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|,
name|COMMITTER_NAME_FILE
argument_list|)
expr_stmt|;
name|assertFactoryCreatesExpectedCommitter
argument_list|(
name|FileOutputCommitter
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|binding
range|:
name|bindings
control|)
block|{
name|taskConfRef
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|,
operator|(
name|String
operator|)
name|binding
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFactoryCreatesExpectedCommitter
argument_list|(
operator|(
name|Class
operator|)
name|binding
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify that FS bindings are picked up.    */
DECL|method|testBindingsInFSConfig ()
specifier|public
name|void
name|testBindingsInFSConfig
parameter_list|()
throws|throws
name|Throwable
block|{
name|taskConfRef
operator|.
name|unset
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|)
expr_stmt|;
name|filesystemConfRef
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|,
name|COMMITTER_NAME_FILE
argument_list|)
expr_stmt|;
name|assertFactoryCreatesExpectedCommitter
argument_list|(
name|FileOutputCommitter
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|binding
range|:
name|bindings
control|)
block|{
name|taskConfRef
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|,
operator|(
name|String
operator|)
name|binding
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFactoryCreatesExpectedCommitter
argument_list|(
operator|(
name|Class
operator|)
name|binding
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create an invalid committer via the FS binding,    */
DECL|method|testInvalidFileBinding ()
specifier|public
name|void
name|testInvalidFileBinding
parameter_list|()
throws|throws
name|Throwable
block|{
name|taskConfRef
operator|.
name|unset
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|)
expr_stmt|;
name|filesystemConfRef
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|,
name|INVALID_NAME
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|PathCommitException
operator|.
name|class
argument_list|,
name|INVALID_NAME
argument_list|,
parameter_list|()
lambda|->
name|createCommitter
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an invalid committer via the task attempt.    */
DECL|method|testInvalidTaskBinding ()
specifier|public
name|void
name|testInvalidTaskBinding
parameter_list|()
throws|throws
name|Throwable
block|{
name|filesystemConfRef
operator|.
name|unset
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|)
expr_stmt|;
name|taskConfRef
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_NAME
argument_list|,
name|INVALID_NAME
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|PathCommitException
operator|.
name|class
argument_list|,
name|INVALID_NAME
argument_list|,
parameter_list|()
lambda|->
name|createCommitter
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that the factory creates the expected committer.    * @param expected expected committer class.    * @throws IOException IO failure.    */
DECL|method|assertFactoryCreatesExpectedCommitter ( final Class expected)
specifier|protected
name|void
name|assertFactoryCreatesExpectedCommitter
parameter_list|(
specifier|final
name|Class
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"Wrong Committer from factory"
argument_list|,
name|expected
argument_list|,
name|createCommitter
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a committer.    * @return the committer    * @throws IOException IO failure.    */
DECL|method|createCommitter ()
specifier|private
name|PathOutputCommitter
name|createCommitter
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|factory
operator|.
name|createOutputCommitter
argument_list|(
name|outDir
argument_list|,
name|tContext
argument_list|)
return|;
block|}
block|}
end_class

end_unit

