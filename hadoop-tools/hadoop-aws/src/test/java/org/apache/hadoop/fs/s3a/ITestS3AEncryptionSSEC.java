begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|rm
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|skipIfEncryptionTestsDisabled
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|s3a
operator|.
name|S3AContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Concrete class that extends {@link AbstractTestS3AEncryption}  * and tests SSE-C encryption.  */
end_comment

begin_class
DECL|class|ITestS3AEncryptionSSEC
specifier|public
class|class
name|ITestS3AEncryptionSSEC
extends|extends
name|AbstractTestS3AEncryption
block|{
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|,
name|getSSEAlgorithm
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
argument_list|,
literal|"4niV/jPK5VFRHY+KNb6wtqYd4xXyMgdJ9XQJpcQUVbs="
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * This will create and write to a file using encryption key A, then attempt    * to read from it again with encryption key B.  This will not work as it    * cannot decrypt the file.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCreateFileAndReadWithDifferentEncryptionKey ()
specifier|public
name|void
name|testCreateFileAndReadWithDifferentEncryptionKey
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
index|[]
name|path
init|=
operator|new
name|Path
index|[
literal|1
index|]
decl_stmt|;
name|intercept
argument_list|(
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"Forbidden (Service: Amazon S3; Status Code: 403;"
argument_list|,
parameter_list|()
lambda|->
block|{
name|int
name|len
init|=
literal|2048
decl_stmt|;
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|describe
argument_list|(
literal|"Create an encrypted file of size "
operator|+
name|len
argument_list|)
expr_stmt|;
name|String
name|src
init|=
name|createFilename
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|path
index|[
literal|0
index|]
operator|=
name|writeThenReadFile
argument_list|(
name|src
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|this
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
argument_list|,
literal|"kX7SdwVc/1VXJr76kfKnkQ3ONYhxianyL2+C3rPVT9s="
argument_list|)
expr_stmt|;
name|S3AContract
name|contract
init|=
operator|(
name|S3AContract
operator|)
name|createContract
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|contract
operator|.
name|init
argument_list|()
expr_stmt|;
comment|//skip tests if they aren't enabled
name|assumeEnabled
argument_list|()
expr_stmt|;
comment|//extract the test FS
name|FileSystem
name|fileSystem
init|=
name|contract
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
name|len
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|verifyFileContents
argument_list|(
name|fileSystem
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|,
name|data
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Fail"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|rm
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSSEAlgorithm ()
specifier|protected
name|S3AEncryptionMethods
name|getSSEAlgorithm
parameter_list|()
block|{
return|return
name|S3AEncryptionMethods
operator|.
name|SSE_C
return|;
block|}
block|}
end_class

end_unit

