begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|rm
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|skipIfEncryptionTestsDisabled
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|s3a
operator|.
name|S3AContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Concrete class that extends {@link AbstractTestS3AEncryption}  * and tests SSE-C encryption.  */
end_comment

begin_class
DECL|class|ITestS3AEncryptionSSEC
specifier|public
class|class
name|ITestS3AEncryptionSSEC
extends|extends
name|AbstractTestS3AEncryption
block|{
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|,
name|getSSEAlgorithm
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
argument_list|,
literal|"4niV/jPK5VFRHY+KNb6wtqYd4xXyMgdJ9XQJpcQUVbs="
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * This will create and write to a file using encryption key A, then attempt    * to read from it again with encryption key B.  This will not work as it    * cannot decrypt the file.    *    * This is expected AWS S3 SSE-C behavior.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCreateFileAndReadWithDifferentEncryptionKey ()
specifier|public
name|void
name|testCreateFileAndReadWithDifferentEncryptionKey
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeEnabled
argument_list|()
expr_stmt|;
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
index|[]
name|path
init|=
operator|new
name|Path
index|[
literal|1
index|]
decl_stmt|;
name|intercept
argument_list|(
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"Service: Amazon S3; Status Code: 403;"
argument_list|,
parameter_list|()
lambda|->
block|{
name|int
name|len
init|=
literal|2048
decl_stmt|;
name|describe
argument_list|(
literal|"Create an encrypted file of size "
operator|+
name|len
argument_list|)
expr_stmt|;
name|String
name|src
init|=
name|createFilename
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|path
index|[
literal|0
index|]
operator|=
name|writeThenReadFile
argument_list|(
name|src
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|//extract the test FS
name|FileSystem
name|fileSystem
init|=
name|createNewFileSystemWithSSECKey
argument_list|(
literal|"kX7SdwVc/1VXJr76kfKnkQ3ONYhxianyL2+C3rPVT9s="
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
name|len
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|verifyFileContents
argument_list|(
name|fileSystem
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|,
name|data
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Fail"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * While each object has it's own key and should be distinct, this verifies    * that hadoop treats object keys as a filesystem path.  So if a top level    * dir is encrypted with keyA, a sublevel dir cannot be accessed with a    * different keyB.    *    * This is expected AWS S3 SSE-C behavior.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCreateSubdirWithDifferentKey ()
specifier|public
name|void
name|testCreateSubdirWithDifferentKey
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeEnabled
argument_list|()
expr_stmt|;
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
index|[]
name|path
init|=
operator|new
name|Path
index|[
literal|1
index|]
decl_stmt|;
name|intercept
argument_list|(
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"Service: Amazon S3; Status Code: 403;"
argument_list|,
parameter_list|()
lambda|->
block|{
name|path
index|[
literal|0
index|]
operator|=
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
operator|new
name|Path
argument_list|(
name|createFilename
argument_list|(
literal|"dir/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|nestedDirectory
init|=
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
operator|new
name|Path
argument_list|(
name|createFilename
argument_list|(
literal|"dir/nestedDir/"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fsKeyB
init|=
name|createNewFileSystemWithSSECKey
argument_list|(
literal|"G61nz31Q7+zpjJWbakxfTOZW4VS0UmQWAq2YXhcTXoo="
argument_list|)
decl_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fsKeyB
operator|.
name|mkdirs
argument_list|(
name|nestedDirectory
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Exception should be thrown."
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|rm
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensures a file can't be created with keyA and then renamed with a different    * key.    *    * This is expected AWS S3 SSE-C behavior.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCreateFileThenMoveWithDifferentSSECKey ()
specifier|public
name|void
name|testCreateFileThenMoveWithDifferentSSECKey
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeEnabled
argument_list|()
expr_stmt|;
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
index|[]
name|path
init|=
operator|new
name|Path
index|[
literal|1
index|]
decl_stmt|;
name|intercept
argument_list|(
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"Service: Amazon S3; Status Code: 403;"
argument_list|,
parameter_list|()
lambda|->
block|{
name|int
name|len
init|=
literal|2048
decl_stmt|;
name|String
name|src
init|=
name|createFilename
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|path
index|[
literal|0
index|]
operator|=
name|writeThenReadFile
argument_list|(
name|src
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|FileSystem
name|fsKeyB
init|=
name|createNewFileSystemWithSSECKey
argument_list|(
literal|"NTx0dUPrxoo9+LbNiT/gqf3z9jILqL6ilismFmJO50U="
argument_list|)
decl_stmt|;
name|fsKeyB
operator|.
name|rename
argument_list|(
name|path
index|[
literal|0
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|createFilename
argument_list|(
literal|"different-path.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Exception should be thrown."
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * General test to make sure move works with SSE-C with the same key, unlike    * with multiple keys.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRenameFile ()
specifier|public
name|void
name|testRenameFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeEnabled
argument_list|()
expr_stmt|;
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|src
init|=
name|createFilename
argument_list|(
literal|"original-path.txt"
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
name|writeThenReadFile
argument_list|(
name|src
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|Path
name|newPath
init|=
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"different-path.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|rename
argument_list|(
name|path
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
literal|2048
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|newPath
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**    * It is possible to list the contents of a directory up to the actual    * end of the nested directories.  This is due to how S3A mocks the    * directories and how prefixes work in S3.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testListEncryptedDir ()
specifier|public
name|void
name|testListEncryptedDir
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeEnabled
argument_list|()
expr_stmt|;
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|nestedDirectory
init|=
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|nestedDirectory
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fsKeyB
init|=
name|createNewFileSystemWithSSECKey
argument_list|(
literal|"msdo3VvvZznp66Gth58a91Hxe/UpExMkwU9BHkIjfW8="
argument_list|)
decl_stmt|;
name|fsKeyB
operator|.
name|listFiles
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsKeyB
operator|.
name|listFiles
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Until this point, no exception is thrown about access
name|intercept
argument_list|(
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"Service: Amazon S3; Status Code: 403;"
argument_list|,
parameter_list|()
lambda|->
block|{
name|fsKeyB
operator|.
name|listFiles
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Exception should be thrown."
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|this
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
argument_list|)
expr_stmt|;
name|S3AContract
name|contract
init|=
operator|(
name|S3AContract
operator|)
name|createContract
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|contract
operator|.
name|init
argument_list|()
expr_stmt|;
name|FileSystem
name|unencryptedFileSystem
init|=
name|contract
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
comment|//unencrypted can access until the final directory
name|unencryptedFileSystem
operator|.
name|listFiles
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|unencryptedFileSystem
operator|.
name|listFiles
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AWSS3IOException
operator|.
name|class
argument_list|,
literal|"Bad Request (Service: Amazon S3; Status Code: 400; Error"
operator|+
literal|" Code: 400 Bad Request;"
argument_list|,
parameter_list|()
lambda|->
block|{
name|unencryptedFileSystem
operator|.
name|listFiles
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Exception should be thrown."
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|rm
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Much like the above list encrypted directory test, you cannot get the    * metadata of an object without the correct encryption key.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testListStatusEncryptedDir ()
specifier|public
name|void
name|testListStatusEncryptedDir
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeEnabled
argument_list|()
expr_stmt|;
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|nestedDirectory
init|=
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|nestedDirectory
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fsKeyB
init|=
name|createNewFileSystemWithSSECKey
argument_list|(
literal|"msdo3VvvZznp66Gth58a91Hxe/UpExMkwU9BHkIjfW8="
argument_list|)
decl_stmt|;
name|fsKeyB
operator|.
name|listStatus
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fsKeyB
operator|.
name|listStatus
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//Until this point, no exception is thrown about access
name|intercept
argument_list|(
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"Service: Amazon S3; Status Code: 403;"
argument_list|,
parameter_list|()
lambda|->
block|{
name|fsKeyB
operator|.
name|listStatus
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Exception should be thrown."
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
comment|//Now try it with an unencrypted filesystem.
name|Configuration
name|conf
init|=
name|this
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_ALGORITHM
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
argument_list|)
expr_stmt|;
name|S3AContract
name|contract
init|=
operator|(
name|S3AContract
operator|)
name|createContract
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|contract
operator|.
name|init
argument_list|()
expr_stmt|;
name|FileSystem
name|unencryptedFileSystem
init|=
name|contract
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
comment|//unencrypted can access until the final directory
name|unencryptedFileSystem
operator|.
name|listStatus
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|unencryptedFileSystem
operator|.
name|listStatus
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AWSS3IOException
operator|.
name|class
argument_list|,
literal|"Bad Request (Service: Amazon S3; Status Code: 400; Error Code: 400"
operator|+
literal|" Bad Request;"
argument_list|,
parameter_list|()
lambda|->
block|{
name|unencryptedFileSystem
operator|.
name|listStatus
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Exception should be thrown."
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|rm
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Much like trying to access a encrypted directory, an encrypted file cannot    * have its metadata read, since both are technically an object.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testListStatusEncryptedFile ()
specifier|public
name|void
name|testListStatusEncryptedFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeEnabled
argument_list|()
expr_stmt|;
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|nestedDirectory
init|=
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|nestedDirectory
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|src
init|=
name|createFilename
argument_list|(
literal|"/a/b/c/fileToStat.txt"
argument_list|)
decl_stmt|;
name|Path
name|fileToStat
init|=
name|writeThenReadFile
argument_list|(
name|src
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|FileSystem
name|fsKeyB
init|=
name|createNewFileSystemWithSSECKey
argument_list|(
literal|"msdo3VvvZznp66Gth58a91Hxe/UpExMkwU9BHkIjfW8="
argument_list|)
decl_stmt|;
comment|//Until this point, no exception is thrown about access
name|intercept
argument_list|(
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"Service: Amazon S3; Status Code: 403;"
argument_list|,
parameter_list|()
lambda|->
block|{
name|fsKeyB
operator|.
name|listStatus
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|fileToStat
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Exception should be thrown."
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|rm
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * It is possible to delete directories without the proper encryption key and    * the hierarchy above it.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDeleteEncryptedObjectWithDifferentKey ()
specifier|public
name|void
name|testDeleteEncryptedObjectWithDifferentKey
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeEnabled
argument_list|()
expr_stmt|;
name|skipIfEncryptionTestsDisabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|nestedDirectory
init|=
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|nestedDirectory
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|src
init|=
name|createFilename
argument_list|(
literal|"/a/b/c/filetobedeleted.txt"
argument_list|)
decl_stmt|;
name|Path
name|fileToDelete
init|=
name|writeThenReadFile
argument_list|(
name|src
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|FileSystem
name|fsKeyB
init|=
name|createNewFileSystemWithSSECKey
argument_list|(
literal|"msdo3VvvZznp66Gth58a91Hxe/UpExMkwU9BHkIjfW8="
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
operator|.
name|class
argument_list|,
literal|"Forbidden (Service: Amazon S3; Status Code: 403; Error Code: "
operator|+
literal|"403 Forbidden"
argument_list|,
parameter_list|()
lambda|->
block|{
name|fsKeyB
operator|.
name|delete
argument_list|(
name|fileToDelete
argument_list|,
literal|false
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Exception should be thrown."
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
comment|//This is possible
name|fsKeyB
operator|.
name|delete
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsKeyB
operator|.
name|delete
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/b/"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsKeyB
operator|.
name|delete
argument_list|(
name|S3ATestUtils
operator|.
name|createTestPath
argument_list|(
name|path
argument_list|(
name|createFilename
argument_list|(
literal|"/a/"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createNewFileSystemWithSSECKey (String sseCKey)
specifier|private
name|FileSystem
name|createNewFileSystemWithSSECKey
parameter_list|(
name|String
name|sseCKey
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|this
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|SERVER_SIDE_ENCRYPTION_KEY
argument_list|,
name|sseCKey
argument_list|)
expr_stmt|;
name|S3AContract
name|contract
init|=
operator|(
name|S3AContract
operator|)
name|createContract
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|contract
operator|.
name|init
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSystem
init|=
name|contract
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
return|return
name|fileSystem
return|;
block|}
annotation|@
name|Override
DECL|method|getSSEAlgorithm ()
specifier|protected
name|S3AEncryptionMethods
name|getSSEAlgorithm
parameter_list|()
block|{
return|return
name|S3AEncryptionMethods
operator|.
name|SSE_C
return|;
block|}
block|}
end_class

end_unit

