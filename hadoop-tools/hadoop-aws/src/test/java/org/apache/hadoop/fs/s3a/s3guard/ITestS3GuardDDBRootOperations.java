begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|FixMethodOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|MethodSorters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AbstractS3ATestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
operator|.
name|StoreContext
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|ENABLE_MULTI_DELETE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3GUARD_DDB_BACKGROUND_SLEEP_MSEC_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|getTestBucketName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|removeBucketOverrides
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|applyLocatedFiles
import|;
end_import

begin_comment
comment|/**  * This test run against the root of the FS, and operations which span the DDB  * table and the filesystem.  * For this reason, these tests are executed in the sequential phase of the  * integration tests.  *<p>  * The tests only run if DynamoDB is the metastore.  */
end_comment

begin_class
annotation|@
name|FixMethodOrder
argument_list|(
name|MethodSorters
operator|.
name|NAME_ASCENDING
argument_list|)
DECL|class|ITestS3GuardDDBRootOperations
specifier|public
class|class
name|ITestS3GuardDDBRootOperations
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|storeContext
specifier|private
name|StoreContext
name|storeContext
decl_stmt|;
DECL|field|fsUriStr
specifier|private
name|String
name|fsUriStr
decl_stmt|;
DECL|field|metastore
specifier|private
name|DynamoDBMetadataStore
name|metastore
decl_stmt|;
DECL|field|metastoreUriStr
specifier|private
name|String
name|metastoreUriStr
decl_stmt|;
comment|// this is a switch you can change in your IDE to enable
comment|// or disable those tests which clean up the metastore.
DECL|field|cleaning
specifier|private
specifier|final
name|boolean
name|cleaning
init|=
literal|true
decl_stmt|;
comment|/**    * The test timeout is increased in case previous tests have created    * many tombstone markers which now need to be purged.    * @return the test timeout.    */
annotation|@
name|Override
DECL|method|getTestTimeoutMillis ()
specifier|protected
name|int
name|getTestTimeoutMillis
parameter_list|()
block|{
return|return
name|SCALE_TEST_TIMEOUT_SECONDS
operator|*
literal|1000
return|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|getTestBucketName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// set a sleep time of 0 on pruning, for speedier test runs.
name|removeBucketOverrides
argument_list|(
name|bucketName
argument_list|,
name|conf
argument_list|,
name|ENABLE_MULTI_DELETE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|S3GUARD_DDB_BACKGROUND_SLEEP_MSEC_KEY
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|S3ATestUtils
operator|.
name|assumeS3GuardState
argument_list|(
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|storeContext
operator|=
name|fs
operator|.
name|createStoreContext
argument_list|()
expr_stmt|;
name|assume
argument_list|(
literal|"Filesystem isn't running DDB"
argument_list|,
name|storeContext
operator|.
name|getMetadataStore
argument_list|()
operator|instanceof
name|DynamoDBMetadataStore
argument_list|)
expr_stmt|;
name|metastore
operator|=
operator|(
name|DynamoDBMetadataStore
operator|)
name|storeContext
operator|.
name|getMetadataStore
argument_list|()
expr_stmt|;
name|URI
name|fsURI
init|=
name|storeContext
operator|.
name|getFsURI
argument_list|()
decl_stmt|;
name|fsUriStr
operator|=
name|fsURI
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|fsUriStr
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|fsUriStr
operator|=
name|fsUriStr
operator|+
literal|"/"
expr_stmt|;
block|}
name|metastoreUriStr
operator|=
literal|"dynamodb://"
operator|+
name|metastore
operator|.
name|getTableName
argument_list|()
operator|+
literal|"/"
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"teardown"
argument_list|)
expr_stmt|;
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
DECL|method|assumeCleaningOperation ()
specifier|private
name|void
name|assumeCleaningOperation
parameter_list|()
block|{
name|assume
argument_list|(
literal|"Cleaning operation skipped"
argument_list|,
name|cleaning
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|test_050_dump_metastore ()
specifier|public
name|void
name|test_050_dump_metastore
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|destFile
init|=
name|calculateDumpFileBase
argument_list|()
decl_stmt|;
name|describe
argument_list|(
literal|"Dumping S3Guard store under %s"
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
name|DumpS3GuardDynamoTable
operator|.
name|dumpStore
argument_list|(
literal|null
argument_list|,
name|metastore
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|destFile
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_060_dump_metastore_and_s3 ()
specifier|public
name|void
name|test_060_dump_metastore_and_s3
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|destFile
init|=
name|calculateDumpFileBase
argument_list|()
decl_stmt|;
name|describe
argument_list|(
literal|"Dumping S3Guard store under %s"
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
name|DumpS3GuardDynamoTable
operator|.
name|dumpStore
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|metastore
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|destFile
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_100_FilesystemPrune ()
specifier|public
name|void
name|test_100_FilesystemPrune
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Execute prune against a filesystem URI"
argument_list|)
expr_stmt|;
name|assumeCleaningOperation
argument_list|()
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|S3GuardTool
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|S3GuardTool
operator|.
name|Prune
operator|.
name|NAME
argument_list|,
name|fsUriStr
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Result of prune %s"
argument_list|,
name|fsUriStr
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_200_MetastorePruneTombstones ()
specifier|public
name|void
name|test_200_MetastorePruneTombstones
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Execute prune against a dynamo URL"
argument_list|)
expr_stmt|;
name|assumeCleaningOperation
argument_list|()
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|S3GuardTool
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|S3GuardTool
operator|.
name|Prune
operator|.
name|NAME
argument_list|,
literal|"-tombstone"
argument_list|,
literal|"-meta"
argument_list|,
name|checkNotNull
argument_list|(
name|metastoreUriStr
argument_list|)
argument_list|,
literal|"-seconds"
argument_list|,
literal|"1"
argument_list|,
name|fs
operator|.
name|qualify
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Result of prune %s"
argument_list|,
name|fsUriStr
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_300_MetastorePrune ()
specifier|public
name|void
name|test_300_MetastorePrune
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Execute prune against a dynamo URL"
argument_list|)
expr_stmt|;
name|assumeCleaningOperation
argument_list|()
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|S3GuardTool
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|S3GuardTool
operator|.
name|Prune
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|checkNotNull
argument_list|(
name|metastoreUriStr
argument_list|)
argument_list|,
literal|"-seconds"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Result of prune %s"
argument_list|,
name|fsUriStr
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_400_rm_root_recursive ()
specifier|public
name|void
name|test_400_rm_root_recursive
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Remove the root directory"
argument_list|)
expr_stmt|;
name|assumeCleaningOperation
argument_list|()
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/test_400_rm_root_recursive-01"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"/test_400_rm_root_recursive-02"
argument_list|)
decl_stmt|;
comment|// recursive treewalk to delete all files
comment|// does not delete directories.
name|applyLocatedFiles
argument_list|(
name|fs
operator|.
name|listFilesAndEmptyDirectories
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
argument_list|,
name|f
lambda|->
block|{
name|Path
name|p
init|=
name|f
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"expected file to be deleted"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|deleteChildren
argument_list|(
name|fs
argument_list|,
name|root
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// everything must be done by now
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|AtomicInteger
name|foundFile
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|applyLocatedFiles
argument_list|(
name|fs
operator|.
name|listFilesAndEmptyDirectories
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
argument_list|,
name|f
lambda|->
block|{
name|foundFile
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
name|f
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"Dir  "
else|:
literal|"File "
argument_list|)
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|f
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Remaining files "
operator|+
name|sb
argument_list|,
literal|0
argument_list|,
name|foundFile
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Root directory delete failed"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Root directory delete should have failed"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|test_600_dump_metastore ()
specifier|public
name|void
name|test_600_dump_metastore
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|destFile
init|=
name|calculateDumpFileBase
argument_list|()
decl_stmt|;
name|describe
argument_list|(
literal|"Dumping S3Guard store under %s"
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
name|DumpS3GuardDynamoTable
operator|.
name|dumpStore
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|metastore
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|destFile
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|calculateDumpFileBase ()
specifier|protected
name|File
name|calculateDumpFileBase
parameter_list|()
block|{
name|String
name|target
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.dir"
argument_list|,
literal|"target"
argument_list|)
decl_stmt|;
name|File
name|buildDir
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|buildDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|buildDir
argument_list|,
name|getMethodName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

