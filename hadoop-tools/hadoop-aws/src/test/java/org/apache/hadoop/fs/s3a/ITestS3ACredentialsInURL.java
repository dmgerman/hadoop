begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|AWS_CREDENTIALS_PROVIDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
operator|.
name|TEST_FS_S3A_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|assumeS3GuardState
import|;
end_import

begin_comment
comment|/**  * Tests that credentials can go into the URL. This includes a valid  * set, and a check that an invalid set do at least get stripped out  * of the final URI  */
end_comment

begin_class
DECL|class|ITestS3ACredentialsInURL
specifier|public
class|class
name|ITestS3ACredentialsInURL
extends|extends
name|Assert
block|{
DECL|field|fs
specifier|private
name|S3AFileSystem
name|fs
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3ACredentialsInURL
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30
operator|*
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test instantiation.    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testInstantiateFromURL ()
specifier|public
name|void
name|testInstantiateFromURL
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Skip in the case of S3Guard with DynamoDB because it cannot get
comment|// credentials for its own use if they're only in S3 URLs
name|assumeS3GuardState
argument_list|(
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|accessKey
init|=
name|conf
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|ACCESS_KEY
argument_list|)
decl_stmt|;
name|String
name|secretKey
init|=
name|conf
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|SECRET_KEY
argument_list|)
decl_stmt|;
name|String
name|fsname
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|TEST_FS_S3A_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeNotNull
argument_list|(
name|fsname
argument_list|,
name|accessKey
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
name|URI
name|original
init|=
operator|new
name|URI
argument_list|(
name|fsname
argument_list|)
decl_stmt|;
name|URI
name|secretsURI
init|=
name|createUriWithEmbeddedSecrets
argument_list|(
name|original
argument_list|,
name|accessKey
argument_list|,
name|secretKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|secretKey
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"test URI encodes the / symbol"
argument_list|,
name|secretsURI
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"%252F"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secretKey
operator|.
name|contains
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"test URI encodes the + symbol"
argument_list|,
name|secretsURI
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"%252B"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Does not contain secrets"
argument_list|,
name|original
operator|.
name|equals
argument_list|(
name|secretsURI
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TEST_FS_S3A_NAME
argument_list|,
name|secretsURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|Constants
operator|.
name|ACCESS_KEY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|Constants
operator|.
name|SECRET_KEY
argument_list|)
expr_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|fsURI
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"FS URI contains a @ symbol"
argument_list|,
name|fsURI
operator|.
name|contains
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"FS URI contains a % symbol"
argument_list|,
name|fsURI
operator|.
name|contains
argument_list|(
literal|"%"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|original
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|fsURI
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Filesystem URI does not match original"
argument_list|)
expr_stmt|;
block|}
name|validate
argument_list|(
literal|"original path"
argument_list|,
operator|new
name|Path
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|validate
argument_list|(
literal|"bare path"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|validate
argument_list|(
literal|"secrets path"
argument_list|,
operator|new
name|Path
argument_list|(
name|secretsURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validate (String text, Path path)
specifier|private
name|void
name|validate
parameter_list|(
name|String
name|text
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fs
operator|.
name|canonicalizeUri
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|checkPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|+
literal|" Not a directory"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|globStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} failure: {}"
argument_list|,
name|text
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|text
operator|+
literal|" Test failed"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set up some invalid credentials, verify login is rejected.    */
annotation|@
name|Test
DECL|method|testInvalidCredentialsFail ()
specifier|public
name|void
name|testInvalidCredentialsFail
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// use the default credential provider chain
name|conf
operator|.
name|unset
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|)
expr_stmt|;
name|String
name|fsname
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|TEST_FS_S3A_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeNotNull
argument_list|(
name|fsname
argument_list|)
expr_stmt|;
name|assumeS3GuardState
argument_list|(
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|URI
name|original
init|=
operator|new
name|URI
argument_list|(
name|fsname
argument_list|)
decl_stmt|;
name|URI
name|testURI
init|=
name|createUriWithEmbeddedSecrets
argument_list|(
name|original
argument_list|,
literal|"user"
argument_list|,
literal|"//"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TEST_FS_S3A_NAME
argument_list|,
name|testURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|AccessDeniedException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|createUriWithEmbeddedSecrets (URI original, String accessKey, String secretKey)
specifier|private
name|URI
name|createUriWithEmbeddedSecrets
parameter_list|(
name|URI
name|original
parameter_list|,
name|String
name|accessKey
parameter_list|,
name|String
name|secretKey
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|String
name|encodedSecretKey
init|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|secretKey
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|String
name|formattedString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s://%s:%s@%s/%s/"
argument_list|,
name|original
operator|.
name|getScheme
argument_list|()
argument_list|,
name|accessKey
argument_list|,
name|encodedSecretKey
argument_list|,
name|original
operator|.
name|getHost
argument_list|()
argument_list|,
name|original
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|testURI
decl_stmt|;
try|try
block|{
name|testURI
operator|=
operator|new
name|Path
argument_list|(
name|formattedString
argument_list|)
operator|.
name|toUri
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// inner cause is stripped to keep any secrets out of stack traces
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not encode Path"
argument_list|)
throw|;
block|}
return|return
name|testURI
return|;
block|}
block|}
end_class

end_unit

