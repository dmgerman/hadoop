begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|AssumptionViolatedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_class
DECL|class|S3ATestUtils
specifier|public
class|class
name|S3ATestUtils
block|{
DECL|method|createTestFileSystem (Configuration conf)
specifier|public
specifier|static
name|S3AFileSystem
name|createTestFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fsname
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|TestS3AFileSystemContract
operator|.
name|TEST_FS_S3A_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|boolean
name|liveTest
init|=
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fsname
argument_list|)
decl_stmt|;
name|URI
name|testURI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|liveTest
condition|)
block|{
name|testURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|fsname
argument_list|)
expr_stmt|;
name|liveTest
operator|=
name|testURI
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|FS_S3A
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|liveTest
condition|)
block|{
comment|// This doesn't work with our JUnit 3 style test cases, so instead we'll
comment|// make this whole class not run by default
throw|throw
operator|new
name|AssumptionViolatedException
argument_list|(
literal|"No test filesystem in "
operator|+
name|TestS3AFileSystemContract
operator|.
name|TEST_FS_S3A_NAME
argument_list|)
throw|;
block|}
name|S3AFileSystem
name|fs1
init|=
operator|new
name|S3AFileSystem
argument_list|()
decl_stmt|;
comment|//enable purging in tests
name|conf
operator|.
name|setBoolean
argument_list|(
name|Constants
operator|.
name|PURGE_EXISTING_MULTIPART
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|PURGE_EXISTING_MULTIPART_AGE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fs1
operator|.
name|initialize
argument_list|(
name|testURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|fs1
return|;
block|}
DECL|method|createTestFileContext (Configuration conf)
specifier|public
specifier|static
name|FileContext
name|createTestFileContext
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fsname
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|TestS3AFileSystemContract
operator|.
name|TEST_FS_S3A_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|boolean
name|liveTest
init|=
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fsname
argument_list|)
decl_stmt|;
name|URI
name|testURI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|liveTest
condition|)
block|{
name|testURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|fsname
argument_list|)
expr_stmt|;
name|liveTest
operator|=
name|testURI
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|FS_S3A
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|liveTest
condition|)
block|{
comment|// This doesn't work with our JUnit 3 style test cases, so instead we'll
comment|// make this whole class not run by default
throw|throw
operator|new
name|AssumptionViolatedException
argument_list|(
literal|"No test filesystem in "
operator|+
name|TestS3AFileSystemContract
operator|.
name|TEST_FS_S3A_NAME
argument_list|)
throw|;
block|}
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|testURI
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|fc
return|;
block|}
comment|/**    * Repeatedly attempt a callback until timeout or a {@link FailFastException}    * is raised. This is modeled on ScalaTests {@code eventually(Closure)} code.    * @param timeout timeout    * @param callback callback to invoke    * @throws FailFastException any fast-failure    * @throws Exception the exception which caused the iterator to fail    */
DECL|method|eventually (int timeout, Callable<Void> callback)
specifier|public
specifier|static
name|void
name|eventually
parameter_list|(
name|int
name|timeout
parameter_list|,
name|Callable
argument_list|<
name|Void
argument_list|>
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
name|Exception
name|lastException
decl_stmt|;
name|long
name|endtime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
do|do
block|{
try|try
block|{
name|callback
operator|.
name|call
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|FailFastException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|=
name|e
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|endtime
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
do|;
throw|throw
name|lastException
throw|;
block|}
comment|/**    * The exception to raise so as to exit fast from    * {@link #eventually(int, Callable)}.    */
DECL|class|FailFastException
specifier|public
specifier|static
class|class
name|FailFastException
extends|extends
name|Exception
block|{
DECL|method|FailFastException ()
specifier|public
name|FailFastException
parameter_list|()
block|{     }
DECL|method|FailFastException (String message)
specifier|public
name|FailFastException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|FailFastException (String message, Throwable cause)
specifier|public
name|FailFastException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
DECL|method|FailFastException (Throwable cause)
specifier|public
name|FailFastException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify the class of an exception. If it is not as expected, rethrow it.    * Comparison is on the exact class, not subclass-of inference as    * offered by {@code instanceof}.    * @param clazz the expected exception class    * @param ex the exception caught    * @return the exception, if it is of the expected class    * @throws Exception the exception passed in.    */
DECL|method|verifyExceptionClass (Class clazz, Exception ex)
specifier|public
specifier|static
name|Exception
name|verifyExceptionClass
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|Exception
name|ex
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
return|return
name|ex
return|;
block|}
block|}
end_class

end_unit

