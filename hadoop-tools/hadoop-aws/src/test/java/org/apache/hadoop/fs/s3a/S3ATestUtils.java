begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DynamoDBClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DynamoDBLocalClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3Guard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|AssumptionViolatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|skip
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|InconsistentAmazonS3Client
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|propagateBucketOptions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Utilities for the S3A tests.  */
end_comment

begin_class
DECL|class|S3ATestUtils
specifier|public
specifier|final
class|class
name|S3ATestUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3ATestUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Value to set a system property to (in maven) to declare that    * a property has been unset.    */
DECL|field|UNSET_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|UNSET_PROPERTY
init|=
literal|"unset"
decl_stmt|;
DECL|field|PURGE_DELAY_SECONDS
specifier|public
specifier|static
specifier|final
name|int
name|PURGE_DELAY_SECONDS
init|=
literal|60
operator|*
literal|60
decl_stmt|;
comment|/**    * Get S3A FS name.    * @param conf configuration.    * @return S3A fs name.    */
DECL|method|getFsName (Configuration conf)
specifier|public
specifier|static
name|String
name|getFsName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getTrimmed
argument_list|(
name|TEST_FS_S3A_NAME
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**    * Create the test filesystem.    *    * If the test.fs.s3a.name property is not set, this will    * trigger a JUnit failure.    *    * Multipart purging is enabled.    * @param conf configuration    * @return the FS    * @throws IOException IO Problems    * @throws AssumptionViolatedException if the FS is not named    */
DECL|method|createTestFileSystem (Configuration conf)
specifier|public
specifier|static
name|S3AFileSystem
name|createTestFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTestFileSystem
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create the test filesystem with or without multipart purging    *    * If the test.fs.s3a.name property is not set, this will    * trigger a JUnit failure.    * @param conf configuration    * @param purge flag to enable Multipart purging    * @return the FS    * @throws IOException IO Problems    * @throws AssumptionViolatedException if the FS is not named    */
DECL|method|createTestFileSystem (Configuration conf, boolean purge)
specifier|public
specifier|static
name|S3AFileSystem
name|createTestFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|purge
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fsname
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|TEST_FS_S3A_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|boolean
name|liveTest
init|=
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fsname
argument_list|)
decl_stmt|;
name|URI
name|testURI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|liveTest
condition|)
block|{
name|testURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|fsname
argument_list|)
expr_stmt|;
name|liveTest
operator|=
name|testURI
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|FS_S3A
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|liveTest
condition|)
block|{
comment|// This doesn't work with our JUnit 3 style test cases, so instead we'll
comment|// make this whole class not run by default
throw|throw
operator|new
name|AssumptionViolatedException
argument_list|(
literal|"No test filesystem in "
operator|+
name|TEST_FS_S3A_NAME
argument_list|)
throw|;
block|}
comment|// patch in S3Guard options
name|maybeEnableS3Guard
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs1
init|=
operator|new
name|S3AFileSystem
argument_list|()
decl_stmt|;
comment|//enable purging in tests
if|if
condition|(
name|purge
condition|)
block|{
comment|// purge with but a delay so that parallel multipart tests don't
comment|// suddenly start timing out
name|enableMultipartPurge
argument_list|(
name|conf
argument_list|,
name|PURGE_DELAY_SECONDS
argument_list|)
expr_stmt|;
block|}
name|fs1
operator|.
name|initialize
argument_list|(
name|testURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|fs1
return|;
block|}
DECL|method|enableMultipartPurge (Configuration conf, int seconds)
specifier|public
specifier|static
name|void
name|enableMultipartPurge
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|seconds
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|PURGE_EXISTING_MULTIPART
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|PURGE_EXISTING_MULTIPART_AGE
argument_list|,
name|seconds
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a file context for tests.    *    * If the test.fs.s3a.name property is not set, this will    * trigger a JUnit failure.    *    * Multipart purging is enabled.    * @param conf configuration    * @return the FS    * @throws IOException IO Problems    * @throws AssumptionViolatedException if the FS is not named    */
DECL|method|createTestFileContext (Configuration conf)
specifier|public
specifier|static
name|FileContext
name|createTestFileContext
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fsname
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|TEST_FS_S3A_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|boolean
name|liveTest
init|=
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fsname
argument_list|)
decl_stmt|;
name|URI
name|testURI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|liveTest
condition|)
block|{
name|testURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|fsname
argument_list|)
expr_stmt|;
name|liveTest
operator|=
name|testURI
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|FS_S3A
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|liveTest
condition|)
block|{
comment|// This doesn't work with our JUnit 3 style test cases, so instead we'll
comment|// make this whole class not run by default
throw|throw
operator|new
name|AssumptionViolatedException
argument_list|(
literal|"No test filesystem in "
operator|+
name|TEST_FS_S3A_NAME
argument_list|)
throw|;
block|}
comment|// patch in S3Guard options
name|maybeEnableS3Guard
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|testURI
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|fc
return|;
block|}
comment|/**    * Get a long test property.    *<ol>    *<li>Look up configuration value (which can pick up core-default.xml),    *       using {@code defVal} as the default value (if conf != null).    *</li>    *<li>Fetch the system property.</li>    *<li>If the system property is not empty or "(unset)":    *   it overrides the conf value.    *</li>    *</ol>    * This puts the build properties in charge of everything. It's not a    * perfect design; having maven set properties based on a file, as ant let    * you do, is better for customization.    *    * As to why there's a special (unset) value, see    * {@link http://stackoverflow.com/questions/7773134/null-versus-empty-arguments-in-maven}    * @param conf config: may be null    * @param key key to look up    * @param defVal default value    * @return the evaluated test property.    */
DECL|method|getTestPropertyLong (Configuration conf, String key, long defVal)
specifier|public
specifier|static
name|long
name|getTestPropertyLong
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|long
name|defVal
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTestProperty
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|defVal
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get a test property value in bytes, using k, m, g, t, p, e suffixes.    * {@link org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix#string2long(String)}    *<ol>    *<li>Look up configuration value (which can pick up core-default.xml),    *       using {@code defVal} as the default value (if conf != null).    *</li>    *<li>Fetch the system property.</li>    *<li>If the system property is not empty or "(unset)":    *   it overrides the conf value.    *</li>    *</ol>    * This puts the build properties in charge of everything. It's not a    * perfect design; having maven set properties based on a file, as ant let    * you do, is better for customization.    *    * As to why there's a special (unset) value, see    * {@link http://stackoverflow.com/questions/7773134/null-versus-empty-arguments-in-maven}    * @param conf config: may be null    * @param key key to look up    * @param defVal default value    * @return the evaluated test property.    */
DECL|method|getTestPropertyBytes (Configuration conf, String key, String defVal)
specifier|public
specifier|static
name|long
name|getTestPropertyBytes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|defVal
parameter_list|)
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|getTestProperty
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|defVal
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get an integer test property; algorithm described in    * {@link #getTestPropertyLong(Configuration, String, long)}.    * @param key key to look up    * @param defVal default value    * @return the evaluated test property.    */
DECL|method|getTestPropertyInt (Configuration conf, String key, int defVal)
specifier|public
specifier|static
name|int
name|getTestPropertyInt
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|defVal
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|getTestPropertyLong
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|defVal
argument_list|)
return|;
block|}
comment|/**    * Get a boolean test property; algorithm described in    * {@link #getTestPropertyLong(Configuration, String, long)}.    * @param key key to look up    * @param defVal default value    * @return the evaluated test property.    */
DECL|method|getTestPropertyBool (Configuration conf, String key, boolean defVal)
specifier|public
specifier|static
name|boolean
name|getTestPropertyBool
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|defVal
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|getTestProperty
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|defVal
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get a string test property.    *<ol>    *<li>Look up configuration value (which can pick up core-default.xml),    *       using {@code defVal} as the default value (if conf != null).    *</li>    *<li>Fetch the system property.</li>    *<li>If the system property is not empty or "(unset)":    *   it overrides the conf value.    *</li>    *</ol>    * This puts the build properties in charge of everything. It's not a    * perfect design; having maven set properties based on a file, as ant let    * you do, is better for customization.    *    * As to why there's a special (unset) value, see    * @see<a href="http://stackoverflow.com/questions/7773134/null-versus-empty-arguments-in-maven">    *   Stack Overflow</a>    * @param conf config: may be null    * @param key key to look up    * @param defVal default value    * @return the evaluated test property.    */
DECL|method|getTestProperty (Configuration conf, String key, String defVal)
specifier|public
specifier|static
name|String
name|getTestProperty
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|defVal
parameter_list|)
block|{
name|String
name|confVal
init|=
name|conf
operator|!=
literal|null
condition|?
name|conf
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|,
name|defVal
argument_list|)
else|:
name|defVal
decl_stmt|;
name|String
name|propval
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|propval
argument_list|)
operator|&&
operator|!
name|UNSET_PROPERTY
operator|.
name|equals
argument_list|(
name|propval
argument_list|)
condition|?
name|propval
else|:
name|confVal
return|;
block|}
comment|/**    * Verify the class of an exception. If it is not as expected, rethrow it.    * Comparison is on the exact class, not subclass-of inference as    * offered by {@code instanceof}.    * @param clazz the expected exception class    * @param ex the exception caught    * @return the exception, if it is of the expected class    * @throws Exception the exception passed in.    */
DECL|method|verifyExceptionClass (Class<E> clazz, Exception ex)
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|E
name|verifyExceptionClass
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|,
name|Exception
name|ex
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
return|return
operator|(
name|E
operator|)
name|ex
return|;
block|}
comment|/**    * Turn off FS Caching: use if a filesystem with different options from    * the default is required.    * @param conf configuration to patch    */
DECL|method|disableFilesystemCaching (Configuration conf)
specifier|public
specifier|static
name|void
name|disableFilesystemCaching
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FS_S3A_IMPL_DISABLE_CACHE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Skip a test if encryption tests are disabled.    * @param configuration configuration to probe    */
DECL|method|skipIfEncryptionTestsDisabled ( Configuration configuration)
specifier|public
specifier|static
name|void
name|skipIfEncryptionTestsDisabled
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
if|if
condition|(
operator|!
name|configuration
operator|.
name|getBoolean
argument_list|(
name|KEY_ENCRYPTION_TESTS
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|skip
argument_list|(
literal|"Skipping encryption tests"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a test path, using the value of    * {@link S3ATestConstants#TEST_UNIQUE_FORK_ID} if it is set.    * @param defVal default value    * @return a path    */
DECL|method|createTestPath (Path defVal)
specifier|public
specifier|static
name|Path
name|createTestPath
parameter_list|(
name|Path
name|defVal
parameter_list|)
block|{
name|String
name|testUniqueForkId
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|S3ATestConstants
operator|.
name|TEST_UNIQUE_FORK_ID
argument_list|)
decl_stmt|;
return|return
name|testUniqueForkId
operator|==
literal|null
condition|?
name|defVal
else|:
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|testUniqueForkId
argument_list|,
literal|"test"
argument_list|)
return|;
block|}
comment|/**    * Test assumption that S3Guard is/is not enabled.    * @param shouldBeEnabled should S3Guard be enabled?    * @param originalConf configuration to check    * @throws URISyntaxException    */
DECL|method|assumeS3GuardState (boolean shouldBeEnabled, Configuration originalConf)
specifier|public
specifier|static
name|void
name|assumeS3GuardState
parameter_list|(
name|boolean
name|shouldBeEnabled
parameter_list|,
name|Configuration
name|originalConf
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|boolean
name|isEnabled
init|=
name|getTestPropertyBool
argument_list|(
name|originalConf
argument_list|,
name|TEST_S3GUARD_ENABLED
argument_list|,
name|originalConf
operator|.
name|getBoolean
argument_list|(
name|TEST_S3GUARD_ENABLED
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeThat
argument_list|(
literal|"Unexpected S3Guard test state:"
operator|+
literal|" shouldBeEnabled="
operator|+
name|shouldBeEnabled
operator|+
literal|" and isEnabled="
operator|+
name|isEnabled
argument_list|,
name|shouldBeEnabled
argument_list|,
name|Is
operator|.
name|is
argument_list|(
name|isEnabled
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fsname
init|=
name|originalConf
operator|.
name|getTrimmed
argument_list|(
name|TEST_FS_S3A_NAME
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeNotNull
argument_list|(
name|fsname
argument_list|)
expr_stmt|;
specifier|final
name|String
name|bucket
init|=
operator|new
name|URI
argument_list|(
name|fsname
argument_list|)
operator|.
name|getHost
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|propagateBucketOptions
argument_list|(
name|originalConf
argument_list|,
name|bucket
argument_list|)
decl_stmt|;
name|boolean
name|usingNullImpl
init|=
name|S3GUARD_METASTORE_NULL
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|S3_METADATA_STORE_IMPL
argument_list|,
name|S3GUARD_METASTORE_NULL
argument_list|)
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeThat
argument_list|(
literal|"Unexpected S3Guard test state:"
operator|+
literal|" shouldBeEnabled="
operator|+
name|shouldBeEnabled
operator|+
literal|" but usingNullImpl="
operator|+
name|usingNullImpl
argument_list|,
name|shouldBeEnabled
argument_list|,
name|Is
operator|.
name|is
argument_list|(
operator|!
name|usingNullImpl
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Conditionally set the S3Guard options from test properties.    * @param conf configuration    */
DECL|method|maybeEnableS3Guard (Configuration conf)
specifier|public
specifier|static
name|void
name|maybeEnableS3Guard
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|getTestPropertyBool
argument_list|(
name|conf
argument_list|,
name|TEST_S3GUARD_ENABLED
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|TEST_S3GUARD_ENABLED
argument_list|,
literal|false
argument_list|)
argument_list|)
condition|)
block|{
comment|// S3Guard is enabled.
name|boolean
name|authoritative
init|=
name|getTestPropertyBool
argument_list|(
name|conf
argument_list|,
name|TEST_S3GUARD_AUTHORITATIVE
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|TEST_S3GUARD_AUTHORITATIVE
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|impl
init|=
name|getTestProperty
argument_list|(
name|conf
argument_list|,
name|TEST_S3GUARD_IMPLEMENTATION
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|TEST_S3GUARD_IMPLEMENTATION
argument_list|,
name|TEST_S3GUARD_IMPLEMENTATION_LOCAL
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|implClass
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|impl
condition|)
block|{
case|case
name|TEST_S3GUARD_IMPLEMENTATION_LOCAL
case|:
name|implClass
operator|=
name|S3GUARD_METASTORE_LOCAL
expr_stmt|;
break|break;
case|case
name|TEST_S3GUARD_IMPLEMENTATION_DYNAMODBLOCAL
case|:
name|conf
operator|.
name|setClass
argument_list|(
name|S3Guard
operator|.
name|S3GUARD_DDB_CLIENT_FACTORY_IMPL
argument_list|,
name|DynamoDBLocalClientFactory
operator|.
name|class
argument_list|,
name|DynamoDBClientFactory
operator|.
name|class
argument_list|)
expr_stmt|;
case|case
name|TEST_S3GUARD_IMPLEMENTATION_DYNAMO
case|:
name|implClass
operator|=
name|S3GUARD_METASTORE_DYNAMO
expr_stmt|;
break|break;
case|case
name|TEST_S3GUARD_IMPLEMENTATION_NONE
case|:
name|implClass
operator|=
name|S3GUARD_METASTORE_NULL
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"Unknown s3guard back end: \""
operator|+
name|impl
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Enabling S3Guard, authoritative={}, implementation={}"
argument_list|,
name|authoritative
argument_list|,
name|implClass
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|METADATASTORE_AUTHORITATIVE
argument_list|,
name|authoritative
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|S3_METADATA_STORE_IMPL
argument_list|,
name|implClass
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|S3GUARD_DDB_TABLE_CREATE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Is there a MetadataStore configured for s3a with authoritative enabled?    * @param conf Configuration to test.    * @return true iff there is a MetadataStore configured, and it is    * configured allow authoritative results.  This can result in reducing    * round trips to S3 service for cached results, which may affect FS/FC    * statistics.    */
DECL|method|isMetadataStoreAuthoritative (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isMetadataStoreAuthoritative
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return
name|Constants
operator|.
name|DEFAULT_METADATASTORE_AUTHORITATIVE
return|;
block|}
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|Constants
operator|.
name|METADATASTORE_AUTHORITATIVE
argument_list|,
name|Constants
operator|.
name|DEFAULT_METADATASTORE_AUTHORITATIVE
argument_list|)
return|;
block|}
comment|/**    * Reset all metrics in a list.    * @param metrics metrics to reset    */
DECL|method|reset (S3ATestUtils.MetricDiff... metrics)
specifier|public
specifier|static
name|void
name|reset
parameter_list|(
name|S3ATestUtils
operator|.
name|MetricDiff
modifier|...
name|metrics
parameter_list|)
block|{
for|for
control|(
name|S3ATestUtils
operator|.
name|MetricDiff
name|metric
range|:
name|metrics
control|)
block|{
name|metric
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Print all metrics in a list.    * @param log log to print the metrics to.    * @param metrics metrics to process    */
DECL|method|print (Logger log, S3ATestUtils.MetricDiff... metrics)
specifier|public
specifier|static
name|void
name|print
parameter_list|(
name|Logger
name|log
parameter_list|,
name|S3ATestUtils
operator|.
name|MetricDiff
modifier|...
name|metrics
parameter_list|)
block|{
for|for
control|(
name|S3ATestUtils
operator|.
name|MetricDiff
name|metric
range|:
name|metrics
control|)
block|{
name|log
operator|.
name|info
argument_list|(
name|metric
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Print all metrics in a list, then reset them.    * @param log log to print the metrics to.    * @param metrics metrics to process    */
DECL|method|printThenReset (Logger log, S3ATestUtils.MetricDiff... metrics)
specifier|public
specifier|static
name|void
name|printThenReset
parameter_list|(
name|Logger
name|log
parameter_list|,
name|S3ATestUtils
operator|.
name|MetricDiff
modifier|...
name|metrics
parameter_list|)
block|{
name|print
argument_list|(
name|log
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper class to do diffs of metrics.    */
DECL|class|MetricDiff
specifier|public
specifier|static
specifier|final
class|class
name|MetricDiff
block|{
DECL|field|fs
specifier|private
specifier|final
name|S3AFileSystem
name|fs
decl_stmt|;
DECL|field|statistic
specifier|private
specifier|final
name|Statistic
name|statistic
decl_stmt|;
DECL|field|startingValue
specifier|private
name|long
name|startingValue
decl_stmt|;
comment|/**      * Constructor.      * Invokes {@link #reset()} so it is immediately capable of measuring the      * difference in metric values.      *      * @param fs the filesystem to monitor      * @param statistic the statistic to monitor.      */
DECL|method|MetricDiff (S3AFileSystem fs, Statistic statistic)
specifier|public
name|MetricDiff
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|Statistic
name|statistic
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|statistic
operator|=
name|statistic
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**      * Reset the starting value to the current value.      * Diffs will be against this new value.      */
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|startingValue
operator|=
name|currentValue
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the current value of the metric.      * @return the latest value.      */
DECL|method|currentValue ()
specifier|public
name|long
name|currentValue
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getInstrumentation
argument_list|()
operator|.
name|getCounterValue
argument_list|(
name|statistic
argument_list|)
return|;
block|}
comment|/**      * Get the difference between the the current value and      * {@link #startingValue}.      * @return the difference.      */
DECL|method|diff ()
specifier|public
name|long
name|diff
parameter_list|()
block|{
return|return
name|currentValue
argument_list|()
operator|-
name|startingValue
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|long
name|c
init|=
name|currentValue
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|statistic
operator|.
name|getSymbol
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" starting="
argument_list|)
operator|.
name|append
argument_list|(
name|startingValue
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" current="
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" diff="
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|-
name|startingValue
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Assert that the value of {@link #diff()} matches that expected.      * @param message message to print; metric name is appended      * @param expected expected value.      */
DECL|method|assertDiffEquals (String message, long expected)
specifier|public
name|void
name|assertDiffEquals
parameter_list|(
name|String
name|message
parameter_list|,
name|long
name|expected
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|message
operator|+
literal|": "
operator|+
name|statistic
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|expected
argument_list|,
name|diff
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert that the value of {@link #diff()} matches that expected.      * @param expected expected value.      */
DECL|method|assertDiffEquals (long expected)
specifier|public
name|void
name|assertDiffEquals
parameter_list|(
name|long
name|expected
parameter_list|)
block|{
name|assertDiffEquals
argument_list|(
literal|"Count of "
operator|+
name|this
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert that the value of {@link #diff()} matches that of another      * instance.      * @param that the other metric diff instance.      */
DECL|method|assertDiffEquals (MetricDiff that)
specifier|public
name|void
name|assertDiffEquals
parameter_list|(
name|MetricDiff
name|that
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|" != "
operator|+
name|that
argument_list|,
name|this
operator|.
name|diff
argument_list|()
argument_list|,
name|that
operator|.
name|diff
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Comparator for assertions.      * @param that other metric diff      * @return true if the value is {@code ==} the other's      */
DECL|method|diffEquals (MetricDiff that)
specifier|public
name|boolean
name|diffEquals
parameter_list|(
name|MetricDiff
name|that
parameter_list|)
block|{
return|return
name|this
operator|.
name|diff
argument_list|()
operator|==
name|that
operator|.
name|diff
argument_list|()
return|;
block|}
comment|/**      * Comparator for assertions.      * @param that other metric diff      * @return true if the value is {@code<} the other's      */
DECL|method|diffLessThan (MetricDiff that)
specifier|public
name|boolean
name|diffLessThan
parameter_list|(
name|MetricDiff
name|that
parameter_list|)
block|{
return|return
name|this
operator|.
name|diff
argument_list|()
operator|<
name|that
operator|.
name|diff
argument_list|()
return|;
block|}
comment|/**      * Comparator for assertions.      * @param that other metric diff      * @return true if the value is {@code<=} the other's      */
DECL|method|diffLessThanOrEquals (MetricDiff that)
specifier|public
name|boolean
name|diffLessThanOrEquals
parameter_list|(
name|MetricDiff
name|that
parameter_list|)
block|{
return|return
name|this
operator|.
name|diff
argument_list|()
operator|<=
name|that
operator|.
name|diff
argument_list|()
return|;
block|}
comment|/**      * Get the statistic.      * @return the statistic      */
DECL|method|getStatistic ()
specifier|public
name|Statistic
name|getStatistic
parameter_list|()
block|{
return|return
name|statistic
return|;
block|}
comment|/**      * Get the starting value; that set in the last {@link #reset()}.      * @return the starting value for diffs.      */
DECL|method|getStartingValue ()
specifier|public
name|long
name|getStartingValue
parameter_list|()
block|{
return|return
name|startingValue
return|;
block|}
block|}
comment|/**    * Asserts that {@code obj} is an instance of {@code expectedClass} using a    * descriptive assertion message.    * @param expectedClass class    * @param obj object to check    */
DECL|method|assertInstanceOf (Class<?> expectedClass, Object obj)
specifier|public
specifier|static
name|void
name|assertInstanceOf
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|expectedClass
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected instance of class %s, but is %s."
argument_list|,
name|expectedClass
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|expectedClass
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Builds a comma-separated list of class names.    * @param classes list of classes    * @return comma-separated list of class names    */
DECL|method|buildClassListString ( List<T> classes)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Class
argument_list|<
name|?
argument_list|>
parameter_list|>
name|String
name|buildClassListString
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|classes
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|classes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * This class should not be instantiated.    */
DECL|method|S3ATestUtils ()
specifier|private
name|S3ATestUtils
parameter_list|()
block|{   }
comment|/**    * Verify the core size, block size and timestamp values of a file.    * @param status status entry to check    * @param size file size    * @param blockSize block size    * @param modTime modified time    */
DECL|method|verifyFileStatus (FileStatus status, long size, long blockSize, long modTime)
specifier|public
specifier|static
name|void
name|verifyFileStatus
parameter_list|(
name|FileStatus
name|status
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|long
name|modTime
parameter_list|)
block|{
name|verifyFileStatus
argument_list|(
name|status
argument_list|,
name|size
argument_list|,
literal|0
argument_list|,
name|modTime
argument_list|,
literal|0
argument_list|,
name|blockSize
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the status entry of a file matches that expected.    * @param status status entry to check    * @param size file size    * @param replication replication factor (may be 0)    * @param modTime modified time    * @param accessTime access time (may be 0)    * @param blockSize block size    * @param owner owner (may be null)    * @param group user group (may be null)    * @param permission permission (may be null)    */
DECL|method|verifyFileStatus (FileStatus status, long size, int replication, long modTime, long accessTime, long blockSize, String owner, String group, FsPermission permission)
specifier|public
specifier|static
name|void
name|verifyFileStatus
parameter_list|(
name|FileStatus
name|status
parameter_list|,
name|long
name|size
parameter_list|,
name|int
name|replication
parameter_list|,
name|long
name|modTime
parameter_list|,
name|long
name|accessTime
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
block|{
name|String
name|details
init|=
name|status
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Not a dir: "
operator|+
name|details
argument_list|,
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mod time: "
operator|+
name|details
argument_list|,
name|modTime
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File size: "
operator|+
name|details
argument_list|,
name|size
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Block size: "
operator|+
name|details
argument_list|,
name|blockSize
argument_list|,
name|status
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|replication
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Replication value: "
operator|+
name|details
argument_list|,
name|replication
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|accessTime
operator|!=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Access time: "
operator|+
name|details
argument_list|,
name|accessTime
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Owner: "
operator|+
name|details
argument_list|,
name|owner
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Group: "
operator|+
name|details
argument_list|,
name|group
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|permission
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Permission: "
operator|+
name|details
argument_list|,
name|permission
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify the status entry of a directory matches that expected.    * @param status status entry to check    * @param replication replication factor    * @param modTime modified time    * @param accessTime access time    * @param owner owner    * @param group user group    * @param permission permission.    */
DECL|method|verifyDirStatus (FileStatus status, int replication, long modTime, long accessTime, String owner, String group, FsPermission permission)
specifier|public
specifier|static
name|void
name|verifyDirStatus
parameter_list|(
name|FileStatus
name|status
parameter_list|,
name|int
name|replication
parameter_list|,
name|long
name|modTime
parameter_list|,
name|long
name|accessTime
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
block|{
name|String
name|details
init|=
name|status
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Is a dir: "
operator|+
name|details
argument_list|,
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"zero length: "
operator|+
name|details
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mod time: "
operator|+
name|details
argument_list|,
name|modTime
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Replication value: "
operator|+
name|details
argument_list|,
name|replication
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Access time: "
operator|+
name|details
argument_list|,
name|accessTime
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Owner: "
operator|+
name|details
argument_list|,
name|owner
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Group: "
operator|+
name|details
argument_list|,
name|group
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Permission: "
operator|+
name|details
argument_list|,
name|permission
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that a configuration option matches the expected value.    * @param conf configuration    * @param key option key    * @param expected expected value    */
DECL|method|assertOptionEquals (Configuration conf, String key, String expected)
specifier|public
specifier|static
name|void
name|assertOptionEquals
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Value of "
operator|+
name|key
argument_list|,
name|expected
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assume that a condition is met. If not: log at WARN and    * then throw an {@link AssumptionViolatedException}.    * @param message    * @param condition    */
DECL|method|assume (String message, boolean condition)
specifier|public
specifier|static
name|void
name|assume
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|condition
parameter_list|)
block|{
if|if
condition|(
operator|!
name|condition
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|message
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the statistics from a wrapped block output stream.    * @param out output stream    * @return the (active) stats of the write    */
specifier|public
specifier|static
name|S3AInstrumentation
operator|.
name|OutputStreamStatistics
DECL|method|getOutputStreamStatistics (FSDataOutputStream out)
name|getOutputStreamStatistics
parameter_list|(
name|FSDataOutputStream
name|out
parameter_list|)
block|{
name|S3ABlockOutputStream
name|blockOutputStream
init|=
operator|(
name|S3ABlockOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
return|return
name|blockOutputStream
operator|.
name|getStatistics
argument_list|()
return|;
block|}
comment|/**    * Read in a file and convert to an ascii string.    * @param fs filesystem    * @param path path to read    * @return the bytes read and converted to a string    * @throws IOException IO problems    */
DECL|method|read (FileSystem fs, Path path)
specifier|public
specifier|static
name|String
name|read
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
init|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|status
operator|.
name|getLen
argument_list|()
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|buf
argument_list|)
return|;
block|}
block|}
comment|/**    * List a directory.    * @param fileSystem FS    * @param path path    * @throws IOException failure.    */
DECL|method|lsR (FileSystem fileSystem, Path path, boolean recursive)
specifier|public
specifier|static
name|void
name|lsR
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
comment|// surfaces when someone calls getParent() on something at the top
comment|// of the path
name|LOG
operator|.
name|info
argument_list|(
literal|"Empty path"
argument_list|)
expr_stmt|;
return|return;
block|}
name|S3AUtils
operator|.
name|applyLocatedFiles
argument_list|(
name|fileSystem
operator|.
name|listFiles
argument_list|(
name|path
argument_list|,
name|recursive
argument_list|)
argument_list|,
parameter_list|(
name|status
parameter_list|)
lambda|->
name|LOG
operator|.
name|info
argument_list|(
literal|"  {}"
argument_list|,
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Turn on the inconsistent S3A FS client in a configuration,    * with 100% probability of inconsistency, default delays.    * For this to go live, the paths must include the element    * {@link InconsistentAmazonS3Client#DEFAULT_DELAY_KEY_SUBSTRING}.    * @param conf configuration to patch    * @param delay delay in millis    */
DECL|method|enableInconsistentS3Client (Configuration conf, long delay)
specifier|public
specifier|static
name|void
name|enableInconsistentS3Client
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Enabling inconsistent S3 client"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|S3_CLIENT_FACTORY_IMPL
argument_list|,
name|InconsistentS3ClientFactory
operator|.
name|class
argument_list|,
name|S3ClientFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_KEY
argument_list|,
name|DEFAULT_DELAY_KEY_SUBSTRING
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_MSEC
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|FAIL_INJECT_INCONSISTENCY_PROBABILITY
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|FAIL_INJECT_THROTTLE_PROBABILITY
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
comment|/**    * Is the filesystem using the inconsistent/throttling/unreliable client?    * @param fs filesystem    * @return true if the filesystem's client is the inconsistent one.    */
DECL|method|isFaultInjecting (S3AFileSystem fs)
specifier|public
specifier|static
name|boolean
name|isFaultInjecting
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|)
block|{
return|return
name|fs
operator|.
name|getAmazonS3Client
argument_list|()
operator|instanceof
name|InconsistentAmazonS3Client
return|;
block|}
comment|/**    * Skip a test because the client is using fault injection.    * This should only be done for those tests which are measuring the cost    * of operations or otherwise cannot handle retries.    * @param fs filesystem to check    */
DECL|method|skipDuringFaultInjection (S3AFileSystem fs)
specifier|public
specifier|static
name|void
name|skipDuringFaultInjection
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|)
block|{
name|Assume
operator|.
name|assumeFalse
argument_list|(
literal|"Skipping as filesystem has fault injection"
argument_list|,
name|isFaultInjecting
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Date format used for mapping upload initiation time to human string.    */
DECL|field|LISTING_FORMAT
specifier|public
specifier|static
specifier|final
name|DateFormat
name|LISTING_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
comment|/**    * Skip a test if the FS isn't marked as supporting magic commits.    * @param fs filesystem    */
DECL|method|assumeMagicCommitEnabled (S3AFileSystem fs)
specifier|public
name|void
name|assumeMagicCommitEnabled
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|)
block|{
name|assume
argument_list|(
literal|"Magic commit option disabled on "
operator|+
name|fs
argument_list|,
name|fs
operator|.
name|hasCapability
argument_list|(
name|CommitConstants
operator|.
name|STORE_CAPABILITY_MAGIC_COMMITTER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

