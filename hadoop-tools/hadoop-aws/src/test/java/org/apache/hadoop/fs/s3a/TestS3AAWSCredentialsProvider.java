begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|EnvironmentVariableCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|InstanceProfileCredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|AssumedRoleCredentialProvider
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link Constants#AWS_CREDENTIALS_PROVIDER} logic.  */
end_comment

begin_class
DECL|class|TestS3AAWSCredentialsProvider
specifier|public
class|class
name|TestS3AAWSCredentialsProvider
block|{
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testProviderWrongClass ()
specifier|public
name|void
name|testProviderWrongClass
parameter_list|()
throws|throws
name|Exception
block|{
name|expectProviderInstantiationFailure
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|NOT_AWS_PROVIDER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProviderAbstractClass ()
specifier|public
name|void
name|testProviderAbstractClass
parameter_list|()
throws|throws
name|Exception
block|{
name|expectProviderInstantiationFailure
argument_list|(
name|AbstractProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ABSTRACT_PROVIDER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProviderNotAClass ()
specifier|public
name|void
name|testProviderNotAClass
parameter_list|()
throws|throws
name|Exception
block|{
name|expectProviderInstantiationFailure
argument_list|(
literal|"NoSuchClass"
argument_list|,
literal|"ClassNotFoundException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProviderConstructorError ()
specifier|public
name|void
name|testProviderConstructorError
parameter_list|()
throws|throws
name|Exception
block|{
name|expectProviderInstantiationFailure
argument_list|(
name|ConstructorSignatureErrorProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|CONSTRUCTOR_EXCEPTION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProviderFailureError ()
specifier|public
name|void
name|testProviderFailureError
parameter_list|()
throws|throws
name|Exception
block|{
name|expectProviderInstantiationFailure
argument_list|(
name|ConstructorFailureProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|INSTANTIATION_EXCEPTION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstantiationChain ()
specifier|public
name|void
name|testInstantiationChain
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|TemporaryAWSCredentialsProvider
operator|.
name|NAME
operator|+
literal|", \t"
operator|+
name|SimpleAWSCredentialsProvider
operator|.
name|NAME
operator|+
literal|" ,\n "
operator|+
name|AnonymousAWSCredentialsProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|KEY_CSVTEST_FILE
argument_list|,
name|DEFAULT_CSVTEST_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|testFile
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|AWSCredentialProviderList
name|list
init|=
name|S3AUtils
operator|.
name|createAWSCredentialProviderSet
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AWSCredentialsProvider
argument_list|>
argument_list|>
name|expectedClasses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TemporaryAWSCredentialsProvider
operator|.
name|class
argument_list|,
name|SimpleAWSCredentialsProvider
operator|.
name|class
argument_list|,
name|AnonymousAWSCredentialsProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultChain ()
specifier|public
name|void
name|testDefaultChain
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri1
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket1"
argument_list|)
decl_stmt|,
name|uri2
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket2"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// use the default credential provider chain
name|conf
operator|.
name|unset
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|)
expr_stmt|;
name|AWSCredentialProviderList
name|list1
init|=
name|S3AUtils
operator|.
name|createAWSCredentialProviderSet
argument_list|(
name|uri1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|AWSCredentialProviderList
name|list2
init|=
name|S3AUtils
operator|.
name|createAWSCredentialProviderSet
argument_list|(
name|uri2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AWSCredentialsProvider
argument_list|>
argument_list|>
name|expectedClasses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|BasicAWSCredentialsProvider
operator|.
name|class
argument_list|,
name|EnvironmentVariableCredentialsProvider
operator|.
name|class
argument_list|,
name|InstanceProfileCredentialsProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list1
argument_list|)
expr_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list2
argument_list|)
expr_stmt|;
name|assertSameInstanceProfileCredentialsProvider
argument_list|(
name|list1
operator|.
name|getProviders
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|list2
operator|.
name|getProviders
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfiguredChain ()
specifier|public
name|void
name|testConfiguredChain
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri1
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket1"
argument_list|)
decl_stmt|,
name|uri2
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket2"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AWSCredentialsProvider
argument_list|>
argument_list|>
name|expectedClasses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|EnvironmentVariableCredentialsProvider
operator|.
name|class
argument_list|,
name|InstanceProfileCredentialsProvider
operator|.
name|class
argument_list|,
name|AnonymousAWSCredentialsProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|buildClassListString
argument_list|(
name|expectedClasses
argument_list|)
argument_list|)
expr_stmt|;
name|AWSCredentialProviderList
name|list1
init|=
name|S3AUtils
operator|.
name|createAWSCredentialProviderSet
argument_list|(
name|uri1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|AWSCredentialProviderList
name|list2
init|=
name|S3AUtils
operator|.
name|createAWSCredentialProviderSet
argument_list|(
name|uri2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list1
argument_list|)
expr_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list2
argument_list|)
expr_stmt|;
name|assertSameInstanceProfileCredentialsProvider
argument_list|(
name|list1
operator|.
name|getProviders
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|list2
operator|.
name|getProviders
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfiguredChainUsesSharedInstanceProfile ()
specifier|public
name|void
name|testConfiguredChainUsesSharedInstanceProfile
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri1
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket1"
argument_list|)
decl_stmt|,
name|uri2
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket2"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AWSCredentialsProvider
argument_list|>
argument_list|>
name|expectedClasses
init|=
name|Arrays
operator|.
expr|<
name|Class
argument_list|<
name|?
extends|extends
name|AWSCredentialsProvider
argument_list|>
operator|>
name|asList
argument_list|(
name|InstanceProfileCredentialsProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|buildClassListString
argument_list|(
name|expectedClasses
argument_list|)
argument_list|)
expr_stmt|;
name|AWSCredentialProviderList
name|list1
init|=
name|S3AUtils
operator|.
name|createAWSCredentialProviderSet
argument_list|(
name|uri1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|AWSCredentialProviderList
name|list2
init|=
name|S3AUtils
operator|.
name|createAWSCredentialProviderSet
argument_list|(
name|uri2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list1
argument_list|)
expr_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list2
argument_list|)
expr_stmt|;
name|assertSameInstanceProfileCredentialsProvider
argument_list|(
name|list1
operator|.
name|getProviders
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|list2
operator|.
name|getProviders
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A credential provider declared as abstract, so it cannot be instantiated.    */
DECL|class|AbstractProvider
specifier|static
specifier|abstract
class|class
name|AbstractProvider
implements|implements
name|AWSCredentialsProvider
block|{   }
comment|/**    * A credential provider whose constructor signature doesn't match.    */
DECL|class|ConstructorSignatureErrorProvider
specifier|static
class|class
name|ConstructorSignatureErrorProvider
implements|implements
name|AWSCredentialsProvider
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|ConstructorSignatureErrorProvider (String str)
specifier|public
name|ConstructorSignatureErrorProvider
parameter_list|(
name|String
name|str
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|AWSCredentials
name|getCredentials
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{     }
block|}
comment|/**    * A credential provider whose constructor raises an NPE.    */
DECL|class|ConstructorFailureProvider
specifier|static
class|class
name|ConstructorFailureProvider
implements|implements
name|AWSCredentialsProvider
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|ConstructorFailureProvider ()
specifier|public
name|ConstructorFailureProvider
parameter_list|()
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"oops"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|AWSCredentials
name|getCredentials
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{     }
block|}
comment|/**    * Declare what exception to raise, and the text which must be found    * in it.    * @param exceptionClass class of exception    * @param text text in exception    */
DECL|method|expectException (Class<? extends Throwable> exceptionClass, String text)
specifier|private
name|void
name|expectException
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exceptionClass
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|exception
operator|.
name|expect
argument_list|(
name|exceptionClass
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
DECL|method|expectProviderInstantiationFailure (String option, String expectedErrorText)
specifier|private
name|void
name|expectProviderInstantiationFailure
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|expectedErrorText
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|KEY_CSVTEST_FILE
argument_list|,
name|DEFAULT_CSVTEST_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|expectException
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|expectedErrorText
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|testFile
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|S3AUtils
operator|.
name|createAWSCredentialProviderSet
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts expected provider classes in list.    * @param expectedClasses expected provider classes    * @param list providers to check    */
DECL|method|assertCredentialProviders ( List<Class<? extends AWSCredentialsProvider>> expectedClasses, AWSCredentialProviderList list)
specifier|private
specifier|static
name|void
name|assertCredentialProviders
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AWSCredentialsProvider
argument_list|>
argument_list|>
name|expectedClasses
parameter_list|,
name|AWSCredentialProviderList
name|list
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AWSCredentialsProvider
argument_list|>
name|providers
init|=
name|list
operator|.
name|getProviders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedClasses
operator|.
name|size
argument_list|()
argument_list|,
name|providers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedClasses
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|AWSCredentialsProvider
argument_list|>
name|expectedClass
init|=
name|expectedClasses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|AWSCredentialsProvider
name|provider
init|=
name|providers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"At position %d, expected class is %s, but found null."
argument_list|,
name|i
argument_list|,
name|expectedClass
argument_list|)
argument_list|,
name|provider
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"At position %d, expected class is %s, but found %s."
argument_list|,
name|i
argument_list|,
name|expectedClass
argument_list|,
name|provider
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|expectedClass
operator|.
name|isAssignableFrom
argument_list|(
name|provider
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that two different references point to the same shared instance of    * InstanceProfileCredentialsProvider using a descriptive assertion message.    * @param provider1 provider to check    * @param provider2 provider to check    */
DECL|method|assertSameInstanceProfileCredentialsProvider ( AWSCredentialsProvider provider1, AWSCredentialsProvider provider2)
specifier|private
specifier|static
name|void
name|assertSameInstanceProfileCredentialsProvider
parameter_list|(
name|AWSCredentialsProvider
name|provider1
parameter_list|,
name|AWSCredentialsProvider
name|provider2
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|provider1
argument_list|)
expr_stmt|;
name|assertInstanceOf
argument_list|(
name|InstanceProfileCredentialsProvider
operator|.
name|class
argument_list|,
name|provider1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|provider2
argument_list|)
expr_stmt|;
name|assertInstanceOf
argument_list|(
name|InstanceProfileCredentialsProvider
operator|.
name|class
argument_list|,
name|provider2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Expected all usage of InstanceProfileCredentialsProvider to "
operator|+
literal|"share a singleton instance, but found unique instances."
argument_list|,
name|provider1
argument_list|,
name|provider2
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is here to check up on the S3ATestUtils probes themselves.    * @see S3ATestUtils#authenticationContains(Configuration, String).    */
annotation|@
name|Test
DECL|method|testAuthenticationContainsProbes ()
specifier|public
name|void
name|testAuthenticationContainsProbes
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"found AssumedRoleCredentialProvider"
argument_list|,
name|authenticationContains
argument_list|(
name|conf
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"didn't find AssumedRoleCredentialProvider"
argument_list|,
name|authenticationContains
argument_list|(
name|conf
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

