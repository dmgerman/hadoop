begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|EnvironmentVariableCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|InstanceProfileCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|AssumedRoleCredentialProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|NoAuthWithAWSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link Constants#AWS_CREDENTIALS_PROVIDER} logic.  */
end_comment

begin_class
DECL|class|TestS3AAWSCredentialsProvider
specifier|public
class|class
name|TestS3AAWSCredentialsProvider
block|{
comment|/**    * URI of the landsat images.    */
DECL|field|TESTFILE_URI
specifier|private
specifier|static
specifier|final
name|URI
name|TESTFILE_URI
init|=
operator|new
name|Path
argument_list|(
name|DEFAULT_CSVTEST_FILE
argument_list|)
operator|.
name|toUri
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testProviderWrongClass ()
specifier|public
name|void
name|testProviderWrongClass
parameter_list|()
throws|throws
name|Exception
block|{
name|expectProviderInstantiationFailure
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|NOT_AWS_PROVIDER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProviderAbstractClass ()
specifier|public
name|void
name|testProviderAbstractClass
parameter_list|()
throws|throws
name|Exception
block|{
name|expectProviderInstantiationFailure
argument_list|(
name|AbstractProvider
operator|.
name|class
argument_list|,
name|ABSTRACT_PROVIDER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProviderNotAClass ()
specifier|public
name|void
name|testProviderNotAClass
parameter_list|()
throws|throws
name|Exception
block|{
name|expectProviderInstantiationFailure
argument_list|(
literal|"NoSuchClass"
argument_list|,
literal|"ClassNotFoundException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProviderConstructorError ()
specifier|public
name|void
name|testProviderConstructorError
parameter_list|()
throws|throws
name|Exception
block|{
name|expectProviderInstantiationFailure
argument_list|(
name|ConstructorSignatureErrorProvider
operator|.
name|class
argument_list|,
name|CONSTRUCTOR_EXCEPTION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProviderFailureError ()
specifier|public
name|void
name|testProviderFailureError
parameter_list|()
throws|throws
name|Exception
block|{
name|expectProviderInstantiationFailure
argument_list|(
name|ConstructorFailureProvider
operator|.
name|class
argument_list|,
name|INSTANTIATION_EXCEPTION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstantiationChain ()
specifier|public
name|void
name|testInstantiationChain
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|TemporaryAWSCredentialsProvider
operator|.
name|NAME
operator|+
literal|", \t"
operator|+
name|SimpleAWSCredentialsProvider
operator|.
name|NAME
operator|+
literal|" ,\n "
operator|+
name|AnonymousAWSCredentialsProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|KEY_CSVTEST_FILE
argument_list|,
name|DEFAULT_CSVTEST_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|AWSCredentialProviderList
name|list
init|=
name|createAWSCredentialProviderSet
argument_list|(
name|testFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|expectedClasses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TemporaryAWSCredentialsProvider
operator|.
name|class
argument_list|,
name|SimpleAWSCredentialsProvider
operator|.
name|class
argument_list|,
name|AnonymousAWSCredentialsProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultChain ()
specifier|public
name|void
name|testDefaultChain
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri1
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket1"
argument_list|)
decl_stmt|,
name|uri2
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket2"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// use the default credential provider chain
name|conf
operator|.
name|unset
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|)
expr_stmt|;
name|AWSCredentialProviderList
name|list1
init|=
name|createAWSCredentialProviderSet
argument_list|(
name|uri1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|AWSCredentialProviderList
name|list2
init|=
name|createAWSCredentialProviderSet
argument_list|(
name|uri2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|expectedClasses
init|=
name|STANDARD_AWS_PROVIDERS
decl_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list1
argument_list|)
expr_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultChainNoURI ()
specifier|public
name|void
name|testDefaultChainNoURI
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// use the default credential provider chain
name|conf
operator|.
name|unset
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|)
expr_stmt|;
name|assertCredentialProviders
argument_list|(
name|STANDARD_AWS_PROVIDERS
argument_list|,
name|createAWSCredentialProviderSet
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfiguredChain ()
specifier|public
name|void
name|testConfiguredChain
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri1
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket1"
argument_list|)
decl_stmt|,
name|uri2
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket2"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|expectedClasses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|EnvironmentVariableCredentialsProvider
operator|.
name|class
argument_list|,
name|InstanceProfileCredentialsProvider
operator|.
name|class
argument_list|,
name|AnonymousAWSCredentialsProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|createProviderConfiguration
argument_list|(
name|buildClassListString
argument_list|(
name|expectedClasses
argument_list|)
argument_list|)
decl_stmt|;
name|AWSCredentialProviderList
name|list1
init|=
name|createAWSCredentialProviderSet
argument_list|(
name|uri1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|AWSCredentialProviderList
name|list2
init|=
name|createAWSCredentialProviderSet
argument_list|(
name|uri2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list1
argument_list|)
expr_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfiguredChainUsesSharedInstanceProfile ()
specifier|public
name|void
name|testConfiguredChainUsesSharedInstanceProfile
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri1
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket1"
argument_list|)
decl_stmt|,
name|uri2
init|=
operator|new
name|URI
argument_list|(
literal|"s3a://bucket2"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|expectedClasses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|InstanceProfileCredentialsProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|buildClassListString
argument_list|(
name|expectedClasses
argument_list|)
argument_list|)
expr_stmt|;
name|AWSCredentialProviderList
name|list1
init|=
name|createAWSCredentialProviderSet
argument_list|(
name|uri1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|AWSCredentialProviderList
name|list2
init|=
name|createAWSCredentialProviderSet
argument_list|(
name|uri2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list1
argument_list|)
expr_stmt|;
name|assertCredentialProviders
argument_list|(
name|expectedClasses
argument_list|,
name|list2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFallbackToDefaults ()
specifier|public
name|void
name|testFallbackToDefaults
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// build up the base provider
specifier|final
name|AWSCredentialProviderList
name|credentials
init|=
name|buildAWSProviderList
argument_list|(
operator|new
name|URI
argument_list|(
literal|"s3a://bucket1"
argument_list|)
argument_list|,
name|createProviderConfiguration
argument_list|(
literal|"  "
argument_list|)
argument_list|,
name|ASSUMED_ROLE_CREDENTIALS_PROVIDER
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|EnvironmentVariableCredentialsProvider
operator|.
name|class
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"empty credentials"
argument_list|,
name|credentials
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * A credential provider declared as abstract, so it cannot be instantiated.    */
DECL|class|AbstractProvider
specifier|static
specifier|abstract
class|class
name|AbstractProvider
implements|implements
name|AWSCredentialsProvider
block|{   }
comment|/**    * A credential provider whose constructor signature doesn't match.    */
DECL|class|ConstructorSignatureErrorProvider
specifier|static
class|class
name|ConstructorSignatureErrorProvider
implements|implements
name|AWSCredentialsProvider
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|ConstructorSignatureErrorProvider (String str)
specifier|public
name|ConstructorSignatureErrorProvider
parameter_list|(
name|String
name|str
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|AWSCredentials
name|getCredentials
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{     }
block|}
comment|/**    * A credential provider whose constructor raises an NPE.    */
DECL|class|ConstructorFailureProvider
specifier|static
class|class
name|ConstructorFailureProvider
implements|implements
name|AWSCredentialsProvider
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|ConstructorFailureProvider ()
specifier|public
name|ConstructorFailureProvider
parameter_list|()
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"oops"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|AWSCredentials
name|getCredentials
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{     }
block|}
annotation|@
name|Test
DECL|method|testAWSExceptionTranslation ()
specifier|public
name|void
name|testAWSExceptionTranslation
parameter_list|()
throws|throws
name|Throwable
block|{
name|IOException
name|ex
init|=
name|expectProviderInstantiationFailure
argument_list|(
name|AWSExceptionRaisingFactory
operator|.
name|class
argument_list|,
name|AWSExceptionRaisingFactory
operator|.
name|NO_AUTH
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|AccessDeniedException
operator|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
DECL|class|AWSExceptionRaisingFactory
specifier|static
class|class
name|AWSExceptionRaisingFactory
implements|implements
name|AWSCredentialsProvider
block|{
DECL|field|NO_AUTH
specifier|public
specifier|static
specifier|final
name|String
name|NO_AUTH
init|=
literal|"No auth"
decl_stmt|;
DECL|method|getInstance ()
specifier|public
specifier|static
name|AWSCredentialsProvider
name|getInstance
parameter_list|()
block|{
throw|throw
operator|new
name|NoAuthWithAWSException
argument_list|(
name|NO_AUTH
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|AWSCredentials
name|getCredentials
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{      }
block|}
annotation|@
name|Test
DECL|method|testFactoryWrongType ()
specifier|public
name|void
name|testFactoryWrongType
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectProviderInstantiationFailure
argument_list|(
name|FactoryOfWrongType
operator|.
name|class
argument_list|,
name|CONSTRUCTOR_EXCEPTION
argument_list|)
expr_stmt|;
block|}
DECL|class|FactoryOfWrongType
specifier|static
class|class
name|FactoryOfWrongType
implements|implements
name|AWSCredentialsProvider
block|{
DECL|field|NO_AUTH
specifier|public
specifier|static
specifier|final
name|String
name|NO_AUTH
init|=
literal|"No auth"
decl_stmt|;
DECL|method|getInstance ()
specifier|public
specifier|static
name|String
name|getInstance
parameter_list|()
block|{
return|return
literal|"oops"
return|;
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|AWSCredentials
name|getCredentials
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{      }
block|}
comment|/**    * Expect a provider to raise an exception on failure.    * @param option aws provider option string.    * @param expectedErrorText error text to expect    * @return the exception raised    * @throws Exception any unexpected exception thrown.    */
DECL|method|expectProviderInstantiationFailure (String option, String expectedErrorText)
specifier|private
name|IOException
name|expectProviderInstantiationFailure
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|expectedErrorText
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|expectedErrorText
argument_list|,
parameter_list|()
lambda|->
name|createAWSCredentialProviderSet
argument_list|(
name|TESTFILE_URI
argument_list|,
name|createProviderConfiguration
argument_list|(
name|option
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Expect a provider to raise an exception on failure.    * @param aClass class to use    * @param expectedErrorText error text to expect    * @return the exception raised    * @throws Exception any unexpected exception thrown.    */
DECL|method|expectProviderInstantiationFailure (Class aClass, String expectedErrorText)
specifier|private
name|IOException
name|expectProviderInstantiationFailure
parameter_list|(
name|Class
name|aClass
parameter_list|,
name|String
name|expectedErrorText
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|expectProviderInstantiationFailure
argument_list|(
name|buildClassListString
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|aClass
argument_list|)
argument_list|)
argument_list|,
name|expectedErrorText
argument_list|)
return|;
block|}
comment|/**    * Create a configuration with a specific provider.    * @param providerOption option for the aws credential provider option.    * @return a configuration to use in test cases    */
DECL|method|createProviderConfiguration ( final String providerOption)
specifier|private
name|Configuration
name|createProviderConfiguration
parameter_list|(
specifier|final
name|String
name|providerOption
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|providerOption
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Create a configuration with a specific class.    * @param aClass class to use    * @return a configuration to use in test cases    */
DECL|method|createProviderConfiguration (final Class<?> aClass)
specifier|public
name|Configuration
name|createProviderConfiguration
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
name|createProviderConfiguration
argument_list|(
name|buildClassListString
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|aClass
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Asserts expected provider classes in list.    * @param expectedClasses expected provider classes    * @param list providers to check    */
DECL|method|assertCredentialProviders ( List<Class<?>> expectedClasses, AWSCredentialProviderList list)
specifier|private
specifier|static
name|void
name|assertCredentialProviders
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|expectedClasses
parameter_list|,
name|AWSCredentialProviderList
name|list
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AWSCredentialsProvider
argument_list|>
name|providers
init|=
name|list
operator|.
name|getProviders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedClasses
operator|.
name|size
argument_list|()
argument_list|,
name|providers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedClasses
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|expectedClass
init|=
name|expectedClasses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|AWSCredentialsProvider
name|provider
init|=
name|providers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"At position %d, expected class is %s, but found null."
argument_list|,
name|i
argument_list|,
name|expectedClass
argument_list|)
argument_list|,
name|provider
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"At position %d, expected class is %s, but found %s."
argument_list|,
name|i
argument_list|,
name|expectedClass
argument_list|,
name|provider
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|expectedClass
operator|.
name|isAssignableFrom
argument_list|(
name|provider
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This is here to check up on the S3ATestUtils probes themselves.    * @see S3ATestUtils#authenticationContains(Configuration, String).    */
annotation|@
name|Test
DECL|method|testAuthenticationContainsProbes ()
specifier|public
name|void
name|testAuthenticationContainsProbes
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"found AssumedRoleCredentialProvider"
argument_list|,
name|authenticationContains
argument_list|(
name|conf
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"didn't find AssumedRoleCredentialProvider"
argument_list|,
name|authenticationContains
argument_list|(
name|conf
argument_list|,
name|AssumedRoleCredentialProvider
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionLogic ()
specifier|public
name|void
name|testExceptionLogic
parameter_list|()
throws|throws
name|Throwable
block|{
name|AWSCredentialProviderList
name|providers
init|=
operator|new
name|AWSCredentialProviderList
argument_list|()
decl_stmt|;
comment|// verify you can't get credentials from it
name|NoAuthWithAWSException
name|noAuth
init|=
name|intercept
argument_list|(
name|NoAuthWithAWSException
operator|.
name|class
argument_list|,
name|AWSCredentialProviderList
operator|.
name|NO_AWS_CREDENTIAL_PROVIDERS
argument_list|,
parameter_list|()
lambda|->
name|providers
operator|.
name|getCredentials
argument_list|()
argument_list|)
decl_stmt|;
comment|// but that it closes safely
name|providers
operator|.
name|close
argument_list|()
expr_stmt|;
name|S3ARetryPolicy
name|retryPolicy
init|=
operator|new
name|S3ARetryPolicy
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected no retry on auth failure"
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|FAIL
operator|.
name|action
argument_list|,
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|noAuth
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
operator|.
name|action
argument_list|)
expr_stmt|;
try|try
block|{
throw|throw
name|S3AUtils
operator|.
name|translateException
argument_list|(
literal|"login"
argument_list|,
literal|""
argument_list|,
name|noAuth
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|expected
parameter_list|)
block|{
comment|// this is what we want; other exceptions will be passed up
name|assertEquals
argument_list|(
literal|"Expected no retry on AccessDeniedException"
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|FAIL
operator|.
name|action
argument_list|,
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
operator|.
name|action
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRefCounting ()
specifier|public
name|void
name|testRefCounting
parameter_list|()
throws|throws
name|Throwable
block|{
name|AWSCredentialProviderList
name|providers
init|=
operator|new
name|AWSCredentialProviderList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Ref count for "
operator|+
name|providers
argument_list|,
literal|1
argument_list|,
name|providers
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|AWSCredentialProviderList
name|replicate
init|=
name|providers
operator|.
name|share
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|providers
argument_list|,
name|replicate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ref count after replication for "
operator|+
name|providers
argument_list|,
literal|2
argument_list|,
name|providers
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Was closed "
operator|+
name|providers
argument_list|,
name|providers
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|providers
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Was closed "
operator|+
name|providers
argument_list|,
name|providers
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ref count after close() for "
operator|+
name|providers
argument_list|,
literal|1
argument_list|,
name|providers
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// this should now close it
name|providers
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Was not closed "
operator|+
name|providers
argument_list|,
name|providers
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ref count after close() for "
operator|+
name|providers
argument_list|,
literal|0
argument_list|,
name|providers
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ref count after second close() for "
operator|+
name|providers
argument_list|,
literal|0
argument_list|,
name|providers
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
literal|"closed"
argument_list|,
parameter_list|()
lambda|->
name|providers
operator|.
name|share
argument_list|()
argument_list|)
expr_stmt|;
comment|// final call harmless
name|providers
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ref count after close() for "
operator|+
name|providers
argument_list|,
literal|0
argument_list|,
name|providers
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|providers
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|intercept
argument_list|(
name|NoAuthWithAWSException
operator|.
name|class
argument_list|,
name|AWSCredentialProviderList
operator|.
name|CREDENTIALS_REQUESTED_WHEN_CLOSED
argument_list|,
parameter_list|()
lambda|->
name|providers
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that IOEs are passed up without being wrapped.    */
annotation|@
name|Test
DECL|method|testIOEInConstructorPropagation ()
specifier|public
name|void
name|testIOEInConstructorPropagation
parameter_list|()
throws|throws
name|Throwable
block|{
name|IOException
name|expected
init|=
name|expectProviderInstantiationFailure
argument_list|(
name|IOERaisingProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"expected"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|expected
operator|instanceof
name|InterruptedIOException
operator|)
condition|)
block|{
throw|throw
name|expected
throw|;
block|}
block|}
comment|/**    * Credential provider which raises an IOE when constructed.    */
DECL|class|IOERaisingProvider
specifier|private
specifier|static
class|class
name|IOERaisingProvider
implements|implements
name|AWSCredentialsProvider
block|{
DECL|method|IOERaisingProvider (URI uri, Configuration conf)
specifier|public
name|IOERaisingProvider
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"expected"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|AWSCredentials
name|getCredentials
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{      }
block|}
block|}
end_class

end_unit

