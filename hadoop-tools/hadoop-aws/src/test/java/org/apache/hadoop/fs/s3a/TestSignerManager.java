begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|SignableRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|Signer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|SignerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|CUSTOM_SIGNERS
import|;
end_import

begin_comment
comment|/**  * Tests for the SignerManager.  */
end_comment

begin_class
DECL|class|TestSignerManager
specifier|public
class|class
name|TestSignerManager
block|{
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10_000L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testCustomSignerFailureIfNotRegistered ()
specifier|public
name|void
name|testCustomSignerFailureIfNotRegistered
parameter_list|()
throws|throws
name|Exception
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|SignerFactory
operator|.
name|createSigner
argument_list|(
literal|"testsignerUnregistered"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expecting generic Exception.class to handle future implementation
comment|// changes.
comment|// For now, this is an NPE
block|}
annotation|@
name|Test
DECL|method|testCustomSignerInitialization ()
specifier|public
name|void
name|testCustomSignerInitialization
parameter_list|()
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|SignerForTest1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|SignerForTest2
operator|.
name|reset
argument_list|()
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CUSTOM_SIGNERS
argument_list|,
literal|"testsigner1:"
operator|+
name|SignerForTest1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SignerManager
name|signerManager
init|=
operator|new
name|SignerManager
argument_list|()
decl_stmt|;
name|signerManager
operator|.
name|initCustomSigners
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Signer
name|s1
init|=
name|SignerFactory
operator|.
name|createSigner
argument_list|(
literal|"testsigner1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|s1
operator|.
name|sign
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerForTest1
operator|.
name|initialized
argument_list|)
operator|.
name|as
argument_list|(
name|SignerForTest1
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" not initialized"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleCustomSignerInitialization ()
specifier|public
name|void
name|testMultipleCustomSignerInitialization
parameter_list|()
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|SignerForTest1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|SignerForTest2
operator|.
name|reset
argument_list|()
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CUSTOM_SIGNERS
argument_list|,
literal|"testsigner1:"
operator|+
name|SignerForTest1
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
literal|"testsigner2:"
operator|+
name|SignerForTest2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SignerManager
name|signerManager
init|=
operator|new
name|SignerManager
argument_list|()
decl_stmt|;
name|signerManager
operator|.
name|initCustomSigners
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Signer
name|s1
init|=
name|SignerFactory
operator|.
name|createSigner
argument_list|(
literal|"testsigner1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|s1
operator|.
name|sign
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerForTest1
operator|.
name|initialized
argument_list|)
operator|.
name|as
argument_list|(
name|SignerForTest1
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" not initialized"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Signer
name|s2
init|=
name|SignerFactory
operator|.
name|createSigner
argument_list|(
literal|"testsigner2"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|s2
operator|.
name|sign
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|SignerForTest2
operator|.
name|initialized
argument_list|)
operator|.
name|as
argument_list|(
name|SignerForTest2
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" not initialized"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * SignerForTest1.    */
annotation|@
name|Private
DECL|class|SignerForTest1
specifier|public
specifier|static
class|class
name|SignerForTest1
implements|implements
name|Signer
block|{
DECL|field|initialized
specifier|private
specifier|static
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|sign (SignableRequest<?> request, AWSCredentials credentials)
specifier|public
name|void
name|sign
parameter_list|(
name|SignableRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|AWSCredentials
name|credentials
parameter_list|)
block|{
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * SignerForTest2.    */
annotation|@
name|Private
DECL|class|SignerForTest2
specifier|public
specifier|static
class|class
name|SignerForTest2
implements|implements
name|Signer
block|{
DECL|field|initialized
specifier|private
specifier|static
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|sign (SignableRequest<?> request, AWSCredentials credentials)
specifier|public
name|void
name|sign
parameter_list|(
name|SignableRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|AWSCredentials
name|credentials
parameter_list|)
block|{
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

