begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|MarshalledCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|RoleModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|RoleTestUtils
operator|.
name|probeForAssumedRoleARN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|DELEGATION_TOKEN_ROLE_BINDING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|E_NO_SESSION_TOKENS_FOR_ROLE_BINDING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|ROLE_TOKEN_KIND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|RoleTokenBinding
operator|.
name|E_NO_ARN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Rerun the session token tests with a role binding.  * Some tests will fail as role bindings prevent certain operations.  */
end_comment

begin_class
DECL|class|ITestRoleDelegationTokens
specifier|public
class|class
name|ITestRoleDelegationTokens
extends|extends
name|ITestSessionDelegationTokens
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestRoleDelegationTokens
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getDelegationBinding ()
specifier|protected
name|String
name|getDelegationBinding
parameter_list|()
block|{
return|return
name|DELEGATION_TOKEN_ROLE_BINDING
return|;
block|}
annotation|@
name|Override
DECL|method|getTokenKind ()
specifier|public
name|Text
name|getTokenKind
parameter_list|()
block|{
return|return
name|ROLE_TOKEN_KIND
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|probeForAssumedRoleARN
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Session credentials will not propagate with role tokens,    * so the superclass's method will fail.    * This subclass intercepts the exception which is expected.    * @param fs base FS to bond to.    * @param marshalledCredentials session credentials from first DT.    * @param conf config to use    * @return null    * @throws Exception failure    */
annotation|@
name|Override
DECL|method|verifyCredentialPropagation ( final S3AFileSystem fs, final MarshalledCredentials marshalledCredentials, final Configuration conf)
specifier|protected
name|AbstractS3ATokenIdentifier
name|verifyCredentialPropagation
parameter_list|(
specifier|final
name|S3AFileSystem
name|fs
parameter_list|,
specifier|final
name|MarshalledCredentials
name|marshalledCredentials
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|intercept
argument_list|(
name|DelegationTokenIOException
operator|.
name|class
argument_list|,
name|E_NO_SESSION_TOKENS_FOR_ROLE_BINDING
argument_list|,
parameter_list|()
lambda|->
name|super
operator|.
name|verifyCredentialPropagation
argument_list|(
name|fs
argument_list|,
name|marshalledCredentials
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Test
DECL|method|testBindingWithoutARN ()
specifier|public
name|void
name|testBindingWithoutARN
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that a role binding only needs a role ARN when creating"
operator|+
literal|" a new token"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|DelegationConstants
operator|.
name|DELEGATION_TOKEN_ROLE_ARN
argument_list|)
expr_stmt|;
try|try
init|(
name|S3ADelegationTokens
name|delegationTokens2
init|=
operator|new
name|S3ADelegationTokens
argument_list|()
init|)
block|{
specifier|final
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|delegationTokens2
operator|.
name|bindToFileSystem
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|delegationTokens2
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|delegationTokens2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// cannot create a DT at this point
name|intercept
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
name|E_NO_ARN
argument_list|,
parameter_list|()
lambda|->
name|delegationTokens2
operator|.
name|createDelegationToken
argument_list|(
operator|new
name|EncryptionSecrets
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateRoleModel ()
specifier|public
name|void
name|testCreateRoleModel
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"self contained role model retrieval"
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|AWSPolicyProvider
operator|.
name|AccessLevel
argument_list|>
name|access
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|AWSPolicyProvider
operator|.
name|AccessLevel
operator|.
name|READ
argument_list|,
name|AWSPolicyProvider
operator|.
name|AccessLevel
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RoleModel
operator|.
name|Statement
argument_list|>
name|rules
init|=
name|fs
operator|.
name|listAWSPolicyRules
argument_list|(
name|access
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No AWS policy rules from FS"
argument_list|,
operator|!
name|rules
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ruleset
init|=
operator|new
name|RoleModel
argument_list|()
operator|.
name|toJson
argument_list|(
operator|new
name|RoleModel
operator|.
name|Policy
argument_list|(
name|rules
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Access policy for {}\n{}"
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|ruleset
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

