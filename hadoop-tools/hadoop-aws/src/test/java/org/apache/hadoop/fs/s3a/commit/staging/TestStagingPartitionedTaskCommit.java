begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.staging
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|InitiateMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|InternalCommitterConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|CommitConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingTestBase
operator|.
name|*
import|;
end_import

begin_comment
comment|/** Mocking test of the partitioned committer. */
end_comment

begin_class
DECL|class|TestStagingPartitionedTaskCommit
specifier|public
class|class
name|TestStagingPartitionedTaskCommit
extends|extends
name|StagingTestBase
operator|.
name|TaskCommitterTest
argument_list|<
name|PartitionedStagingCommitter
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newJobCommitter ()
name|PartitionedStagingCommitter
name|newJobCommitter
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|PartitionedStagingCommitter
argument_list|(
name|outputPath
argument_list|,
name|createTaskAttemptForJob
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newTaskCommitter ()
name|PartitionedStagingCommitter
name|newTaskCommitter
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|PartitionedStagingCommitter
argument_list|(
name|outputPath
argument_list|,
name|getTAC
argument_list|()
argument_list|)
return|;
block|}
comment|// The set of files used by this test
DECL|field|relativeFiles
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|relativeFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createRelativeFileList ()
specifier|public
specifier|static
name|void
name|createRelativeFileList
parameter_list|()
block|{
for|for
control|(
name|String
name|dateint
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"20161115"
argument_list|,
literal|"20161116"
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|hour
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"14"
argument_list|,
literal|"15"
argument_list|)
control|)
block|{
name|String
name|relative
init|=
literal|"dateint="
operator|+
name|dateint
operator|+
literal|"/hour="
operator|+
name|hour
operator|+
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".parquet"
decl_stmt|;
name|relativeFiles
operator|.
name|add
argument_list|(
name|relative
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testBadConflictMode ()
specifier|public
name|void
name|testBadConflictMode
parameter_list|()
throws|throws
name|Throwable
block|{
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
literal|"merge"
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|"MERGE"
argument_list|,
literal|"committer conflict"
argument_list|,
name|this
operator|::
name|newJobCommitter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefault ()
specifier|public
name|void
name|testDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|mockS3
init|=
name|getMockS3A
argument_list|()
decl_stmt|;
name|JobContext
name|job
init|=
name|getJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|unset
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|)
expr_stmt|;
specifier|final
name|PartitionedStagingCommitter
name|committer
init|=
name|newTaskCommitter
argument_list|()
decl_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|getTAC
argument_list|()
argument_list|)
expr_stmt|;
name|assertConflictResolution
argument_list|(
name|committer
argument_list|,
name|job
argument_list|,
name|ConflictResolution
operator|.
name|FAIL
argument_list|)
expr_stmt|;
name|createTestOutputFiles
argument_list|(
name|relativeFiles
argument_list|,
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|getTAC
argument_list|()
argument_list|)
argument_list|,
name|getTAC
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// test failure when one partition already exists
name|reset
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
name|Path
name|exists
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|relativeFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|pathExists
argument_list|(
name|mockS3
argument_list|,
name|exists
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|PathExistsException
operator|.
name|class
argument_list|,
name|InternalCommitterConstants
operator|.
name|E_DEST_EXISTS
argument_list|,
literal|"Expected a PathExistsException as a partition"
operator|+
literal|" already exists:"
operator|+
name|exists
argument_list|,
parameter_list|()
lambda|->
block|{
name|committer
operator|.
name|commitTask
argument_list|(
name|getTAC
argument_list|()
argument_list|)
expr_stmt|;
name|mockS3
operator|.
name|getFileStatus
argument_list|(
name|exists
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// test success
name|reset
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitTask
argument_list|(
name|getTAC
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|InitiateMultipartUploadRequest
name|request
range|:
name|getMockResults
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|BUCKET
argument_list|,
name|request
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|request
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should have the right number of uploads"
argument_list|,
name|relativeFiles
operator|.
name|size
argument_list|()
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|buildExpectedList
argument_list|(
name|committer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have correct paths"
argument_list|,
name|expected
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFail ()
specifier|public
name|void
name|testFail
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|mockS3
init|=
name|getMockS3A
argument_list|()
decl_stmt|;
name|getTAC
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
name|CONFLICT_MODE_FAIL
argument_list|)
expr_stmt|;
specifier|final
name|PartitionedStagingCommitter
name|committer
init|=
name|newTaskCommitter
argument_list|()
decl_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|getTAC
argument_list|()
argument_list|)
expr_stmt|;
name|createTestOutputFiles
argument_list|(
name|relativeFiles
argument_list|,
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|getTAC
argument_list|()
argument_list|)
argument_list|,
name|getTAC
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// test failure when one partition already exists
name|reset
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
name|Path
name|existsPath
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|relativeFiles
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|pathExists
argument_list|(
name|mockS3
argument_list|,
name|existsPath
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|PathExistsException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|"Should complain because a partition already exists: "
operator|+
name|existsPath
argument_list|,
parameter_list|()
lambda|->
name|committer
operator|.
name|commitTask
argument_list|(
name|getTAC
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test success
name|reset
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitTask
argument_list|(
name|getTAC
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|InitiateMultipartUploadRequest
name|request
range|:
name|getMockResults
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|BUCKET
argument_list|,
name|request
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|request
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should have the right number of uploads"
argument_list|,
name|relativeFiles
operator|.
name|size
argument_list|()
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|buildExpectedList
argument_list|(
name|committer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have correct paths"
argument_list|,
name|expected
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppend ()
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|mockS3
init|=
name|getMockS3A
argument_list|()
decl_stmt|;
name|getTAC
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
name|CONFLICT_MODE_APPEND
argument_list|)
expr_stmt|;
name|PartitionedStagingCommitter
name|committer
init|=
name|newTaskCommitter
argument_list|()
decl_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|getTAC
argument_list|()
argument_list|)
expr_stmt|;
name|createTestOutputFiles
argument_list|(
name|relativeFiles
argument_list|,
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|getTAC
argument_list|()
argument_list|)
argument_list|,
name|getTAC
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// test success when one partition already exists
name|reset
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
name|pathExists
argument_list|(
name|mockS3
argument_list|,
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|relativeFiles
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitTask
argument_list|(
name|getTAC
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|InitiateMultipartUploadRequest
name|request
range|:
name|getMockResults
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|BUCKET
argument_list|,
name|request
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|request
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should have the right number of uploads"
argument_list|,
name|relativeFiles
operator|.
name|size
argument_list|()
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|buildExpectedList
argument_list|(
name|committer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have correct paths"
argument_list|,
name|expected
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplace ()
specifier|public
name|void
name|testReplace
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: this committer needs to delete the data that already exists
comment|// This test should assert that the delete was done
name|FileSystem
name|mockS3
init|=
name|getMockS3A
argument_list|()
decl_stmt|;
name|getTAC
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_S3A_COMMITTER_STAGING_CONFLICT_MODE
argument_list|,
name|CONFLICT_MODE_REPLACE
argument_list|)
expr_stmt|;
name|PartitionedStagingCommitter
name|committer
init|=
name|newTaskCommitter
argument_list|()
decl_stmt|;
name|committer
operator|.
name|setupTask
argument_list|(
name|getTAC
argument_list|()
argument_list|)
expr_stmt|;
name|createTestOutputFiles
argument_list|(
name|relativeFiles
argument_list|,
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|getTAC
argument_list|()
argument_list|)
argument_list|,
name|getTAC
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// test success when one partition already exists
name|reset
argument_list|(
name|mockS3
argument_list|)
expr_stmt|;
name|pathExists
argument_list|(
name|mockS3
argument_list|,
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|relativeFiles
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitTask
argument_list|(
name|getTAC
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|InitiateMultipartUploadRequest
name|request
range|:
name|getMockResults
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|BUCKET
argument_list|,
name|request
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|request
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should have the right number of uploads"
argument_list|,
name|relativeFiles
operator|.
name|size
argument_list|()
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|buildExpectedList
argument_list|(
name|committer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have correct paths"
argument_list|,
name|expected
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
DECL|method|buildExpectedList (StagingCommitter committer)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|buildExpectedList
parameter_list|(
name|StagingCommitter
name|committer
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|boolean
name|unique
init|=
name|committer
operator|.
name|useUniqueFilenames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|relative
range|:
name|relativeFiles
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|OUTPUT_PREFIX
operator|+
literal|"/"
operator|+
operator|(
name|unique
condition|?
name|Paths
operator|.
name|addUUID
argument_list|(
name|relative
argument_list|,
name|committer
operator|.
name|getUUID
argument_list|()
argument_list|)
else|:
name|relative
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|expected
return|;
block|}
block|}
end_class

end_unit

