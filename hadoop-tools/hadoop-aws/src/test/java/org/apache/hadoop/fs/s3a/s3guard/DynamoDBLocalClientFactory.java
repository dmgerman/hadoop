begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|client
operator|.
name|builder
operator|.
name|AwsClientBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|AmazonDynamoDB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|AmazonDynamoDBClientBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|local
operator|.
name|main
operator|.
name|ServerRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|local
operator|.
name|server
operator|.
name|DynamoDBProxyServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|DefaultS3ClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ServerSocketUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|AWS_CREDENTIALS_PROVIDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|createAWSCredentialProviderSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DynamoDBClientFactory
operator|.
name|DefaultDynamoDBClientFactory
operator|.
name|getRegion
import|;
end_import

begin_comment
comment|/**  * A DynamoDBClientFactory implementation that creates AmazonDynamoDB clients  * against an in-memory DynamoDBLocal server instance.  *  * You won't be charged bills for issuing any DynamoDB requests. However, the  * DynamoDBLocal is considered a simulator of the DynamoDB web service, so it  * may be stale or different. For example, the throttling is not yet supported  * in DynamoDBLocal. This is for testing purpose only.  *  * To use this for creating DynamoDB client in tests:  *<ol>  *<li>  *    As all DynamoDBClientFactory implementations, this should be configured.  *</li>  *<li>  *    The singleton DynamoDBLocal server instance is started automatically when  *    creating the AmazonDynamoDB client for the first time. It still merits to  *    launch the server before all the tests and fail fast if error happens.  *</li>  *<li>  *    The server can be stopped explicitly, which is not actually needed in  *    tests as JVM termination will do that.  *</li>  *</ol>  *  * @see DefaultDynamoDBClientFactory  */
end_comment

begin_class
DECL|class|DynamoDBLocalClientFactory
specifier|public
class|class
name|DynamoDBLocalClientFactory
extends|extends
name|Configured
implements|implements
name|DynamoDBClientFactory
block|{
comment|/** The DynamoDBLocal dynamoDBLocalServer instance for testing. */
DECL|field|dynamoDBLocalServer
specifier|private
specifier|static
name|DynamoDBProxyServer
name|dynamoDBLocalServer
decl_stmt|;
DECL|field|ddbEndpoint
specifier|private
specifier|static
name|String
name|ddbEndpoint
decl_stmt|;
DECL|field|SYSPROP_SQLITE_LIB
specifier|private
specifier|static
specifier|final
name|String
name|SYSPROP_SQLITE_LIB
init|=
literal|"sqlite4java.library.path"
decl_stmt|;
annotation|@
name|Override
DECL|method|createDynamoDBClient (String defaultRegion)
specifier|public
name|AmazonDynamoDB
name|createDynamoDBClient
parameter_list|(
name|String
name|defaultRegion
parameter_list|)
throws|throws
name|IOException
block|{
name|startSingletonServer
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// use the default credential provider chain
name|conf
operator|.
name|unset
argument_list|(
name|AWS_CREDENTIALS_PROVIDER
argument_list|)
expr_stmt|;
specifier|final
name|AWSCredentialsProvider
name|credentials
init|=
name|createAWSCredentialProviderSet
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|ClientConfiguration
name|awsConf
init|=
name|DefaultS3ClientFactory
operator|.
name|createAwsConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// fail fast in case of service errors
name|awsConf
operator|.
name|setMaxErrorRetry
argument_list|(
literal|3
argument_list|)
expr_stmt|;
specifier|final
name|String
name|region
init|=
name|getRegion
argument_list|(
name|conf
argument_list|,
name|defaultRegion
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating DynamoDBLocal client using endpoint {} in region {}"
argument_list|,
name|ddbEndpoint
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return
name|AmazonDynamoDBClientBuilder
operator|.
name|standard
argument_list|()
operator|.
name|withCredentials
argument_list|(
name|credentials
argument_list|)
operator|.
name|withClientConfiguration
argument_list|(
name|awsConf
argument_list|)
operator|.
name|withEndpointConfiguration
argument_list|(
operator|new
name|AwsClientBuilder
operator|.
name|EndpointConfiguration
argument_list|(
name|ddbEndpoint
argument_list|,
name|region
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Start a singleton in-memory DynamoDBLocal server if not started yet.    * @throws IOException if any error occurs    */
DECL|method|startSingletonServer ()
specifier|public
specifier|synchronized
specifier|static
name|void
name|startSingletonServer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dynamoDBLocalServer
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// Set this property if it has not been set elsewhere
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|SYSPROP_SQLITE_LIB
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|projectBuildDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"project.build.directory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|projectBuildDir
argument_list|)
condition|)
block|{
name|projectBuildDir
operator|=
literal|"target"
expr_stmt|;
block|}
comment|// sqlite4java lib should have been copied to $projectBuildDir/native-libs
name|System
operator|.
name|setProperty
argument_list|(
name|SYSPROP_SQLITE_LIB
argument_list|,
name|projectBuildDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"native-libs"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting {} -> {}"
argument_list|,
name|SYSPROP_SQLITE_LIB
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|SYSPROP_SQLITE_LIB
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Start an in-memory local DynamoDB instance
specifier|final
name|String
name|port
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|ServerSocketUtil
operator|.
name|getPort
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|ddbEndpoint
operator|=
literal|"http://localhost:"
operator|+
name|port
expr_stmt|;
name|dynamoDBLocalServer
operator|=
name|ServerRunner
operator|.
name|createServerFromCommandLineArgs
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-inMemory"
block|,
literal|"-port"
block|,
name|port
block|}
argument_list|)
expr_stmt|;
name|dynamoDBLocalServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DynamoDBLocal singleton server was started at {}"
argument_list|,
name|ddbEndpoint
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error starting DynamoDBLocal server at "
operator|+
name|ddbEndpoint
operator|+
literal|" "
operator|+
name|t
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
comment|/**    * Stop the in-memory DynamoDBLocal server if it is started.    * @throws IOException if any error occurs    */
DECL|method|stopSingletonServer ()
specifier|public
specifier|synchronized
specifier|static
name|void
name|stopSingletonServer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dynamoDBLocalServer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down the in-memory DynamoDBLocal server"
argument_list|)
expr_stmt|;
try|try
block|{
name|dynamoDBLocalServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error stopping DynamoDBLocal server at "
operator|+
name|ddbEndpoint
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

