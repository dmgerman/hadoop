begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Unit test of the input policy logic, without making any S3 calls.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestS3AInputPolicies
specifier|public
class|class
name|TestS3AInputPolicies
block|{
DECL|field|policy
specifier|private
name|S3AInputPolicy
name|policy
decl_stmt|;
DECL|field|targetPos
specifier|private
name|long
name|targetPos
decl_stmt|;
DECL|field|length
specifier|private
name|long
name|length
decl_stmt|;
DECL|field|contentLength
specifier|private
name|long
name|contentLength
decl_stmt|;
DECL|field|readahead
specifier|private
name|long
name|readahead
decl_stmt|;
DECL|field|expectedLimit
specifier|private
name|long
name|expectedLimit
decl_stmt|;
DECL|field|_64K
specifier|public
specifier|static
specifier|final
name|long
name|_64K
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
DECL|field|_128K
specifier|public
specifier|static
specifier|final
name|long
name|_128K
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
DECL|field|_256K
specifier|public
specifier|static
specifier|final
name|long
name|_256K
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
DECL|field|_1MB
specifier|public
specifier|static
specifier|final
name|long
name|_1MB
init|=
literal|1024L
operator|*
literal|1024
decl_stmt|;
DECL|field|_10MB
specifier|public
specifier|static
specifier|final
name|long
name|_10MB
init|=
name|_1MB
operator|*
literal|10
decl_stmt|;
DECL|method|TestS3AInputPolicies (S3AInputPolicy policy, long targetPos, long length, long contentLength, long readahead, long expectedLimit)
specifier|public
name|TestS3AInputPolicies
parameter_list|(
name|S3AInputPolicy
name|policy
parameter_list|,
name|long
name|targetPos
parameter_list|,
name|long
name|length
parameter_list|,
name|long
name|contentLength
parameter_list|,
name|long
name|readahead
parameter_list|,
name|long
name|expectedLimit
parameter_list|)
block|{
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
name|this
operator|.
name|targetPos
operator|=
name|targetPos
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|contentLength
operator|=
name|contentLength
expr_stmt|;
name|this
operator|.
name|readahead
operator|=
name|readahead
expr_stmt|;
name|this
operator|.
name|expectedLimit
operator|=
name|expectedLimit
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|S3AInputPolicy
operator|.
name|Normal
block|,
literal|0
block|,
operator|-
literal|1
block|,
literal|0
block|,
name|_64K
block|,
literal|0
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Normal
block|,
literal|0
block|,
operator|-
literal|1
block|,
name|_10MB
block|,
name|_64K
block|,
name|_10MB
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Normal
block|,
name|_64K
block|,
name|_64K
block|,
name|_10MB
block|,
name|_64K
block|,
name|_10MB
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Sequential
block|,
literal|0
block|,
operator|-
literal|1
block|,
literal|0
block|,
name|_64K
block|,
literal|0
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Sequential
block|,
literal|0
block|,
operator|-
literal|1
block|,
name|_10MB
block|,
name|_64K
block|,
name|_10MB
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Random
block|,
literal|0
block|,
operator|-
literal|1
block|,
literal|0
block|,
name|_64K
block|,
literal|0
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Random
block|,
literal|0
block|,
operator|-
literal|1
block|,
name|_10MB
block|,
name|_64K
block|,
name|_10MB
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Random
block|,
literal|0
block|,
name|_128K
block|,
name|_10MB
block|,
name|_64K
block|,
name|_128K
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Random
block|,
literal|0
block|,
name|_128K
block|,
name|_10MB
block|,
name|_256K
block|,
name|_256K
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Random
block|,
literal|0
block|,
literal|0
block|,
name|_10MB
block|,
name|_256K
block|,
name|_256K
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Random
block|,
literal|0
block|,
literal|1
block|,
name|_10MB
block|,
name|_256K
block|,
name|_256K
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Random
block|,
literal|0
block|,
name|_1MB
block|,
name|_10MB
block|,
name|_256K
block|,
name|_1MB
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Random
block|,
literal|0
block|,
name|_1MB
block|,
name|_10MB
block|,
literal|0
block|,
name|_1MB
block|}
block|,
block|{
name|S3AInputPolicy
operator|.
name|Random
block|,
name|_10MB
operator|+
name|_64K
block|,
name|_1MB
block|,
name|_10MB
block|,
name|_256K
block|,
name|_10MB
block|}
block|,     }
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testInputPolicies ()
specifier|public
name|void
name|testInputPolicies
parameter_list|()
throws|throws
name|Throwable
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"calculateRequestLimit(%s, %d, %d, %d, %d)"
argument_list|,
name|policy
argument_list|,
name|targetPos
argument_list|,
name|length
argument_list|,
name|contentLength
argument_list|,
name|readahead
argument_list|)
argument_list|,
name|expectedLimit
argument_list|,
name|S3AInputStream
operator|.
name|calculateRequestLimit
argument_list|(
name|policy
argument_list|,
name|targetPos
argument_list|,
name|length
argument_list|,
name|contentLength
argument_list|,
name|readahead
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

