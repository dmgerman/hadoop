begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit.staging
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|staging
operator|.
name|StagingTestBase
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItem
import|;
end_import

begin_comment
comment|/**  * Test partitioned staging committer's logic for putting data in the right  * place.  */
end_comment

begin_class
DECL|class|TestStagingPartitionedFileListing
specifier|public
class|class
name|TestStagingPartitionedFileListing
extends|extends
name|TaskCommitterTest
argument_list|<
name|PartitionedStagingCommitter
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newJobCommitter ()
name|PartitionedStagingCommitter
name|newJobCommitter
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|PartitionedStagingCommitter
argument_list|(
name|outputPath
argument_list|,
name|createTaskAttemptForJob
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newTaskCommitter ()
name|PartitionedStagingCommitter
name|newTaskCommitter
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|PartitionedStagingCommitter
argument_list|(
name|outputPath
argument_list|,
name|getTAC
argument_list|()
argument_list|)
return|;
block|}
DECL|field|attemptFS
specifier|private
name|FileSystem
name|attemptFS
decl_stmt|;
DECL|field|attemptPath
specifier|private
name|Path
name|attemptPath
decl_stmt|;
annotation|@
name|After
DECL|method|cleanupAttempt ()
specifier|public
name|void
name|cleanupAttempt
parameter_list|()
block|{
name|cleanup
argument_list|(
literal|"teardown"
argument_list|,
name|attemptFS
argument_list|,
name|attemptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTaskOutputListing ()
specifier|public
name|void
name|testTaskOutputListing
parameter_list|()
throws|throws
name|Exception
block|{
name|PartitionedStagingCommitter
name|committer
init|=
name|newTaskCommitter
argument_list|()
decl_stmt|;
comment|// create files in the attempt path that should be found by getTaskOutput
name|attemptPath
operator|=
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|getTAC
argument_list|()
argument_list|)
expr_stmt|;
name|attemptFS
operator|=
name|attemptPath
operator|.
name|getFileSystem
argument_list|(
name|getTAC
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|attemptFS
operator|.
name|delete
argument_list|(
name|attemptPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dateint
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"20161115"
argument_list|,
literal|"20161116"
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|hour
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"13"
argument_list|,
literal|"14"
argument_list|)
control|)
block|{
name|String
name|relative
init|=
literal|"dateint="
operator|+
name|dateint
operator|+
literal|"/hour="
operator|+
name|hour
operator|+
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".parquet"
decl_stmt|;
name|expectedFiles
operator|.
name|add
argument_list|(
name|relative
argument_list|)
expr_stmt|;
name|attemptFS
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|attemptPath
argument_list|,
name|relative
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|actualFiles
init|=
name|committer
operator|.
name|getTaskOutput
argument_list|(
name|getTAC
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|stat
lambda|->
name|Paths
operator|.
name|getRelativePath
argument_list|(
name|attemptPath
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedFiles
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actualFiles
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File sets should match"
argument_list|,
name|expectedFiles
argument_list|,
name|actualFiles
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteQuietly
argument_list|(
name|attemptFS
argument_list|,
name|attemptPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTaskOutputListingWithHiddenFiles ()
specifier|public
name|void
name|testTaskOutputListingWithHiddenFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|PartitionedStagingCommitter
name|committer
init|=
name|newTaskCommitter
argument_list|()
decl_stmt|;
comment|// create files in the attempt path that should be found by getTaskOutput
name|attemptPath
operator|=
name|committer
operator|.
name|getTaskAttemptPath
argument_list|(
name|getTAC
argument_list|()
argument_list|)
expr_stmt|;
name|attemptFS
operator|=
name|attemptPath
operator|.
name|getFileSystem
argument_list|(
name|getTAC
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|attemptFS
operator|.
name|delete
argument_list|(
name|attemptPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dateint
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"20161115"
argument_list|,
literal|"20161116"
argument_list|)
control|)
block|{
name|String
name|metadata
init|=
literal|"dateint="
operator|+
name|dateint
operator|+
literal|"/"
operator|+
literal|"_metadata"
decl_stmt|;
name|attemptFS
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|attemptPath
argument_list|,
name|metadata
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|hour
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"13"
argument_list|,
literal|"14"
argument_list|)
control|)
block|{
name|String
name|relative
init|=
literal|"dateint="
operator|+
name|dateint
operator|+
literal|"/hour="
operator|+
name|hour
operator|+
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".parquet"
decl_stmt|;
name|expectedFiles
operator|.
name|add
argument_list|(
name|relative
argument_list|)
expr_stmt|;
name|attemptFS
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|attemptPath
argument_list|,
name|relative
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|partial
init|=
literal|"dateint="
operator|+
name|dateint
operator|+
literal|"/hour="
operator|+
name|hour
operator|+
literal|"/."
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".partial"
decl_stmt|;
name|attemptFS
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|attemptPath
argument_list|,
name|partial
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|actualFiles
init|=
name|committer
operator|.
name|getTaskOutput
argument_list|(
name|getTAC
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|stat
lambda|->
name|Paths
operator|.
name|getRelativePath
argument_list|(
name|attemptPath
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedFiles
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actualFiles
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File sets should match"
argument_list|,
name|expectedFiles
argument_list|,
name|actualFiles
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteQuietly
argument_list|(
name|attemptFS
argument_list|,
name|attemptPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPartitionsResolution ()
specifier|public
name|void
name|testPartitionsResolution
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|tempDir
init|=
name|getTempDir
argument_list|()
decl_stmt|;
name|File
name|partitionsDir
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"partitions"
argument_list|)
decl_stmt|;
name|attemptPath
operator|=
operator|new
name|Path
argument_list|(
name|partitionsDir
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|attemptFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|getJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|deleteQuietly
argument_list|(
name|attemptFS
argument_list|,
name|attemptPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|attemptFS
operator|.
name|mkdirs
argument_list|(
name|attemptPath
argument_list|)
expr_stmt|;
comment|// initial partitioning -> empty
name|assertTrue
argument_list|(
name|Paths
operator|.
name|getPartitions
argument_list|(
name|attemptPath
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|oct2017
init|=
literal|"year=2017/month=10"
decl_stmt|;
name|Path
name|octLog
init|=
operator|new
name|Path
argument_list|(
name|attemptPath
argument_list|,
name|oct2017
operator|+
literal|"/log-2017-10-04.txt"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|attemptFS
argument_list|,
name|octLog
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listPartitions
argument_list|(
name|attemptFS
argument_list|,
name|attemptPath
argument_list|)
argument_list|,
name|hasItem
argument_list|(
name|oct2017
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a root entry and it ends up under the table_root entry
name|Path
name|rootFile
init|=
operator|new
name|Path
argument_list|(
name|attemptPath
argument_list|,
literal|"root.txt"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|attemptFS
argument_list|,
name|rootFile
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listPartitions
argument_list|(
name|attemptFS
argument_list|,
name|attemptPath
argument_list|)
argument_list|,
name|allOf
argument_list|(
name|hasItem
argument_list|(
name|oct2017
argument_list|)
argument_list|,
name|hasItem
argument_list|(
name|StagingCommitterConstants
operator|.
name|TABLE_ROOT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * List files in a filesystem using {@code listFiles()},    * then get all the partitions.    * @param fs filesystem    * @param base base of tree    * @return a list of partitions    * @throws IOException failure    */
DECL|method|listPartitions (FileSystem fs, Path base)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|listPartitions
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statusList
init|=
name|mapLocatedFiles
argument_list|(
name|fs
operator|.
name|listFiles
argument_list|(
name|base
argument_list|,
literal|true
argument_list|)
argument_list|,
name|s
lambda|->
operator|(
name|FileStatus
operator|)
name|s
argument_list|)
decl_stmt|;
return|return
name|Paths
operator|.
name|getPartitions
argument_list|(
name|base
argument_list|,
name|statusList
argument_list|)
return|;
block|}
block|}
end_class

end_unit

