begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.scale
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|scale
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AbstractS3ATestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AInstrumentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Base class for scale tests; here is where the common scale configuration  * keys are defined.  *<p>  * Configuration setup is a bit more complex than in the parent classes,  * as the test timeout is desired prior to the {@link #getTestTimeoutMillis()}  * being called to set the test timeout rule; this happens before any of  * the methods tagged with {@code @Before} are invoked.  *<p>  * The algorithm is:  *<ol>  *<li>Create a configuration on demand, via  *   {@link #demandCreateConfiguration()}</li>  *<li>Have that return the value of {@link #conf} or create a new one  *   if that field is null (and set the field to the created value).</li>  *<li>Override the superclasses {@link #createConfiguration()}  *   to return the demand created value; make that method final so that  *   subclasses don't break things by overridding it.</li>  *<li>Add a new override point {@link #createScaleConfiguration()}  *   to create the config, one which subclasses can (and do) override.</li>  *</ol>  * Bear in mind that this process also takes place during initialization  * of the superclass; the overridden methods are being invoked before  * their instances are fully configured. This is considered  *<i>very bad form</i> in Java code (indeed, in C++ it is actually permitted;  * the base class implementations get invoked instead).  */
end_comment

begin_class
DECL|class|S3AScaleTestBase
specifier|public
class|class
name|S3AScaleTestBase
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|_1KB
specifier|public
specifier|static
specifier|final
name|int
name|_1KB
init|=
literal|1024
decl_stmt|;
DECL|field|_1MB
specifier|public
specifier|static
specifier|final
name|int
name|_1MB
init|=
name|_1KB
operator|*
name|_1KB
decl_stmt|;
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3AScaleTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|enabled
specifier|private
name|boolean
name|enabled
decl_stmt|;
DECL|field|testPath
specifier|private
name|Path
name|testPath
decl_stmt|;
comment|/**    * Get the configuration used to set up the FS.    * @return the configuration    */
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|testPath
operator|=
name|path
argument_list|(
literal|"/tests3ascale"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scale test operation count = {}"
argument_list|,
name|getOperationCount
argument_list|()
argument_list|)
expr_stmt|;
name|enabled
operator|=
name|getTestPropertyBool
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|KEY_SCALE_TESTS_ENABLED
argument_list|,
name|DEFAULT_SCALE_TESTS_ENABLED
argument_list|)
expr_stmt|;
name|assume
argument_list|(
literal|"Scale test disabled: to enable set property "
operator|+
name|KEY_SCALE_TESTS_ENABLED
argument_list|,
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the configuration if it is not already set up, calling    * {@link #createScaleConfiguration()} to do so.    * @return the configuration.    */
DECL|method|demandCreateConfiguration ()
specifier|private
specifier|synchronized
name|Configuration
name|demandCreateConfiguration
parameter_list|()
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|createScaleConfiguration
argument_list|()
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
comment|/**    * Returns the config created with {@link #demandCreateConfiguration()}.    * Subclasses must override {@link #createScaleConfiguration()}    * in order to customize their configurations.    * @return a configuration with which to create FS instances    */
DECL|method|createConfiguration ()
specifier|protected
specifier|final
name|Configuration
name|createConfiguration
parameter_list|()
block|{
return|return
name|demandCreateConfiguration
argument_list|()
return|;
block|}
comment|/**    * Override point: create a configuration.    * @return a configuration with which to create FS instances    */
DECL|method|createScaleConfiguration ()
specifier|protected
name|Configuration
name|createScaleConfiguration
parameter_list|()
block|{
return|return
name|super
operator|.
name|createConfiguration
argument_list|()
return|;
block|}
DECL|method|getTestPath ()
specifier|protected
name|Path
name|getTestPath
parameter_list|()
block|{
return|return
name|testPath
return|;
block|}
comment|/**    * Get the configured operation count.    * @return the number of times to perform the operation being tested    */
DECL|method|getOperationCount ()
specifier|protected
name|long
name|getOperationCount
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|KEY_OPERATION_COUNT
argument_list|,
name|DEFAULT_OPERATION_COUNT
argument_list|)
return|;
block|}
comment|/**    * Get the test timeout in seconds.    * @return the test timeout as set in system properties or the default.    */
DECL|method|getTestTimeoutSeconds ()
specifier|protected
name|int
name|getTestTimeoutSeconds
parameter_list|()
block|{
return|return
name|getTestPropertyInt
argument_list|(
name|demandCreateConfiguration
argument_list|()
argument_list|,
name|KEY_TEST_TIMEOUT
argument_list|,
name|SCALE_TEST_TIMEOUT_SECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTestTimeoutMillis ()
specifier|protected
name|int
name|getTestTimeoutMillis
parameter_list|()
block|{
return|return
name|getTestTimeoutSeconds
argument_list|()
operator|*
literal|1000
return|;
block|}
comment|/**    * Get the input stream statistics of an input stream.    * Raises an exception if the inner stream is not an S3A input stream    * @param in wrapper    * @return the statistics for the inner stream    */
DECL|method|getInputStreamStatistics ( FSDataInputStream in)
specifier|protected
name|S3AInstrumentation
operator|.
name|InputStreamStatistics
name|getInputStreamStatistics
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|)
block|{
return|return
name|getS3AInputStream
argument_list|(
name|in
argument_list|)
operator|.
name|getS3AStreamStatistics
argument_list|()
return|;
block|}
comment|/**    * Get the inner stream of an input stream.    * Raises an exception if the inner stream is not an S3A input stream    * @param in wrapper    * @return the inner stream    * @throws AssertionError if the inner stream is of the wrong type    */
DECL|method|getS3AInputStream ( FSDataInputStream in)
specifier|protected
name|S3AInputStream
name|getS3AInputStream
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|)
block|{
name|InputStream
name|inner
init|=
name|in
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|inner
operator|instanceof
name|S3AInputStream
condition|)
block|{
return|return
operator|(
name|S3AInputStream
operator|)
name|inner
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not an S3AInputStream: "
operator|+
name|inner
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the gauge value of a statistic. Raises an assertion if    * there is no such gauge.    * @param statistic statistic to look up    * @return the value.    */
DECL|method|gaugeValue (Statistic statistic)
specifier|public
name|long
name|gaugeValue
parameter_list|(
name|Statistic
name|statistic
parameter_list|)
block|{
name|S3AInstrumentation
name|instrumentation
init|=
name|getFileSystem
argument_list|()
operator|.
name|getInstrumentation
argument_list|()
decl_stmt|;
name|MutableGaugeLong
name|gauge
init|=
name|instrumentation
operator|.
name|lookupGauge
argument_list|(
name|statistic
operator|.
name|getSymbol
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No gauge "
operator|+
name|statistic
operator|+
literal|" in "
operator|+
name|instrumentation
operator|.
name|dump
argument_list|(
literal|""
argument_list|,
literal|" = "
argument_list|,
literal|"\n"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|gauge
argument_list|)
expr_stmt|;
return|return
name|gauge
operator|.
name|value
argument_list|()
return|;
block|}
comment|/**    * Is the test enabled; this is controlled by the configuration    * and the {@code -Dscale} maven option.    * @return true if the scale tests are enabled.    */
DECL|method|isEnabled ()
specifier|protected
specifier|final
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
comment|/**    * Flag to indicate that this test is being executed in parallel.    * This is used by some of the scale tests to validate test time expectations.    * @return true if the build indicates this test is being run in parallel.    */
DECL|method|isParallelExecution ()
specifier|protected
name|boolean
name|isParallelExecution
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|S3ATestConstants
operator|.
name|KEY_PARALLEL_TEST_EXECUTION
argument_list|)
return|;
block|}
block|}
end_class

end_unit

