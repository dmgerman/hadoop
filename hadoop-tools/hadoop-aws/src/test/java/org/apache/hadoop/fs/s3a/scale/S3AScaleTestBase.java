begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.scale
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|scale
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AInstrumentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * Base class for scale tests; here is where the common scale configuration  * keys are defined.  */
end_comment

begin_class
DECL|class|S3AScaleTestBase
specifier|public
class|class
name|S3AScaleTestBase
extends|extends
name|Assert
implements|implements
name|S3ATestConstants
block|{
annotation|@
name|Rule
DECL|field|methodName
specifier|public
name|TestName
name|methodName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30
operator|*
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|nameThread ()
specifier|public
specifier|static
name|void
name|nameThread
parameter_list|()
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"JUnit"
argument_list|)
expr_stmt|;
block|}
comment|/**    * The number of operations to perform: {@value}.    */
DECL|field|KEY_OPERATION_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|KEY_OPERATION_COUNT
init|=
name|SCALE_TEST
operator|+
literal|"operation.count"
decl_stmt|;
comment|/**    * The number of directory operations to perform: {@value}.    */
DECL|field|KEY_DIRECTORY_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|KEY_DIRECTORY_COUNT
init|=
name|SCALE_TEST
operator|+
literal|"directory.count"
decl_stmt|;
comment|/**    * The readahead buffer: {@value}.    */
DECL|field|KEY_READ_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|KEY_READ_BUFFER_SIZE
init|=
name|S3A_SCALE_TEST
operator|+
literal|"read.buffer.size"
decl_stmt|;
DECL|field|DEFAULT_READ_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_READ_BUFFER_SIZE
init|=
literal|16384
decl_stmt|;
comment|/**    * Key for a multi MB test file: {@value}.    */
DECL|field|KEY_CSVTEST_FILE
specifier|public
specifier|static
specifier|final
name|String
name|KEY_CSVTEST_FILE
init|=
name|S3A_SCALE_TEST
operator|+
literal|"csvfile"
decl_stmt|;
comment|/**    * Default path for the multi MB test file: {@value}.    */
DECL|field|DEFAULT_CSVTEST_FILE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CSVTEST_FILE
init|=
literal|"s3a://landsat-pds/scene_list.gz"
decl_stmt|;
comment|/**    * The default number of operations to perform: {@value}.    */
DECL|field|DEFAULT_OPERATION_COUNT
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_OPERATION_COUNT
init|=
literal|2005
decl_stmt|;
comment|/**    * Default number of directories to create when performing    * directory performance/scale tests.    */
DECL|field|DEFAULT_DIRECTORY_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_DIRECTORY_COUNT
init|=
literal|2
decl_stmt|;
DECL|field|fs
specifier|protected
name|S3AFileSystem
name|fs
decl_stmt|;
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3AScaleTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Configuration generator. May be overridden to inject    * some custom options.    * @return a configuration with which to create FS instances    */
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
return|return
operator|new
name|Configuration
argument_list|()
return|;
block|}
comment|/**    * Get the configuration used to set up the FS.    * @return the configuration    */
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scale test operation count = {}"
argument_list|,
name|getOperationCount
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ContractTestUtils
operator|.
name|rm
argument_list|(
name|fs
argument_list|,
name|getTestPath
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestPath ()
specifier|protected
name|Path
name|getTestPath
parameter_list|()
block|{
name|String
name|testUniqueForkId
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.unique.fork.id"
argument_list|)
decl_stmt|;
return|return
name|testUniqueForkId
operator|==
literal|null
condition|?
operator|new
name|Path
argument_list|(
literal|"/tests3a"
argument_list|)
else|:
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|testUniqueForkId
argument_list|,
literal|"tests3a"
argument_list|)
return|;
block|}
DECL|method|getOperationCount ()
specifier|protected
name|long
name|getOperationCount
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|KEY_OPERATION_COUNT
argument_list|,
name|DEFAULT_OPERATION_COUNT
argument_list|)
return|;
block|}
comment|/**    * Describe a test in the logs    * @param text text to print    * @param args arguments to format in the printing    */
DECL|method|describe (String text, Object... args)
specifier|protected
name|void
name|describe
parameter_list|(
name|String
name|text
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n{}: {}\n"
argument_list|,
name|methodName
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|text
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the input stream statistics of an input stream.    * Raises an exception if the inner stream is not an S3A input stream    * @param in wrapper    * @return the statistics for the inner stream    */
DECL|method|getInputStreamStatistics ( FSDataInputStream in)
specifier|protected
name|S3AInstrumentation
operator|.
name|InputStreamStatistics
name|getInputStreamStatistics
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|)
block|{
name|InputStream
name|inner
init|=
name|in
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|inner
operator|instanceof
name|S3AInputStream
condition|)
block|{
name|S3AInputStream
name|s3a
init|=
operator|(
name|S3AInputStream
operator|)
name|inner
decl_stmt|;
return|return
name|s3a
operator|.
name|getS3AStreamStatistics
argument_list|()
return|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Not an S3AInputStream: "
operator|+
name|inner
argument_list|)
expr_stmt|;
comment|// never reached
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

