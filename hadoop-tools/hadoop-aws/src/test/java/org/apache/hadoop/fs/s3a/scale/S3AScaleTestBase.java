begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.scale
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|scale
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_comment
comment|/**  * Base class for scale tests; here is where the common scale configuration  * keys are defined  */
end_comment

begin_class
DECL|class|S3AScaleTestBase
specifier|public
class|class
name|S3AScaleTestBase
block|{
DECL|field|SCALE_TEST
specifier|public
specifier|static
specifier|final
name|String
name|SCALE_TEST
init|=
literal|"scale.test."
decl_stmt|;
DECL|field|KEY_OPERATION_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|KEY_OPERATION_COUNT
init|=
name|SCALE_TEST
operator|+
literal|"operation.count"
decl_stmt|;
DECL|field|DEFAULT_OPERATION_COUNT
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_OPERATION_COUNT
init|=
literal|2005
decl_stmt|;
DECL|field|fs
specifier|protected
name|S3AFileSystem
name|fs
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3AScaleTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Configuration generator. May be overridden to inject    * some custom options    * @return a configuration with which to create FS instances    */
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
return|return
operator|new
name|Configuration
argument_list|()
return|;
block|}
comment|/**    * Get the configuration used to set up the FS    * @return the configuration    */
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|S3ATestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ContractTestUtils
operator|.
name|rm
argument_list|(
name|fs
argument_list|,
name|getTestPath
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestPath ()
specifier|protected
name|Path
name|getTestPath
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/tests3a"
argument_list|)
return|;
block|}
DECL|method|getOperationCount ()
specifier|protected
name|long
name|getOperationCount
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|KEY_OPERATION_COUNT
argument_list|,
name|DEFAULT_OPERATION_COUNT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

