begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
operator|.
name|ChangeDetectionPolicy
operator|.
name|Source
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|writeDataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|getTestBucketName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|removeBucketOverrides
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|eventually
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test S3A remote file change detection.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|ITestS3ARemoteFileChanged
specifier|public
class|class
name|ITestS3ARemoteFileChanged
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3ARemoteFileChanged
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|changeDetectionSource
specifier|private
specifier|final
name|String
name|changeDetectionSource
decl_stmt|;
DECL|field|changeDetectionMode
specifier|private
specifier|final
name|String
name|changeDetectionMode
decl_stmt|;
DECL|field|expectChangeException
specifier|private
specifier|final
name|boolean
name|expectChangeException
decl_stmt|;
DECL|field|expectFileNotFoundException
specifier|private
specifier|final
name|boolean
name|expectFileNotFoundException
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|params ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
comment|// make sure it works with invalid config
block|{
literal|"bogus"
block|,
literal|"bogus"
block|,
literal|true
block|,
literal|true
block|}
block|,
comment|// test with etag
block|{
name|CHANGE_DETECT_SOURCE_ETAG
block|,
name|CHANGE_DETECT_MODE_SERVER
block|,
literal|true
block|,
literal|true
block|}
block|,
block|{
name|CHANGE_DETECT_SOURCE_ETAG
block|,
name|CHANGE_DETECT_MODE_CLIENT
block|,
literal|true
block|,
literal|true
block|}
block|,
block|{
name|CHANGE_DETECT_SOURCE_ETAG
block|,
name|CHANGE_DETECT_MODE_WARN
block|,
literal|false
block|,
literal|true
block|}
block|,
block|{
name|CHANGE_DETECT_SOURCE_ETAG
block|,
name|CHANGE_DETECT_MODE_NONE
block|,
literal|false
block|,
literal|true
block|}
block|,
comment|// test with versionId
comment|// when using server-side versionId, the exceptions shouldn't happen
comment|// since the previous version will still be available
block|{
name|CHANGE_DETECT_SOURCE_VERSION_ID
block|,
name|CHANGE_DETECT_MODE_SERVER
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// with client-side versionId it will behave similar to client-side eTag
block|{
name|CHANGE_DETECT_SOURCE_VERSION_ID
block|,
name|CHANGE_DETECT_MODE_CLIENT
block|,
literal|true
block|,
literal|true
block|}
block|,
block|{
name|CHANGE_DETECT_SOURCE_VERSION_ID
block|,
name|CHANGE_DETECT_MODE_WARN
block|,
literal|false
block|,
literal|true
block|}
block|,
block|{
name|CHANGE_DETECT_SOURCE_VERSION_ID
block|,
name|CHANGE_DETECT_MODE_NONE
block|,
literal|false
block|,
literal|true
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|ITestS3ARemoteFileChanged (String changeDetectionSource, String changeDetectionMode, boolean expectException, boolean expectFileNotFoundException)
specifier|public
name|ITestS3ARemoteFileChanged
parameter_list|(
name|String
name|changeDetectionSource
parameter_list|,
name|String
name|changeDetectionMode
parameter_list|,
name|boolean
name|expectException
parameter_list|,
name|boolean
name|expectFileNotFoundException
parameter_list|)
block|{
name|this
operator|.
name|changeDetectionSource
operator|=
name|changeDetectionSource
expr_stmt|;
name|this
operator|.
name|changeDetectionMode
operator|=
name|changeDetectionMode
expr_stmt|;
name|this
operator|.
name|expectChangeException
operator|=
name|expectException
expr_stmt|;
name|this
operator|.
name|expectFileNotFoundException
operator|=
name|expectFileNotFoundException
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|getTestBucketName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|removeBucketOverrides
argument_list|(
name|bucketName
argument_list|,
name|conf
argument_list|,
name|CHANGE_DETECT_SOURCE
argument_list|,
name|CHANGE_DETECT_MODE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CHANGE_DETECT_SOURCE
argument_list|,
name|changeDetectionSource
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CHANGE_DETECT_MODE
argument_list|,
name|changeDetectionMode
argument_list|)
expr_stmt|;
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
DECL|method|testReadFileChanged ()
specifier|public
name|void
name|testReadFileChanged
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|originalLength
init|=
literal|8192
decl_stmt|;
specifier|final
name|byte
index|[]
name|originalDataset
init|=
name|dataset
argument_list|(
name|originalLength
argument_list|,
literal|'a'
argument_list|,
literal|32
argument_list|)
decl_stmt|;
specifier|final
name|int
name|newLength
init|=
name|originalLength
operator|+
literal|1
decl_stmt|;
specifier|final
name|byte
index|[]
name|newDataset
init|=
name|dataset
argument_list|(
name|newLength
argument_list|,
literal|'A'
argument_list|,
literal|32
argument_list|)
decl_stmt|;
specifier|final
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|testpath
init|=
name|path
argument_list|(
literal|"readFileToChange.txt"
argument_list|)
decl_stmt|;
comment|// initial write
name|writeDataset
argument_list|(
name|fs
argument_list|,
name|testpath
argument_list|,
name|originalDataset
argument_list|,
name|originalDataset
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|getChangeDetectionPolicy
argument_list|()
operator|.
name|getSource
argument_list|()
operator|==
name|Source
operator|.
name|VersionId
condition|)
block|{
comment|// skip versionId tests if the bucket doesn't have object versioning
comment|// enabled
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Target filesystem does not support versioning"
argument_list|,
name|fs
operator|.
name|getObjectMetadata
argument_list|(
name|fs
operator|.
name|pathToKey
argument_list|(
name|testpath
argument_list|)
argument_list|)
operator|.
name|getVersionId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|FSDataInputStream
name|instream
init|=
name|fs
operator|.
name|open
argument_list|(
name|testpath
argument_list|)
init|)
block|{
comment|// seek forward and read successfully
name|instream
operator|.
name|seek
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no data to read"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// overwrite
name|writeDataset
argument_list|(
name|fs
argument_list|,
name|testpath
argument_list|,
name|newDataset
argument_list|,
name|newDataset
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// here the new file length is larger. Probe the file to see if this is
comment|// true, with a spin and wait
name|eventually
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|1000
argument_list|,
parameter_list|()
lambda|->
block|{
name|assertEquals
argument_list|(
name|newLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testpath
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// With the new file version in place, any subsequent S3 read by
comment|// eTag/versionId will fail.  A new read by eTag/versionId will occur in
comment|// reopen() on read after a seek() backwards.  We verify seek backwards
comment|// results in the expected exception and seek() forward works without
comment|// issue.
comment|// first check seek forward
name|instream
operator|.
name|seek
argument_list|(
literal|2048
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no data to read"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// now check seek backward
name|instream
operator|.
name|seek
argument_list|(
name|instream
operator|.
name|getPos
argument_list|()
operator|-
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectChangeException
condition|)
block|{
name|intercept
argument_list|(
name|RemoteFileChangedException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|"read"
argument_list|,
parameter_list|()
lambda|->
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|instream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
comment|// seek backward
name|instream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectChangeException
condition|)
block|{
name|intercept
argument_list|(
name|RemoteFileChangedException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|"read"
argument_list|,
parameter_list|()
lambda|->
name|instream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|RemoteFileChangedException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|"read"
argument_list|,
parameter_list|()
lambda|->
name|instream
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|RemoteFileChangedException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|"readfully"
argument_list|,
parameter_list|()
lambda|->
name|instream
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|instream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|instream
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|instream
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
comment|// delete the file. Reads must fail
name|fs
operator|.
name|delete
argument_list|(
name|testpath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// seek backward
name|instream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectFileNotFoundException
condition|)
block|{
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|"read()"
argument_list|,
parameter_list|()
lambda|->
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|"readfully"
argument_list|,
parameter_list|()
lambda|->
name|instream
operator|.
name|readFully
argument_list|(
literal|2048
argument_list|,
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|instream
operator|.
name|read
argument_list|()
expr_stmt|;
name|instream
operator|.
name|readFully
argument_list|(
literal|2048
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

