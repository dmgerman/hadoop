begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.select
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
operator|.
name|ChangeDetectionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
operator|.
name|ChangeDetectionPolicy
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|OperationDuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardToolTestHelper
operator|.
name|exec
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|select
operator|.
name|ITestS3SelectLandsat
operator|.
name|SELECT_NOTHING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|select
operator|.
name|ITestS3SelectLandsat
operator|.
name|SELECT_SUNNY_ROWS_NO_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|select
operator|.
name|SelectConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|select
operator|.
name|SelectTool
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_COMMAND_ARGUMENT_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_SERVICE_UNAVAILABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_SUCCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_USAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test the S3 Select CLI through some operations against landsat  * and files generated from it.  */
end_comment

begin_class
DECL|class|ITestS3SelectCLI
specifier|public
class|class
name|ITestS3SelectCLI
extends|extends
name|AbstractS3SelectTest
block|{
DECL|field|LINE_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|LINE_COUNT
init|=
literal|100
decl_stmt|;
DECL|field|SELECT_EVERYTHING
specifier|public
specifier|static
specifier|final
name|String
name|SELECT_EVERYTHING
init|=
literal|"SELECT * FROM S3OBJECT s"
decl_stmt|;
DECL|field|selectTool
specifier|private
name|SelectTool
name|selectTool
decl_stmt|;
DECL|field|selectConf
specifier|private
name|Configuration
name|selectConf
decl_stmt|;
DECL|field|D
specifier|public
specifier|static
specifier|final
name|String
name|D
init|=
literal|"-D"
decl_stmt|;
DECL|field|localFile
specifier|private
name|File
name|localFile
decl_stmt|;
DECL|field|landsatSrc
specifier|private
name|String
name|landsatSrc
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|selectTool
operator|=
operator|new
name|SelectTool
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|selectConf
operator|=
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|localFile
operator|=
name|getTempFilename
argument_list|()
expr_stmt|;
name|landsatSrc
operator|=
name|getLandsatGZ
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ChangeDetectionPolicy
name|changeDetectionPolicy
init|=
name|getLandsatFS
argument_list|()
operator|.
name|getChangeDetectionPolicy
argument_list|()
decl_stmt|;
name|Assume
operator|.
name|assumeFalse
argument_list|(
literal|"the standard landsat bucket doesn't have versioning"
argument_list|,
name|changeDetectionPolicy
operator|.
name|getSource
argument_list|()
operator|==
name|Source
operator|.
name|VersionId
operator|&&
name|changeDetectionPolicy
operator|.
name|isRequireVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
if|if
condition|(
name|localFile
operator|!=
literal|null
condition|)
block|{
name|localFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Expect a command to succeed.    * @param message any extra text to include in the assertion error message    * @param tool tool to run    * @param args arguments to the command    * @return the output of any successful run    * @throws Exception failure    */
DECL|method|expectSuccess ( String message, S3GuardTool tool, String... args)
specifier|protected
specifier|static
name|String
name|expectSuccess
parameter_list|(
name|String
name|message
parameter_list|,
name|S3GuardTool
name|tool
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|exec
argument_list|(
name|EXIT_SUCCESS
argument_list|,
name|message
argument_list|,
name|tool
argument_list|,
name|buf
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Run a S3GuardTool command from a varags list and the    * configuration returned by {@code getConfiguration()}.    * @param conf config to use    * @param args argument list    * @return the return code    * @throws Exception any exception    */
DECL|method|run (Configuration conf, S3GuardTool tool, String... args)
specifier|protected
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|S3GuardTool
name|tool
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Run a S3GuardTool command from a varags list, catch any raised    * ExitException and verify the status code matches that expected.    * @param status expected status code of the exception    * @param conf config to use    * @param args argument list    * @throws Exception any exception    */
DECL|method|runToFailure (int status, Configuration conf, String message, S3GuardTool tool, String... args)
specifier|protected
name|void
name|runToFailure
parameter_list|(
name|int
name|status
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|message
parameter_list|,
name|S3GuardTool
name|tool
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ExitUtil
operator|.
name|ExitException
name|ex
init|=
name|intercept
argument_list|(
name|ExitUtil
operator|.
name|ExitException
operator|.
name|class
argument_list|,
name|message
argument_list|,
parameter_list|()
lambda|->
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|.
name|status
operator|!=
name|status
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLandsatToFile ()
specifier|public
name|void
name|testLandsatToFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"select part of the landsat to a file"
argument_list|)
expr_stmt|;
name|int
name|lineCount
init|=
name|LINE_COUNT
decl_stmt|;
name|S3AFileSystem
name|landsatFS
init|=
operator|(
name|S3AFileSystem
operator|)
name|getLandsatGZ
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|S3ATestUtils
operator|.
name|MetricDiff
name|selectCount
init|=
operator|new
name|S3ATestUtils
operator|.
name|MetricDiff
argument_list|(
name|landsatFS
argument_list|,
name|Statistic
operator|.
name|OBJECT_SELECT_REQUESTS
argument_list|)
decl_stmt|;
name|run
argument_list|(
name|selectConf
argument_list|,
name|selectTool
argument_list|,
name|D
argument_list|,
name|v
argument_list|(
name|CSV_OUTPUT_QUOTE_CHARACTER
argument_list|,
literal|"'"
argument_list|)
argument_list|,
name|D
argument_list|,
name|v
argument_list|(
name|CSV_OUTPUT_QUOTE_FIELDS
argument_list|,
name|CSV_OUTPUT_QUOTE_FIELDS_AS_NEEEDED
argument_list|)
argument_list|,
literal|"select"
argument_list|,
name|o
argument_list|(
name|OPT_HEADER
argument_list|)
argument_list|,
name|CSV_HEADER_OPT_USE
argument_list|,
name|o
argument_list|(
name|OPT_COMPRESSION
argument_list|)
argument_list|,
name|COMPRESSION_OPT_GZIP
argument_list|,
name|o
argument_list|(
name|OPT_LIMIT
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lineCount
argument_list|)
argument_list|,
name|o
argument_list|(
name|OPT_OUTPUT
argument_list|)
argument_list|,
name|localFile
operator|.
name|toString
argument_list|()
argument_list|,
name|landsatSrc
argument_list|,
name|SELECT_SUNNY_ROWS_NO_LIMIT
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|localFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Result from select:\n{}"
argument_list|,
name|lines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lineCount
argument_list|,
name|lines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|selectCount
operator|.
name|assertDiffEquals
argument_list|(
literal|"select count"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|OperationDuration
name|duration
init|=
name|selectTool
operator|.
name|getSelectDuration
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Select duration was not measured"
argument_list|,
name|duration
operator|.
name|value
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getTempFilename ()
specifier|private
name|File
name|getTempFilename
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dest
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"landat"
argument_list|,
literal|".csv"
argument_list|)
decl_stmt|;
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|dest
return|;
block|}
annotation|@
name|Test
DECL|method|testLandsatToConsole ()
specifier|public
name|void
name|testLandsatToConsole
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"select part of the landsat to the console"
argument_list|)
expr_stmt|;
comment|// this verifies the input stream was actually closed
name|S3ATestUtils
operator|.
name|MetricDiff
name|readOps
init|=
operator|new
name|S3ATestUtils
operator|.
name|MetricDiff
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|Statistic
operator|.
name|STREAM_READ_OPERATIONS_INCOMPLETE
argument_list|)
decl_stmt|;
name|run
argument_list|(
name|selectConf
argument_list|,
name|selectTool
argument_list|,
name|D
argument_list|,
name|v
argument_list|(
name|CSV_OUTPUT_QUOTE_CHARACTER
argument_list|,
literal|"'"
argument_list|)
argument_list|,
name|D
argument_list|,
name|v
argument_list|(
name|CSV_OUTPUT_QUOTE_FIELDS
argument_list|,
name|CSV_OUTPUT_QUOTE_FIELDS_ALWAYS
argument_list|)
argument_list|,
literal|"select"
argument_list|,
name|o
argument_list|(
name|OPT_HEADER
argument_list|)
argument_list|,
name|CSV_HEADER_OPT_USE
argument_list|,
name|o
argument_list|(
name|OPT_COMPRESSION
argument_list|)
argument_list|,
name|COMPRESSION_OPT_GZIP
argument_list|,
name|o
argument_list|(
name|OPT_LIMIT
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|LINE_COUNT
argument_list|)
argument_list|,
name|landsatSrc
argument_list|,
name|SELECT_SUNNY_ROWS_NO_LIMIT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lines read and printed to console"
argument_list|,
name|LINE_COUNT
argument_list|,
name|selectTool
operator|.
name|getLinesRead
argument_list|()
argument_list|)
expr_stmt|;
name|readOps
operator|.
name|assertDiffEquals
argument_list|(
literal|"Read operations are still considered active"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelectNothing ()
specifier|public
name|void
name|testSelectNothing
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"an empty select is not an error"
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|selectConf
argument_list|,
name|selectTool
argument_list|,
literal|"select"
argument_list|,
name|o
argument_list|(
name|OPT_HEADER
argument_list|)
argument_list|,
name|CSV_HEADER_OPT_USE
argument_list|,
name|o
argument_list|(
name|OPT_COMPRESSION
argument_list|)
argument_list|,
name|COMPRESSION_OPT_GZIP
argument_list|,
name|o
argument_list|(
name|OPT_INPUTFORMAT
argument_list|)
argument_list|,
literal|"csv"
argument_list|,
name|o
argument_list|(
name|OPT_OUTPUTFORMAT
argument_list|)
argument_list|,
literal|"csv"
argument_list|,
name|o
argument_list|(
name|OPT_EXPECTED
argument_list|)
argument_list|,
literal|"0"
argument_list|,
name|o
argument_list|(
name|OPT_LIMIT
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|LINE_COUNT
argument_list|)
argument_list|,
name|landsatSrc
argument_list|,
name|SELECT_NOTHING
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lines read and printed to console"
argument_list|,
literal|0
argument_list|,
name|selectTool
operator|.
name|getLinesRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLandsatToRemoteFile ()
specifier|public
name|void
name|testLandsatToRemoteFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"select part of the landsat to a file"
argument_list|)
expr_stmt|;
name|Path
name|dest
init|=
name|path
argument_list|(
literal|"testLandsatToRemoteFile.csv"
argument_list|)
decl_stmt|;
name|run
argument_list|(
name|selectConf
argument_list|,
name|selectTool
argument_list|,
name|D
argument_list|,
name|v
argument_list|(
name|CSV_OUTPUT_QUOTE_CHARACTER
argument_list|,
literal|"'"
argument_list|)
argument_list|,
name|D
argument_list|,
name|v
argument_list|(
name|CSV_OUTPUT_QUOTE_FIELDS
argument_list|,
name|CSV_OUTPUT_QUOTE_FIELDS_ALWAYS
argument_list|)
argument_list|,
literal|"select"
argument_list|,
name|o
argument_list|(
name|OPT_HEADER
argument_list|)
argument_list|,
name|CSV_HEADER_OPT_USE
argument_list|,
name|o
argument_list|(
name|OPT_COMPRESSION
argument_list|)
argument_list|,
name|COMPRESSION_OPT_GZIP
argument_list|,
name|o
argument_list|(
name|OPT_LIMIT
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|LINE_COUNT
argument_list|)
argument_list|,
name|o
argument_list|(
name|OPT_OUTPUT
argument_list|)
argument_list|,
name|dest
operator|.
name|toString
argument_list|()
argument_list|,
name|landsatSrc
argument_list|,
name|SELECT_SUNNY_ROWS_NO_LIMIT
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch between bytes selected and file len in "
operator|+
name|status
argument_list|,
name|selectTool
operator|.
name|getBytesRead
argument_list|()
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertIsFile
argument_list|(
name|dest
argument_list|)
expr_stmt|;
comment|// now select on that
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|SelectTool
name|tool2
init|=
operator|new
name|SelectTool
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|run
argument_list|(
name|conf
argument_list|,
name|tool2
argument_list|,
literal|"select"
argument_list|,
name|o
argument_list|(
name|OPT_HEADER
argument_list|)
argument_list|,
name|CSV_HEADER_OPT_NONE
argument_list|,
name|dest
operator|.
name|toString
argument_list|()
argument_list|,
name|SELECT_EVERYTHING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUsage ()
specifier|public
name|void
name|testUsage
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|EXIT_USAGE
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|TOO_FEW_ARGUMENTS
argument_list|,
name|selectTool
argument_list|,
literal|"select"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRejectionOfNonS3FS ()
specifier|public
name|void
name|testRejectionOfNonS3FS
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|dest
init|=
name|getTempFilename
argument_list|()
decl_stmt|;
name|runToFailure
argument_list|(
name|EXIT_SERVICE_UNAVAILABLE
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|WRONG_FILESYSTEM
argument_list|,
name|selectTool
argument_list|,
literal|"select"
argument_list|,
name|dest
operator|.
name|toString
argument_list|()
argument_list|,
name|SELECT_EVERYTHING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailMissingFile ()
specifier|public
name|void
name|testFailMissingFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|dest
init|=
name|path
argument_list|(
literal|"testFailMissingFile.csv"
argument_list|)
decl_stmt|;
name|runToFailure
argument_list|(
name|EXIT_NOT_FOUND
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
literal|""
argument_list|,
name|selectTool
argument_list|,
literal|"select"
argument_list|,
name|dest
operator|.
name|toString
argument_list|()
argument_list|,
name|SELECT_EVERYTHING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testS3SelectDisabled ()
specifier|public
name|void
name|testS3SelectDisabled
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FS_S3A_SELECT_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runToFailure
argument_list|(
name|EXIT_SERVICE_UNAVAILABLE
argument_list|,
name|conf
argument_list|,
name|SELECT_IS_DISABLED
argument_list|,
name|selectTool
argument_list|,
literal|"select"
argument_list|,
name|o
argument_list|(
name|OPT_HEADER
argument_list|)
argument_list|,
name|CSV_HEADER_OPT_USE
argument_list|,
name|o
argument_list|(
name|OPT_COMPRESSION
argument_list|)
argument_list|,
name|COMPRESSION_OPT_GZIP
argument_list|,
name|o
argument_list|(
name|OPT_LIMIT
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|LINE_COUNT
argument_list|)
argument_list|,
name|landsatSrc
argument_list|,
name|SELECT_SUNNY_ROWS_NO_LIMIT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelectBadLimit ()
specifier|public
name|void
name|testSelectBadLimit
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|EXIT_USAGE
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
literal|""
argument_list|,
name|selectTool
argument_list|,
literal|"select"
argument_list|,
name|o
argument_list|(
name|OPT_HEADER
argument_list|)
argument_list|,
name|CSV_HEADER_OPT_USE
argument_list|,
name|o
argument_list|(
name|OPT_COMPRESSION
argument_list|)
argument_list|,
name|COMPRESSION_OPT_GZIP
argument_list|,
name|o
argument_list|(
name|OPT_LIMIT
argument_list|)
argument_list|,
literal|"-1"
argument_list|,
name|landsatSrc
argument_list|,
name|SELECT_NOTHING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelectBadInputFormat ()
specifier|public
name|void
name|testSelectBadInputFormat
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|EXIT_COMMAND_ARGUMENT_ERROR
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
literal|""
argument_list|,
name|selectTool
argument_list|,
literal|"select"
argument_list|,
name|o
argument_list|(
name|OPT_HEADER
argument_list|)
argument_list|,
name|CSV_HEADER_OPT_USE
argument_list|,
name|o
argument_list|(
name|OPT_INPUTFORMAT
argument_list|)
argument_list|,
literal|"pptx"
argument_list|,
name|o
argument_list|(
name|OPT_COMPRESSION
argument_list|)
argument_list|,
name|COMPRESSION_OPT_GZIP
argument_list|,
name|landsatSrc
argument_list|,
name|SELECT_NOTHING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelectBadOutputFormat ()
specifier|public
name|void
name|testSelectBadOutputFormat
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|EXIT_COMMAND_ARGUMENT_ERROR
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
literal|""
argument_list|,
name|selectTool
argument_list|,
literal|"select"
argument_list|,
name|o
argument_list|(
name|OPT_HEADER
argument_list|)
argument_list|,
name|CSV_HEADER_OPT_USE
argument_list|,
name|o
argument_list|(
name|OPT_OUTPUTFORMAT
argument_list|)
argument_list|,
literal|"pptx"
argument_list|,
name|o
argument_list|(
name|OPT_COMPRESSION
argument_list|)
argument_list|,
name|COMPRESSION_OPT_GZIP
argument_list|,
name|landsatSrc
argument_list|,
name|SELECT_NOTHING
argument_list|)
expr_stmt|;
block|}
comment|/**    * Take an option and add the "-" prefix.    * @param in input option    * @return value for the tool args list.    */
DECL|method|o (String in)
specifier|private
specifier|static
name|String
name|o
parameter_list|(
name|String
name|in
parameter_list|)
block|{
return|return
literal|"-"
operator|+
name|in
return|;
block|}
comment|/**    * Create the key=value bit of the -D key=value pair.    * @param key key to set    * @param value value to use    * @return a string for the tool args list.    */
DECL|method|v (String key, String value)
specifier|private
specifier|static
name|String
name|v
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|key
argument_list|)
operator|+
literal|"="
operator|+
name|checkNotNull
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

