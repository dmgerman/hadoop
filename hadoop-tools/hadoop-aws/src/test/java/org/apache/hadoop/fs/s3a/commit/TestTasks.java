begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.commit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test Tasks class.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestTasks
specifier|public
class|class
name|TestTasks
extends|extends
name|HadoopTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestTasks
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ITEM_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|ITEM_COUNT
init|=
literal|16
decl_stmt|;
DECL|field|FAILPOINT
specifier|private
specifier|static
specifier|final
name|int
name|FAILPOINT
init|=
literal|8
decl_stmt|;
DECL|field|numThreads
specifier|private
specifier|final
name|int
name|numThreads
decl_stmt|;
comment|/**    * Thread pool for task execution.    */
DECL|field|threadPool
specifier|private
name|ExecutorService
name|threadPool
decl_stmt|;
DECL|field|failingTask
specifier|private
specifier|final
name|CounterTask
name|failingTask
init|=
operator|new
name|CounterTask
argument_list|(
literal|"failing committer"
argument_list|,
name|FAILPOINT
argument_list|,
name|Item
operator|::
name|commit
argument_list|)
decl_stmt|;
DECL|field|failures
specifier|private
specifier|final
name|FailureCounter
name|failures
init|=
operator|new
name|FailureCounter
argument_list|(
literal|"failures"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|reverter
specifier|private
specifier|final
name|CounterTask
name|reverter
init|=
operator|new
name|CounterTask
argument_list|(
literal|"reverter"
argument_list|,
literal|0
argument_list|,
name|Item
operator|::
name|revert
argument_list|)
decl_stmt|;
DECL|field|aborter
specifier|private
specifier|final
name|CounterTask
name|aborter
init|=
operator|new
name|CounterTask
argument_list|(
literal|"aborter"
argument_list|,
literal|0
argument_list|,
name|Item
operator|::
name|abort
argument_list|)
decl_stmt|;
comment|/**    * Test array for parameterized test runs: how many threads and    * to use. Threading makes some of the assertions brittle; there are    * more checks on single thread than parallel ops.    * @return a list of parameter tuples.    */
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|params ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|0
block|}
block|,
block|{
literal|1
block|}
block|,
block|{
literal|3
block|}
block|,
block|{
literal|8
block|}
block|,
block|{
literal|16
block|}
block|,     }
argument_list|)
return|;
block|}
DECL|field|items
specifier|private
name|List
argument_list|<
name|Item
argument_list|>
name|items
decl_stmt|;
comment|/**    * Construct the parameterized test.    * @param numThreads number of threads    */
DECL|method|TestTasks (int numThreads)
specifier|public
name|TestTasks
parameter_list|(
name|int
name|numThreads
parameter_list|)
block|{
name|this
operator|.
name|numThreads
operator|=
name|numThreads
expr_stmt|;
block|}
comment|/**    * In a parallel test run there is more than one thread doing the execution.    * @return true if the threadpool size is>1    */
DECL|method|isParallel ()
specifier|public
name|boolean
name|isParallel
parameter_list|()
block|{
return|return
name|numThreads
operator|>
literal|1
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|items
operator|=
name|IntStream
operator|.
name|rangeClosed
argument_list|(
literal|1
argument_list|,
name|ITEM_COUNT
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
operator|new
name|Item
argument_list|(
name|i
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"With %d threads"
argument_list|,
name|numThreads
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|numThreads
operator|>
literal|0
condition|)
block|{
name|threadPool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
name|getMethodName
argument_list|()
operator|+
literal|"-pool-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|threadPool
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadPool
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * create the builder.    * @return pre-inited builder    */
DECL|method|builder ()
specifier|private
name|Tasks
operator|.
name|Builder
argument_list|<
name|Item
argument_list|>
name|builder
parameter_list|()
block|{
return|return
name|Tasks
operator|.
name|foreach
argument_list|(
name|items
argument_list|)
operator|.
name|executeWith
argument_list|(
name|threadPool
argument_list|)
return|;
block|}
DECL|method|assertRun (Tasks.Builder<Item> builder, CounterTask task)
specifier|private
name|void
name|assertRun
parameter_list|(
name|Tasks
operator|.
name|Builder
argument_list|<
name|Item
argument_list|>
name|builder
parameter_list|,
name|CounterTask
name|task
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|b
init|=
name|builder
operator|.
name|run
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Run of "
operator|+
name|task
operator|+
literal|" failed"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFailed (Tasks.Builder<Item> builder, CounterTask task)
specifier|private
name|void
name|assertFailed
parameter_list|(
name|Tasks
operator|.
name|Builder
argument_list|<
name|Item
argument_list|>
name|builder
parameter_list|,
name|CounterTask
name|task
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|b
init|=
name|builder
operator|.
name|run
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Run of "
operator|+
name|task
operator|+
literal|" unexpectedly succeeded"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|itemsToString ()
specifier|private
name|String
name|itemsToString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|items
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Item
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Test
DECL|method|testSimpleInvocation ()
specifier|public
name|void
name|testSimpleInvocation
parameter_list|()
throws|throws
name|Throwable
block|{
name|CounterTask
name|t
init|=
operator|new
name|CounterTask
argument_list|(
literal|"simple"
argument_list|,
literal|0
argument_list|,
name|Item
operator|::
name|commit
argument_list|)
decl_stmt|;
name|assertRun
argument_list|(
name|builder
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|assertInvoked
argument_list|(
literal|""
argument_list|,
name|ITEM_COUNT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailNoStoppingSuppressed ()
specifier|public
name|void
name|testFailNoStoppingSuppressed
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertFailed
argument_list|(
name|builder
argument_list|()
operator|.
name|suppressExceptions
argument_list|()
argument_list|,
name|failingTask
argument_list|)
expr_stmt|;
name|failingTask
operator|.
name|assertInvoked
argument_list|(
literal|"Continued through operations"
argument_list|,
name|ITEM_COUNT
argument_list|)
expr_stmt|;
name|items
operator|.
name|forEach
argument_list|(
name|Item
operator|::
name|assertCommittedOrFailed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailFastSuppressed ()
specifier|public
name|void
name|testFailFastSuppressed
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertFailed
argument_list|(
name|builder
argument_list|()
operator|.
name|suppressExceptions
argument_list|()
operator|.
name|stopOnFailure
argument_list|()
argument_list|,
name|failingTask
argument_list|)
expr_stmt|;
if|if
condition|(
name|isParallel
argument_list|()
condition|)
block|{
name|failingTask
operator|.
name|assertInvokedAtLeast
argument_list|(
literal|"stop fast"
argument_list|,
name|FAILPOINT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failingTask
operator|.
name|assertInvoked
argument_list|(
literal|"stop fast"
argument_list|,
name|FAILPOINT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFailedCallAbortSuppressed ()
specifier|public
name|void
name|testFailedCallAbortSuppressed
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertFailed
argument_list|(
name|builder
argument_list|()
operator|.
name|stopOnFailure
argument_list|()
operator|.
name|suppressExceptions
argument_list|()
operator|.
name|abortWith
argument_list|(
name|aborter
argument_list|)
argument_list|,
name|failingTask
argument_list|)
expr_stmt|;
name|failingTask
operator|.
name|assertInvokedAtLeast
argument_list|(
literal|"success"
argument_list|,
name|FAILPOINT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isParallel
argument_list|()
condition|)
block|{
name|aborter
operator|.
name|assertInvokedAtLeast
argument_list|(
literal|"abort"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// all uncommitted items were aborted
name|items
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|i
lambda|->
operator|!
name|i
operator|.
name|committed
argument_list|)
operator|.
name|map
argument_list|(
name|Item
operator|::
name|assertAborted
argument_list|)
expr_stmt|;
name|items
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|.
name|committed
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|assertFalse
argument_list|(
name|i
operator|.
name|toString
argument_list|()
argument_list|,
name|i
operator|.
name|aborted
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFailedCalledWhenNotStoppingSuppressed ()
specifier|public
name|void
name|testFailedCalledWhenNotStoppingSuppressed
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertFailed
argument_list|(
name|builder
argument_list|()
operator|.
name|suppressExceptions
argument_list|()
operator|.
name|onFailure
argument_list|(
name|failures
argument_list|)
argument_list|,
name|failingTask
argument_list|)
expr_stmt|;
name|failingTask
operator|.
name|assertInvokedAtLeast
argument_list|(
literal|"success"
argument_list|,
name|FAILPOINT
argument_list|)
expr_stmt|;
comment|// only one failure was triggered
name|failures
operator|.
name|assertInvoked
argument_list|(
literal|"failure event"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailFastCallRevertSuppressed ()
specifier|public
name|void
name|testFailFastCallRevertSuppressed
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertFailed
argument_list|(
name|builder
argument_list|()
operator|.
name|stopOnFailure
argument_list|()
operator|.
name|revertWith
argument_list|(
name|reverter
argument_list|)
operator|.
name|abortWith
argument_list|(
name|aborter
argument_list|)
operator|.
name|suppressExceptions
argument_list|()
operator|.
name|onFailure
argument_list|(
name|failures
argument_list|)
argument_list|,
name|failingTask
argument_list|)
expr_stmt|;
name|failingTask
operator|.
name|assertInvokedAtLeast
argument_list|(
literal|"success"
argument_list|,
name|FAILPOINT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isParallel
argument_list|()
condition|)
block|{
name|aborter
operator|.
name|assertInvokedAtLeast
argument_list|(
literal|"abort"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// all uncommitted items were aborted
name|items
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|i
lambda|->
operator|!
name|i
operator|.
name|committed
argument_list|)
operator|.
name|filter
argument_list|(
name|i
lambda|->
operator|!
name|i
operator|.
name|failed
argument_list|)
operator|.
name|forEach
argument_list|(
name|Item
operator|::
name|assertAborted
argument_list|)
expr_stmt|;
block|}
comment|// all committed were reverted
name|items
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|.
name|committed
operator|&&
operator|!
name|i
operator|.
name|failed
argument_list|)
operator|.
name|forEach
argument_list|(
name|Item
operator|::
name|assertReverted
argument_list|)
expr_stmt|;
comment|// all reverted items are committed
name|items
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|.
name|reverted
argument_list|)
operator|.
name|forEach
argument_list|(
name|Item
operator|::
name|assertCommitted
argument_list|)
expr_stmt|;
comment|// only one failure was triggered
name|failures
operator|.
name|assertInvoked
argument_list|(
literal|"failure event"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailSlowCallRevertSuppressed ()
specifier|public
name|void
name|testFailSlowCallRevertSuppressed
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertFailed
argument_list|(
name|builder
argument_list|()
operator|.
name|suppressExceptions
argument_list|()
operator|.
name|revertWith
argument_list|(
name|reverter
argument_list|)
operator|.
name|onFailure
argument_list|(
name|failures
argument_list|)
argument_list|,
name|failingTask
argument_list|)
expr_stmt|;
name|failingTask
operator|.
name|assertInvokedAtLeast
argument_list|(
literal|"success"
argument_list|,
name|FAILPOINT
argument_list|)
expr_stmt|;
comment|// all committed were reverted
comment|// identify which task failed from the set
name|int
name|failing
init|=
name|failures
operator|.
name|getItem
argument_list|()
operator|.
name|id
decl_stmt|;
name|items
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|.
name|id
operator|!=
name|failing
argument_list|)
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|.
name|committed
argument_list|)
operator|.
name|forEach
argument_list|(
name|Item
operator|::
name|assertReverted
argument_list|)
expr_stmt|;
comment|// all reverted items are committed
name|items
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|.
name|reverted
argument_list|)
operator|.
name|forEach
argument_list|(
name|Item
operator|::
name|assertCommitted
argument_list|)
expr_stmt|;
comment|// only one failure was triggered
name|failures
operator|.
name|assertInvoked
argument_list|(
literal|"failure event"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailFastExceptions ()
specifier|public
name|void
name|testFailFastExceptions
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|stopOnFailure
argument_list|()
operator|.
name|run
argument_list|(
name|failingTask
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isParallel
argument_list|()
condition|)
block|{
name|failingTask
operator|.
name|assertInvokedAtLeast
argument_list|(
literal|"stop fast"
argument_list|,
name|FAILPOINT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failingTask
operator|.
name|assertInvoked
argument_list|(
literal|"stop fast"
argument_list|,
name|FAILPOINT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFailSlowExceptions ()
specifier|public
name|void
name|testFailSlowExceptions
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|run
argument_list|(
name|failingTask
argument_list|)
argument_list|)
expr_stmt|;
name|failingTask
operator|.
name|assertInvoked
argument_list|(
literal|"continued through operations"
argument_list|,
name|ITEM_COUNT
argument_list|)
expr_stmt|;
name|items
operator|.
name|forEach
argument_list|(
name|Item
operator|::
name|assertCommittedOrFailed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailFastExceptionsWithAbortFailure ()
specifier|public
name|void
name|testFailFastExceptionsWithAbortFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|CounterTask
name|failFirst
init|=
operator|new
name|CounterTask
argument_list|(
literal|"task"
argument_list|,
literal|1
argument_list|,
name|Item
operator|::
name|commit
argument_list|)
decl_stmt|;
name|CounterTask
name|a
init|=
operator|new
name|CounterTask
argument_list|(
literal|"aborter"
argument_list|,
literal|1
argument_list|,
name|Item
operator|::
name|abort
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|stopOnFailure
argument_list|()
operator|.
name|abortWith
argument_list|(
name|a
argument_list|)
operator|.
name|run
argument_list|(
name|failFirst
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isParallel
argument_list|()
condition|)
block|{
comment|// expect the other tasks to be aborted
name|a
operator|.
name|assertInvokedAtLeast
argument_list|(
literal|"abort"
argument_list|,
name|ITEM_COUNT
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFailFastExceptionsWithAbortFailureStopped ()
specifier|public
name|void
name|testFailFastExceptionsWithAbortFailureStopped
parameter_list|()
throws|throws
name|Throwable
block|{
name|CounterTask
name|failFirst
init|=
operator|new
name|CounterTask
argument_list|(
literal|"task"
argument_list|,
literal|1
argument_list|,
name|Item
operator|::
name|commit
argument_list|)
decl_stmt|;
name|CounterTask
name|a
init|=
operator|new
name|CounterTask
argument_list|(
literal|"aborter"
argument_list|,
literal|1
argument_list|,
name|Item
operator|::
name|abort
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|stopOnFailure
argument_list|()
operator|.
name|stopAbortsOnFailure
argument_list|()
operator|.
name|abortWith
argument_list|(
name|a
argument_list|)
operator|.
name|run
argument_list|(
name|failFirst
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isParallel
argument_list|()
condition|)
block|{
comment|// expect the other tasks to be aborted
name|a
operator|.
name|assertInvoked
argument_list|(
literal|"abort"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Fail the last one committed, all the rest will be reverted.    * The actual ID of the last task has to be picke dup from the    * failure callback, as in the pool it may be one of any.    */
annotation|@
name|Test
DECL|method|testRevertAllSuppressed ()
specifier|public
name|void
name|testRevertAllSuppressed
parameter_list|()
throws|throws
name|Throwable
block|{
name|CounterTask
name|failLast
init|=
operator|new
name|CounterTask
argument_list|(
literal|"task"
argument_list|,
name|ITEM_COUNT
argument_list|,
name|Item
operator|::
name|commit
argument_list|)
decl_stmt|;
name|assertFailed
argument_list|(
name|builder
argument_list|()
operator|.
name|suppressExceptions
argument_list|()
operator|.
name|stopOnFailure
argument_list|()
operator|.
name|revertWith
argument_list|(
name|reverter
argument_list|)
operator|.
name|abortWith
argument_list|(
name|aborter
argument_list|)
operator|.
name|onFailure
argument_list|(
name|failures
argument_list|)
argument_list|,
name|failLast
argument_list|)
expr_stmt|;
name|failLast
operator|.
name|assertInvoked
argument_list|(
literal|"success"
argument_list|,
name|ITEM_COUNT
argument_list|)
expr_stmt|;
name|int
name|abCount
init|=
name|aborter
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|int
name|revCount
init|=
name|reverter
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ITEM_COUNT
argument_list|,
literal|1
operator|+
name|abCount
operator|+
name|revCount
argument_list|)
expr_stmt|;
comment|// identify which task failed from the set
name|int
name|failing
init|=
name|failures
operator|.
name|getItem
argument_list|()
operator|.
name|id
decl_stmt|;
comment|// all committed were reverted
name|items
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|.
name|id
operator|!=
name|failing
argument_list|)
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|.
name|committed
argument_list|)
operator|.
name|forEach
argument_list|(
name|Item
operator|::
name|assertReverted
argument_list|)
expr_stmt|;
name|items
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|.
name|id
operator|!=
name|failing
argument_list|)
operator|.
name|filter
argument_list|(
name|i
lambda|->
operator|!
name|i
operator|.
name|committed
argument_list|)
operator|.
name|forEach
argument_list|(
name|Item
operator|::
name|assertAborted
argument_list|)
expr_stmt|;
comment|// all reverted items are committed
name|items
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|.
name|reverted
argument_list|)
operator|.
name|forEach
argument_list|(
name|Item
operator|::
name|assertCommitted
argument_list|)
expr_stmt|;
comment|// only one failure was triggered
name|failures
operator|.
name|assertInvoked
argument_list|(
literal|"failure event"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * The Item which tasks process.    */
DECL|class|Item
specifier|private
specifier|final
class|class
name|Item
block|{
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|text
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
DECL|field|committed
DECL|field|aborted
DECL|field|reverted
DECL|field|failed
specifier|private
specifier|volatile
name|boolean
name|committed
decl_stmt|,
name|aborted
decl_stmt|,
name|reverted
decl_stmt|,
name|failed
decl_stmt|;
DECL|method|Item (int item, String text)
specifier|private
name|Item
parameter_list|(
name|int
name|item
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|item
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
DECL|method|commit ()
name|boolean
name|commit
parameter_list|()
block|{
name|committed
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|abort ()
name|boolean
name|abort
parameter_list|()
block|{
name|aborted
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|revert ()
name|boolean
name|revert
parameter_list|()
block|{
name|reverted
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|fail ()
name|boolean
name|fail
parameter_list|()
block|{
name|failed
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|assertCommitted ()
specifier|public
name|Item
name|assertCommitted
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|toString
argument_list|()
operator|+
literal|" was not committed in\n"
operator|+
name|itemsToString
argument_list|()
argument_list|,
name|committed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|assertCommittedOrFailed ()
specifier|public
name|Item
name|assertCommittedOrFailed
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|toString
argument_list|()
operator|+
literal|" was not committed nor failed in\n"
operator|+
name|itemsToString
argument_list|()
argument_list|,
name|committed
operator|||
name|failed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|assertAborted ()
specifier|public
name|Item
name|assertAborted
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|toString
argument_list|()
operator|+
literal|" was not aborted in\n"
operator|+
name|itemsToString
argument_list|()
argument_list|,
name|aborted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|assertReverted ()
specifier|public
name|Item
name|assertReverted
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|toString
argument_list|()
operator|+
literal|" was not reverted in\n"
operator|+
name|itemsToString
argument_list|()
argument_list|,
name|reverted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Item{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"[%02d]"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", committed="
argument_list|)
operator|.
name|append
argument_list|(
name|committed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", aborted="
argument_list|)
operator|.
name|append
argument_list|(
name|aborted
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", reverted="
argument_list|)
operator|.
name|append
argument_list|(
name|reverted
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", failed="
argument_list|)
operator|.
name|append
argument_list|(
name|failed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", text="
argument_list|)
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Class which can count invocations and, if limit> 0, will raise    * an exception on the specific invocation of {@link #note(Object)}    * whose count == limit.    */
DECL|class|BaseCounter
specifier|private
class|class
name|BaseCounter
block|{
DECL|field|counter
specifier|private
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|limit
specifier|private
specifier|final
name|int
name|limit
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|item
specifier|private
name|Item
name|item
decl_stmt|;
DECL|field|action
specifier|private
specifier|final
name|Optional
argument_list|<
name|Function
argument_list|<
name|Item
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|action
decl_stmt|;
comment|/**      * Base counter, tracks items.      * @param name name for string/exception/logs.      * @param limit limit at which an exception is raised, 0 == never      * @param action optional action to invoke after the increment,      * before limit check      */
DECL|method|BaseCounter (String name, int limit, Function<Item, Boolean> action)
name|BaseCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|limit
parameter_list|,
name|Function
argument_list|<
name|Item
argument_list|,
name|Boolean
argument_list|>
name|action
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
comment|/**      * Apply the action to an item; log at info afterwards with both the      * before and after string values of the item.      * @param i item to process.      * @throws IOException failure in the action      */
DECL|method|process (Item i)
name|void
name|process
parameter_list|(
name|Item
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|item
operator|=
name|i
expr_stmt|;
name|int
name|count
init|=
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|==
name|count
condition|)
block|{
name|i
operator|.
name|fail
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: Failed {}"
argument_list|,
name|this
argument_list|,
name|i
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: Limit %d reached for %s"
argument_list|,
name|this
argument_list|,
name|limit
argument_list|,
name|i
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|before
init|=
name|i
operator|.
name|toString
argument_list|()
decl_stmt|;
name|action
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|apply
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: {} -> {}"
argument_list|,
name|this
argument_list|,
name|before
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|getCount ()
name|int
name|getCount
parameter_list|()
block|{
return|return
name|counter
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getItem ()
name|Item
name|getItem
parameter_list|()
block|{
return|return
name|item
return|;
block|}
DECL|method|assertInvoked (String text, int expected)
name|void
name|assertInvoked
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|text
argument_list|,
name|expected
argument_list|,
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInvokedAtLeast (String text, int expected)
name|void
name|assertInvokedAtLeast
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
name|int
name|actual
init|=
name|getCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|text
operator|+
literal|"-expected "
operator|+
name|expected
operator|+
literal|" invocations, but got "
operator|+
name|actual
operator|+
literal|" in "
operator|+
name|itemsToString
argument_list|()
argument_list|,
name|expected
operator|<=
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"BaseCounter{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name='"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", count="
argument_list|)
operator|.
name|append
argument_list|(
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", limit="
argument_list|)
operator|.
name|append
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", item="
argument_list|)
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|CounterTask
specifier|private
specifier|final
class|class
name|CounterTask
extends|extends
name|BaseCounter
implements|implements
name|Tasks
operator|.
name|Task
argument_list|<
name|Item
argument_list|,
name|IOException
argument_list|>
block|{
DECL|method|CounterTask (String name, int limit, Function<Item, Boolean> action)
specifier|private
name|CounterTask
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|limit
parameter_list|,
name|Function
argument_list|<
name|Item
argument_list|,
name|Boolean
argument_list|>
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|limit
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (Item item)
specifier|public
name|void
name|run
parameter_list|(
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FailureCounter
specifier|private
specifier|final
class|class
name|FailureCounter
extends|extends
name|BaseCounter
implements|implements
name|Tasks
operator|.
name|FailureTask
argument_list|<
name|Item
argument_list|,
name|IOException
argument_list|>
block|{
DECL|field|exception
specifier|private
name|Exception
name|exception
decl_stmt|;
DECL|method|FailureCounter (String name, int limit, Function<Item, Boolean> action)
specifier|private
name|FailureCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|limit
parameter_list|,
name|Function
argument_list|<
name|Item
argument_list|,
name|Boolean
argument_list|>
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|limit
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (Item item, Exception ex)
specifier|public
name|void
name|run
parameter_list|(
name|Item
name|item
parameter_list|,
name|Exception
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|this
operator|.
name|exception
operator|=
name|ex
expr_stmt|;
block|}
DECL|method|getException ()
specifier|private
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
block|}
block|}
end_class

end_unit

