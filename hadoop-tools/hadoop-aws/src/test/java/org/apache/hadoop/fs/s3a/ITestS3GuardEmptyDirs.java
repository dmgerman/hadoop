begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|NullMetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|touch
import|;
end_import

begin_comment
comment|/**  * Test logic around whether or not a directory is empty, with S3Guard enabled.  * The fact that S3AFileStatus has an isEmptyDirectory flag in it makes caching  * S3AFileStatus's really tricky, as the flag can change as a side effect of  * changes to other paths.  * After S3Guard is merged to trunk, we should try to remove the  * isEmptyDirectory flag from S3AFileStatus, or maintain it outside  * of the MetadataStore.  */
end_comment

begin_class
DECL|class|ITestS3GuardEmptyDirs
specifier|public
class|class
name|ITestS3GuardEmptyDirs
extends|extends
name|AbstractS3ATestBase
block|{
annotation|@
name|Test
DECL|method|testEmptyDirs ()
specifier|public
name|void
name|testEmptyDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|MetadataStore
name|configuredMs
init|=
name|fs
operator|.
name|getMetadataStore
argument_list|()
decl_stmt|;
name|Path
name|existingDir
init|=
name|path
argument_list|(
literal|"existing-dir"
argument_list|)
decl_stmt|;
name|Path
name|existingFile
init|=
name|path
argument_list|(
literal|"existing-dir/existing-file"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// 1. Simulate files already existing in the bucket before we started our
comment|// cluster.  Temporarily disable the MetadataStore so it doesn't witness
comment|// us creating these files.
name|fs
operator|.
name|setMetadataStore
argument_list|(
operator|new
name|NullMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|existingDir
argument_list|)
argument_list|)
expr_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|existingFile
argument_list|)
expr_stmt|;
comment|// 2. Simulate (from MetadataStore's perspective) starting our cluster and
comment|// creating a file in an existing directory.
name|fs
operator|.
name|setMetadataStore
argument_list|(
name|configuredMs
argument_list|)
expr_stmt|;
comment|// "start cluster"
name|Path
name|newFile
init|=
name|path
argument_list|(
literal|"existing-dir/new-file"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
name|S3AFileStatus
name|status
init|=
name|fs
operator|.
name|innerGetFileStatus
argument_list|(
name|existingDir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be empty dir"
argument_list|,
name|Tristate
operator|.
name|FALSE
argument_list|,
name|status
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3. Assert that removing the only file the MetadataStore witnessed
comment|// being created doesn't cause it to think the directory is now empty.
name|fs
operator|.
name|delete
argument_list|(
name|newFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|innerGetFileStatus
argument_list|(
name|existingDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be empty dir"
argument_list|,
name|Tristate
operator|.
name|FALSE
argument_list|,
name|status
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4. Assert that removing the final file, that existed "before"
comment|// MetadataStore started, *does* cause the directory to be marked empty.
name|fs
operator|.
name|delete
argument_list|(
name|existingFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|innerGetFileStatus
argument_list|(
name|existingDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be empty dir now"
argument_list|,
name|Tristate
operator|.
name|TRUE
argument_list|,
name|status
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|configuredMs
operator|.
name|forgetMetadata
argument_list|(
name|existingFile
argument_list|)
expr_stmt|;
name|configuredMs
operator|.
name|forgetMetadata
argument_list|(
name|existingDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

