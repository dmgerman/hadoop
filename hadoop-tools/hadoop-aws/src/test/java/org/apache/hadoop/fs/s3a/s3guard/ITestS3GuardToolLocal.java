begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Tristate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|MultipartTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|getLandsatCSVFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardTool
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardToolTestHelper
operator|.
name|exec
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test S3Guard related CLI commands against a LocalMetadataStore.  * Also responsible for testing the non s3guard-specific commands that, for  * now, live under the s3guard CLI command.  */
end_comment

begin_class
DECL|class|ITestS3GuardToolLocal
specifier|public
class|class
name|ITestS3GuardToolLocal
extends|extends
name|AbstractS3GuardToolTestBase
block|{
DECL|field|LOCAL_METADATA
specifier|private
specifier|static
specifier|final
name|String
name|LOCAL_METADATA
init|=
literal|"local://metadata"
decl_stmt|;
DECL|field|ABORT_FORCE_OPTIONS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ABORT_FORCE_OPTIONS
init|=
operator|new
name|String
index|[]
block|{
literal|"-abort"
block|,
literal|"-force"
block|,
literal|"-verbose"
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|MetadataStore
name|ms
init|=
name|getMetadataStore
argument_list|()
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Test only applies when a local store is used for S3Guard;"
operator|+
literal|"Store is "
operator|+
operator|(
name|ms
operator|==
literal|null
condition|?
literal|"none"
else|:
name|ms
operator|.
name|toString
argument_list|()
operator|)
argument_list|,
name|ms
operator|instanceof
name|LocalMetadataStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testImportCommand ()
specifier|public
name|void
name|testImportCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|MetadataStore
name|ms
init|=
name|getMetadataStore
argument_list|()
decl_stmt|;
name|Path
name|parent
init|=
name|path
argument_list|(
literal|"test-import"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|Path
name|emptyDir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"emptyDir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|emptyDir
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|child
init|=
name|String
operator|.
name|format
argument_list|(
literal|"file-%d"
argument_list|,
name|i
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|child
argument_list|)
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|S3GuardTool
operator|.
name|Import
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|Import
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|exec
argument_list|(
name|cmd
argument_list|,
literal|"import"
argument_list|,
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DirListingMetadata
name|children
init|=
name|ms
operator|.
name|listChildren
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of paths imported"
argument_list|,
literal|10
argument_list|,
name|children
operator|.
name|getListing
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 items: empty directory and a parent directory"
argument_list|,
literal|2
argument_list|,
name|ms
operator|.
name|listChildren
argument_list|(
name|parent
argument_list|)
operator|.
name|getListing
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// assertTrue(children.isAuthoritative());
block|}
annotation|@
name|Test
DECL|method|testImportCommandRepairsETagAndVersionId ()
specifier|public
name|void
name|testImportCommandRepairsETagAndVersionId
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|MetadataStore
name|ms
init|=
name|getMetadataStore
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"test-version-metadata"
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|S3AFileStatus
name|originalStatus
init|=
operator|(
name|S3AFileStatus
operator|)
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// put in bogus ETag and versionId
name|S3AFileStatus
name|bogusStatus
init|=
name|S3AFileStatus
operator|.
name|fromFileStatus
argument_list|(
name|originalStatus
argument_list|,
name|Tristate
operator|.
name|FALSE
argument_list|,
literal|"bogusETag"
argument_list|,
literal|"bogusVersionId"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|bogusStatus
argument_list|)
argument_list|)
expr_stmt|;
comment|// sanity check that bogus status is actually persisted
name|S3AFileStatus
name|retrievedBogusStatus
init|=
operator|(
name|S3AFileStatus
operator|)
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bogus ETag was not persisted"
argument_list|,
literal|"bogusETag"
argument_list|,
name|retrievedBogusStatus
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bogus versionId was not persisted"
argument_list|,
literal|"bogusVersionId"
argument_list|,
name|retrievedBogusStatus
operator|.
name|getVersionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// execute the import
name|S3GuardTool
operator|.
name|Import
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|Import
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|exec
argument_list|(
name|cmd
argument_list|,
literal|"import"
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure ETag and versionId were corrected
name|S3AFileStatus
name|updatedStatus
init|=
operator|(
name|S3AFileStatus
operator|)
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ETag was not corrected"
argument_list|,
name|originalStatus
operator|.
name|getETag
argument_list|()
argument_list|,
name|updatedStatus
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"VersionId was not corrected"
argument_list|,
name|originalStatus
operator|.
name|getVersionId
argument_list|()
argument_list|,
name|updatedStatus
operator|.
name|getVersionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDestroyBucketExistsButNoTable ()
specifier|public
name|void
name|testDestroyBucketExistsButNoTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|run
argument_list|(
name|Destroy
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
name|getLandsatCSVFile
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testImportNoFilesystem ()
specifier|public
name|void
name|testImportNoFilesystem
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|Import
name|importer
init|=
operator|new
name|S3GuardTool
operator|.
name|Import
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|importer
operator|.
name|setStore
argument_list|(
name|getMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|importer
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"import"
block|,
literal|"-meta"
block|,
name|LOCAL_METADATA
block|,
name|S3A_THIS_BUCKET_DOES_NOT_EXIST
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfoBucketAndRegionNoFS ()
specifier|public
name|void
name|testInfoBucketAndRegionNoFS
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|run
argument_list|(
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
literal|"-region"
argument_list|,
literal|"any-region"
argument_list|,
name|S3A_THIS_BUCKET_DOES_NOT_EXIST
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitNegativeRead ()
specifier|public
name|void
name|testInitNegativeRead
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|Init
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
literal|"-region"
argument_list|,
literal|"eu-west-1"
argument_list|,
name|READ_FLAG
argument_list|,
literal|"-10"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInit ()
specifier|public
name|void
name|testInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|run
argument_list|(
name|Init
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
literal|"-region"
argument_list|,
literal|"us-west-1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitTwice ()
specifier|public
name|void
name|testInitTwice
parameter_list|()
throws|throws
name|Throwable
block|{
name|run
argument_list|(
name|Init
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
literal|"-region"
argument_list|,
literal|"us-west-1"
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|Init
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
literal|"-region"
argument_list|,
literal|"us-west-1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLandsatBucketUnguarded ()
specifier|public
name|void
name|testLandsatBucketUnguarded
parameter_list|()
throws|throws
name|Throwable
block|{
name|run
argument_list|(
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"-"
operator|+
name|BucketInfo
operator|.
name|UNGUARDED_FLAG
argument_list|,
name|getLandsatCSVFile
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLandsatBucketRequireGuarded ()
specifier|public
name|void
name|testLandsatBucketRequireGuarded
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|E_BAD_STATE
argument_list|,
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"-"
operator|+
name|BucketInfo
operator|.
name|GUARDED_FLAG
argument_list|,
name|getLandsatCSVFile
argument_list|(
name|ITestS3GuardToolLocal
operator|.
name|this
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLandsatBucketRequireUnencrypted ()
specifier|public
name|void
name|testLandsatBucketRequireUnencrypted
parameter_list|()
throws|throws
name|Throwable
block|{
name|run
argument_list|(
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"-"
operator|+
name|BucketInfo
operator|.
name|ENCRYPTION_FLAG
argument_list|,
literal|"none"
argument_list|,
name|getLandsatCSVFile
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLandsatBucketRequireEncrypted ()
specifier|public
name|void
name|testLandsatBucketRequireEncrypted
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|E_BAD_STATE
argument_list|,
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"-"
operator|+
name|BucketInfo
operator|.
name|ENCRYPTION_FLAG
argument_list|,
literal|"AES256"
argument_list|,
name|getLandsatCSVFile
argument_list|(
name|ITestS3GuardToolLocal
operator|.
name|this
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStoreInfo ()
specifier|public
name|void
name|testStoreInfo
parameter_list|()
throws|throws
name|Throwable
block|{
name|S3GuardTool
operator|.
name|BucketInfo
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|BucketInfo
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setStore
argument_list|(
name|getMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|exec
argument_list|(
name|cmd
argument_list|,
name|cmd
operator|.
name|getName
argument_list|()
argument_list|,
literal|"-"
operator|+
name|S3GuardTool
operator|.
name|BucketInfo
operator|.
name|GUARDED_FLAG
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Exec output=\n{}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetCapacity ()
specifier|public
name|void
name|testSetCapacity
parameter_list|()
throws|throws
name|Throwable
block|{
name|S3GuardTool
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|SetCapacity
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setStore
argument_list|(
name|getMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|exec
argument_list|(
name|cmd
argument_list|,
name|cmd
operator|.
name|getName
argument_list|()
argument_list|,
literal|"-"
operator|+
name|READ_FLAG
argument_list|,
literal|"100"
argument_list|,
literal|"-"
operator|+
name|WRITE_FLAG
argument_list|,
literal|"100"
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Exec output=\n{}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
DECL|field|UPLOAD_PREFIX
specifier|private
specifier|final
specifier|static
name|String
name|UPLOAD_PREFIX
init|=
literal|"test-upload-prefix"
decl_stmt|;
DECL|field|UPLOAD_NAME
specifier|private
specifier|final
specifier|static
name|String
name|UPLOAD_NAME
init|=
literal|"test-upload"
decl_stmt|;
annotation|@
name|Test
DECL|method|testUploads ()
specifier|public
name|void
name|testUploads
parameter_list|()
throws|throws
name|Throwable
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
name|UPLOAD_PREFIX
operator|+
literal|"/"
operator|+
name|UPLOAD_NAME
argument_list|)
decl_stmt|;
name|describe
argument_list|(
literal|"Cleaning up any leftover uploads from previous runs."
argument_list|)
expr_stmt|;
comment|// 1. Make sure key doesn't already exist
name|clearAnyUploads
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// 2. Confirm no uploads are listed via API
name|assertNoUploadsAt
argument_list|(
name|fs
argument_list|,
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3. Confirm no uploads are listed via CLI
name|describe
argument_list|(
literal|"Confirming CLI lists nothing."
argument_list|)
expr_stmt|;
name|assertNumUploads
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 4. Create a upload part
name|describe
argument_list|(
literal|"Uploading single part."
argument_list|)
expr_stmt|;
name|createPartUpload
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|pathToKey
argument_list|(
name|path
argument_list|)
argument_list|,
literal|128
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// 5. Confirm it exists via API..
name|LambdaTestUtils
operator|.
name|eventually
argument_list|(
literal|5000
argument_list|,
comment|/* 5 seconds until failure */
literal|1000
argument_list|,
comment|/* one second retry interval */
parameter_list|()
lambda|->
block|{
name|assertEquals
argument_list|(
literal|"Should be one upload"
argument_list|,
literal|1
argument_list|,
name|countUploadsAt
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// 6. Confirm part exists via CLI, direct path and parent path
name|describe
argument_list|(
literal|"Confirming CLI lists one part"
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|eventually
argument_list|(
literal|5000
argument_list|,
literal|1000
argument_list|,
parameter_list|()
lambda|->
block|{
name|assertNumUploads
argument_list|(
name|path
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|eventually
argument_list|(
literal|5000
argument_list|,
literal|1000
argument_list|,
parameter_list|()
lambda|->
block|{
name|assertNumUploads
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// 7. Use CLI to delete part, assert it worked
name|describe
argument_list|(
literal|"Deleting part via CLI"
argument_list|)
expr_stmt|;
name|assertNumDeleted
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// 8. Confirm deletion via API
name|describe
argument_list|(
literal|"Confirming deletion via API"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be no uploads"
argument_list|,
literal|0
argument_list|,
name|countUploadsAt
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// 9. Confirm no uploads are listed via CLI
name|describe
argument_list|(
literal|"Confirming CLI lists nothing."
argument_list|)
expr_stmt|;
name|assertNumUploads
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Clean up on intermediate failure
name|clearAnyUploads
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUploadListByAge ()
specifier|public
name|void
name|testUploadListByAge
parameter_list|()
throws|throws
name|Throwable
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
name|UPLOAD_PREFIX
operator|+
literal|"/"
operator|+
name|UPLOAD_NAME
argument_list|)
decl_stmt|;
name|describe
argument_list|(
literal|"Cleaning up any leftover uploads from previous runs."
argument_list|)
expr_stmt|;
comment|// 1. Make sure key doesn't already exist
name|clearAnyUploads
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// 2. Create a upload part
name|describe
argument_list|(
literal|"Uploading single part."
argument_list|)
expr_stmt|;
name|createPartUpload
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|pathToKey
argument_list|(
name|path
argument_list|)
argument_list|,
literal|128
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// 3. Confirm it exists via API.. may want to wrap with
comment|// LambdaTestUtils.eventually() ?
name|LambdaTestUtils
operator|.
name|eventually
argument_list|(
literal|5000
argument_list|,
literal|1000
argument_list|,
parameter_list|()
lambda|->
block|{
name|assertEquals
argument_list|(
literal|"Should be one upload"
argument_list|,
literal|1
argument_list|,
name|countUploadsAt
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// 4. Confirm part does appear in listing with long age filter
name|describe
argument_list|(
literal|"Confirming CLI older age doesn't list"
argument_list|)
expr_stmt|;
name|assertNumUploadsAge
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|600
argument_list|)
expr_stmt|;
comment|// 5. Confirm part does not get deleted with long age filter
name|describe
argument_list|(
literal|"Confirming CLI older age doesn't delete"
argument_list|)
expr_stmt|;
name|uploadCommandAssertCount
argument_list|(
name|fs
argument_list|,
name|ABORT_FORCE_OPTIONS
argument_list|,
name|path
argument_list|,
literal|0
argument_list|,
literal|600
argument_list|)
expr_stmt|;
comment|// 6. Wait a second and then assert the part is in listing of things at
comment|// least a second old
name|describe
argument_list|(
literal|"Sleeping 1 second then confirming upload still there"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|eventually
argument_list|(
literal|5000
argument_list|,
literal|1000
argument_list|,
parameter_list|()
lambda|->
block|{
name|assertNumUploadsAge
argument_list|(
name|path
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// 7. Assert deletion works when age filter matches
name|describe
argument_list|(
literal|"Doing aged deletion"
argument_list|)
expr_stmt|;
name|uploadCommandAssertCount
argument_list|(
name|fs
argument_list|,
name|ABORT_FORCE_OPTIONS
argument_list|,
name|path
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|describe
argument_list|(
literal|"Confirming age deletion happened"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be no uploads"
argument_list|,
literal|0
argument_list|,
name|countUploadsAt
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Clean up on intermediate failure
name|clearAnyUploads
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUploadNegativeExpect ()
specifier|public
name|void
name|testUploadNegativeExpect
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|E_BAD_STATE
argument_list|,
name|Uploads
operator|.
name|NAME
argument_list|,
literal|"-expect"
argument_list|,
literal|"1"
argument_list|,
name|path
argument_list|(
literal|"/we/are/almost/postive/this/doesnt/exist/fhfsadfoijew"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNumUploads (Path path, int numUploads)
specifier|private
name|void
name|assertNumUploads
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|numUploads
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNumUploadsAge
argument_list|(
name|path
argument_list|,
name|numUploads
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNumUploadsAge (Path path, int numUploads, int ageSeconds)
specifier|private
name|void
name|assertNumUploadsAge
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|numUploads
parameter_list|,
name|int
name|ageSeconds
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ageSeconds
operator|>
literal|0
condition|)
block|{
name|run
argument_list|(
name|Uploads
operator|.
name|NAME
argument_list|,
literal|"-expect"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|numUploads
argument_list|)
argument_list|,
literal|"-seconds"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|ageSeconds
argument_list|)
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|run
argument_list|(
name|Uploads
operator|.
name|NAME
argument_list|,
literal|"-expect"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|numUploads
argument_list|)
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertNumDeleted (S3AFileSystem fs, Path path, int numDeleted)
specifier|private
name|void
name|assertNumDeleted
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|numDeleted
parameter_list|)
throws|throws
name|Exception
block|{
name|uploadCommandAssertCount
argument_list|(
name|fs
argument_list|,
name|ABORT_FORCE_OPTIONS
argument_list|,
name|path
argument_list|,
name|numDeleted
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run uploads cli command and assert the reported count (listed or    * deleted) matches.    * @param fs  S3AFileSystem    * @param options main command options    * @param path path of part(s)    * @param numUploads expected number of listed/deleted parts    * @param ageSeconds optional seconds of age to specify to CLI, or zero to    *                   search all parts    * @throws Exception on failure    */
DECL|method|uploadCommandAssertCount (S3AFileSystem fs, String options[], Path path, int numUploads, int ageSeconds)
specifier|private
name|void
name|uploadCommandAssertCount
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|String
name|options
index|[]
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|numUploads
parameter_list|,
name|int
name|ageSeconds
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|allOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|output
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|S3GuardTool
operator|.
name|Uploads
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|Uploads
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|allOptions
operator|.
name|add
argument_list|(
name|cmd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|allOptions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ageSeconds
operator|>
literal|0
condition|)
block|{
name|allOptions
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|Uploads
operator|.
name|SECONDS_FLAG
argument_list|)
expr_stmt|;
name|allOptions
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ageSeconds
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|allOptions
operator|.
name|add
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exec
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
name|cmd
argument_list|,
name|buf
argument_list|,
name|allOptions
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|fields
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|==
literal|4
operator|&&
name|fields
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|Uploads
operator|.
name|TOTAL
argument_list|)
condition|)
block|{
name|int
name|parsedUploads
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Matched CLI output: {} {} {} {}"
argument_list|,
name|fields
index|[
literal|0
index|]
argument_list|,
name|fields
index|[
literal|1
index|]
argument_list|,
name|fields
index|[
literal|2
index|]
argument_list|,
name|fields
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of uploads"
argument_list|,
name|numUploads
argument_list|,
name|parsedUploads
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not matched: {}"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|output
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
name|fail
argument_list|(
literal|"Command output did not match: \n"
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

