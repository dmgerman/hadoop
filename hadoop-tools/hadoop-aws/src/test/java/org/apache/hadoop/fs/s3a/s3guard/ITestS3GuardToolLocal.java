begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardTool
operator|.
name|Diff
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3GuardTool
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test S3Guard related CLI commands against a LocalMetadataStore.  */
end_comment

begin_class
DECL|class|ITestS3GuardToolLocal
specifier|public
class|class
name|ITestS3GuardToolLocal
extends|extends
name|AbstractS3GuardToolTestBase
block|{
DECL|field|LOCAL_METADATA
specifier|private
specifier|static
specifier|final
name|String
name|LOCAL_METADATA
init|=
literal|"local://metadata"
decl_stmt|;
annotation|@
name|Override
DECL|method|newMetadataStore ()
specifier|protected
name|MetadataStore
name|newMetadataStore
parameter_list|()
block|{
return|return
operator|new
name|LocalMetadataStore
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testImportCommand ()
specifier|public
name|void
name|testImportCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|MetadataStore
name|ms
init|=
name|getMetadataStore
argument_list|()
decl_stmt|;
name|Path
name|parent
init|=
name|path
argument_list|(
literal|"test-import"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|Path
name|emptyDir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"emptyDir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|emptyDir
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|child
init|=
name|String
operator|.
name|format
argument_list|(
literal|"file-%d"
argument_list|,
name|i
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|child
argument_list|)
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|S3GuardTool
operator|.
name|Import
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|Import
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|exec
argument_list|(
name|cmd
argument_list|,
literal|"import"
argument_list|,
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DirListingMetadata
name|children
init|=
name|ms
operator|.
name|listChildren
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of paths imported"
argument_list|,
literal|10
argument_list|,
name|children
operator|.
name|getListing
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 items: empty directory and a parent directory"
argument_list|,
literal|2
argument_list|,
name|ms
operator|.
name|listChildren
argument_list|(
name|parent
argument_list|)
operator|.
name|getListing
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// assertTrue(children.isAuthoritative());
block|}
annotation|@
name|Test
DECL|method|testDiffCommand ()
specifier|public
name|void
name|testDiffCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|MetadataStore
name|ms
init|=
name|getMetadataStore
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|filesOnS3
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// files on S3.
name|Set
argument_list|<
name|Path
argument_list|>
name|filesOnMS
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// files on metadata store.
name|Path
name|testPath
init|=
name|path
argument_list|(
literal|"test-diff"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|msOnlyPath
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"ms_only"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|msOnlyPath
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|filesOnMS
operator|.
name|add
argument_list|(
name|msOnlyPath
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|msOnlyPath
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"file-%d"
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|filesOnMS
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|Path
name|s3OnlyPath
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"s3_only"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|s3OnlyPath
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|filesOnS3
operator|.
name|add
argument_list|(
name|s3OnlyPath
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|s3OnlyPath
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"file-%d"
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|filesOnS3
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Diff
name|cmd
init|=
operator|new
name|Diff
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|exec
argument_list|(
name|cmd
argument_list|,
name|buf
argument_list|,
literal|"diff"
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
name|testPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|actualOnS3
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|actualOnMS
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|duplicates
init|=
literal|false
decl_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|fields
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|line
operator|+
literal|"] does not have enough fields"
argument_list|,
literal|4
argument_list|,
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|where
init|=
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|fields
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|Diff
operator|.
name|S3_PREFIX
operator|.
name|equals
argument_list|(
name|where
argument_list|)
condition|)
block|{
name|duplicates
operator|=
name|duplicates
operator|||
name|actualOnS3
operator|.
name|contains
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|actualOnS3
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Diff
operator|.
name|MS_PREFIX
operator|.
name|equals
argument_list|(
name|where
argument_list|)
condition|)
block|{
name|duplicates
operator|=
name|duplicates
operator|||
name|actualOnMS
operator|.
name|contains
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|actualOnMS
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unknown prefix: "
operator|+
name|where
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|actualOut
init|=
name|buf
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched metadata store outputs: "
operator|+
name|actualOut
argument_list|,
name|filesOnMS
argument_list|,
name|actualOnMS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched s3 outputs: "
operator|+
name|actualOut
argument_list|,
name|filesOnS3
argument_list|,
name|actualOnS3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Diff contained duplicates"
argument_list|,
name|duplicates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDestroyBucketExistsButNoTable ()
specifier|public
name|void
name|testDestroyBucketExistsButNoTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|run
argument_list|(
name|Destroy
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
name|getLandsatCSVFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testImportNoFilesystem ()
specifier|public
name|void
name|testImportNoFilesystem
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|Import
name|importer
init|=
operator|new
name|S3GuardTool
operator|.
name|Import
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|importer
operator|.
name|setStore
argument_list|(
name|getMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|importer
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"import"
block|,
literal|"-meta"
block|,
name|LOCAL_METADATA
block|,
name|S3A_THIS_BUCKET_DOES_NOT_EXIST
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfoBucketAndRegionNoFS ()
specifier|public
name|void
name|testInfoBucketAndRegionNoFS
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|run
argument_list|(
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
literal|"-region"
argument_list|,
literal|"any-region"
argument_list|,
name|S3A_THIS_BUCKET_DOES_NOT_EXIST
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitNegativeRead ()
specifier|public
name|void
name|testInitNegativeRead
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|INVALID_ARGUMENT
argument_list|,
name|Init
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
literal|"-region"
argument_list|,
literal|"eu-west-1"
argument_list|,
name|READ_FLAG
argument_list|,
literal|"-10"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInit ()
specifier|public
name|void
name|testInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|run
argument_list|(
name|Init
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
literal|"-region"
argument_list|,
literal|"us-west-1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitTwice ()
specifier|public
name|void
name|testInitTwice
parameter_list|()
throws|throws
name|Throwable
block|{
name|run
argument_list|(
name|Init
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
literal|"-region"
argument_list|,
literal|"us-west-1"
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|Init
operator|.
name|NAME
argument_list|,
literal|"-meta"
argument_list|,
name|LOCAL_METADATA
argument_list|,
literal|"-region"
argument_list|,
literal|"us-west-1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLandsatBucketUnguarded ()
specifier|public
name|void
name|testLandsatBucketUnguarded
parameter_list|()
throws|throws
name|Throwable
block|{
name|run
argument_list|(
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"-"
operator|+
name|BucketInfo
operator|.
name|UNGUARDED_FLAG
argument_list|,
name|getLandsatCSVFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLandsatBucketRequireGuarded ()
specifier|public
name|void
name|testLandsatBucketRequireGuarded
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|E_BAD_STATE
argument_list|,
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"-"
operator|+
name|BucketInfo
operator|.
name|GUARDED_FLAG
argument_list|,
name|ITestS3GuardToolLocal
operator|.
name|this
operator|.
name|getLandsatCSVFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLandsatBucketRequireUnencrypted ()
specifier|public
name|void
name|testLandsatBucketRequireUnencrypted
parameter_list|()
throws|throws
name|Throwable
block|{
name|run
argument_list|(
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"-"
operator|+
name|BucketInfo
operator|.
name|ENCRYPTION_FLAG
argument_list|,
literal|"none"
argument_list|,
name|getLandsatCSVFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLandsatBucketRequireEncrypted ()
specifier|public
name|void
name|testLandsatBucketRequireEncrypted
parameter_list|()
throws|throws
name|Throwable
block|{
name|runToFailure
argument_list|(
name|E_BAD_STATE
argument_list|,
name|BucketInfo
operator|.
name|NAME
argument_list|,
literal|"-"
operator|+
name|BucketInfo
operator|.
name|ENCRYPTION_FLAG
argument_list|,
literal|"AES256"
argument_list|,
name|ITestS3GuardToolLocal
operator|.
name|this
operator|.
name|getLandsatCSVFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStoreInfo ()
specifier|public
name|void
name|testStoreInfo
parameter_list|()
throws|throws
name|Throwable
block|{
name|S3GuardTool
operator|.
name|BucketInfo
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|BucketInfo
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setStore
argument_list|(
name|getMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|exec
argument_list|(
name|cmd
argument_list|,
name|cmd
operator|.
name|getName
argument_list|()
argument_list|,
literal|"-"
operator|+
name|S3GuardTool
operator|.
name|BucketInfo
operator|.
name|GUARDED_FLAG
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Exec output=\n{}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetCapacity ()
specifier|public
name|void
name|testSetCapacity
parameter_list|()
throws|throws
name|Throwable
block|{
name|S3GuardTool
name|cmd
init|=
operator|new
name|S3GuardTool
operator|.
name|SetCapacity
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setStore
argument_list|(
name|getMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|exec
argument_list|(
name|cmd
argument_list|,
name|cmd
operator|.
name|getName
argument_list|()
argument_list|,
literal|"-"
operator|+
name|READ_FLAG
argument_list|,
literal|"100"
argument_list|,
literal|"-"
operator|+
name|WRITE_FLAG
argument_list|,
literal|"100"
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Exec output=\n{}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

