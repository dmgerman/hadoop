begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|MultipartUpload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PartETag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|UploadPartRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Invoker
operator|.
name|LOG_EVENT
import|;
end_import

begin_comment
comment|/**  * Utilities for S3A multipart upload tests.  */
end_comment

begin_class
DECL|class|MultipartTestUtils
specifier|public
specifier|final
class|class
name|MultipartTestUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MultipartTestUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Not instantiated. */
DECL|method|MultipartTestUtils ()
specifier|private
name|MultipartTestUtils
parameter_list|()
block|{ }
comment|/**    * Clean up all provided uploads.    * @param keySet set of uploads to abort    */
DECL|method|cleanupParts (S3AFileSystem fs, Set <IdKey> keySet)
specifier|static
name|void
name|cleanupParts
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|Set
argument_list|<
name|IdKey
argument_list|>
name|keySet
parameter_list|)
block|{
name|boolean
name|anyFailure
init|=
literal|false
decl_stmt|;
for|for
control|(
name|IdKey
name|ik
range|:
name|keySet
control|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"aborting upload id {}"
argument_list|,
name|ik
operator|.
name|getUploadId
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|abortMultipartUpload
argument_list|(
name|ik
operator|.
name|getKey
argument_list|()
argument_list|,
name|ik
operator|.
name|getUploadId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failure aborting upload %s, continuing."
argument_list|,
name|ik
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|anyFailure
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Failure aborting multipart upload(s), see log."
argument_list|,
name|anyFailure
argument_list|)
expr_stmt|;
block|}
DECL|method|createPartUpload (S3AFileSystem fs, String key, int len, int partNo)
specifier|public
specifier|static
name|IdKey
name|createPartUpload
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|partNo
parameter_list|)
throws|throws
name|IOException
block|{
name|WriteOperationHelper
name|writeHelper
init|=
name|fs
operator|.
name|getWriteOperationHelper
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
name|len
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|String
name|uploadId
init|=
name|writeHelper
operator|.
name|initiateMultiPartUpload
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|UploadPartRequest
name|req
init|=
name|writeHelper
operator|.
name|newUploadPartRequest
argument_list|(
name|key
argument_list|,
name|uploadId
argument_list|,
name|partNo
argument_list|,
name|len
argument_list|,
name|in
argument_list|,
literal|null
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|PartETag
name|partEtag
init|=
name|fs
operator|.
name|uploadPart
argument_list|(
name|req
argument_list|)
operator|.
name|getPartETag
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"uploaded part etag {}, upid {}"
argument_list|,
name|partEtag
operator|.
name|getETag
argument_list|()
argument_list|,
name|uploadId
argument_list|)
expr_stmt|;
return|return
operator|new
name|IdKey
argument_list|(
name|key
argument_list|,
name|uploadId
argument_list|)
return|;
block|}
comment|/** Delete any uploads under given path (recursive).  Silent on failure. */
DECL|method|clearAnyUploads (S3AFileSystem fs, Path path)
specifier|public
specifier|static
name|void
name|clearAnyUploads
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
name|String
name|key
init|=
name|fs
operator|.
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|MultipartUtils
operator|.
name|UploadIterator
name|uploads
init|=
name|fs
operator|.
name|listUploads
argument_list|(
name|key
argument_list|)
decl_stmt|;
while|while
condition|(
name|uploads
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MultipartUpload
name|upload
init|=
name|uploads
operator|.
name|next
argument_list|()
decl_stmt|;
name|fs
operator|.
name|getWriteOperationHelper
argument_list|()
operator|.
name|abortMultipartUpload
argument_list|(
name|upload
operator|.
name|getKey
argument_list|()
argument_list|,
name|upload
operator|.
name|getUploadId
argument_list|()
argument_list|,
name|LOG_EVENT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cleaning up upload: {} {}"
argument_list|,
name|upload
operator|.
name|getKey
argument_list|()
argument_list|,
name|truncatedUploadId
argument_list|(
name|upload
operator|.
name|getUploadId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring exception: "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Assert that there are not any upload parts at given path. */
DECL|method|assertNoUploadsAt (S3AFileSystem fs, Path path)
specifier|public
specifier|static
name|void
name|assertNoUploadsAt
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|key
init|=
name|fs
operator|.
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|MultipartUtils
operator|.
name|UploadIterator
name|uploads
init|=
name|fs
operator|.
name|listUploads
argument_list|(
name|key
argument_list|)
decl_stmt|;
while|while
condition|(
name|uploads
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MultipartUpload
name|upload
init|=
name|uploads
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Found unexpected upload "
operator|+
name|upload
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|truncatedUploadId
argument_list|(
name|upload
operator|.
name|getUploadId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Get number of part uploads under given path. */
DECL|method|countUploadsAt (S3AFileSystem fs, Path path)
specifier|public
specifier|static
name|int
name|countUploadsAt
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|fs
operator|.
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|MultipartUtils
operator|.
name|UploadIterator
name|uploads
init|=
name|fs
operator|.
name|listUploads
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|uploads
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MultipartUpload
name|upload
init|=
name|uploads
operator|.
name|next
argument_list|()
decl_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * Get a list of all pending uploads under a prefix, one which can be printed.    * @param prefix prefix to look under    * @return possibly empty list    * @throws IOException IO failure.    */
DECL|method|listMultipartUploads (S3AFileSystem fs, String prefix)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|listMultipartUploads
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|listMultipartUploads
argument_list|(
name|prefix
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|upload
lambda|->
name|String
operator|.
name|format
argument_list|(
literal|"Upload to %s with ID %s; initiated %s"
argument_list|,
name|upload
operator|.
name|getKey
argument_list|()
argument_list|,
name|upload
operator|.
name|getUploadId
argument_list|()
argument_list|,
name|S3ATestUtils
operator|.
name|LISTING_FORMAT
operator|.
name|format
argument_list|(
name|upload
operator|.
name|getInitiated
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|truncatedUploadId (String fullId)
specifier|private
specifier|static
name|String
name|truncatedUploadId
parameter_list|(
name|String
name|fullId
parameter_list|)
block|{
return|return
name|fullId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|12
argument_list|)
operator|+
literal|" ..."
return|;
block|}
comment|/** Struct of object key, upload ID. */
DECL|class|IdKey
specifier|static
class|class
name|IdKey
block|{
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
DECL|field|uploadId
specifier|private
name|String
name|uploadId
decl_stmt|;
DECL|method|IdKey (String key, String uploadId)
name|IdKey
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|uploadId
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|uploadId
operator|=
name|uploadId
expr_stmt|;
block|}
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getUploadId ()
specifier|public
name|String
name|getUploadId
parameter_list|()
block|{
return|return
name|uploadId
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IdKey
name|key1
init|=
operator|(
name|IdKey
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|key
argument_list|,
name|key1
operator|.
name|key
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|uploadId
argument_list|,
name|key1
operator|.
name|uploadId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|key
argument_list|,
name|uploadId
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

