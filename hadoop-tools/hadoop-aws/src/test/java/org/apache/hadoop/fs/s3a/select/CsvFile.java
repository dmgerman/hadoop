begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.select
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Writer for generating test CSV files.  *  * Quotes are manged by passing in a long whose specific bits control  * whether or not a row is quoted, bit 0 for column 0, etc.  */
end_comment

begin_class
DECL|class|CsvFile
class|class
name|CsvFile
implements|implements
name|Closeable
block|{
comment|/** constant to quote all columns. */
DECL|field|ALL_QUOTES
specifier|public
specifier|static
specifier|final
name|long
name|ALL_QUOTES
init|=
literal|0x7fffffff
decl_stmt|;
comment|/** quote nothing: {@value}. */
DECL|field|NO_QUOTES
specifier|public
specifier|static
specifier|final
name|long
name|NO_QUOTES
init|=
literal|0
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|PrintWriter
name|out
decl_stmt|;
DECL|field|separator
specifier|private
specifier|final
name|String
name|separator
decl_stmt|;
DECL|field|eol
specifier|private
specifier|final
name|String
name|eol
decl_stmt|;
DECL|field|quote
specifier|private
specifier|final
name|String
name|quote
decl_stmt|;
DECL|method|CsvFile (final FileSystem fs, final Path path, boolean overwrite, final String separator, final String eol, final String quote)
name|CsvFile
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
specifier|final
name|String
name|separator
parameter_list|,
specifier|final
name|String
name|eol
parameter_list|,
specifier|final
name|String
name|quote
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|this
operator|.
name|eol
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|eol
argument_list|)
expr_stmt|;
name|this
operator|.
name|quote
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|quote
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|overwrite
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close the file, if not already done.    * @throws IOException on a failure.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getPath ()
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getSeparator ()
specifier|public
name|String
name|getSeparator
parameter_list|()
block|{
return|return
name|separator
return|;
block|}
DECL|method|getEol ()
specifier|public
name|String
name|getEol
parameter_list|()
block|{
return|return
name|eol
return|;
block|}
comment|/**    * Write a row.    * Entries are quoted if the bit for that column is true.    * @param quotes quote policy: every bit defines the rule for that element    * @param columns columns to write    * @return self for ease of chaining.    */
DECL|method|row (long quotes, Object... columns)
specifier|public
name|CsvFile
name|row
parameter_list|(
name|long
name|quotes
parameter_list|,
name|Object
modifier|...
name|columns
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|boolean
name|toQuote
init|=
operator|(
name|quotes
operator|&
literal|1
operator|)
operator|==
literal|1
decl_stmt|;
comment|// unsigned right shift to make next column flag @ position 0
name|quotes
operator|=
name|quotes
operator|>>>
literal|1
expr_stmt|;
if|if
condition|(
name|toQuote
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|quote
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|columns
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toQuote
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|quote
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|write
argument_list|(
name|eol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Write a line.    * @param line line to print    * @return self for ease of chaining.    * @throws IOException IO failure    */
DECL|method|line (String line)
specifier|public
name|CsvFile
name|line
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|out
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|eol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Get the output stream.    * @return the stream.    */
DECL|method|getOut ()
specifier|public
name|PrintWriter
name|getOut
parameter_list|()
block|{
return|return
name|out
return|;
block|}
block|}
end_class

end_unit

