begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Statistic
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|MetricDiff
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|getTestDir
import|;
end_import

begin_comment
comment|/**  * Use metrics to assert about the cost of file status queries.  * {@link S3AFileSystem#getFileStatus(Path)}.  */
end_comment

begin_class
DECL|class|ITestS3AFileOperationCost
specifier|public
class|class
name|ITestS3AFileOperationCost
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|metadataRequests
specifier|private
name|MetricDiff
name|metadataRequests
decl_stmt|;
DECL|field|listRequests
specifier|private
name|MetricDiff
name|listRequests
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3AFileOperationCost
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|metadataRequests
operator|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|OBJECT_METADATA_REQUESTS
argument_list|)
expr_stmt|;
name|listRequests
operator|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|OBJECT_LIST_REQUESTS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCostOfGetFileStatusOnFile ()
specifier|public
name|void
name|testCostOfGetFileStatusOnFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"performing getFileStatus on a file"
argument_list|)
expr_stmt|;
name|Path
name|simpleFile
init|=
name|path
argument_list|(
literal|"simple.txt"
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|simpleFile
argument_list|)
expr_stmt|;
name|resetMetricDiffs
argument_list|()
expr_stmt|;
name|S3AFileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|simpleFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not a file: "
operator|+
name|status
argument_list|,
name|status
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|listRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|resetMetricDiffs ()
specifier|private
name|void
name|resetMetricDiffs
parameter_list|()
block|{
name|reset
argument_list|(
name|metadataRequests
argument_list|,
name|listRequests
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCostOfGetFileStatusOnEmptyDir ()
specifier|public
name|void
name|testCostOfGetFileStatusOnEmptyDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"performing getFileStatus on an empty directory"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"empty"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|resetMetricDiffs
argument_list|()
expr_stmt|;
name|S3AFileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not empty: "
operator|+
name|status
argument_list|,
name|status
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|listRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCostOfGetFileStatusOnMissingFile ()
specifier|public
name|void
name|testCostOfGetFileStatusOnMissingFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"performing getFileStatus on a missing file"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"missing"
argument_list|)
decl_stmt|;
name|resetMetricDiffs
argument_list|()
expr_stmt|;
try|try
block|{
name|S3AFileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Got a status back from a missing file path "
operator|+
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|listRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCostOfGetFileStatusOnMissingSubPath ()
specifier|public
name|void
name|testCostOfGetFileStatusOnMissingSubPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"performing getFileStatus on a missing file"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"missingdir/missingpath"
argument_list|)
decl_stmt|;
name|resetMetricDiffs
argument_list|()
expr_stmt|;
try|try
block|{
name|S3AFileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Got a status back from a missing file path "
operator|+
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|listRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCostOfGetFileStatusOnNonEmptyDir ()
specifier|public
name|void
name|testCostOfGetFileStatusOnNonEmptyDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"performing getFileStatus on a non-empty directory"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"empty"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|Path
name|simpleFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"simple.txt"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|simpleFile
argument_list|)
expr_stmt|;
name|resetMetricDiffs
argument_list|()
expr_stmt|;
name|S3AFileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isEmptyDirectory
argument_list|()
condition|)
block|{
comment|// erroneous state
name|String
name|fsState
init|=
name|fs
operator|.
name|toString
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"FileStatus says directory isempty: "
operator|+
name|status
operator|+
literal|"\n"
operator|+
name|ContractTestUtils
operator|.
name|ls
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
operator|+
literal|"\n"
operator|+
name|fsState
argument_list|)
expr_stmt|;
block|}
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|listRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCostOfCopyFromLocalFile ()
specifier|public
name|void
name|testCostOfCopyFromLocalFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"testCostOfCopyFromLocalFile"
argument_list|)
expr_stmt|;
name|File
name|localTestDir
init|=
name|getTestDir
argument_list|(
literal|"tmp"
argument_list|)
decl_stmt|;
name|localTestDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tests3acost"
argument_list|,
literal|".txt"
argument_list|,
name|localTestDir
argument_list|)
decl_stmt|;
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
try|try
block|{
name|URI
name|localFileURI
init|=
name|tmpFile
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|FileSystem
name|localFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|localFileURI
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
name|localFileURI
argument_list|)
decl_stmt|;
name|int
name|len
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
name|len
argument_list|,
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
decl_stmt|;
name|writeDataset
argument_list|(
name|localFS
argument_list|,
name|localPath
argument_list|,
name|data
argument_list|,
name|len
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|s3a
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|MetricDiff
name|copyLocalOps
init|=
operator|new
name|MetricDiff
argument_list|(
name|s3a
argument_list|,
name|INVOCATION_COPY_FROM_LOCAL_FILE
argument_list|)
decl_stmt|;
name|MetricDiff
name|putRequests
init|=
operator|new
name|MetricDiff
argument_list|(
name|s3a
argument_list|,
name|OBJECT_PUT_REQUESTS
argument_list|)
decl_stmt|;
name|MetricDiff
name|putBytes
init|=
operator|new
name|MetricDiff
argument_list|(
name|s3a
argument_list|,
name|OBJECT_PUT_BYTES
argument_list|)
decl_stmt|;
name|Path
name|remotePath
init|=
name|path
argument_list|(
literal|"copied"
argument_list|)
decl_stmt|;
name|s3a
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|localPath
argument_list|,
name|remotePath
argument_list|)
expr_stmt|;
name|verifyFileContents
argument_list|(
name|s3a
argument_list|,
name|remotePath
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|copyLocalOps
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|putRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|putBytes
operator|.
name|assertDiffEquals
argument_list|(
name|len
argument_list|)
expr_stmt|;
comment|// print final stats
name|LOG
operator|.
name|info
argument_list|(
literal|"Filesystem {}"
argument_list|,
name|s3a
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reset (MetricDiff... diffs)
specifier|private
name|void
name|reset
parameter_list|(
name|MetricDiff
modifier|...
name|diffs
parameter_list|)
block|{
for|for
control|(
name|MetricDiff
name|diff
range|:
name|diffs
control|)
block|{
name|diff
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFakeDirectoryDeletion ()
specifier|public
name|void
name|testFakeDirectoryDeletion
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Verify whether create file works after renaming a file. "
operator|+
literal|"In S3, rename deletes any fake directories as a part of "
operator|+
literal|"clean up activity"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|srcBaseDir
init|=
name|path
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|srcBaseDir
argument_list|)
expr_stmt|;
name|MetricDiff
name|deleteRequests
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|OBJECT_DELETE_REQUESTS
argument_list|)
decl_stmt|;
name|MetricDiff
name|directoriesDeleted
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|DIRECTORIES_DELETED
argument_list|)
decl_stmt|;
name|MetricDiff
name|fakeDirectoriesDeleted
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|FAKE_DIRECTORIES_DELETED
argument_list|)
decl_stmt|;
name|MetricDiff
name|directoriesCreated
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|DIRECTORIES_CREATED
argument_list|)
decl_stmt|;
name|Path
name|srcDir
init|=
operator|new
name|Path
argument_list|(
name|srcBaseDir
argument_list|,
literal|"1/2/3/4/5/6"
argument_list|)
decl_stmt|;
name|Path
name|srcFilePath
init|=
operator|new
name|Path
argument_list|(
name|srcDir
argument_list|,
literal|"source.txt"
argument_list|)
decl_stmt|;
name|int
name|srcDirDepth
init|=
name|directoriesInPath
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
comment|// one dir created, one removed
name|mkdirs
argument_list|(
name|srcDir
argument_list|)
expr_stmt|;
name|String
name|state
init|=
literal|"after mkdir(srcDir)"
decl_stmt|;
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/*  TODO: uncomment once HADOOP-13222 is in     deleteRequests.assertDiffEquals(state, 1);     directoriesDeleted.assertDiffEquals(state, 0);     fakeDirectoriesDeleted.assertDiffEquals(state, srcDirDepth); */
name|reset
argument_list|(
name|deleteRequests
argument_list|,
name|directoriesCreated
argument_list|,
name|directoriesDeleted
argument_list|,
name|fakeDirectoriesDeleted
argument_list|)
expr_stmt|;
comment|// creating a file should trigger demise of the src dir
name|touch
argument_list|(
name|fs
argument_list|,
name|srcFilePath
argument_list|)
expr_stmt|;
name|state
operator|=
literal|"after touch(fs, srcFilePath)"
expr_stmt|;
name|deleteRequests
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|directoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fakeDirectoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
name|srcDirDepth
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|deleteRequests
argument_list|,
name|directoriesCreated
argument_list|,
name|directoriesDeleted
argument_list|,
name|fakeDirectoriesDeleted
argument_list|)
expr_stmt|;
name|Path
name|destBaseDir
init|=
name|path
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
name|Path
name|destDir
init|=
operator|new
name|Path
argument_list|(
name|destBaseDir
argument_list|,
literal|"1/2/3/4/5/6"
argument_list|)
decl_stmt|;
name|Path
name|destFilePath
init|=
operator|new
name|Path
argument_list|(
name|destDir
argument_list|,
literal|"dest.txt"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|destDir
argument_list|)
expr_stmt|;
name|state
operator|=
literal|"after mkdir(destDir)"
expr_stmt|;
name|int
name|destDirDepth
init|=
name|directoriesInPath
argument_list|(
name|destDir
argument_list|)
decl_stmt|;
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/*  TODO: uncomment once HADOOP-13222 "s3a.mkdirs() to delete empty fake parent directories"     is in     deleteRequests.assertDiffEquals(state,1);     directoriesDeleted.assertDiffEquals(state,0);     fakeDirectoriesDeleted.assertDiffEquals(state,destDirDepth); */
name|reset
argument_list|(
name|deleteRequests
argument_list|,
name|directoriesCreated
argument_list|,
name|directoriesDeleted
argument_list|,
name|fakeDirectoriesDeleted
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcFilePath
argument_list|,
name|destFilePath
argument_list|)
expr_stmt|;
name|state
operator|=
literal|"after rename(srcFilePath, destFilePath)"
expr_stmt|;
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// one for the renamed file, one for the parent
name|deleteRequests
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|directoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fakeDirectoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
name|destDirDepth
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|deleteRequests
argument_list|,
name|directoriesCreated
argument_list|,
name|directoriesDeleted
argument_list|,
name|fakeDirectoriesDeleted
argument_list|)
expr_stmt|;
name|assertIsFile
argument_list|(
name|destFilePath
argument_list|)
expr_stmt|;
name|assertIsDirectory
argument_list|(
name|srcDir
argument_list|)
expr_stmt|;
block|}
DECL|method|directoriesInPath (Path path)
specifier|private
name|int
name|directoriesInPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|isRoot
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|+
name|directoriesInPath
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

