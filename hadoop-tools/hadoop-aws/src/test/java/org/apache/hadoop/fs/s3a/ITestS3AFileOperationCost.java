begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|impl
operator|.
name|StatusProbeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3_METADATA_STORE_IMPL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Statistic
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|getTestDir
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Use metrics to assert about the cost of file status queries.  * {@link S3AFileSystem#getFileStatus(Path)}.  * Parameterized on guarded vs raw.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|ITestS3AFileOperationCost
specifier|public
class|class
name|ITestS3AFileOperationCost
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|metadataRequests
specifier|private
name|MetricDiff
name|metadataRequests
decl_stmt|;
DECL|field|listRequests
specifier|private
name|MetricDiff
name|listRequests
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestS3AFileOperationCost
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Parameterization.    */
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
DECL|method|params ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"raw"
block|,
literal|false
block|}
block|,
block|{
literal|"guarded"
block|,
literal|true
block|}
block|}
argument_list|)
return|;
block|}
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|s3guard
specifier|private
specifier|final
name|boolean
name|s3guard
decl_stmt|;
DECL|method|ITestS3AFileOperationCost (final String name, final boolean s3guard)
specifier|public
name|ITestS3AFileOperationCost
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|s3guard
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|s3guard
operator|=
name|s3guard
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|public
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|getTestBucketName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|removeBucketOverrides
argument_list|(
name|bucketName
argument_list|,
name|conf
argument_list|,
name|S3_METADATA_STORE_IMPL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s3guard
condition|)
block|{
comment|// in a raw run remove all s3guard settings
name|removeBaseAndBucketOverrides
argument_list|(
name|bucketName
argument_list|,
name|conf
argument_list|,
name|S3_METADATA_STORE_IMPL
argument_list|)
expr_stmt|;
block|}
name|disableFilesystemCaching
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
if|if
condition|(
name|s3guard
condition|)
block|{
comment|// s3guard is required for those test runs where any of the
comment|// guard options are set
name|assumeS3GuardState
argument_list|(
literal|true
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|metadataRequests
operator|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|OBJECT_METADATA_REQUESTS
argument_list|)
expr_stmt|;
name|listRequests
operator|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|OBJECT_LIST_REQUESTS
argument_list|)
expr_stmt|;
name|skipDuringFaultInjection
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCostOfGetFileStatusOnFile ()
specifier|public
name|void
name|testCostOfGetFileStatusOnFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"performing getFileStatus on a file"
argument_list|)
expr_stmt|;
name|Path
name|simpleFile
init|=
name|path
argument_list|(
literal|"simple.txt"
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|simpleFile
argument_list|)
expr_stmt|;
name|resetMetricDiffs
argument_list|()
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|simpleFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not a file: "
operator|+
name|status
argument_list|,
name|status
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|hasMetadataStore
argument_list|()
condition|)
block|{
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|listRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|resetMetricDiffs ()
specifier|private
name|void
name|resetMetricDiffs
parameter_list|()
block|{
name|reset
argument_list|(
name|metadataRequests
argument_list|,
name|listRequests
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the head and list calls match expectations,    * then reset the counters ready for the next operation.    * @param head expected HEAD count    * @param list expected LIST count    */
DECL|method|verifyOperationCount (int head, int list)
specifier|private
name|void
name|verifyOperationCount
parameter_list|(
name|int
name|head
parameter_list|,
name|int
name|list
parameter_list|)
block|{
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
name|head
argument_list|)
expr_stmt|;
name|listRequests
operator|.
name|assertDiffEquals
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|metadataRequests
operator|.
name|reset
argument_list|()
expr_stmt|;
name|listRequests
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCostOfGetFileStatusOnEmptyDir ()
specifier|public
name|void
name|testCostOfGetFileStatusOnEmptyDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"performing getFileStatus on an empty directory"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"empty"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|resetMetricDiffs
argument_list|()
expr_stmt|;
name|S3AFileStatus
name|status
init|=
name|fs
operator|.
name|innerGetFileStatus
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|,
name|StatusProbeEnum
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"not empty: "
operator|+
name|status
argument_list|,
name|Tristate
operator|.
name|TRUE
argument_list|,
name|status
operator|.
name|isEmptyDirectory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|hasMetadataStore
argument_list|()
condition|)
block|{
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|listRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// but now only ask for the directories and the file check is skipped.
name|resetMetricDiffs
argument_list|()
expr_stmt|;
name|fs
operator|.
name|innerGetFileStatus
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|,
name|StatusProbeEnum
operator|.
name|DIRECTORIES
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|hasMetadataStore
argument_list|()
condition|)
block|{
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCostOfGetFileStatusOnMissingFile ()
specifier|public
name|void
name|testCostOfGetFileStatusOnMissingFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"performing getFileStatus on a missing file"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"missing"
argument_list|)
decl_stmt|;
name|resetMetricDiffs
argument_list|()
expr_stmt|;
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|listRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCostOfGetFileStatusOnMissingSubPath ()
specifier|public
name|void
name|testCostOfGetFileStatusOnMissingSubPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"performing getFileStatus on a missing file"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"missingdir/missingpath"
argument_list|)
decl_stmt|;
name|resetMetricDiffs
argument_list|()
expr_stmt|;
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|listRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCostOfGetFileStatusOnNonEmptyDir ()
specifier|public
name|void
name|testCostOfGetFileStatusOnNonEmptyDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"performing getFileStatus on a non-empty directory"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"empty"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|Path
name|simpleFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"simple.txt"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|simpleFile
argument_list|)
expr_stmt|;
name|resetMetricDiffs
argument_list|()
expr_stmt|;
name|S3AFileStatus
name|status
init|=
name|fs
operator|.
name|innerGetFileStatus
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|,
name|StatusProbeEnum
operator|.
name|ALL
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isEmptyDirectory
argument_list|()
operator|==
name|Tristate
operator|.
name|TRUE
condition|)
block|{
comment|// erroneous state
name|String
name|fsState
init|=
name|fs
operator|.
name|toString
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"FileStatus says directory isempty: "
operator|+
name|status
operator|+
literal|"\n"
operator|+
name|ContractTestUtils
operator|.
name|ls
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
operator|+
literal|"\n"
operator|+
name|fsState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|hasMetadataStore
argument_list|()
condition|)
block|{
name|metadataRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|listRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCostOfCopyFromLocalFile ()
specifier|public
name|void
name|testCostOfCopyFromLocalFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"testCostOfCopyFromLocalFile"
argument_list|)
expr_stmt|;
name|File
name|localTestDir
init|=
name|getTestDir
argument_list|(
literal|"tmp"
argument_list|)
decl_stmt|;
name|localTestDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tests3acost"
argument_list|,
literal|".txt"
argument_list|,
name|localTestDir
argument_list|)
decl_stmt|;
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
try|try
block|{
name|URI
name|localFileURI
init|=
name|tmpFile
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|FileSystem
name|localFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|localFileURI
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
name|localFileURI
argument_list|)
decl_stmt|;
name|int
name|len
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
name|len
argument_list|,
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
decl_stmt|;
name|writeDataset
argument_list|(
name|localFS
argument_list|,
name|localPath
argument_list|,
name|data
argument_list|,
name|len
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|s3a
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|MetricDiff
name|copyLocalOps
init|=
operator|new
name|MetricDiff
argument_list|(
name|s3a
argument_list|,
name|INVOCATION_COPY_FROM_LOCAL_FILE
argument_list|)
decl_stmt|;
name|MetricDiff
name|putRequests
init|=
operator|new
name|MetricDiff
argument_list|(
name|s3a
argument_list|,
name|OBJECT_PUT_REQUESTS
argument_list|)
decl_stmt|;
name|MetricDiff
name|putBytes
init|=
operator|new
name|MetricDiff
argument_list|(
name|s3a
argument_list|,
name|OBJECT_PUT_BYTES
argument_list|)
decl_stmt|;
name|Path
name|remotePath
init|=
name|path
argument_list|(
literal|"copied"
argument_list|)
decl_stmt|;
name|s3a
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|localPath
argument_list|,
name|remotePath
argument_list|)
expr_stmt|;
name|verifyFileContents
argument_list|(
name|s3a
argument_list|,
name|remotePath
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|copyLocalOps
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|putRequests
operator|.
name|assertDiffEquals
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|putBytes
operator|.
name|assertDiffEquals
argument_list|(
name|len
argument_list|)
expr_stmt|;
comment|// print final stats
name|LOG
operator|.
name|info
argument_list|(
literal|"Filesystem {}"
argument_list|,
name|s3a
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reset (MetricDiff... diffs)
specifier|private
name|boolean
name|reset
parameter_list|(
name|MetricDiff
modifier|...
name|diffs
parameter_list|)
block|{
for|for
control|(
name|MetricDiff
name|diff
range|:
name|diffs
control|)
block|{
name|diff
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
DECL|method|testFakeDirectoryDeletion ()
specifier|public
name|void
name|testFakeDirectoryDeletion
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Verify whether create file works after renaming a file. "
operator|+
literal|"In S3, rename deletes any fake directories as a part of "
operator|+
literal|"clean up activity"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|srcBaseDir
init|=
name|path
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|srcBaseDir
argument_list|)
expr_stmt|;
name|MetricDiff
name|deleteRequests
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|OBJECT_DELETE_REQUESTS
argument_list|)
decl_stmt|;
name|MetricDiff
name|directoriesDeleted
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|DIRECTORIES_DELETED
argument_list|)
decl_stmt|;
name|MetricDiff
name|fakeDirectoriesDeleted
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|FAKE_DIRECTORIES_DELETED
argument_list|)
decl_stmt|;
name|MetricDiff
name|directoriesCreated
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|DIRECTORIES_CREATED
argument_list|)
decl_stmt|;
comment|// when you call toString() on this, you get the stats
comment|// so it gets auto-evaluated in log calls.
name|Object
name|summary
init|=
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[%s, %s, %s, %s]"
argument_list|,
name|directoriesCreated
argument_list|,
name|directoriesDeleted
argument_list|,
name|deleteRequests
argument_list|,
name|fakeDirectoriesDeleted
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// reset operation to invoke
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|reset
init|=
parameter_list|()
lambda|->
name|reset
argument_list|(
name|deleteRequests
argument_list|,
name|directoriesCreated
argument_list|,
name|directoriesDeleted
argument_list|,
name|fakeDirectoriesDeleted
argument_list|)
decl_stmt|;
name|Path
name|srcDir
init|=
operator|new
name|Path
argument_list|(
name|srcBaseDir
argument_list|,
literal|"1/2/3/4/5/6"
argument_list|)
decl_stmt|;
name|int
name|srcDirDepth
init|=
name|directoriesInPath
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
comment|// one dir created, one removed
name|mkdirs
argument_list|(
name|srcDir
argument_list|)
expr_stmt|;
name|String
name|state
init|=
literal|"after mkdir(srcDir) "
operator|+
name|summary
decl_stmt|;
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|deleteRequests
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|directoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// HADOOP-14255 deletes unnecessary fake directory objects in mkdirs()
name|fakeDirectoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
name|srcDirDepth
operator|-
literal|1
argument_list|)
expr_stmt|;
name|reset
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// creating a file should trigger demise of the src dir
specifier|final
name|Path
name|srcFilePath
init|=
operator|new
name|Path
argument_list|(
name|srcDir
argument_list|,
literal|"source.txt"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|srcFilePath
argument_list|)
expr_stmt|;
name|state
operator|=
literal|"after touch(fs, srcFilePath) "
operator|+
name|summary
expr_stmt|;
name|deleteRequests
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|directoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fakeDirectoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
name|srcDirDepth
argument_list|)
expr_stmt|;
name|reset
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// create a directory tree, expect the dir to be created and
comment|// a request to delete all parent directories made.
name|Path
name|destBaseDir
init|=
name|path
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
name|Path
name|destDir
init|=
operator|new
name|Path
argument_list|(
name|destBaseDir
argument_list|,
literal|"1/2/3/4/5/6"
argument_list|)
decl_stmt|;
name|Path
name|destFilePath
init|=
operator|new
name|Path
argument_list|(
name|destDir
argument_list|,
literal|"dest.txt"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|destDir
argument_list|)
expr_stmt|;
name|state
operator|=
literal|"after mkdir(destDir) "
operator|+
name|summary
expr_stmt|;
name|int
name|destDirDepth
init|=
name|directoriesInPath
argument_list|(
name|destDir
argument_list|)
decl_stmt|;
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|deleteRequests
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|directoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fakeDirectoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
name|destDirDepth
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// create a new source file.
comment|// Explicitly use a new path object to guarantee that the parent paths
comment|// are different object instances
specifier|final
name|Path
name|srcFile2
init|=
operator|new
name|Path
argument_list|(
name|srcDir
operator|.
name|toUri
argument_list|()
operator|+
literal|"/source2.txt"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|srcFile2
argument_list|)
expr_stmt|;
name|reset
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// rename the source file to the destination file.
comment|// this tests the file rename path, not the dir rename path
comment|// as srcFile2 exists, the parent dir of srcFilePath must not be created.
name|fs
operator|.
name|rename
argument_list|(
name|srcFilePath
argument_list|,
name|destFilePath
argument_list|)
expr_stmt|;
name|state
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"after rename(srcFilePath, destFilePath)"
operator|+
literal|" %s dest dir depth=%d"
argument_list|,
name|summary
argument_list|,
name|destDirDepth
argument_list|)
expr_stmt|;
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// one for the renamed file, one for the parent of the dest dir
name|deleteRequests
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|directoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fakeDirectoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
name|destDirDepth
argument_list|)
expr_stmt|;
comment|// these asserts come after the checks on iop counts, so they don't
comment|// interfere
name|assertIsFile
argument_list|(
name|destFilePath
argument_list|)
expr_stmt|;
name|assertIsDirectory
argument_list|(
name|srcDir
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"should have gone in the rename"
argument_list|,
name|srcFilePath
argument_list|)
expr_stmt|;
name|reset
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// rename the source file2 to the (no longer existing
comment|// this tests the file rename path, not the dir rename path
comment|// as srcFile2 exists, the parent dir of srcFilePath must not be created.
name|fs
operator|.
name|rename
argument_list|(
name|srcFile2
argument_list|,
name|srcFilePath
argument_list|)
expr_stmt|;
name|state
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"after rename(%s, %s) %s dest dir depth=%d"
argument_list|,
name|srcFile2
argument_list|,
name|srcFilePath
argument_list|,
name|summary
argument_list|,
name|destDirDepth
argument_list|)
expr_stmt|;
comment|// here we expect there to be no fake directories
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// one for the renamed file only
name|deleteRequests
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|directoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fakeDirectoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|directoriesInPath (Path path)
specifier|private
name|int
name|directoriesInPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|isRoot
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|+
name|directoriesInPath
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testCostOfRootRename ()
specifier|public
name|void
name|testCostOfRootRename
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"assert that a root directory rename doesn't"
operator|+
literal|" do much in terms of parent dir operations"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// unique name, so that even when run in parallel tests, there's no conflict
name|String
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
literal|"/src-"
operator|+
name|uuid
argument_list|)
decl_stmt|;
name|Path
name|dest
init|=
operator|new
name|Path
argument_list|(
literal|"/dest-"
operator|+
name|uuid
argument_list|)
decl_stmt|;
try|try
block|{
name|MetricDiff
name|deleteRequests
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|OBJECT_DELETE_REQUESTS
argument_list|)
decl_stmt|;
name|MetricDiff
name|directoriesDeleted
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|DIRECTORIES_DELETED
argument_list|)
decl_stmt|;
name|MetricDiff
name|fakeDirectoriesDeleted
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|FAKE_DIRECTORIES_DELETED
argument_list|)
decl_stmt|;
name|MetricDiff
name|directoriesCreated
init|=
operator|new
name|MetricDiff
argument_list|(
name|fs
argument_list|,
name|Statistic
operator|.
name|DIRECTORIES_CREATED
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|Object
name|summary
init|=
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[%s, %s, %s, %s]"
argument_list|,
name|directoriesCreated
argument_list|,
name|directoriesDeleted
argument_list|,
name|deleteRequests
argument_list|,
name|fakeDirectoriesDeleted
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|String
name|state
init|=
name|String
operator|.
name|format
argument_list|(
literal|"after touch(%s) %s"
argument_list|,
name|src
argument_list|,
name|summary
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|state
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"after rename(%s, %s) %s"
argument_list|,
name|src
argument_list|,
name|dest
argument_list|,
name|summary
argument_list|)
expr_stmt|;
comment|// here we expect there to be no fake directories
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// one for the renamed file only
name|deleteRequests
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|directoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fakeDirectoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// delete that destination file, assert only the file delete was issued
name|reset
argument_list|(
name|deleteRequests
argument_list|,
name|directoriesCreated
argument_list|,
name|directoriesDeleted
argument_list|,
name|fakeDirectoriesDeleted
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// here we expect there to be no fake directories
name|directoriesCreated
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// one for the deleted file
name|deleteRequests
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|directoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fakeDirectoriesDeleted
operator|.
name|assertDiffEquals
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDirProbes ()
specifier|public
name|void
name|testDirProbes
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Test directory probe cost -raw only"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|assume
argument_list|(
literal|"Unguarded FS only"
argument_list|,
operator|!
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dir
init|=
literal|"testEmptyDirHeadProbe"
decl_stmt|;
name|Path
name|emptydir
init|=
name|path
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// Create the empty directory.
name|fs
operator|.
name|mkdirs
argument_list|(
name|emptydir
argument_list|)
expr_stmt|;
comment|// metrics and assertions.
name|resetMetricDiffs
argument_list|()
expr_stmt|;
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|innerGetFileStatus
argument_list|(
name|emptydir
argument_list|,
literal|false
argument_list|,
name|StatusProbeEnum
operator|.
name|HEAD_ONLY
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOperationCount
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// a LIST will find it -but it doesn't consider it an empty dir.
name|S3AFileStatus
name|status
init|=
name|fs
operator|.
name|innerGetFileStatus
argument_list|(
name|emptydir
argument_list|,
literal|true
argument_list|,
name|StatusProbeEnum
operator|.
name|LIST_ONLY
argument_list|)
decl_stmt|;
name|verifyOperationCount
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|status
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"LIST output is not considered empty"
argument_list|)
operator|.
name|matches
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isEmptyDirectory
argument_list|()
operator|.
name|equals
argument_list|(
name|Tristate
operator|.
name|TRUE
argument_list|)
argument_list|,
literal|"is empty"
argument_list|)
expr_stmt|;
comment|// finally, skip all probes and expect no operations toThere are
comment|// take place
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|innerGetFileStatus
argument_list|(
name|emptydir
argument_list|,
literal|false
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|StatusProbeEnum
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOperationCount
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// now add a trailing slash to the key and use the
comment|// deep internal s3GetFileStatus method call.
name|String
name|emptyDirTrailingSlash
init|=
name|fs
operator|.
name|pathToKey
argument_list|(
name|emptydir
operator|.
name|getParent
argument_list|()
argument_list|)
operator|+
literal|"/"
operator|+
name|dir
operator|+
literal|"/"
decl_stmt|;
comment|// A HEAD request does not probe for keys with a trailing /
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fs
operator|.
name|s3GetFileStatus
argument_list|(
name|emptydir
argument_list|,
name|emptyDirTrailingSlash
argument_list|,
name|StatusProbeEnum
operator|.
name|HEAD_ONLY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOperationCount
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// but ask for a directory marker and you get the entry
name|status
operator|=
name|fs
operator|.
name|s3GetFileStatus
argument_list|(
name|emptydir
argument_list|,
name|emptyDirTrailingSlash
argument_list|,
name|StatusProbeEnum
operator|.
name|DIR_MARKER_ONLY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyOperationCount
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptydir
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateCost ()
specifier|public
name|void
name|testCreateCost
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Test file creation cost -raw only"
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|assume
argument_list|(
literal|"Unguarded FS only"
argument_list|,
operator|!
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|resetMetricDiffs
argument_list|()
expr_stmt|;
name|Path
name|testFile
init|=
name|path
argument_list|(
literal|"testCreateCost"
argument_list|)
decl_stmt|;
comment|// when overwrite is false, the path is checked for existence.
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|verifyOperationCount
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// but when true: only the directory checks take place.
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|verifyOperationCount
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

