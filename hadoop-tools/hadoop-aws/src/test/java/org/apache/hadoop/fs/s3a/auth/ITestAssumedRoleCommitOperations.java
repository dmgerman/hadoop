begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|commit
operator|.
name|ITestCommitOperations
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|ASSUMED_ROLE_ARN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|RoleModel
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|RolePolicies
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|RoleTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|cleanupWithLogger
import|;
end_import

begin_comment
comment|/**  * Verify that the commit operations work with a restricted set of operations.  * The superclass, {@link ITestCommitOperations} turns on an inconsistent client  * to see how things work in the presence of inconsistency.  * These tests disable it, to remove that as a factor in these tests, which are  * verifying that the policy settings to enabled MPU list/commit/abort are all  * enabled properly.  */
end_comment

begin_class
DECL|class|ITestAssumedRoleCommitOperations
specifier|public
class|class
name|ITestAssumedRoleCommitOperations
extends|extends
name|ITestCommitOperations
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestAssumedRoleCommitOperations
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The restricted directory.    */
DECL|field|restrictedDir
specifier|private
name|Path
name|restrictedDir
decl_stmt|;
comment|/**    * A role FS; if non-null it is closed in teardown.    */
DECL|field|roleFS
specifier|private
name|S3AFileSystem
name|roleFS
decl_stmt|;
annotation|@
name|Override
DECL|method|useInconsistentClient ()
specifier|public
name|boolean
name|useInconsistentClient
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|assumeRoleTests
argument_list|()
expr_stmt|;
name|restrictedDir
operator|=
name|super
operator|.
name|path
argument_list|(
literal|"restricted"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|newAssumedRoleConfig
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|getAssumedRoleARN
argument_list|()
argument_list|)
decl_stmt|;
name|bindRolePolicyStatements
argument_list|(
name|conf
argument_list|,
name|STATEMENT_S3GUARD_CLIENT
argument_list|,
name|STATEMENT_ALLOW_SSE_KMS_RW
argument_list|,
name|statement
argument_list|(
literal|true
argument_list|,
name|S3_ALL_BUCKETS
argument_list|,
name|S3_BUCKET_READ_OPERATIONS
argument_list|)
argument_list|,
operator|new
name|RoleModel
operator|.
name|Statement
argument_list|(
name|RoleModel
operator|.
name|Effects
operator|.
name|Allow
argument_list|)
operator|.
name|addActions
argument_list|(
name|S3_PATH_RW_OPERATIONS
argument_list|)
operator|.
name|addResources
argument_list|(
name|directory
argument_list|(
name|restrictedDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|roleFS
operator|=
operator|(
name|S3AFileSystem
operator|)
name|restrictedDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|roleFS
argument_list|)
expr_stmt|;
comment|// switches getFileSystem() back to the full FS.
name|roleFS
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
DECL|method|assumeRoleTests ()
specifier|private
name|void
name|assumeRoleTests
parameter_list|()
block|{
name|assume
argument_list|(
literal|"No ARN for role tests"
argument_list|,
operator|!
name|getAssumedRoleARN
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * The overridden operation returns the roleFS, so that test cases    * in the superclass run under restricted rights.    * There's special handling in startup to avoid NPEs    * @return {@link #roleFS}    */
annotation|@
name|Override
DECL|method|getFileSystem ()
specifier|public
name|S3AFileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|roleFS
operator|!=
literal|null
condition|?
name|roleFS
else|:
name|getFullFileSystem
argument_list|()
return|;
block|}
comment|/**    * Get the FS with full access rights.    * @return the FS created by the superclass.    */
DECL|method|getFullFileSystem ()
specifier|public
name|S3AFileSystem
name|getFullFileSystem
parameter_list|()
block|{
return|return
name|super
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
comment|/**    * switch to an inconsistent path if in inconsistent mode.    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|path (String filepath)
specifier|protected
name|Path
name|path
parameter_list|(
name|String
name|filepath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
name|restrictedDir
argument_list|,
name|filepath
argument_list|)
return|;
block|}
DECL|method|getAssumedRoleARN ()
specifier|private
name|String
name|getAssumedRoleARN
parameter_list|()
block|{
return|return
name|getContract
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|ASSUMED_ROLE_ARN
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

