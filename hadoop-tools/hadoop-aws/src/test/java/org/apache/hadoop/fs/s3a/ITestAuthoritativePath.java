begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|NullMetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3Guard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|touch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|METADATASTORE_AUTHORITATIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|AUTHORITATIVE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3_METADATA_STORE_IMPL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|checkListingContainsPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|checkListingDoesNotContainPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|metadataStorePersistsAuthoritativeBit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|removeBaseAndBucketOverrides
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
DECL|class|ITestAuthoritativePath
specifier|public
class|class
name|ITestAuthoritativePath
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|testRoot
specifier|public
name|Path
name|testRoot
decl_stmt|;
DECL|field|fullyAuthFS
specifier|private
name|S3AFileSystem
name|fullyAuthFS
decl_stmt|;
DECL|field|rawFS
specifier|private
name|S3AFileSystem
name|rawFS
decl_stmt|;
DECL|field|ms
specifier|private
name|MetadataStore
name|ms
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|testRoot
operator|=
name|path
argument_list|(
literal|""
operator|+
name|timestamp
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// These test will fail if no ms
name|assumeTrue
argument_list|(
literal|"FS needs to have a metadatastore."
argument_list|,
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"Metadatastore should persist authoritative bit"
argument_list|,
name|metadataStorePersistsAuthoritativeBit
argument_list|(
name|fs
operator|.
name|getMetadataStore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This test setup shares a single metadata store across instances,
comment|// so that test runs with a local FS work.
comment|// but this needs to be addressed in teardown, where the Auth fs
comment|// needs to be detached from the metadata store before it is closed,
name|ms
operator|=
name|fs
operator|.
name|getMetadataStore
argument_list|()
expr_stmt|;
name|fullyAuthFS
operator|=
name|createFullyAuthFS
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No S3Guard store for fullyAuthFS"
argument_list|,
name|fullyAuthFS
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Authoritative mode off in fullyAuthFS"
argument_list|,
name|fullyAuthFS
operator|.
name|hasAuthoritativeMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|rawFS
operator|=
name|createRawFS
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"UnguardedFS still has S3Guard"
argument_list|,
name|rawFS
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanUpFS (S3AFileSystem fs)
specifier|private
name|void
name|cleanUpFS
parameter_list|(
name|S3AFileSystem
name|fs
parameter_list|)
block|{
comment|// detach from the (shared) metadata store.
name|fs
operator|.
name|setMetadataStore
argument_list|(
operator|new
name|NullMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|fullyAuthFS
operator|.
name|delete
argument_list|(
name|testRoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cleanUpFS
argument_list|(
name|fullyAuthFS
argument_list|)
expr_stmt|;
name|cleanUpFS
argument_list|(
name|rawFS
argument_list|)
expr_stmt|;
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
DECL|method|createFullyAuthFS ()
specifier|private
name|S3AFileSystem
name|createFullyAuthFS
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|testFS
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
name|testFS
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|testFS
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|removeBaseAndBucketOverrides
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|config
argument_list|,
name|METADATASTORE_AUTHORITATIVE
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|METADATASTORE_AUTHORITATIVE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|S3AFileSystem
name|newFS
init|=
name|createFS
argument_list|(
name|uri
argument_list|,
name|config
argument_list|)
decl_stmt|;
comment|// set back the same metadata store instance
name|newFS
operator|.
name|setMetadataStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
return|return
name|newFS
return|;
block|}
DECL|method|createSinglePathAuthFS (String authPath)
specifier|private
name|S3AFileSystem
name|createSinglePathAuthFS
parameter_list|(
name|String
name|authPath
parameter_list|)
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|testFS
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
name|testFS
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|testFS
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|removeBaseAndBucketOverrides
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|config
argument_list|,
name|METADATASTORE_AUTHORITATIVE
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|AUTHORITATIVE_PATH
argument_list|,
name|authPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|S3AFileSystem
name|newFS
init|=
name|createFS
argument_list|(
name|uri
argument_list|,
name|config
argument_list|)
decl_stmt|;
comment|// set back the same metadata store instance
name|newFS
operator|.
name|setMetadataStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
return|return
name|newFS
return|;
block|}
DECL|method|createMultiPathAuthFS (String first, String middle, String last)
specifier|private
name|S3AFileSystem
name|createMultiPathAuthFS
parameter_list|(
name|String
name|first
parameter_list|,
name|String
name|middle
parameter_list|,
name|String
name|last
parameter_list|)
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|testFS
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
name|testFS
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|testFS
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|removeBaseAndBucketOverrides
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|config
argument_list|,
name|METADATASTORE_AUTHORITATIVE
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|AUTHORITATIVE_PATH
argument_list|,
name|first
operator|+
literal|","
operator|+
name|middle
operator|+
literal|","
operator|+
name|last
argument_list|)
expr_stmt|;
specifier|final
name|S3AFileSystem
name|newFS
init|=
name|createFS
argument_list|(
name|uri
argument_list|,
name|config
argument_list|)
decl_stmt|;
comment|// set back the same metadata store instance
name|newFS
operator|.
name|setMetadataStore
argument_list|(
name|ms
argument_list|)
expr_stmt|;
return|return
name|newFS
return|;
block|}
DECL|method|createRawFS ()
specifier|private
name|S3AFileSystem
name|createRawFS
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|testFS
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
name|testFS
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|testFS
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|removeBaseAndBucketOverrides
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|config
argument_list|,
name|S3_METADATA_STORE_IMPL
argument_list|)
expr_stmt|;
name|removeBaseAndBucketOverrides
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|config
argument_list|,
name|METADATASTORE_AUTHORITATIVE
argument_list|)
expr_stmt|;
return|return
name|createFS
argument_list|(
name|uri
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**    * Create and initialize a new filesystem.    * This filesystem MUST be closed in test teardown.    * @param uri FS URI    * @param config config.    * @return new instance    * @throws IOException failure    */
DECL|method|createFS (final URI uri, final Configuration config)
specifier|private
name|S3AFileSystem
name|createFS
parameter_list|(
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|S3AFileSystem
name|fs2
init|=
operator|new
name|S3AFileSystem
argument_list|()
decl_stmt|;
name|fs2
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|fs2
return|;
block|}
DECL|method|runTestOutsidePath (S3AFileSystem partiallyAuthFS, Path nonAuthPath)
specifier|private
name|void
name|runTestOutsidePath
parameter_list|(
name|S3AFileSystem
name|partiallyAuthFS
parameter_list|,
name|Path
name|nonAuthPath
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|inBandPath
init|=
operator|new
name|Path
argument_list|(
name|nonAuthPath
argument_list|,
literal|"out-of-path-in-band"
argument_list|)
decl_stmt|;
name|Path
name|outOfBandPath
init|=
operator|new
name|Path
argument_list|(
name|nonAuthPath
argument_list|,
literal|"out-of-path-out-of-band"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|fullyAuthFS
argument_list|,
name|inBandPath
argument_list|)
expr_stmt|;
comment|// trigger an authoritative write-back
name|fullyAuthFS
operator|.
name|listStatus
argument_list|(
name|inBandPath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|touch
argument_list|(
name|rawFS
argument_list|,
name|outOfBandPath
argument_list|)
expr_stmt|;
comment|// listing lacks outOfBandPath => short-circuited by auth mode
name|checkListingDoesNotContainPath
argument_list|(
name|fullyAuthFS
argument_list|,
name|outOfBandPath
argument_list|)
expr_stmt|;
comment|// partiallyAuthFS differs from fullyAuthFS because we're outside the path
name|checkListingContainsPath
argument_list|(
name|partiallyAuthFS
argument_list|,
name|outOfBandPath
argument_list|)
expr_stmt|;
comment|// sanity check that in-band operations are always visible
name|checkListingContainsPath
argument_list|(
name|fullyAuthFS
argument_list|,
name|inBandPath
argument_list|)
expr_stmt|;
name|checkListingContainsPath
argument_list|(
name|partiallyAuthFS
argument_list|,
name|inBandPath
argument_list|)
expr_stmt|;
block|}
DECL|method|runTestInsidePath (S3AFileSystem partiallyAuthFS, Path authPath)
specifier|private
name|void
name|runTestInsidePath
parameter_list|(
name|S3AFileSystem
name|partiallyAuthFS
parameter_list|,
name|Path
name|authPath
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|inBandPath
init|=
operator|new
name|Path
argument_list|(
name|authPath
argument_list|,
literal|"in-path-in-band"
argument_list|)
decl_stmt|;
name|Path
name|outOfBandPath
init|=
operator|new
name|Path
argument_list|(
name|authPath
argument_list|,
literal|"in-path-out-of-band"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|fullyAuthFS
argument_list|,
name|inBandPath
argument_list|)
expr_stmt|;
comment|// trigger an authoritative write-back
name|fullyAuthFS
operator|.
name|listStatus
argument_list|(
name|inBandPath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|touch
argument_list|(
name|rawFS
argument_list|,
name|outOfBandPath
argument_list|)
expr_stmt|;
comment|// listing lacks outOfBandPath => short-circuited by auth mode
name|checkListingDoesNotContainPath
argument_list|(
name|fullyAuthFS
argument_list|,
name|outOfBandPath
argument_list|)
expr_stmt|;
name|checkListingDoesNotContainPath
argument_list|(
name|partiallyAuthFS
argument_list|,
name|outOfBandPath
argument_list|)
expr_stmt|;
comment|// sanity check that in-band operations are always successful
name|checkListingContainsPath
argument_list|(
name|fullyAuthFS
argument_list|,
name|inBandPath
argument_list|)
expr_stmt|;
name|checkListingContainsPath
argument_list|(
name|partiallyAuthFS
argument_list|,
name|inBandPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleAuthPath ()
specifier|public
name|void
name|testSingleAuthPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|authPath
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"testSingleAuthPath-auth"
argument_list|)
decl_stmt|;
name|Path
name|nonAuthPath
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"testSingleAuthPath"
argument_list|)
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
name|createSinglePathAuthFS
argument_list|(
name|authPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
literal|"No S3Guard store for partially authoritative FS"
argument_list|,
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|runTestInsidePath
argument_list|(
name|fs
argument_list|,
name|authPath
argument_list|)
expr_stmt|;
name|runTestOutsidePath
argument_list|(
name|fs
argument_list|,
name|nonAuthPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUpFS
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiAuthPath ()
specifier|public
name|void
name|testMultiAuthPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|authPath
decl_stmt|;
name|Path
name|nonAuthPath
decl_stmt|;
name|S3AFileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|String
name|decoy1
init|=
literal|"/decoy1"
decl_stmt|;
name|String
name|decoy2
init|=
literal|"/decoy2"
decl_stmt|;
try|try
block|{
name|authPath
operator|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"testMultiAuthPath-first"
argument_list|)
expr_stmt|;
name|nonAuthPath
operator|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"nonAuth-1"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|createMultiPathAuthFS
argument_list|(
name|authPath
operator|.
name|toString
argument_list|()
argument_list|,
name|decoy1
argument_list|,
name|decoy2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No S3Guard store for partially authoritative FS"
argument_list|,
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|runTestInsidePath
argument_list|(
name|fs
argument_list|,
name|authPath
argument_list|)
expr_stmt|;
name|runTestOutsidePath
argument_list|(
name|fs
argument_list|,
name|nonAuthPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUpFS
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|authPath
operator|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"testMultiAuthPath-middle"
argument_list|)
expr_stmt|;
name|nonAuthPath
operator|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"nonAuth-2"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|createMultiPathAuthFS
argument_list|(
name|decoy1
argument_list|,
name|authPath
operator|.
name|toString
argument_list|()
argument_list|,
name|decoy2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No S3Guard store for partially authoritative FS"
argument_list|,
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|runTestInsidePath
argument_list|(
name|fs
argument_list|,
name|authPath
argument_list|)
expr_stmt|;
name|runTestOutsidePath
argument_list|(
name|fs
argument_list|,
name|nonAuthPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUpFS
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|authPath
operator|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"testMultiAuthPath-last"
argument_list|)
expr_stmt|;
name|nonAuthPath
operator|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"nonAuth-3"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|createMultiPathAuthFS
argument_list|(
name|decoy1
argument_list|,
name|decoy2
argument_list|,
name|authPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No S3Guard store for partially authoritative FS"
argument_list|,
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|runTestInsidePath
argument_list|(
name|fs
argument_list|,
name|authPath
argument_list|)
expr_stmt|;
name|runTestOutsidePath
argument_list|(
name|fs
argument_list|,
name|nonAuthPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUpFS
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPrefixVsDirectory ()
specifier|public
name|void
name|testPrefixVsDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|fs
init|=
name|createSinglePathAuthFS
argument_list|(
literal|"/auth"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|authPaths
init|=
name|S3Guard
operator|.
name|getAuthoritativePaths
argument_list|(
name|fs
argument_list|)
decl_stmt|;
try|try
block|{
name|Path
name|totalMismatch
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"/non-auth"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|S3Guard
operator|.
name|allowAuthoritative
argument_list|(
name|totalMismatch
argument_list|,
name|fs
argument_list|,
literal|false
argument_list|,
name|authPaths
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|prefixMatch
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"/authoritative"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|S3Guard
operator|.
name|allowAuthoritative
argument_list|(
name|prefixMatch
argument_list|,
name|fs
argument_list|,
literal|false
argument_list|,
name|authPaths
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|directoryMatch
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"/auth/oritative"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|S3Guard
operator|.
name|allowAuthoritative
argument_list|(
name|directoryMatch
argument_list|,
name|fs
argument_list|,
literal|false
argument_list|,
name|authPaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUpFS
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

