begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ProvisionedThroughputDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DynamoDBMetadataStore
operator|.
name|READ_CAPACITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DynamoDBMetadataStore
operator|.
name|WRITE_CAPACITY
import|;
end_import

begin_comment
comment|/**  * Tuple of read and write capacity of a DDB table.  */
end_comment

begin_class
DECL|class|DDBCapacities
class|class
name|DDBCapacities
block|{
DECL|field|read
DECL|field|write
specifier|private
specifier|final
name|long
name|read
decl_stmt|,
name|write
decl_stmt|;
DECL|method|DDBCapacities (long read, long write)
name|DDBCapacities
parameter_list|(
name|long
name|read
parameter_list|,
name|long
name|write
parameter_list|)
block|{
name|this
operator|.
name|read
operator|=
name|read
expr_stmt|;
name|this
operator|.
name|write
operator|=
name|write
expr_stmt|;
block|}
DECL|method|getRead ()
specifier|public
name|long
name|getRead
parameter_list|()
block|{
return|return
name|read
return|;
block|}
DECL|method|getWrite ()
specifier|public
name|long
name|getWrite
parameter_list|()
block|{
return|return
name|write
return|;
block|}
DECL|method|getReadStr ()
name|String
name|getReadStr
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|read
argument_list|)
return|;
block|}
DECL|method|getWriteStr ()
name|String
name|getWriteStr
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|write
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DDBCapacities
name|that
init|=
operator|(
name|DDBCapacities
operator|)
name|o
decl_stmt|;
return|return
name|read
operator|==
name|that
operator|.
name|read
operator|&&
name|write
operator|==
name|that
operator|.
name|write
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|read
argument_list|,
name|write
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Capacities{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"read="
argument_list|)
operator|.
name|append
argument_list|(
name|read
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", write="
argument_list|)
operator|.
name|append
argument_list|(
name|write
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Is the the capacity that of an On-Demand table?    * @return true if the capacities are both 0.    */
DECL|method|isOnDemandTable ()
specifier|public
name|boolean
name|isOnDemandTable
parameter_list|()
block|{
return|return
name|read
operator|==
literal|0
operator|&&
name|write
operator|==
literal|0
return|;
block|}
comment|/**    * Given a diagnostics map from a DDB store, extract the capacities.    * @param diagnostics diagnostics map to examine.    * @return the capacities    * @throws AssertionError if the fields are missing.    */
DECL|method|extractCapacities ( final Map<String, String> diagnostics)
specifier|public
specifier|static
name|DDBCapacities
name|extractCapacities
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
parameter_list|)
block|{
name|String
name|read
init|=
name|diagnostics
operator|.
name|get
argument_list|(
name|READ_CAPACITY
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"No "
operator|+
name|READ_CAPACITY
operator|+
literal|" attribute in diagnostics"
argument_list|,
name|read
argument_list|)
expr_stmt|;
return|return
operator|new
name|DDBCapacities
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|read
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|diagnostics
operator|.
name|get
argument_list|(
name|WRITE_CAPACITY
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Given a throughput information from table.describe(), build    * a DDBCapacities object.    * @param throughput throughput description.    * @return the capacities    */
DECL|method|extractCapacities ( ProvisionedThroughputDescription throughput)
specifier|public
specifier|static
name|DDBCapacities
name|extractCapacities
parameter_list|(
name|ProvisionedThroughputDescription
name|throughput
parameter_list|)
block|{
return|return
operator|new
name|DDBCapacities
argument_list|(
name|throughput
operator|.
name|getReadCapacityUnits
argument_list|()
argument_list|,
name|throughput
operator|.
name|getWriteCapacityUnits
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

