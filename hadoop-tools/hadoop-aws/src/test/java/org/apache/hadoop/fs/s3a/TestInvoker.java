begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|SdkBaseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|ProvisionedThroughputExceededException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AmazonS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ConnectTimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Invoker
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|verifyExceptionClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test the {@link Invoker} code and the associated {@link S3ARetryPolicy}.  *  * Some of the tests look at how Connection Timeout Exceptions are processed.  * Because of how the AWS libraries shade the classes, there have been some  * regressions here during development. These tests are intended to verify that  * the current match process based on classname works.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableNotThrown"
argument_list|)
DECL|class|TestInvoker
specifier|public
class|class
name|TestInvoker
extends|extends
name|Assert
block|{
comment|/** Configuration to use for short retry intervals. */
DECL|field|FAST_RETRY_CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|FAST_RETRY_CONF
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConnectTimeoutException
DECL|field|HADOOP_CONNECTION_TIMEOUT_EX
name|HADOOP_CONNECTION_TIMEOUT_EX
init|=
operator|new
name|ConnectTimeoutException
argument_list|(
literal|"hadoop"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Local
operator|.
name|ConnectTimeoutException
DECL|field|LOCAL_CONNECTION_TIMEOUT_EX
name|LOCAL_CONNECTION_TIMEOUT_EX
init|=
operator|new
name|Local
operator|.
name|ConnectTimeoutException
argument_list|(
literal|"local"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ConnectTimeoutException
DECL|field|HTTP_CONNECTION_TIMEOUT_EX
name|HTTP_CONNECTION_TIMEOUT_EX
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ConnectTimeoutException
argument_list|(
literal|"apache"
argument_list|)
decl_stmt|;
DECL|field|SOCKET_TIMEOUT_EX
specifier|private
specifier|static
specifier|final
name|SocketTimeoutException
name|SOCKET_TIMEOUT_EX
init|=
operator|new
name|SocketTimeoutException
argument_list|(
literal|"socket"
argument_list|)
decl_stmt|;
comment|/**    * What retry limit to use.    */
DECL|field|ACTIVE_RETRY_LIMIT
specifier|private
specifier|static
specifier|final
name|int
name|ACTIVE_RETRY_LIMIT
init|=
name|RETRY_LIMIT_DEFAULT
decl_stmt|;
comment|/**    * A retry count guaranteed to be out of range.    */
DECL|field|RETRIES_TOO_MANY
specifier|private
specifier|static
specifier|final
name|int
name|RETRIES_TOO_MANY
init|=
name|ACTIVE_RETRY_LIMIT
operator|+
literal|10
decl_stmt|;
comment|/**    * A count of retry attempts guaranteed to be within the permitted range.    */
DECL|field|SAFE_RETRY_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|SAFE_RETRY_COUNT
init|=
literal|5
decl_stmt|;
static|static
block|{
name|FAST_RETRY_CONF
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|String
name|interval
init|=
literal|"10ms"
decl_stmt|;
name|FAST_RETRY_CONF
operator|.
name|set
argument_list|(
name|RETRY_INTERVAL
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|FAST_RETRY_CONF
operator|.
name|set
argument_list|(
name|RETRY_THROTTLE_INTERVAL
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|FAST_RETRY_CONF
operator|.
name|setInt
argument_list|(
name|RETRY_LIMIT
argument_list|,
name|ACTIVE_RETRY_LIMIT
argument_list|)
expr_stmt|;
name|FAST_RETRY_CONF
operator|.
name|setInt
argument_list|(
name|RETRY_THROTTLE_LIMIT
argument_list|,
name|ACTIVE_RETRY_LIMIT
argument_list|)
expr_stmt|;
block|}
DECL|field|RETRY_POLICY
specifier|private
specifier|static
specifier|final
name|S3ARetryPolicy
name|RETRY_POLICY
init|=
operator|new
name|S3ARetryPolicy
argument_list|(
name|FAST_RETRY_CONF
argument_list|)
decl_stmt|;
DECL|field|retryCount
specifier|private
name|int
name|retryCount
decl_stmt|;
DECL|field|invoker
specifier|private
name|Invoker
name|invoker
init|=
operator|new
name|Invoker
argument_list|(
name|RETRY_POLICY
argument_list|,
parameter_list|(
name|text
parameter_list|,
name|e
parameter_list|,
name|retries
parameter_list|,
name|idempotent
parameter_list|)
lambda|->
name|retryCount
operator|++
argument_list|)
decl_stmt|;
DECL|field|CLIENT_TIMEOUT_EXCEPTION
specifier|private
specifier|static
specifier|final
name|AmazonClientException
name|CLIENT_TIMEOUT_EXCEPTION
init|=
operator|new
name|AmazonClientException
argument_list|(
operator|new
name|Local
operator|.
name|ConnectTimeoutException
argument_list|(
literal|"timeout"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|BAD_REQUEST
specifier|private
specifier|static
specifier|final
name|AmazonServiceException
name|BAD_REQUEST
init|=
name|serviceException
argument_list|(
name|AWSBadRequestException
operator|.
name|STATUS_CODE
argument_list|,
literal|"bad request"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|resetCounters
argument_list|()
expr_stmt|;
block|}
DECL|method|serviceException (int code, String text)
specifier|private
specifier|static
name|AmazonServiceException
name|serviceException
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|AmazonServiceException
name|ex
init|=
operator|new
name|AmazonServiceException
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStatusCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
return|return
name|ex
return|;
block|}
DECL|method|createS3Exception (int code)
specifier|private
specifier|static
name|AmazonS3Exception
name|createS3Exception
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
name|createS3Exception
argument_list|(
name|code
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createS3Exception (int code, String message, Throwable inner)
specifier|private
specifier|static
name|AmazonS3Exception
name|createS3Exception
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|inner
parameter_list|)
block|{
name|AmazonS3Exception
name|ex
init|=
operator|new
name|AmazonS3Exception
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStatusCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|inner
argument_list|)
expr_stmt|;
return|return
name|ex
return|;
block|}
DECL|method|verifyTranslated ( int status, Class<E> expected)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|void
name|verifyTranslated
parameter_list|(
name|int
name|status
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
name|expected
argument_list|,
name|createS3Exception
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTranslated (Class<E> clazz, SdkBaseException exception)
specifier|private
specifier|static
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|E
name|verifyTranslated
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|,
name|SdkBaseException
name|exception
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|verifyExceptionClass
argument_list|(
name|clazz
argument_list|,
name|translateException
argument_list|(
literal|"test"
argument_list|,
literal|"/"
argument_list|,
name|exception
argument_list|)
argument_list|)
return|;
block|}
DECL|method|resetCounters ()
specifier|private
name|void
name|resetCounters
parameter_list|()
block|{
name|retryCount
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test503isThrottled ()
specifier|public
name|void
name|test503isThrottled
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
literal|503
argument_list|,
name|AWSServiceThrottledException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testS3500isStatus500Exception ()
specifier|public
name|void
name|testS3500isStatus500Exception
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTranslated
argument_list|(
literal|500
argument_list|,
name|AWSStatus500Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test500isStatus500Exception ()
specifier|public
name|void
name|test500isStatus500Exception
parameter_list|()
throws|throws
name|Exception
block|{
name|AmazonServiceException
name|ex
init|=
operator|new
name|AmazonServiceException
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStatusCode
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|verifyTranslated
argument_list|(
name|AWSStatus500Exception
operator|.
name|class
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ConnectTimeoutException
operator|.
name|class
argument_list|)
DECL|method|testExtractConnectTimeoutException ()
specifier|public
name|void
name|testExtractConnectTimeoutException
parameter_list|()
throws|throws
name|Throwable
block|{
throw|throw
name|extractException
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|ExecutionException
argument_list|(
operator|new
name|AmazonClientException
argument_list|(
name|LOCAL_CONNECTION_TIMEOUT_EX
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SocketTimeoutException
operator|.
name|class
argument_list|)
DECL|method|testExtractSocketTimeoutException ()
specifier|public
name|void
name|testExtractSocketTimeoutException
parameter_list|()
throws|throws
name|Throwable
block|{
throw|throw
name|extractException
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|ExecutionException
argument_list|(
operator|new
name|AmazonClientException
argument_list|(
name|SOCKET_TIMEOUT_EX
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
comment|/**    * Make an assertion about a retry policy.    * @param text text for error message    * @param policy policy to check against    * @param expected expected action    * @param ex exception to analyze    * @param retries number of times there has already been a retry    * @param idempotent whether or not the operation is idempotent    * @throws Exception if the retry policy raises it    * @throws AssertionError if the returned action was not that expected.    */
DECL|method|assertRetryAction (String text, S3ARetryPolicy policy, RetryPolicy.RetryAction expected, Exception ex, int retries, boolean idempotent)
specifier|private
name|void
name|assertRetryAction
parameter_list|(
name|String
name|text
parameter_list|,
name|S3ARetryPolicy
name|policy
parameter_list|,
name|RetryPolicy
operator|.
name|RetryAction
name|expected
parameter_list|,
name|Exception
name|ex
parameter_list|,
name|int
name|retries
parameter_list|,
name|boolean
name|idempotent
parameter_list|)
throws|throws
name|Exception
block|{
name|RetryPolicy
operator|.
name|RetryAction
name|outcome
init|=
name|policy
operator|.
name|shouldRetry
argument_list|(
name|ex
argument_list|,
name|retries
argument_list|,
literal|0
argument_list|,
name|idempotent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expected
operator|.
name|action
operator|.
name|equals
argument_list|(
name|outcome
operator|.
name|action
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s Expected action %s from shouldRetry(%s, %s, %s), but got"
operator|+
literal|" %s"
argument_list|,
name|text
argument_list|,
name|expected
argument_list|,
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|retries
argument_list|,
name|idempotent
argument_list|,
name|outcome
operator|.
name|action
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRetryThrottled ()
specifier|public
name|void
name|testRetryThrottled
parameter_list|()
throws|throws
name|Throwable
block|{
name|S3ARetryPolicy
name|policy
init|=
name|RETRY_POLICY
decl_stmt|;
name|IOException
name|ex
init|=
name|translateException
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|,
name|newThrottledException
argument_list|()
argument_list|)
decl_stmt|;
name|assertRetryAction
argument_list|(
literal|"Expected retry on first throttle"
argument_list|,
name|policy
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RETRY
argument_list|,
name|ex
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|retries
init|=
name|SAFE_RETRY_COUNT
decl_stmt|;
name|assertRetryAction
argument_list|(
literal|"Expected retry on repeated throttle"
argument_list|,
name|policy
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RETRY
argument_list|,
name|ex
argument_list|,
name|retries
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertRetryAction
argument_list|(
literal|"Expected retry on non-idempotent throttle"
argument_list|,
name|policy
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RETRY
argument_list|,
name|ex
argument_list|,
name|retries
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRetryThrottledDDB ()
specifier|public
name|void
name|testRetryThrottledDDB
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertRetryAction
argument_list|(
literal|"Expected retry on connection timeout"
argument_list|,
name|RETRY_POLICY
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RETRY
argument_list|,
operator|new
name|ProvisionedThroughputExceededException
argument_list|(
literal|"IOPs"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|newThrottledException ()
specifier|protected
name|AmazonServiceException
name|newThrottledException
parameter_list|()
block|{
return|return
name|serviceException
argument_list|(
name|AWSServiceThrottledException
operator|.
name|STATUS_CODE
argument_list|,
literal|"throttled"
argument_list|)
return|;
block|}
comment|/**    * Repeatedly retry until a throttle eventually stops being raised.    */
annotation|@
name|Test
DECL|method|testRetryOnThrottle ()
specifier|public
name|void
name|testRetryOnThrottle
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|invoker
operator|.
name|retry
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|counter
operator|.
name|incrementAndGet
argument_list|()
operator|<
literal|5
condition|)
block|{
throw|throw
name|newThrottledException
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Non-idempotent operations fail on anything which isn't a throttle    * or connectivity problem.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AWSBadRequestException
operator|.
name|class
argument_list|)
DECL|method|testNoRetryOfBadRequestNonIdempotent ()
specifier|public
name|void
name|testNoRetryOfBadRequestNonIdempotent
parameter_list|()
throws|throws
name|Throwable
block|{
name|invoker
operator|.
name|retry
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
name|serviceException
argument_list|(
literal|400
argument_list|,
literal|"bad request"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * AWS nested socket problems.    */
annotation|@
name|Test
DECL|method|testRetryAWSConnectivity ()
specifier|public
name|void
name|testRetryAWSConnectivity
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|invoker
operator|.
name|retry
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|counter
operator|.
name|incrementAndGet
argument_list|()
operator|<
name|ACTIVE_RETRY_LIMIT
condition|)
block|{
throw|throw
name|CLIENT_TIMEOUT_EXCEPTION
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACTIVE_RETRY_LIMIT
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Repeatedly retry until eventually a bad request succeeds.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AWSBadRequestException
operator|.
name|class
argument_list|)
DECL|method|testRetryBadRequestNotIdempotent ()
specifier|public
name|void
name|testRetryBadRequestNotIdempotent
parameter_list|()
throws|throws
name|Throwable
block|{
name|invoker
operator|.
name|retry
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
name|BAD_REQUEST
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConnectionRetryPolicyIdempotent ()
specifier|public
name|void
name|testConnectionRetryPolicyIdempotent
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertRetryAction
argument_list|(
literal|"Expected retry on connection timeout"
argument_list|,
name|RETRY_POLICY
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RETRY
argument_list|,
name|HADOOP_CONNECTION_TIMEOUT_EX
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertRetryAction
argument_list|(
literal|"Expected connection timeout failure"
argument_list|,
name|RETRY_POLICY
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|FAIL
argument_list|,
name|HADOOP_CONNECTION_TIMEOUT_EX
argument_list|,
name|RETRIES_TOO_MANY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Even on a non-idempotent call, connection failures are considered    * retryable.    */
annotation|@
name|Test
DECL|method|testConnectionRetryPolicyNonIdempotent ()
specifier|public
name|void
name|testConnectionRetryPolicyNonIdempotent
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertRetryAction
argument_list|(
literal|"Expected retry on connection timeout"
argument_list|,
name|RETRY_POLICY
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RETRY
argument_list|,
name|HADOOP_CONNECTION_TIMEOUT_EX
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Interrupted IOEs are not retryable.    */
annotation|@
name|Test
DECL|method|testInterruptedIOExceptionRetry ()
specifier|public
name|void
name|testInterruptedIOExceptionRetry
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertRetryAction
argument_list|(
literal|"Expected retry on connection timeout"
argument_list|,
name|RETRY_POLICY
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|FAIL
argument_list|,
operator|new
name|InterruptedIOException
argument_list|(
literal|"interrupted"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnshadedConnectionTimeoutExceptionMatching ()
specifier|public
name|void
name|testUnshadedConnectionTimeoutExceptionMatching
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// connection timeout exceptions are special, but as AWS shades
comment|// theirs, we need to string match them
name|verifyTranslated
argument_list|(
name|ConnectTimeoutException
operator|.
name|class
argument_list|,
operator|new
name|AmazonClientException
argument_list|(
name|HTTP_CONNECTION_TIMEOUT_EX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShadedConnectionTimeoutExceptionMatching ()
specifier|public
name|void
name|testShadedConnectionTimeoutExceptionMatching
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// connection timeout exceptions are special, but as AWS shades
comment|// theirs, we need to string match them
name|verifyTranslated
argument_list|(
name|ConnectTimeoutException
operator|.
name|class
argument_list|,
operator|new
name|AmazonClientException
argument_list|(
name|LOCAL_CONNECTION_TIMEOUT_EX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShadedConnectionTimeoutExceptionNotMatching ()
specifier|public
name|void
name|testShadedConnectionTimeoutExceptionNotMatching
parameter_list|()
throws|throws
name|Throwable
block|{
name|InterruptedIOException
name|ex
init|=
name|verifyTranslated
argument_list|(
name|InterruptedIOException
operator|.
name|class
argument_list|,
operator|new
name|AmazonClientException
argument_list|(
operator|new
name|Local
operator|.
name|NotAConnectTimeoutException
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|ConnectTimeoutException
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Test that NPEs aren't retried. Also verify that the    * catch counts are incremented, while the retry count isn't.    */
annotation|@
name|Test
DECL|method|testNPEsNotRetried ()
specifier|public
name|void
name|testNPEsNotRetried
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertRetryAction
argument_list|(
literal|"Expected NPE trigger failure"
argument_list|,
name|RETRY_POLICY
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|FAIL
argument_list|,
operator|new
name|NullPointerException
argument_list|(
literal|"oops"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// catch notification didn't see it
name|assertEquals
argument_list|(
literal|"retry count "
argument_list|,
literal|0
argument_list|,
name|retryCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Container for the local exceptions, to help keep visible which    * specific class of exception.    */
DECL|class|Local
specifier|private
specifier|static
class|class
name|Local
block|{
comment|/**      * A local exception with a name to match the expected one.      */
DECL|class|ConnectTimeoutException
specifier|private
specifier|static
class|class
name|ConnectTimeoutException
extends|extends
name|InterruptedIOException
block|{
DECL|method|ConnectTimeoutException (String s)
name|ConnectTimeoutException
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A local exception whose name should not match.      */
DECL|class|NotAConnectTimeoutException
specifier|private
specifier|static
class|class
name|NotAConnectTimeoutException
extends|extends
name|InterruptedIOException
block|{      }
block|}
annotation|@
name|Test
DECL|method|testQuietlyVoid ()
specifier|public
name|void
name|testQuietlyVoid
parameter_list|()
block|{
name|quietlyEval
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
name|HADOOP_CONNECTION_TIMEOUT_EX
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuietlyEvalReturnValueSuccess ()
specifier|public
name|void
name|testQuietlyEvalReturnValueSuccess
parameter_list|()
block|{
name|assertOptionalEquals
argument_list|(
literal|"quietly"
argument_list|,
literal|3
argument_list|,
name|quietlyEval
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuietlyEvalReturnValueFail ()
specifier|public
name|void
name|testQuietlyEvalReturnValueFail
parameter_list|()
block|{
comment|// use a variable so IDEs don't warn of numeric overflows
name|int
name|d
init|=
literal|0
decl_stmt|;
name|assertOptionalUnset
argument_list|(
literal|"quietly"
argument_list|,
name|quietlyEval
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
literal|3
operator|/
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDynamoDBThrottleConversion ()
specifier|public
name|void
name|testDynamoDBThrottleConversion
parameter_list|()
throws|throws
name|Throwable
block|{
name|ProvisionedThroughputExceededException
name|exceededException
init|=
operator|new
name|ProvisionedThroughputExceededException
argument_list|(
literal|"iops"
argument_list|)
decl_stmt|;
name|AWSServiceThrottledException
name|ddb
init|=
name|verifyTranslated
argument_list|(
name|AWSServiceThrottledException
operator|.
name|class
argument_list|,
name|exceededException
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isThrottleException
argument_list|(
name|exceededException
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isThrottleException
argument_list|(
name|ddb
argument_list|)
argument_list|)
expr_stmt|;
name|assertRetryAction
argument_list|(
literal|"Expected throttling retry"
argument_list|,
name|RETRY_POLICY
argument_list|,
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RETRY
argument_list|,
name|ddb
argument_list|,
name|SAFE_RETRY_COUNT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// and briefly attempt an operation
name|CatchCallback
name|catcher
init|=
operator|new
name|CatchCallback
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|invoked
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|invoker
operator|.
name|retry
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|catcher
argument_list|,
parameter_list|()
lambda|->
block|{
if|if
condition|(
operator|!
name|invoked
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
throw|throw
name|exceededException
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// to verify that the ex was translated by the time it
comment|// got to the callback
name|verifyExceptionClass
argument_list|(
name|AWSServiceThrottledException
operator|.
name|class
argument_list|,
name|catcher
operator|.
name|lastException
argument_list|)
expr_stmt|;
block|}
comment|/**    * Catch the exception and preserve it for later queries.    */
DECL|class|CatchCallback
specifier|private
specifier|static
specifier|final
class|class
name|CatchCallback
implements|implements
name|Retried
block|{
DECL|field|lastException
specifier|private
name|IOException
name|lastException
decl_stmt|;
annotation|@
name|Override
DECL|method|onFailure (String text, IOException exception, int retries, boolean idempotent)
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|text
parameter_list|,
name|IOException
name|exception
parameter_list|,
name|int
name|retries
parameter_list|,
name|boolean
name|idempotent
parameter_list|)
block|{
name|lastException
operator|=
name|exception
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

