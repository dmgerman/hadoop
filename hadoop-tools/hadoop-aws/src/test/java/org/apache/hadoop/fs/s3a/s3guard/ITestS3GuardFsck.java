begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.s3guard
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|AbstractS3ATestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|AUTHORITATIVE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|touch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|METADATASTORE_AUTHORITATIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|S3_METADATA_STORE_IMPL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|awaitFileStatus
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|metadataStorePersistsAuthoritativeBit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|removeBaseAndBucketOverrides
import|;
end_import

begin_comment
comment|/**  * Integration tests for the S3Guard Fsck against a dyamodb backed metadata  * store.  */
end_comment

begin_class
DECL|class|ITestS3GuardFsck
specifier|public
class|class
name|ITestS3GuardFsck
extends|extends
name|AbstractS3ATestBase
block|{
DECL|field|guardedFs
specifier|private
name|S3AFileSystem
name|guardedFs
decl_stmt|;
DECL|field|rawFs
specifier|private
name|S3AFileSystem
name|rawFs
decl_stmt|;
DECL|field|metadataStore
specifier|private
name|MetadataStore
name|metadataStore
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// These test will fail if no ms
name|assumeTrue
argument_list|(
literal|"FS needs to have a metadatastore."
argument_list|,
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"Metadatastore should persist authoritative bit"
argument_list|,
name|metadataStorePersistsAuthoritativeBit
argument_list|(
name|fs
operator|.
name|getMetadataStore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|guardedFs
operator|=
name|fs
expr_stmt|;
name|metadataStore
operator|=
name|fs
operator|.
name|getMetadataStore
argument_list|()
expr_stmt|;
comment|// create raw fs without s3guard
name|rawFs
operator|=
name|createUnguardedFS
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Raw FS still has S3Guard "
operator|+
name|rawFs
argument_list|,
name|rawFs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|guardedFs
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|guardedFs
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|rawFs
argument_list|)
expr_stmt|;
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a test filesystem which is always unguarded.    * This filesystem MUST be closed in test teardown.    * @return the new FS    */
DECL|method|createUnguardedFS ()
specifier|private
name|S3AFileSystem
name|createUnguardedFS
parameter_list|()
throws|throws
name|Exception
block|{
name|S3AFileSystem
name|testFS
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
name|testFS
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|testFS
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|removeBaseAndBucketOverrides
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|config
argument_list|,
name|S3_METADATA_STORE_IMPL
argument_list|,
name|METADATASTORE_AUTHORITATIVE
argument_list|,
name|AUTHORITATIVE_PATH
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fs2
init|=
operator|new
name|S3AFileSystem
argument_list|()
decl_stmt|;
name|fs2
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|fs2
return|;
block|}
annotation|@
name|Test
DECL|method|testIDetectNoMetadataEntry ()
specifier|public
name|void
name|testIDetectNoMetadataEntry
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
name|touchRawAndWaitRaw
argument_list|(
name|file
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
operator|.
name|ComparePair
name|pair
init|=
name|comparePairs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|NO_METADATA_ENTRY
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// delete the working directory with all of its contents
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIDetectNoParentEntry ()
specifier|public
name|void
name|testIDetectNoParentEntry
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
name|touchGuardedAndWaitRaw
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// delete the parent from the MS
name|metadataStore
operator|.
name|forgetMetadata
argument_list|(
name|cwd
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// check the parent that it does not exist
name|checkForViolationInPairs
argument_list|(
name|cwd
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|NO_METADATA_ENTRY
argument_list|)
expr_stmt|;
comment|// check the child that there's no parent entry.
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|NO_PARENT_ENTRY
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIDetectParentIsAFile ()
specifier|public
name|void
name|testIDetectParentIsAFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
name|touchGuardedAndWaitRaw
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// modify the cwd metadata and set that it's not a directory
specifier|final
name|S3AFileStatus
name|newParentFile
init|=
name|MetadataStoreTestBase
operator|.
name|basicFileStatus
argument_list|(
name|cwd
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|newParentFile
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// check the parent that it does not exist
name|checkForViolationInPairs
argument_list|(
name|cwd
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|DIR_IN_S3_FILE_IN_MS
argument_list|)
expr_stmt|;
comment|// check the child that the parent is a file.
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|PARENT_IS_A_FILE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIDetectParentTombstoned ()
specifier|public
name|void
name|testIDetectParentTombstoned
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
name|touchGuardedAndWaitRaw
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// modify the parent metadata and set that it's not a directory
specifier|final
name|PathMetadata
name|cwdPmd
init|=
name|metadataStore
operator|.
name|get
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|cwdPmd
operator|.
name|setIsDeleted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
name|cwdPmd
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
comment|// check the child that the parent is tombstoned
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|PARENT_TOMBSTONED
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIDetectDirInS3FileInMs ()
specifier|public
name|void
name|testIDetectDirInS3FileInMs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// create a file with guarded fs
name|mkdirs
argument_list|(
name|cwd
argument_list|)
expr_stmt|;
name|awaitFileStatus
argument_list|(
name|guardedFs
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
comment|// modify the cwd metadata and set that it's not a directory
specifier|final
name|S3AFileStatus
name|newParentFile
init|=
name|MetadataStoreTestBase
operator|.
name|basicFileStatus
argument_list|(
name|cwd
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|newParentFile
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// check the child that the dir in s3 is a file in the ms
name|checkForViolationInPairs
argument_list|(
name|cwd
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|DIR_IN_S3_FILE_IN_MS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIDetectFileInS3DirInMs ()
specifier|public
name|void
name|testIDetectFileInS3DirInMs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
name|touchGuardedAndWaitRaw
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// modify the cwd metadata and set that it's not a directory
specifier|final
name|S3AFileStatus
name|newFile
init|=
name|MetadataStoreTestBase
operator|.
name|basicFileStatus
argument_list|(
name|file
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// check the child that the dir in s3 is a file in the ms
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|FILE_IN_S3_DIR_IN_MS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIAuthoritativeDirectoryContentMismatch ()
specifier|public
name|void
name|testIAuthoritativeDirectoryContentMismatch
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"Authoritative directory listings should be enabled for this "
operator|+
literal|"test"
argument_list|,
name|guardedFs
operator|.
name|hasAuthoritativeMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
comment|// first dir listing will be correct
specifier|final
name|Path
name|cwdCorrect
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fileC1
init|=
operator|new
name|Path
argument_list|(
name|cwdCorrect
argument_list|,
literal|"fileC1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fileC2
init|=
operator|new
name|Path
argument_list|(
name|cwdCorrect
argument_list|,
literal|"fileC2"
argument_list|)
decl_stmt|;
comment|// second dir listing will be incorrect: missing entry from Dynamo
specifier|final
name|Path
name|cwdIncorrect
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fileIc1
init|=
operator|new
name|Path
argument_list|(
name|cwdIncorrect
argument_list|,
literal|"fileC1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fileIc2
init|=
operator|new
name|Path
argument_list|(
name|cwdIncorrect
argument_list|,
literal|"fileC2"
argument_list|)
decl_stmt|;
try|try
block|{
name|touchGuardedAndWaitRaw
argument_list|(
name|fileC1
argument_list|)
expr_stmt|;
name|touchGuardedAndWaitRaw
argument_list|(
name|fileC2
argument_list|)
expr_stmt|;
name|touchGuardedAndWaitRaw
argument_list|(
name|fileIc1
argument_list|)
expr_stmt|;
comment|// get listing from ms and set it authoritative
specifier|final
name|DirListingMetadata
name|dlmC
init|=
name|metadataStore
operator|.
name|listChildren
argument_list|(
name|cwdCorrect
argument_list|)
decl_stmt|;
specifier|final
name|DirListingMetadata
name|dlmIc
init|=
name|metadataStore
operator|.
name|listChildren
argument_list|(
name|cwdIncorrect
argument_list|)
decl_stmt|;
name|dlmC
operator|.
name|setAuthoritative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dlmIc
operator|.
name|setAuthoritative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
name|dlmC
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
name|dlmIc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// add a file raw so the listing will be different.
name|touchRawAndWaitRaw
argument_list|(
name|fileIc2
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|pairsCorrect
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwdCorrect
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|pairsIncorrect
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwdIncorrect
argument_list|)
decl_stmt|;
comment|// Assert that the correct dir does not contain the violation.
name|assertTrue
argument_list|(
name|pairsCorrect
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|cwdCorrect
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that the incorrect listing contains the violation.
name|checkForViolationInPairs
argument_list|(
name|cwdIncorrect
argument_list|,
name|pairsIncorrect
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|AUTHORITATIVE_DIRECTORY_CONTENT_MISMATCH
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|fileC1
argument_list|,
name|fileC2
argument_list|,
name|fileIc1
argument_list|,
name|fileIc2
argument_list|,
name|cwdCorrect
argument_list|,
name|cwdIncorrect
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIDetectLengthMismatch ()
specifier|public
name|void
name|testIDetectLengthMismatch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// create a file with guarded fs
name|touchGuardedAndWaitRaw
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// modify the file metadata so the length will not match
specifier|final
name|S3AFileStatus
name|newFile
init|=
name|MetadataStoreTestBase
operator|.
name|basicFileStatus
argument_list|(
name|file
argument_list|,
literal|9999
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Assert that the correct dir does not contain the violation.
name|assertTrue
argument_list|(
name|comparePairs
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|cwd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that the incorrect file meta contains the violation.
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|LENGTH_MISMATCH
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIDetectModTimeMismatch ()
specifier|public
name|void
name|testIDetectModTimeMismatch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// create a file with guarded fs
name|touchGuardedAndWaitRaw
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// modify the parent meta entry so the MOD_TIME will surely be up to date
specifier|final
name|FileStatus
name|oldCwdFileStatus
init|=
name|rawFs
operator|.
name|getFileStatus
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
specifier|final
name|S3AFileStatus
name|newCwdFileStatus
init|=
name|MetadataStoreTestBase
operator|.
name|basicFileStatus
argument_list|(
name|cwd
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|oldCwdFileStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
decl_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|newCwdFileStatus
argument_list|)
argument_list|)
expr_stmt|;
comment|// modify the file metadata so the length will not match
specifier|final
name|S3AFileStatus
name|newFileStatus
init|=
name|MetadataStoreTestBase
operator|.
name|basicFileStatus
argument_list|(
name|file
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|newFileStatus
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Assert that the correct dir does not contain the violation.
name|assertTrue
argument_list|(
name|comparePairs
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|cwd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the file meta that there's a violation.
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|MOD_TIME_MISMATCH
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIEtagMismatch ()
specifier|public
name|void
name|testIEtagMismatch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
name|touchGuardedAndWaitRaw
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// modify the file metadata so the etag will not match
specifier|final
name|S3AFileStatus
name|newFileStatus
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|file
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
literal|"etag"
argument_list|,
literal|"versionId"
argument_list|)
decl_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|newFileStatus
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// check the child that there's a BLOCKSIZE_MISMATCH
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|ETAG_MISMATCH
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testINoEtag ()
specifier|public
name|void
name|testINoEtag
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// create a file1 with guarded fs
name|touchGuardedAndWaitRaw
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|touchGuardedAndWaitRaw
argument_list|(
name|file2
argument_list|)
expr_stmt|;
comment|// modify the file1 metadata so there's no etag
specifier|final
name|S3AFileStatus
name|newFile1Status
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|"versionId"
argument_list|)
decl_stmt|;
specifier|final
name|S3AFileStatus
name|newFile2Status
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|file2
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
literal|"etag"
argument_list|,
literal|"versionId"
argument_list|)
decl_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|newFile1Status
argument_list|)
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
operator|new
name|PathMetadata
argument_list|(
name|newFile2Status
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// check file 1 that there's NO_ETAG
name|checkForViolationInPairs
argument_list|(
name|file1
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|NO_ETAG
argument_list|)
expr_stmt|;
comment|// check the child that there's no NO_ETAG violation
name|checkNoViolationInPairs
argument_list|(
name|file2
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|NO_ETAG
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTombstonedInMsNotDeletedInS3 ()
specifier|public
name|void
name|testTombstonedInMsNotDeletedInS3
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// create a file with guarded fs
name|touchGuardedAndWaitRaw
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// set isDeleted flag in ms to true (tombstone item)
specifier|final
name|PathMetadata
name|fileMeta
init|=
name|metadataStore
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fileMeta
operator|.
name|setIsDeleted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
name|fileMeta
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|compareS3ToMs
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// check if the violation is there
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|TOMBSTONED_IN_MS_NOT_DELETED_IN_S3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|checkDdbInternalConsistency ()
specifier|public
name|void
name|checkDdbInternalConsistency
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|DynamoDBMetadataStore
name|ms
init|=
operator|(
name|DynamoDBMetadataStore
operator|)
name|guardedFs
operator|.
name|getMetadataStore
argument_list|()
decl_stmt|;
name|s3GuardFsck
operator|.
name|checkDdbInternalConsistency
argument_list|(
operator|new
name|Path
argument_list|(
literal|"s3a://"
operator|+
name|guardedFs
operator|.
name|getBucket
argument_list|()
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDdbInternalNoLastUpdatedField ()
specifier|public
name|void
name|testDdbInternalNoLastUpdatedField
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|S3AFileStatus
name|s3AFileStatus
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|file
argument_list|,
literal|100
argument_list|,
literal|"test"
argument_list|,
literal|"etag"
argument_list|,
literal|"version"
argument_list|)
decl_stmt|;
specifier|final
name|PathMetadata
name|pathMetadata
init|=
operator|new
name|PathMetadata
argument_list|(
name|s3AFileStatus
argument_list|)
decl_stmt|;
name|pathMetadata
operator|.
name|setLastUpdated
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
name|pathMetadata
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|checkDdbInternalConsistency
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// check if the violation is there
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|NO_LASTUPDATED_FIELD
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDdbInternalOrphanEntry ()
specifier|public
name|void
name|testDdbInternalOrphanEntry
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"directory"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|S3AFileStatus
name|s3AFileStatus
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|file
argument_list|,
literal|100
argument_list|,
literal|"test"
argument_list|,
literal|"etag"
argument_list|,
literal|"version"
argument_list|)
decl_stmt|;
specifier|final
name|PathMetadata
name|pathMetadata
init|=
operator|new
name|PathMetadata
argument_list|(
name|s3AFileStatus
argument_list|)
decl_stmt|;
name|pathMetadata
operator|.
name|setLastUpdated
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
name|pathMetadata
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|forgetMetadata
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|checkDdbInternalConsistency
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
comment|// check if the violation is there
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|ORPHAN_DDB_ENTRY
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDdbInternalParentIsAFile ()
specifier|public
name|void
name|testDdbInternalParentIsAFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"directory"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|S3AFileStatus
name|s3AFileStatus
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|file
argument_list|,
literal|100
argument_list|,
literal|"test"
argument_list|,
literal|"etag"
argument_list|,
literal|"version"
argument_list|)
decl_stmt|;
specifier|final
name|PathMetadata
name|pathMetadata
init|=
operator|new
name|PathMetadata
argument_list|(
name|s3AFileStatus
argument_list|)
decl_stmt|;
name|pathMetadata
operator|.
name|setLastUpdated
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
name|pathMetadata
argument_list|)
expr_stmt|;
specifier|final
name|S3AFileStatus
name|dirAsFile
init|=
name|MetadataStoreTestBase
operator|.
name|basicFileStatus
argument_list|(
name|parentDir
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|PathMetadata
name|dirAsFilePm
init|=
operator|new
name|PathMetadata
argument_list|(
name|dirAsFile
argument_list|)
decl_stmt|;
name|dirAsFilePm
operator|.
name|setLastUpdated
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
name|dirAsFilePm
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|checkDdbInternalConsistency
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
comment|// check if the violation is there
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|PARENT_IS_A_FILE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDdbInternalParentTombstoned ()
specifier|public
name|void
name|testDdbInternalParentTombstoned
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|cwd
init|=
name|path
argument_list|(
literal|"/"
operator|+
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
name|cwd
argument_list|,
literal|"directory"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|S3AFileStatus
name|s3AFileStatus
init|=
operator|new
name|S3AFileStatus
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|file
argument_list|,
literal|100
argument_list|,
literal|"test"
argument_list|,
literal|"etag"
argument_list|,
literal|"version"
argument_list|)
decl_stmt|;
specifier|final
name|PathMetadata
name|pathMetadata
init|=
operator|new
name|PathMetadata
argument_list|(
name|s3AFileStatus
argument_list|)
decl_stmt|;
name|pathMetadata
operator|.
name|setLastUpdated
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|put
argument_list|(
name|pathMetadata
argument_list|)
expr_stmt|;
name|metadataStore
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|S3GuardFsck
name|s3GuardFsck
init|=
operator|new
name|S3GuardFsck
argument_list|(
name|rawFs
argument_list|,
name|metadataStore
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
init|=
name|s3GuardFsck
operator|.
name|checkDdbInternalConsistency
argument_list|(
name|cwd
argument_list|)
decl_stmt|;
comment|// check if the violation is there
name|assertComparePairsSize
argument_list|(
name|comparePairs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkForViolationInPairs
argument_list|(
name|file
argument_list|,
name|comparePairs
argument_list|,
name|S3GuardFsck
operator|.
name|Violation
operator|.
name|PARENT_TOMBSTONED
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|file
argument_list|,
name|cwd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertComparePairsSize ( List<S3GuardFsck.ComparePair> comparePairs, int num)
specifier|protected
name|void
name|assertComparePairsSize
parameter_list|(
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
parameter_list|,
name|int
name|num
parameter_list|)
block|{
name|Assertions
operator|.
name|assertThat
argument_list|(
name|comparePairs
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Number of compare pairs"
argument_list|)
operator|.
name|hasSize
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
DECL|method|touchGuardedAndWaitRaw (Path file)
specifier|private
name|void
name|touchGuardedAndWaitRaw
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|touchAndWait
argument_list|(
name|guardedFs
argument_list|,
name|rawFs
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|touchRawAndWaitRaw (Path file)
specifier|private
name|void
name|touchRawAndWaitRaw
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|touchAndWait
argument_list|(
name|rawFs
argument_list|,
name|rawFs
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|touchAndWait (FileSystem forTouch, FileSystem forWait, Path file)
specifier|private
name|void
name|touchAndWait
parameter_list|(
name|FileSystem
name|forTouch
parameter_list|,
name|FileSystem
name|forWait
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|touch
argument_list|(
name|forTouch
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|touch
argument_list|(
name|forWait
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|checkForViolationInPairs (Path file, List<S3GuardFsck.ComparePair> comparePairs, S3GuardFsck.Violation violation)
specifier|private
name|void
name|checkForViolationInPairs
parameter_list|(
name|Path
name|file
parameter_list|,
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
parameter_list|,
name|S3GuardFsck
operator|.
name|Violation
name|violation
parameter_list|)
block|{
specifier|final
name|S3GuardFsck
operator|.
name|ComparePair
name|childPair
init|=
name|comparePairs
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The pair should not be null."
argument_list|,
name|childPair
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The pair must contain a violation."
argument_list|,
name|childPair
operator|.
name|containsViolation
argument_list|()
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|childPair
operator|.
name|getViolations
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Violations in the pair"
argument_list|)
operator|.
name|contains
argument_list|(
name|violation
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNoViolationInPairs (Path file2, List<S3GuardFsck.ComparePair> comparePairs, S3GuardFsck.Violation violation)
specifier|private
name|void
name|checkNoViolationInPairs
parameter_list|(
name|Path
name|file2
parameter_list|,
name|List
argument_list|<
name|S3GuardFsck
operator|.
name|ComparePair
argument_list|>
name|comparePairs
parameter_list|,
name|S3GuardFsck
operator|.
name|Violation
name|violation
parameter_list|)
block|{
specifier|final
name|S3GuardFsck
operator|.
name|ComparePair
name|file2Pair
init|=
name|comparePairs
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|file2
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The pair should not be null."
argument_list|,
name|file2Pair
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|file2Pair
operator|.
name|getViolations
argument_list|()
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Violations in the pair"
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|violation
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanup (Path... paths)
specifier|private
name|void
name|cleanup
parameter_list|(
name|Path
modifier|...
name|paths
parameter_list|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
try|try
block|{
name|metadataStore
operator|.
name|forgetMetadata
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|rawFs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during cleanup."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

