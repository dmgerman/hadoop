begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|DirListingMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|s3guard
operator|.
name|S3Guard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|touch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
operator|.
name|METADATASTORE_AUTHORITATIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|isMetadataStoreAuthoritative
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|metadataStorePersistsAuthoritativeBit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * These tests are testing the S3Guard TTL (time to live) features.  */
end_comment

begin_class
DECL|class|ITestS3GuardTtl
specifier|public
class|class
name|ITestS3GuardTtl
extends|extends
name|AbstractS3ATestBase
block|{
comment|/**    * Patch the configuration - this test needs disabled filesystem caching.    * These tests modify the fs instance that would cause flaky tests.    * @return a configuration    */
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|configuration
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|S3ATestUtils
operator|.
name|disableFilesystemCaching
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|S3ATestUtils
operator|.
name|prepareTestConfiguration
argument_list|(
name|configuration
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testDirectoryListingAuthoritativeTtl ()
specifier|public
name|void
name|testDirectoryListingAuthoritativeTtl
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|S3AFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|fs
operator|.
name|hasMetadataStore
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MetadataStore
name|ms
init|=
name|fs
operator|.
name|getMetadataStore
argument_list|()
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"MetadataStore should be capable for authoritative "
operator|+
literal|"storage of directories to run this test."
argument_list|,
name|metadataStorePersistsAuthoritativeBit
argument_list|(
name|ms
argument_list|)
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"MetadataStore should be authoritative for this test"
argument_list|,
name|isMetadataStoreAuthoritative
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|S3Guard
operator|.
name|ITtlTimeProvider
name|mockTimeProvider
init|=
name|mock
argument_list|(
name|S3Guard
operator|.
name|ITtlTimeProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|S3Guard
operator|.
name|ITtlTimeProvider
name|restoreTimeProvider
init|=
name|fs
operator|.
name|getTtlTimeProvider
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setTtlTimeProvider
argument_list|(
name|mockTimeProvider
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTimeProvider
operator|.
name|getNow
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTimeProvider
operator|.
name|getAuthoritativeDirTtl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"ttl/"
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|path
argument_list|(
literal|"ttl/afile"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|touch
argument_list|(
name|fs
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// get an authoritative listing in ms
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// check if authoritative
name|DirListingMetadata
name|dirListing
init|=
name|S3Guard
operator|.
name|listChildrenWithTtl
argument_list|(
name|ms
argument_list|,
name|dir
argument_list|,
name|mockTimeProvider
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Listing should be authoritative."
argument_list|,
name|dirListing
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
comment|// change the time, and assume it's not authoritative anymore
name|when
argument_list|(
name|mockTimeProvider
operator|.
name|getNow
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|102L
argument_list|)
expr_stmt|;
name|dirListing
operator|=
name|S3Guard
operator|.
name|listChildrenWithTtl
argument_list|(
name|ms
argument_list|,
name|dir
argument_list|,
name|mockTimeProvider
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Listing should not be authoritative."
argument_list|,
name|dirListing
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
comment|// get an authoritative listing in ms again - retain test
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// check if authoritative
name|dirListing
operator|=
name|S3Guard
operator|.
name|listChildrenWithTtl
argument_list|(
name|ms
argument_list|,
name|dir
argument_list|,
name|mockTimeProvider
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Listing shoud be authoritative after listStatus."
argument_list|,
name|dirListing
operator|.
name|isAuthoritative
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setTtlTimeProvider
argument_list|(
name|restoreTimeProvider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

