begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.auth.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|scale
operator|.
name|NanoTimerStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|scale
operator|.
name|S3AScaleTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3ATestUtils
operator|.
name|assumeSessionTestsEnabled
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|DELEGATION_TOKEN_BINDING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|auth
operator|.
name|delegation
operator|.
name|DelegationConstants
operator|.
name|DELEGATION_TOKEN_SESSION_BINDING
import|;
end_import

begin_comment
comment|/**  * This test has a unique name as it is designed to do something special:  * generate enough load on the AWS STS service to get some  * statistics on its throttling.  * This isn't documented anywhere, and for DT support it's  * important to know how much effort it takes to overload the service.  *  *<b>Important</b>  *  * If this test does trigger STS throttling, then all users in the same  * AWS account will experience throttling. This may be observable,  * in delays and, if the applications in use are not resilient to  * throttling events in STS, from application failures.  *  * Use with caution.  *<ol>  *<li>Don't run it on an AWS endpoint which other users in a  *   shared AWS account are actively using.</li>  *<li>Don't run it on the same AWS account which is being used for  *   any production service.</li>  *<li>And choose a time (weekend, etc) where the account is under-used.</li>  *<li>Warn your fellow users.</li>  *</ol>  *  * In experiments, the throttling recovers fast and appears restricted  * to the single STS service which the test overloads.  *  * @see<a href="https://github.com/steveloughran/datasets/releases/tag/tag_2018-09-17-aws">  *   AWS STS login throttling statistics</a>  */
end_comment

begin_class
DECL|class|ILoadTestSessionCredentials
specifier|public
class|class
name|ILoadTestSessionCredentials
extends|extends
name|S3AScaleTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ILoadTestSessionCredentials
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|THREADS
specifier|protected
specifier|static
specifier|final
name|int
name|THREADS
init|=
literal|100
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ExecutorService
name|executor
init|=
name|HadoopExecutors
operator|.
name|newFixedThreadPool
argument_list|(
name|THREADS
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"DelegationTokenFetcher #%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CompletionService
argument_list|<
name|Outcome
argument_list|>
DECL|field|completionService
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|executor
argument_list|)
decl_stmt|;
DECL|field|dataDir
specifier|private
name|File
name|dataDir
decl_stmt|;
annotation|@
name|Override
DECL|method|createScaleConfiguration ()
specifier|protected
name|Configuration
name|createScaleConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createScaleConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DELEGATION_TOKEN_BINDING
argument_list|,
name|getDelegationBinding
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|MAXIMUM_CONNECTIONS
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|THREADS
argument_list|,
name|Constants
operator|.
name|DEFAULT_MAXIMUM_CONNECTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|MAX_ERROR_RETRIES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Which DT binding class to use.    * @return the binding config option.    */
DECL|method|getDelegationBinding ()
specifier|protected
name|String
name|getDelegationBinding
parameter_list|()
block|{
return|return
name|DELEGATION_TOKEN_SESSION_BINDING
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|assumeSessionTestsEnabled
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|S3AFileSystem
name|fileSystem
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No delegation tokens in FS"
argument_list|,
name|fileSystem
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
name|dataDir
operator|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
literal|"kerberos"
argument_list|)
expr_stmt|;
name|dataDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
DECL|method|getFilePrefix ()
specifier|protected
name|String
name|getFilePrefix
parameter_list|()
block|{
return|return
literal|"session"
return|;
block|}
annotation|@
name|Test
DECL|method|testCreate10Tokens ()
specifier|public
name|void
name|testCreate10Tokens
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|file
init|=
name|fetchTokens
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|String
name|csv
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CSV data\n{}"
argument_list|,
name|csv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateManyTokens ()
specifier|public
name|void
name|testCreateManyTokens
parameter_list|()
throws|throws
name|Throwable
block|{
name|fetchTokens
argument_list|(
literal|50000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fetch tokens.    * @param tokens number of tokens.    * @return file the timings were    * @throws Exception failure    */
DECL|method|fetchTokens (final int tokens)
specifier|private
name|File
name|fetchTokens
parameter_list|(
specifier|final
name|int
name|tokens
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|filename
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
name|getFilePrefix
argument_list|()
operator|+
literal|"-"
operator|+
name|tokens
operator|+
literal|".csv"
argument_list|)
decl_stmt|;
name|fetchTokens
argument_list|(
name|tokens
argument_list|,
name|filename
argument_list|)
expr_stmt|;
return|return
name|filename
return|;
block|}
comment|/**    * Fetch tokens.    * @param tokens number of tokens.    * @param csvFile file to save this to.    * @throws Exception failure    */
DECL|method|fetchTokens (final int tokens, final File csvFile)
specifier|private
name|void
name|fetchTokens
parameter_list|(
specifier|final
name|int
name|tokens
parameter_list|,
specifier|final
name|File
name|csvFile
parameter_list|)
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"Fetching %d tokens, saving log to %s"
argument_list|,
name|tokens
argument_list|,
name|csvFile
argument_list|)
expr_stmt|;
specifier|final
name|FileWriter
name|out
init|=
operator|new
name|FileWriter
argument_list|(
name|csvFile
argument_list|)
decl_stmt|;
name|Csvout
name|csvout
init|=
operator|new
name|Csvout
argument_list|(
name|out
argument_list|,
literal|"\t"
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
name|Outcome
operator|.
name|writeSchema
argument_list|(
name|csvout
argument_list|)
expr_stmt|;
specifier|final
name|S3AFileSystem
name|fileSystem
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|ContractTestUtils
operator|.
name|NanoTimer
name|jobTimer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|id
init|=
name|i
decl_stmt|;
name|completionService
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileSystem
operator|.
name|getDelegationToken
argument_list|(
literal|"Count "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
name|timer
operator|.
name|end
argument_list|(
literal|"Request"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Outcome
argument_list|(
name|id
argument_list|,
name|startTime
argument_list|,
name|timer
argument_list|,
name|ex
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
name|NanoTimerStats
name|stats
init|=
operator|new
name|NanoTimerStats
argument_list|(
literal|"Overall"
argument_list|)
decl_stmt|;
name|NanoTimerStats
name|success
init|=
operator|new
name|NanoTimerStats
argument_list|(
literal|"Successful"
argument_list|)
decl_stmt|;
name|NanoTimerStats
name|throttled
init|=
operator|new
name|NanoTimerStats
argument_list|(
literal|"Throttled"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Outcome
argument_list|>
name|throttledEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
condition|;
name|i
operator|++
control|)
block|{
name|Outcome
name|outcome
init|=
name|completionService
operator|.
name|take
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
name|outcome
operator|.
name|timer
decl_stmt|;
name|Exception
name|ex
init|=
name|outcome
operator|.
name|exception
decl_stmt|;
name|outcome
operator|.
name|writeln
argument_list|(
name|csvout
argument_list|)
expr_stmt|;
name|stats
operator|.
name|add
argument_list|(
name|timer
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
comment|// throttling event occurred.
name|LOG
operator|.
name|info
argument_list|(
literal|"Throttled at event {}"
argument_list|,
name|i
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|throttled
operator|.
name|add
argument_list|(
name|timer
argument_list|)
expr_stmt|;
name|throttledEvents
operator|.
name|add
argument_list|(
name|outcome
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|success
operator|.
name|add
argument_list|(
name|timer
argument_list|)
expr_stmt|;
block|}
block|}
name|csvout
operator|.
name|close
argument_list|()
expr_stmt|;
name|jobTimer
operator|.
name|end
argument_list|(
literal|"Execution of fetch calls"
argument_list|)
expr_stmt|;
comment|// now print the stats
name|LOG
operator|.
name|info
argument_list|(
literal|"Summary file is "
operator|+
name|csvFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Fetched {} tokens with {} throttle events\n: {}\n{}\n{}"
argument_list|,
name|tokens
argument_list|,
name|throttled
operator|.
name|getCount
argument_list|()
argument_list|,
name|stats
argument_list|,
name|throttled
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|double
name|duration
init|=
name|jobTimer
operator|.
name|duration
argument_list|()
decl_stmt|;
name|double
name|iops
init|=
name|tokens
operator|*
literal|1.0e9
operator|/
name|duration
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Effective IO rate is %3f operations/second"
argument_list|,
name|iops
argument_list|)
argument_list|)
expr_stmt|;
comment|// log at debug
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|throttledEvents
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
operator|(
name|outcome
lambda|->
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: duration: {}"
argument_list|,
name|outcome
operator|.
name|id
argument_list|,
name|outcome
operator|.
name|timer
operator|.
name|elapsedTimeMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Outcome of one of the load operations.    */
DECL|class|Outcome
specifier|private
specifier|static
class|class
name|Outcome
block|{
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|timer
specifier|private
specifier|final
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
decl_stmt|;
DECL|field|exception
specifier|private
specifier|final
name|Exception
name|exception
decl_stmt|;
DECL|method|Outcome (final int id, final long startTime, final ContractTestUtils.NanoTimer timer, final Exception exception)
name|Outcome
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|long
name|startTime
parameter_list|,
specifier|final
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
parameter_list|,
specifier|final
name|Exception
name|exception
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
block|}
comment|/**      * Write this record.      * @param out the csvout to write through.      * @return the csvout instance      * @throws IOException IO failure.      */
DECL|method|writeln (Csvout out)
specifier|public
name|Csvout
name|writeln
parameter_list|(
name|Csvout
name|out
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|out
operator|.
name|write
argument_list|(
name|id
argument_list|,
name|startTime
argument_list|,
name|exception
operator|==
literal|null
condition|?
literal|1
else|:
literal|0
argument_list|,
name|timer
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|timer
operator|.
name|getEndTime
argument_list|()
argument_list|,
name|timer
operator|.
name|duration
argument_list|()
argument_list|,
literal|'"'
operator|+
operator|(
name|exception
operator|==
literal|null
condition|?
literal|""
else|:
name|exception
operator|.
name|getMessage
argument_list|()
operator|)
operator|+
literal|'"'
argument_list|)
operator|.
name|newline
argument_list|()
return|;
block|}
comment|/**      * Write the schema of the outcome records.      * @param out CSV destinatin      * @throws IOException IO failure.      */
DECL|method|writeSchema (Csvout out)
specifier|public
specifier|static
name|void
name|writeSchema
parameter_list|(
name|Csvout
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"id"
argument_list|,
literal|"starttime"
argument_list|,
literal|"success"
argument_list|,
literal|"started"
argument_list|,
literal|"ended"
argument_list|,
literal|"duration"
argument_list|,
literal|"error"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

