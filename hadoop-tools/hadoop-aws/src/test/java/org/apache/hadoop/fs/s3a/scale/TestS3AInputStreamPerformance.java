begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3a.scale
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|scale
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3a
operator|.
name|S3AInstrumentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Look at the performance of S3a operations  */
end_comment

begin_class
DECL|class|TestS3AInputStreamPerformance
specifier|public
class|class
name|TestS3AInputStreamPerformance
extends|extends
name|S3AScaleTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestS3AInputStreamPerformance
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|s3aFS
specifier|private
name|S3AFileSystem
name|s3aFS
decl_stmt|;
DECL|field|testData
specifier|private
name|Path
name|testData
decl_stmt|;
DECL|field|testDataStatus
specifier|private
name|S3AFileStatus
name|testDataStatus
decl_stmt|;
DECL|field|in
specifier|private
name|FSDataInputStream
name|in
decl_stmt|;
DECL|field|streamStatistics
specifier|private
name|S3AInstrumentation
operator|.
name|InputStreamStatistics
name|streamStatistics
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
DECL|field|BIG_BLOCK_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BIG_BLOCK_SIZE
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
comment|/** Tests only run if the there is a named test file that can be read */
DECL|field|testDataAvailable
specifier|private
name|boolean
name|testDataAvailable
init|=
literal|true
decl_stmt|;
DECL|field|assumptionMessage
specifier|private
name|String
name|assumptionMessage
init|=
literal|"test file"
decl_stmt|;
comment|/**    * Open the FS and the test data. The input stream is always set up here.    * @throws IOException    */
annotation|@
name|Before
DECL|method|openFS ()
specifier|public
name|void
name|openFS
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|String
name|testFile
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|KEY_CSVTEST_FILE
argument_list|,
name|DEFAULT_CSVTEST_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|testFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assumptionMessage
operator|=
literal|"Empty test property: "
operator|+
name|KEY_CSVTEST_FILE
expr_stmt|;
name|testDataAvailable
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|testData
operator|=
operator|new
name|Path
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|s3aFS
operator|=
operator|(
name|S3AFileSystem
operator|)
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|testData
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|testDataStatus
operator|=
name|s3aFS
operator|.
name|getFileStatus
argument_list|(
name|testData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to read file {} specified in {}"
argument_list|,
name|testFile
argument_list|,
name|KEY_CSVTEST_FILE
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**    * Cleanup: close the stream, close the FS.    */
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|s3aFS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Declare that the test requires the CSV test dataset    */
DECL|method|requireCSVTestData ()
specifier|private
name|void
name|requireCSVTestData
parameter_list|()
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|assumptionMessage
argument_list|,
name|testDataAvailable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Open the test file with the read buffer specified in the setting    * {@link #KEY_READ_BUFFER_SIZE}    * @return the stream, wrapping an S3a one    * @throws IOException    */
DECL|method|openTestFile ()
name|FSDataInputStream
name|openTestFile
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|bufferSize
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|KEY_READ_BUFFER_SIZE
argument_list|,
name|DEFAULT_READ_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|stream
init|=
name|s3aFS
operator|.
name|open
argument_list|(
name|testData
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|streamStatistics
operator|=
name|getInputStreamStatistics
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|stream
return|;
block|}
comment|/**    * assert tha the stream was only ever opened once    */
DECL|method|assertStreamOpenedExactlyOnce ()
specifier|protected
name|void
name|assertStreamOpenedExactlyOnce
parameter_list|()
block|{
name|assertOpenOperationCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make an assertion count about the number of open operations    * @param expected the expected number    */
DECL|method|assertOpenOperationCount (int expected)
specifier|private
name|void
name|assertOpenOperationCount
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"open operations in "
operator|+
name|streamStatistics
argument_list|,
name|expected
argument_list|,
name|streamStatistics
operator|.
name|openOperations
argument_list|)
expr_stmt|;
block|}
comment|/**    * Log how long an IOP took, by dividing the total time by the    * count of operations, printing in a human-readable form    * @param timer timing data    * @param count IOP count.    */
DECL|method|logTimePerIOP (NanoTimer timer, long count)
specifier|protected
name|void
name|logTimePerIOP
parameter_list|(
name|NanoTimer
name|timer
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per IOP: {} nS"
argument_list|,
name|toHuman
argument_list|(
name|timer
operator|.
name|duration
argument_list|()
operator|/
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeToOpenAndReadWholeFileByByte ()
specifier|public
name|void
name|testTimeToOpenAndReadWholeFileByByte
parameter_list|()
throws|throws
name|Throwable
block|{
name|requireCSVTestData
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Open the test file %s and read it byte by byte"
argument_list|,
name|testData
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|testDataStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|NanoTimer
name|timeOpen
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|in
operator|=
name|openTestFile
argument_list|()
expr_stmt|;
name|timeOpen
operator|.
name|end
argument_list|(
literal|"Open stream"
argument_list|)
expr_stmt|;
name|NanoTimer
name|readTimer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|read
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|readTimer
operator|.
name|end
argument_list|(
literal|"Time to read %d bytes"
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|bandwidth
argument_list|(
name|readTimer
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not enough bytes were read)"
argument_list|,
name|len
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|long
name|nanosPerByte
init|=
name|readTimer
operator|.
name|nanosPerByte
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"An open() call has the equivalent duration of reading {} bytes"
argument_list|,
name|toHuman
argument_list|(
name|timeOpen
operator|.
name|duration
argument_list|()
operator|/
name|nanosPerByte
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeToOpenAndReadWholeFileBlocks ()
specifier|public
name|void
name|testTimeToOpenAndReadWholeFileBlocks
parameter_list|()
throws|throws
name|Throwable
block|{
name|requireCSVTestData
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Open the test file %s and read it in blocks of size %d"
argument_list|,
name|testData
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|testDataStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|in
operator|=
name|openTestFile
argument_list|()
expr_stmt|;
name|byte
index|[]
name|block
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
decl_stmt|;
name|NanoTimer
name|timer2
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
comment|// implicitly rounding down here
name|long
name|blockCount
init|=
name|len
operator|/
name|BLOCK_SIZE
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|remaining
init|=
name|BLOCK_SIZE
decl_stmt|;
name|NanoTimer
name|blockTimer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|int
name|reads
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|block
argument_list|,
name|offset
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|reads
operator|++
expr_stmt|;
if|if
condition|(
name|bytesRead
operator|==
literal|1
condition|)
block|{
break|break;
block|}
name|remaining
operator|-=
name|bytesRead
expr_stmt|;
name|offset
operator|+=
name|bytesRead
expr_stmt|;
name|count
operator|+=
name|bytesRead
expr_stmt|;
block|}
name|blockTimer
operator|.
name|end
argument_list|(
literal|"Reading block %d in %d reads"
argument_list|,
name|i
argument_list|,
name|reads
argument_list|)
expr_stmt|;
block|}
name|timer2
operator|.
name|end
argument_list|(
literal|"Time to read %d bytes in %d blocks"
argument_list|,
name|len
argument_list|,
name|blockCount
argument_list|)
expr_stmt|;
name|bandwidth
argument_list|(
name|timer2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|streamStatistics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLazySeekEnabled ()
specifier|public
name|void
name|testLazySeekEnabled
parameter_list|()
throws|throws
name|Throwable
block|{
name|requireCSVTestData
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Verify that seeks do not trigger any IO"
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|testDataStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|in
operator|=
name|openTestFile
argument_list|()
expr_stmt|;
name|NanoTimer
name|timer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|long
name|blockCount
init|=
name|len
operator|/
name|BLOCK_SIZE
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockCount
condition|;
name|i
operator|++
control|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|in
operator|.
name|getPos
argument_list|()
operator|+
name|BLOCK_SIZE
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|blockCount
operator|++
expr_stmt|;
name|timer
operator|.
name|end
argument_list|(
literal|"Time to execute %d seeks"
argument_list|,
name|blockCount
argument_list|)
expr_stmt|;
name|logTimePerIOP
argument_list|(
name|timer
argument_list|,
name|blockCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|streamStatistics
argument_list|)
expr_stmt|;
name|assertOpenOperationCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bytes read"
argument_list|,
literal|0
argument_list|,
name|streamStatistics
operator|.
name|bytesRead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadAheadDefault ()
specifier|public
name|void
name|testReadAheadDefault
parameter_list|()
throws|throws
name|Throwable
block|{
name|requireCSVTestData
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Verify that a series of forward skips within the readahead"
operator|+
literal|" range do not close and reopen the stream"
argument_list|)
expr_stmt|;
name|executeSeekReadSequence
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|Constants
operator|.
name|DEFAULT_READAHEAD_RANGE
argument_list|)
expr_stmt|;
name|assertStreamOpenedExactlyOnce
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadaheadOutOfRange ()
specifier|public
name|void
name|testReadaheadOutOfRange
parameter_list|()
throws|throws
name|Throwable
block|{
name|requireCSVTestData
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|=
name|openTestFile
argument_list|()
expr_stmt|;
name|in
operator|.
name|setReadahead
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Stream should have rejected the request "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testReadBigBlocksAvailableReadahead ()
specifier|public
name|void
name|testReadBigBlocksAvailableReadahead
parameter_list|()
throws|throws
name|Throwable
block|{
name|requireCSVTestData
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"set readahead to available bytes only"
argument_list|)
expr_stmt|;
name|executeSeekReadSequence
argument_list|(
name|BIG_BLOCK_SIZE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// expect that the stream will have had lots of opens
name|assertTrue
argument_list|(
literal|"not enough open operations in "
operator|+
name|streamStatistics
argument_list|,
name|streamStatistics
operator|.
name|openOperations
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadBigBlocksBigReadahead ()
specifier|public
name|void
name|testReadBigBlocksBigReadahead
parameter_list|()
throws|throws
name|Throwable
block|{
name|requireCSVTestData
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Read big blocks with a big readahead"
argument_list|)
expr_stmt|;
name|executeSeekReadSequence
argument_list|(
name|BIG_BLOCK_SIZE
argument_list|,
name|BIG_BLOCK_SIZE
operator|*
literal|2
argument_list|)
expr_stmt|;
name|assertStreamOpenedExactlyOnce
argument_list|()
expr_stmt|;
block|}
comment|/**    * Execute a seek+read sequence    * @param blockSize block size for seeks    * @param readahead what the readahead value of the stream should be    * @throws IOException IO problems    */
DECL|method|executeSeekReadSequence (long blockSize, long readahead)
specifier|protected
name|void
name|executeSeekReadSequence
parameter_list|(
name|long
name|blockSize
parameter_list|,
name|long
name|readahead
parameter_list|)
throws|throws
name|IOException
block|{
name|requireCSVTestData
argument_list|()
expr_stmt|;
name|long
name|len
init|=
name|testDataStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|in
operator|=
name|openTestFile
argument_list|()
expr_stmt|;
name|in
operator|.
name|setReadahead
argument_list|(
name|readahead
argument_list|)
expr_stmt|;
name|NanoTimer
name|timer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|long
name|blockCount
init|=
name|len
operator|/
name|blockSize
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading {} blocks, readahead = {}"
argument_list|,
name|blockCount
argument_list|,
name|readahead
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockCount
condition|;
name|i
operator|++
control|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|in
operator|.
name|getPos
argument_list|()
operator|+
name|blockSize
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// this is the read
name|assertTrue
argument_list|(
name|in
operator|.
name|read
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
name|timer
operator|.
name|end
argument_list|(
literal|"Time to execute %d seeks of distance %d with readahead = %d"
argument_list|,
name|blockCount
argument_list|,
name|blockSize
argument_list|,
name|readahead
argument_list|)
expr_stmt|;
name|logTimePerIOP
argument_list|(
name|timer
argument_list|,
name|blockCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Effective bandwidth {} MB/S"
argument_list|,
name|timer
operator|.
name|bandwidthDescription
argument_list|(
name|streamStatistics
operator|.
name|bytesRead
operator|-
name|streamStatistics
operator|.
name|bytesSkippedOnSeek
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|streamStatistics
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

