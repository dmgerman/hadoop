begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer.blockgenerator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|blockgenerator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/** Tests for block generation via {@link GenerateBlockImagesDriver}. */
end_comment

begin_class
DECL|class|TestBlockGen
specifier|public
class|class
name|TestBlockGen
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBlockGen
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dfsCluster
specifier|private
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|FS_IMAGE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FS_IMAGE_NAME
init|=
literal|"fsimage_0000000000000061740.xml"
decl_stmt|;
DECL|field|BLOCK_LIST_OUTPUT_DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BLOCK_LIST_OUTPUT_DIR_NAME
init|=
literal|"blockLists"
decl_stmt|;
DECL|field|tmpPath
specifier|private
name|Path
name|tmpPath
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started MiniDFSCluster"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|tmpPath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
name|String
name|fsImageFile
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|FS_IMAGE_NAME
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|fsImageFile
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|,
name|FS_IMAGE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockGen ()
specifier|public
name|void
name|testBlockGen
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Started test"
argument_list|)
expr_stmt|;
name|int
name|datanodeCount
init|=
literal|40
decl_stmt|;
name|GenerateBlockImagesDriver
name|driver
init|=
operator|new
name|GenerateBlockImagesDriver
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|driver
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-"
operator|+
name|GenerateBlockImagesDriver
operator|.
name|FSIMAGE_INPUT_PATH_ARG
block|,
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|,
name|FS_IMAGE_NAME
argument_list|)
operator|.
name|toString
argument_list|()
block|,
literal|"-"
operator|+
name|GenerateBlockImagesDriver
operator|.
name|BLOCK_IMAGE_OUTPUT_ARG
block|,
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|,
name|BLOCK_LIST_OUTPUT_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
block|,
literal|"-"
operator|+
name|GenerateBlockImagesDriver
operator|.
name|NUM_DATANODES_ARG
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|datanodeCount
argument_list|)
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|datanodeCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|idx
init|=
name|i
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|,
name|BLOCK_LIST_OUTPUT_DIR_NAME
argument_list|)
argument_list|,
parameter_list|(
name|path
parameter_list|)
lambda|->
name|path
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"dn%d-"
argument_list|,
name|idx
argument_list|)
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

