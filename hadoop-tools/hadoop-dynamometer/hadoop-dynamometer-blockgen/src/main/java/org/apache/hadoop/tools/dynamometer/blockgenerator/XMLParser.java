begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer.blockgenerator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|blockgenerator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * This class parses an fsimage file in XML format. It accepts the file  * line-by-line and maintains an internal state machine to keep track of  * contextual information. A single parser must process the entire file with the  * lines in the order they appear in the original file.  *  * A file may be spread across multiple lines, so we need to track the  * replication of the file we are currently processing to be aware of what the  * replication factor is for each block we encounter. This is why we require a  * single mapper.  *  * The format is illustrated below (line breaks for readability):  *<pre>{@code  *<inode><id>inode_ID<id/><type>inode_type</type>  *<replication>inode_replication</replication> [file attributes]<blocks>  *<block><id>XXX</id><genstamp>XXX</genstamp><numBytes>XXX</numBytes><block/>  *<blocks/><inode/>  * }</pre>  *  * This is true in both Hadoop 2 and 3.  */
end_comment

begin_class
DECL|class|XMLParser
class|class
name|XMLParser
block|{
DECL|field|BLOCK_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|BLOCK_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<block>"
operator|+
literal|"<id>(\\d+)</id>"
operator|+
literal|"<genstamp>(\\d+)</genstamp>"
operator|+
literal|"<numBytes>(\\d+)</numBytes>"
operator|+
literal|"</block>"
argument_list|)
decl_stmt|;
DECL|field|currentState
specifier|private
name|State
name|currentState
init|=
name|State
operator|.
name|DEFAULT
decl_stmt|;
DECL|field|currentReplication
specifier|private
name|short
name|currentReplication
decl_stmt|;
comment|/**    * Accept a single line of the XML file, and return a {@link BlockInfo} for    * any blocks contained within that line. Update internal state dependent on    * other XML values seen, e.g. the beginning of a file.    *    * @param line The XML line to parse.    * @return {@code BlockInfo}s for any blocks found.    */
DECL|method|parseLine (String line)
name|List
argument_list|<
name|BlockInfo
argument_list|>
name|parseLine
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentState
operator|==
name|State
operator|.
name|DEFAULT
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"<INodeSection>"
argument_list|)
condition|)
block|{
name|transitionTo
argument_list|(
name|State
operator|.
name|INODE_SECTION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"<inode>"
argument_list|)
condition|)
block|{
name|transitionTo
argument_list|(
name|State
operator|.
name|INODE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"<type>FILE</type>"
argument_list|)
condition|)
block|{
name|transitionTo
argument_list|(
name|State
operator|.
name|FILE
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|replicationStrings
init|=
name|valuesFromXMLString
argument_list|(
name|line
argument_list|,
literal|"replication"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|replicationStrings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|replicationStrings
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found %s replication strings"
argument_list|,
name|replicationStrings
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|transitionTo
argument_list|(
name|State
operator|.
name|FILE_WITH_REPLICATION
argument_list|)
expr_stmt|;
name|currentReplication
operator|=
name|Short
operator|.
name|parseShort
argument_list|(
name|replicationStrings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Matcher
name|blockMatcher
init|=
name|BLOCK_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BlockInfo
argument_list|>
name|blockInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|blockMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|currentState
operator|!=
name|State
operator|.
name|FILE_WITH_REPLICATION
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found a block string when in state: "
operator|+
name|currentState
argument_list|)
throw|;
block|}
name|long
name|id
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|blockMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|gs
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|blockMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|blockMatcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|blockInfos
operator|.
name|add
argument_list|(
operator|new
name|BlockInfo
argument_list|(
name|id
argument_list|,
name|gs
argument_list|,
name|size
argument_list|,
name|currentReplication
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"</inode>"
argument_list|)
condition|)
block|{
name|transitionTo
argument_list|(
name|State
operator|.
name|INODE_SECTION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"</INodeSection>"
argument_list|)
condition|)
block|{
name|transitionTo
argument_list|(
name|State
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|blockInfos
return|;
block|}
comment|/**    * Attempt to transition to another state.    *    * @param nextState The new state to transition to.    * @throws IOException If the transition from the current state to    *                     {@code nextState} is not allowed.    */
DECL|method|transitionTo (State nextState)
specifier|private
name|void
name|transitionTo
parameter_list|(
name|State
name|nextState
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentState
operator|.
name|transitionAllowed
argument_list|(
name|nextState
argument_list|)
condition|)
block|{
name|currentState
operator|=
name|nextState
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"State transition not allowed; from "
operator|+
name|currentState
operator|+
literal|" to "
operator|+
name|nextState
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param xml An XML string    * @param field The field whose value(s) should be extracted    * @return List of the field's values.    */
DECL|method|valuesFromXMLString (String xml, String field)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|valuesFromXMLString
parameter_list|(
name|String
name|xml
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<"
operator|+
name|field
operator|+
literal|">(.+?)</"
operator|+
name|field
operator|+
literal|">"
argument_list|)
operator|.
name|matcher
argument_list|(
name|xml
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|found
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|found
operator|.
name|add
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
DECL|enum|State
specifier|private
enum|enum
name|State
block|{
DECL|enumConstant|DEFAULT
name|DEFAULT
block|,
DECL|enumConstant|INODE_SECTION
name|INODE_SECTION
block|,
DECL|enumConstant|INODE
name|INODE
block|,
DECL|enumConstant|FILE
name|FILE
block|,
DECL|enumConstant|FILE_WITH_REPLICATION
name|FILE_WITH_REPLICATION
block|;
DECL|field|allowedTransitions
specifier|private
specifier|final
name|Set
argument_list|<
name|State
argument_list|>
name|allowedTransitions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|DEFAULT
operator|.
name|addTransitions
argument_list|(
name|DEFAULT
argument_list|,
name|INODE_SECTION
argument_list|)
expr_stmt|;
name|INODE_SECTION
operator|.
name|addTransitions
argument_list|(
name|DEFAULT
argument_list|,
name|INODE
argument_list|)
expr_stmt|;
name|INODE
operator|.
name|addTransitions
argument_list|(
name|INODE_SECTION
argument_list|,
name|FILE
argument_list|)
expr_stmt|;
name|FILE
operator|.
name|addTransitions
argument_list|(
name|INODE_SECTION
argument_list|,
name|FILE_WITH_REPLICATION
argument_list|)
expr_stmt|;
name|FILE_WITH_REPLICATION
operator|.
name|addTransitions
argument_list|(
name|INODE_SECTION
argument_list|)
expr_stmt|;
block|}
DECL|method|addTransitions (State... nextState)
specifier|private
name|void
name|addTransitions
parameter_list|(
name|State
modifier|...
name|nextState
parameter_list|)
block|{
name|allowedTransitions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nextState
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|transitionAllowed (State nextState)
name|boolean
name|transitionAllowed
parameter_list|(
name|State
name|nextState
parameter_list|)
block|{
return|return
name|allowedTransitions
operator|.
name|contains
argument_list|(
name|nextState
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

