begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer.blockgenerator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|blockgenerator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|LazyOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * This is the main driver class. It takes in the following arguments: -  * Required: input path of the fsImage from the HDFS cluster to be simulated -  * Required: output path for generated block image files for each Dynamometer  * DataNode - Required: Number of DataNodes to generate blocks for - Optional:  * Number of reducers to use for the job (defaults to number of DataNodes)  */
end_comment

begin_class
DECL|class|GenerateBlockImagesDriver
specifier|public
class|class
name|GenerateBlockImagesDriver
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|FSIMAGE_INPUT_PATH_ARG
specifier|public
specifier|static
specifier|final
name|String
name|FSIMAGE_INPUT_PATH_ARG
init|=
literal|"fsimage_input_path"
decl_stmt|;
DECL|field|BLOCK_IMAGE_OUTPUT_ARG
specifier|public
specifier|static
specifier|final
name|String
name|BLOCK_IMAGE_OUTPUT_ARG
init|=
literal|"block_image_output_dir"
decl_stmt|;
DECL|field|NUM_REDUCERS_ARG
specifier|public
specifier|static
specifier|final
name|String
name|NUM_REDUCERS_ARG
init|=
literal|"num_reducers"
decl_stmt|;
DECL|field|NUM_DATANODES_ARG
specifier|public
specifier|static
specifier|final
name|String
name|NUM_DATANODES_ARG
init|=
literal|"num_datanodes"
decl_stmt|;
DECL|field|NUM_DATANODES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NUM_DATANODES_KEY
init|=
literal|"dyno.blockgen.num.datanodes"
decl_stmt|;
DECL|method|GenerateBlockImagesDriver (Configuration conf)
specifier|public
name|GenerateBlockImagesDriver
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Shows this message"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"Input path of the XML fsImage"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|true
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Input path to the Hadoop fsImage XML file (required)"
argument_list|)
operator|.
name|create
argument_list|(
name|FSIMAGE_INPUT_PATH_ARG
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"BlockImage output directory"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|true
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Directory where the generated files containing the "
operator|+
literal|"block listing for each DataNode should be stored (required)"
argument_list|)
operator|.
name|create
argument_list|(
name|BLOCK_IMAGE_OUTPUT_ARG
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"Number of reducers"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Number of reducers for this job (defaults to number of datanodes)"
argument_list|)
operator|.
name|create
argument_list|(
name|NUM_REDUCERS_ARG
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"Number of datanodes"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|(
literal|true
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Number of DataNodes to create blocks for (required)"
argument_list|)
operator|.
name|create
argument_list|(
name|NUM_DATANODES_ARG
argument_list|)
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cli
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|200
argument_list|,
literal|"hadoop jar dynamometer-*.jar "
operator|+
literal|"org.apache.hadoop.tools.dynamometer.blockgenerator."
operator|+
literal|"GenerateBlockImagesDriver [options]"
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|String
name|fsImageInputPath
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
name|FSIMAGE_INPUT_PATH_ARG
argument_list|)
decl_stmt|;
name|String
name|blockImageOutputDir
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
name|BLOCK_IMAGE_OUTPUT_ARG
argument_list|)
decl_stmt|;
name|int
name|numDataNodes
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
name|NUM_DATANODES_ARG
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numReducers
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
name|NUM_REDUCERS_ARG
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|numDataNodes
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|blockImageOutputDir
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|getConf
argument_list|()
argument_list|,
literal|"Create blocksImages for Dynamometer"
argument_list|)
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|fsImageInputPath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|blockImagesDir
init|=
operator|new
name|Path
argument_list|(
name|blockImageOutputDir
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|blockImagesDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|blockImagesDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|NUM_DATANODES_KEY
argument_list|,
name|numDataNodes
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|GenerateBlockImagesDriver
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|NoSplitTextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|numReducers
argument_list|)
expr_stmt|;
name|LazyOutputFormat
operator|.
name|setOutputFormatClass
argument_list|(
name|job
argument_list|,
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|XMLParserMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|GenerateDNBlockInfosReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|BlockInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
return|return
name|success
condition|?
literal|0
else|:
literal|1
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|GenerateBlockImagesDriver
name|driver
init|=
operator|new
name|GenerateBlockImagesDriver
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|driver
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** A simple text input format that doesn't allow splitting of files. */
DECL|class|NoSplitTextInputFormat
specifier|public
specifier|static
class|class
name|NoSplitTextInputFormat
extends|extends
name|TextInputFormat
block|{
annotation|@
name|Override
DECL|method|isSplitable (JobContext context, Path file)
specifier|public
name|boolean
name|isSplitable
parameter_list|(
name|JobContext
name|context
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

