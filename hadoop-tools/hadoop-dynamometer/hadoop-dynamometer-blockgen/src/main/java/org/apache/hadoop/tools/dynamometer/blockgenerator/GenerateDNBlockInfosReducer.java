begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer.blockgenerator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|blockgenerator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|MultipleOutputs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This Reducer class generates a simple text file for each DN, listing the  * blocks to be generated.  *  * Input: {@link BlockInfo}'s from {@link XMLParserMapper}  *  * Output: A text file named as dni-XXX, where i is the ID of the DN and XXX is  * a reducer ID. Each line in the file is in format:  * blockID,blockGenStamp,blockSize  */
end_comment

begin_class
DECL|class|GenerateDNBlockInfosReducer
specifier|public
class|class
name|GenerateDNBlockInfosReducer
extends|extends
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|BlockInfo
argument_list|,
name|NullWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenerateDNBlockInfosReducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|multiOutputs
specifier|private
name|MultipleOutputs
argument_list|<
name|NullWritable
argument_list|,
name|Text
argument_list|>
name|multiOutputs
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ( Reducer<IntWritable, BlockInfo, NullWritable, Text>.Context context)
specifier|public
name|void
name|setup
parameter_list|(
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|BlockInfo
argument_list|,
name|NullWritable
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
parameter_list|)
block|{
name|multiOutputs
operator|=
operator|new
name|MultipleOutputs
argument_list|<>
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cleanup (Context context)
specifier|public
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|multiOutputs
operator|.
name|close
argument_list|()
expr_stmt|;
name|multiOutputs
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reduce (IntWritable key, Iterable<BlockInfo> values, Context context)
specifier|public
name|void
name|reduce
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Iterable
argument_list|<
name|BlockInfo
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|blockIndex
init|=
literal|0
decl_stmt|;
name|int
name|datanodeId
init|=
name|key
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|dnFile
init|=
literal|"dn"
operator|+
name|datanodeId
operator|+
literal|"-a-"
operator|+
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|BlockInfo
argument_list|>
name|it
init|=
name|values
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|startTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|endTimestamp
decl_stmt|;
name|Path
name|baseOutputPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|String
name|fullPath
init|=
operator|new
name|Path
argument_list|(
name|baseOutputPath
argument_list|,
name|dnFile
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Text
name|out
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BlockInfo
name|blockInfo
init|=
operator|new
name|BlockInfo
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|blockLine
init|=
name|blockInfo
operator|.
name|getBlockId
argument_list|()
operator|+
literal|","
operator|+
name|blockInfo
operator|.
name|getBlockGenerationStamp
argument_list|()
operator|+
literal|","
operator|+
name|blockInfo
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|out
operator|.
name|set
argument_list|(
name|blockLine
argument_list|)
expr_stmt|;
name|multiOutputs
operator|.
name|write
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|out
argument_list|,
name|fullPath
argument_list|)
expr_stmt|;
name|blockIndex
operator|++
expr_stmt|;
comment|// Report progress for every 1000 blocks
if|if
condition|(
name|blockIndex
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|progress
argument_list|()
expr_stmt|;
name|endTimestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time taken to process 1000 records in ms:"
operator|+
operator|(
name|endTimestamp
operator|-
name|startTimestamp
operator|)
argument_list|)
expr_stmt|;
name|startTimestamp
operator|=
name|endTimestamp
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of blocks processed:"
operator|+
name|blockIndex
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

