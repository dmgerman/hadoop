begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Options supplied to the Client which are then passed through to the  * ApplicationMaster.  */
end_comment

begin_class
DECL|class|AMOptions
specifier|final
class|class
name|AMOptions
block|{
DECL|field|NAMENODE_MEMORY_MB_ARG
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_MEMORY_MB_ARG
init|=
literal|"namenode_memory_mb"
decl_stmt|;
DECL|field|NAMENODE_MEMORY_MB_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_MEMORY_MB_DEFAULT
init|=
literal|"2048"
decl_stmt|;
DECL|field|NAMENODE_VCORES_ARG
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_VCORES_ARG
init|=
literal|"namenode_vcores"
decl_stmt|;
DECL|field|NAMENODE_VCORES_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_VCORES_DEFAULT
init|=
literal|"1"
decl_stmt|;
DECL|field|NAMENODE_NODELABEL_ARG
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_NODELABEL_ARG
init|=
literal|"namenode_nodelabel"
decl_stmt|;
DECL|field|NAMENODE_ARGS_ARG
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_ARGS_ARG
init|=
literal|"namenode_args"
decl_stmt|;
DECL|field|DATANODE_MEMORY_MB_ARG
specifier|public
specifier|static
specifier|final
name|String
name|DATANODE_MEMORY_MB_ARG
init|=
literal|"datanode_memory_mb"
decl_stmt|;
DECL|field|DATANODE_MEMORY_MB_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|DATANODE_MEMORY_MB_DEFAULT
init|=
literal|"2048"
decl_stmt|;
DECL|field|DATANODE_VCORES_ARG
specifier|public
specifier|static
specifier|final
name|String
name|DATANODE_VCORES_ARG
init|=
literal|"datanode_vcores"
decl_stmt|;
DECL|field|DATANODE_VCORES_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|DATANODE_VCORES_DEFAULT
init|=
literal|"1"
decl_stmt|;
DECL|field|DATANODE_NODELABEL_ARG
specifier|public
specifier|static
specifier|final
name|String
name|DATANODE_NODELABEL_ARG
init|=
literal|"datanode_nodelabel"
decl_stmt|;
DECL|field|DATANODE_ARGS_ARG
specifier|public
specifier|static
specifier|final
name|String
name|DATANODE_ARGS_ARG
init|=
literal|"datanode_args"
decl_stmt|;
DECL|field|NAMENODE_METRICS_PERIOD_ARG
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_METRICS_PERIOD_ARG
init|=
literal|"namenode_metrics_period"
decl_stmt|;
DECL|field|NAMENODE_METRICS_PERIOD_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_METRICS_PERIOD_DEFAULT
init|=
literal|"60"
decl_stmt|;
DECL|field|SHELL_ENV_ARG
specifier|public
specifier|static
specifier|final
name|String
name|SHELL_ENV_ARG
init|=
literal|"shell_env"
decl_stmt|;
DECL|field|DATANODES_PER_CLUSTER_ARG
specifier|public
specifier|static
specifier|final
name|String
name|DATANODES_PER_CLUSTER_ARG
init|=
literal|"datanodes_per_cluster"
decl_stmt|;
DECL|field|DATANODES_PER_CLUSTER_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|DATANODES_PER_CLUSTER_DEFAULT
init|=
literal|"1"
decl_stmt|;
DECL|field|DATANODE_LAUNCH_DELAY_ARG
specifier|public
specifier|static
specifier|final
name|String
name|DATANODE_LAUNCH_DELAY_ARG
init|=
literal|"datanode_launch_delay"
decl_stmt|;
DECL|field|DATANODE_LAUNCH_DELAY_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|DATANODE_LAUNCH_DELAY_DEFAULT
init|=
literal|"0s"
decl_stmt|;
DECL|field|NAMENODE_NAME_DIR_ARG
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_NAME_DIR_ARG
init|=
literal|"namenode_name_dir"
decl_stmt|;
DECL|field|NAMENODE_EDITS_DIR_ARG
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_EDITS_DIR_ARG
init|=
literal|"namenode_edits_dir"
decl_stmt|;
DECL|field|datanodeMemoryMB
specifier|private
specifier|final
name|int
name|datanodeMemoryMB
decl_stmt|;
DECL|field|datanodeVirtualCores
specifier|private
specifier|final
name|int
name|datanodeVirtualCores
decl_stmt|;
DECL|field|datanodeArgs
specifier|private
specifier|final
name|String
name|datanodeArgs
decl_stmt|;
DECL|field|datanodeNodeLabelExpression
specifier|private
specifier|final
name|String
name|datanodeNodeLabelExpression
decl_stmt|;
DECL|field|datanodesPerCluster
specifier|private
specifier|final
name|int
name|datanodesPerCluster
decl_stmt|;
DECL|field|datanodeLaunchDelay
specifier|private
specifier|final
name|String
name|datanodeLaunchDelay
decl_stmt|;
DECL|field|namenodeMemoryMB
specifier|private
specifier|final
name|int
name|namenodeMemoryMB
decl_stmt|;
DECL|field|namenodeVirtualCores
specifier|private
specifier|final
name|int
name|namenodeVirtualCores
decl_stmt|;
DECL|field|namenodeArgs
specifier|private
specifier|final
name|String
name|namenodeArgs
decl_stmt|;
DECL|field|namenodeNodeLabelExpression
specifier|private
specifier|final
name|String
name|namenodeNodeLabelExpression
decl_stmt|;
DECL|field|namenodeMetricsPeriod
specifier|private
specifier|final
name|int
name|namenodeMetricsPeriod
decl_stmt|;
DECL|field|namenodeNameDir
specifier|private
specifier|final
name|String
name|namenodeNameDir
decl_stmt|;
DECL|field|namenodeEditsDir
specifier|private
specifier|final
name|String
name|namenodeEditsDir
decl_stmt|;
comment|// Original shellEnv as passed in through arguments
DECL|field|originalShellEnv
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|originalShellEnv
decl_stmt|;
comment|// Extended shellEnv including custom environment variables
DECL|field|shellEnv
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|shellEnv
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:parameternumber"
argument_list|)
DECL|method|AMOptions (int datanodeMemoryMB, int datanodeVirtualCores, String datanodeArgs, String datanodeNodeLabelExpression, int datanodesPerCluster, String datanodeLaunchDelay, int namenodeMemoryMB, int namenodeVirtualCores, String namenodeArgs, String namenodeNodeLabelExpression, int namenodeMetricsPeriod, String namenodeNameDir, String namenodeEditsDir, Map<String, String> shellEnv)
specifier|private
name|AMOptions
parameter_list|(
name|int
name|datanodeMemoryMB
parameter_list|,
name|int
name|datanodeVirtualCores
parameter_list|,
name|String
name|datanodeArgs
parameter_list|,
name|String
name|datanodeNodeLabelExpression
parameter_list|,
name|int
name|datanodesPerCluster
parameter_list|,
name|String
name|datanodeLaunchDelay
parameter_list|,
name|int
name|namenodeMemoryMB
parameter_list|,
name|int
name|namenodeVirtualCores
parameter_list|,
name|String
name|namenodeArgs
parameter_list|,
name|String
name|namenodeNodeLabelExpression
parameter_list|,
name|int
name|namenodeMetricsPeriod
parameter_list|,
name|String
name|namenodeNameDir
parameter_list|,
name|String
name|namenodeEditsDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|shellEnv
parameter_list|)
block|{
name|this
operator|.
name|datanodeMemoryMB
operator|=
name|datanodeMemoryMB
expr_stmt|;
name|this
operator|.
name|datanodeVirtualCores
operator|=
name|datanodeVirtualCores
expr_stmt|;
name|this
operator|.
name|datanodeArgs
operator|=
name|datanodeArgs
expr_stmt|;
name|this
operator|.
name|datanodeNodeLabelExpression
operator|=
name|datanodeNodeLabelExpression
expr_stmt|;
name|this
operator|.
name|datanodesPerCluster
operator|=
name|datanodesPerCluster
expr_stmt|;
name|this
operator|.
name|datanodeLaunchDelay
operator|=
name|datanodeLaunchDelay
expr_stmt|;
name|this
operator|.
name|namenodeMemoryMB
operator|=
name|namenodeMemoryMB
expr_stmt|;
name|this
operator|.
name|namenodeVirtualCores
operator|=
name|namenodeVirtualCores
expr_stmt|;
name|this
operator|.
name|namenodeArgs
operator|=
name|namenodeArgs
expr_stmt|;
name|this
operator|.
name|namenodeNodeLabelExpression
operator|=
name|namenodeNodeLabelExpression
expr_stmt|;
name|this
operator|.
name|namenodeMetricsPeriod
operator|=
name|namenodeMetricsPeriod
expr_stmt|;
name|this
operator|.
name|namenodeNameDir
operator|=
name|namenodeNameDir
expr_stmt|;
name|this
operator|.
name|namenodeEditsDir
operator|=
name|namenodeEditsDir
expr_stmt|;
name|this
operator|.
name|originalShellEnv
operator|=
name|shellEnv
expr_stmt|;
name|this
operator|.
name|shellEnv
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|originalShellEnv
argument_list|)
expr_stmt|;
name|this
operator|.
name|shellEnv
operator|.
name|put
argument_list|(
name|DynoConstants
operator|.
name|NN_ADDITIONAL_ARGS_ENV
argument_list|,
name|this
operator|.
name|namenodeArgs
argument_list|)
expr_stmt|;
name|this
operator|.
name|shellEnv
operator|.
name|put
argument_list|(
name|DynoConstants
operator|.
name|DN_ADDITIONAL_ARGS_ENV
argument_list|,
name|this
operator|.
name|datanodeArgs
argument_list|)
expr_stmt|;
name|this
operator|.
name|shellEnv
operator|.
name|put
argument_list|(
name|DynoConstants
operator|.
name|NN_FILE_METRIC_PERIOD_ENV
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|namenodeMetricsPeriod
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|shellEnv
operator|.
name|put
argument_list|(
name|DynoConstants
operator|.
name|NN_NAME_DIR_ENV
argument_list|,
name|this
operator|.
name|namenodeNameDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|shellEnv
operator|.
name|put
argument_list|(
name|DynoConstants
operator|.
name|NN_EDITS_DIR_ENV
argument_list|,
name|this
operator|.
name|namenodeEditsDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies that arguments are valid; throws IllegalArgumentException if not.    */
DECL|method|verify (long maxMemory, int maxVcores)
name|void
name|verify
parameter_list|(
name|long
name|maxMemory
parameter_list|,
name|int
name|maxVcores
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|datanodeMemoryMB
operator|>
literal|0
operator|&&
name|datanodeMemoryMB
operator|<=
name|maxMemory
argument_list|,
literal|"datanodeMemoryMB (%s) must be between 0 and %s"
argument_list|,
name|datanodeMemoryMB
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|datanodeVirtualCores
operator|>
literal|0
operator|&&
name|datanodeVirtualCores
operator|<=
name|maxVcores
argument_list|,
literal|"datanodeVirtualCores (%s) must be between 0 and %s"
argument_list|,
name|datanodeVirtualCores
argument_list|,
name|maxVcores
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|namenodeMemoryMB
operator|>
literal|0
operator|&&
name|namenodeMemoryMB
operator|<=
name|maxMemory
argument_list|,
literal|"namenodeMemoryMB (%s) must be between 0 and %s"
argument_list|,
name|namenodeMemoryMB
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|namenodeVirtualCores
operator|>
literal|0
operator|&&
name|namenodeVirtualCores
operator|<=
name|maxVcores
argument_list|,
literal|"namenodeVirtualCores (%s) must be between 0 and %s"
argument_list|,
name|namenodeVirtualCores
argument_list|,
name|maxVcores
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|datanodesPerCluster
operator|>
literal|0
argument_list|,
literal|"datanodesPerCluster (%s) must be> 0"
argument_list|,
name|datanodesPerCluster
argument_list|)
expr_stmt|;
block|}
comment|/**    * Same as {@link #verify(long, int)} but does not set a max.    */
DECL|method|verify ()
name|void
name|verify
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|verify
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|addToVargs (List<String> vargs)
name|void
name|addToVargs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|vargs
parameter_list|)
block|{
name|vargs
operator|.
name|add
argument_list|(
literal|"--"
operator|+
name|DATANODE_MEMORY_MB_ARG
operator|+
literal|" "
operator|+
name|datanodeMemoryMB
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"--"
operator|+
name|DATANODE_VCORES_ARG
operator|+
literal|" "
operator|+
name|datanodeVirtualCores
argument_list|)
expr_stmt|;
name|addStringValToVargs
argument_list|(
name|vargs
argument_list|,
name|DATANODE_ARGS_ARG
argument_list|,
name|datanodeArgs
argument_list|)
expr_stmt|;
name|addStringValToVargs
argument_list|(
name|vargs
argument_list|,
name|DATANODE_NODELABEL_ARG
argument_list|,
name|datanodeNodeLabelExpression
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"--"
operator|+
name|DATANODES_PER_CLUSTER_ARG
operator|+
literal|" "
operator|+
name|datanodesPerCluster
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"--"
operator|+
name|DATANODE_LAUNCH_DELAY_ARG
operator|+
literal|" "
operator|+
name|datanodeLaunchDelay
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"--"
operator|+
name|NAMENODE_MEMORY_MB_ARG
operator|+
literal|" "
operator|+
name|namenodeMemoryMB
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"--"
operator|+
name|NAMENODE_VCORES_ARG
operator|+
literal|" "
operator|+
name|namenodeVirtualCores
argument_list|)
expr_stmt|;
name|addStringValToVargs
argument_list|(
name|vargs
argument_list|,
name|NAMENODE_ARGS_ARG
argument_list|,
name|namenodeArgs
argument_list|)
expr_stmt|;
name|addStringValToVargs
argument_list|(
name|vargs
argument_list|,
name|NAMENODE_NODELABEL_ARG
argument_list|,
name|namenodeNodeLabelExpression
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"--"
operator|+
name|NAMENODE_METRICS_PERIOD_ARG
operator|+
literal|" "
operator|+
name|namenodeMetricsPeriod
argument_list|)
expr_stmt|;
name|addStringValToVargs
argument_list|(
name|vargs
argument_list|,
name|NAMENODE_NAME_DIR_ARG
argument_list|,
name|namenodeNameDir
argument_list|)
expr_stmt|;
name|addStringValToVargs
argument_list|(
name|vargs
argument_list|,
name|NAMENODE_EDITS_DIR_ARG
argument_list|,
name|namenodeEditsDir
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|originalShellEnv
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|vargs
operator|.
name|add
argument_list|(
literal|"--"
operator|+
name|SHELL_ENV_ARG
operator|+
literal|" "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addStringValToVargs (List<String> vargs, String optionName, String val)
specifier|private
name|void
name|addStringValToVargs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|vargs
parameter_list|,
name|String
name|optionName
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|vargs
operator|.
name|add
argument_list|(
literal|"--"
operator|+
name|optionName
operator|+
literal|" \\\""
operator|+
name|val
operator|+
literal|"\\\""
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDataNodeMemoryMB ()
name|int
name|getDataNodeMemoryMB
parameter_list|()
block|{
return|return
name|datanodeMemoryMB
return|;
block|}
DECL|method|getDataNodeVirtualCores ()
name|int
name|getDataNodeVirtualCores
parameter_list|()
block|{
return|return
name|datanodeVirtualCores
return|;
block|}
DECL|method|getDataNodeNodeLabelExpression ()
name|String
name|getDataNodeNodeLabelExpression
parameter_list|()
block|{
return|return
name|datanodeNodeLabelExpression
return|;
block|}
DECL|method|getDataNodesPerCluster ()
name|int
name|getDataNodesPerCluster
parameter_list|()
block|{
return|return
name|datanodesPerCluster
return|;
block|}
DECL|method|getDataNodeLaunchDelaySec ()
name|long
name|getDataNodeLaunchDelaySec
parameter_list|()
block|{
comment|// Leverage the human-readable time parsing capabilities of Configuration
name|String
name|tmpConfKey
init|=
literal|"___temp_config_property___"
decl_stmt|;
name|Configuration
name|tmpConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|tmpConf
operator|.
name|set
argument_list|(
name|tmpConfKey
argument_list|,
name|datanodeLaunchDelay
argument_list|)
expr_stmt|;
return|return
name|tmpConf
operator|.
name|getTimeDuration
argument_list|(
name|tmpConfKey
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|getNameNodeMemoryMB ()
name|int
name|getNameNodeMemoryMB
parameter_list|()
block|{
return|return
name|namenodeMemoryMB
return|;
block|}
DECL|method|getNameNodeVirtualCores ()
name|int
name|getNameNodeVirtualCores
parameter_list|()
block|{
return|return
name|namenodeVirtualCores
return|;
block|}
DECL|method|getNameNodeNodeLabelExpression ()
name|String
name|getNameNodeNodeLabelExpression
parameter_list|()
block|{
return|return
name|namenodeNodeLabelExpression
return|;
block|}
DECL|method|getShellEnv ()
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getShellEnv
parameter_list|()
block|{
return|return
name|shellEnv
return|;
block|}
comment|/**    * Set all of the command line options relevant to this class into the passed    * {@link Options}.    *    * @param opts    *          Where to set the command line options.    */
DECL|method|setOptions (Options opts)
specifier|static
name|void
name|setOptions
parameter_list|(
name|Options
name|opts
parameter_list|)
block|{
name|opts
operator|.
name|addOption
argument_list|(
name|SHELL_ENV_ARG
argument_list|,
literal|true
argument_list|,
literal|"Environment for shell script. Specified as env_key=env_val pairs"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|NAMENODE_MEMORY_MB_ARG
argument_list|,
literal|true
argument_list|,
literal|"Amount of memory in MB to be requested to run the NN (default "
operator|+
name|NAMENODE_MEMORY_MB_DEFAULT
operator|+
literal|"). "
operator|+
literal|"Ignored unless the NameNode is run within YARN."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|NAMENODE_VCORES_ARG
argument_list|,
literal|true
argument_list|,
literal|"Amount of virtual cores to be requested to run the NN (default "
operator|+
name|NAMENODE_VCORES_DEFAULT
operator|+
literal|"). "
operator|+
literal|"Ignored unless the NameNode is run within YARN."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|NAMENODE_ARGS_ARG
argument_list|,
literal|true
argument_list|,
literal|"Additional arguments to add when starting the NameNode. "
operator|+
literal|"Ignored unless the NameNode is run within YARN."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|NAMENODE_NODELABEL_ARG
argument_list|,
literal|true
argument_list|,
literal|"The node label to specify for the container to use to "
operator|+
literal|"run the NameNode."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|NAMENODE_METRICS_PERIOD_ARG
argument_list|,
literal|true
argument_list|,
literal|"The period in seconds for the NameNode's metrics to be emitted to "
operator|+
literal|"file; if<=0, disables this functionality. Otherwise, a "
operator|+
literal|"metrics file will be stored in the container logs for the "
operator|+
literal|"NameNode (default "
operator|+
name|NAMENODE_METRICS_PERIOD_DEFAULT
operator|+
literal|")."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|NAMENODE_NAME_DIR_ARG
argument_list|,
literal|true
argument_list|,
literal|"The directory to use for the NameNode's name data directory. "
operator|+
literal|"If not specified, a location  within the container's working "
operator|+
literal|"directory will be used."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|NAMENODE_EDITS_DIR_ARG
argument_list|,
literal|true
argument_list|,
literal|"The directory to use for the NameNode's edits directory. "
operator|+
literal|"If not specified, a location  within the container's working "
operator|+
literal|"directory will be used."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|DATANODE_MEMORY_MB_ARG
argument_list|,
literal|true
argument_list|,
literal|"Amount of memory in MB to be requested to run the DNs (default "
operator|+
name|DATANODE_MEMORY_MB_DEFAULT
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|DATANODE_VCORES_ARG
argument_list|,
literal|true
argument_list|,
literal|"Amount of virtual cores to be requested to run the DNs (default "
operator|+
name|DATANODE_VCORES_DEFAULT
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|DATANODE_ARGS_ARG
argument_list|,
literal|true
argument_list|,
literal|"Additional arguments to add when starting the DataNodes."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|DATANODE_NODELABEL_ARG
argument_list|,
literal|true
argument_list|,
literal|"The node label to specify "
operator|+
literal|"for the container to use to run the DataNode."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|DATANODES_PER_CLUSTER_ARG
argument_list|,
literal|true
argument_list|,
literal|"How many simulated DataNodes to run within each YARN container "
operator|+
literal|"(default "
operator|+
name|DATANODES_PER_CLUSTER_DEFAULT
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|DATANODE_LAUNCH_DELAY_ARG
argument_list|,
literal|true
argument_list|,
literal|"The period over which to launch the DataNodes; this will "
operator|+
literal|"be used as the maximum delay and each DataNode container will "
operator|+
literal|"be launched with some random delay less than  this value. "
operator|+
literal|"Accepts human-readable time durations (e.g. 10s, 1m) (default "
operator|+
name|DATANODE_LAUNCH_DELAY_DEFAULT
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print usage"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize an {@code AMOptions} from a command line parser.    *    * @param cliParser    *          Where to initialize from.    * @return A new {@code AMOptions} filled out with options from the parser.    */
DECL|method|initFromParser (CommandLine cliParser)
specifier|static
name|AMOptions
name|initFromParser
parameter_list|(
name|CommandLine
name|cliParser
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|originalShellEnv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|SHELL_ENV_ARG
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|env
range|:
name|cliParser
operator|.
name|getOptionValues
argument_list|(
name|SHELL_ENV_ARG
argument_list|)
control|)
block|{
name|String
name|trimmed
init|=
name|env
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|trimmed
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|originalShellEnv
operator|.
name|put
argument_list|(
name|trimmed
argument_list|,
literal|""
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|key
init|=
name|trimmed
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|val
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|index
operator|<
operator|(
name|trimmed
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|val
operator|=
name|trimmed
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|originalShellEnv
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|AMOptions
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|DATANODE_MEMORY_MB_ARG
argument_list|,
name|DATANODE_MEMORY_MB_DEFAULT
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|DATANODE_VCORES_ARG
argument_list|,
name|DATANODE_VCORES_DEFAULT
argument_list|)
argument_list|)
argument_list|,
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|DATANODE_ARGS_ARG
argument_list|,
literal|""
argument_list|)
argument_list|,
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|DATANODE_NODELABEL_ARG
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|DATANODES_PER_CLUSTER_ARG
argument_list|,
name|DATANODES_PER_CLUSTER_DEFAULT
argument_list|)
argument_list|)
argument_list|,
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|DATANODE_LAUNCH_DELAY_ARG
argument_list|,
name|DATANODE_LAUNCH_DELAY_DEFAULT
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|NAMENODE_MEMORY_MB_ARG
argument_list|,
name|NAMENODE_MEMORY_MB_DEFAULT
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|NAMENODE_VCORES_ARG
argument_list|,
name|NAMENODE_VCORES_DEFAULT
argument_list|)
argument_list|)
argument_list|,
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|NAMENODE_ARGS_ARG
argument_list|,
literal|""
argument_list|)
argument_list|,
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|NAMENODE_NODELABEL_ARG
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|NAMENODE_METRICS_PERIOD_ARG
argument_list|,
name|NAMENODE_METRICS_PERIOD_DEFAULT
argument_list|)
argument_list|)
argument_list|,
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|NAMENODE_NAME_DIR_ARG
argument_list|,
literal|""
argument_list|)
argument_list|,
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|NAMENODE_EDITS_DIR_ARG
argument_list|,
literal|""
argument_list|)
argument_list|,
name|originalShellEnv
argument_list|)
return|;
block|}
block|}
end_class

end_unit

