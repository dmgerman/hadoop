begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementPolicyDefault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementStatus
import|;
end_import

begin_comment
comment|/**  * A BlockPlacementPolicy which always considered itself satisfied. This avoids  * the issue that the Dynamometer NameNode will complain about blocks being  * under-replicated because they're not being put on distinct racks.  */
end_comment

begin_class
DECL|class|BlockPlacementPolicyAlwaysSatisfied
specifier|public
class|class
name|BlockPlacementPolicyAlwaysSatisfied
extends|extends
name|BlockPlacementPolicyDefault
block|{
DECL|field|SATISFIED
specifier|private
specifier|static
specifier|final
name|BlockPlacementStatusSatisfied
name|SATISFIED
init|=
operator|new
name|BlockPlacementStatusSatisfied
argument_list|()
decl_stmt|;
DECL|class|BlockPlacementStatusSatisfied
specifier|private
specifier|static
class|class
name|BlockPlacementStatusSatisfied
implements|implements
name|BlockPlacementStatus
block|{
annotation|@
name|Override
DECL|method|isPlacementPolicySatisfied ()
specifier|public
name|boolean
name|isPlacementPolicySatisfied
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getErrorDescription ()
specifier|public
name|String
name|getErrorDescription
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|verifyBlockPlacement (DatanodeInfo[] locs, int numberOfReplicas)
specifier|public
name|BlockPlacementStatus
name|verifyBlockPlacement
parameter_list|(
name|DatanodeInfo
index|[]
name|locs
parameter_list|,
name|int
name|numberOfReplicas
parameter_list|)
block|{
return|return
name|SATISFIED
return|;
block|}
block|}
end_class

end_unit

