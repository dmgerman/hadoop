begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer.workloadgenerator.audit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|WorkloadDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|WorkloadMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
operator|.
name|AuditReplayMapper
operator|.
name|CommandType
operator|.
name|READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
operator|.
name|AuditReplayMapper
operator|.
name|CommandType
operator|.
name|WRITE
import|;
end_import

begin_comment
comment|/**  * AuditReplayMapper replays the given audit trace against the NameNode under  * test. Each mapper spawns a number of threads equal to the  * {@value NUM_THREADS_KEY} configuration (by default  * {@value NUM_THREADS_DEFAULT}) to use for replaying. Each mapper reads a  * single input file which will be consumed by all of the available threads. A  * {@link FileInputFormat} with splitting disabled is used so any files present  * in the input path directory (given by the {@value INPUT_PATH_KEY}  * configuration) will be used as input; one file per mapper. The expected  * format of these files is determined by the value of the  * {@value COMMAND_PARSER_KEY} configuration, which defaults to  * {@link AuditLogDirectParser}.  *<p>  * This generates a number of {@link org.apache.hadoop.mapreduce.Counter}  * values which can be used to get information into the replay, including the  * number of commands replayed, how many of them were "invalid" (threw an  * exception), how many were "late" (replayed later than they should have been),  * and the latency (from client perspective) of each command. If there are a  * large number of "late" commands, you likely need to increase the number of  * threads used and/or the number of mappers.  *<p>  * By default, commands will be replayed at the same rate as they were  * originally performed. However a rate factor can be specified via the  * {@value RATE_FACTOR_KEY} configuration; all of the (relative) timestamps will  * be divided by this rate factor, effectively changing the rate at which they  * are replayed. For example, a rate factor of 2 would make the replay occur  * twice as fast, and a rate factor of 0.5 would make it occur half as fast.  */
end_comment

begin_class
DECL|class|AuditReplayMapper
specifier|public
class|class
name|AuditReplayMapper
extends|extends
name|WorkloadMapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|INPUT_PATH_KEY
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_PATH_KEY
init|=
literal|"auditreplay.input-path"
decl_stmt|;
DECL|field|NUM_THREADS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NUM_THREADS_KEY
init|=
literal|"auditreplay.num-threads"
decl_stmt|;
DECL|field|NUM_THREADS_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|NUM_THREADS_DEFAULT
init|=
literal|1
decl_stmt|;
DECL|field|CREATE_BLOCKS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_BLOCKS_KEY
init|=
literal|"auditreplay.create-blocks"
decl_stmt|;
DECL|field|CREATE_BLOCKS_DEFAULT
specifier|public
specifier|static
specifier|final
name|boolean
name|CREATE_BLOCKS_DEFAULT
init|=
literal|true
decl_stmt|;
DECL|field|RATE_FACTOR_KEY
specifier|public
specifier|static
specifier|final
name|String
name|RATE_FACTOR_KEY
init|=
literal|"auditreplay.rate-factor"
decl_stmt|;
DECL|field|RATE_FACTOR_DEFAULT
specifier|public
specifier|static
specifier|final
name|double
name|RATE_FACTOR_DEFAULT
init|=
literal|1.0
decl_stmt|;
DECL|field|COMMAND_PARSER_KEY
specifier|public
specifier|static
specifier|final
name|String
name|COMMAND_PARSER_KEY
init|=
literal|"auditreplay.command-parser.class"
decl_stmt|;
DECL|field|COMMAND_PARSER_DEFAULT
specifier|public
specifier|static
specifier|final
name|Class
argument_list|<
name|AuditLogDirectParser
argument_list|>
name|COMMAND_PARSER_DEFAULT
init|=
name|AuditLogDirectParser
operator|.
name|class
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuditReplayMapper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// This is the maximum amount that the mapper should read ahead from the input
comment|// as compared to the replay time. Setting this to one minute avoids reading
comment|// too
comment|// many entries into memory simultaneously but ensures that the replay threads
comment|// should not ever run out of entries to replay.
DECL|field|MAX_READAHEAD_MS
specifier|private
specifier|static
specifier|final
name|long
name|MAX_READAHEAD_MS
init|=
literal|60000
decl_stmt|;
DECL|field|INDIVIDUAL_COMMANDS_COUNTER_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|INDIVIDUAL_COMMANDS_COUNTER_GROUP
init|=
literal|"INDIVIDUAL_COMMANDS"
decl_stmt|;
DECL|field|INDIVIDUAL_COMMANDS_LATENCY_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|INDIVIDUAL_COMMANDS_LATENCY_SUFFIX
init|=
literal|"_LATENCY"
decl_stmt|;
DECL|field|INDIVIDUAL_COMMANDS_INVALID_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|INDIVIDUAL_COMMANDS_INVALID_SUFFIX
init|=
literal|"_INVALID"
decl_stmt|;
DECL|field|INDIVIDUAL_COMMANDS_COUNT_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|INDIVIDUAL_COMMANDS_COUNT_SUFFIX
init|=
literal|"_COUNT"
decl_stmt|;
comment|/** {@link org.apache.hadoop.mapreduce.Counter} definitions for replay. */
DECL|enum|REPLAYCOUNTERS
specifier|public
enum|enum
name|REPLAYCOUNTERS
block|{
comment|// Total number of commands that were replayed
DECL|enumConstant|TOTALCOMMANDS
name|TOTALCOMMANDS
block|,
comment|// Total number of commands that returned an error during replay (incl
comment|// unsupported)
DECL|enumConstant|TOTALINVALIDCOMMANDS
name|TOTALINVALIDCOMMANDS
block|,
comment|// Total number of commands that are unsupported for replay
DECL|enumConstant|TOTALUNSUPPORTEDCOMMANDS
name|TOTALUNSUPPORTEDCOMMANDS
block|,
comment|// Total number of commands that were performed later than they should have
comment|// been
DECL|enumConstant|LATECOMMANDS
name|LATECOMMANDS
block|,
comment|// Total delay time of all commands that were performed later than they
comment|// should have been
DECL|enumConstant|LATECOMMANDSTOTALTIME
name|LATECOMMANDSTOTALTIME
block|,
comment|// Total number of write operations
DECL|enumConstant|TOTALWRITECOMMANDS
name|TOTALWRITECOMMANDS
block|,
comment|// Total latency for all write operations
DECL|enumConstant|TOTALWRITECOMMANDLATENCY
name|TOTALWRITECOMMANDLATENCY
block|,
comment|// Total number of read operations
DECL|enumConstant|TOTALREADCOMMANDS
name|TOTALREADCOMMANDS
block|,
comment|// Total latency for all read operations
DECL|enumConstant|TOTALREADCOMMANDLATENCY
name|TOTALREADCOMMANDLATENCY
block|}
comment|/** Definitions of the various commands that can be replayed. */
DECL|enum|ReplayCommand
specifier|public
enum|enum
name|ReplayCommand
block|{
DECL|enumConstant|APPEND
name|APPEND
parameter_list|(
name|WRITE
parameter_list|)
operator|,
DECL|enumConstant|CREATE
constructor|CREATE(WRITE
block|)
enum|,
DECL|enumConstant|GETFILEINFO
name|GETFILEINFO
parameter_list|(
name|READ
parameter_list|)
operator|,
DECL|enumConstant|CONTENTSUMMARY
constructor|CONTENTSUMMARY(READ
block|)
operator|,
DECL|enumConstant|MKDIRS
name|MKDIRS
argument_list|(
name|WRITE
argument_list|)
operator|,
DECL|enumConstant|RENAME
name|RENAME
argument_list|(
name|WRITE
argument_list|)
operator|,
DECL|enumConstant|LISTSTATUS
name|LISTSTATUS
argument_list|(
name|READ
argument_list|)
operator|,
DECL|enumConstant|DELETE
name|DELETE
argument_list|(
name|WRITE
argument_list|)
operator|,
DECL|enumConstant|OPEN
name|OPEN
argument_list|(
name|READ
argument_list|)
operator|,
DECL|enumConstant|SETPERMISSION
name|SETPERMISSION
argument_list|(
name|WRITE
argument_list|)
operator|,
DECL|enumConstant|SETOWNER
name|SETOWNER
argument_list|(
name|WRITE
argument_list|)
operator|,
DECL|enumConstant|SETTIMES
name|SETTIMES
argument_list|(
name|WRITE
argument_list|)
operator|,
DECL|enumConstant|SETREPLICATION
name|SETREPLICATION
argument_list|(
name|WRITE
argument_list|)
operator|,
DECL|enumConstant|CONCAT
name|CONCAT
argument_list|(
name|WRITE
argument_list|)
expr_stmt|;
end_class

begin_decl_stmt
DECL|field|type
specifier|private
specifier|final
name|CommandType
name|type
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|ReplayCommand (CommandType type)
name|ReplayCommand
argument_list|(
name|CommandType
name|type
argument_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
block|;     }
DECL|method|getType ()
specifier|public
name|CommandType
name|getType
argument_list|()
block|{
return|return
name|type
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|/** Define the type of command, either read or write. */
end_comment

begin_enum
DECL|enum|CommandType
unit|public
enum|enum
name|CommandType
block|{
DECL|enumConstant|READ
DECL|enumConstant|WRITE
name|READ
block|,
name|WRITE
block|}
end_enum

begin_decl_stmt
DECL|field|startTimestampMs
specifier|private
name|long
name|startTimestampMs
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|numThreads
specifier|private
name|int
name|numThreads
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|rateFactor
specifier|private
name|double
name|rateFactor
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|highestTimestamp
specifier|private
name|long
name|highestTimestamp
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|threads
specifier|private
name|List
argument_list|<
name|AuditReplayThread
argument_list|>
name|threads
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|commandQueue
specifier|private
name|DelayQueue
argument_list|<
name|AuditReplayCommand
argument_list|>
name|commandQueue
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|relativeToAbsoluteTimestamp
specifier|private
name|Function
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|relativeToAbsoluteTimestamp
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|commandParser
specifier|private
name|AuditCommandParser
name|commandParser
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|progressExecutor
specifier|private
name|ScheduledThreadPoolExecutor
name|progressExecutor
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|getInputFormat (Configuration conf)
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|getInputFormat
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|NoSplitTextInputFormat
operator|.
name|class
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"This mapper replays audit log files."
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getConfigDescriptions ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getConfigDescriptions
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|INPUT_PATH_KEY
operator|+
literal|" (required): Path to directory containing input files."
argument_list|,
name|NUM_THREADS_KEY
operator|+
literal|" (default "
operator|+
name|NUM_THREADS_DEFAULT
operator|+
literal|"): Number of threads to use per mapper for replay."
argument_list|,
name|CREATE_BLOCKS_KEY
operator|+
literal|" (default "
operator|+
name|CREATE_BLOCKS_DEFAULT
operator|+
literal|"): Whether or not to create 1-byte blocks when "
operator|+
literal|"performing `create` commands."
argument_list|,
name|RATE_FACTOR_KEY
operator|+
literal|" (default "
operator|+
name|RATE_FACTOR_DEFAULT
operator|+
literal|"): Multiplicative speed at which to replay the audit "
operator|+
literal|"log; e.g. a value of 2.0 would make the replay occur at "
operator|+
literal|"twice the original speed. This can be useful "
operator|+
literal|"to induce heavier loads."
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|verifyConfigurations (Configuration conf)
specifier|public
name|boolean
name|verifyConfigurations
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|INPUT_PATH_KEY
argument_list|)
operator|!=
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setup (final Mapper.Context context)
specifier|public
name|void
name|setup
parameter_list|(
specifier|final
name|Mapper
operator|.
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// WorkloadDriver ensures that the starttimestamp is set
name|startTimestampMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|WorkloadDriver
operator|.
name|START_TIMESTAMP_MS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|numThreads
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_THREADS_KEY
argument_list|,
name|NUM_THREADS_DEFAULT
argument_list|)
expr_stmt|;
name|rateFactor
operator|=
name|conf
operator|.
name|getDouble
argument_list|(
name|RATE_FACTOR_KEY
argument_list|,
name|RATE_FACTOR_DEFAULT
argument_list|)
expr_stmt|;
try|try
block|{
name|commandParser
operator|=
name|conf
operator|.
name|getClass
argument_list|(
name|COMMAND_PARSER_KEY
argument_list|,
name|COMMAND_PARSER_DEFAULT
argument_list|,
name|AuditCommandParser
operator|.
name|class
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception encountered while instantiating the command parser"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|commandParser
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|relativeToAbsoluteTimestamp
operator|=
parameter_list|(
name|input
parameter_list|)
lambda|->
name|startTimestampMs
operator|+
name|Math
operator|.
name|round
argument_list|(
name|input
operator|/
name|rateFactor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|numThreads
operator|+
literal|" threads"
argument_list|)
expr_stmt|;
name|progressExecutor
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// half of the timeout or once per minute if none specified
name|long
name|progressFrequencyMs
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|MRJobConfig
operator|.
name|TASK_TIMEOUT
argument_list|,
literal|2
operator|*
literal|60
operator|*
literal|1000
argument_list|)
operator|/
literal|2
decl_stmt|;
name|progressExecutor
operator|.
name|scheduleAtFixedRate
argument_list|(
name|context
operator|::
name|progress
argument_list|,
name|progressFrequencyMs
argument_list|,
name|progressFrequencyMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|threads
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|FileSystem
argument_list|>
name|fsCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|commandQueue
operator|=
operator|new
name|DelayQueue
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|AuditReplayThread
name|thread
init|=
operator|new
name|AuditReplayThread
argument_list|(
name|context
argument_list|,
name|commandQueue
argument_list|,
name|fsCache
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|map (LongWritable lineNum, Text inputLine, Mapper.Context context)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|lineNum
parameter_list|,
name|Text
name|inputLine
parameter_list|,
name|Mapper
operator|.
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|AuditReplayCommand
name|cmd
init|=
name|commandParser
operator|.
name|parse
argument_list|(
name|inputLine
argument_list|,
name|relativeToAbsoluteTimestamp
argument_list|)
decl_stmt|;
name|long
name|delay
init|=
name|cmd
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
comment|// Prevent from loading too many elements into memory all at once
if|if
condition|(
name|delay
operator|>
name|MAX_READAHEAD_MS
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
operator|-
operator|(
name|MAX_READAHEAD_MS
operator|/
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
name|commandQueue
operator|.
name|put
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|highestTimestamp
operator|=
name|cmd
operator|.
name|getAbsoluteTimestamp
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|cleanup (Mapper.Context context)
specifier|public
name|void
name|cleanup
parameter_list|(
name|Mapper
operator|.
name|Context
name|context
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|AuditReplayThread
name|t
range|:
name|threads
control|)
block|{
comment|// Add in an indicator for each thread to shut down after the last real
comment|// command
name|t
operator|.
name|addToQueue
argument_list|(
name|AuditReplayCommand
operator|.
name|getPoisonPill
argument_list|(
name|highestTimestamp
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Optional
argument_list|<
name|Exception
argument_list|>
name|threadException
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
for|for
control|(
name|AuditReplayThread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|t
operator|.
name|drainCounters
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|threadException
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|t
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|progressExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|threadException
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception in AuditReplayThread"
argument_list|,
name|threadException
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Time taken to replay the logs in ms: "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTimestampMs
operator|)
argument_list|)
expr_stmt|;
name|long
name|totalCommands
init|=
name|context
operator|.
name|getCounter
argument_list|(
name|REPLAYCOUNTERS
operator|.
name|TOTALCOMMANDS
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalCommands
operator|!=
literal|0
condition|)
block|{
name|double
name|percentageOfInvalidOps
init|=
name|context
operator|.
name|getCounter
argument_list|(
name|REPLAYCOUNTERS
operator|.
name|TOTALINVALIDCOMMANDS
argument_list|)
operator|.
name|getValue
argument_list|()
operator|*
literal|100.0
operator|/
name|totalCommands
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Percentage of invalid ops: "
operator|+
name|percentageOfInvalidOps
argument_list|)
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

