begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer.workloadgenerator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_comment
comment|/**  * CreateFileMapper continuously creates 1 byte files for the specified duration  * to increase the number of file objects on the NN.  *<p>  * Configuration options available:  *<ul>  *<li>{@value NUM_MAPPERS_KEY} (required): Number of mappers to launch.</li>  *<li>{@value DURATION_MIN_KEY} (required): Number of minutes to induce  *       workload for.</li>  *<li>{@value SHOULD_DELETE_KEY} (default: {@value SHOULD_DELETE_DEFAULT}):  *       If true, delete the files after creating them. This can be useful for  *       generating constant load without increasing the number of file  *       objects.</li>  *<li>{@value FILE_PARENT_PATH_KEY} (default:  *       {@value FILE_PARENT_PATH_DEFAULT}): The root directory in which to  *       create files.</li>  *</ul>  */
end_comment

begin_class
DECL|class|CreateFileMapper
specifier|public
class|class
name|CreateFileMapper
extends|extends
name|WorkloadMapper
argument_list|<
name|NullWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|field|NUM_MAPPERS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NUM_MAPPERS_KEY
init|=
literal|"createfile.num-mappers"
decl_stmt|;
DECL|field|DURATION_MIN_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DURATION_MIN_KEY
init|=
literal|"createfile.duration-min"
decl_stmt|;
DECL|field|FILE_PARENT_PATH_KEY
specifier|public
specifier|static
specifier|final
name|String
name|FILE_PARENT_PATH_KEY
init|=
literal|"createfile.file-parent-path"
decl_stmt|;
DECL|field|FILE_PARENT_PATH_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|FILE_PARENT_PATH_DEFAULT
init|=
literal|"/tmp/createFileMapper"
decl_stmt|;
DECL|field|SHOULD_DELETE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SHOULD_DELETE_KEY
init|=
literal|"createfile.should-delete"
decl_stmt|;
DECL|field|SHOULD_DELETE_DEFAULT
specifier|public
specifier|static
specifier|final
name|boolean
name|SHOULD_DELETE_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/** Custom {@link org.apache.hadoop.mapreduce.Counter} definitions. */
DECL|enum|CREATEFILECOUNTERS
specifier|public
enum|enum
name|CREATEFILECOUNTERS
block|{
DECL|enumConstant|NUMFILESCREATED
name|NUMFILESCREATED
block|}
DECL|field|startTimestampMs
specifier|private
name|long
name|startTimestampMs
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|taskID
specifier|private
name|int
name|taskID
decl_stmt|;
DECL|field|fileParentPath
specifier|private
name|String
name|fileParentPath
decl_stmt|;
DECL|field|shouldDelete
specifier|private
name|boolean
name|shouldDelete
decl_stmt|;
DECL|field|endTimeStampMs
specifier|private
name|long
name|endTimeStampMs
decl_stmt|;
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"This mapper creates 1-byte files for the specified duration."
return|;
block|}
annotation|@
name|Override
DECL|method|getConfigDescriptions ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getConfigDescriptions
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|NUM_MAPPERS_KEY
operator|+
literal|" (required): Number of mappers to launch."
argument_list|,
name|DURATION_MIN_KEY
operator|+
literal|" (required): Number of minutes to induce workload for."
argument_list|,
name|SHOULD_DELETE_KEY
operator|+
literal|" (default: "
operator|+
name|SHOULD_DELETE_DEFAULT
operator|+
literal|"): If true, delete the files after creating "
operator|+
literal|"them. This can be useful for generating constant load without "
operator|+
literal|"increasing the number of file objects."
argument_list|,
name|FILE_PARENT_PATH_KEY
operator|+
literal|" (default: "
operator|+
name|FILE_PARENT_PATH_DEFAULT
operator|+
literal|"): The root directory in which to create files."
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|verifyConfigurations (Configuration confToVerify)
specifier|public
name|boolean
name|verifyConfigurations
parameter_list|(
name|Configuration
name|confToVerify
parameter_list|)
block|{
return|return
name|confToVerify
operator|.
name|get
argument_list|(
name|NUM_MAPPERS_KEY
argument_list|)
operator|!=
literal|null
operator|&&
name|confToVerify
operator|.
name|get
argument_list|(
name|DURATION_MIN_KEY
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|map (NullWritable key, NullWritable value, Mapper.Context mapperContext)
specifier|public
name|void
name|map
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|NullWritable
name|value
parameter_list|,
name|Mapper
operator|.
name|Context
name|mapperContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|taskID
operator|=
name|mapperContext
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|conf
operator|=
name|mapperContext
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|String
name|namenodeURI
init|=
name|conf
operator|.
name|get
argument_list|(
name|WorkloadDriver
operator|.
name|NN_URI
argument_list|)
decl_stmt|;
name|startTimestampMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|WorkloadDriver
operator|.
name|START_TIMESTAMP_MS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fileParentPath
operator|=
name|conf
operator|.
name|get
argument_list|(
name|FILE_PARENT_PATH_KEY
argument_list|,
name|FILE_PARENT_PATH_DEFAULT
argument_list|)
expr_stmt|;
name|shouldDelete
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SHOULD_DELETE_KEY
argument_list|,
name|SHOULD_DELETE_DEFAULT
argument_list|)
expr_stmt|;
name|int
name|durationMin
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DURATION_MIN_KEY
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|durationMin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Duration must be positive; got: "
operator|+
name|durationMin
argument_list|)
throw|;
block|}
name|endTimeStampMs
operator|=
name|startTimestampMs
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|durationMin
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenodeURI
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Start timestamp: "
operator|+
name|startTimestampMs
argument_list|)
expr_stmt|;
name|long
name|currentEpoch
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|delay
init|=
name|startTimestampMs
operator|-
name|currentEpoch
decl_stmt|;
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sleeping for "
operator|+
name|delay
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
name|String
name|mapperSpecifcPathPrefix
init|=
name|fileParentPath
operator|+
literal|"/mapper"
operator|+
name|taskID
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Mapper path prefix: "
operator|+
name|mapperSpecifcPathPrefix
argument_list|)
expr_stmt|;
name|long
name|numFilesCreated
init|=
literal|0
decl_stmt|;
name|Path
name|path
decl_stmt|;
specifier|final
name|byte
index|[]
name|content
init|=
block|{
literal|0x0
block|}
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endTimeStampMs
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|mapperSpecifcPathPrefix
operator|+
literal|"/file"
operator|+
name|numFilesCreated
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|numFilesCreated
operator|++
expr_stmt|;
name|mapperContext
operator|.
name|getCounter
argument_list|(
name|CREATEFILECOUNTERS
operator|.
name|NUMFILESCREATED
argument_list|)
operator|.
name|increment
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
if|if
condition|(
name|numFilesCreated
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|mapperContext
operator|.
name|progress
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Number of files created: "
operator|+
name|numFilesCreated
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shouldDelete
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

