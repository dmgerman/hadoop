begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer.workloadgenerator.audit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class represents a single command to be replayed by the workload  * generator. It implements the {@link Delayed} interface so that they can be  * fetched in timestamp order from a {@link java.util.concurrent.DelayQueue}.  * You can use the {@link #getPoisonPill(long)} method to retrieve "Poison Pill"  * {@link AuditReplayCommand} which has {@link #isPoison()} as true,  * representing to a consumer(s) of the {@link java.util.concurrent.DelayQueue}  * that it should stop processing further items and instead terminate itself.  */
end_comment

begin_class
DECL|class|AuditReplayCommand
class|class
name|AuditReplayCommand
implements|implements
name|Delayed
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuditReplayCommand
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SIMPLE_UGI_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|SIMPLE_UGI_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^/@ ]*).*?"
argument_list|)
decl_stmt|;
DECL|field|absoluteTimestamp
specifier|private
name|long
name|absoluteTimestamp
decl_stmt|;
DECL|field|ugi
specifier|private
name|String
name|ugi
decl_stmt|;
DECL|field|command
specifier|private
name|String
name|command
decl_stmt|;
DECL|field|src
specifier|private
name|String
name|src
decl_stmt|;
DECL|field|dest
specifier|private
name|String
name|dest
decl_stmt|;
DECL|field|sourceIP
specifier|private
name|String
name|sourceIP
decl_stmt|;
DECL|method|AuditReplayCommand (long absoluteTimestamp, String ugi, String command, String src, String dest, String sourceIP)
name|AuditReplayCommand
parameter_list|(
name|long
name|absoluteTimestamp
parameter_list|,
name|String
name|ugi
parameter_list|,
name|String
name|command
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dest
parameter_list|,
name|String
name|sourceIP
parameter_list|)
block|{
name|this
operator|.
name|absoluteTimestamp
operator|=
name|absoluteTimestamp
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
name|this
operator|.
name|dest
operator|=
name|dest
expr_stmt|;
name|this
operator|.
name|sourceIP
operator|=
name|sourceIP
expr_stmt|;
block|}
DECL|method|getAbsoluteTimestamp ()
name|long
name|getAbsoluteTimestamp
parameter_list|()
block|{
return|return
name|absoluteTimestamp
return|;
block|}
DECL|method|getSimpleUgi ()
name|String
name|getSimpleUgi
parameter_list|()
block|{
name|Matcher
name|m
init|=
name|SIMPLE_UGI_PATTERN
operator|.
name|matcher
argument_list|(
name|ugi
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error parsing simple UGI<{}>; falling back to current user"
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
block|}
DECL|method|getCommand ()
name|String
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
DECL|method|getSrc ()
name|String
name|getSrc
parameter_list|()
block|{
return|return
name|src
return|;
block|}
DECL|method|getDest ()
name|String
name|getDest
parameter_list|()
block|{
return|return
name|dest
return|;
block|}
DECL|method|getSourceIP ()
name|String
name|getSourceIP
parameter_list|()
block|{
return|return
name|sourceIP
return|;
block|}
annotation|@
name|Override
DECL|method|getDelay (TimeUnit unit)
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|absoluteTimestamp
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Delayed o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|absoluteTimestamp
argument_list|,
operator|(
operator|(
name|AuditReplayCommand
operator|)
name|o
operator|)
operator|.
name|absoluteTimestamp
argument_list|)
return|;
block|}
comment|/**    * If true, the thread which consumes this item should not process any further    * items and instead simply terminate itself.    */
DECL|method|isPoison ()
name|boolean
name|isPoison
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * A command representing a Poison Pill, indicating that the processing thread    * should not process any further items and instead should terminate itself.    * Always returns true for {@link #isPoison()}. It does not contain any other    * information besides a timestamp; other getter methods wil return null.    */
DECL|class|PoisonPillCommand
specifier|private
specifier|static
specifier|final
class|class
name|PoisonPillCommand
extends|extends
name|AuditReplayCommand
block|{
DECL|method|PoisonPillCommand (long absoluteTimestamp)
specifier|private
name|PoisonPillCommand
parameter_list|(
name|long
name|absoluteTimestamp
parameter_list|)
block|{
name|super
argument_list|(
name|absoluteTimestamp
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isPoison ()
name|boolean
name|isPoison
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|getPoisonPill (long relativeTimestamp)
specifier|static
name|AuditReplayCommand
name|getPoisonPill
parameter_list|(
name|long
name|relativeTimestamp
parameter_list|)
block|{
return|return
operator|new
name|PoisonPillCommand
argument_list|(
name|relativeTimestamp
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|AuditReplayCommand
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AuditReplayCommand
name|o
init|=
operator|(
name|AuditReplayCommand
operator|)
name|other
decl_stmt|;
return|return
name|absoluteTimestamp
operator|==
name|o
operator|.
name|absoluteTimestamp
operator|&&
name|ugi
operator|.
name|equals
argument_list|(
name|o
operator|.
name|ugi
argument_list|)
operator|&&
name|command
operator|.
name|equals
argument_list|(
name|o
operator|.
name|command
argument_list|)
operator|&&
name|src
operator|.
name|equals
argument_list|(
name|o
operator|.
name|src
argument_list|)
operator|&&
name|dest
operator|.
name|equals
argument_list|(
name|o
operator|.
name|dest
argument_list|)
operator|&&
name|sourceIP
operator|.
name|equals
argument_list|(
name|o
operator|.
name|sourceIP
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|absoluteTimestamp
argument_list|,
name|ugi
argument_list|,
name|command
argument_list|,
name|src
argument_list|,
name|dest
argument_list|,
name|sourceIP
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"AuditReplayCommand(absoluteTimestamp=%d, ugi=%s, "
operator|+
literal|"command=%s, src=%s, dest=%s, sourceIP=%s"
argument_list|,
name|absoluteTimestamp
argument_list|,
name|ugi
argument_list|,
name|command
argument_list|,
name|src
argument_list|,
name|dest
argument_list|,
name|sourceIP
argument_list|)
return|;
block|}
block|}
end_class

end_unit

