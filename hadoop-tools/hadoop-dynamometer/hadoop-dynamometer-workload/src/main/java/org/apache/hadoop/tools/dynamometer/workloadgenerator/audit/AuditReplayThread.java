begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer.workloadgenerator.audit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|WorkloadDriver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|GenericCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
operator|.
name|AuditReplayMapper
operator|.
name|REPLAYCOUNTERS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
operator|.
name|AuditReplayMapper
operator|.
name|ReplayCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
operator|.
name|AuditReplayMapper
operator|.
name|INDIVIDUAL_COMMANDS_COUNTER_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
operator|.
name|AuditReplayMapper
operator|.
name|INDIVIDUAL_COMMANDS_COUNT_SUFFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
operator|.
name|AuditReplayMapper
operator|.
name|INDIVIDUAL_COMMANDS_INVALID_SUFFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
operator|.
name|AuditReplayMapper
operator|.
name|INDIVIDUAL_COMMANDS_LATENCY_SUFFIX
import|;
end_import

begin_comment
comment|/**  * This class replays each audit log entry at a specified timestamp in the  * future. Each of these threads maintains a {@link DelayQueue} into which items  * are inserted by the {@link AuditReplayMapper}. Once an item is ready, this  * thread will fetch the command from the queue and attempt to replay it.  */
end_comment

begin_class
DECL|class|AuditReplayThread
specifier|public
class|class
name|AuditReplayThread
extends|extends
name|Thread
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuditReplayThread
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|commandQueue
specifier|private
name|DelayQueue
argument_list|<
name|AuditReplayCommand
argument_list|>
name|commandQueue
decl_stmt|;
DECL|field|fsCache
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|FileSystem
argument_list|>
name|fsCache
decl_stmt|;
DECL|field|namenodeUri
specifier|private
name|URI
name|namenodeUri
decl_stmt|;
DECL|field|loginUser
specifier|private
name|UserGroupInformation
name|loginUser
decl_stmt|;
DECL|field|mapperConf
specifier|private
name|Configuration
name|mapperConf
decl_stmt|;
comment|// If any exception is encountered it will be stored here
DECL|field|exception
specifier|private
name|Exception
name|exception
decl_stmt|;
DECL|field|startTimestampMs
specifier|private
name|long
name|startTimestampMs
decl_stmt|;
DECL|field|createBlocks
specifier|private
name|boolean
name|createBlocks
decl_stmt|;
comment|// Counters are not thread-safe so we store a local mapping in our thread
comment|// and merge them all together at the end.
DECL|field|replayCountersMap
specifier|private
name|Map
argument_list|<
name|REPLAYCOUNTERS
argument_list|,
name|Counter
argument_list|>
name|replayCountersMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|individualCommandsMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|individualCommandsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|AuditReplayThread (Mapper.Context mapperContext, DelayQueue<AuditReplayCommand> queue, ConcurrentMap<String, FileSystem> fsCache)
name|AuditReplayThread
parameter_list|(
name|Mapper
operator|.
name|Context
name|mapperContext
parameter_list|,
name|DelayQueue
argument_list|<
name|AuditReplayCommand
argument_list|>
name|queue
parameter_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|FileSystem
argument_list|>
name|fsCache
parameter_list|)
throws|throws
name|IOException
block|{
name|commandQueue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|fsCache
operator|=
name|fsCache
expr_stmt|;
name|loginUser
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
name|mapperConf
operator|=
name|mapperContext
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|namenodeUri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|mapperConf
operator|.
name|get
argument_list|(
name|WorkloadDriver
operator|.
name|NN_URI
argument_list|)
argument_list|)
expr_stmt|;
name|startTimestampMs
operator|=
name|mapperConf
operator|.
name|getLong
argument_list|(
name|WorkloadDriver
operator|.
name|START_TIMESTAMP_MS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|createBlocks
operator|=
name|mapperConf
operator|.
name|getBoolean
argument_list|(
name|AuditReplayMapper
operator|.
name|CREATE_BLOCKS_KEY
argument_list|,
name|AuditReplayMapper
operator|.
name|CREATE_BLOCKS_DEFAULT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start timestamp: "
operator|+
name|startTimestampMs
argument_list|)
expr_stmt|;
for|for
control|(
name|REPLAYCOUNTERS
name|rc
range|:
name|REPLAYCOUNTERS
operator|.
name|values
argument_list|()
control|)
block|{
name|replayCountersMap
operator|.
name|put
argument_list|(
name|rc
argument_list|,
operator|new
name|GenericCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ReplayCommand
name|replayCommand
range|:
name|ReplayCommand
operator|.
name|values
argument_list|()
control|)
block|{
name|individualCommandsMap
operator|.
name|put
argument_list|(
name|replayCommand
operator|+
name|INDIVIDUAL_COMMANDS_COUNT_SUFFIX
argument_list|,
operator|new
name|GenericCounter
argument_list|()
argument_list|)
expr_stmt|;
name|individualCommandsMap
operator|.
name|put
argument_list|(
name|replayCommand
operator|+
name|INDIVIDUAL_COMMANDS_LATENCY_SUFFIX
argument_list|,
operator|new
name|GenericCounter
argument_list|()
argument_list|)
expr_stmt|;
name|individualCommandsMap
operator|.
name|put
argument_list|(
name|replayCommand
operator|+
name|INDIVIDUAL_COMMANDS_INVALID_SUFFIX
argument_list|,
operator|new
name|GenericCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Merge all of this thread's counter values into the counters contained    * within the passed context.    *    * @param context The context holding the counters to increment.    */
DECL|method|drainCounters (Mapper.Context context)
name|void
name|drainCounters
parameter_list|(
name|Mapper
operator|.
name|Context
name|context
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|REPLAYCOUNTERS
argument_list|,
name|Counter
argument_list|>
name|ent
range|:
name|replayCountersMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|increment
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|ent
range|:
name|individualCommandsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|INDIVIDUAL_COMMANDS_COUNTER_GROUP
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|increment
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a command to this thread's processing queue.    *    * @param cmd Command to add.    */
DECL|method|addToQueue (AuditReplayCommand cmd)
name|void
name|addToQueue
parameter_list|(
name|AuditReplayCommand
name|cmd
parameter_list|)
block|{
name|commandQueue
operator|.
name|put
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the Exception that caused this thread to stop running, if any, else    * null. Should not be called until this thread has already completed (i.e.,    * after {@link #join()} has been called).    *    * @return The exception which was thrown, if any.    */
DECL|method|getException ()
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|currentEpoch
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|delay
init|=
name|startTimestampMs
operator|-
name|currentEpoch
decl_stmt|;
try|try
block|{
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for "
operator|+
name|delay
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Starting late by "
operator|+
operator|(
operator|-
literal|1
operator|*
name|delay
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
name|AuditReplayCommand
name|cmd
init|=
name|commandQueue
operator|.
name|take
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|cmd
operator|.
name|isPoison
argument_list|()
condition|)
block|{
name|replayCountersMap
operator|.
name|get
argument_list|(
name|REPLAYCOUNTERS
operator|.
name|TOTALCOMMANDS
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|delay
operator|=
name|cmd
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|delay
operator|<
operator|-
literal|5
condition|)
block|{
comment|// allow some tolerance here
name|replayCountersMap
operator|.
name|get
argument_list|(
name|REPLAYCOUNTERS
operator|.
name|LATECOMMANDS
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|replayCountersMap
operator|.
name|get
argument_list|(
name|REPLAYCOUNTERS
operator|.
name|LATECOMMANDSTOTALTIME
argument_list|)
operator|.
name|increment
argument_list|(
operator|-
literal|1
operator|*
name|delay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|replayLog
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|replayCountersMap
operator|.
name|get
argument_list|(
name|REPLAYCOUNTERS
operator|.
name|TOTALINVALIDCOMMANDS
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|cmd
operator|=
name|commandQueue
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupted; exiting from thread."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"ReplayThread encountered exception; exiting."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Attempt to replay the provided command. Updates counters accordingly.    *    * @param command The command to replay    * @return True iff the command was successfully replayed (i.e., no exceptions    *         were thrown).    */
DECL|method|replayLog (final AuditReplayCommand command)
specifier|private
name|boolean
name|replayLog
parameter_list|(
specifier|final
name|AuditReplayCommand
name|command
parameter_list|)
block|{
specifier|final
name|String
name|src
init|=
name|command
operator|.
name|getSrc
argument_list|()
decl_stmt|;
specifier|final
name|String
name|dst
init|=
name|command
operator|.
name|getDest
argument_list|()
decl_stmt|;
name|FileSystem
name|proxyFs
init|=
name|fsCache
operator|.
name|get
argument_list|(
name|command
operator|.
name|getSimpleUgi
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyFs
operator|==
literal|null
condition|)
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|command
operator|.
name|getSimpleUgi
argument_list|()
argument_list|,
name|loginUser
argument_list|)
decl_stmt|;
name|proxyFs
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|FileSystem
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|FileSystem
name|fs
init|=
operator|new
name|DistributedFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|namenodeUri
argument_list|,
name|mapperConf
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|)
empty_stmt|;
name|fsCache
operator|.
name|put
argument_list|(
name|command
operator|.
name|getSimpleUgi
argument_list|()
argument_list|,
name|proxyFs
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FileSystem
name|fs
init|=
name|proxyFs
decl_stmt|;
name|ReplayCommand
name|replayCommand
decl_stmt|;
try|try
block|{
name|replayCommand
operator|=
name|ReplayCommand
operator|.
name|valueOf
argument_list|(
name|command
operator|.
name|getCommand
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unsupported/invalid command: "
operator|+
name|command
argument_list|)
expr_stmt|;
name|replayCountersMap
operator|.
name|get
argument_list|(
name|REPLAYCOUNTERS
operator|.
name|TOTALUNSUPPORTEDCOMMANDS
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|replayCommand
condition|)
block|{
case|case
name|CREATE
case|:
name|FSDataOutputStream
name|fsDos
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|createBlocks
condition|)
block|{
name|fsDos
operator|.
name|writeByte
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|fsDos
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|GETFILEINFO
case|:
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTENTSUMMARY
case|:
name|fs
operator|.
name|getContentSummary
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|MKDIRS
case|:
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|RENAME
case|:
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LISTSTATUS
case|:
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
operator|)
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|src
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|APPEND
case|:
name|fs
operator|.
name|append
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DELETE
case|:
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|OPEN
case|:
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|SETPERMISSION
case|:
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SETOWNER
case|:
name|fs
operator|.
name|setOwner
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getPrimaryGroupName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SETTIMES
case|:
name|fs
operator|.
name|setTimes
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SETREPLICATION
case|:
name|fs
operator|.
name|setReplication
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONCAT
case|:
comment|// dst is like [path1, path2] - strip brackets and split on comma
name|String
name|bareDist
init|=
name|dst
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|?
literal|""
else|:
name|dst
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|dst
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|dsts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|bareDist
argument_list|)
control|)
block|{
name|dsts
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|concat
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|,
name|dsts
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected command: "
operator|+
name|replayCommand
argument_list|)
throw|;
block|}
name|long
name|latency
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
switch|switch
condition|(
name|replayCommand
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|WRITE
case|:
name|replayCountersMap
operator|.
name|get
argument_list|(
name|REPLAYCOUNTERS
operator|.
name|TOTALWRITECOMMANDLATENCY
argument_list|)
operator|.
name|increment
argument_list|(
name|latency
argument_list|)
expr_stmt|;
name|replayCountersMap
operator|.
name|get
argument_list|(
name|REPLAYCOUNTERS
operator|.
name|TOTALWRITECOMMANDS
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|READ
case|:
name|replayCountersMap
operator|.
name|get
argument_list|(
name|REPLAYCOUNTERS
operator|.
name|TOTALREADCOMMANDLATENCY
argument_list|)
operator|.
name|increment
argument_list|(
name|latency
argument_list|)
expr_stmt|;
name|replayCountersMap
operator|.
name|get
argument_list|(
name|REPLAYCOUNTERS
operator|.
name|TOTALREADCOMMANDS
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected command type: "
operator|+
name|replayCommand
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
name|individualCommandsMap
operator|.
name|get
argument_list|(
name|replayCommand
operator|+
name|INDIVIDUAL_COMMANDS_LATENCY_SUFFIX
argument_list|)
operator|.
name|increment
argument_list|(
name|latency
argument_list|)
expr_stmt|;
name|individualCommandsMap
operator|.
name|get
argument_list|(
name|replayCommand
operator|+
name|INDIVIDUAL_COMMANDS_COUNT_SUFFIX
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"IOException: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|individualCommandsMap
operator|.
name|get
argument_list|(
name|replayCommand
operator|+
name|INDIVIDUAL_COMMANDS_INVALID_SUFFIX
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

unit|}
end_unit

