begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer.workloadgenerator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
operator|.
name|AuditReplayMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is the driver for generating generic workloads against a NameNode under  * test. It launches a map-only job with a mapper class specified by the  * {@value MAPPER_CLASS_NAME} argument. See the specific mappers (currently  * {@link AuditReplayMapper} and {@link CreateFileMapper}) for information on  * their specific behavior and parameters.  */
end_comment

begin_class
DECL|class|WorkloadDriver
specifier|public
class|class
name|WorkloadDriver
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WorkloadDriver
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|START_TIMESTAMP_MS
specifier|public
specifier|static
specifier|final
name|String
name|START_TIMESTAMP_MS
init|=
literal|"start_timestamp_ms"
decl_stmt|;
DECL|field|START_TIME_OFFSET
specifier|public
specifier|static
specifier|final
name|String
name|START_TIME_OFFSET
init|=
literal|"start_time_offset"
decl_stmt|;
DECL|field|START_TIME_OFFSET_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|START_TIME_OFFSET_DEFAULT
init|=
literal|"1m"
decl_stmt|;
DECL|field|NN_URI
specifier|public
specifier|static
specifier|final
name|String
name|NN_URI
init|=
literal|"nn_uri"
decl_stmt|;
DECL|field|MAPPER_CLASS_NAME
specifier|public
specifier|static
specifier|final
name|String
name|MAPPER_CLASS_NAME
init|=
literal|"mapper_class_name"
decl_stmt|;
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Option
name|helpOption
init|=
operator|new
name|Option
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Shows this message. Additionally specify the "
operator|+
name|MAPPER_CLASS_NAME
operator|+
literal|" argument to show help for a specific mapper class."
argument_list|)
decl_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|helpOption
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"NN URI"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"URI of the NameNode under test"
argument_list|)
operator|.
name|isRequired
argument_list|()
operator|.
name|create
argument_list|(
name|NN_URI
argument_list|)
argument_list|)
expr_stmt|;
name|OptionGroup
name|startTimeOptions
init|=
operator|new
name|OptionGroup
argument_list|()
decl_stmt|;
name|startTimeOptions
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"Start Timestamp"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Mapper start UTC timestamp in ms"
argument_list|)
operator|.
name|create
argument_list|(
name|START_TIMESTAMP_MS
argument_list|)
argument_list|)
expr_stmt|;
name|startTimeOptions
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"Start Time Offset"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Mapper start time as an offset from current "
operator|+
literal|"time. Human-readable formats accepted, e.g. 10m (default "
operator|+
name|START_TIME_OFFSET_DEFAULT
operator|+
literal|")."
argument_list|)
operator|.
name|create
argument_list|(
name|START_TIME_OFFSET
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOptionGroup
argument_list|(
name|startTimeOptions
argument_list|)
expr_stmt|;
name|Option
name|mapperClassOption
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"Mapper ClassName"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Class name of the mapper; must be a WorkloadMapper "
operator|+
literal|"subclass. Mappers supported currently: \n"
operator|+
literal|"1. AuditReplayMapper \n"
operator|+
literal|"2. CreateFileMapper \n"
operator|+
literal|"Fully specified class names are also supported."
argument_list|)
operator|.
name|isRequired
argument_list|()
operator|.
name|create
argument_list|(
name|MAPPER_CLASS_NAME
argument_list|)
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|mapperClassOption
argument_list|)
expr_stmt|;
name|Options
name|helpOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|helpOptions
operator|.
name|addOption
argument_list|(
name|helpOption
argument_list|)
expr_stmt|;
name|Option
name|mapperClassNotRequiredOption
init|=
operator|(
name|Option
operator|)
name|mapperClassOption
operator|.
name|clone
argument_list|()
decl_stmt|;
name|mapperClassNotRequiredOption
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|helpOptions
operator|.
name|addOption
argument_list|(
name|mapperClassNotRequiredOption
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cli
init|=
name|parser
operator|.
name|parse
argument_list|(
name|helpOptions
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
name|String
name|footer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
name|MAPPER_CLASS_NAME
argument_list|)
condition|)
block|{
name|footer
operator|=
name|getMapperUsageInfo
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
name|MAPPER_CLASS_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|200
argument_list|,
literal|"./start-workload [options]"
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
name|footer
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|cli
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|String
name|nnURI
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
name|NN_URI
argument_list|)
decl_stmt|;
name|long
name|startTimestampMs
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
name|START_TIMESTAMP_MS
argument_list|)
condition|)
block|{
name|startTimestampMs
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
name|START_TIMESTAMP_MS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Leverage the human-readable time parsing capabilities of Configuration
name|String
name|tmpConfKey
init|=
literal|"___temp_config_property___"
decl_stmt|;
name|Configuration
name|tmpConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|tmpConf
operator|.
name|set
argument_list|(
name|tmpConfKey
argument_list|,
name|cli
operator|.
name|getOptionValue
argument_list|(
name|START_TIME_OFFSET
argument_list|,
name|START_TIME_OFFSET_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|startTimestampMs
operator|=
name|tmpConf
operator|.
name|getTimeDuration
argument_list|(
name|tmpConfKey
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|WorkloadMapper
argument_list|>
name|mapperClass
init|=
name|getMapperClass
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
name|MAPPER_CLASS_NAME
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mapperClass
operator|.
name|newInstance
argument_list|()
operator|.
name|verifyConfigurations
argument_list|(
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getMapperUsageInfo
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
name|MAPPER_CLASS_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|Job
name|job
init|=
name|getJobForSubmission
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|nnURI
argument_list|,
name|startTimestampMs
argument_list|,
name|mapperClass
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
return|return
name|success
condition|?
literal|0
else|:
literal|1
return|;
block|}
DECL|method|getJobForSubmission (Configuration baseConf, String nnURI, long startTimestampMs, Class<? extends WorkloadMapper> mapperClass)
specifier|public
specifier|static
name|Job
name|getJobForSubmission
parameter_list|(
name|Configuration
name|baseConf
parameter_list|,
name|String
name|nnURI
parameter_list|,
name|long
name|startTimestampMs
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WorkloadMapper
argument_list|>
name|mapperClass
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|baseConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NN_URI
argument_list|,
name|nnURI
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_SPECULATIVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|startTimeString
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy/MM/dd HH:mm:ss z"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|startTimestampMs
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The workload will start at "
operator|+
name|startTimestampMs
operator|+
literal|" ms ("
operator|+
name|startTimeString
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|START_TIMESTAMP_MS
argument_list|,
name|startTimestampMs
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
literal|"Dynamometer Workload Driver"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|mapperClass
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|mapperClass
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|mapperClass
operator|.
name|newInstance
argument_list|()
operator|.
name|getInputFormat
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|WorkloadDriver
name|driver
init|=
operator|new
name|WorkloadDriver
argument_list|()
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|driver
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getMapperClass (String className)
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|WorkloadMapper
argument_list|>
name|getMapperClass
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
operator|!
name|className
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|className
operator|=
name|WorkloadDriver
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|className
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|mapperClass
init|=
name|getConf
argument_list|()
operator|.
name|getClassByName
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|WorkloadMapper
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|mapperClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|className
operator|+
literal|" is not a subclass of "
operator|+
name|WorkloadMapper
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|WorkloadMapper
argument_list|>
operator|)
name|mapperClass
return|;
block|}
DECL|method|getMapperUsageInfo (String mapperClassName)
specifier|private
name|String
name|getMapperUsageInfo
parameter_list|(
name|String
name|mapperClassName
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|WorkloadMapper
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mapper
init|=
name|getMapperClass
argument_list|(
name|mapperClassName
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Usage for "
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|mapper
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|mapper
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|configDescription
range|:
name|mapper
operator|.
name|getConfigDescriptions
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|configDescription
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"\nConfiguration parameters can be set at the "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"_start_ of the argument list like:\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"  -Dconfiguration.key=configurationValue"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

