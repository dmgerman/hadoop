begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer.workloadgenerator.audit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * UserCommandKey is a {@link Writable} used as a composite value that  * accumulates the count and cumulative latency of replayed commands. It is  * used as the output value for AuditReplayMapper and AuditReplayReducer.  */
end_comment

begin_class
DECL|class|CountTimeWritable
specifier|public
class|class
name|CountTimeWritable
implements|implements
name|Writable
block|{
DECL|field|count
specifier|private
name|LongWritable
name|count
decl_stmt|;
DECL|field|time
specifier|private
name|LongWritable
name|time
decl_stmt|;
DECL|method|CountTimeWritable ()
specifier|public
name|CountTimeWritable
parameter_list|()
block|{
name|count
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
name|time
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
block|}
DECL|method|CountTimeWritable (LongWritable count, LongWritable time)
specifier|public
name|CountTimeWritable
parameter_list|(
name|LongWritable
name|count
parameter_list|,
name|LongWritable
name|time
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
block|}
DECL|method|CountTimeWritable (long count, long time)
specifier|public
name|CountTimeWritable
parameter_list|(
name|long
name|count
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
operator|new
name|LongWritable
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|this
operator|.
name|time
operator|=
operator|new
name|LongWritable
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
DECL|method|getCount ()
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|count
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getTime ()
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|time
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setCount (long count)
specifier|public
name|void
name|setCount
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|this
operator|.
name|count
operator|.
name|set
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|setTime (long time)
specifier|public
name|void
name|setTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|time
operator|.
name|set
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|count
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|time
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|count
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|time
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getCount
argument_list|()
operator|+
literal|","
operator|+
name|getTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

