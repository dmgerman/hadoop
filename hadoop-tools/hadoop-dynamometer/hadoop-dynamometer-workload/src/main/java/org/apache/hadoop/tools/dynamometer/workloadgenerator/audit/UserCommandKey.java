begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.dynamometer.workloadgenerator.audit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|dynamometer
operator|.
name|workloadgenerator
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * UserCommandKey is a {@link org.apache.hadoop.io.Writable} used as a composite  * key combining the user id, name, and type of a replayed command. It is used  * as the output key for AuditReplayMapper and the keys for AuditReplayReducer.  */
end_comment

begin_class
DECL|class|UserCommandKey
specifier|public
class|class
name|UserCommandKey
implements|implements
name|WritableComparable
block|{
DECL|field|user
specifier|private
name|Text
name|user
decl_stmt|;
DECL|field|command
specifier|private
name|Text
name|command
decl_stmt|;
DECL|field|type
specifier|private
name|Text
name|type
decl_stmt|;
DECL|method|UserCommandKey ()
specifier|public
name|UserCommandKey
parameter_list|()
block|{
name|user
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|command
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|type
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
DECL|method|UserCommandKey (Text user, Text command, Text type)
specifier|public
name|UserCommandKey
parameter_list|(
name|Text
name|user
parameter_list|,
name|Text
name|command
parameter_list|,
name|Text
name|type
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|UserCommandKey (String user, String command, String type)
specifier|public
name|UserCommandKey
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|command
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
operator|new
name|Text
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
operator|new
name|Text
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
operator|new
name|Text
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getCommand ()
specifier|public
name|String
name|getCommand
parameter_list|()
block|{
return|return
name|command
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|user
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|command
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|type
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|user
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|command
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|type
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo (@onnull Object o)
specifier|public
name|int
name|compareTo
parameter_list|(
annotation|@
name|Nonnull
name|Object
name|o
parameter_list|)
block|{
return|return
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getUser
argument_list|()
operator|+
literal|","
operator|+
name|getType
argument_list|()
operator|+
literal|","
operator|+
name|getCommand
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|UserCommandKey
name|that
init|=
operator|(
name|UserCommandKey
operator|)
name|o
decl_stmt|;
return|return
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getUser
argument_list|()
argument_list|)
operator|&&
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getCommand
argument_list|()
argument_list|)
operator|&&
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|getCommand
argument_list|()
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

