begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
DECL|class|TestHadoopArchiveLogs
specifier|public
class|class
name|TestHadoopArchiveLogs
block|{
DECL|field|CLUSTER_TIMESTAMP
specifier|private
specifier|static
specifier|final
name|long
name|CLUSTER_TIMESTAMP
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|field|FILE_SIZE_INCREMENT
specifier|private
specifier|static
specifier|final
name|int
name|FILE_SIZE_INCREMENT
init|=
literal|4096
decl_stmt|;
DECL|field|DUMMY_DATA
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DUMMY_DATA
init|=
operator|new
name|byte
index|[
name|FILE_SIZE_INCREMENT
index|]
decl_stmt|;
static|static
block|{
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|DUMMY_DATA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCheckFiles ()
specifier|public
name|void
name|testCheckFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|HadoopArchiveLogs
name|hal
init|=
operator|new
name|HadoopArchiveLogs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootLogDir
init|=
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
literal|"logs"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
literal|"logs"
decl_stmt|;
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|,
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|suffix
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hal
operator|.
name|eligibleApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationReport
name|app1
init|=
name|createAppReport
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// no files found
name|ApplicationReport
name|app2
init|=
name|createAppReport
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// too few files
name|Path
name|app2Path
init|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
name|app2
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|app2Path
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|app2Path
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hal
operator|.
name|minNumLogFiles
operator|=
literal|2
expr_stmt|;
name|ApplicationReport
name|app3
init|=
name|createAppReport
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// too large
name|Path
name|app3Path
init|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
name|app3
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|app3Path
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|app3Path
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|app3Path
argument_list|,
literal|"file2"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hal
operator|.
name|maxTotalLogsSize
operator|=
name|FILE_SIZE_INCREMENT
operator|*
literal|6
expr_stmt|;
name|ApplicationReport
name|app4
init|=
name|createAppReport
argument_list|(
literal|4
argument_list|)
decl_stmt|;
comment|// has har already
name|Path
name|app4Path
init|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
name|app4
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|app4Path
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|app4Path
argument_list|,
name|app4
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|".har"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ApplicationReport
name|app5
init|=
name|createAppReport
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|// just right
name|Path
name|app5Path
init|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
name|app5
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|app5Path
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|app5Path
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|app5Path
argument_list|,
literal|"file2"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app1
argument_list|)
expr_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app3
argument_list|)
expr_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app4
argument_list|)
expr_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app5
argument_list|)
expr_stmt|;
name|hal
operator|.
name|checkFiles
argument_list|(
name|fs
argument_list|,
name|rootLogDir
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hal
operator|.
name|eligibleApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app5
argument_list|,
name|hal
operator|.
name|eligibleApplications
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCheckMaxEligible ()
specifier|public
name|void
name|testCheckMaxEligible
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|HadoopArchiveLogs
name|hal
init|=
operator|new
name|HadoopArchiveLogs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ApplicationReport
name|app1
init|=
name|createAppReport
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app1
operator|.
name|setFinishTime
argument_list|(
name|CLUSTER_TIMESTAMP
operator|-
literal|5
argument_list|)
expr_stmt|;
name|ApplicationReport
name|app2
init|=
name|createAppReport
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|app2
operator|.
name|setFinishTime
argument_list|(
name|CLUSTER_TIMESTAMP
operator|-
literal|10
argument_list|)
expr_stmt|;
name|ApplicationReport
name|app3
init|=
name|createAppReport
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|app3
operator|.
name|setFinishTime
argument_list|(
name|CLUSTER_TIMESTAMP
operator|+
literal|5
argument_list|)
expr_stmt|;
name|ApplicationReport
name|app4
init|=
name|createAppReport
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|app4
operator|.
name|setFinishTime
argument_list|(
name|CLUSTER_TIMESTAMP
operator|+
literal|10
argument_list|)
expr_stmt|;
name|ApplicationReport
name|app5
init|=
name|createAppReport
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|app5
operator|.
name|setFinishTime
argument_list|(
name|CLUSTER_TIMESTAMP
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hal
operator|.
name|eligibleApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app1
argument_list|)
expr_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app3
argument_list|)
expr_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app4
argument_list|)
expr_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app5
argument_list|)
expr_stmt|;
name|hal
operator|.
name|maxEligible
operator|=
operator|-
literal|1
expr_stmt|;
name|hal
operator|.
name|checkMaxEligible
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|hal
operator|.
name|eligibleApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hal
operator|.
name|maxEligible
operator|=
literal|4
expr_stmt|;
name|hal
operator|.
name|checkMaxEligible
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|hal
operator|.
name|eligibleApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|hal
operator|.
name|eligibleApplications
operator|.
name|contains
argument_list|(
name|app4
argument_list|)
argument_list|)
expr_stmt|;
name|hal
operator|.
name|maxEligible
operator|=
literal|3
expr_stmt|;
name|hal
operator|.
name|checkMaxEligible
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hal
operator|.
name|eligibleApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|hal
operator|.
name|eligibleApplications
operator|.
name|contains
argument_list|(
name|app3
argument_list|)
argument_list|)
expr_stmt|;
name|hal
operator|.
name|maxEligible
operator|=
literal|2
expr_stmt|;
name|hal
operator|.
name|checkMaxEligible
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hal
operator|.
name|eligibleApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|hal
operator|.
name|eligibleApplications
operator|.
name|contains
argument_list|(
name|app5
argument_list|)
argument_list|)
expr_stmt|;
name|hal
operator|.
name|maxEligible
operator|=
literal|1
expr_stmt|;
name|hal
operator|.
name|checkMaxEligible
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hal
operator|.
name|eligibleApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|hal
operator|.
name|eligibleApplications
operator|.
name|contains
argument_list|(
name|app1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testFindAggregatedApps ()
specifier|public
name|void
name|testFindAggregatedApps
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|yarnCluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|yarnCluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
name|TestHadoopArchiveLogs
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|=
name|yarnCluster
operator|.
name|getConfig
argument_list|()
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
name|RMAppImpl
name|app1
init|=
operator|(
name|RMAppImpl
operator|)
name|createRMApp
argument_list|(
literal|1
argument_list|,
name|conf
argument_list|,
name|rmContext
argument_list|,
name|LogAggregationStatus
operator|.
name|DISABLED
argument_list|)
decl_stmt|;
name|RMAppImpl
name|app2
init|=
operator|(
name|RMAppImpl
operator|)
name|createRMApp
argument_list|(
literal|2
argument_list|,
name|conf
argument_list|,
name|rmContext
argument_list|,
name|LogAggregationStatus
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|RMAppImpl
name|app3
init|=
operator|(
name|RMAppImpl
operator|)
name|createRMApp
argument_list|(
literal|3
argument_list|,
name|conf
argument_list|,
name|rmContext
argument_list|,
name|LogAggregationStatus
operator|.
name|NOT_START
argument_list|)
decl_stmt|;
name|RMAppImpl
name|app4
init|=
operator|(
name|RMAppImpl
operator|)
name|createRMApp
argument_list|(
literal|4
argument_list|,
name|conf
argument_list|,
name|rmContext
argument_list|,
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
decl_stmt|;
name|RMAppImpl
name|app5
init|=
operator|(
name|RMAppImpl
operator|)
name|createRMApp
argument_list|(
literal|5
argument_list|,
name|conf
argument_list|,
name|rmContext
argument_list|,
name|LogAggregationStatus
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|RMAppImpl
name|app6
init|=
operator|(
name|RMAppImpl
operator|)
name|createRMApp
argument_list|(
literal|6
argument_list|,
name|conf
argument_list|,
name|rmContext
argument_list|,
name|LogAggregationStatus
operator|.
name|RUNNING_WITH_FAILURE
argument_list|)
decl_stmt|;
name|RMAppImpl
name|app7
init|=
operator|(
name|RMAppImpl
operator|)
name|createRMApp
argument_list|(
literal|7
argument_list|,
name|conf
argument_list|,
name|rmContext
argument_list|,
name|LogAggregationStatus
operator|.
name|TIME_OUT
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app3
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app3
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app4
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app4
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app5
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app5
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app6
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app6
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app7
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app7
argument_list|)
expr_stmt|;
name|HadoopArchiveLogs
name|hal
init|=
operator|new
name|HadoopArchiveLogs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hal
operator|.
name|eligibleApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hal
operator|.
name|findAggregatedApps
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hal
operator|.
name|eligibleApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|yarnCluster
operator|!=
literal|null
condition|)
block|{
name|yarnCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGenerateScript ()
specifier|public
name|void
name|testGenerateScript
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|HadoopArchiveLogs
name|hal
init|=
operator|new
name|HadoopArchiveLogs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ApplicationReport
name|app1
init|=
name|createAppReport
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ApplicationReport
name|app2
init|=
name|createAppReport
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app1
argument_list|)
expr_stmt|;
name|hal
operator|.
name|eligibleApplications
operator|.
name|add
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|File
name|localScript
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"script.sh"
argument_list|)
decl_stmt|;
name|Path
name|workingDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|,
literal|"working"
argument_list|)
decl_stmt|;
name|Path
name|remoteRootLogDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|,
literal|"logs"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
literal|"logs"
decl_stmt|;
name|localScript
operator|.
name|delete
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|localScript
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|hal
operator|.
name|generateScript
argument_list|(
name|localScript
argument_list|,
name|workingDir
argument_list|,
name|remoteRootLogDir
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localScript
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|script
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|localScript
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|lines
init|=
name|script
operator|.
name|split
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|lines
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"#!/bin/bash"
argument_list|,
name|lines
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"set -e"
argument_list|,
name|lines
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"set -x"
argument_list|,
name|lines
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"if [ \"$YARN_SHELL_ID\" == \"1\" ]; then"
argument_list|,
name|lines
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|lines
index|[
literal|4
index|]
operator|.
name|contains
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\tappId=\""
operator|+
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|,
name|lines
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\tappId=\""
operator|+
name|app2
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|,
name|lines
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\tappId=\""
operator|+
name|app2
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|,
name|lines
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\tappId=\""
operator|+
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|,
name|lines
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\tuser=\""
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
operator|+
literal|"\""
argument_list|,
name|lines
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"elif [ \"$YARN_SHELL_ID\" == \"2\" ]; then"
argument_list|,
name|lines
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\tuser=\""
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
operator|+
literal|"\""
argument_list|,
name|lines
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"else"
argument_list|,
name|lines
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\techo \"Unknown Mapping!\""
argument_list|,
name|lines
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\texit 1"
argument_list|,
name|lines
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"fi"
argument_list|,
name|lines
index|[
literal|12
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"export HADOOP_CLIENT_OPTS=\"-Xmx1024m\""
argument_list|,
name|lines
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lines
index|[
literal|14
index|]
operator|.
name|startsWith
argument_list|(
literal|"export HADOOP_CLASSPATH="
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\"$HADOOP_HOME\"/bin/hadoop org.apache.hadoop.tools."
operator|+
literal|"HadoopArchiveLogsRunner -appId \"$appId\" -user \"$user\" -workingDir "
operator|+
name|workingDir
operator|.
name|toString
argument_list|()
operator|+
literal|" -remoteRootLogDir "
operator|+
name|remoteRootLogDir
operator|.
name|toString
argument_list|()
operator|+
literal|" -suffix "
operator|+
name|suffix
argument_list|,
name|lines
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|createAppReport (int id)
specifier|private
specifier|static
name|ApplicationReport
name|createAppReport
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|CLUSTER_TIMESTAMP
argument_list|,
name|id
argument_list|)
decl_stmt|;
return|return
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|100f
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createFile (FileSystem fs, Path p, long sizeMultiple)
specifier|private
specifier|static
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|long
name|sizeMultiple
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizeMultiple
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|DUMMY_DATA
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createRMApp (int id, Configuration conf, RMContext rmContext, final LogAggregationStatus aggStatus)
specifier|private
specifier|static
name|RMApp
name|createRMApp
parameter_list|(
name|int
name|id
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
specifier|final
name|LogAggregationStatus
name|aggStatus
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|CLUSTER_TIMESTAMP
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|submissionContext
init|=
name|ApplicationSubmissionContext
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|"test"
argument_list|,
literal|"default"
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
return|return
operator|new
name|RMAppImpl
argument_list|(
name|appId
argument_list|,
name|rmContext
argument_list|,
name|conf
argument_list|,
literal|"test"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"default"
argument_list|,
name|submissionContext
argument_list|,
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|,
name|rmContext
operator|.
name|getApplicationMasterService
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ApplicationReport
name|createAndGetApplicationReport
parameter_list|(
name|String
name|clientUserName
parameter_list|,
name|boolean
name|allowAccess
parameter_list|)
block|{
name|ApplicationReport
name|report
init|=
name|super
operator|.
name|createAndGetApplicationReport
argument_list|(
name|clientUserName
argument_list|,
name|allowAccess
argument_list|)
decl_stmt|;
name|report
operator|.
name|setLogAggregationStatus
argument_list|(
name|aggStatus
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

