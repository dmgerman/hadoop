begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|HarFs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestHadoopArchiveLogsRunner
specifier|public
class|class
name|TestHadoopArchiveLogsRunner
block|{
DECL|field|FILE_SIZE_INCREMENT
specifier|private
specifier|static
specifier|final
name|int
name|FILE_SIZE_INCREMENT
init|=
literal|4096
decl_stmt|;
DECL|field|FILE_SIZES
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|FILE_SIZES
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|2
block|}
decl_stmt|;
DECL|field|FILE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|FILE_COUNT
init|=
name|FILE_SIZES
operator|.
name|length
decl_stmt|;
DECL|field|DUMMY_DATA
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DUMMY_DATA
init|=
operator|new
name|byte
index|[
name|FILE_SIZE_INCREMENT
index|]
decl_stmt|;
static|static
block|{
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|DUMMY_DATA
argument_list|)
expr_stmt|;
block|}
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|dfsCluster
specifier|private
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|yarnCluster
specifier|private
name|MiniYARNCluster
name|yarnCluster
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|app1
specifier|private
name|ApplicationId
name|app1
decl_stmt|;
DECL|field|app1Path
specifier|private
name|Path
name|app1Path
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|remoteRootLogDir
specifier|private
name|Path
name|remoteRootLogDir
decl_stmt|;
DECL|field|suffix
specifier|private
name|String
name|suffix
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|50000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|yarnCluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
name|TestHadoopArchiveLogsRunner
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_FIXED_PORTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|=
name|yarnCluster
operator|.
name|getConfig
argument_list|()
expr_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|app1
operator|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|remoteRootLogDir
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|workingDir
operator|=
operator|new
name|Path
argument_list|(
name|remoteRootLogDir
argument_list|,
literal|"archive-logs-work"
argument_list|)
expr_stmt|;
name|suffix
operator|=
literal|"logs"
expr_stmt|;
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|remoteRootLogDir
argument_list|,
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|suffix
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|app1Path
operator|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
name|app1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|app1Path
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FILE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|app1Path
argument_list|,
literal|"log"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
name|FILE_SIZES
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|FileStatus
index|[]
name|app1Files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|app1Path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FILE_COUNT
argument_list|,
name|app1Files
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|yarnCluster
operator|!=
literal|null
condition|)
block|{
name|yarnCluster
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHadoopArchiveLogs ()
specifier|public
name|void
name|testHadoopArchiveLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
name|getArgs
argument_list|()
decl_stmt|;
specifier|final
name|HadoopArchiveLogsRunner
name|halr
init|=
operator|new
name|HadoopArchiveLogsRunner
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|halr
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|app1Files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|app1Path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1Files
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileStatus
name|harFile
init|=
name|app1Files
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|toString
argument_list|()
operator|+
literal|".har"
argument_list|,
name|harFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
literal|"har:///"
operator|+
name|harFile
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|harLogs
init|=
name|HarFs
operator|.
name|get
argument_list|(
name|harPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
operator|.
name|listStatus
argument_list|(
name|harPath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FILE_COUNT
argument_list|,
name|harLogs
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|harLogs
argument_list|,
operator|new
name|Comparator
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FileStatus
name|o1
parameter_list|,
name|FileStatus
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FILE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|FileStatus
name|harLog
init|=
name|harLogs
index|[
name|i
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"log"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|harLog
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FILE_SIZES
index|[
name|i
index|]
operator|*
name|FILE_SIZE_INCREMENT
argument_list|,
name|harLog
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|,
name|harLog
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|harLog
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|workingDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHadoopArchiveLogsWithArchiveError ()
specifier|public
name|void
name|testHadoopArchiveLogsWithArchiveError
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
name|getArgs
argument_list|()
decl_stmt|;
specifier|final
name|HadoopArchiveLogsRunner
name|halr
init|=
operator|new
name|HadoopArchiveLogsRunner
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HadoopArchives
name|mockHadoopArchives
init|=
name|mock
argument_list|(
name|HadoopArchives
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockHadoopArchives
operator|.
name|run
argument_list|(
name|Mockito
operator|.
expr|<
name|String
index|[]
operator|>
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|halr
operator|.
name|hadoopArchives
operator|=
name|mockHadoopArchives
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|halr
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the original log files are intact
name|FileStatus
index|[]
name|app1Files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|app1Path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FILE_COUNT
argument_list|,
name|app1Files
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FILE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FILE_SIZES
index|[
name|i
index|]
operator|*
name|FILE_SIZE_INCREMENT
argument_list|,
name|app1Files
index|[
name|i
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getArgs ()
specifier|private
name|String
index|[]
name|getArgs
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"-appId"
block|,
name|app1
operator|.
name|toString
argument_list|()
block|,
literal|"-user"
block|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
block|,
literal|"-workingDir"
block|,
name|workingDir
operator|.
name|toString
argument_list|()
block|,
literal|"-remoteRootLogDir"
block|,
name|remoteRootLogDir
operator|.
name|toString
argument_list|()
block|,
literal|"-suffix"
block|,
name|suffix
block|}
return|;
block|}
DECL|method|createFile (FileSystem fs, Path p, long sizeMultiple)
specifier|private
specifier|static
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|long
name|sizeMultiple
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizeMultiple
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|DUMMY_DATA
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

