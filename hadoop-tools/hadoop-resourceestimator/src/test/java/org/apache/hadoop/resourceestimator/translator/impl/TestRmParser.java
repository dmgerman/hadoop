begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.translator.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|ResourceSkyline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|config
operator|.
name|ResourceEstimatorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|exception
operator|.
name|ResourceEstimatorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|api
operator|.
name|SkylineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|SkylineStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|impl
operator|.
name|InMemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|api
operator|.
name|LogParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|exceptions
operator|.
name|DataFieldNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This sample parser will parse the sample log and extract the resource  * skyline.  */
end_comment

begin_class
DECL|class|TestRmParser
specifier|public
class|class
name|TestRmParser
block|{
DECL|field|logParserUtil
specifier|private
name|LogParserUtil
name|logParserUtil
init|=
operator|new
name|LogParserUtil
argument_list|()
decl_stmt|;
DECL|field|skylineStore
specifier|private
name|SkylineStore
name|skylineStore
decl_stmt|;
DECL|method|setup ()
annotation|@
name|Before
specifier|public
specifier|final
name|void
name|setup
parameter_list|()
throws|throws
name|ResourceEstimatorException
block|{
name|skylineStore
operator|=
operator|new
name|InMemoryStore
argument_list|()
expr_stmt|;
specifier|final
name|LogParser
name|rmParser
init|=
operator|new
name|BaseLogParser
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|addResource
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|CONFIG_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|TRANSLATOR_LINE_PARSER
argument_list|,
name|RmSingleLineParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rmParser
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|skylineStore
argument_list|)
expr_stmt|;
name|logParserUtil
operator|.
name|setLogParser
argument_list|(
name|rmParser
argument_list|)
expr_stmt|;
block|}
DECL|method|parseFile (final String logFile)
specifier|private
name|void
name|parseFile
parameter_list|(
specifier|final
name|String
name|logFile
parameter_list|)
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ParseException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
block|{
name|logParserUtil
operator|.
name|parseLog
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testParse
parameter_list|()
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ParseException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
block|{
specifier|final
name|String
name|logFile
init|=
literal|"src/test/resources/trace/rmLog.txt"
decl_stmt|;
name|parseFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobSkylineLists
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobSkylineLists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|jobHistory
init|=
name|jobSkylineLists
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobHistory
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline
init|=
name|jobHistory
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resourceSkyline
operator|.
name|getJobInputDataSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application_1497832133857_0330"
argument_list|,
name|resourceSkyline
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"06/21/2017 16:10:13"
argument_list|)
argument_list|,
name|resourceSkyline
operator|.
name|getJobSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"06/21/2017 16:18:35"
argument_list|)
argument_list|,
name|resourceSkyline
operator|.
name|getJobFinishTime
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1800
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|resourceSkyline
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|resourceSkyline
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RLESparseResourceAllocation
name|skylineLists
init|=
name|resourceSkyline
operator|.
name|getSkylineList
argument_list|()
decl_stmt|;
name|int
name|k
decl_stmt|;
for|for
control|(
name|k
operator|=
literal|0
init|;
name|k
operator|<
literal|142
condition|;
name|k
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|skylineLists
operator|.
name|getCapacityAtTime
argument_list|(
name|k
argument_list|)
operator|.
name|getMemorySize
argument_list|()
operator|/
name|resource
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|k
operator|=
literal|142
init|;
name|k
operator|<
literal|345
condition|;
name|k
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|skylineLists
operator|.
name|getCapacityAtTime
argument_list|(
name|k
argument_list|)
operator|.
name|getMemorySize
argument_list|()
operator|/
name|resource
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|k
operator|=
literal|345
init|;
name|k
operator|<
literal|502
condition|;
name|k
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|skylineLists
operator|.
name|getCapacityAtTime
argument_list|(
name|k
argument_list|)
operator|.
name|getMemorySize
argument_list|()
operator|/
name|resource
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
DECL|method|testInvalidDateFormat ()
specifier|public
specifier|final
name|void
name|testInvalidDateFormat
parameter_list|()
throws|throws
name|ParseException
block|{
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"2017.07.16 16:37:45"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuplicateJobSubmissionTime ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testDuplicateJobSubmissionTime
parameter_list|()
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ParseException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
block|{
specifier|final
name|String
name|logFile
init|=
literal|"src/test/resources/trace/invalidLog1.txt"
decl_stmt|;
name|parseFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Test"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobSkylineLists
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"06/21/2017 16:10:23"
argument_list|)
argument_list|,
name|jobSkylineLists
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJobSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testJobIdNotFoundInJobSubmission ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testJobIdNotFoundInJobSubmission
parameter_list|()
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ParseException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
block|{
specifier|final
name|String
name|logFile
init|=
literal|"src/test/resources/trace/invalidLog2.txt"
decl_stmt|;
name|parseFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Test"
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testJobIdNotFoundInContainerAlloc ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testJobIdNotFoundInContainerAlloc
parameter_list|()
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ParseException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
block|{
specifier|final
name|String
name|logFile
init|=
literal|"src/test/resources/trace/invalidLog3.txt"
decl_stmt|;
name|parseFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Test"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobSkylineLists
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|jobSkylineLists
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSkylineList
argument_list|()
operator|.
name|getCumulative
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainerIdNotFoundInContainerAlloc ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testContainerIdNotFoundInContainerAlloc
parameter_list|()
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ParseException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
block|{
specifier|final
name|String
name|logFile
init|=
literal|"src/test/resources/trace/invalidLog4.txt"
decl_stmt|;
name|parseFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Test"
argument_list|,
literal|"4"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobSkylineLists
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|jobSkylineLists
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSkylineList
argument_list|()
operator|.
name|getCumulative
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testJobIdNotFoundInJobFailure ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testJobIdNotFoundInJobFailure
parameter_list|()
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ParseException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
block|{
specifier|final
name|String
name|logFile
init|=
literal|"src/test/resources/trace/invalidLog5.txt"
decl_stmt|;
name|parseFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Test"
argument_list|,
literal|"5"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobSkylineLists
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"06/21/2017 16:10:13"
argument_list|)
argument_list|,
name|jobSkylineLists
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJobSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testJobIdNotFoundInJobFinish ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testJobIdNotFoundInJobFinish
parameter_list|()
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ParseException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
block|{
specifier|final
name|String
name|logFile
init|=
literal|"src/test/resources/trace/invalidLog6.txt"
decl_stmt|;
name|parseFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Test"
argument_list|,
literal|"6"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecurrenceIdNotFoundInJobFinish ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testRecurrenceIdNotFoundInJobFinish
parameter_list|()
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ParseException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
block|{
specifier|final
name|String
name|logFile
init|=
literal|"src/test/resources/trace/invalidLog7.txt"
decl_stmt|;
name|parseFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Test"
argument_list|,
literal|"7"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testJobIdNotFoundInResourceSpec ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testJobIdNotFoundInResourceSpec
parameter_list|()
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ParseException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
block|{
specifier|final
name|String
name|logFile
init|=
literal|"src/test/resources/trace/invalidLog8.txt"
decl_stmt|;
name|parseFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Test"
argument_list|,
literal|"8"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobSkylineLists
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|jobSkylineLists
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobSkylineLists
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testResourceSpecNotFoundInResourceSpec ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testResourceSpecNotFoundInResourceSpec
parameter_list|()
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ParseException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
block|{
specifier|final
name|String
name|logFile
init|=
literal|"src/test/resources/trace/invalidLog9.txt"
decl_stmt|;
name|parseFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Test"
argument_list|,
literal|"9"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobSkylineLists
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|jobSkylineLists
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobSkylineLists
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanUp ()
annotation|@
name|After
specifier|public
specifier|final
name|void
name|cleanUp
parameter_list|()
block|{
name|skylineStore
operator|=
literal|null
expr_stmt|;
name|logParserUtil
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

