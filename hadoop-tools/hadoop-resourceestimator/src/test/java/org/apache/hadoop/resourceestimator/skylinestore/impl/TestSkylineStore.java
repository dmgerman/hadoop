begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.skylinestore.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|ResourceSkyline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|api
operator|.
name|SkylineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|DuplicateRecurrenceIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|EmptyResourceSkylineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|NullPipelineIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|NullRLESparseResourceAllocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|NullRecurrenceIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|NullResourceSkylineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|RecurrenceIdNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|SkylineStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test {@link SkylineStore} class.  */
end_comment

begin_class
DECL|class|TestSkylineStore
specifier|public
specifier|abstract
class|class
name|TestSkylineStore
block|{
comment|/**    * Testing variables.    */
DECL|field|skylineStore
specifier|private
name|SkylineStore
name|skylineStore
decl_stmt|;
DECL|field|resourceOverTime
specifier|private
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|resourceOverTime
decl_stmt|;
DECL|field|skylineList
specifier|private
name|RLESparseResourceAllocation
name|skylineList
decl_stmt|;
DECL|field|riAdd
specifier|private
name|ReservationInterval
name|riAdd
decl_stmt|;
DECL|field|resource
specifier|private
name|Resource
name|resource
decl_stmt|;
DECL|method|createSkylineStore ()
specifier|protected
specifier|abstract
name|SkylineStore
name|createSkylineStore
parameter_list|()
function_decl|;
DECL|method|setup ()
annotation|@
name|Before
specifier|public
specifier|final
name|void
name|setup
parameter_list|()
block|{
name|skylineStore
operator|=
name|createSkylineStore
argument_list|()
expr_stmt|;
name|resourceOverTime
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (final ResourceSkyline skyline1, final ResourceSkyline skyline2)
specifier|private
name|void
name|compare
parameter_list|(
specifier|final
name|ResourceSkyline
name|skyline1
parameter_list|,
specifier|final
name|ResourceSkyline
name|skyline2
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getJobId
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getJobInputDataSize
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getJobInputDataSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getJobSubmissionTime
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getJobSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getJobFinishTime
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getJobFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|skyline2
operator|.
name|getSkylineList
argument_list|()
operator|.
name|equals
argument_list|(
name|skyline1
operator|.
name|getSkylineList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addToStore (final RecurrenceId recurrenceId, final ResourceSkyline resourceSkyline)
specifier|private
name|void
name|addToStore
parameter_list|(
specifier|final
name|RecurrenceId
name|recurrenceId
parameter_list|,
specifier|final
name|ResourceSkyline
name|resourceSkyline
parameter_list|)
throws|throws
name|SkylineStoreException
block|{
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline
argument_list|)
expr_stmt|;
name|skylineStore
operator|.
name|addHistory
argument_list|(
name|recurrenceId
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylinesGet
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resourceSkylinesGet
operator|.
name|contains
argument_list|(
name|resourceSkyline
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getSkyline (final int n)
specifier|private
name|ResourceSkyline
name|getSkyline
parameter_list|(
specifier|final
name|int
name|n
parameter_list|)
block|{
name|skylineList
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resourceOverTime
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|riAdd
operator|=
operator|new
name|ReservationInterval
argument_list|(
name|i
operator|*
literal|10
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|10
argument_list|)
expr_stmt|;
name|skylineList
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ResourceSkyline
name|resourceSkyline
init|=
operator|new
name|ResourceSkyline
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|n
argument_list|)
argument_list|,
literal|1024.5
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
name|resource
argument_list|,
name|skylineList
argument_list|)
decl_stmt|;
return|return
name|resourceSkyline
return|;
block|}
DECL|method|testGetHistory ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testGetHistory
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
comment|// addHistory first recurring pipeline
specifier|final
name|RecurrenceId
name|recurrenceId1
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId1
argument_list|,
name|resourceSkyline1
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline2
init|=
name|getSkyline
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId1
argument_list|,
name|resourceSkyline2
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId2
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/21 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline3
init|=
name|getSkyline
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId2
argument_list|,
name|resourceSkyline3
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline4
init|=
name|getSkyline
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId2
argument_list|,
name|resourceSkyline4
argument_list|)
expr_stmt|;
comment|// addHistory second recurring pipeline
specifier|final
name|RecurrenceId
name|recurrenceId3
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Random"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId3
argument_list|,
name|resourceSkyline1
argument_list|)
expr_stmt|;
name|addToStore
argument_list|(
name|recurrenceId3
argument_list|,
name|resourceSkyline2
argument_list|)
expr_stmt|;
comment|// test getHistory {pipelineId, runId}
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobHistory
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobHistory
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|entry
range|:
name|jobHistory
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|recurrenceId1
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|getSkylines
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getSkylines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline1
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline2
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test getHistory {pipelineId, *}
name|RecurrenceId
name|recurrenceIdTest
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|jobHistory
operator|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceIdTest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|jobHistory
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|entry
range|:
name|jobHistory
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|recurrenceId1
operator|.
name|getPipelineId
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getPipelineId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|getSkylines
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getRunId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"17/06/20 00:00:00"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getSkylines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline1
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline2
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getRunId
argument_list|()
argument_list|,
literal|"17/06/21 00:00:00"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getSkylines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline3
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline4
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test getHistory {*, runId}
name|recurrenceIdTest
operator|=
operator|new
name|RecurrenceId
argument_list|(
literal|"*"
argument_list|,
literal|"some random runId"
argument_list|)
expr_stmt|;
name|jobHistory
operator|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceIdTest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|jobHistory
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|entry
range|:
name|jobHistory
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getPipelineId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"FraudDetection"
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|getSkylines
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getRunId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"17/06/20 00:00:00"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getSkylines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline1
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline2
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getRunId
argument_list|()
argument_list|,
literal|"17/06/21 00:00:00"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getSkylines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline3
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline4
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Random"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getPipelineId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getRunId
argument_list|()
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|getSkylines
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getSkylines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline1
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline2
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test getHistory with wrong RecurrenceId
name|recurrenceIdTest
operator|=
operator|new
name|RecurrenceId
argument_list|(
literal|"some random pipelineId"
argument_list|,
literal|"some random runId"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceIdTest
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetEstimation ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testGetEstimation
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
comment|// first, add estimation to the skyline store
specifier|final
name|RLESparseResourceAllocation
name|skylineList2
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resourceOverTime
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|riAdd
operator|=
operator|new
name|ReservationInterval
argument_list|(
name|i
operator|*
literal|10
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|10
argument_list|)
expr_stmt|;
name|skylineList2
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
name|skylineStore
operator|.
name|addEstimation
argument_list|(
literal|"FraudDetection"
argument_list|,
name|skylineList2
argument_list|)
expr_stmt|;
comment|// then, try to get the estimation
specifier|final
name|RLESparseResourceAllocation
name|estimation
init|=
name|skylineStore
operator|.
name|getEstimation
argument_list|(
literal|"FraudDetection"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skylineList2
operator|.
name|getCapacityAtTime
argument_list|(
name|i
argument_list|)
argument_list|,
name|estimation
operator|.
name|getCapacityAtTime
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullRecurrenceIdException
operator|.
name|class
argument_list|)
DECL|method|testGetNullRecurrenceId ()
specifier|public
specifier|final
name|void
name|testGetNullRecurrenceId
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
comment|// addHistory first recurring pipeline
specifier|final
name|RecurrenceId
name|recurrenceId1
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId1
argument_list|,
name|resourceSkyline1
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline2
init|=
name|getSkyline
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId1
argument_list|,
name|resourceSkyline2
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceId2
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/21 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline3
init|=
name|getSkyline
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId2
argument_list|,
name|resourceSkyline3
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline4
init|=
name|getSkyline
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId2
argument_list|,
name|resourceSkyline4
argument_list|)
expr_stmt|;
comment|// addHistory second recurring pipeline
specifier|final
name|RecurrenceId
name|recurrenceId3
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Random"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId3
argument_list|,
name|resourceSkyline1
argument_list|)
expr_stmt|;
name|addToStore
argument_list|(
name|recurrenceId3
argument_list|,
name|resourceSkyline2
argument_list|)
expr_stmt|;
comment|// try to getHistory with null recurringId
name|skylineStore
operator|.
name|getHistory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPipelineIdException
operator|.
name|class
argument_list|)
DECL|method|testGetNullPipelineIdException ()
specifier|public
specifier|final
name|void
name|testGetNullPipelineIdException
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
name|skylineStore
operator|.
name|getEstimation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddNormal ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testAddNormal
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
comment|// addHistory resource skylines to the in-memory store
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId
argument_list|,
name|resourceSkyline1
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
comment|// the resource skylines to be added contain null
name|resourceSkylines
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline2
init|=
name|getSkyline
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline2
argument_list|)
expr_stmt|;
name|skylineStore
operator|.
name|addHistory
argument_list|(
name|recurrenceId
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
comment|// query the in-memory store
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobHistory
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobHistory
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|entry
range|:
name|jobHistory
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|recurrenceId
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|getSkylines
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getSkylines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline1
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline2
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullRecurrenceIdException
operator|.
name|class
argument_list|)
DECL|method|testAddNullRecurrenceId ()
specifier|public
specifier|final
name|void
name|testAddNullRecurrenceId
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
comment|// recurrenceId is null
specifier|final
name|RecurrenceId
name|recurrenceIdNull
init|=
literal|null
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline1
argument_list|)
expr_stmt|;
name|skylineStore
operator|.
name|addHistory
argument_list|(
name|recurrenceIdNull
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullResourceSkylineException
operator|.
name|class
argument_list|)
DECL|method|testAddNullResourceSkyline ()
specifier|public
specifier|final
name|void
name|testAddNullResourceSkyline
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline1
argument_list|)
expr_stmt|;
comment|// resourceSkylines is null
name|skylineStore
operator|.
name|addHistory
argument_list|(
name|recurrenceId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DuplicateRecurrenceIdException
operator|.
name|class
argument_list|)
DECL|method|testAddDuplicateRecurrenceId ()
specifier|public
specifier|final
name|void
name|testAddDuplicateRecurrenceId
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline1
argument_list|)
expr_stmt|;
comment|// trying to addHistory duplicate resource skylines
name|skylineStore
operator|.
name|addHistory
argument_list|(
name|recurrenceId
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
name|skylineStore
operator|.
name|addHistory
argument_list|(
name|recurrenceId
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPipelineIdException
operator|.
name|class
argument_list|)
DECL|method|testAddNullPipelineIdException ()
specifier|public
specifier|final
name|void
name|testAddNullPipelineIdException
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
specifier|final
name|RLESparseResourceAllocation
name|skylineList2
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resourceOverTime
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|riAdd
operator|=
operator|new
name|ReservationInterval
argument_list|(
name|i
operator|*
literal|10
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|10
argument_list|)
expr_stmt|;
name|skylineList2
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
name|skylineStore
operator|.
name|addEstimation
argument_list|(
literal|null
argument_list|,
name|skylineList2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullRLESparseResourceAllocationException
operator|.
name|class
argument_list|)
DECL|method|testAddNullRLESparseResourceAllocationExceptionException ()
specifier|public
specifier|final
name|void
name|testAddNullRLESparseResourceAllocationExceptionException
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
name|skylineStore
operator|.
name|addEstimation
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteNormal ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testDeleteNormal
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
comment|// addHistory first recurring pipeline
specifier|final
name|RecurrenceId
name|recurrenceId1
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId1
argument_list|,
name|resourceSkyline1
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline2
init|=
name|getSkyline
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId1
argument_list|,
name|resourceSkyline2
argument_list|)
expr_stmt|;
comment|// test deleteHistory function of the in-memory store
name|skylineStore
operator|.
name|deleteHistory
argument_list|(
name|recurrenceId1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullRecurrenceIdException
operator|.
name|class
argument_list|)
DECL|method|testDeleteNullRecurrenceId ()
specifier|public
specifier|final
name|void
name|testDeleteNullRecurrenceId
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
specifier|final
name|RecurrenceId
name|recurrenceId1
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId1
argument_list|,
name|resourceSkyline1
argument_list|)
expr_stmt|;
comment|// try to deleteHistory with null recurringId
name|skylineStore
operator|.
name|deleteHistory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RecurrenceIdNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testDeleteRecurrenceIdNotFound ()
specifier|public
specifier|final
name|void
name|testDeleteRecurrenceIdNotFound
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
specifier|final
name|RecurrenceId
name|recurrenceId1
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId1
argument_list|,
name|resourceSkyline1
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceIdInvalid
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Some random pipelineId"
argument_list|,
literal|"Some random runId"
argument_list|)
decl_stmt|;
comment|// try to deleteHistory non-existing recurringId
name|skylineStore
operator|.
name|deleteHistory
argument_list|(
name|recurrenceIdInvalid
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpdateNormal ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testUpdateNormal
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
comment|// addHistory first recurring pipeline
specifier|final
name|RecurrenceId
name|recurrenceId1
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|addToStore
argument_list|(
name|recurrenceId1
argument_list|,
name|resourceSkyline1
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline2
init|=
name|getSkyline
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline1
argument_list|)
expr_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline2
argument_list|)
expr_stmt|;
name|skylineStore
operator|.
name|updateHistory
argument_list|(
name|recurrenceId1
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
comment|// query the in-memory store
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobHistory
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobHistory
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|entry
range|:
name|jobHistory
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|recurrenceId1
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|getSkylines
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getSkylines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline1
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|resourceSkyline2
argument_list|,
name|getSkylines
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullRecurrenceIdException
operator|.
name|class
argument_list|)
DECL|method|testUpdateNullRecurrenceId ()
specifier|public
specifier|final
name|void
name|testUpdateNullRecurrenceId
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline1
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylinesInvalid
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
name|resourceSkylinesInvalid
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// try to updateHistory with null recurringId
name|skylineStore
operator|.
name|updateHistory
argument_list|(
literal|null
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullResourceSkylineException
operator|.
name|class
argument_list|)
DECL|method|testUpdateNullResourceSkyline ()
specifier|public
specifier|final
name|void
name|testUpdateNullResourceSkyline
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline1
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylinesInvalid
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
name|resourceSkylinesInvalid
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// try to updateHistory with null resourceSkylines
name|skylineStore
operator|.
name|addHistory
argument_list|(
name|recurrenceId
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
name|skylineStore
operator|.
name|updateHistory
argument_list|(
name|recurrenceId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|EmptyResourceSkylineException
operator|.
name|class
argument_list|)
DECL|method|testUpdateEmptyRecurrenceId ()
specifier|public
specifier|final
name|void
name|testUpdateEmptyRecurrenceId
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"FraudDetection"
argument_list|,
literal|"17/06/20 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline1
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylinesInvalid
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
name|resourceSkylinesInvalid
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|skylineStore
operator|.
name|addHistory
argument_list|(
name|recurrenceId
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
comment|// try to updateHistory with empty resourceSkyline
name|skylineStore
operator|.
name|updateHistory
argument_list|(
name|recurrenceId
argument_list|,
name|resourceSkylinesInvalid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RecurrenceIdNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testUpdateRecurrenceIdNotFound ()
specifier|public
specifier|final
name|void
name|testUpdateRecurrenceIdNotFound
parameter_list|()
throws|throws
name|SkylineStoreException
block|{
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
name|getSkyline
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline1
argument_list|)
expr_stmt|;
specifier|final
name|RecurrenceId
name|recurrenceIdInvalid
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Some random pipelineId"
argument_list|,
literal|"Some random runId"
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylinesInvalid
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
name|resourceSkylinesInvalid
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// try to updateHistory with non-existing recurringId
name|skylineStore
operator|.
name|updateHistory
argument_list|(
name|recurrenceIdInvalid
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanUp ()
annotation|@
name|After
specifier|public
specifier|final
name|void
name|cleanUp
parameter_list|()
block|{
name|skylineStore
operator|=
literal|null
expr_stmt|;
name|resourceOverTime
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resourceOverTime
operator|=
literal|null
expr_stmt|;
name|skylineList
operator|=
literal|null
expr_stmt|;
name|riAdd
operator|=
literal|null
expr_stmt|;
name|resource
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

