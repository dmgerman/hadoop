begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.translator.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|impl
operator|.
name|LogParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test JobMetaData.  */
end_comment

begin_class
DECL|class|TestJobMetaData
specifier|public
class|class
name|TestJobMetaData
block|{
comment|/**    * TODO: parametrize this test.    */
DECL|field|logParserUtil
specifier|private
name|LogParserUtil
name|logParserUtil
init|=
operator|new
name|LogParserUtil
argument_list|()
decl_stmt|;
DECL|field|jobMetaData
specifier|private
name|JobMetaData
name|jobMetaData
decl_stmt|;
DECL|field|recurrenceId
specifier|private
name|RecurrenceId
name|recurrenceId
decl_stmt|;
DECL|method|setup ()
annotation|@
name|Before
specifier|public
specifier|final
name|void
name|setup
parameter_list|()
throws|throws
name|ParseException
block|{
name|recurrenceId
operator|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Fraud Detection"
argument_list|,
literal|"17/07/16 16:27:25"
argument_list|)
expr_stmt|;
name|jobMetaData
operator|=
operator|new
name|JobMetaData
argument_list|(
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:27:25"
argument_list|)
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|setRecurrenceId
argument_list|(
name|recurrenceId
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|setContainerStart
argument_list|(
literal|"C1"
argument_list|,
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:27:30"
argument_list|)
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|setContainerEnd
argument_list|(
literal|"C1"
argument_list|,
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:37:30"
argument_list|)
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|setContainerStart
argument_list|(
literal|"C2"
argument_list|,
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:27:40"
argument_list|)
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|setContainerEnd
argument_list|(
literal|"C2"
argument_list|,
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:37:40"
argument_list|)
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|setJobFinishTime
argument_list|(
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:37:45"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|containerAlloc
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|jobMetaData
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|setContainerSpec
argument_list|(
name|containerAlloc
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|setJobInputDataSize
argument_list|(
literal|1024.5
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|createSkyline
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetContainerSpec ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testGetContainerSpec
parameter_list|()
block|{
specifier|final
name|Resource
name|containerAlloc
init|=
name|jobMetaData
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|getContainerSpec
argument_list|()
decl_stmt|;
specifier|final
name|Resource
name|containerAlloc2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerAlloc
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|containerAlloc2
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerAlloc
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|containerAlloc2
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetJobSize ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testGetJobSize
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|jobMetaData
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|getJobInputDataSize
argument_list|()
argument_list|,
literal|1024.5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetRecurrenceeId ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testGetRecurrenceeId
parameter_list|()
block|{
specifier|final
name|RecurrenceId
name|recurrenceIdTest
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Fraud Detection"
argument_list|,
literal|"17/07/16 16:27:25"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|recurrenceIdTest
argument_list|,
name|jobMetaData
operator|.
name|getRecurrenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringToUnixTimestamp ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testStringToUnixTimestamp
parameter_list|()
throws|throws
name|ParseException
block|{
specifier|final
name|long
name|submissionTime
init|=
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:27:25"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|jobMetaData
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|getJobSubmissionTime
argument_list|()
argument_list|,
name|submissionTime
argument_list|)
expr_stmt|;
block|}
DECL|method|testResourceSkyline ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testResourceSkyline
parameter_list|()
block|{
specifier|final
name|RLESparseResourceAllocation
name|skylineList
init|=
name|jobMetaData
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|getSkylineList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|containerCPU
init|=
name|jobMetaData
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
name|int
name|k
decl_stmt|;
for|for
control|(
name|k
operator|=
literal|0
init|;
name|k
operator|<
literal|5
condition|;
name|k
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
name|k
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
operator|/
name|containerCPU
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|k
operator|=
literal|5
init|;
name|k
operator|<
literal|15
condition|;
name|k
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
name|k
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
operator|/
name|containerCPU
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|k
operator|=
literal|15
init|;
name|k
operator|<
literal|605
condition|;
name|k
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
name|k
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
operator|/
name|containerCPU
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|k
operator|=
literal|605
init|;
name|k
operator|<
literal|615
condition|;
name|k
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
name|k
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
operator|/
name|containerCPU
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
literal|615
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
operator|/
name|containerCPU
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainerReleaseTimeMissing ()
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testContainerReleaseTimeMissing
parameter_list|()
throws|throws
name|ParseException
block|{
comment|// create an invalid JobMetaData
name|recurrenceId
operator|=
operator|new
name|RecurrenceId
argument_list|(
literal|"Fraud Detection"
argument_list|,
literal|"17/07/16 16:27:25"
argument_list|)
expr_stmt|;
name|jobMetaData
operator|=
operator|new
name|JobMetaData
argument_list|(
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:27:25"
argument_list|)
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|setRecurrenceId
argument_list|(
name|recurrenceId
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|setContainerStart
argument_list|(
literal|"C1"
argument_list|,
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:27:30"
argument_list|)
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|setContainerEnd
argument_list|(
literal|"C1"
argument_list|,
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:37:30"
argument_list|)
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|setContainerStart
argument_list|(
literal|"C2"
argument_list|,
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:27:40"
argument_list|)
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|setJobFinishTime
argument_list|(
name|logParserUtil
operator|.
name|stringToUnixTimestamp
argument_list|(
literal|"17/07/16 16:37:45"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|containerAlloc
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|jobMetaData
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|setContainerSpec
argument_list|(
name|containerAlloc
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|setJobInputDataSize
argument_list|(
literal|1024.5
argument_list|)
expr_stmt|;
name|jobMetaData
operator|.
name|createSkyline
argument_list|()
expr_stmt|;
comment|// test the generated ResourceSkyline
specifier|final
name|RLESparseResourceAllocation
name|skylineList
init|=
name|jobMetaData
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|getSkylineList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|containerCPU
init|=
name|jobMetaData
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
name|int
name|k
decl_stmt|;
for|for
control|(
name|k
operator|=
literal|0
init|;
name|k
operator|<
literal|5
condition|;
name|k
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
name|k
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
operator|/
name|containerCPU
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|k
operator|=
literal|5
init|;
name|k
operator|<
literal|605
condition|;
name|k
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
name|k
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
operator|/
name|containerCPU
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
literal|605
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
operator|/
name|containerCPU
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanUp ()
annotation|@
name|After
specifier|public
specifier|final
name|void
name|cleanUp
parameter_list|()
block|{
name|jobMetaData
operator|=
literal|null
expr_stmt|;
name|recurrenceId
operator|=
literal|null
expr_stmt|;
name|logParserUtil
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

