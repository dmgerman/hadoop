begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.solver.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|ResourceSkyline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|config
operator|.
name|ResourceEstimatorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|exception
operator|.
name|ResourceEstimatorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|SkylineStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|impl
operator|.
name|InMemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|api
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|exceptions
operator|.
name|SolverException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|api
operator|.
name|LogParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|exceptions
operator|.
name|DataFieldNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|impl
operator|.
name|BaseLogParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * This LPSolver class will make resource estimation using Linear Programming  * model. We use ojAlgo solver to solve the model.  */
end_comment

begin_class
DECL|class|TestLpSolver
specifier|public
class|class
name|TestLpSolver
extends|extends
name|TestSolver
block|{
DECL|field|SAMPLEPARSER
specifier|private
specifier|static
specifier|final
name|LogParser
name|SAMPLEPARSER
init|=
operator|new
name|BaseLogParser
argument_list|()
decl_stmt|;
DECL|field|solver
specifier|private
name|Solver
name|solver
decl_stmt|;
DECL|field|skylineStore
specifier|private
name|InMemoryStore
name|skylineStore
init|=
operator|new
name|InMemoryStore
argument_list|()
decl_stmt|;
DECL|method|parseLog (final String inputLog)
specifier|private
name|void
name|parseLog
parameter_list|(
specifier|final
name|String
name|inputLog
parameter_list|)
throws|throws
name|SolverException
throws|,
name|IOException
throws|,
name|SkylineStoreException
throws|,
name|DataFieldNotFoundException
throws|,
name|ParseException
block|{
specifier|final
name|InputStream
name|logs
init|=
operator|new
name|FileInputStream
argument_list|(
name|inputLog
argument_list|)
decl_stmt|;
name|SAMPLEPARSER
operator|.
name|parseStream
argument_list|(
name|logs
argument_list|)
expr_stmt|;
block|}
DECL|method|createSolver ()
annotation|@
name|Override
specifier|protected
name|Solver
name|createSolver
parameter_list|()
throws|throws
name|ResourceEstimatorException
block|{
name|solver
operator|=
operator|new
name|LpSolver
argument_list|()
expr_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|addResource
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|CONFIG_FILE
argument_list|)
expr_stmt|;
name|solver
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|skylineStore
argument_list|)
expr_stmt|;
name|SAMPLEPARSER
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|skylineStore
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
DECL|method|testSolve ()
annotation|@
name|Test
specifier|public
name|void
name|testSolve
parameter_list|()
throws|throws
name|IOException
throws|,
name|SkylineStoreException
throws|,
name|SolverException
throws|,
name|ResourceEstimatorException
throws|,
name|DataFieldNotFoundException
throws|,
name|ParseException
block|{
name|parseLog
argument_list|(
literal|"src/test/resources/lp/tpch_q12.txt"
argument_list|)
expr_stmt|;
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"tpch_q12"
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobHistory
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|solver
operator|=
name|createSolver
argument_list|()
expr_stmt|;
name|RLESparseResourceAllocation
name|result
init|=
name|solver
operator|.
name|solve
argument_list|(
name|jobHistory
argument_list|)
decl_stmt|;
name|String
name|file
init|=
literal|"src/test/resources/lp/answer.txt"
decl_stmt|;
name|Reader
name|fileReader
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|bufferedReader
init|=
operator|new
name|BufferedReader
argument_list|(
name|fileReader
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|bufferedReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|addResource
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|CONFIG_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|timeInterval
init|=
name|config
operator|.
name|getInt
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|TIME_INTERVAL_KEY
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|long
name|containerMemAlloc
init|=
name|jobHistory
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getMemorySize
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|numContainer
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|numContainer
operator|=
call|(
name|int
call|)
argument_list|(
name|result
operator|.
name|getCapacityAtTime
argument_list|(
name|count
operator|*
name|timeInterval
argument_list|)
operator|.
name|getMemorySize
argument_list|()
operator|/
name|containerMemAlloc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
argument_list|)
argument_list|,
name|numContainer
argument_list|,
literal|0.1
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|bufferedReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|fileReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|bufferedReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

