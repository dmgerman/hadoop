begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.solver.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|ResourceSkyline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|exception
operator|.
name|ResourceEstimatorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|SkylineStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|api
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|exceptions
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|exceptions
operator|.
name|SolverException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This LPSolver class will make resource estimation using Linear Programming  * model. We use Google Or Tool to solve the model.  */
end_comment

begin_class
DECL|class|TestSolver
specifier|public
specifier|abstract
class|class
name|TestSolver
block|{
DECL|field|solver
specifier|private
name|Solver
name|solver
decl_stmt|;
DECL|method|createSolver ()
specifier|protected
specifier|abstract
name|Solver
name|createSolver
parameter_list|()
throws|throws
name|ResourceEstimatorException
function_decl|;
DECL|method|setup ()
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|SolverException
throws|,
name|IOException
throws|,
name|SkylineStoreException
throws|,
name|ResourceEstimatorException
block|{
name|solver
operator|=
name|createSolver
argument_list|()
expr_stmt|;
block|}
DECL|method|testNullJobHistory ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidInputException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullJobHistory
parameter_list|()
throws|throws
name|SolverException
throws|,
name|SkylineStoreException
block|{
comment|// try to solve with null jobHistory
name|solver
operator|.
name|solve
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidInputException
operator|.
name|class
argument_list|)
DECL|method|testEmptyJobHistory ()
specifier|public
name|void
name|testEmptyJobHistory
parameter_list|()
throws|throws
name|SolverException
throws|,
name|SkylineStoreException
block|{
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobHistoryInvalid
init|=
operator|new
name|HashMap
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// try to solve with emty jobHistory
name|solver
operator|.
name|solve
argument_list|(
name|jobHistoryInvalid
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanUp ()
annotation|@
name|After
specifier|public
specifier|final
name|void
name|cleanUp
parameter_list|()
block|{
name|solver
operator|.
name|close
argument_list|()
expr_stmt|;
name|solver
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

