begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|ResourceSkyline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|serialization
operator|.
name|RLESparseResourceAllocationSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|serialization
operator|.
name|ResourceSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|JerseyTest
import|;
end_import

begin_comment
comment|/**  * Test ResourceEstimatorService.  */
end_comment

begin_class
DECL|class|TestResourceEstimatorService
specifier|public
class|class
name|TestResourceEstimatorService
extends|extends
name|JerseyTest
block|{
DECL|field|parseLogCommand
specifier|private
specifier|final
name|String
name|parseLogCommand
init|=
literal|"resourceestimator/translator/"
operator|+
literal|"src/test/resources/resourceEstimatorService.txt"
decl_stmt|;
DECL|field|getHistorySkylineCommand
specifier|private
specifier|final
name|String
name|getHistorySkylineCommand
init|=
literal|"resourceestimator/skylinestore/history/tpch_q12/*"
decl_stmt|;
DECL|field|getEstimatedSkylineCommand
specifier|private
specifier|final
name|String
name|getEstimatedSkylineCommand
init|=
literal|"resourceestimator/skylinestore/estimation/tpch_q12"
decl_stmt|;
DECL|field|makeEstimationCommand
specifier|private
specifier|final
name|String
name|makeEstimationCommand
init|=
literal|"resourceestimator/estimator/tpch_q12"
decl_stmt|;
DECL|field|deleteHistoryCommand
specifier|private
specifier|final
name|String
name|deleteHistoryCommand
init|=
literal|"resourceestimator/skylinestore/history/tpch_q12/tpch_q12_1"
decl_stmt|;
DECL|field|setUpDone
specifier|private
specifier|static
name|boolean
name|setUpDone
init|=
literal|false
decl_stmt|;
DECL|field|containerSpec
specifier|private
name|Resource
name|containerSpec
decl_stmt|;
DECL|field|gson
specifier|private
name|Gson
name|gson
decl_stmt|;
DECL|field|containerMemAlloc
specifier|private
name|long
name|containerMemAlloc
decl_stmt|;
DECL|field|containerCPUAlloc
specifier|private
name|int
name|containerCPUAlloc
decl_stmt|;
DECL|method|TestResourceEstimatorService ()
specifier|public
name|TestResourceEstimatorService
parameter_list|()
block|{
name|super
argument_list|(
literal|"org.apache.hadoop.resourceestimator.service"
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp ()
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|containerMemAlloc
operator|=
literal|1024
expr_stmt|;
name|containerCPUAlloc
operator|=
literal|1
expr_stmt|;
name|containerSpec
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemAlloc
argument_list|,
name|containerCPUAlloc
argument_list|)
expr_stmt|;
name|gson
operator|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|Resource
operator|.
name|class
argument_list|,
operator|new
name|ResourceSerDe
argument_list|()
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|RLESparseResourceAllocation
operator|.
name|class
argument_list|,
operator|new
name|RLESparseResourceAllocationSerDe
argument_list|()
argument_list|)
operator|.
name|enableComplexMapKeySerialization
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|compareResourceSkyline (final ResourceSkyline skyline1, final ResourceSkyline skyline2)
specifier|private
name|void
name|compareResourceSkyline
parameter_list|(
specifier|final
name|ResourceSkyline
name|skyline1
parameter_list|,
specifier|final
name|ResourceSkyline
name|skyline2
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getJobId
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getJobInputDataSize
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getJobInputDataSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getJobSubmissionTime
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getJobSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getJobFinishTime
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getJobFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skyline1
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|skyline2
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RLESparseResourceAllocation
name|skylineList1
init|=
name|skyline1
operator|.
name|getSkylineList
argument_list|()
decl_stmt|;
specifier|final
name|RLESparseResourceAllocation
name|skylineList2
init|=
name|skyline2
operator|.
name|getSkylineList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|(
name|int
operator|)
name|skylineList1
operator|.
name|getEarliestStartTime
argument_list|()
init|;
name|i
operator|<
name|skylineList1
operator|.
name|getLatestNonNullTime
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skylineList1
operator|.
name|getCapacityAtTime
argument_list|(
name|i
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|skylineList2
operator|.
name|getCapacityAtTime
argument_list|(
name|i
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skylineList1
operator|.
name|getCapacityAtTime
argument_list|(
name|i
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|skylineList2
operator|.
name|getCapacityAtTime
argument_list|(
name|i
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSkyline1 ()
specifier|private
name|ResourceSkyline
name|getSkyline1
parameter_list|()
block|{
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|resourceOverTime
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ReservationInterval
name|riAdd
decl_stmt|;
specifier|final
name|RLESparseResourceAllocation
name|skylineList
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resourceOverTime
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|riAdd
operator|=
operator|new
name|ReservationInterval
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemAlloc
argument_list|,
name|containerCPUAlloc
argument_list|)
decl_stmt|;
name|skylineList
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|riAdd
operator|=
operator|new
name|ReservationInterval
argument_list|(
literal|10
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemAlloc
operator|*
literal|1074
argument_list|,
name|containerCPUAlloc
operator|*
literal|1074
argument_list|)
expr_stmt|;
name|skylineList
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|riAdd
operator|=
operator|new
name|ReservationInterval
argument_list|(
literal|15
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemAlloc
operator|*
literal|2538
argument_list|,
name|containerCPUAlloc
operator|*
literal|2538
argument_list|)
expr_stmt|;
name|skylineList
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|riAdd
operator|=
operator|new
name|ReservationInterval
argument_list|(
literal|20
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemAlloc
operator|*
literal|2468
argument_list|,
name|containerCPUAlloc
operator|*
literal|2468
argument_list|)
expr_stmt|;
name|skylineList
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|resource
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline1
init|=
operator|new
name|ResourceSkyline
argument_list|(
literal|"tpch_q12_0"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|25
argument_list|,
name|containerSpec
argument_list|,
name|skylineList
argument_list|)
decl_stmt|;
return|return
name|resourceSkyline1
return|;
block|}
DECL|method|getSkyline2 ()
specifier|private
name|ResourceSkyline
name|getSkyline2
parameter_list|()
block|{
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|resourceOverTime
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ReservationInterval
name|riAdd
decl_stmt|;
specifier|final
name|RLESparseResourceAllocation
name|skylineList
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resourceOverTime
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|riAdd
operator|=
operator|new
name|ReservationInterval
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemAlloc
argument_list|,
name|containerCPUAlloc
argument_list|)
decl_stmt|;
name|skylineList
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|riAdd
operator|=
operator|new
name|ReservationInterval
argument_list|(
literal|10
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemAlloc
operator|*
literal|794
argument_list|,
name|containerCPUAlloc
operator|*
literal|794
argument_list|)
expr_stmt|;
name|skylineList
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|riAdd
operator|=
operator|new
name|ReservationInterval
argument_list|(
literal|15
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemAlloc
operator|*
literal|2517
argument_list|,
name|containerCPUAlloc
operator|*
literal|2517
argument_list|)
expr_stmt|;
name|skylineList
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|riAdd
operator|=
operator|new
name|ReservationInterval
argument_list|(
literal|20
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemAlloc
operator|*
literal|2484
argument_list|,
name|containerCPUAlloc
operator|*
literal|2484
argument_list|)
expr_stmt|;
name|skylineList
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|resource
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSkyline
name|resourceSkyline2
init|=
operator|new
name|ResourceSkyline
argument_list|(
literal|"tpch_q12_1"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|25
argument_list|,
name|containerSpec
argument_list|,
name|skylineList
argument_list|)
decl_stmt|;
return|return
name|resourceSkyline2
return|;
block|}
DECL|method|checkResult (final String jobId, final Map<RecurrenceId, List<ResourceSkyline>> jobHistory)
specifier|private
name|void
name|checkResult
parameter_list|(
specifier|final
name|String
name|jobId
parameter_list|,
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobHistory
parameter_list|)
block|{
switch|switch
condition|(
name|jobId
condition|)
block|{
case|case
literal|"tpch_q12_0"
case|:
block|{
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"tpch_q12"
argument_list|,
literal|"tpch_q12_0"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobHistory
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceSkyline
name|skylineReceive
init|=
name|jobHistory
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|compareResourceSkyline
argument_list|(
name|skylineReceive
argument_list|,
name|getSkyline1
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|"tpch_q12_1"
case|:
block|{
specifier|final
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
literal|"tpch_q12"
argument_list|,
literal|"tpch_q12_1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobHistory
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceSkyline
name|skylineReceive
init|=
name|jobHistory
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|compareResourceSkyline
argument_list|(
name|skylineReceive
argument_list|,
name|getSkyline2
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
DECL|method|compareRLESparseResourceAllocation ( final RLESparseResourceAllocation rle1, final RLESparseResourceAllocation rle2)
specifier|private
name|void
name|compareRLESparseResourceAllocation
parameter_list|(
specifier|final
name|RLESparseResourceAllocation
name|rle1
parameter_list|,
specifier|final
name|RLESparseResourceAllocation
name|rle2
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
operator|(
name|int
operator|)
name|rle1
operator|.
name|getEarliestStartTime
argument_list|()
init|;
name|i
operator|<
name|rle1
operator|.
name|getLatestNonNullTime
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rle1
operator|.
name|getCapacityAtTime
argument_list|(
name|i
argument_list|)
argument_list|,
name|rle2
operator|.
name|getCapacityAtTime
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetPrediction ()
annotation|@
name|Test
specifier|public
name|void
name|testGetPrediction
parameter_list|()
block|{
comment|// first, parse the log
specifier|final
name|String
name|logFile
init|=
literal|"resourceEstimatorService.txt"
decl_stmt|;
name|WebResource
name|webResource
init|=
name|resource
argument_list|()
decl_stmt|;
name|webResource
operator|.
name|path
argument_list|(
name|parseLogCommand
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|)
operator|.
name|post
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
name|webResource
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|getHistorySkylineCommand
argument_list|)
expr_stmt|;
name|String
name|response
init|=
name|webResource
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobHistory
init|=
name|gson
operator|.
name|fromJson
argument_list|(
name|response
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{             }
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|checkResult
argument_list|(
literal|"tpch_q12_0"
argument_list|,
name|jobHistory
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
literal|"tpch_q12_1"
argument_list|,
name|jobHistory
argument_list|)
expr_stmt|;
comment|// then, try to get estimated resource allocation from skyline store
name|webResource
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|getEstimatedSkylineCommand
argument_list|)
expr_stmt|;
name|response
operator|=
name|webResource
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
comment|// then, we call estimator module to make the prediction
name|webResource
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|makeEstimationCommand
argument_list|)
expr_stmt|;
name|response
operator|=
name|webResource
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|RLESparseResourceAllocation
name|skylineList
init|=
name|gson
operator|.
name|fromJson
argument_list|(
name|response
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|RLESparseResourceAllocation
argument_list|>
argument_list|()
block|{         }
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
literal|0
argument_list|)
operator|.
name|getMemorySize
argument_list|()
operator|/
name|containerMemAlloc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1058
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
literal|10
argument_list|)
operator|.
name|getMemorySize
argument_list|()
operator|/
name|containerMemAlloc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2538
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
literal|15
argument_list|)
operator|.
name|getMemorySize
argument_list|()
operator|/
name|containerMemAlloc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2484
argument_list|,
name|skylineList
operator|.
name|getCapacityAtTime
argument_list|(
literal|20
argument_list|)
operator|.
name|getMemorySize
argument_list|()
operator|/
name|containerMemAlloc
argument_list|)
expr_stmt|;
comment|// then, we get estimated resource allocation for tpch_q12
name|webResource
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|getEstimatedSkylineCommand
argument_list|)
expr_stmt|;
name|response
operator|=
name|webResource
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|RLESparseResourceAllocation
name|skylineList2
init|=
name|gson
operator|.
name|fromJson
argument_list|(
name|response
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|RLESparseResourceAllocation
argument_list|>
argument_list|()
block|{         }
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|compareRLESparseResourceAllocation
argument_list|(
name|skylineList
argument_list|,
name|skylineList2
argument_list|)
expr_stmt|;
comment|// then, we call estimator module again to directly get estimated resource
comment|// allocation from skyline store
name|webResource
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|makeEstimationCommand
argument_list|)
expr_stmt|;
name|response
operator|=
name|webResource
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|RLESparseResourceAllocation
name|skylineList3
init|=
name|gson
operator|.
name|fromJson
argument_list|(
name|response
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|RLESparseResourceAllocation
argument_list|>
argument_list|()
block|{         }
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|compareRLESparseResourceAllocation
argument_list|(
name|skylineList
argument_list|,
name|skylineList3
argument_list|)
expr_stmt|;
comment|// finally, test delete
name|webResource
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|deleteHistoryCommand
argument_list|)
expr_stmt|;
name|webResource
operator|.
name|delete
argument_list|()
expr_stmt|;
name|webResource
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|getHistorySkylineCommand
argument_list|)
expr_stmt|;
name|response
operator|=
name|webResource
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobHistory
operator|=
name|gson
operator|.
name|fromJson
argument_list|(
name|response
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{         }
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// jobHistory should only have info for tpch_q12_0
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobHistory
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pipelineId
init|=
operator|(
operator|(
name|RecurrenceId
operator|)
name|jobHistory
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getRunId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"tpch_q12_0"
argument_list|,
name|pipelineId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

