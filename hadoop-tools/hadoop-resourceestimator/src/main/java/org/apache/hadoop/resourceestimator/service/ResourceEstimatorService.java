begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|ResourceSkyline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|config
operator|.
name|ResourceEstimatorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|config
operator|.
name|ResourceEstimatorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|exception
operator|.
name|ResourceEstimatorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|serialization
operator|.
name|RLESparseResourceAllocationSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|serialization
operator|.
name|ResourceSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|api
operator|.
name|SkylineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|SkylineStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|api
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|exceptions
operator|.
name|SolverException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|api
operator|.
name|LogParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|impl
operator|.
name|LogParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_comment
comment|/**  * Resource Estimator Service which provides a set of REST APIs for users to  * use the estimation service.  */
end_comment

begin_class
DECL|class|ResourceEstimatorService
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
literal|"/resourceestimator"
argument_list|)
specifier|public
class|class
name|ResourceEstimatorService
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResourceEstimatorService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|skylineStore
specifier|private
specifier|final
name|SkylineStore
name|skylineStore
decl_stmt|;
DECL|field|solver
specifier|private
specifier|final
name|Solver
name|solver
decl_stmt|;
DECL|field|logParser
specifier|private
specifier|final
name|LogParser
name|logParser
decl_stmt|;
DECL|field|logParserUtil
specifier|private
specifier|final
name|LogParserUtil
name|logParserUtil
init|=
operator|new
name|LogParserUtil
argument_list|()
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|Configuration
name|config
decl_stmt|;
DECL|field|gson
specifier|private
specifier|final
name|Gson
name|gson
decl_stmt|;
DECL|field|rleType
specifier|private
specifier|final
name|Type
name|rleType
decl_stmt|;
DECL|field|skylineStoreType
specifier|private
specifier|final
name|Type
name|skylineStoreType
decl_stmt|;
DECL|method|ResourceEstimatorService ()
specifier|public
name|ResourceEstimatorService
parameter_list|()
throws|throws
name|ResourceEstimatorException
block|{
try|try
block|{
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|config
operator|.
name|addResource
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|CONFIG_FILE
argument_list|)
expr_stmt|;
name|skylineStore
operator|=
name|ResourceEstimatorUtil
operator|.
name|createProviderInstance
argument_list|(
name|config
argument_list|,
name|ResourceEstimatorConfiguration
operator|.
name|SKYLINESTORE_PROVIDER
argument_list|,
name|ResourceEstimatorConfiguration
operator|.
name|DEFAULT_SKYLINESTORE_PROVIDER
argument_list|,
name|SkylineStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|logParser
operator|=
name|ResourceEstimatorUtil
operator|.
name|createProviderInstance
argument_list|(
name|config
argument_list|,
name|ResourceEstimatorConfiguration
operator|.
name|TRANSLATOR_PROVIDER
argument_list|,
name|ResourceEstimatorConfiguration
operator|.
name|DEFAULT_TRANSLATOR_PROVIDER
argument_list|,
name|LogParser
operator|.
name|class
argument_list|)
expr_stmt|;
name|logParser
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|skylineStore
argument_list|)
expr_stmt|;
name|logParserUtil
operator|.
name|setLogParser
argument_list|(
name|logParser
argument_list|)
expr_stmt|;
name|solver
operator|=
name|ResourceEstimatorUtil
operator|.
name|createProviderInstance
argument_list|(
name|config
argument_list|,
name|ResourceEstimatorConfiguration
operator|.
name|SOLVER_PROVIDER
argument_list|,
name|ResourceEstimatorConfiguration
operator|.
name|DEFAULT_SOLVER_PROVIDER
argument_list|,
name|Solver
operator|.
name|class
argument_list|)
expr_stmt|;
name|solver
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|skylineStore
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Server initialization failed due to: {}"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceEstimatorException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|gson
operator|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|Resource
operator|.
name|class
argument_list|,
operator|new
name|ResourceSerDe
argument_list|()
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|RLESparseResourceAllocation
operator|.
name|class
argument_list|,
operator|new
name|RLESparseResourceAllocationSerDe
argument_list|()
argument_list|)
operator|.
name|enableComplexMapKeySerialization
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|rleType
operator|=
operator|new
name|TypeToken
argument_list|<
name|RLESparseResourceAllocation
argument_list|>
argument_list|()
block|{     }
operator|.
name|getType
argument_list|()
expr_stmt|;
name|skylineStoreType
operator|=
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{         }
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
comment|/**    * Parse the log file. See also {@link LogParser#parseStream(InputStream)}.    *    * @param logFile file/directory of the log to be parsed.    * @throws IOException                if fails to parse the log.    * @throws SkylineStoreException      if fails to addHistory to    *                                    {@link SkylineStore}.    * @throws ResourceEstimatorException if the {@link LogParser}    *     is not initialized.    */
DECL|method|parseFile ( @athParamR) String logFile)
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/translator/{logFile : .+}"
argument_list|)
specifier|public
name|void
name|parseFile
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"logFile"
argument_list|)
name|String
name|logFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|SkylineStoreException
throws|,
name|ResourceEstimatorException
block|{
name|logParserUtil
operator|.
name|parseLog
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Parse logFile: {}."
argument_list|,
name|logFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get predicted {code Resource} allocation for the pipeline. If the    * prediction for the pipeline already exists in the {@link SkylineStore}, it    * will directly get the prediction from {@link SkylineStore}, otherwise it    * will call the {@link Solver} to make prediction, and store the predicted    * {code Resource} allocation to the {@link SkylineStore}. Note that invoking    * {@link Solver} could be a time-consuming operation.    *    * @param pipelineId the id of the pipeline.    * @return Json format of {@link RLESparseResourceAllocation}.    * @throws SolverException       if {@link Solver} fails;    * @throws SkylineStoreException if fails to get history    *     {@link ResourceSkyline} or predicted {code Resource} allocation    *     from {@link SkylineStore}.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/estimator/{pipelineId}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getPrediction ( @athParamvalue = R) String pipelineId)
specifier|public
name|String
name|getPrediction
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"pipelineId"
argument_list|)
name|String
name|pipelineId
parameter_list|)
throws|throws
name|SolverException
throws|,
name|SkylineStoreException
block|{
comment|// first, try to grab the predicted resource allocation from the skyline
comment|// store
name|RLESparseResourceAllocation
name|result
init|=
name|skylineStore
operator|.
name|getEstimation
argument_list|(
name|pipelineId
argument_list|)
decl_stmt|;
comment|// if received resource allocation is null, then run the solver
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
name|pipelineId
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobHistory
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
name|result
operator|=
name|solver
operator|.
name|solve
argument_list|(
name|jobHistory
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|prediction
init|=
name|gson
operator|.
name|toJson
argument_list|(
name|result
argument_list|,
name|rleType
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Predict resource requests for pipelineId: {}."
operator|+
name|pipelineId
argument_list|)
expr_stmt|;
return|return
name|prediction
return|;
block|}
comment|/**    * Get history {@link ResourceSkyline} from {@link SkylineStore}. This    * function supports the following special wildcard operations regarding    * {@link RecurrenceId}: If the {@code pipelineId} is "*", it will return all    * entries in the store; else, if the {@code runId} is "*", it will return all    * {@link ResourceSkyline}s belonging to the {@code pipelineId}; else, it will    * return all {@link ResourceSkyline}s belonging to the {{@code pipelineId},    * {@code runId}}. If the {@link RecurrenceId} does not exist, it will not do    * anything.    *    * @param pipelineId pipelineId of the history run.    * @param runId      runId of the history run.    * @return Json format of history {@link ResourceSkyline}s.    * @throws SkylineStoreException if fails to getHistory    *     {@link ResourceSkyline} from {@link SkylineStore}.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/skylinestore/history/{pipelineId}/{runId}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getHistoryResourceSkyline ( @athParamR) String pipelineId, @PathParam(R) String runId)
specifier|public
name|String
name|getHistoryResourceSkyline
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"pipelineId"
argument_list|)
name|String
name|pipelineId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"runId"
argument_list|)
name|String
name|runId
parameter_list|)
throws|throws
name|SkylineStoreException
block|{
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
name|pipelineId
argument_list|,
name|runId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobHistory
init|=
name|skylineStore
operator|.
name|getHistory
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
specifier|final
name|String
name|skyline
init|=
name|gson
operator|.
name|toJson
argument_list|(
name|jobHistory
argument_list|,
name|skylineStoreType
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Query the skyline store for recurrenceId: {}."
operator|+
name|recurrenceId
argument_list|)
expr_stmt|;
return|return
name|skyline
return|;
block|}
comment|/**    * Get estimated {code Resource} allocation for the pipeline.    *    * @param pipelineId id of the pipeline.    * @return Json format of {@link RLESparseResourceAllocation}.    * @throws SkylineStoreException if fails to get estimated {code Resource}    *                               allocation from {@link SkylineStore}.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/skylinestore/estimation/{pipelineId}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getEstimatedResourceAllocation ( @athParamR) String pipelineId)
specifier|public
name|String
name|getEstimatedResourceAllocation
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"pipelineId"
argument_list|)
name|String
name|pipelineId
parameter_list|)
throws|throws
name|SkylineStoreException
block|{
name|RLESparseResourceAllocation
name|result
init|=
name|skylineStore
operator|.
name|getEstimation
argument_list|(
name|pipelineId
argument_list|)
decl_stmt|;
specifier|final
name|String
name|skyline
init|=
name|gson
operator|.
name|toJson
argument_list|(
name|result
argument_list|,
name|rleType
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Query the skyline store for pipelineId: {}."
operator|+
name|pipelineId
argument_list|)
expr_stmt|;
return|return
name|skyline
return|;
block|}
comment|/**    * Delete history {@link ResourceSkyline}s from {@link SkylineStore}.    *<p> Note that for safety considerations, we only allow users to delete    * history {@link ResourceSkyline}s of one job run.    *    * @param pipelineId pipelineId of the history run.    * @param runId      runId runId of the history run.    * @throws SkylineStoreException if fails to deleteHistory    *                               {@link ResourceSkyline}s.    */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/skylinestore/history/{pipelineId}/{runId}"
argument_list|)
DECL|method|deleteHistoryResourceSkyline ( @athParamR) String pipelineId, @PathParam(R) String runId)
specifier|public
name|void
name|deleteHistoryResourceSkyline
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"pipelineId"
argument_list|)
name|String
name|pipelineId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"runId"
argument_list|)
name|String
name|runId
parameter_list|)
throws|throws
name|SkylineStoreException
block|{
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
name|pipelineId
argument_list|,
name|runId
argument_list|)
decl_stmt|;
name|skylineStore
operator|.
name|deleteHistory
argument_list|(
name|recurrenceId
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Delete ResourceSkyline for recurrenceId: {}."
argument_list|,
name|recurrenceId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

