begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.translator.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|ResourceSkyline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|config
operator|.
name|ResourceEstimatorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|api
operator|.
name|JobMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|api
operator|.
name|SingleLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|exceptions
operator|.
name|DataFieldNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This sample parser will parse the sample log and extract the resource  * skyline.  *<p> The expected log format is: NormalizedJobName NumInstances SubmitTime  * StartTime EndTime JobInstanceName memUsage coreUsage  */
end_comment

begin_class
DECL|class|NativeSingleLineParser
specifier|public
class|class
name|NativeSingleLineParser
implements|implements
name|SingleLineParser
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NativeSingleLineParser
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Aggregates different jobs' {@link ResourceSkyline}s within the same    * pipeline together.    *    * @param resourceSkyline newly extracted {@link ResourceSkyline}.    * @param recurrenceId    the {@link RecurrenceId} which the resourceSkyline    *                        belongs to.    * @param skylineRecords  a {@link Map} which stores the    *     {@link ResourceSkyline}s for all pipelines during this parsing.    */
DECL|method|aggregateSkyline (final ResourceSkyline resourceSkyline, final RecurrenceId recurrenceId, final Map<RecurrenceId, List<ResourceSkyline>> skylineRecords)
specifier|private
name|void
name|aggregateSkyline
parameter_list|(
specifier|final
name|ResourceSkyline
name|resourceSkyline
parameter_list|,
specifier|final
name|RecurrenceId
name|recurrenceId
parameter_list|,
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|skylineRecords
parameter_list|)
block|{
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
name|skylineRecords
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceSkylines
operator|==
literal|null
condition|)
block|{
name|resourceSkylines
operator|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
expr_stmt|;
name|skylineRecords
operator|.
name|put
argument_list|(
name|recurrenceId
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
block|}
name|resourceSkylines
operator|.
name|add
argument_list|(
name|resourceSkyline
argument_list|)
expr_stmt|;
block|}
DECL|method|parseLine (String logLine, Map<String, JobMetaData> jobMetas, Map<RecurrenceId, List<ResourceSkyline>> skylineRecords)
annotation|@
name|Override
specifier|public
name|void
name|parseLine
parameter_list|(
name|String
name|logLine
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|JobMetaData
argument_list|>
name|jobMetas
parameter_list|,
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|skylineRecords
parameter_list|)
throws|throws
name|DataFieldNotFoundException
throws|,
name|ParseException
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|addResource
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|CONFIG_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|timeInterval
init|=
name|config
operator|.
name|getInt
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|TIME_INTERVAL_KEY
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// note that for native log, we assume each container is allocated<1 core,
comment|// 1GB RAM>
name|long
name|containerMemAlloc
init|=
literal|1024
decl_stmt|;
name|int
name|containerCpuAlloc
init|=
literal|1
decl_stmt|;
name|String
index|[]
name|splitString
init|=
name|logLine
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|String
name|pipelineId
init|=
name|splitString
index|[
literal|0
index|]
decl_stmt|;
name|String
name|jobId
init|=
name|splitString
index|[
literal|5
index|]
decl_stmt|;
name|String
index|[]
name|skylineUnits
init|=
name|splitString
index|[
literal|7
index|]
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|JobMetaData
name|appMeta
init|=
operator|new
name|JobMetaData
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RecurrenceId
name|recurrenceId
init|=
operator|new
name|RecurrenceId
argument_list|(
name|pipelineId
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|appMeta
operator|.
name|setRecurrenceId
argument_list|(
name|recurrenceId
argument_list|)
expr_stmt|;
name|Resource
name|containerAlloc
decl_stmt|;
name|int
name|numContainers
decl_stmt|;
name|ResourceSkyline
name|resourceSkyline
init|=
name|appMeta
operator|.
name|getResourceSkyline
argument_list|()
decl_stmt|;
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|resourceOverTime
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RLESparseResourceAllocation
name|skylineList
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resourceOverTime
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|resourceSkyline
operator|.
name|setSkylineList
argument_list|(
name|skylineList
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|elem
range|:
name|skylineUnits
control|)
block|{
name|numContainers
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elem
operator|.
name|split
argument_list|(
literal|"\\:"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|containerAlloc
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemAlloc
operator|*
name|numContainers
argument_list|,
name|containerCpuAlloc
operator|*
name|numContainers
argument_list|)
expr_stmt|;
specifier|final
name|ReservationInterval
name|riAdd
init|=
operator|new
name|ReservationInterval
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|elem
operator|.
name|split
argument_list|(
literal|"\\:"
argument_list|)
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|elem
operator|.
name|split
argument_list|(
literal|"\\:"
argument_list|)
index|[
literal|1
index|]
argument_list|)
operator|+
name|timeInterval
argument_list|)
decl_stmt|;
name|resourceSkyline
operator|.
name|getSkylineList
argument_list|()
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|containerAlloc
argument_list|)
expr_stmt|;
block|}
name|resourceSkyline
operator|.
name|setContainerSpec
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemAlloc
argument_list|,
name|containerCpuAlloc
argument_list|)
argument_list|)
expr_stmt|;
name|appMeta
operator|.
name|setJobFinishTime
argument_list|(
name|appMeta
operator|.
name|getResourceSkyline
argument_list|()
operator|.
name|getSkylineList
argument_list|()
operator|.
name|getLatestNonNullTime
argument_list|()
argument_list|)
expr_stmt|;
name|resourceSkyline
operator|.
name|setJobInputDataSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|resourceSkyline
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|aggregateSkyline
argument_list|(
name|resourceSkyline
argument_list|,
name|recurrenceId
argument_list|,
name|skylineRecords
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

