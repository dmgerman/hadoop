begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.skylinestore.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|ResourceSkyline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|api
operator|.
name|SkylineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|DuplicateRecurrenceIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|EmptyResourceSkylineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|RecurrenceIdNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|SkylineStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|validator
operator|.
name|SkylineStoreValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An in-memory implementation of {@link SkylineStore}.  */
end_comment

begin_class
DECL|class|InMemoryStore
specifier|public
class|class
name|InMemoryStore
implements|implements
name|SkylineStore
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InMemoryStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|readWriteLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
init|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
init|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
DECL|field|inputValidator
specifier|private
specifier|final
name|SkylineStoreValidator
name|inputValidator
init|=
operator|new
name|SkylineStoreValidator
argument_list|()
decl_stmt|;
comment|/**    * A pipeline job's history {@link ResourceSkyline}s. TODO: we may flatten it    * out for quick access.    */
DECL|field|skylineStore
specifier|private
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|skylineStore
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// pipelineId, resource skyline
comment|// Recurring pipeline's predicted {@link ResourceSkyline}s.
DECL|field|estimationStore
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RLESparseResourceAllocation
argument_list|>
name|estimationStore
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// pipelineId, ResourceSkyline
DECL|method|eliminateNull ( final List<ResourceSkyline> resourceSkylines)
specifier|private
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|eliminateNull
parameter_list|(
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ResourceSkyline
name|resourceSkyline
range|:
name|resourceSkylines
control|)
block|{
if|if
condition|(
name|resourceSkyline
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|resourceSkyline
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|addHistory (final RecurrenceId recurrenceId, final List<ResourceSkyline> resourceSkylines)
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|addHistory
parameter_list|(
specifier|final
name|RecurrenceId
name|recurrenceId
parameter_list|,
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
parameter_list|)
throws|throws
name|SkylineStoreException
block|{
name|inputValidator
operator|.
name|validate
argument_list|(
name|recurrenceId
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// remove the null elements in the resourceSkylines
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|filteredInput
init|=
name|eliminateNull
argument_list|(
name|resourceSkylines
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredInput
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|skylineStore
operator|.
name|containsKey
argument_list|(
name|recurrenceId
argument_list|)
condition|)
block|{
comment|// if filteredInput has duplicate jobIds with existing skylines in the
comment|// store,
comment|// throw out an exception
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|jobHistory
init|=
name|skylineStore
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|oldJobIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ResourceSkyline
name|resourceSkyline
range|:
name|jobHistory
control|)
block|{
name|oldJobIds
operator|.
name|add
argument_list|(
name|resourceSkyline
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|oldJobIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ResourceSkyline
name|elem
range|:
name|filteredInput
control|)
block|{
if|if
condition|(
name|oldJobIds
operator|.
name|contains
argument_list|(
name|elem
operator|.
name|getJobId
argument_list|()
argument_list|)
condition|)
block|{
name|StringBuilder
name|errMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|errMsg
operator|.
name|append
argument_list|(
literal|"Trying to addHistory duplicate resource skylines for "
operator|+
name|recurrenceId
operator|+
literal|". Use updateHistory function instead."
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|error
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DuplicateRecurrenceIdException
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|skylineStore
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
operator|.
name|addAll
argument_list|(
name|filteredInput
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Successfully addHistory new resource skylines for {}."
argument_list|,
name|recurrenceId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|skylineStore
operator|.
name|put
argument_list|(
name|recurrenceId
argument_list|,
name|filteredInput
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Successfully addHistory new resource skylines for {}."
argument_list|,
name|recurrenceId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addEstimation (String pipelineId, RLESparseResourceAllocation resourceSkyline)
annotation|@
name|Override
specifier|public
name|void
name|addEstimation
parameter_list|(
name|String
name|pipelineId
parameter_list|,
name|RLESparseResourceAllocation
name|resourceSkyline
parameter_list|)
throws|throws
name|SkylineStoreException
block|{
name|inputValidator
operator|.
name|validate
argument_list|(
name|pipelineId
argument_list|,
name|resourceSkyline
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|estimationStore
operator|.
name|put
argument_list|(
name|pipelineId
argument_list|,
name|resourceSkyline
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Successfully add estimated resource allocation for {}."
argument_list|,
name|pipelineId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deleteHistory (final RecurrenceId recurrenceId)
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|deleteHistory
parameter_list|(
specifier|final
name|RecurrenceId
name|recurrenceId
parameter_list|)
throws|throws
name|SkylineStoreException
block|{
name|inputValidator
operator|.
name|validate
argument_list|(
name|recurrenceId
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|skylineStore
operator|.
name|containsKey
argument_list|(
name|recurrenceId
argument_list|)
condition|)
block|{
name|skylineStore
operator|.
name|remove
argument_list|(
name|recurrenceId
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Delete resource skylines for {}."
argument_list|,
name|recurrenceId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|errMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|errMsg
operator|.
name|append
argument_list|(
literal|"Trying to deleteHistory non-existing recurring pipeline  "
operator|+
name|recurrenceId
operator|+
literal|"\'s resource skylines"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|error
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RecurrenceIdNotFoundException
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateHistory (final RecurrenceId recurrenceId, final List<ResourceSkyline> resourceSkylines)
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|updateHistory
parameter_list|(
specifier|final
name|RecurrenceId
name|recurrenceId
parameter_list|,
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
parameter_list|)
throws|throws
name|SkylineStoreException
block|{
name|inputValidator
operator|.
name|validate
argument_list|(
name|recurrenceId
argument_list|,
name|resourceSkylines
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|skylineStore
operator|.
name|containsKey
argument_list|(
name|recurrenceId
argument_list|)
condition|)
block|{
comment|// remove the null elements in the resourceSkylines
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|filteredInput
init|=
name|eliminateNull
argument_list|(
name|resourceSkylines
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredInput
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|skylineStore
operator|.
name|put
argument_list|(
name|recurrenceId
argument_list|,
name|filteredInput
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Successfully updateHistory resource skylines for {}."
argument_list|,
name|recurrenceId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|errMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|errMsg
operator|.
name|append
argument_list|(
literal|"Trying to updateHistory "
operator|+
name|recurrenceId
operator|+
literal|" with empty resource skyline"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|error
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EmptyResourceSkylineException
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|StringBuilder
name|errMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|errMsg
operator|.
name|append
argument_list|(
literal|"Trying to updateHistory non-existing resource skylines for "
operator|+
name|recurrenceId
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|error
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RecurrenceIdNotFoundException
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getHistory ( final RecurrenceId recurrenceId)
annotation|@
name|Override
specifier|public
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|getHistory
parameter_list|(
specifier|final
name|RecurrenceId
name|recurrenceId
parameter_list|)
throws|throws
name|SkylineStoreException
block|{
name|inputValidator
operator|.
name|validate
argument_list|(
name|recurrenceId
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|pipelineId
init|=
name|recurrenceId
operator|.
name|getPipelineId
argument_list|()
decl_stmt|;
comment|// User tries to getHistory all resource skylines in the skylineStore
if|if
condition|(
name|pipelineId
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Successfully query resource skylines for {}."
argument_list|,
name|recurrenceId
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|skylineStore
argument_list|)
return|;
block|}
name|String
name|runId
init|=
name|recurrenceId
operator|.
name|getRunId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// User tries to getHistory pipelineId's all resource skylines in the
comment|// skylineStore
if|if
condition|(
name|runId
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// TODO: this for loop is expensive, so we may change the type of
comment|// skylineStore to
comment|// speed up this loop.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|entry
range|:
name|skylineStore
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RecurrenceId
name|index
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|getPipelineId
argument_list|()
operator|.
name|equals
argument_list|(
name|pipelineId
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Successfully query resource skylines for {}."
argument_list|,
name|recurrenceId
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|result
argument_list|)
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Trying to getHistory non-existing resource skylines for {}."
argument_list|,
name|recurrenceId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// User tries to getHistory {pipelineId, runId}'s resource skylines
if|if
condition|(
name|skylineStore
operator|.
name|containsKey
argument_list|(
name|recurrenceId
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|recurrenceId
argument_list|,
name|skylineStore
operator|.
name|get
argument_list|(
name|recurrenceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Trying to getHistory non-existing resource skylines for {}."
argument_list|,
name|recurrenceId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Successfully query resource skylines for {}."
argument_list|,
name|recurrenceId
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|result
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getEstimation ( String pipelineId)
annotation|@
name|Override
specifier|public
specifier|final
name|RLESparseResourceAllocation
name|getEstimation
parameter_list|(
name|String
name|pipelineId
parameter_list|)
throws|throws
name|SkylineStoreException
block|{
name|inputValidator
operator|.
name|validate
argument_list|(
name|pipelineId
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|estimationStore
operator|.
name|get
argument_list|(
name|pipelineId
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

