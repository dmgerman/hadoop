begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.solver.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|config
operator|.
name|ResourceEstimatorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequestInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_comment
comment|/**  * Common functions shared by {@code Solver} (translate predicted resource  * allocation into Hadoop's {@link ReservationSubmissionRequest}.  */
end_comment

begin_class
DECL|class|BaseSolver
specifier|public
specifier|abstract
class|class
name|BaseSolver
block|{
comment|/**    * Used to generate {@link ReservationId}.    */
DECL|field|RAND
specifier|private
specifier|static
specifier|final
name|Random
name|RAND
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * Translate the estimated {@link Resource} requirements of the pipeline to    * Hadoop's {@link ReservationSubmissionRequest}.    *    * @param containerSpec     the {@link Resource} to be allocated to each    *                          container;    * @param containerRequests the predicted {@link Resource} to be allocated to    *                          the job in each discrete time intervals;    * @param config            configuration file for BaseSolver.    * @return {@link ReservationSubmissionRequest} to be submitted to Hadoop to    * make recurring resource reservation for the pipeline.    */
DECL|method|toRecurringRDL ( final Resource containerSpec, final RLESparseResourceAllocation containerRequests, final Configuration config)
specifier|public
specifier|final
name|ReservationSubmissionRequest
name|toRecurringRDL
parameter_list|(
specifier|final
name|Resource
name|containerSpec
parameter_list|,
specifier|final
name|RLESparseResourceAllocation
name|containerRequests
parameter_list|,
specifier|final
name|Configuration
name|config
parameter_list|)
block|{
specifier|final
name|int
name|timeInterval
init|=
name|config
operator|.
name|getInt
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|TIME_INTERVAL_KEY
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
name|pipelineSubmissionTime
init|=
name|containerRequests
operator|.
name|getEarliestStartTime
argument_list|()
decl_stmt|;
name|long
name|pipelineFinishTime
init|=
name|containerRequests
operator|.
name|getLatestNonNullTime
argument_list|()
decl_stmt|;
specifier|final
name|long
name|containerMemAlloc
init|=
name|containerSpec
operator|.
name|getMemorySize
argument_list|()
decl_stmt|;
specifier|final
name|long
name|jobLen
init|=
operator|(
name|pipelineFinishTime
operator|-
name|pipelineSubmissionTime
operator|)
operator|/
name|timeInterval
decl_stmt|;
name|List
argument_list|<
name|ReservationRequest
argument_list|>
name|reservationRequestList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jobLen
condition|;
name|i
operator|++
control|)
block|{
comment|// container spec, # of containers, concurrency, duration
name|ReservationRequest
name|reservationRequest
init|=
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|containerSpec
argument_list|,
call|(
name|int
call|)
argument_list|(
name|containerRequests
operator|.
name|getCapacityAtTime
argument_list|(
name|i
operator|*
name|timeInterval
argument_list|)
operator|.
name|getMemorySize
argument_list|()
operator|/
name|containerMemAlloc
argument_list|)
argument_list|,
literal|1
argument_list|,
name|timeInterval
argument_list|)
decl_stmt|;
name|reservationRequestList
operator|.
name|add
argument_list|(
name|reservationRequest
argument_list|)
expr_stmt|;
block|}
name|ReservationRequests
name|reservationRequests
init|=
name|ReservationRequests
operator|.
name|newInstance
argument_list|(
name|reservationRequestList
argument_list|,
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|)
decl_stmt|;
name|ReservationDefinition
name|reservationDefinition
init|=
name|ReservationDefinition
operator|.
name|newInstance
argument_list|(
name|pipelineSubmissionTime
argument_list|,
name|pipelineFinishTime
argument_list|,
name|reservationRequests
argument_list|,
literal|"LpSolver#toRecurringRDL"
argument_list|)
decl_stmt|;
name|ReservationId
name|reservationId
init|=
name|ReservationId
operator|.
name|newInstance
argument_list|(
name|RAND
operator|.
name|nextLong
argument_list|()
argument_list|,
name|RAND
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|reservationSubmissionRequest
init|=
name|ReservationSubmissionRequest
operator|.
name|newInstance
argument_list|(
name|reservationDefinition
argument_list|,
literal|"resourceestimator"
argument_list|,
name|reservationId
argument_list|)
decl_stmt|;
return|return
name|reservationSubmissionRequest
return|;
block|}
block|}
end_class

end_unit

