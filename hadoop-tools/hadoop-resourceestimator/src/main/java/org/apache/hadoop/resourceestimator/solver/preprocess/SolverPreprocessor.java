begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.solver.preprocess
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|preprocess
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|toIntExact
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|ResourceSkyline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|api
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|solver
operator|.
name|exceptions
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Common preprocessing functions for {@link Solver}.  */
end_comment

begin_class
DECL|class|SolverPreprocessor
specifier|public
class|class
name|SolverPreprocessor
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolverPreprocessor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Check if Solver's input parameters are valid.    *    * @param jobHistory   the history {@link ResourceSkyline}s of the recurring    *                     pipeline job.    * @param timeInterval the time interval which is used to discretize the    *                     history {@link ResourceSkyline}s.    * @throws InvalidInputException if: (1) jobHistory is<em>null</em>;    *     (2) jobHistory is empty; (3) timeout is non-positive;    *     (4) timeInterval is non-positive;    */
DECL|method|validate ( final Map<RecurrenceId, List<ResourceSkyline>> jobHistory, final int timeInterval)
specifier|public
specifier|final
name|void
name|validate
parameter_list|(
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobHistory
parameter_list|,
specifier|final
name|int
name|timeInterval
parameter_list|)
throws|throws
name|InvalidInputException
block|{
if|if
condition|(
operator|(
name|jobHistory
operator|==
literal|null
operator|)
operator|||
operator|(
name|jobHistory
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Job resource skyline history is invalid, please try again with"
operator|+
literal|" valid resource skyline history."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidInputException
argument_list|(
literal|"Job ResourceSkyline history"
argument_list|,
literal|"invalid"
argument_list|)
throw|;
block|}
if|if
condition|(
name|timeInterval
operator|<=
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Solver timeInterval {} is invalid, please specify a positive value."
argument_list|,
name|timeInterval
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidInputException
argument_list|(
literal|"Solver timeInterval"
argument_list|,
literal|"non-positive"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return the multi-dimension resource vector consumed by the job at specified    * time.    *    * @param skyList           the list of {@link Resource}s used by the job.    * @param index             the discretized time index.    * @param containerMemAlloc the multi-dimension resource vector allocated to    *                          one container.    * @return the multi-dimension resource vector consumed by the job.    */
DECL|method|getResourceVector (final RLESparseResourceAllocation skyList, final int index, final long containerMemAlloc)
specifier|public
specifier|final
name|long
name|getResourceVector
parameter_list|(
specifier|final
name|RLESparseResourceAllocation
name|skyList
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|long
name|containerMemAlloc
parameter_list|)
block|{
return|return
name|skyList
operator|.
name|getCapacityAtTime
argument_list|(
name|index
argument_list|)
operator|.
name|getMemorySize
argument_list|()
operator|/
name|containerMemAlloc
return|;
block|}
comment|/**    * Discretize job's lifespan into intervals, and return the number of    * containers used by the job within each interval.    *<p> Note that here we assume all containers allocated to the job have the    * same {@link Resource}. This is due to the limit of    * {@link RLESparseResourceAllocation}.    *    * @param skyList           the list of {@link Resource}s used by the job.    * @param timeInterval      the time interval used to discretize the job's    *                          lifespan.    * @param containerMemAlloc the amount of memory allocated to each container.    * @param jobLen            the duration of the job.    * @return the number of containers allocated to the job within discretized    * time intervals.    */
DECL|method|getDiscreteSkyline ( final RLESparseResourceAllocation skyList, final int timeInterval, final long containerMemAlloc, final int jobLen)
specifier|public
specifier|final
name|int
index|[]
name|getDiscreteSkyline
parameter_list|(
specifier|final
name|RLESparseResourceAllocation
name|skyList
parameter_list|,
specifier|final
name|int
name|timeInterval
parameter_list|,
specifier|final
name|long
name|containerMemAlloc
parameter_list|,
specifier|final
name|int
name|jobLen
parameter_list|)
block|{
name|long
name|jobLifeSpan
init|=
name|skyList
operator|.
name|getLatestNonNullTime
argument_list|()
operator|-
name|skyList
operator|.
name|getEarliestStartTime
argument_list|()
decl_stmt|;
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|jobLen
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|long
name|numContainerAt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jobLifeSpan
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|double
operator|)
name|i
operator|/
name|timeInterval
argument_list|)
expr_stmt|;
name|numContainerAt
operator|=
name|getResourceVector
argument_list|(
name|skyList
argument_list|,
name|i
argument_list|,
name|containerMemAlloc
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
index|[
name|index
index|]
operator|<
name|numContainerAt
condition|)
block|{
name|result
index|[
name|index
index|]
operator|=
operator|(
name|int
operator|)
name|numContainerAt
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Merge different jobs' resource skylines into one within the same pipeline.    *    * @param resourceSkylines different jobs' resource skylines within the same    *                         pipeline.    * @return an aggregated resource skyline for the pipeline.    */
DECL|method|mergeSkyline ( final List<ResourceSkyline> resourceSkylines)
specifier|public
specifier|final
name|ResourceSkyline
name|mergeSkyline
parameter_list|(
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
parameter_list|)
block|{
comment|// TODO:
comment|// rewrite this function with shift and merge once YARN-5328 is committed
comment|/** First, getHistory the pipeline submission time. */
name|long
name|pipelineSubmission
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceSkylines
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|long
name|jobSubmission
init|=
name|resourceSkylines
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getJobSubmissionTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|pipelineSubmission
operator|>
name|jobSubmission
condition|)
block|{
name|pipelineSubmission
operator|=
name|jobSubmission
expr_stmt|;
block|}
block|}
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|resourceOverTime
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RLESparseResourceAllocation
name|skylineListAgg
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resourceOverTime
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Second, adjust different jobs' ResourceSkyline starting time based on      * pipeline submission time, and merge them into one ResourceSkyline.      */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceSkylines
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|long
name|jobSubmission
init|=
name|resourceSkylines
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getJobSubmissionTime
argument_list|()
decl_stmt|;
name|long
name|diff
init|=
operator|(
name|jobSubmission
operator|-
name|pipelineSubmission
operator|)
operator|/
literal|1000
decl_stmt|;
name|RLESparseResourceAllocation
name|tmp
init|=
name|resourceSkylines
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSkylineList
argument_list|()
decl_stmt|;
name|Object
index|[]
name|timePoints
init|=
name|tmp
operator|.
name|getCumulative
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|timePoints
operator|.
name|length
operator|-
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|ReservationInterval
name|riAdd
init|=
operator|new
name|ReservationInterval
argument_list|(
name|toIntExact
argument_list|(
operator|(
name|long
operator|)
name|timePoints
index|[
name|j
index|]
argument_list|)
operator|+
name|diff
argument_list|,
name|toIntExact
argument_list|(
operator|(
name|long
operator|)
name|timePoints
index|[
name|j
operator|+
literal|1
index|]
operator|+
name|diff
argument_list|)
argument_list|)
decl_stmt|;
name|skylineListAgg
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|tmp
operator|.
name|getCapacityAtTime
argument_list|(
name|toIntExact
argument_list|(
operator|(
name|long
operator|)
name|timePoints
index|[
name|j
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ResourceSkyline
name|skylineAgg
init|=
operator|new
name|ResourceSkyline
argument_list|(
name|resourceSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJobId
argument_list|()
argument_list|,
name|resourceSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJobInputDataSize
argument_list|()
argument_list|,
name|resourceSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJobSubmissionTime
argument_list|()
argument_list|,
name|resourceSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJobFinishTime
argument_list|()
argument_list|,
name|resourceSkylines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerSpec
argument_list|()
argument_list|,
name|skylineListAgg
argument_list|)
decl_stmt|;
return|return
name|skylineAgg
return|;
block|}
comment|/**    * Aggregate all job's {@link ResourceSkyline}s in the one run of recurring    * pipeline, and return the aggregated {@link ResourceSkyline}s in different    * runs.    *    * @param jobHistory the history {@link ResourceSkyline} of the recurring    *                   pipeline job.    * @param minJobRuns the minimum number of job runs required to run the    *                   solver.    * @return the aggregated {@link ResourceSkyline}s in different runs.    * @throws InvalidInputException if: (1) job submission time parsing fails;    *     (2) jobHistory has less job runs than the minimum requirement;    */
DECL|method|aggregateSkylines ( final Map<RecurrenceId, List<ResourceSkyline>> jobHistory, final int minJobRuns)
specifier|public
specifier|final
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|aggregateSkylines
parameter_list|(
specifier|final
name|Map
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|jobHistory
parameter_list|,
specifier|final
name|int
name|minJobRuns
parameter_list|)
throws|throws
name|InvalidInputException
block|{
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
name|resourceSkylines
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RecurrenceId
argument_list|,
name|List
argument_list|<
name|ResourceSkyline
argument_list|>
argument_list|>
name|entry
range|:
name|jobHistory
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// TODO: identify different jobs within the same pipeline
comment|// right now, we do prediction at the granularity of pipeline, i.e., we
comment|// will merge the
comment|// resource skylines of jobs within the same pipeline into one aggregated
comment|// resource skyline
name|ResourceSkyline
name|skylineAgg
init|=
literal|null
decl_stmt|;
name|skylineAgg
operator|=
name|mergeSkyline
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|resourceSkylines
operator|.
name|add
argument_list|(
name|skylineAgg
argument_list|)
expr_stmt|;
block|}
name|int
name|numJobs
init|=
name|resourceSkylines
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numJobs
operator|<
name|minJobRuns
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Solver requires job resource skyline history for at least {} runs,"
operator|+
literal|" but it only receives history info for {}  runs."
argument_list|,
name|minJobRuns
argument_list|,
name|numJobs
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidInputException
argument_list|(
literal|"Job ResourceSkyline history"
argument_list|,
literal|"containing less job runs"
operator|+
literal|" than "
operator|+
name|minJobRuns
argument_list|)
throw|;
block|}
return|return
name|resourceSkylines
return|;
block|}
block|}
end_class

end_unit

