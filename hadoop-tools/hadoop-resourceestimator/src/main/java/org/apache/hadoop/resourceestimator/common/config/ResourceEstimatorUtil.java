begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.common.config
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|exception
operator|.
name|ResourceEstimatorException
import|;
end_import

begin_comment
comment|/**  * General resourceestimator utils.  */
end_comment

begin_class
DECL|class|ResourceEstimatorUtil
specifier|public
specifier|final
class|class
name|ResourceEstimatorUtil
block|{
DECL|field|EMPTY_ARRAY
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|Class
index|[
literal|0
index|]
decl_stmt|;
DECL|method|ResourceEstimatorUtil ()
specifier|private
name|ResourceEstimatorUtil
parameter_list|()
block|{}
comment|/**    * Helper method to create instances of Object using the class name specified    * in the configuration object.    *    * @param conf                the yarn configuration    * @param configuredClassName the configuration provider key    * @param defaultValue        the default implementation class    * @param type                the required interface/base class    * @param<T>                 The type of the instance to create    * @return the instances created    * @throws ResourceEstimatorException if the provider initialization fails.    */
DECL|method|createProviderInstance ( Configuration conf, String configuredClassName, String defaultValue, Class<T> type)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createProviderInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|configuredClassName
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|ResourceEstimatorException
block|{
name|String
name|className
init|=
name|conf
operator|.
name|get
argument_list|(
name|configuredClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
name|className
operator|=
name|defaultValue
expr_stmt|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|concreteClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|concreteClass
argument_list|)
condition|)
block|{
name|Constructor
argument_list|<
name|T
argument_list|>
name|meth
init|=
operator|(
name|Constructor
argument_list|<
name|T
argument_list|>
operator|)
name|concreteClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|meth
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|meth
operator|.
name|newInstance
argument_list|()
return|;
block|}
else|else
block|{
name|StringBuilder
name|errMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|errMsg
operator|.
name|append
argument_list|(
literal|"Class: "
argument_list|)
operator|.
name|append
argument_list|(
name|className
argument_list|)
operator|.
name|append
argument_list|(
literal|" not instance of "
argument_list|)
operator|.
name|append
argument_list|(
name|type
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceEstimatorException
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|StringBuilder
name|errMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|errMsg
operator|.
name|append
argument_list|(
literal|"Could not instantiate : "
argument_list|)
operator|.
name|append
argument_list|(
name|className
argument_list|)
operator|.
name|append
argument_list|(
literal|" due to exception: "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceEstimatorException
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ReflectiveOperationException
name|e
parameter_list|)
block|{
name|StringBuilder
name|errMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|errMsg
operator|.
name|append
argument_list|(
literal|"Could not instantiate : "
argument_list|)
operator|.
name|append
argument_list|(
name|className
argument_list|)
operator|.
name|append
argument_list|(
literal|" due to exception: "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceEstimatorException
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

