begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|config
operator|.
name|ResourceEstimatorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnJacksonJaxbJsonProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A simple embedded Hadoop HTTP server.  */
end_comment

begin_class
DECL|class|ResourceEstimatorServer
specifier|public
specifier|final
class|class
name|ResourceEstimatorServer
extends|extends
name|CompositeService
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResourceEstimatorServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|webServer
specifier|private
name|HttpServer2
name|webServer
decl_stmt|;
DECL|field|baseURI
specifier|private
specifier|static
name|URI
name|baseURI
decl_stmt|;
DECL|method|ResourceEstimatorServer ()
specifier|public
name|ResourceEstimatorServer
parameter_list|()
block|{
name|super
argument_list|(
name|ResourceEstimatorServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getBaseURI (Configuration config)
specifier|private
specifier|static
name|URI
name|getBaseURI
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|baseURI
operator|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|SERVICE_URI
argument_list|)
operator|.
name|port
argument_list|(
name|getPort
argument_list|(
name|config
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|baseURI
return|;
block|}
DECL|method|getPort (Configuration config)
specifier|private
specifier|static
name|int
name|getPort
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
return|return
name|config
operator|.
name|getInt
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|SERVICE_PORT
argument_list|,
name|ResourceEstimatorConfiguration
operator|.
name|DEFAULT_SERVICE_PORT
argument_list|)
return|;
block|}
DECL|method|serviceInit (Configuration conf)
annotation|@
name|Override
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|serviceStart ()
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|startResourceEstimatorApp
argument_list|()
expr_stmt|;
block|}
DECL|method|join ()
specifier|private
name|void
name|join
parameter_list|()
block|{
comment|// keep the main thread that started the server up until it receives a stop
comment|// signal
if|if
condition|(
name|webServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|webServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{       }
block|}
block|}
DECL|method|serviceStop ()
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|webServer
operator|!=
literal|null
condition|)
block|{
name|webServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|startResourceEstimatorApp ()
specifier|private
name|void
name|startResourceEstimatorApp
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|addResource
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|CONFIG_FILE
argument_list|)
expr_stmt|;
name|HttpServer2
operator|.
name|Builder
name|builder
init|=
operator|new
name|HttpServer2
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"ResourceEstimatorServer"
argument_list|)
operator|.
name|setConf
argument_list|(
name|config
argument_list|)
comment|//.setFindPort(true)
operator|.
name|addEndpoint
argument_list|(
name|getBaseURI
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|webServer
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|webServer
operator|.
name|addJerseyResourcePackage
argument_list|(
name|ResourceEstimatorService
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|";"
operator|+
name|GenericExceptionHandler
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|";"
operator|+
name|YarnJacksonJaxbJsonProvider
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
name|webServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Start embedded Hadoop HTTP server.    *    * @return an instance of the started HTTP server.    * @throws IOException in case there is an error while starting server.    */
DECL|method|startResourceEstimatorServer ()
specifier|static
name|ResourceEstimatorServer
name|startResourceEstimatorServer
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|addResource
argument_list|(
name|ResourceEstimatorConfiguration
operator|.
name|CONFIG_FILE
argument_list|)
expr_stmt|;
name|ResourceEstimatorServer
name|resourceEstimatorServer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resourceEstimatorServer
operator|=
operator|new
name|ResourceEstimatorServer
argument_list|()
expr_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|CompositeServiceShutdownHook
argument_list|(
name|resourceEstimatorServer
argument_list|)
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|resourceEstimatorServer
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|resourceEstimatorServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error starting ResourceEstimatorServer"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|resourceEstimatorServer
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|ResourceEstimatorServer
name|server
init|=
name|startResourceEstimatorServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop embedded Hadoop HTTP server.    *    * @throws Exception in case the HTTP server fails to shut down.    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Stopping resourceestimator service at: {}."
argument_list|,
name|baseURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|webServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

