begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.translator.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|exception
operator|.
name|ResourceEstimatorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|api
operator|.
name|SkylineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|skylinestore
operator|.
name|exceptions
operator|.
name|SkylineStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|api
operator|.
name|LogParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Common utility functions for {@link LogParser}.  */
end_comment

begin_class
DECL|class|LogParserUtil
specifier|public
class|class
name|LogParserUtil
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogParserUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|logParser
specifier|private
name|LogParser
name|logParser
decl_stmt|;
DECL|field|format
specifier|private
name|DateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy HH:mm:ss"
argument_list|)
decl_stmt|;
comment|/**    * Set the {@link LogParser} to use.    *    * @param logParser the {@link LogParser} to use.    */
DECL|method|setLogParser (final LogParser logParser)
specifier|public
name|void
name|setLogParser
parameter_list|(
specifier|final
name|LogParser
name|logParser
parameter_list|)
block|{
name|this
operator|.
name|logParser
operator|=
name|logParser
expr_stmt|;
block|}
comment|/**    * Set date format for the {@link LogParser}.    *    * @param datePattern the date pattern in the log.    */
DECL|method|setDateFormat (final String datePattern)
specifier|public
name|void
name|setDateFormat
parameter_list|(
specifier|final
name|String
name|datePattern
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|datePattern
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts String date to unix timestamp. Note that we assume the time in the    * logs has the same time zone with the machine which runs the    * {@link RmSingleLineParser}.    *    * @param date The String date.    * @return Unix time stamp.    * @throws ParseException if data conversion from String to unix timestamp    *                        fails.    */
DECL|method|stringToUnixTimestamp (final String date)
specifier|public
name|long
name|stringToUnixTimestamp
parameter_list|(
specifier|final
name|String
name|date
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|format
operator|.
name|parse
argument_list|(
name|date
argument_list|)
operator|.
name|getTime
argument_list|()
return|;
block|}
comment|/**    * Parse the log file/directory.    *    * @param logFile the file/directory of the log.    * @throws SkylineStoreException      if fails to addHistory to    *                                    {@link SkylineStore}.    * @throws IOException                if fails to parse the log.    * @throws ResourceEstimatorException if the {@link LogParser}    *     is not initialized.    */
DECL|method|parseLog (final String logFile)
specifier|public
specifier|final
name|void
name|parseLog
parameter_list|(
specifier|final
name|String
name|logFile
parameter_list|)
throws|throws
name|SkylineStoreException
throws|,
name|IOException
throws|,
name|ResourceEstimatorException
block|{
if|if
condition|(
name|logParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceEstimatorException
argument_list|(
literal|"The log parser is not initialized,"
operator|+
literal|" please try again after initializing."
argument_list|)
throw|;
block|}
name|InputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|logFile
argument_list|)
decl_stmt|;
name|logParser
operator|.
name|parseStream
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

