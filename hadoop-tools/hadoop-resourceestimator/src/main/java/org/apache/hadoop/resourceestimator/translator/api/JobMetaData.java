begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.translator.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|translator
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
operator|.
name|ResourceSkyline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Job metadata collected when parsing the log file.  */
end_comment

begin_class
DECL|class|JobMetaData
specifier|public
class|class
name|JobMetaData
block|{
comment|// containerId, releaseTime
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JobMetaData
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resourceSkyline
specifier|private
specifier|final
name|ResourceSkyline
name|resourceSkyline
init|=
operator|new
name|ResourceSkyline
argument_list|()
decl_stmt|;
DECL|field|rawStart
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|rawStart
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// containerId, startTime
DECL|field|rawEnd
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|rawEnd
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|recurrenceId
specifier|private
name|RecurrenceId
name|recurrenceId
decl_stmt|;
comment|/**    * Constructor.    *    * @param jobSubmissionTimeConfig job submission time.    */
DECL|method|JobMetaData (final long jobSubmissionTimeConfig)
specifier|public
name|JobMetaData
parameter_list|(
specifier|final
name|long
name|jobSubmissionTimeConfig
parameter_list|)
block|{
name|resourceSkyline
operator|.
name|setJobSubmissionTime
argument_list|(
name|jobSubmissionTimeConfig
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set job finish time.    *    * @param jobFinishTimeConfig job finish time.    * @return the reference to current {@link JobMetaData}.    */
DECL|method|setJobFinishTime (final long jobFinishTimeConfig)
specifier|public
specifier|final
name|JobMetaData
name|setJobFinishTime
parameter_list|(
specifier|final
name|long
name|jobFinishTimeConfig
parameter_list|)
block|{
name|resourceSkyline
operator|.
name|setJobFinishTime
argument_list|(
name|jobFinishTimeConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Add container launch time.    *    * @param containerId id of the container.    * @param time        container launch time.    * @return the reference to current {@link JobMetaData}.    */
DECL|method|setContainerStart (final String containerId, final long time)
specifier|public
specifier|final
name|JobMetaData
name|setContainerStart
parameter_list|(
specifier|final
name|String
name|containerId
parameter_list|,
specifier|final
name|long
name|time
parameter_list|)
block|{
if|if
condition|(
name|rawStart
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|time
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"find duplicate container launch time for {}, so we replace"
operator|+
literal|" it with {}."
argument_list|,
name|containerId
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Add container release time.    *    * @param containerId id of the container.    * @param time        container release time.    * @return the reference to current {@link JobMetaData}.    */
DECL|method|setContainerEnd (final String containerId, final long time)
specifier|public
specifier|final
name|JobMetaData
name|setContainerEnd
parameter_list|(
specifier|final
name|String
name|containerId
parameter_list|,
specifier|final
name|long
name|time
parameter_list|)
block|{
if|if
condition|(
name|rawEnd
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|time
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"find duplicate container release time for {}, so we replace"
operator|+
literal|" it with {}."
argument_list|,
name|containerId
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Get {@link RecurrenceId}.    *    * @return {@link RecurrenceId}.    */
DECL|method|getRecurrenceId ()
specifier|public
specifier|final
name|RecurrenceId
name|getRecurrenceId
parameter_list|()
block|{
return|return
name|recurrenceId
return|;
block|}
comment|/**    * Set {@link RecurrenceId}.    *    * @param recurrenceIdConfig the {@link RecurrenceId}.    * @return the reference to current {@link JobMetaData}.    */
DECL|method|setRecurrenceId ( final RecurrenceId recurrenceIdConfig)
specifier|public
specifier|final
name|JobMetaData
name|setRecurrenceId
parameter_list|(
specifier|final
name|RecurrenceId
name|recurrenceIdConfig
parameter_list|)
block|{
name|this
operator|.
name|recurrenceId
operator|=
name|recurrenceIdConfig
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Get {@link ResourceSkyline}.    *    * @return {@link ResourceSkyline}.    */
DECL|method|getResourceSkyline ()
specifier|public
specifier|final
name|ResourceSkyline
name|getResourceSkyline
parameter_list|()
block|{
return|return
name|resourceSkyline
return|;
block|}
comment|/**    * Normalized container launch/release time, and generate the    * {@link ResourceSkyline}.    */
DECL|method|createSkyline ()
specifier|public
specifier|final
name|void
name|createSkyline
parameter_list|()
block|{
specifier|final
name|long
name|jobSubmissionTime
init|=
name|resourceSkyline
operator|.
name|getJobSubmissionTime
argument_list|()
decl_stmt|;
name|Resource
name|containerSpec
init|=
name|resourceSkyline
operator|.
name|getContainerSpec
argument_list|()
decl_stmt|;
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|resourceOverTime
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RLESparseResourceAllocation
name|skylineList
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resourceOverTime
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|resourceSkyline
operator|.
name|setSkylineList
argument_list|(
name|skylineList
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerSpec
operator|==
literal|null
condition|)
block|{
comment|// if RmParser fails to extract container resource spec from logs, we will
comment|// statically set
comment|// it to be<1core, 1GB>
name|containerSpec
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|resourceSkyline
operator|.
name|setContainerSpec
argument_list|(
name|containerSpec
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|rawStart
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|long
name|timeStart
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Long
name|timeEnd
init|=
name|rawEnd
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeEnd
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"container release time not found for {}."
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|ReservationInterval
name|riAdd
init|=
operator|new
name|ReservationInterval
argument_list|(
operator|(
name|timeStart
operator|-
name|jobSubmissionTime
operator|)
operator|/
literal|1000
argument_list|,
operator|(
name|timeEnd
operator|-
name|jobSubmissionTime
operator|)
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|resourceSkyline
operator|.
name|getSkylineList
argument_list|()
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|containerSpec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

