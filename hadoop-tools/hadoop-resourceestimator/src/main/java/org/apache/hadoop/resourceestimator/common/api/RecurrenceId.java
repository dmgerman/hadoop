begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.resourceestimator.common.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|resourceestimator
operator|.
name|common
operator|.
name|api
package|;
end_package

begin_comment
comment|/**  * RecurrenceId is the id for the recurring pipeline jobs.  *<p> We assume that the pipeline job can be uniquely identified with  * {pipelineId, runId}.  */
end_comment

begin_class
DECL|class|RecurrenceId
specifier|public
class|class
name|RecurrenceId
block|{
comment|/**    * pipelineId is the unique id for the pipeline jobs.    */
DECL|field|pipelineId
specifier|private
name|String
name|pipelineId
decl_stmt|;
comment|/**    * runId is the unique instance id for the pipeline job in one run, and it    * will change across runs.    */
DECL|field|runId
specifier|private
name|String
name|runId
decl_stmt|;
comment|// TODO: we may addHistory more ids of the pipeline jobs to identify them.
comment|/**    * Constructor.    *    * @param pipelineIdConfig the unique id for the pipeline jobs.    * @param runIdConfig the unique instance id for the pipeline job in one run.    */
DECL|method|RecurrenceId (final String pipelineIdConfig, final String runIdConfig)
specifier|public
name|RecurrenceId
parameter_list|(
specifier|final
name|String
name|pipelineIdConfig
parameter_list|,
specifier|final
name|String
name|runIdConfig
parameter_list|)
block|{
name|this
operator|.
name|pipelineId
operator|=
name|pipelineIdConfig
expr_stmt|;
name|this
operator|.
name|runId
operator|=
name|runIdConfig
expr_stmt|;
block|}
comment|/**    * Return the pipelineId for the pipeline jobs.    *    * @return the pipelineId.    */
DECL|method|getPipelineId ()
specifier|public
specifier|final
name|String
name|getPipelineId
parameter_list|()
block|{
return|return
name|pipelineId
return|;
block|}
DECL|method|setPipelineId (String pipelineId)
specifier|public
name|void
name|setPipelineId
parameter_list|(
name|String
name|pipelineId
parameter_list|)
block|{
name|this
operator|.
name|pipelineId
operator|=
name|pipelineId
expr_stmt|;
block|}
comment|/**    * Return the runId for the pipeline job in one run.    *    * @return the runId.    */
DECL|method|getRunId ()
specifier|public
specifier|final
name|String
name|getRunId
parameter_list|()
block|{
return|return
name|runId
return|;
block|}
DECL|method|setRunId (String runId)
specifier|public
name|void
name|setRunId
parameter_list|(
name|String
name|runId
parameter_list|)
block|{
name|this
operator|.
name|runId
operator|=
name|runId
expr_stmt|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"{pipelineId: %s, runId: %s}"
argument_list|,
name|pipelineId
argument_list|,
name|runId
argument_list|)
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getPipelineId
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|getRunId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|equals (final Object obj)
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|(
name|obj
operator|==
literal|null
operator|)
operator|||
operator|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|RecurrenceId
name|other
init|=
operator|(
name|RecurrenceId
operator|)
name|obj
decl_stmt|;
return|return
name|pipelineId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|pipelineId
argument_list|)
operator|&&
name|runId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|runId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

