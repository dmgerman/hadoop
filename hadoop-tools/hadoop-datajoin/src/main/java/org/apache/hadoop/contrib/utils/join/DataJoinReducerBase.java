begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.utils.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  * This abstract class serves as the base class for the reducer class of a data  * join job. The reduce function will first group the values according to their  * input tags, and then compute the cross product of over the groups. For each  * tuple in the cross product, it calls the following method, which is expected  * to be implemented in a subclass.  *   * protected abstract TaggedMapOutput combine(Object[] tags, Object[] values);  *   * The above method is expected to produce one output value from an array of  * records of different sources. The user code can also perform filtering here.  * It can return null if it decides to the records do not meet certain  * conditions.  *   */
end_comment

begin_class
DECL|class|DataJoinReducerBase
specifier|public
specifier|abstract
class|class
name|DataJoinReducerBase
extends|extends
name|JobBase
block|{
DECL|field|reporter
specifier|protected
name|Reporter
name|reporter
init|=
literal|null
decl_stmt|;
DECL|field|maxNumOfValuesPerGroup
specifier|private
name|long
name|maxNumOfValuesPerGroup
init|=
literal|100
decl_stmt|;
DECL|field|largestNumOfValues
specifier|protected
name|long
name|largestNumOfValues
init|=
literal|0
decl_stmt|;
DECL|field|numOfValues
specifier|protected
name|long
name|numOfValues
init|=
literal|0
decl_stmt|;
DECL|field|collected
specifier|protected
name|long
name|collected
init|=
literal|0
decl_stmt|;
DECL|field|job
specifier|protected
name|JobConf
name|job
decl_stmt|;
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|reporter
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|reporter
operator|.
name|setStatus
argument_list|(
name|super
operator|.
name|getReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|maxNumOfValuesPerGroup
operator|=
name|job
operator|.
name|getLong
argument_list|(
literal|"datajoin.maxNumOfValuesPerGroup"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|/**    * The subclass can provide a different implementation on ResetableIterator.    * This is necessary if the number of values in a reduce call is very high.    *     * The default provided here uses ArrayListBackedIterator    *     * @return an Object of ResetableIterator.    */
DECL|method|createResetableIterator ()
specifier|protected
name|ResetableIterator
name|createResetableIterator
parameter_list|()
block|{
return|return
operator|new
name|ArrayListBackedIterator
argument_list|()
return|;
block|}
comment|/**    * This is the function that re-groups values for a key into sub-groups based    * on a secondary key (input tag).    *     * @param arg1    * @return    */
DECL|method|regroup (Object key, Iterator arg1, Reporter reporter)
specifier|private
name|SortedMap
argument_list|<
name|Object
argument_list|,
name|ResetableIterator
argument_list|>
name|regroup
parameter_list|(
name|Object
name|key
parameter_list|,
name|Iterator
name|arg1
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|numOfValues
operator|=
literal|0
expr_stmt|;
name|SortedMap
argument_list|<
name|Object
argument_list|,
name|ResetableIterator
argument_list|>
name|retv
init|=
operator|new
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|ResetableIterator
argument_list|>
argument_list|()
decl_stmt|;
name|TaggedMapOutput
name|aRecord
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|arg1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|this
operator|.
name|numOfValues
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|numOfValues
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"key: "
operator|+
name|key
operator|.
name|toString
argument_list|()
operator|+
literal|" numOfValues: "
operator|+
name|this
operator|.
name|numOfValues
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|numOfValues
operator|>
name|this
operator|.
name|maxNumOfValuesPerGroup
condition|)
block|{
continue|continue;
block|}
name|aRecord
operator|=
operator|(
operator|(
name|TaggedMapOutput
operator|)
name|arg1
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|Text
name|tag
init|=
name|aRecord
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|ResetableIterator
name|data
init|=
name|retv
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|data
operator|=
name|createResetableIterator
argument_list|()
expr_stmt|;
name|retv
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|add
argument_list|(
name|aRecord
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|numOfValues
operator|>
name|this
operator|.
name|largestNumOfValues
condition|)
block|{
name|this
operator|.
name|largestNumOfValues
operator|=
name|numOfValues
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"key: "
operator|+
name|key
operator|.
name|toString
argument_list|()
operator|+
literal|" this.largestNumOfValues: "
operator|+
name|this
operator|.
name|largestNumOfValues
argument_list|)
expr_stmt|;
block|}
return|return
name|retv
return|;
block|}
DECL|method|reduce (Object key, Iterator values, OutputCollector output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|Object
name|key
parameter_list|,
name|Iterator
name|values
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|reporter
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
name|SortedMap
argument_list|<
name|Object
argument_list|,
name|ResetableIterator
argument_list|>
name|groups
init|=
name|regroup
argument_list|(
name|key
argument_list|,
name|values
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
name|Object
index|[]
name|tags
init|=
name|groups
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|ResetableIterator
index|[]
name|groupValues
init|=
operator|new
name|ResetableIterator
index|[
name|tags
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tags
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|groupValues
index|[
name|i
index|]
operator|=
name|groups
operator|.
name|get
argument_list|(
name|tags
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|joinAndCollect
argument_list|(
name|tags
argument_list|,
name|groupValues
argument_list|,
name|key
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|addLongValue
argument_list|(
literal|"groupCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tags
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|groupValues
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * The subclass can overwrite this method to perform additional filtering    * and/or other processing logic before a value is collected.    *     * @param key    * @param aRecord    * @param output    * @param reporter    * @throws IOException    */
DECL|method|collect (Object key, TaggedMapOutput aRecord, OutputCollector output, Reporter reporter)
specifier|protected
name|void
name|collect
parameter_list|(
name|Object
name|key
parameter_list|,
name|TaggedMapOutput
name|aRecord
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|collected
operator|+=
literal|1
expr_stmt|;
name|addLongValue
argument_list|(
literal|"collectedCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|aRecord
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|aRecord
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"key: "
operator|+
name|key
operator|.
name|toString
argument_list|()
operator|+
literal|" collected: "
operator|+
name|collected
argument_list|)
expr_stmt|;
name|addLongValue
argument_list|(
literal|"actuallyCollectedCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * join the list of the value lists, and collect the results.    *     * @param tags    *          a list of input tags    * @param values    *          a list of value lists, each corresponding to one input source    * @param key    * @param output    * @throws IOException    */
DECL|method|joinAndCollect (Object[] tags, ResetableIterator[] values, Object key, OutputCollector output, Reporter reporter)
specifier|private
name|void
name|joinAndCollect
parameter_list|(
name|Object
index|[]
name|tags
parameter_list|,
name|ResetableIterator
index|[]
name|values
parameter_list|,
name|Object
name|key
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|<
literal|1
condition|)
block|{
return|return;
block|}
name|Object
index|[]
name|partialList
init|=
operator|new
name|Object
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
name|joinAndCollect
argument_list|(
name|tags
argument_list|,
name|values
argument_list|,
literal|0
argument_list|,
name|partialList
argument_list|,
name|key
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Perform the actual join recursively.    *     * @param tags    *          a list of input tags    * @param values    *          a list of value lists, each corresponding to one input source    * @param pos    *          indicating the next value list to be joined    * @param partialList    *          a list of values, each from one value list considered so far.    * @param key    * @param output    * @throws IOException    */
DECL|method|joinAndCollect (Object[] tags, ResetableIterator[] values, int pos, Object[] partialList, Object key, OutputCollector output, Reporter reporter)
specifier|private
name|void
name|joinAndCollect
parameter_list|(
name|Object
index|[]
name|tags
parameter_list|,
name|ResetableIterator
index|[]
name|values
parameter_list|,
name|int
name|pos
parameter_list|,
name|Object
index|[]
name|partialList
parameter_list|,
name|Object
name|key
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
name|pos
condition|)
block|{
comment|// get a value from each source. Combine them
name|TaggedMapOutput
name|combined
init|=
name|combine
argument_list|(
name|tags
argument_list|,
name|partialList
argument_list|)
decl_stmt|;
name|collect
argument_list|(
name|key
argument_list|,
name|combined
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
return|return;
block|}
name|ResetableIterator
name|nextValues
init|=
name|values
index|[
name|pos
index|]
decl_stmt|;
name|nextValues
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|nextValues
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|v
init|=
name|nextValues
operator|.
name|next
argument_list|()
decl_stmt|;
name|partialList
index|[
name|pos
index|]
operator|=
name|v
expr_stmt|;
name|joinAndCollect
argument_list|(
name|tags
argument_list|,
name|values
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|partialList
argument_list|,
name|key
argument_list|,
name|output
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|SOURCE_TAGS_FIELD
specifier|public
specifier|static
name|Text
name|SOURCE_TAGS_FIELD
init|=
operator|new
name|Text
argument_list|(
literal|"SOURCE_TAGS"
argument_list|)
decl_stmt|;
DECL|field|NUM_OF_VALUES_FIELD
specifier|public
specifier|static
name|Text
name|NUM_OF_VALUES_FIELD
init|=
operator|new
name|Text
argument_list|(
literal|"NUM_OF_VALUES"
argument_list|)
decl_stmt|;
comment|/**    *     * @param tags    *          a list of source tags    * @param values    *          a value per source    * @return combined value derived from values of the sources    */
DECL|method|combine (Object[] tags, Object[] values)
specifier|protected
specifier|abstract
name|TaggedMapOutput
name|combine
parameter_list|(
name|Object
index|[]
name|tags
parameter_list|,
name|Object
index|[]
name|values
parameter_list|)
function_decl|;
DECL|method|map (Object arg0, Object arg1, OutputCollector arg2, Reporter arg3)
specifier|public
name|void
name|map
parameter_list|(
name|Object
name|arg0
parameter_list|,
name|Object
name|arg1
parameter_list|,
name|OutputCollector
name|arg2
parameter_list|,
name|Reporter
name|arg3
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
end_class

end_unit

