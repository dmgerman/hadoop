begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.utils.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reducer
import|;
end_import

begin_comment
comment|/**  * A common base implementing some statics collecting mechanisms that are  * commonly used in a typical map/reduce job.  *   */
end_comment

begin_class
DECL|class|JobBase
specifier|public
specifier|abstract
class|class
name|JobBase
implements|implements
name|Mapper
implements|,
name|Reducer
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"datajoin.job"
argument_list|)
decl_stmt|;
DECL|field|longCounters
specifier|private
name|SortedMap
argument_list|<
name|Object
argument_list|,
name|Long
argument_list|>
name|longCounters
init|=
literal|null
decl_stmt|;
DECL|field|doubleCounters
specifier|private
name|SortedMap
argument_list|<
name|Object
argument_list|,
name|Double
argument_list|>
name|doubleCounters
init|=
literal|null
decl_stmt|;
comment|/**    * Set the given counter to the given value    *     * @param name    *          the counter name    * @param value    *          the value for the counter    */
DECL|method|setLongValue (Object name, long value)
specifier|protected
name|void
name|setLongValue
parameter_list|(
name|Object
name|name
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|longCounters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the given counter to the given value    *     * @param name    *          the counter name    * @param value    *          the value for the counter    */
DECL|method|setDoubleValue (Object name, double value)
specifier|protected
name|void
name|setDoubleValue
parameter_list|(
name|Object
name|name
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|this
operator|.
name|doubleCounters
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|Double
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    *     * @param name    *          the counter name    * @return return the value of the given counter.    */
DECL|method|getLongValue (Object name)
specifier|protected
name|Long
name|getLongValue
parameter_list|(
name|Object
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
name|longCounters
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    *     * @param name    *          the counter name    * @return return the value of the given counter.    */
DECL|method|getDoubleValue (Object name)
specifier|protected
name|Double
name|getDoubleValue
parameter_list|(
name|Object
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
name|doubleCounters
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Increment the given counter by the given incremental value If the counter    * does not exist, one is created with value 0.    *     * @param name    *          the counter name    * @param inc    *          the incremental value    * @return the updated value.    */
DECL|method|addLongValue (Object name, long inc)
specifier|protected
name|Long
name|addLongValue
parameter_list|(
name|Object
name|name
parameter_list|,
name|long
name|inc
parameter_list|)
block|{
name|Long
name|val
init|=
name|this
operator|.
name|longCounters
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Long
name|retv
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|retv
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|inc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retv
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|val
operator|.
name|longValue
argument_list|()
operator|+
name|inc
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|longCounters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|retv
argument_list|)
expr_stmt|;
return|return
name|retv
return|;
block|}
comment|/**    * Increment the given counter by the given incremental value If the counter    * does not exist, one is created with value 0.    *     * @param name    *          the counter name    * @param inc    *          the incremental value    * @return the updated value.    */
DECL|method|addDoubleValue (Object name, double inc)
specifier|protected
name|Double
name|addDoubleValue
parameter_list|(
name|Object
name|name
parameter_list|,
name|double
name|inc
parameter_list|)
block|{
name|Double
name|val
init|=
name|this
operator|.
name|doubleCounters
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Double
name|retv
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|retv
operator|=
operator|new
name|Double
argument_list|(
name|inc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retv
operator|=
operator|new
name|Double
argument_list|(
name|val
operator|.
name|doubleValue
argument_list|()
operator|+
name|inc
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|doubleCounters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|retv
argument_list|)
expr_stmt|;
return|return
name|retv
return|;
block|}
comment|/**    * log the counters    *     */
DECL|method|report ()
specifier|protected
name|void
name|report
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * log the counters    *     */
DECL|method|getReport ()
specifier|protected
name|String
name|getReport
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
name|iter
init|=
name|this
operator|.
name|longCounters
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
name|e
init|=
operator|(
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|iter
operator|=
name|this
operator|.
name|doubleCounters
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
name|e
init|=
operator|(
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Initializes a new instance from a {@link JobConf}.    *     * @param job    *          the configuration    */
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|this
operator|.
name|longCounters
operator|=
operator|new
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|doubleCounters
operator|=
operator|new
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Double
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

