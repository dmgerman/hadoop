begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.utils.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_comment
comment|/**  * This abstract class serves as the base class for the values that   * flow from the mappers to the reducers in a data join job.   * Typically, in such a job, the mappers will compute the source  * tag of an input record based on its attributes or based on the   * file name of the input file. This tag will be used by the reducers  * to re-group the values of a given key according to their source tags.  *   */
end_comment

begin_class
DECL|class|TaggedMapOutput
specifier|public
specifier|abstract
class|class
name|TaggedMapOutput
implements|implements
name|Writable
block|{
DECL|field|tag
specifier|protected
name|Text
name|tag
decl_stmt|;
DECL|method|TaggedMapOutput ()
specifier|public
name|TaggedMapOutput
parameter_list|()
block|{
name|this
operator|.
name|tag
operator|=
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|getTag ()
specifier|public
name|Text
name|getTag
parameter_list|()
block|{
return|return
name|tag
return|;
block|}
DECL|method|setTag (Text tag)
specifier|public
name|void
name|setTag
parameter_list|(
name|Text
name|tag
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
block|}
DECL|method|getData ()
specifier|public
specifier|abstract
name|Writable
name|getData
parameter_list|()
function_decl|;
DECL|method|clone (JobConf job)
specifier|public
name|TaggedMapOutput
name|clone
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
return|return
operator|(
name|TaggedMapOutput
operator|)
name|WritableUtils
operator|.
name|clone
argument_list|(
name|this
argument_list|,
name|job
argument_list|)
return|;
block|}
block|}
end_class

end_unit

