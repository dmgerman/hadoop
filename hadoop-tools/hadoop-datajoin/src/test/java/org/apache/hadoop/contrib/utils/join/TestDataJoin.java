begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.utils.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|extensions
operator|.
name|TestSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestDataJoin
specifier|public
class|class
name|TestDataJoin
extends|extends
name|TestCase
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSetup
name|setup
init|=
operator|new
name|TestSetup
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestDataJoin
operator|.
name|class
argument_list|)
argument_list|)
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|setup
return|;
block|}
DECL|method|testDataJoin ()
specifier|public
name|void
name|testDataJoin
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|srcs
init|=
literal|4
decl_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|job
operator|.
name|setBoolean
argument_list|(
literal|"mapreduce.fileoutputcommitter.marksuccessfuljobs"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|base
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/inner"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
index|[]
name|src
init|=
name|writeSimpleSrc
argument_list|(
name|base
argument_list|,
name|job
argument_list|,
name|srcs
argument_list|)
decl_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|Path
name|outdir
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outdir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|SampleDataJoinMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|SampleDataJoinReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|SampleTaggedMapOutput
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormat
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|src
argument_list|)
expr_stmt|;
try|try
block|{
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|confirmOutput
argument_list|(
name|outdir
argument_list|,
name|job
argument_list|,
name|srcs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|base
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
operator|.
name|delete
argument_list|(
name|base
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|confirmOutput (Path out, JobConf job, int srcs)
specifier|private
specifier|static
name|void
name|confirmOutput
parameter_list|(
name|Path
name|out
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|int
name|srcs
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|out
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|outlist
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outlist
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|<
name|outlist
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|outlist
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|LineRecordReader
name|rr
init|=
operator|new
name|LineRecordReader
argument_list|(
name|in
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|LongWritable
name|k
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
name|Text
name|v
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rr
operator|.
name|next
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
condition|)
block|{
name|String
index|[]
name|vals
init|=
name|v
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|srcs
operator|+
literal|1
argument_list|,
name|vals
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
index|[]
name|ivals
init|=
operator|new
name|int
index|[
name|vals
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
operator|++
name|i
control|)
name|ivals
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ivals
index|[
literal|0
index|]
operator|%
operator|(
name|srcs
operator|*
name|srcs
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|ivals
index|[
name|i
index|]
operator|-
operator|(
name|i
operator|-
literal|1
operator|)
operator|)
operator|*
name|srcs
argument_list|,
literal|10
operator|*
name|ivals
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
operator|++
name|count
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|createWriters (Path testdir, JobConf conf, int srcs, Path[] src)
specifier|private
specifier|static
name|SequenceFile
operator|.
name|Writer
index|[]
name|createWriters
parameter_list|(
name|Path
name|testdir
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|int
name|srcs
parameter_list|,
name|Path
index|[]
name|src
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
condition|;
operator|++
name|i
control|)
block|{
name|src
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|10
argument_list|,
literal|36
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SequenceFile
operator|.
name|Writer
name|out
index|[]
init|=
operator|new
name|SequenceFile
operator|.
name|Writer
index|[
name|srcs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
condition|;
operator|++
name|i
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
operator|new
name|SequenceFile
operator|.
name|Writer
argument_list|(
name|testdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|src
index|[
name|i
index|]
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|writeSimpleSrc (Path testdir, JobConf conf, int srcs)
specifier|private
specifier|static
name|Path
index|[]
name|writeSimpleSrc
parameter_list|(
name|Path
name|testdir
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|int
name|srcs
parameter_list|)
throws|throws
name|IOException
block|{
name|SequenceFile
operator|.
name|Writer
name|out
index|[]
init|=
literal|null
decl_stmt|;
name|Path
index|[]
name|src
init|=
operator|new
name|Path
index|[
name|srcs
index|]
decl_stmt|;
try|try
block|{
name|out
operator|=
name|createWriters
argument_list|(
name|testdir
argument_list|,
name|conf
argument_list|,
name|srcs
argument_list|,
name|src
argument_list|)
expr_stmt|;
specifier|final
name|int
name|capacity
init|=
name|srcs
operator|*
literal|2
operator|+
literal|1
decl_stmt|;
name|Text
name|key
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|key
operator|.
name|set
argument_list|(
literal|"ignored"
argument_list|)
expr_stmt|;
name|Text
name|val
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|capacity
condition|;
operator|++
name|k
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
condition|;
operator|++
name|i
control|)
block|{
name|val
operator|.
name|set
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|k
operator|%
name|srcs
operator|==
literal|0
condition|?
name|k
operator|*
name|srcs
else|:
name|k
operator|*
name|srcs
operator|+
name|i
argument_list|)
operator|+
literal|"\t"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
literal|10
operator|*
name|k
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|out
index|[
name|i
index|]
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|k
condition|)
block|{
comment|// add duplicate key
name|out
index|[
name|i
index|]
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|out
index|[
name|i
index|]
operator|!=
literal|null
condition|)
name|out
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|src
return|;
block|}
block|}
end_class

end_unit

