begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotEmptyDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|OZONE_DEFAULT_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|OZONE_URI_SCHEME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|OZONE_USER_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|OZONE_HTTP_SCHEME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|OZONE_URI_DELIMITER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|LISTING_PAGE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|BUFFER_DIR_KEY
import|;
end_import

begin_comment
comment|/**  * The Ozone Filesystem implementation.  *  * This subclass is marked as private as code should not be creating it  * directly; use {@link FileSystem#get(Configuration)} and variants to create  * one. If cast to {@link OzoneFileSystem}, extra methods and features may be  * accessed. Consider those private and unstable.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|OzoneFileSystem
specifier|public
class|class
name|OzoneFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** The Ozone client for connecting to Ozone server. */
DECL|field|ozone
specifier|private
name|OzoneRestClient
name|ozone
decl_stmt|;
DECL|field|bucket
specifier|private
name|OzoneBucket
name|bucket
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
argument_list|,
literal|"No scheme provided in "
operator|+
name|name
argument_list|)
expr_stmt|;
assert|assert
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
argument_list|)
assert|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|name
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|hostStr
init|=
name|name
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|String
name|volumeStr
init|=
literal|null
decl_stmt|;
name|String
name|bucketStr
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|bucketStr
operator|=
name|volumeStr
expr_stmt|;
name|volumeStr
operator|=
name|path
operator|.
name|getName
argument_list|()
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hostStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No host provided in "
operator|+
name|name
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|volumeStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No volume provided in "
operator|+
name|name
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|bucketStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No bucket provided in "
operator|+
name|name
argument_list|)
throw|;
block|}
try|try
block|{
name|uri
operator|=
operator|new
name|URIBuilder
argument_list|()
operator|.
name|setScheme
argument_list|(
name|OZONE_URI_SCHEME
argument_list|)
operator|.
name|setHost
argument_list|(
name|hostStr
argument_list|)
operator|.
name|setPath
argument_list|(
name|OZONE_URI_DELIMITER
operator|+
name|volumeStr
operator|+
name|OZONE_URI_DELIMITER
operator|+
name|bucketStr
operator|+
name|OZONE_URI_DELIMITER
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Ozone URI for ozfs initialization is "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|this
operator|.
name|ozone
operator|=
operator|new
name|OzoneRestClient
argument_list|(
name|OZONE_HTTP_SCHEME
operator|+
name|hostStr
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|userName
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|OZONE_DEFAULT_USER
expr_stmt|;
block|}
name|this
operator|.
name|ozone
operator|.
name|setUserAuth
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|ozone
operator|.
name|getVolume
argument_list|(
name|volumeStr
argument_list|)
decl_stmt|;
name|this
operator|.
name|bucket
operator|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|workingDir
operator|=
operator|new
name|Path
argument_list|(
name|OZONE_USER_DIR
argument_list|,
name|this
operator|.
name|userName
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|uri
argument_list|,
name|this
operator|.
name|workingDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|oe
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Ozone server exception when initializing file system"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|oe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|oe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ue
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Invalid Ozone endpoint "
operator|+
name|name
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|ue
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|ozone
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|OZONE_URI_SCHEME
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"open() path:{}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Can't open directory "
operator|+
name|f
operator|+
literal|" to read"
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|OzoneInputStream
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|uri
argument_list|,
name|bucket
argument_list|,
name|pathToKey
argument_list|(
name|f
argument_list|)
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|bufferSize
argument_list|,
name|statistics
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"create() path:{}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
specifier|final
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|f
operator|+
literal|" is a directory"
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
comment|// path references a file and overwrite is disabled
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|f
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Overwriting file {}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|deleteObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignored
parameter_list|)
block|{
comment|// check if the parent directory needs to be created
name|Path
name|parent
init|=
name|f
operator|.
name|getParent
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create all the directories for the parent
name|FileStatus
name|parentStatus
init|=
name|getFileStatus
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"parent key:{} status:{}"
argument_list|,
name|key
argument_list|,
name|parentStatus
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|// This exception needs to ignored as this means that the file currently
comment|// does not exists and a new file can thus be created.
block|}
specifier|final
name|OzoneOutputStream
name|stream
init|=
operator|new
name|OzoneOutputStream
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|uri
argument_list|,
name|bucket
argument_list|,
name|key
argument_list|,
name|this
operator|.
name|statistics
argument_list|)
decl_stmt|;
comment|// We pass null to FSDataOutputStream so it won't count writes that
comment|// are being buffered to a file
return|return
operator|new
name|FSDataOutputStream
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createNonRecursive (Path path, FsPermission permission, EnumSet<CreateFlag> flags, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flags
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
comment|// expect this to raise an exception if there is no parent
if|if
condition|(
operator|!
name|getFileStatus
argument_list|(
name|parent
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Not a directory: "
operator|+
name|parent
argument_list|)
throw|;
block|}
block|}
return|return
name|create
argument_list|(
name|path
argument_list|,
name|permission
argument_list|,
name|flags
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"append() Not implemented by the "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" FileSystem implementation"
argument_list|)
throw|;
block|}
DECL|class|RenameIterator
specifier|private
class|class
name|RenameIterator
extends|extends
name|OzoneListingIterator
block|{
DECL|field|srcKey
specifier|private
specifier|final
name|String
name|srcKey
decl_stmt|;
DECL|field|dstKey
specifier|private
specifier|final
name|String
name|dstKey
decl_stmt|;
DECL|method|RenameIterator (Path srcPath, Path dstPath)
name|RenameIterator
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|srcPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|srcKey
operator|=
name|pathToKey
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|dstKey
operator|=
name|pathToKey
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"rename from:{} to:{}"
argument_list|,
name|srcKey
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
block|}
DECL|method|processKey (String key)
name|boolean
name|processKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|newKeyName
init|=
name|dstKey
operator|.
name|concat
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|srcKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|rename
argument_list|(
name|key
argument_list|,
name|newKeyName
argument_list|)
return|;
block|}
comment|// TODO: currently rename work by copying the file, with changes in KSM,
comment|// this operation can be made improved by renaming the keys in KSM directly.
DECL|method|rename (String src, String dst)
specifier|private
name|boolean
name|rename
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LocalDirAllocator
name|dirAlloc
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|BUFFER_DIR_KEY
argument_list|)
decl_stmt|;
specifier|final
name|File
name|tmpFile
init|=
name|dirAlloc
operator|.
name|createTmpFileForWrite
argument_list|(
literal|"output-"
argument_list|,
name|LocalDirAllocator
operator|.
name|SIZE_UNKNOWN
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"rename by copying file from:{} to:{}"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|getKey
argument_list|(
name|src
argument_list|,
name|tmpFile
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|putKey
argument_list|(
name|dst
argument_list|,
name|tmpFile
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|oe
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error when renaming key from:%s to:%s"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|oe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|oe
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|tmpFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not delete tmpFile: "
operator|+
name|tmpFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Check whether the source and destination path are valid and then perform    * rename by copying the data from source path to destination path.    *    * The rename operation is performed by copying data from source key    * to destination key. This is done by reading the source key data into a    * temporary file and then writing this temporary file to destination key.    * The temporary file is deleted after the rename operation.    * TODO: Optimize the operation by renaming keys in KSM.    *    * @param src source path for rename    * @param dst destination path for rename    * @return true if rename operation succeeded or    * if the src and dst have the same path and are of the same type    * @throws IOException on I/O errors or if the src/dst paths are invalid.    */
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"rename() from:{} to:{}"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
if|if
condition|(
name|src
operator|.
name|isRoot
argument_list|()
condition|)
block|{
comment|// Cannot rename root of file system
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot rename the root of a filesystem"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Cannot rename a directory to its own subdirectory
name|Path
name|parent
init|=
name|dst
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|src
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check if the source exists
name|FileStatus
name|srcStatus
decl_stmt|;
try|try
block|{
name|srcStatus
operator|=
name|getFileStatus
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// source doesn't exist, return
return|return
literal|false
return|;
block|}
comment|// Check if the destination exists
name|FileStatus
name|dstStatus
decl_stmt|;
try|try
block|{
name|dstStatus
operator|=
name|getFileStatus
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnde
parameter_list|)
block|{
name|dstStatus
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dstStatus
operator|==
literal|null
condition|)
block|{
comment|// If dst doesn't exist, check whether dst parent dir exists or not
comment|// if the parent exists, the source can still be renamed to dst path
name|dstStatus
operator|=
name|getFileStatus
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dstStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, %s is a file"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// if dst exists and source and destination are same,
comment|// check both the src and dst are of same type
if|if
condition|(
name|srcStatus
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|dstStatus
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|!
name|srcStatus
operator|.
name|isDirectory
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|dstStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// If dst is a directory, rename source as subpath of it.
comment|// for example rename /source to /dst will lead to /dst/source
name|dst
operator|=
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|src
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
decl_stmt|;
try|try
block|{
name|statuses
operator|=
name|listStatus
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnde
parameter_list|)
block|{
name|statuses
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|statuses
operator|!=
literal|null
operator|&&
name|statuses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// If dst exists and not a directory not empty
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, file already exists or not empty!"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// If dst is not a directory
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, file already exists!"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|srcStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|dst
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot rename a directory to a subdirectory of self"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|RenameIterator
name|iterator
init|=
operator|new
name|RenameIterator
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
decl_stmt|;
name|iterator
operator|.
name|iterate
argument_list|()
expr_stmt|;
return|return
name|src
operator|.
name|equals
argument_list|(
name|dst
argument_list|)
operator|||
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|class|DeleteIterator
specifier|private
class|class
name|DeleteIterator
extends|extends
name|OzoneListingIterator
block|{
DECL|field|recursive
specifier|private
name|boolean
name|recursive
decl_stmt|;
DECL|method|DeleteIterator (Path f, boolean recursive)
name|DeleteIterator
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|f
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
block|}
DECL|method|processKey (String key)
name|boolean
name|processKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Skipping deleting root directory"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"deleting key:"
operator|+
name|key
argument_list|)
expr_stmt|;
name|boolean
name|succeed
init|=
name|deleteObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// if recursive delete is requested ignore the return value of
comment|// deleteObject and issue deletes for other keys.
return|return
name|recursive
operator|||
name|succeed
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"delete() path:{} recursive:{}"
argument_list|,
name|f
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
try|try
block|{
name|DeleteIterator
name|iterator
init|=
operator|new
name|DeleteIterator
argument_list|(
name|f
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
return|return
name|iterator
operator|.
name|iterate
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't delete {} - does not exist"
argument_list|,
name|f
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|class|ListStatusIterator
specifier|private
class|class
name|ListStatusIterator
extends|extends
name|OzoneListingIterator
block|{
DECL|field|statuses
specifier|private
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|LISTING_PAGE_SIZE
argument_list|)
decl_stmt|;
DECL|field|f
specifier|private
name|Path
name|f
decl_stmt|;
DECL|method|ListStatusIterator (Path f)
name|ListStatusIterator
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|f
operator|=
name|f
expr_stmt|;
block|}
DECL|method|processKey (String key)
name|boolean
name|processKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|keyPath
init|=
operator|new
name|Path
argument_list|(
name|OZONE_URI_DELIMITER
operator|+
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|getPathKey
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|pathIsDirectory
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|statuses
operator|.
name|add
argument_list|(
name|getFileStatus
argument_list|(
name|keyPath
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// left with only subkeys now
if|if
condition|(
name|keyPath
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// skip keys which are for subdirectories of the directory
name|statuses
operator|.
name|add
argument_list|(
name|getFileStatus
argument_list|(
name|keyPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getStatuses ()
name|FileStatus
index|[]
name|getStatuses
parameter_list|()
block|{
return|return
name|statuses
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|statuses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"listStatus() path:{}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|ListStatusIterator
name|iterator
init|=
operator|new
name|ListStatusIterator
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|iterator
operator|.
name|iterate
argument_list|()
expr_stmt|;
return|return
name|iterator
operator|.
name|getStatuses
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
name|workingDir
operator|=
name|newDir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
comment|/**    * Check whether the path is valid and then create directories.    * Directory is represented using a key with no value.    * All the non-existent parent directories are also created.    *    * @param path directory path to be created    * @return true if directory exists or created successfully.    * @throws IOException    */
DECL|method|mkdir (Path path)
specifier|private
name|boolean
name|mkdir
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|fPart
init|=
name|path
decl_stmt|;
name|Path
name|prevfPart
init|=
literal|null
decl_stmt|;
do|do
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"validating path:{}"
argument_list|,
name|fPart
argument_list|)
expr_stmt|;
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|fPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// If path exists and a directory, exit
break|break;
block|}
else|else
block|{
comment|// Found a file here, rollback and delete newly created directories
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found a file with same name as directory, path:{}"
argument_list|,
name|fPart
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevfPart
operator|!=
literal|null
condition|)
block|{
name|delete
argument_list|(
name|prevfPart
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Can't make directory for path '%s', it is a file."
argument_list|,
name|fPart
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"creating directory for fpart:{}"
argument_list|,
name|fPart
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|fPart
argument_list|)
decl_stmt|;
name|String
name|dirKey
init|=
name|addTrailingSlashIfNeeded
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|createDirectory
argument_list|(
name|dirKey
argument_list|)
condition|)
block|{
comment|// Directory creation failed here,
comment|// rollback and delete newly created directories
name|LOG
operator|.
name|trace
argument_list|(
literal|"Directory creation failed, path:{}"
argument_list|,
name|fPart
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevfPart
operator|!=
literal|null
condition|)
block|{
name|delete
argument_list|(
name|prevfPart
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
name|prevfPart
operator|=
name|fPart
expr_stmt|;
name|fPart
operator|=
name|fPart
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|fPart
operator|!=
literal|null
condition|)
do|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"mkdir() path:{} "
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|mkdir
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getFileStatus() path:{}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|Path
name|qualifiedPath
init|=
name|f
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|qualifiedPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|getModifiedTime
argument_list|(
name|bucket
operator|.
name|getCreatedOn
argument_list|()
argument_list|,
name|OZONE_URI_DELIMITER
argument_list|)
argument_list|,
name|qualifiedPath
argument_list|)
return|;
block|}
comment|// consider this a file and get key status
name|OzoneKey
name|meta
init|=
name|getKeyInfo
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
name|key
operator|=
name|addTrailingSlashIfNeeded
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|meta
operator|=
name|getKeyInfo
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"File:{} not found"
argument_list|,
name|f
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|f
operator|+
literal|": No such file or directory!"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|isDirectory
argument_list|(
name|meta
argument_list|)
condition|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|getModifiedTime
argument_list|(
name|meta
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getModifiedOn
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|,
name|qualifiedPath
argument_list|)
return|;
block|}
else|else
block|{
comment|//TODO: Fetch replication count from ratis config
return|return
operator|new
name|FileStatus
argument_list|(
name|meta
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|f
argument_list|)
argument_list|,
name|getModifiedTime
argument_list|(
name|meta
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getModifiedOn
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|,
name|qualifiedPath
argument_list|)
return|;
block|}
block|}
comment|/**    * Helper method to fetch the key metadata info.    * @param key key whose metadata information needs to be fetched    * @return metadata info of the key    */
DECL|method|getKeyInfo (String key)
specifier|private
name|OzoneKey
name|getKeyInfo
parameter_list|(
name|String
name|key
parameter_list|)
block|{
try|try
block|{
return|return
name|bucket
operator|.
name|getKeyInfo
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Key:{} does not exists"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Helper method to get the modified time of the key.    * @param key key to fetch the modified time    * @return last modified time of the key    */
DECL|method|getModifiedTime (String modifiedTime, String key)
specifier|private
name|long
name|getModifiedTime
parameter_list|(
name|String
name|modifiedTime
parameter_list|,
name|String
name|key
parameter_list|)
block|{
try|try
block|{
return|return
name|OzoneUtils
operator|.
name|formatDate
argument_list|(
name|modifiedTime
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid time:{} for key:{}"
argument_list|,
name|modifiedTime
argument_list|,
name|key
argument_list|,
name|pe
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Helper method to check if an Ozone key is representing a directory.    * @param key key to be checked as a directory    * @return true if key is a directory, false otherwise    */
DECL|method|isDirectory (OzoneKey key)
specifier|private
name|boolean
name|isDirectory
parameter_list|(
name|OzoneKey
name|key
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"key name:{} size:{}"
argument_list|,
name|key
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|key
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|key
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getKeyName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|OZONE_URI_DELIMITER
argument_list|)
operator|&&
operator|(
name|key
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getSize
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
comment|/**    * Helper method to list entries matching the key name in bucket.    * @param dirKey key prefix for listing the keys    * @param lastKey last iterated key    * @return List of Keys    */
DECL|method|listKeys (String dirKey, String lastKey)
name|List
argument_list|<
name|OzoneKey
argument_list|>
name|listKeys
parameter_list|(
name|String
name|dirKey
parameter_list|,
name|String
name|lastKey
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"list keys dirKey:{} lastKey:{}"
argument_list|,
name|dirKey
argument_list|,
name|lastKey
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|bucket
operator|.
name|listKeys
argument_list|(
name|dirKey
argument_list|,
name|LISTING_PAGE_SIZE
argument_list|,
name|lastKey
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|oe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"list keys failed dirKey:{} lastKey:{}"
argument_list|,
name|dirKey
argument_list|,
name|lastKey
argument_list|,
name|oe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"List keys failed "
operator|+
name|oe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Helper method to create an directory specified by key name in bucket.    * @param keyName key name to be created as directory    * @return true if the key is created, false otherwise    */
DECL|method|createDirectory (String keyName)
specifier|private
name|boolean
name|createDirectory
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"creating dir for key:{}"
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|putKey
argument_list|(
name|keyName
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|oe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"create key failed for key:{}"
argument_list|,
name|keyName
argument_list|,
name|oe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Helper method to delete an object specified by key name in bucket.    * @param keyName key name to be deleted    * @return true if the key is deleted, false otherwise    */
DECL|method|deleteObject (String keyName)
specifier|private
name|boolean
name|deleteObject
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"issuing delete for key"
operator|+
name|keyName
argument_list|)
expr_stmt|;
try|try
block|{
name|bucket
operator|.
name|deleteKey
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|oe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"delete key failed "
operator|+
name|oe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Turn a path (relative or otherwise) into an Ozone key.    *    * @param path the path of the file.    * @return the key of the object that represents the file.    */
DECL|method|pathToKey (Path path)
specifier|public
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|path
argument_list|,
literal|"Path can not be null!"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|// removing leading '/' char
name|String
name|key
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"path for key:{} is:{}"
argument_list|,
name|key
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
comment|/**    * Add trailing delimiter to path if it is already not present.    *    * @param key the ozone Key which needs to be appended    * @return delimiter appended key    */
DECL|method|addTrailingSlashIfNeeded (String key)
name|String
name|addTrailingSlashIfNeeded
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|key
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|endsWith
argument_list|(
name|OZONE_URI_DELIMITER
argument_list|)
condition|)
block|{
return|return
name|key
operator|+
name|OZONE_URI_DELIMITER
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OzoneFileSystem{URI="
operator|+
name|uri
operator|+
literal|", "
operator|+
literal|"workingDir="
operator|+
name|workingDir
operator|+
literal|", "
operator|+
literal|"userName="
operator|+
name|userName
operator|+
literal|", "
operator|+
literal|"statistics="
operator|+
name|statistics
operator|+
literal|"}"
return|;
block|}
DECL|class|OzoneListingIterator
specifier|private
specifier|abstract
class|class
name|OzoneListingIterator
block|{
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|recursive
specifier|private
specifier|final
name|boolean
name|recursive
decl_stmt|;
DECL|field|status
specifier|private
specifier|final
name|FileStatus
name|status
decl_stmt|;
DECL|field|pathKey
specifier|private
name|String
name|pathKey
decl_stmt|;
DECL|method|OzoneListingIterator (Path path, boolean recursive)
name|OzoneListingIterator
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|pathKey
operator|=
name|pathToKey
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|this
operator|.
name|pathKey
operator|=
name|addTrailingSlashIfNeeded
argument_list|(
name|pathKey
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processKey (String key)
specifier|abstract
name|boolean
name|processKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|// iterates all the keys in the particular path
DECL|method|iterate ()
name|boolean
name|iterate
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Iterating path {} - recursive {}"
argument_list|,
name|path
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Iterating directory:{}"
argument_list|,
name|pathKey
argument_list|)
expr_stmt|;
name|String
name|lastKey
init|=
name|pathKey
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|OzoneKey
argument_list|>
name|ozoneKeys
init|=
name|listKeys
argument_list|(
name|pathKey
argument_list|,
name|lastKey
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"number of sub keys:{}"
argument_list|,
name|ozoneKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ozoneKeys
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|processKey
argument_list|(
name|pathKey
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|recursive
condition|)
block|{
throw|throw
operator|new
name|PathIsNotEmptyDirectoryException
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
for|for
control|(
name|OzoneKey
name|ozoneKey
range|:
name|ozoneKeys
control|)
block|{
name|lastKey
operator|=
name|ozoneKey
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getKeyName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|processKey
argument_list|(
name|lastKey
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"iterating file:{}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|processKey
argument_list|(
name|pathKey
argument_list|)
return|;
block|}
block|}
DECL|method|getPathKey ()
name|String
name|getPathKey
parameter_list|()
block|{
return|return
name|pathKey
return|;
block|}
DECL|method|pathIsDirectory ()
name|boolean
name|pathIsDirectory
parameter_list|()
block|{
return|return
name|status
operator|.
name|isDirectory
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

