begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSExceptionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|BUFFER_TMP_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|BUFFER_DIR_KEY
import|;
end_import

begin_comment
comment|/**  * Wraps OzoneInputStream implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|OzoneInputStream
specifier|public
specifier|final
class|class
name|OzoneInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OzoneInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|RandomAccessFile
name|in
decl_stmt|;
comment|/** Closed bit. Volatile so reads are non-blocking. */
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|/** the ozone bucket client. */
DECL|field|bucket
specifier|private
specifier|final
name|OzoneBucket
name|bucket
decl_stmt|;
comment|/** The object key. */
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
comment|/** Object content length. */
DECL|field|contentLen
specifier|private
specifier|final
name|long
name|contentLen
decl_stmt|;
comment|/** file system stats. */
DECL|field|stats
specifier|private
specifier|final
name|Statistics
name|stats
decl_stmt|;
DECL|field|keyUri
specifier|private
specifier|final
name|URI
name|keyUri
decl_stmt|;
DECL|method|OzoneInputStream (Configuration conf, URI fsUri, OzoneBucket bucket, String key, long contentLen, int bufferSize, Statistics statistics)
name|OzoneInputStream
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|fsUri
parameter_list|,
name|OzoneBucket
name|bucket
parameter_list|,
name|String
name|key
parameter_list|,
name|long
name|contentLen
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Statistics
name|statistics
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|bucket
argument_list|,
literal|"bucket can not be null!"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|key
argument_list|,
literal|"kenName can not be null!"
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucket
operator|=
name|bucket
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|contentLen
operator|=
name|contentLen
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|statistics
expr_stmt|;
name|this
operator|.
name|keyUri
operator|=
name|fsUri
operator|.
name|resolve
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|BUFFER_DIR_KEY
argument_list|)
operator|==
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|BUFFER_DIR_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|BUFFER_TMP_KEY
argument_list|)
operator|+
literal|"/ozone"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LocalDirAllocator
name|dirAlloc
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|BUFFER_DIR_KEY
argument_list|)
decl_stmt|;
specifier|final
name|File
name|tmpFile
init|=
name|dirAlloc
operator|.
name|createTmpFileForWrite
argument_list|(
literal|"output-"
argument_list|,
name|LocalDirAllocator
operator|.
name|SIZE_UNKNOWN
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Get Key:"
operator|+
name|this
operator|.
name|keyUri
operator|+
literal|" tmp-file:"
operator|+
name|tmpFile
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|getKey
argument_list|(
name|this
operator|.
name|key
argument_list|,
name|tmpFile
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|tmpFile
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|oe
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Error when getBytes for key = "
operator|+
name|key
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|oe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|oe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|seek (long targetPos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotClosed
argument_list|()
expr_stmt|;
comment|// Do not allow negative seek
if|if
condition|(
name|targetPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
name|FSExceptionMessages
operator|.
name|NEGATIVE_SEEK
operator|+
name|targetPos
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|contentLen
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|in
operator|.
name|seek
argument_list|(
name|targetPos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNotClosed
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|getFilePointer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long l)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|l
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ch
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&&
name|ch
operator|!=
operator|-
literal|1
condition|)
block|{
name|stats
operator|.
name|incrementBytesRead
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|ch
return|;
block|}
annotation|@
name|Override
DECL|method|read (long position, byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|buffer
operator|!=
literal|null
argument_list|,
literal|"buffer can not be null"
argument_list|)
expr_stmt|;
name|int
name|numberOfByteRead
init|=
name|super
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&&
name|numberOfByteRead
operator|>
literal|0
condition|)
block|{
name|stats
operator|.
name|incrementBytesRead
argument_list|(
name|numberOfByteRead
argument_list|)
expr_stmt|;
block|}
return|return
name|numberOfByteRead
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] buffer, int offset, int length)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|buffer
operator|!=
literal|null
argument_list|,
literal|"buffer can not be null"
argument_list|)
expr_stmt|;
name|int
name|numberOfByteRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&&
name|numberOfByteRead
operator|>
literal|0
condition|)
block|{
name|stats
operator|.
name|incrementBytesRead
argument_list|(
name|numberOfByteRead
argument_list|)
expr_stmt|;
block|}
return|return
name|numberOfByteRead
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
specifier|synchronized
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNotClosed
argument_list|()
expr_stmt|;
specifier|final
name|long
name|remainingInWrapped
init|=
name|contentLen
operator|-
name|in
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
return|return
operator|(
name|remainingInWrapped
operator|<
name|Integer
operator|.
name|MAX_VALUE
operator|)
condition|?
operator|(
name|int
operator|)
name|remainingInWrapped
else|:
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|skip (long pos)
specifier|public
specifier|synchronized
name|long
name|skip
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|skipBytes
argument_list|(
operator|(
name|int
operator|)
name|pos
argument_list|)
return|;
block|}
comment|/**    * Verify that the input stream is open. Non blocking; this gives    * the last state of the volatile {@link #closed} field.    * @throws IOException if the connection is closed.    */
DECL|method|checkNotClosed ()
specifier|private
name|void
name|checkNotClosed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|this
operator|.
name|keyUri
operator|+
literal|": "
operator|+
name|FSExceptionMessages
operator|.
name|STREAM_IS_CLOSED
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

