begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|DistCpUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * The Options class encapsulates all DistCp options.  *  * When you add a new option, please:  *  - Add the field along with javadoc in DistCpOptions and its Builder  *  - Add setter method in the {@link Builder} class  *  * This class is immutable.  */
end_comment

begin_class
DECL|class|DistCpOptions
specifier|public
specifier|final
class|class
name|DistCpOptions
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Builder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_NUM_LISTSTATUS_THREADS
specifier|public
specifier|static
specifier|final
name|int
name|MAX_NUM_LISTSTATUS_THREADS
init|=
literal|40
decl_stmt|;
comment|/** File path (hdfs:// or file://) that contains the list of actual files to    * copy.    */
DECL|field|sourceFileListing
specifier|private
specifier|final
name|Path
name|sourceFileListing
decl_stmt|;
comment|/** List of source-paths (including wildcards) to be copied to target. */
DECL|field|sourcePaths
specifier|private
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|sourcePaths
decl_stmt|;
comment|/** Destination path for the dist-copy. */
DECL|field|targetPath
specifier|private
specifier|final
name|Path
name|targetPath
decl_stmt|;
comment|/** Whether data need to be committed automatically. */
DECL|field|atomicCommit
specifier|private
specifier|final
name|boolean
name|atomicCommit
decl_stmt|;
comment|/** the work path for atomic commit. If null, the work    * path would be parentOf(targetPath) + "/._WIP_" + nameOf(targetPath). */
DECL|field|atomicWorkPath
specifier|private
specifier|final
name|Path
name|atomicWorkPath
decl_stmt|;
comment|/** Whether source and target folder contents be sync'ed up. */
DECL|field|syncFolder
specifier|private
specifier|final
name|boolean
name|syncFolder
decl_stmt|;
comment|/** Whether files only present in target should be deleted. */
DECL|field|deleteMissing
specifier|private
name|boolean
name|deleteMissing
decl_stmt|;
comment|/** Whether failures during copy be ignored. */
DECL|field|ignoreFailures
specifier|private
specifier|final
name|boolean
name|ignoreFailures
decl_stmt|;
comment|/** Whether files should always be overwritten on target. */
DECL|field|overwrite
specifier|private
specifier|final
name|boolean
name|overwrite
decl_stmt|;
comment|/** Whether we want to append new data to target files. This is valid only    * with update option and CRC is not skipped. */
DECL|field|append
specifier|private
specifier|final
name|boolean
name|append
decl_stmt|;
comment|/** Whether checksum comparison should be skipped while determining if source    * and destination files are identical. */
DECL|field|skipCRC
specifier|private
specifier|final
name|boolean
name|skipCRC
decl_stmt|;
comment|/** Whether to run blocking or non-blocking. */
DECL|field|blocking
specifier|private
specifier|final
name|boolean
name|blocking
decl_stmt|;
comment|// When "-diff s1 s2 src tgt" is passed, apply forward snapshot diff (from s1
comment|// to s2) of source cluster to the target cluster to sync target cluster with
comment|// the source cluster. Referred to as "Fdiff" in the code.
comment|// It's required that s2 is newer than s1.
DECL|field|useDiff
specifier|private
specifier|final
name|boolean
name|useDiff
decl_stmt|;
comment|// When "-rdiff s2 s1 src tgt" is passed, apply reversed snapshot diff (from
comment|// s2 to s1) of target cluster to the target cluster, so to make target
comment|// cluster go back to s1. Referred to as "Rdiff" in the code.
comment|// It's required that s2 is newer than s1, and src and tgt have exact same
comment|// content at their s1, if src is not the same as tgt.
DECL|field|useRdiff
specifier|private
specifier|final
name|boolean
name|useRdiff
decl_stmt|;
comment|/** Whether to log additional info (path, size) in the SKIP/COPY log. */
DECL|field|verboseLog
specifier|private
specifier|final
name|boolean
name|verboseLog
decl_stmt|;
comment|// For both -diff and -rdiff, given the example command line switches, two
comment|// steps are taken:
comment|//   1. Sync Step. This step does renaming/deletion ops in the snapshot diff,
comment|//      so to avoid copying files copied already but renamed later(HDFS-7535)
comment|//   2. Copy Step. This step copy the necessary files from src to tgt
comment|//      2.1 For -diff, it copies from snapshot s2 of src (HDFS-8828)
comment|//      2.2 For -rdiff, it copies from snapshot s1 of src, where the src
comment|//          could be the tgt itself (HDFS-9820).
comment|//
DECL|field|fromSnapshot
specifier|private
specifier|final
name|String
name|fromSnapshot
decl_stmt|;
DECL|field|toSnapshot
specifier|private
specifier|final
name|String
name|toSnapshot
decl_stmt|;
comment|/** The path to a file containing a list of paths to filter out of copy. */
DECL|field|filtersFile
specifier|private
specifier|final
name|String
name|filtersFile
decl_stmt|;
comment|/** Path where output logs are stored. If not specified, it will use the    * default value JobStagingDir/_logs and delete upon job completion. */
DECL|field|logPath
specifier|private
specifier|final
name|Path
name|logPath
decl_stmt|;
comment|/** Set the copy strategy to use. Should map to a strategy implementation    * in distp-default.xml. */
DECL|field|copyStrategy
specifier|private
specifier|final
name|String
name|copyStrategy
decl_stmt|;
comment|/** per map bandwidth in MB. */
DECL|field|mapBandwidth
specifier|private
specifier|final
name|float
name|mapBandwidth
decl_stmt|;
comment|/** The number of threads to use for listStatus. We allow max    * {@link #MAX_NUM_LISTSTATUS_THREADS} threads. Setting numThreads to zero    * signify we should use the value from conf properties. */
DECL|field|numListstatusThreads
specifier|private
specifier|final
name|int
name|numListstatusThreads
decl_stmt|;
comment|/** The max number of maps to use for copy. */
DECL|field|maxMaps
specifier|private
specifier|final
name|int
name|maxMaps
decl_stmt|;
comment|/** File attributes that need to be preserved. */
DECL|field|preserveStatus
specifier|private
specifier|final
name|EnumSet
argument_list|<
name|FileAttribute
argument_list|>
name|preserveStatus
decl_stmt|;
comment|// Size of chunk in number of blocks when splitting large file into chunks
comment|// to copy in parallel. Default is 0 and file are not splitted.
DECL|field|blocksPerChunk
specifier|private
specifier|final
name|int
name|blocksPerChunk
decl_stmt|;
DECL|field|copyBufferSize
specifier|private
specifier|final
name|int
name|copyBufferSize
decl_stmt|;
comment|/**    * File attributes for preserve.    *    * Each enum entry uses the first char as its symbol.    */
DECL|enum|FileAttribute
specifier|public
enum|enum
name|FileAttribute
block|{
DECL|enumConstant|REPLICATION
name|REPLICATION
block|,
comment|// R
DECL|enumConstant|BLOCKSIZE
name|BLOCKSIZE
block|,
comment|// B
DECL|enumConstant|USER
name|USER
block|,
comment|// U
DECL|enumConstant|GROUP
name|GROUP
block|,
comment|// G
DECL|enumConstant|PERMISSION
name|PERMISSION
block|,
comment|// P
DECL|enumConstant|CHECKSUMTYPE
name|CHECKSUMTYPE
block|,
comment|// C
DECL|enumConstant|ACL
name|ACL
block|,
comment|// A
DECL|enumConstant|XATTR
name|XATTR
block|,
comment|// X
DECL|enumConstant|TIMES
name|TIMES
block|;
comment|// T
DECL|method|getAttribute (char symbol)
specifier|public
specifier|static
name|FileAttribute
name|getAttribute
parameter_list|(
name|char
name|symbol
parameter_list|)
block|{
for|for
control|(
name|FileAttribute
name|attribute
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|name
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|Character
operator|.
name|toUpperCase
argument_list|(
name|symbol
argument_list|)
condition|)
block|{
return|return
name|attribute
return|;
block|}
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"No attribute for "
operator|+
name|symbol
argument_list|)
throw|;
block|}
block|}
DECL|method|DistCpOptions (Builder builder)
specifier|private
name|DistCpOptions
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|sourceFileListing
operator|=
name|builder
operator|.
name|sourceFileListing
expr_stmt|;
name|this
operator|.
name|sourcePaths
operator|=
name|builder
operator|.
name|sourcePaths
expr_stmt|;
name|this
operator|.
name|targetPath
operator|=
name|builder
operator|.
name|targetPath
expr_stmt|;
name|this
operator|.
name|atomicCommit
operator|=
name|builder
operator|.
name|atomicCommit
expr_stmt|;
name|this
operator|.
name|atomicWorkPath
operator|=
name|builder
operator|.
name|atomicWorkPath
expr_stmt|;
name|this
operator|.
name|syncFolder
operator|=
name|builder
operator|.
name|syncFolder
expr_stmt|;
name|this
operator|.
name|deleteMissing
operator|=
name|builder
operator|.
name|deleteMissing
expr_stmt|;
name|this
operator|.
name|ignoreFailures
operator|=
name|builder
operator|.
name|ignoreFailures
expr_stmt|;
name|this
operator|.
name|overwrite
operator|=
name|builder
operator|.
name|overwrite
expr_stmt|;
name|this
operator|.
name|append
operator|=
name|builder
operator|.
name|append
expr_stmt|;
name|this
operator|.
name|skipCRC
operator|=
name|builder
operator|.
name|skipCRC
expr_stmt|;
name|this
operator|.
name|blocking
operator|=
name|builder
operator|.
name|blocking
expr_stmt|;
name|this
operator|.
name|useDiff
operator|=
name|builder
operator|.
name|useDiff
expr_stmt|;
name|this
operator|.
name|useRdiff
operator|=
name|builder
operator|.
name|useRdiff
expr_stmt|;
name|this
operator|.
name|fromSnapshot
operator|=
name|builder
operator|.
name|fromSnapshot
expr_stmt|;
name|this
operator|.
name|toSnapshot
operator|=
name|builder
operator|.
name|toSnapshot
expr_stmt|;
name|this
operator|.
name|filtersFile
operator|=
name|builder
operator|.
name|filtersFile
expr_stmt|;
name|this
operator|.
name|logPath
operator|=
name|builder
operator|.
name|logPath
expr_stmt|;
name|this
operator|.
name|copyStrategy
operator|=
name|builder
operator|.
name|copyStrategy
expr_stmt|;
name|this
operator|.
name|mapBandwidth
operator|=
name|builder
operator|.
name|mapBandwidth
expr_stmt|;
name|this
operator|.
name|numListstatusThreads
operator|=
name|builder
operator|.
name|numListstatusThreads
expr_stmt|;
name|this
operator|.
name|maxMaps
operator|=
name|builder
operator|.
name|maxMaps
expr_stmt|;
name|this
operator|.
name|preserveStatus
operator|=
name|builder
operator|.
name|preserveStatus
expr_stmt|;
name|this
operator|.
name|blocksPerChunk
operator|=
name|builder
operator|.
name|blocksPerChunk
expr_stmt|;
name|this
operator|.
name|copyBufferSize
operator|=
name|builder
operator|.
name|copyBufferSize
expr_stmt|;
name|this
operator|.
name|verboseLog
operator|=
name|builder
operator|.
name|verboseLog
expr_stmt|;
block|}
DECL|method|getSourceFileListing ()
specifier|public
name|Path
name|getSourceFileListing
parameter_list|()
block|{
return|return
name|sourceFileListing
return|;
block|}
DECL|method|getSourcePaths ()
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|getSourcePaths
parameter_list|()
block|{
return|return
name|sourcePaths
operator|==
literal|null
condition|?
literal|null
else|:
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|sourcePaths
argument_list|)
return|;
block|}
DECL|method|getTargetPath ()
specifier|public
name|Path
name|getTargetPath
parameter_list|()
block|{
return|return
name|targetPath
return|;
block|}
DECL|method|shouldAtomicCommit ()
specifier|public
name|boolean
name|shouldAtomicCommit
parameter_list|()
block|{
return|return
name|atomicCommit
return|;
block|}
DECL|method|getAtomicWorkPath ()
specifier|public
name|Path
name|getAtomicWorkPath
parameter_list|()
block|{
return|return
name|atomicWorkPath
return|;
block|}
DECL|method|shouldSyncFolder ()
specifier|public
name|boolean
name|shouldSyncFolder
parameter_list|()
block|{
return|return
name|syncFolder
return|;
block|}
DECL|method|shouldDeleteMissing ()
specifier|public
name|boolean
name|shouldDeleteMissing
parameter_list|()
block|{
return|return
name|deleteMissing
return|;
block|}
DECL|method|shouldIgnoreFailures ()
specifier|public
name|boolean
name|shouldIgnoreFailures
parameter_list|()
block|{
return|return
name|ignoreFailures
return|;
block|}
DECL|method|shouldOverwrite ()
specifier|public
name|boolean
name|shouldOverwrite
parameter_list|()
block|{
return|return
name|overwrite
return|;
block|}
DECL|method|shouldAppend ()
specifier|public
name|boolean
name|shouldAppend
parameter_list|()
block|{
return|return
name|append
return|;
block|}
DECL|method|shouldSkipCRC ()
specifier|public
name|boolean
name|shouldSkipCRC
parameter_list|()
block|{
return|return
name|skipCRC
return|;
block|}
DECL|method|shouldBlock ()
specifier|public
name|boolean
name|shouldBlock
parameter_list|()
block|{
return|return
name|blocking
return|;
block|}
DECL|method|shouldUseDiff ()
specifier|public
name|boolean
name|shouldUseDiff
parameter_list|()
block|{
return|return
name|this
operator|.
name|useDiff
return|;
block|}
DECL|method|shouldUseRdiff ()
specifier|public
name|boolean
name|shouldUseRdiff
parameter_list|()
block|{
return|return
name|this
operator|.
name|useRdiff
return|;
block|}
DECL|method|shouldUseSnapshotDiff ()
specifier|public
name|boolean
name|shouldUseSnapshotDiff
parameter_list|()
block|{
return|return
name|shouldUseDiff
argument_list|()
operator|||
name|shouldUseRdiff
argument_list|()
return|;
block|}
DECL|method|getFromSnapshot ()
specifier|public
name|String
name|getFromSnapshot
parameter_list|()
block|{
return|return
name|this
operator|.
name|fromSnapshot
return|;
block|}
DECL|method|getToSnapshot ()
specifier|public
name|String
name|getToSnapshot
parameter_list|()
block|{
return|return
name|this
operator|.
name|toSnapshot
return|;
block|}
DECL|method|getFiltersFile ()
specifier|public
name|String
name|getFiltersFile
parameter_list|()
block|{
return|return
name|filtersFile
return|;
block|}
DECL|method|getLogPath ()
specifier|public
name|Path
name|getLogPath
parameter_list|()
block|{
return|return
name|logPath
return|;
block|}
DECL|method|getCopyStrategy ()
specifier|public
name|String
name|getCopyStrategy
parameter_list|()
block|{
return|return
name|copyStrategy
return|;
block|}
DECL|method|getNumListstatusThreads ()
specifier|public
name|int
name|getNumListstatusThreads
parameter_list|()
block|{
return|return
name|numListstatusThreads
return|;
block|}
DECL|method|getMaxMaps ()
specifier|public
name|int
name|getMaxMaps
parameter_list|()
block|{
return|return
name|maxMaps
return|;
block|}
DECL|method|getMapBandwidth ()
specifier|public
name|float
name|getMapBandwidth
parameter_list|()
block|{
return|return
name|mapBandwidth
return|;
block|}
DECL|method|getPreserveAttributes ()
specifier|public
name|Set
argument_list|<
name|FileAttribute
argument_list|>
name|getPreserveAttributes
parameter_list|()
block|{
return|return
operator|(
name|preserveStatus
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|preserveStatus
argument_list|)
return|;
block|}
comment|/**    * Checks if the input attribute should be preserved or not.    *    * @param attribute - Attribute to check    * @return True if attribute should be preserved, false otherwise    */
DECL|method|shouldPreserve (FileAttribute attribute)
specifier|public
name|boolean
name|shouldPreserve
parameter_list|(
name|FileAttribute
name|attribute
parameter_list|)
block|{
return|return
name|preserveStatus
operator|.
name|contains
argument_list|(
name|attribute
argument_list|)
return|;
block|}
DECL|method|getBlocksPerChunk ()
specifier|public
name|int
name|getBlocksPerChunk
parameter_list|()
block|{
return|return
name|blocksPerChunk
return|;
block|}
DECL|method|getCopyBufferSize ()
specifier|public
name|int
name|getCopyBufferSize
parameter_list|()
block|{
return|return
name|copyBufferSize
return|;
block|}
DECL|method|shouldVerboseLog ()
specifier|public
name|boolean
name|shouldVerboseLog
parameter_list|()
block|{
return|return
name|verboseLog
return|;
block|}
comment|/**    * Add options to configuration. These will be used in the Mapper/committer    *    * @param conf - Configuration object to which the options need to be added    */
DECL|method|appendToConf (Configuration conf)
specifier|public
name|void
name|appendToConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|ATOMIC_COMMIT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|atomicCommit
argument_list|)
argument_list|)
expr_stmt|;
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|IGNORE_FAILURES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|ignoreFailures
argument_list|)
argument_list|)
expr_stmt|;
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|SYNC_FOLDERS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|syncFolder
argument_list|)
argument_list|)
expr_stmt|;
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|DELETE_MISSING
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|deleteMissing
argument_list|)
argument_list|)
expr_stmt|;
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|OVERWRITE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|overwrite
argument_list|)
argument_list|)
expr_stmt|;
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|APPEND
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|append
argument_list|)
argument_list|)
expr_stmt|;
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|DIFF
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|useDiff
argument_list|)
argument_list|)
expr_stmt|;
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|RDIFF
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|useRdiff
argument_list|)
argument_list|)
expr_stmt|;
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|SKIP_CRC
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|skipCRC
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapBandwidth
operator|>
literal|0
condition|)
block|{
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|BANDWIDTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|mapBandwidth
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|PRESERVE_STATUS
argument_list|,
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|preserveStatus
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|filtersFile
operator|!=
literal|null
condition|)
block|{
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|FILTERS
argument_list|,
name|filtersFile
argument_list|)
expr_stmt|;
block|}
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|BLOCKS_PER_CHUNK
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|blocksPerChunk
argument_list|)
argument_list|)
expr_stmt|;
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|COPY_BUFFER_SIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|copyBufferSize
argument_list|)
argument_list|)
expr_stmt|;
name|DistCpOptionSwitch
operator|.
name|addToConf
argument_list|(
name|conf
argument_list|,
name|DistCpOptionSwitch
operator|.
name|VERBOSE_LOG
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|verboseLog
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Utility to easily string-ify Options, for logging.    *    * @return String representation of the Options.    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DistCpOptions{"
operator|+
literal|"atomicCommit="
operator|+
name|atomicCommit
operator|+
literal|", syncFolder="
operator|+
name|syncFolder
operator|+
literal|", deleteMissing="
operator|+
name|deleteMissing
operator|+
literal|", ignoreFailures="
operator|+
name|ignoreFailures
operator|+
literal|", overwrite="
operator|+
name|overwrite
operator|+
literal|", append="
operator|+
name|append
operator|+
literal|", useDiff="
operator|+
name|useDiff
operator|+
literal|", useRdiff="
operator|+
name|useRdiff
operator|+
literal|", fromSnapshot="
operator|+
name|fromSnapshot
operator|+
literal|", toSnapshot="
operator|+
name|toSnapshot
operator|+
literal|", skipCRC="
operator|+
name|skipCRC
operator|+
literal|", blocking="
operator|+
name|blocking
operator|+
literal|", numListstatusThreads="
operator|+
name|numListstatusThreads
operator|+
literal|", maxMaps="
operator|+
name|maxMaps
operator|+
literal|", mapBandwidth="
operator|+
name|mapBandwidth
operator|+
literal|", copyStrategy='"
operator|+
name|copyStrategy
operator|+
literal|'\''
operator|+
literal|", preserveStatus="
operator|+
name|preserveStatus
operator|+
literal|", atomicWorkPath="
operator|+
name|atomicWorkPath
operator|+
literal|", logPath="
operator|+
name|logPath
operator|+
literal|", sourceFileListing="
operator|+
name|sourceFileListing
operator|+
literal|", sourcePaths="
operator|+
name|sourcePaths
operator|+
literal|", targetPath="
operator|+
name|targetPath
operator|+
literal|", filtersFile='"
operator|+
name|filtersFile
operator|+
literal|'\''
operator|+
literal|", blocksPerChunk="
operator|+
name|blocksPerChunk
operator|+
literal|", copyBufferSize="
operator|+
name|copyBufferSize
operator|+
literal|", verboseLog="
operator|+
name|verboseLog
operator|+
literal|'}'
return|;
block|}
comment|/**    * The builder of the {@link DistCpOptions}.    *    * This is designed to be the only public interface to create a    * {@link DistCpOptions} object for users. It follows a simple Builder design    * pattern.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|sourceFileListing
specifier|private
name|Path
name|sourceFileListing
decl_stmt|;
DECL|field|sourcePaths
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|sourcePaths
decl_stmt|;
DECL|field|targetPath
specifier|private
name|Path
name|targetPath
decl_stmt|;
DECL|field|atomicCommit
specifier|private
name|boolean
name|atomicCommit
init|=
literal|false
decl_stmt|;
DECL|field|atomicWorkPath
specifier|private
name|Path
name|atomicWorkPath
decl_stmt|;
DECL|field|syncFolder
specifier|private
name|boolean
name|syncFolder
init|=
literal|false
decl_stmt|;
DECL|field|deleteMissing
specifier|private
name|boolean
name|deleteMissing
init|=
literal|false
decl_stmt|;
DECL|field|ignoreFailures
specifier|private
name|boolean
name|ignoreFailures
init|=
literal|false
decl_stmt|;
DECL|field|overwrite
specifier|private
name|boolean
name|overwrite
init|=
literal|false
decl_stmt|;
DECL|field|append
specifier|private
name|boolean
name|append
init|=
literal|false
decl_stmt|;
DECL|field|skipCRC
specifier|private
name|boolean
name|skipCRC
init|=
literal|false
decl_stmt|;
DECL|field|blocking
specifier|private
name|boolean
name|blocking
init|=
literal|true
decl_stmt|;
DECL|field|verboseLog
specifier|private
name|boolean
name|verboseLog
init|=
literal|false
decl_stmt|;
DECL|field|useDiff
specifier|private
name|boolean
name|useDiff
init|=
literal|false
decl_stmt|;
DECL|field|useRdiff
specifier|private
name|boolean
name|useRdiff
init|=
literal|false
decl_stmt|;
DECL|field|fromSnapshot
specifier|private
name|String
name|fromSnapshot
decl_stmt|;
DECL|field|toSnapshot
specifier|private
name|String
name|toSnapshot
decl_stmt|;
DECL|field|filtersFile
specifier|private
name|String
name|filtersFile
decl_stmt|;
DECL|field|logPath
specifier|private
name|Path
name|logPath
decl_stmt|;
DECL|field|copyStrategy
specifier|private
name|String
name|copyStrategy
init|=
name|DistCpConstants
operator|.
name|UNIFORMSIZE
decl_stmt|;
DECL|field|numListstatusThreads
specifier|private
name|int
name|numListstatusThreads
init|=
literal|0
decl_stmt|;
comment|// 0 indicates that flag is not set.
DECL|field|maxMaps
specifier|private
name|int
name|maxMaps
init|=
name|DistCpConstants
operator|.
name|DEFAULT_MAPS
decl_stmt|;
DECL|field|mapBandwidth
specifier|private
name|float
name|mapBandwidth
init|=
literal|0
decl_stmt|;
comment|// 0 indicates we should use the default
DECL|field|preserveStatus
specifier|private
name|EnumSet
argument_list|<
name|FileAttribute
argument_list|>
name|preserveStatus
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FileAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|blocksPerChunk
specifier|private
name|int
name|blocksPerChunk
init|=
literal|0
decl_stmt|;
DECL|field|copyBufferSize
specifier|private
name|int
name|copyBufferSize
init|=
name|DistCpConstants
operator|.
name|COPY_BUFFER_SIZE_DEFAULT
decl_stmt|;
DECL|method|Builder (List<Path> sourcePaths, Path targetPath)
specifier|public
name|Builder
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|sourcePaths
parameter_list|,
name|Path
name|targetPath
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|sourcePaths
operator|!=
literal|null
operator|&&
operator|!
name|sourcePaths
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Source paths should not be null or empty!"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|targetPath
operator|!=
literal|null
argument_list|,
literal|"Target path should not be null!"
argument_list|)
expr_stmt|;
name|this
operator|.
name|sourcePaths
operator|=
name|sourcePaths
expr_stmt|;
name|this
operator|.
name|targetPath
operator|=
name|targetPath
expr_stmt|;
block|}
DECL|method|Builder (Path sourceFileListing, Path targetPath)
specifier|public
name|Builder
parameter_list|(
name|Path
name|sourceFileListing
parameter_list|,
name|Path
name|targetPath
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|sourceFileListing
operator|!=
literal|null
argument_list|,
literal|"Source file listing should not be null!"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|targetPath
operator|!=
literal|null
argument_list|,
literal|"Target path should not be null!"
argument_list|)
expr_stmt|;
name|this
operator|.
name|sourceFileListing
operator|=
name|sourceFileListing
expr_stmt|;
name|this
operator|.
name|targetPath
operator|=
name|targetPath
expr_stmt|;
block|}
comment|/**      * This is the single entry point for constructing DistCpOptions objects.      *      * Before a new DistCpOptions object is returned, it will set the dependent      * options, validate the option combinations. After constructing, the      * DistCpOptions instance is immutable.      */
DECL|method|build ()
specifier|public
name|DistCpOptions
name|build
parameter_list|()
block|{
name|setOptionsForSplitLargeFile
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
return|return
operator|new
name|DistCpOptions
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Override options for split large files.      */
DECL|method|setOptionsForSplitLargeFile ()
specifier|private
name|void
name|setOptionsForSplitLargeFile
parameter_list|()
block|{
if|if
condition|(
name|blocksPerChunk
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Enabling preserving blocksize since "
operator|+
name|DistCpOptionSwitch
operator|.
name|BLOCKS_PER_CHUNK
operator|.
name|getSwitch
argument_list|()
operator|+
literal|" is passed."
argument_list|)
expr_stmt|;
name|preserve
argument_list|(
name|FileAttribute
operator|.
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Set "
operator|+
name|DistCpOptionSwitch
operator|.
name|APPEND
operator|.
name|getSwitch
argument_list|()
operator|+
literal|" to false since "
operator|+
name|DistCpOptionSwitch
operator|.
name|BLOCKS_PER_CHUNK
operator|.
name|getSwitch
argument_list|()
operator|+
literal|" is passed."
argument_list|)
expr_stmt|;
name|this
operator|.
name|append
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|validate ()
specifier|private
name|void
name|validate
parameter_list|()
block|{
if|if
condition|(
operator|(
name|useDiff
operator|||
name|useRdiff
operator|)
operator|&&
name|deleteMissing
condition|)
block|{
comment|// -delete and -diff/-rdiff are mutually exclusive.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"-delete and -diff/-rdiff are "
operator|+
literal|"mutually exclusive. The -delete option will be ignored."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|atomicCommit
operator|&&
name|atomicWorkPath
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"-tmp work-path can only be specified along with -atomic"
argument_list|)
throw|;
block|}
if|if
condition|(
name|syncFolder
operator|&&
name|atomicCommit
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Atomic commit can't be used with "
operator|+
literal|"sync folder or overwrite options"
argument_list|)
throw|;
block|}
if|if
condition|(
name|deleteMissing
operator|&&
operator|!
operator|(
name|overwrite
operator|||
name|syncFolder
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Delete missing is applicable "
operator|+
literal|"only with update or overwrite options"
argument_list|)
throw|;
block|}
if|if
condition|(
name|overwrite
operator|&&
name|syncFolder
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Overwrite and update options are "
operator|+
literal|"mutually exclusive"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|syncFolder
operator|&&
name|skipCRC
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Skip CRC is valid only with update options"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|syncFolder
operator|&&
name|append
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Append is valid only with update options"
argument_list|)
throw|;
block|}
if|if
condition|(
name|skipCRC
operator|&&
name|append
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Append is disallowed when skipping CRC"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|syncFolder
operator|&&
operator|(
name|useDiff
operator|||
name|useRdiff
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"-diff/-rdiff is valid only with -update option"
argument_list|)
throw|;
block|}
if|if
condition|(
name|useDiff
operator|||
name|useRdiff
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|fromSnapshot
argument_list|)
operator|||
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|toSnapshot
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must provide both the starting and ending "
operator|+
literal|"snapshot names for -diff/-rdiff"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|useDiff
operator|&&
name|useRdiff
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"-diff and -rdiff are mutually exclusive"
argument_list|)
throw|;
block|}
if|if
condition|(
name|verboseLog
operator|&&
name|logPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"-v is valid only with -log option"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|withSourcePaths (List<Path> newSourcePaths)
name|Builder
name|withSourcePaths
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|newSourcePaths
parameter_list|)
block|{
name|this
operator|.
name|sourcePaths
operator|=
name|newSourcePaths
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withAtomicCommit (boolean newAtomicCommit)
specifier|public
name|Builder
name|withAtomicCommit
parameter_list|(
name|boolean
name|newAtomicCommit
parameter_list|)
block|{
name|this
operator|.
name|atomicCommit
operator|=
name|newAtomicCommit
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withAtomicWorkPath (Path newAtomicWorkPath)
specifier|public
name|Builder
name|withAtomicWorkPath
parameter_list|(
name|Path
name|newAtomicWorkPath
parameter_list|)
block|{
name|this
operator|.
name|atomicWorkPath
operator|=
name|newAtomicWorkPath
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withSyncFolder (boolean newSyncFolder)
specifier|public
name|Builder
name|withSyncFolder
parameter_list|(
name|boolean
name|newSyncFolder
parameter_list|)
block|{
name|this
operator|.
name|syncFolder
operator|=
name|newSyncFolder
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withDeleteMissing (boolean newDeleteMissing)
specifier|public
name|Builder
name|withDeleteMissing
parameter_list|(
name|boolean
name|newDeleteMissing
parameter_list|)
block|{
name|this
operator|.
name|deleteMissing
operator|=
name|newDeleteMissing
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withIgnoreFailures (boolean newIgnoreFailures)
specifier|public
name|Builder
name|withIgnoreFailures
parameter_list|(
name|boolean
name|newIgnoreFailures
parameter_list|)
block|{
name|this
operator|.
name|ignoreFailures
operator|=
name|newIgnoreFailures
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withOverwrite (boolean newOverwrite)
specifier|public
name|Builder
name|withOverwrite
parameter_list|(
name|boolean
name|newOverwrite
parameter_list|)
block|{
name|this
operator|.
name|overwrite
operator|=
name|newOverwrite
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withAppend (boolean newAppend)
specifier|public
name|Builder
name|withAppend
parameter_list|(
name|boolean
name|newAppend
parameter_list|)
block|{
name|this
operator|.
name|append
operator|=
name|newAppend
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withCRC (boolean newSkipCRC)
specifier|public
name|Builder
name|withCRC
parameter_list|(
name|boolean
name|newSkipCRC
parameter_list|)
block|{
name|this
operator|.
name|skipCRC
operator|=
name|newSkipCRC
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withBlocking (boolean newBlocking)
specifier|public
name|Builder
name|withBlocking
parameter_list|(
name|boolean
name|newBlocking
parameter_list|)
block|{
name|this
operator|.
name|blocking
operator|=
name|newBlocking
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withUseDiff (String newFromSnapshot, String newToSnapshot)
specifier|public
name|Builder
name|withUseDiff
parameter_list|(
name|String
name|newFromSnapshot
parameter_list|,
name|String
name|newToSnapshot
parameter_list|)
block|{
name|this
operator|.
name|useDiff
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|fromSnapshot
operator|=
name|newFromSnapshot
expr_stmt|;
name|this
operator|.
name|toSnapshot
operator|=
name|newToSnapshot
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withUseRdiff (String newFromSnapshot, String newToSnapshot)
specifier|public
name|Builder
name|withUseRdiff
parameter_list|(
name|String
name|newFromSnapshot
parameter_list|,
name|String
name|newToSnapshot
parameter_list|)
block|{
name|this
operator|.
name|useRdiff
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|fromSnapshot
operator|=
name|newFromSnapshot
expr_stmt|;
name|this
operator|.
name|toSnapshot
operator|=
name|newToSnapshot
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withFiltersFile (String newFiletersFile)
specifier|public
name|Builder
name|withFiltersFile
parameter_list|(
name|String
name|newFiletersFile
parameter_list|)
block|{
name|this
operator|.
name|filtersFile
operator|=
name|newFiletersFile
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withLogPath (Path newLogPath)
specifier|public
name|Builder
name|withLogPath
parameter_list|(
name|Path
name|newLogPath
parameter_list|)
block|{
name|this
operator|.
name|logPath
operator|=
name|newLogPath
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withCopyStrategy (String newCopyStrategy)
specifier|public
name|Builder
name|withCopyStrategy
parameter_list|(
name|String
name|newCopyStrategy
parameter_list|)
block|{
name|this
operator|.
name|copyStrategy
operator|=
name|newCopyStrategy
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withMapBandwidth (float newMapBandwidth)
specifier|public
name|Builder
name|withMapBandwidth
parameter_list|(
name|float
name|newMapBandwidth
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|newMapBandwidth
operator|>
literal|0
argument_list|,
literal|"Bandwidth "
operator|+
name|newMapBandwidth
operator|+
literal|" is invalid (should be> 0)"
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapBandwidth
operator|=
name|newMapBandwidth
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withNumListstatusThreads (int newNumListstatusThreads)
specifier|public
name|Builder
name|withNumListstatusThreads
parameter_list|(
name|int
name|newNumListstatusThreads
parameter_list|)
block|{
if|if
condition|(
name|newNumListstatusThreads
operator|>
name|MAX_NUM_LISTSTATUS_THREADS
condition|)
block|{
name|this
operator|.
name|numListstatusThreads
operator|=
name|MAX_NUM_LISTSTATUS_THREADS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newNumListstatusThreads
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|numListstatusThreads
operator|=
name|newNumListstatusThreads
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|numListstatusThreads
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|maxMaps (int newMaxMaps)
specifier|public
name|Builder
name|maxMaps
parameter_list|(
name|int
name|newMaxMaps
parameter_list|)
block|{
name|this
operator|.
name|maxMaps
operator|=
name|Math
operator|.
name|max
argument_list|(
name|newMaxMaps
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|preserve (String attributes)
specifier|public
name|Builder
name|preserve
parameter_list|(
name|String
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|==
literal|null
operator|||
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|preserveStatus
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|FileAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|attributes
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|preserveStatus
operator|.
name|add
argument_list|(
name|FileAttribute
operator|.
name|getAttribute
argument_list|(
name|attributes
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|preserve (FileAttribute attribute)
specifier|public
name|Builder
name|preserve
parameter_list|(
name|FileAttribute
name|attribute
parameter_list|)
block|{
name|preserveStatus
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withBlocksPerChunk (int newBlocksPerChunk)
specifier|public
name|Builder
name|withBlocksPerChunk
parameter_list|(
name|int
name|newBlocksPerChunk
parameter_list|)
block|{
name|this
operator|.
name|blocksPerChunk
operator|=
name|newBlocksPerChunk
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withCopyBufferSize (int newCopyBufferSize)
specifier|public
name|Builder
name|withCopyBufferSize
parameter_list|(
name|int
name|newCopyBufferSize
parameter_list|)
block|{
name|this
operator|.
name|copyBufferSize
operator|=
name|newCopyBufferSize
operator|>
literal|0
condition|?
name|newCopyBufferSize
else|:
name|DistCpConstants
operator|.
name|COPY_BUFFER_SIZE_DEFAULT
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withVerboseLog (boolean newVerboseLog)
specifier|public
name|Builder
name|withVerboseLog
parameter_list|(
name|boolean
name|newVerboseLog
parameter_list|)
block|{
name|this
operator|.
name|verboseLog
operator|=
name|newVerboseLog
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

