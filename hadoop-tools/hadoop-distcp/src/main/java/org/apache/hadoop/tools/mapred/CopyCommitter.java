begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpOptions
operator|.
name|FileAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|DistCpUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * The CopyCommitter class is DistCp's OutputCommitter implementation. It is  * responsible for handling the completion/cleanup of the DistCp run.  * Specifically, it does the following:  *  1. Cleanup of the meta-folder (where DistCp maintains its file-list, etc.)  *  2. Preservation of user/group/replication-factor on any directories that  *     have been copied. (Files are taken care of in their map-tasks.)  *  3. Atomic-move of data from the temporary work-folder to the final path  *     (if atomic-commit was opted for).  *  4. Deletion of files from the target that are missing at source (if opted for).  *  5. Cleanup of any partially copied files, from previous, failed attempts.  */
end_comment

begin_class
DECL|class|CopyCommitter
specifier|public
class|class
name|CopyCommitter
extends|extends
name|FileOutputCommitter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CopyCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|taskAttemptContext
specifier|private
specifier|final
name|TaskAttemptContext
name|taskAttemptContext
decl_stmt|;
DECL|field|syncFolder
specifier|private
name|boolean
name|syncFolder
init|=
literal|false
decl_stmt|;
DECL|field|overwrite
specifier|private
name|boolean
name|overwrite
init|=
literal|false
decl_stmt|;
DECL|field|targetPathExists
specifier|private
name|boolean
name|targetPathExists
init|=
literal|true
decl_stmt|;
comment|/**    * Create a output committer    *    * @param outputPath the job's output path    * @param context    the task's context    * @throws IOException - Exception if any    */
DECL|method|CopyCommitter (Path outputPath, TaskAttemptContext context)
specifier|public
name|CopyCommitter
parameter_list|(
name|Path
name|outputPath
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|outputPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskAttemptContext
operator|=
name|context
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|commitJob (JobContext jobContext)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|jobContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|syncFolder
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_SYNC_FOLDERS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|overwrite
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_OVERWRITE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|targetPathExists
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_PATH_EXISTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
name|cleanupTempFiles
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
name|String
name|attributes
init|=
name|conf
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_PRESERVE_STATUS
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|preserveRawXattrs
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_PRESERVE_RAWXATTRS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|attributes
operator|!=
literal|null
operator|&&
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|preserveRawXattrs
condition|)
block|{
name|preserveFileAttributesForDirectories
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_DELETE_MISSING
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|deleteMissing
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_ATOMIC_COPY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|commitData
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|taskAttemptContext
operator|.
name|setStatus
argument_list|(
literal|"Commit Successful"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|abortJob (JobContext jobContext, JobStatus.State state)
specifier|public
name|void
name|abortJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|,
name|JobStatus
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|abortJob
argument_list|(
name|jobContext
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTempFiles
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
name|cleanup
argument_list|(
name|jobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanupTempFiles (JobContext context)
specifier|private
name|void
name|cleanupTempFiles
parameter_list|(
name|JobContext
name|context
parameter_list|)
block|{
try|try
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
name|targetWorkPath
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_WORK_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|targetFS
init|=
name|targetWorkPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|jobId
init|=
name|context
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|deleteAttemptTempFiles
argument_list|(
name|targetWorkPath
argument_list|,
name|targetFS
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
name|deleteAttemptTempFiles
argument_list|(
name|targetWorkPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|targetFS
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to cleanup temp files"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteAttemptTempFiles (Path targetWorkPath, FileSystem targetFS, String jobId)
specifier|private
name|void
name|deleteAttemptTempFiles
parameter_list|(
name|Path
name|targetWorkPath
parameter_list|,
name|FileSystem
name|targetFS
parameter_list|,
name|String
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|tempFiles
init|=
name|targetFS
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|targetWorkPath
argument_list|,
literal|".distcp.tmp."
operator|+
name|jobId
operator|.
name|replaceAll
argument_list|(
literal|"job"
argument_list|,
literal|"attempt"
argument_list|)
operator|+
literal|"*"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempFiles
operator|!=
literal|null
operator|&&
name|tempFiles
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|FileStatus
name|file
range|:
name|tempFiles
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up "
operator|+
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|targetFS
operator|.
name|delete
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Cleanup meta folder and other temporary files    *    * @param conf - Job Configuration    */
DECL|method|cleanup (Configuration conf)
specifier|private
name|void
name|cleanup
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Path
name|metaFolder
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_META_FOLDER
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|metaFolder
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up temporary work folder: "
operator|+
name|metaFolder
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|metaFolder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|ignore
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This method changes the target-directories' file-attributes (owner,
comment|// user/group permissions, etc.) based on the corresponding source directories.
DECL|method|preserveFileAttributesForDirectories (Configuration conf)
specifier|private
name|void
name|preserveFileAttributesForDirectories
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|attrSymbols
init|=
name|conf
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_PRESERVE_STATUS
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|syncOrOverwrite
init|=
name|syncFolder
operator|||
name|overwrite
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"About to preserve attributes: "
operator|+
name|attrSymbols
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|FileAttribute
argument_list|>
name|attributes
init|=
name|DistCpUtils
operator|.
name|unpackAttributes
argument_list|(
name|attrSymbols
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|preserveRawXattrs
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_PRESERVE_RAWXATTRS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|sourceListing
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_LISTING_FILE_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|clusterFS
init|=
name|sourceListing
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|sourceReader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|sourceListing
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|totalLen
init|=
name|clusterFS
operator|.
name|getFileStatus
argument_list|(
name|sourceListing
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Path
name|targetRoot
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_WORK_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|preservedEntries
init|=
literal|0
decl_stmt|;
try|try
block|{
name|CopyListingFileStatus
name|srcFileStatus
init|=
operator|new
name|CopyListingFileStatus
argument_list|()
decl_stmt|;
name|Text
name|srcRelPath
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
comment|// Iterate over every source path that was copied.
while|while
condition|(
name|sourceReader
operator|.
name|next
argument_list|(
name|srcRelPath
argument_list|,
name|srcFileStatus
argument_list|)
condition|)
block|{
comment|// File-attributes for files are set at the time of copy,
comment|// in the map-task.
if|if
condition|(
operator|!
name|srcFileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
continue|continue;
name|Path
name|targetFile
init|=
operator|new
name|Path
argument_list|(
name|targetRoot
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|srcRelPath
argument_list|)
decl_stmt|;
comment|//
comment|// Skip the root folder when syncOrOverwrite is true.
comment|//
if|if
condition|(
name|targetRoot
operator|.
name|equals
argument_list|(
name|targetFile
argument_list|)
operator|&&
name|syncOrOverwrite
condition|)
continue|continue;
name|FileSystem
name|targetFS
init|=
name|targetFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|DistCpUtils
operator|.
name|preserve
argument_list|(
name|targetFS
argument_list|,
name|targetFile
argument_list|,
name|srcFileStatus
argument_list|,
name|attributes
argument_list|,
name|preserveRawXattrs
argument_list|)
expr_stmt|;
name|taskAttemptContext
operator|.
name|progress
argument_list|()
expr_stmt|;
name|taskAttemptContext
operator|.
name|setStatus
argument_list|(
literal|"Preserving status on directory entries. ["
operator|+
name|sourceReader
operator|.
name|getPosition
argument_list|()
operator|*
literal|100
operator|/
name|totalLen
operator|+
literal|"%]"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|sourceReader
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Preserved status on "
operator|+
name|preservedEntries
operator|+
literal|" dir entries on target"
argument_list|)
expr_stmt|;
block|}
comment|// This method deletes "extra" files from the target, if they're not
comment|// available at the source.
DECL|method|deleteMissing (Configuration conf)
specifier|private
name|void
name|deleteMissing
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"-delete option is enabled. About to remove entries from "
operator|+
literal|"target that are missing in source"
argument_list|)
expr_stmt|;
comment|// Sort the source-file listing alphabetically.
name|Path
name|sourceListing
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_LISTING_FILE_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|clusterFS
init|=
name|sourceListing
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|sortedSourceListing
init|=
name|DistCpUtils
operator|.
name|sortListing
argument_list|(
name|clusterFS
argument_list|,
name|conf
argument_list|,
name|sourceListing
argument_list|)
decl_stmt|;
comment|// Similarly, create the listing of target-files. Sort alphabetically.
name|Path
name|targetListing
init|=
operator|new
name|Path
argument_list|(
name|sourceListing
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"targetListing.seq"
argument_list|)
decl_stmt|;
name|CopyListing
name|target
init|=
operator|new
name|GlobbedCopyListing
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|targets
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Path
name|targetFinalPath
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_FINAL_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|targets
operator|.
name|add
argument_list|(
name|targetFinalPath
argument_list|)
expr_stmt|;
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
argument_list|(
name|targets
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/NONE"
argument_list|)
argument_list|)
decl_stmt|;
comment|//
comment|// Set up options to be the same from the CopyListing.buildListing's perspective,
comment|// so to collect similar listings as when doing the copy
comment|//
name|options
operator|.
name|setOverwrite
argument_list|(
name|overwrite
argument_list|)
expr_stmt|;
name|options
operator|.
name|setSyncFolder
argument_list|(
name|syncFolder
argument_list|)
expr_stmt|;
name|options
operator|.
name|setTargetPathExists
argument_list|(
name|targetPathExists
argument_list|)
expr_stmt|;
name|target
operator|.
name|buildListing
argument_list|(
name|targetListing
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Path
name|sortedTargetListing
init|=
name|DistCpUtils
operator|.
name|sortListing
argument_list|(
name|clusterFS
argument_list|,
name|conf
argument_list|,
name|targetListing
argument_list|)
decl_stmt|;
name|long
name|totalLen
init|=
name|clusterFS
operator|.
name|getFileStatus
argument_list|(
name|sortedTargetListing
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|sourceReader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|sortedSourceListing
argument_list|)
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|targetReader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|sortedTargetListing
argument_list|)
argument_list|)
decl_stmt|;
comment|// Walk both source and target file listings.
comment|// Delete all from target that doesn't also exist on source.
name|long
name|deletedEntries
init|=
literal|0
decl_stmt|;
try|try
block|{
name|CopyListingFileStatus
name|srcFileStatus
init|=
operator|new
name|CopyListingFileStatus
argument_list|()
decl_stmt|;
name|Text
name|srcRelPath
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|CopyListingFileStatus
name|trgtFileStatus
init|=
operator|new
name|CopyListingFileStatus
argument_list|()
decl_stmt|;
name|Text
name|trgtRelPath
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|FileSystem
name|targetFS
init|=
name|targetFinalPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|srcAvailable
init|=
name|sourceReader
operator|.
name|next
argument_list|(
name|srcRelPath
argument_list|,
name|srcFileStatus
argument_list|)
decl_stmt|;
while|while
condition|(
name|targetReader
operator|.
name|next
argument_list|(
name|trgtRelPath
argument_list|,
name|trgtFileStatus
argument_list|)
condition|)
block|{
comment|// Skip sources that don't exist on target.
while|while
condition|(
name|srcAvailable
operator|&&
name|trgtRelPath
operator|.
name|compareTo
argument_list|(
name|srcRelPath
argument_list|)
operator|>
literal|0
condition|)
block|{
name|srcAvailable
operator|=
name|sourceReader
operator|.
name|next
argument_list|(
name|srcRelPath
argument_list|,
name|srcFileStatus
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcAvailable
operator|&&
name|trgtRelPath
operator|.
name|equals
argument_list|(
name|srcRelPath
argument_list|)
condition|)
continue|continue;
comment|// Target doesn't exist at source. Delete.
name|boolean
name|result
init|=
operator|(
operator|!
name|targetFS
operator|.
name|exists
argument_list|(
name|trgtFileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
operator|||
name|targetFS
operator|.
name|delete
argument_list|(
name|trgtFileStatus
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|trgtFileStatus
operator|.
name|getPath
argument_list|()
operator|+
literal|" - Missing at source"
argument_list|)
expr_stmt|;
name|deletedEntries
operator|++
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete "
operator|+
name|trgtFileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
name|taskAttemptContext
operator|.
name|progress
argument_list|()
expr_stmt|;
name|taskAttemptContext
operator|.
name|setStatus
argument_list|(
literal|"Deleting missing files from target. ["
operator|+
name|targetReader
operator|.
name|getPosition
argument_list|()
operator|*
literal|100
operator|/
name|totalLen
operator|+
literal|"%]"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|sourceReader
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|targetReader
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|deletedEntries
operator|+
literal|" from target: "
operator|+
name|targets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|commitData (Configuration conf)
specifier|private
name|void
name|commitData
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_WORK_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|finalDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_FINAL_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|targetFS
init|=
name|workDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Atomic commit enabled. Moving "
operator|+
name|workDir
operator|+
literal|" to "
operator|+
name|finalDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetFS
operator|.
name|exists
argument_list|(
name|finalDir
argument_list|)
operator|&&
name|targetFS
operator|.
name|exists
argument_list|(
name|workDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Pre-existing final-path found at: "
operator|+
name|finalDir
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target-path can't be committed to because it "
operator|+
literal|"exists at "
operator|+
name|finalDir
operator|+
literal|". Copied data is in temp-dir: "
operator|+
name|workDir
operator|+
literal|". "
argument_list|)
throw|;
block|}
name|boolean
name|result
init|=
name|targetFS
operator|.
name|rename
argument_list|(
name|workDir
argument_list|,
name|finalDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Rename failed. Perhaps data already moved. Verifying..."
argument_list|)
expr_stmt|;
name|result
operator|=
name|targetFS
operator|.
name|exists
argument_list|(
name|finalDir
argument_list|)
operator|&&
operator|!
name|targetFS
operator|.
name|exists
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Data committed successfully to "
operator|+
name|finalDir
argument_list|)
expr_stmt|;
name|taskAttemptContext
operator|.
name|setStatus
argument_list|(
literal|"Data committed successfully to "
operator|+
name|finalDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to commit data to "
operator|+
name|finalDir
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Atomic commit failed. Temporary data in "
operator|+
name|workDir
operator|+
literal|", Unable to move to "
operator|+
name|finalDir
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

