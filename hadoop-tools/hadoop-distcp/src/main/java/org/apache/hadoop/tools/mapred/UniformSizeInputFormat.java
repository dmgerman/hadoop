begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|CopyListingFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|DistCpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * UniformSizeInputFormat extends the InputFormat class, to produce  * input-splits for DistCp.  * It looks at the copy-listing and groups the contents into input-splits such  * that the total-number of bytes to be copied for each input split is  * uniform.  */
end_comment

begin_class
DECL|class|UniformSizeInputFormat
specifier|public
class|class
name|UniformSizeInputFormat
extends|extends
name|InputFormat
argument_list|<
name|Text
argument_list|,
name|CopyListingFileStatus
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UniformSizeInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Implementation of InputFormat::getSplits(). Returns a list of InputSplits,    * such that the number of bytes to be copied for all the splits are    * approximately equal.    * @param context JobContext for the job.    * @return The list of uniformly-distributed input-splits.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Override
DECL|method|getSplits (JobContext context)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|configuration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|int
name|numSplits
init|=
name|DistCpUtils
operator|.
name|getInt
argument_list|(
name|configuration
argument_list|,
name|JobContext
operator|.
name|NUM_MAPS
argument_list|)
decl_stmt|;
if|if
condition|(
name|numSplits
operator|==
literal|0
condition|)
return|return
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
return|;
return|return
name|getSplits
argument_list|(
name|configuration
argument_list|,
name|numSplits
argument_list|,
name|DistCpUtils
operator|.
name|getLong
argument_list|(
name|configuration
argument_list|,
name|DistCpConstants
operator|.
name|CONF_LABEL_TOTAL_BYTES_TO_BE_COPIED
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSplits (Configuration configuration, int numSplits, long totalSizeBytes)
specifier|private
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|int
name|numSplits
parameter_list|,
name|long
name|totalSizeBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|(
name|numSplits
argument_list|)
decl_stmt|;
name|long
name|nBytesPerSplit
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|totalSizeBytes
operator|*
literal|1.0
operator|/
name|numSplits
argument_list|)
decl_stmt|;
name|CopyListingFileStatus
name|srcFileStatus
init|=
operator|new
name|CopyListingFileStatus
argument_list|()
decl_stmt|;
name|Text
name|srcRelPath
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|long
name|currentSplitSize
init|=
literal|0
decl_stmt|;
name|long
name|lastSplitStart
init|=
literal|0
decl_stmt|;
name|long
name|lastPosition
init|=
literal|0
decl_stmt|;
specifier|final
name|Path
name|listingFilePath
init|=
name|getListingFilePath
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Average bytes per map: "
operator|+
name|nBytesPerSplit
operator|+
literal|", Number of maps: "
operator|+
name|numSplits
operator|+
literal|", total size: "
operator|+
name|totalSizeBytes
argument_list|)
expr_stmt|;
block|}
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|getListingFileReader
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|srcRelPath
argument_list|,
name|srcFileStatus
argument_list|)
condition|)
block|{
comment|// If adding the current file would cause the bytes per map to exceed
comment|// limit. Add the current file to new split
if|if
condition|(
name|currentSplitSize
operator|+
name|srcFileStatus
operator|.
name|getLen
argument_list|()
operator|>
name|nBytesPerSplit
operator|&&
name|lastPosition
operator|!=
literal|0
condition|)
block|{
name|FileSplit
name|split
init|=
operator|new
name|FileSplit
argument_list|(
name|listingFilePath
argument_list|,
name|lastSplitStart
argument_list|,
name|lastPosition
operator|-
name|lastSplitStart
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating split : "
operator|+
name|split
operator|+
literal|", bytes in split: "
operator|+
name|currentSplitSize
argument_list|)
expr_stmt|;
block|}
name|splits
operator|.
name|add
argument_list|(
name|split
argument_list|)
expr_stmt|;
name|lastSplitStart
operator|=
name|lastPosition
expr_stmt|;
name|currentSplitSize
operator|=
literal|0
expr_stmt|;
block|}
name|currentSplitSize
operator|+=
name|srcFileStatus
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|lastPosition
operator|=
name|reader
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lastPosition
operator|>
name|lastSplitStart
condition|)
block|{
name|FileSplit
name|split
init|=
operator|new
name|FileSplit
argument_list|(
name|listingFilePath
argument_list|,
name|lastSplitStart
argument_list|,
name|lastPosition
operator|-
name|lastSplitStart
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating split : "
operator|+
name|split
operator|+
literal|", bytes in split: "
operator|+
name|currentSplitSize
argument_list|)
expr_stmt|;
block|}
name|splits
operator|.
name|add
argument_list|(
name|split
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
DECL|method|getListingFilePath (Configuration configuration)
specifier|private
specifier|static
name|Path
name|getListingFilePath
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
specifier|final
name|String
name|listingFilePathString
init|=
name|configuration
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_LISTING_FILE_PATH
argument_list|,
literal|""
argument_list|)
decl_stmt|;
assert|assert
operator|!
name|listingFilePathString
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|:
literal|"Couldn't find listing file. Invalid input."
assert|;
return|return
operator|new
name|Path
argument_list|(
name|listingFilePathString
argument_list|)
return|;
block|}
DECL|method|getListingFileReader (Configuration configuration)
specifier|private
name|SequenceFile
operator|.
name|Reader
name|getListingFileReader
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
specifier|final
name|Path
name|listingFilePath
init|=
name|getListingFilePath
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|FileSystem
name|fileSystem
init|=
name|listingFilePath
operator|.
name|getFileSystem
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|exists
argument_list|(
name|listingFilePath
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Listing file doesn't exist at: "
operator|+
name|listingFilePath
argument_list|)
throw|;
return|return
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|configuration
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|listingFilePath
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't find listing file at: "
operator|+
name|listingFilePath
argument_list|,
name|exception
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Couldn't find listing-file at: "
operator|+
name|listingFilePath
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
comment|/**    * Implementation of InputFormat::createRecordReader().    * @param split The split for which the RecordReader is sought.    * @param context The context of the current task-attempt.    * @return A SequenceFileRecordReader instance, (since the copy-listing is a    * simple sequence-file.)    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Override
DECL|method|createRecordReader ( InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|CopyListingFileStatus
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|SequenceFileRecordReader
argument_list|<
name|Text
argument_list|,
name|CopyListingFileStatus
argument_list|>
argument_list|()
return|;
block|}
block|}
end_class

end_unit

