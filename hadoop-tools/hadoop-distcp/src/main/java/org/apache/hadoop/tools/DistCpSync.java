begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|CopyListing
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_comment
comment|/**  * This class provides the basic functionality to sync two FileSystems based on  * the snapshot diff report. More specifically, we have the following settings:  * 1. Both the source and target FileSystem must be DistributedFileSystem  * 2. Two snapshots (e.g., s1 and s2) have been created on the source FS.  * The diff between these two snapshots will be copied to the target FS.  * 3. The target has the same snapshot s1. No changes have been made on the  * target since s1. All the files/directories in the target are the same with  * source.s1  */
end_comment

begin_class
DECL|class|DistCpSync
class|class
name|DistCpSync
block|{
DECL|field|context
specifier|private
name|DistCpContext
name|context
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|// diffMap maps snapshot diff op type to a list of diff ops.
comment|// It's initially created based on the snapshot diff. Then the individual
comment|// diff stored there maybe modified instead of copied by the distcp algorithm
comment|// afterwards, for better performance.
comment|//
DECL|field|diffMap
specifier|private
name|EnumMap
argument_list|<
name|SnapshotDiffReport
operator|.
name|DiffType
argument_list|,
name|List
argument_list|<
name|DiffInfo
argument_list|>
argument_list|>
name|diffMap
decl_stmt|;
DECL|field|renameDiffs
specifier|private
name|DiffInfo
index|[]
name|renameDiffs
decl_stmt|;
DECL|method|DistCpSync (DistCpContext context, Configuration conf)
name|DistCpSync
parameter_list|(
name|DistCpContext
name|context
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|isRdiff ()
specifier|private
name|boolean
name|isRdiff
parameter_list|()
block|{
return|return
name|context
operator|.
name|shouldUseRdiff
argument_list|()
return|;
block|}
comment|/**    * Check if three conditions are met before sync.    * 1. Only one source directory.    * 2. Both source and target file system are DFS.    * 3. There is no change between from and the current status in target    *    file system.    *  Throw exceptions if first two aren't met, and return false to fallback to    *  default distcp if the third condition isn't met.    */
DECL|method|preSyncCheck ()
specifier|private
name|boolean
name|preSyncCheck
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|sourcePaths
init|=
name|context
operator|.
name|getSourcePaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourcePaths
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// we only support one source dir which must be a snapshottable directory
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|sourcePaths
operator|.
name|size
argument_list|()
operator|+
literal|" source paths are provided"
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|sourceDir
init|=
name|sourcePaths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|targetDir
init|=
name|context
operator|.
name|getTargetPath
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|srcFs
init|=
name|sourceDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|tgtFs
init|=
name|targetDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|snapshotDiffFs
init|=
name|isRdiff
argument_list|()
condition|?
name|tgtFs
else|:
name|srcFs
decl_stmt|;
specifier|final
name|Path
name|snapshotDiffDir
init|=
name|isRdiff
argument_list|()
condition|?
name|targetDir
else|:
name|sourceDir
decl_stmt|;
comment|// currently we require both the source and the target file system are
comment|// DistributedFileSystem.
if|if
condition|(
operator|!
operator|(
name|srcFs
operator|instanceof
name|DistributedFileSystem
operator|)
operator|||
operator|!
operator|(
name|tgtFs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The FileSystems needs to"
operator|+
literal|" be DistributedFileSystem for using snapshot-diff-based distcp"
argument_list|)
throw|;
block|}
specifier|final
name|DistributedFileSystem
name|targetFs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|tgtFs
decl_stmt|;
comment|// make sure targetFS has no change between from and the current states
if|if
condition|(
operator|!
name|checkNoChange
argument_list|(
name|targetFs
argument_list|,
name|targetDir
argument_list|)
condition|)
block|{
comment|// set the source path using the snapshot path
name|context
operator|.
name|setSourcePaths
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getSnapshotPath
argument_list|(
name|sourceDir
argument_list|,
name|context
operator|.
name|getToSnapshot
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|from
init|=
name|getSnapshotName
argument_list|(
name|context
operator|.
name|getFromSnapshot
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|to
init|=
name|getSnapshotName
argument_list|(
name|context
operator|.
name|getToSnapshot
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|FileStatus
name|fromSnapshotStat
init|=
name|snapshotDiffFs
operator|.
name|getFileStatus
argument_list|(
name|getSnapshotPath
argument_list|(
name|snapshotDiffDir
argument_list|,
name|from
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|toSnapshotStat
init|=
name|snapshotDiffFs
operator|.
name|getFileStatus
argument_list|(
name|getSnapshotPath
argument_list|(
name|snapshotDiffDir
argument_list|,
name|to
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRdiff
argument_list|()
condition|)
block|{
comment|// If fromSnapshot isn't current dir then do a time check
if|if
condition|(
operator|!
name|from
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|fromSnapshotStat
operator|.
name|getModificationTime
argument_list|()
operator|<
name|toSnapshotStat
operator|.
name|getModificationTime
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Snapshot "
operator|+
name|from
operator|+
literal|" should be newer than "
operator|+
name|to
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// If toSnapshot isn't current dir then do a time check
if|if
condition|(
operator|!
name|to
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|fromSnapshotStat
operator|.
name|getModificationTime
argument_list|()
operator|>
name|toSnapshotStat
operator|.
name|getModificationTime
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Snapshot "
operator|+
name|to
operator|+
literal|" should be newer than "
operator|+
name|from
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidInputException
argument_list|(
literal|"Input snapshot is not found"
argument_list|,
name|nfe
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|sync ()
specifier|public
name|boolean
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|preSyncCheck
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|getAllDiffs
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|sourcePaths
init|=
name|context
operator|.
name|getSourcePaths
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|sourceDir
init|=
name|sourcePaths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|targetDir
init|=
name|context
operator|.
name|getTargetPath
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|tfs
init|=
name|targetDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|targetFs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|tfs
decl_stmt|;
name|Path
name|tmpDir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpDir
operator|=
name|createTargetTmpDir
argument_list|(
name|targetFs
argument_list|,
name|targetDir
argument_list|)
expr_stmt|;
name|DiffInfo
index|[]
name|renameAndDeleteDiffs
init|=
name|getRenameAndDeleteDiffsForSync
argument_list|(
name|targetDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|renameAndDeleteDiffs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// do the real sync work: deletion and rename
name|syncDiff
argument_list|(
name|renameAndDeleteDiffs
argument_list|,
name|targetFs
argument_list|,
name|tmpDir
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|DistCp
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to use snapshot diff for distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|deleteTargetTmpDir
argument_list|(
name|targetFs
argument_list|,
name|tmpDir
argument_list|)
expr_stmt|;
comment|// TODO: since we have tmp directory, we can support "undo" with failures
comment|// set the source path using the snapshot path
name|context
operator|.
name|setSourcePaths
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getSnapshotPath
argument_list|(
name|sourceDir
argument_list|,
name|context
operator|.
name|getToSnapshot
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get all diffs from source directory snapshot diff report, put them into an    * EnumMap whose key is DiffType, and value is a DiffInfo list. If there is    * no entry for a given DiffType, the associated value will be an empty list.    */
DECL|method|getAllDiffs ()
specifier|private
name|boolean
name|getAllDiffs
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|ssDir
init|=
name|isRdiff
argument_list|()
condition|?
name|context
operator|.
name|getTargetPath
argument_list|()
else|:
name|context
operator|.
name|getSourcePaths
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|ssDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|from
init|=
name|getSnapshotName
argument_list|(
name|context
operator|.
name|getFromSnapshot
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|to
init|=
name|getSnapshotName
argument_list|(
name|context
operator|.
name|getToSnapshot
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotDiffReport
name|report
init|=
name|fs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|ssDir
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|this
operator|.
name|diffMap
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|SnapshotDiffReport
operator|.
name|DiffType
name|type
range|:
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|values
argument_list|()
control|)
block|{
name|diffMap
operator|.
name|put
argument_list|(
name|type
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DiffInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
name|entry
range|:
name|report
operator|.
name|getDiffList
argument_list|()
control|)
block|{
comment|// If the entry is the snapshot root, usually a item like "M\t."
comment|// in the diff report. We don't need to handle it and cannot handle it,
comment|// since its sourcepath is empty.
if|if
condition|(
name|entry
operator|.
name|getSourcePath
argument_list|()
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
name|SnapshotDiffReport
operator|.
name|DiffType
name|dt
init|=
name|entry
operator|.
name|getType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiffInfo
argument_list|>
name|list
init|=
name|diffMap
operator|.
name|get
argument_list|(
name|dt
argument_list|)
decl_stmt|;
if|if
condition|(
name|dt
operator|==
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|MODIFY
operator|||
name|dt
operator|==
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|CREATE
operator|||
name|dt
operator|==
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|DELETE
condition|)
block|{
specifier|final
name|Path
name|source
init|=
operator|new
name|Path
argument_list|(
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|DiffInfo
argument_list|(
name|source
argument_list|,
literal|null
argument_list|,
name|dt
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dt
operator|==
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|RENAME
condition|)
block|{
specifier|final
name|Path
name|source
init|=
operator|new
name|Path
argument_list|(
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|entry
operator|.
name|getTargetPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|DiffInfo
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
name|dt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DistCp
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to compute snapshot diff on "
operator|+
name|ssDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|diffMap
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|getSnapshotName (String name)
specifier|private
name|String
name|getSnapshotName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Path
operator|.
name|CUR_DIR
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|""
else|:
name|name
return|;
block|}
DECL|method|getSnapshotPath (Path inputDir, String snapshotName)
specifier|private
name|Path
name|getSnapshotPath
parameter_list|(
name|Path
name|inputDir
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
if|if
condition|(
name|Path
operator|.
name|CUR_DIR
operator|.
name|equals
argument_list|(
name|snapshotName
argument_list|)
condition|)
block|{
return|return
name|inputDir
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
name|inputDir
argument_list|,
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|snapshotName
argument_list|)
return|;
block|}
block|}
DECL|method|createTargetTmpDir (DistributedFileSystem targetFs, Path targetDir)
specifier|private
name|Path
name|createTargetTmpDir
parameter_list|(
name|DistributedFileSystem
name|targetFs
parameter_list|,
name|Path
name|targetDir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|DistCpConstants
operator|.
name|HDFS_DISTCP_DIFF_DIRECTORY_NAME
operator|+
name|DistCp
operator|.
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetFs
operator|.
name|mkdirs
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The tmp directory "
operator|+
name|tmp
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
return|return
name|tmp
return|;
block|}
DECL|method|deleteTargetTmpDir (DistributedFileSystem targetFs, Path tmpDir)
specifier|private
name|void
name|deleteTargetTmpDir
parameter_list|(
name|DistributedFileSystem
name|targetFs
parameter_list|,
name|Path
name|tmpDir
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|tmpDir
operator|!=
literal|null
condition|)
block|{
name|targetFs
operator|.
name|delete
argument_list|(
name|tmpDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DistCp
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to cleanup tmp dir: "
operator|+
name|tmpDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compute the snapshot diff on the given file system. Return true if the diff    * is empty, i.e., no changes have happened in the FS.    */
DECL|method|checkNoChange (DistributedFileSystem fs, Path path)
specifier|private
name|boolean
name|checkNoChange
parameter_list|(
name|DistributedFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|from
init|=
name|getSnapshotName
argument_list|(
name|context
operator|.
name|getFromSnapshot
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotDiffReport
name|targetDiff
init|=
name|fs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|path
argument_list|,
name|from
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetDiff
operator|.
name|getDiffList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DistCp
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"The target has been modified since snapshot "
operator|+
name|context
operator|.
name|getFromSnapshot
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DistCp
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to compute snapshot diff on "
operator|+
name|path
operator|+
literal|" at snapshot "
operator|+
name|context
operator|.
name|getFromSnapshot
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|syncDiff (DiffInfo[] diffs, DistributedFileSystem targetFs, Path tmpDir)
specifier|private
name|void
name|syncDiff
parameter_list|(
name|DiffInfo
index|[]
name|diffs
parameter_list|,
name|DistributedFileSystem
name|targetFs
parameter_list|,
name|Path
name|tmpDir
parameter_list|)
throws|throws
name|IOException
block|{
name|moveToTmpDir
argument_list|(
name|diffs
argument_list|,
name|targetFs
argument_list|,
name|tmpDir
argument_list|)
expr_stmt|;
name|moveToTarget
argument_list|(
name|diffs
argument_list|,
name|targetFs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Move all the source files that should be renamed or deleted to the tmp    * directory.    */
DECL|method|moveToTmpDir (DiffInfo[] diffs, DistributedFileSystem targetFs, Path tmpDir)
specifier|private
name|void
name|moveToTmpDir
parameter_list|(
name|DiffInfo
index|[]
name|diffs
parameter_list|,
name|DistributedFileSystem
name|targetFs
parameter_list|,
name|Path
name|tmpDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// sort the diffs based on their source paths to make sure the files and
comment|// subdirs are moved before moving their parents/ancestors.
name|Arrays
operator|.
name|sort
argument_list|(
name|diffs
argument_list|,
name|DiffInfo
operator|.
name|sourceComparator
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|DiffInfo
name|diff
range|:
name|diffs
control|)
block|{
name|Path
name|tmpTarget
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
name|diff
operator|.
name|getSource
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|targetFs
operator|.
name|exists
argument_list|(
name|tmpTarget
argument_list|)
condition|)
block|{
name|tmpTarget
operator|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
name|diff
operator|.
name|getSource
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|setTmp
argument_list|(
name|tmpTarget
argument_list|)
expr_stmt|;
name|targetFs
operator|.
name|rename
argument_list|(
name|diff
operator|.
name|getSource
argument_list|()
argument_list|,
name|tmpTarget
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Finish the rename operations: move all the intermediate files/directories    * from the tmp dir to the final targets.    */
DECL|method|moveToTarget (DiffInfo[] diffs, DistributedFileSystem targetFs)
specifier|private
name|void
name|moveToTarget
parameter_list|(
name|DiffInfo
index|[]
name|diffs
parameter_list|,
name|DistributedFileSystem
name|targetFs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// sort the diffs based on their target paths to make sure the parent
comment|// directories are created first.
name|Arrays
operator|.
name|sort
argument_list|(
name|diffs
argument_list|,
name|DiffInfo
operator|.
name|targetComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|DiffInfo
name|diff
range|:
name|diffs
control|)
block|{
if|if
condition|(
name|diff
operator|.
name|getTarget
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|targetFs
operator|.
name|mkdirs
argument_list|(
name|diff
operator|.
name|getTarget
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|targetFs
operator|.
name|rename
argument_list|(
name|diff
operator|.
name|getTmp
argument_list|()
argument_list|,
name|diff
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get rename and delete diffs and add the targetDir as the prefix of their    * source and target paths.    */
DECL|method|getRenameAndDeleteDiffsForSync (Path targetDir)
specifier|private
name|DiffInfo
index|[]
name|getRenameAndDeleteDiffsForSync
parameter_list|(
name|Path
name|targetDir
parameter_list|)
block|{
comment|// NOTE: when HDFS-10263 is done, getRenameAndDeleteDiffsRdiff
comment|// should be the same as getRenameAndDeleteDiffsFdiff. Specifically,
comment|// we should just move the body of getRenameAndDeleteDiffsFdiff
comment|// to here and remove both getRenameAndDeleteDiffsFdiff
comment|// and getRenameAndDeleteDiffsDdiff.
if|if
condition|(
name|isRdiff
argument_list|()
condition|)
block|{
return|return
name|getRenameAndDeleteDiffsRdiff
argument_list|(
name|targetDir
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getRenameAndDeleteDiffsFdiff
argument_list|(
name|targetDir
argument_list|)
return|;
block|}
block|}
comment|/**    * Get rename and delete diffs and add the targetDir as the prefix of their    * source and target paths.    */
DECL|method|getRenameAndDeleteDiffsRdiff (Path targetDir)
specifier|private
name|DiffInfo
index|[]
name|getRenameAndDeleteDiffsRdiff
parameter_list|(
name|Path
name|targetDir
parameter_list|)
block|{
name|List
argument_list|<
name|DiffInfo
argument_list|>
name|renameDiffsList
init|=
name|diffMap
operator|.
name|get
argument_list|(
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|RENAME
argument_list|)
decl_stmt|;
comment|// Prepare a renameDiffArray for translating deleted items below.
comment|// Do a reversion here due to HDFS-10263.
name|List
argument_list|<
name|DiffInfo
argument_list|>
name|renameDiffsListReversed
init|=
operator|new
name|ArrayList
argument_list|<
name|DiffInfo
argument_list|>
argument_list|(
name|renameDiffsList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DiffInfo
name|diff
range|:
name|renameDiffsList
control|)
block|{
name|renameDiffsListReversed
operator|.
name|add
argument_list|(
operator|new
name|DiffInfo
argument_list|(
name|diff
operator|.
name|getTarget
argument_list|()
argument_list|,
name|diff
operator|.
name|getSource
argument_list|()
argument_list|,
name|diff
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DiffInfo
index|[]
name|renameDiffArray
init|=
name|renameDiffsListReversed
operator|.
name|toArray
argument_list|(
operator|new
name|DiffInfo
index|[
name|renameDiffsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|renameDiffArray
argument_list|,
name|DiffInfo
operator|.
name|sourceComparator
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DiffInfo
argument_list|>
name|renameAndDeleteDiff
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Traverse DELETE list, which we need to delete them in sync process.
comment|// Use the renameDiffArray prepared to translate the path.
for|for
control|(
name|DiffInfo
name|diff
range|:
name|diffMap
operator|.
name|get
argument_list|(
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|DELETE
argument_list|)
control|)
block|{
name|DiffInfo
name|renameItem
init|=
name|getRenameItem
argument_list|(
name|diff
argument_list|,
name|renameDiffArray
argument_list|)
decl_stmt|;
name|Path
name|source
decl_stmt|;
if|if
condition|(
name|renameItem
operator|!=
literal|null
condition|)
block|{
name|source
operator|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|translateRenamedPath
argument_list|(
name|diff
operator|.
name|getSource
argument_list|()
argument_list|,
name|renameItem
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|source
operator|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|diff
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|renameAndDeleteDiff
operator|.
name|add
argument_list|(
operator|new
name|DiffInfo
argument_list|(
name|source
argument_list|,
literal|null
argument_list|,
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|DELETE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DiffInfo
name|diff
range|:
name|diffMap
operator|.
name|get
argument_list|(
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|RENAME
argument_list|)
control|)
block|{
comment|// swap target and source here for Rdiff
name|Path
name|source
init|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|diff
operator|.
name|getSource
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|diff
operator|.
name|getTarget
argument_list|()
argument_list|)
decl_stmt|;
name|renameAndDeleteDiff
operator|.
name|add
argument_list|(
operator|new
name|DiffInfo
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
name|diff
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|renameAndDeleteDiff
operator|.
name|toArray
argument_list|(
operator|new
name|DiffInfo
index|[
name|renameAndDeleteDiff
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Get rename and delete diffs and add the targetDir as the prefix of their    * source and target paths.    */
DECL|method|getRenameAndDeleteDiffsFdiff (Path targetDir)
specifier|private
name|DiffInfo
index|[]
name|getRenameAndDeleteDiffsFdiff
parameter_list|(
name|Path
name|targetDir
parameter_list|)
block|{
name|List
argument_list|<
name|DiffInfo
argument_list|>
name|renameAndDeleteDiff
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DiffInfo
name|diff
range|:
name|diffMap
operator|.
name|get
argument_list|(
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|DELETE
argument_list|)
control|)
block|{
name|Path
name|source
init|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|diff
operator|.
name|getSource
argument_list|()
argument_list|)
decl_stmt|;
name|renameAndDeleteDiff
operator|.
name|add
argument_list|(
operator|new
name|DiffInfo
argument_list|(
name|source
argument_list|,
name|diff
operator|.
name|getTarget
argument_list|()
argument_list|,
name|diff
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DiffInfo
name|diff
range|:
name|diffMap
operator|.
name|get
argument_list|(
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|RENAME
argument_list|)
control|)
block|{
name|Path
name|source
init|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|diff
operator|.
name|getSource
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|diff
operator|.
name|getTarget
argument_list|()
argument_list|)
decl_stmt|;
name|renameAndDeleteDiff
operator|.
name|add
argument_list|(
operator|new
name|DiffInfo
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
name|diff
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|renameAndDeleteDiff
operator|.
name|toArray
argument_list|(
operator|new
name|DiffInfo
index|[
name|renameAndDeleteDiff
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getCreateAndModifyDiffs ()
specifier|private
name|DiffInfo
index|[]
name|getCreateAndModifyDiffs
parameter_list|()
block|{
name|List
argument_list|<
name|DiffInfo
argument_list|>
name|createDiff
init|=
name|diffMap
operator|.
name|get
argument_list|(
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DiffInfo
argument_list|>
name|modifyDiff
init|=
name|diffMap
operator|.
name|get
argument_list|(
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|MODIFY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DiffInfo
argument_list|>
name|diffs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|createDiff
operator|.
name|size
argument_list|()
operator|+
name|modifyDiff
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|diffs
operator|.
name|addAll
argument_list|(
name|createDiff
argument_list|)
expr_stmt|;
name|diffs
operator|.
name|addAll
argument_list|(
name|modifyDiff
argument_list|)
expr_stmt|;
return|return
name|diffs
operator|.
name|toArray
argument_list|(
operator|new
name|DiffInfo
index|[
name|diffs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Probe for a path being a parent of another.    * @return true if the parent's path matches the start of the child's    */
DECL|method|isParentOf (Path parent, Path child)
specifier|private
name|boolean
name|isParentOf
parameter_list|(
name|Path
name|parent
parameter_list|,
name|Path
name|child
parameter_list|)
block|{
name|String
name|parentPath
init|=
name|parent
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parentPath
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|parentPath
operator|+=
name|Path
operator|.
name|SEPARATOR
expr_stmt|;
block|}
return|return
name|childPath
operator|.
name|length
argument_list|()
operator|>
name|parentPath
operator|.
name|length
argument_list|()
operator|&&
name|childPath
operator|.
name|startsWith
argument_list|(
name|parentPath
argument_list|)
return|;
block|}
comment|/**    * Find the possible rename item which equals to the parent or self of    * a created/modified file/directory.    * @param diff a modify/create diff item    * @param renameDiffArray all rename diffs    * @return possible rename item    */
DECL|method|getRenameItem (DiffInfo diff, DiffInfo[] renameDiffArray)
specifier|private
name|DiffInfo
name|getRenameItem
parameter_list|(
name|DiffInfo
name|diff
parameter_list|,
name|DiffInfo
index|[]
name|renameDiffArray
parameter_list|)
block|{
for|for
control|(
name|DiffInfo
name|renameItem
range|:
name|renameDiffArray
control|)
block|{
if|if
condition|(
name|diff
operator|.
name|getSource
argument_list|()
operator|.
name|equals
argument_list|(
name|renameItem
operator|.
name|getSource
argument_list|()
argument_list|)
condition|)
block|{
comment|// The same path string may appear in:
comment|// 1. both renamed and modified snapshot diff entries.
comment|// 2. both renamed and created snapshot diff entries.
comment|// Case 1 is the about same file/directory, whereas case 2
comment|// is about two different files/directories.
comment|// We are finding case 1 here, thus we check against DiffType.MODIFY.
if|if
condition|(
name|diff
operator|.
name|getType
argument_list|()
operator|==
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|MODIFY
condition|)
block|{
return|return
name|renameItem
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isParentOf
argument_list|(
name|renameItem
operator|.
name|getSource
argument_list|()
argument_list|,
name|diff
operator|.
name|getSource
argument_list|()
argument_list|)
condition|)
block|{
comment|// If rename entry is the parent of diff entry, then both MODIFY and
comment|// CREATE diff entries should be handled.
return|return
name|renameItem
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * For a given sourcePath, get its real path if it or its parent was renamed.    *    * For example, if we renamed dirX to dirY, and created dirY/fileX,    * the initial snapshot diff would be a CREATE snapshot diff that looks like    *   + dirX/fileX    * The rename snapshot diff looks like    *   R dirX dirY    *    * We convert the soucePath dirX/fileX to dirY/fileX here.    *    * @return target path    */
DECL|method|translateRenamedPath (Path sourcePath, DiffInfo renameItem)
specifier|private
name|Path
name|translateRenamedPath
parameter_list|(
name|Path
name|sourcePath
parameter_list|,
name|DiffInfo
name|renameItem
parameter_list|)
block|{
if|if
condition|(
name|sourcePath
operator|.
name|equals
argument_list|(
name|renameItem
operator|.
name|getSource
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|renameItem
operator|.
name|getTarget
argument_list|()
return|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
name|sourcePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|remain
init|=
name|sb
operator|.
name|substring
argument_list|(
name|renameItem
operator|.
name|getSource
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|renameItem
operator|.
name|getTarget
argument_list|()
argument_list|,
name|remain
argument_list|)
return|;
block|}
comment|/**    * Prepare the diff list.    * This diff list only includes created or modified files/directories, since    * delete and rename items are synchronized already.    *    * If the parent or self of a source path is renamed, we need to change its    * target path according the correspondent rename item.    *    * For RDiff usage, the diff.getSource() is what we will use as its target    * path.    *    * @return a diff list    */
DECL|method|prepareDiffListForCopyListing ()
specifier|public
name|ArrayList
argument_list|<
name|DiffInfo
argument_list|>
name|prepareDiffListForCopyListing
parameter_list|()
block|{
name|DiffInfo
index|[]
name|modifyAndCreateDiffs
init|=
name|getCreateAndModifyDiffs
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|DiffInfo
argument_list|>
name|finalListWithTarget
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRdiff
argument_list|()
condition|)
block|{
for|for
control|(
name|DiffInfo
name|diff
range|:
name|modifyAndCreateDiffs
control|)
block|{
name|diff
operator|.
name|setTarget
argument_list|(
name|diff
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|finalListWithTarget
operator|.
name|add
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|DiffInfo
argument_list|>
name|renameDiffsList
init|=
name|diffMap
operator|.
name|get
argument_list|(
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|RENAME
argument_list|)
decl_stmt|;
name|DiffInfo
index|[]
name|renameDiffArray
init|=
name|renameDiffsList
operator|.
name|toArray
argument_list|(
operator|new
name|DiffInfo
index|[
name|renameDiffsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|renameDiffArray
argument_list|,
name|DiffInfo
operator|.
name|sourceComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|DiffInfo
name|diff
range|:
name|modifyAndCreateDiffs
control|)
block|{
name|DiffInfo
name|renameItem
init|=
name|getRenameItem
argument_list|(
name|diff
argument_list|,
name|renameDiffArray
argument_list|)
decl_stmt|;
if|if
condition|(
name|renameItem
operator|==
literal|null
condition|)
block|{
name|diff
operator|.
name|setTarget
argument_list|(
name|diff
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diff
operator|.
name|setTarget
argument_list|(
name|translateRenamedPath
argument_list|(
name|diff
operator|.
name|getSource
argument_list|()
argument_list|,
name|renameItem
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|finalListWithTarget
operator|.
name|add
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|finalListWithTarget
return|;
block|}
comment|/**    * This method returns a list of items to be excluded when recursively    * traversing newDir to build the copy list.    *    * Specifically, given a newly created directory newDir (a CREATE entry in    * the snapshot diff), if a previously copied file/directory itemX is moved    * (a RENAME entry in the snapshot diff) into newDir, itemX should be    * excluded when recursively traversing newDir in caller method so that it    * will not to be copied again.    * If the same itemX also has a MODIFY entry in the snapshot diff report,    * meaning it was modified after it was previously copied, it will still    * be added to the copy list in caller method.    * @return the exclude list    */
DECL|method|getTraverseExcludeList (Path newDir, Path prefix)
specifier|public
name|HashSet
argument_list|<
name|String
argument_list|>
name|getTraverseExcludeList
parameter_list|(
name|Path
name|newDir
parameter_list|,
name|Path
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|renameDiffs
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|DiffInfo
argument_list|>
name|renameList
init|=
name|diffMap
operator|.
name|get
argument_list|(
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|RENAME
argument_list|)
decl_stmt|;
name|renameDiffs
operator|=
name|renameList
operator|.
name|toArray
argument_list|(
operator|new
name|DiffInfo
index|[
name|renameList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|renameDiffs
argument_list|,
name|DiffInfo
operator|.
name|targetComparator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|renameDiffs
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|foundChild
init|=
literal|false
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|excludeList
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DiffInfo
name|diff
range|:
name|renameDiffs
control|)
block|{
if|if
condition|(
name|isParentOf
argument_list|(
name|newDir
argument_list|,
name|diff
operator|.
name|getTarget
argument_list|()
argument_list|)
condition|)
block|{
name|foundChild
operator|=
literal|true
expr_stmt|;
name|excludeList
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|prefix
argument_list|,
name|diff
operator|.
name|getTarget
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|foundChild
condition|)
block|{
comment|// The renameDiffs was sorted, the matching section should be
comment|// contiguous.
break|break;
block|}
block|}
return|return
name|excludeList
return|;
block|}
block|}
end_class

end_unit

