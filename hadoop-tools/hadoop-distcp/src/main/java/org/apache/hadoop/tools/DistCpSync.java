begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * This class provides the basic functionality to sync two FileSystems based on  * the snapshot diff report. More specifically, we have the following settings:  * 1. Both the source and target FileSystem must be DistributedFileSystem  * 2. Two snapshots (e.g., s1 and s2) have been created on the source FS.  * The diff between these two snapshots will be copied to the target FS.  * 3. The target has the same snapshot s1. No changes have been made on the  * target since s1. All the files/directories in the target are the same with  * source.s1  */
end_comment

begin_class
DECL|class|DistCpSync
class|class
name|DistCpSync
block|{
DECL|method|sync (DistCpOptions inputOptions, Configuration conf)
specifier|static
name|boolean
name|sync
parameter_list|(
name|DistCpOptions
name|inputOptions
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|sourcePaths
init|=
name|inputOptions
operator|.
name|getSourcePaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourcePaths
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// we only support one source dir which must be a snapshottable directory
name|DistCp
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|sourcePaths
operator|.
name|size
argument_list|()
operator|+
literal|" source paths are provided"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|Path
name|sourceDir
init|=
name|sourcePaths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|targetDir
init|=
name|inputOptions
operator|.
name|getTargetPath
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|sfs
init|=
name|sourceDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|tfs
init|=
name|targetDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// currently we require both the source and the target file system are
comment|// DistributedFileSystem.
if|if
condition|(
operator|!
operator|(
name|sfs
operator|instanceof
name|DistributedFileSystem
operator|)
operator|||
operator|!
operator|(
name|tfs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
name|DistCp
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"To use diff-based distcp, the FileSystems needs to"
operator|+
literal|" be DistributedFileSystem"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|DistributedFileSystem
name|sourceFs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|sfs
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|targetFs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|tfs
decl_stmt|;
comment|// make sure targetFS has no change between from and the current states
if|if
condition|(
operator|!
name|checkNoChange
argument_list|(
name|inputOptions
argument_list|,
name|targetFs
argument_list|,
name|targetDir
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Path
name|tmpDir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpDir
operator|=
name|createTargetTmpDir
argument_list|(
name|targetFs
argument_list|,
name|targetDir
argument_list|)
expr_stmt|;
name|DiffInfo
index|[]
name|diffs
init|=
name|getDiffs
argument_list|(
name|inputOptions
argument_list|,
name|sourceFs
argument_list|,
name|sourceDir
argument_list|,
name|targetDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|diffs
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// do the real sync work: deletion and rename
name|syncDiff
argument_list|(
name|diffs
argument_list|,
name|targetFs
argument_list|,
name|tmpDir
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|DistCp
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to use snapshot diff for distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|deleteTargetTmpDir
argument_list|(
name|targetFs
argument_list|,
name|tmpDir
argument_list|)
expr_stmt|;
comment|// TODO: since we have tmp directory, we can support "undo" with failures
comment|// set the source path using the snapshot path
name|inputOptions
operator|.
name|setSourcePaths
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getSourceSnapshotPath
argument_list|(
name|sourceDir
argument_list|,
name|inputOptions
operator|.
name|getToSnapshot
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSnapshotName (String name)
specifier|private
specifier|static
name|String
name|getSnapshotName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Path
operator|.
name|CUR_DIR
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|""
else|:
name|name
return|;
block|}
DECL|method|getSourceSnapshotPath (Path sourceDir, String snapshotName)
specifier|private
specifier|static
name|Path
name|getSourceSnapshotPath
parameter_list|(
name|Path
name|sourceDir
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
if|if
condition|(
name|Path
operator|.
name|CUR_DIR
operator|.
name|equals
argument_list|(
name|snapshotName
argument_list|)
condition|)
block|{
return|return
name|sourceDir
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
name|sourceDir
argument_list|,
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|snapshotName
argument_list|)
return|;
block|}
block|}
DECL|method|createTargetTmpDir (DistributedFileSystem targetFs, Path targetDir)
specifier|private
specifier|static
name|Path
name|createTargetTmpDir
parameter_list|(
name|DistributedFileSystem
name|targetFs
parameter_list|,
name|Path
name|targetDir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|DistCpConstants
operator|.
name|HDFS_DISTCP_DIFF_DIRECTORY_NAME
operator|+
name|DistCp
operator|.
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetFs
operator|.
name|mkdirs
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The tmp directory "
operator|+
name|tmp
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
return|return
name|tmp
return|;
block|}
DECL|method|deleteTargetTmpDir (DistributedFileSystem targetFs, Path tmpDir)
specifier|private
specifier|static
name|void
name|deleteTargetTmpDir
parameter_list|(
name|DistributedFileSystem
name|targetFs
parameter_list|,
name|Path
name|tmpDir
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|tmpDir
operator|!=
literal|null
condition|)
block|{
name|targetFs
operator|.
name|delete
argument_list|(
name|tmpDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DistCp
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to cleanup tmp dir: "
operator|+
name|tmpDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compute the snapshot diff on the given file system. Return true if the diff    * is empty, i.e., no changes have happened in the FS.    */
DECL|method|checkNoChange (DistCpOptions inputOptions, DistributedFileSystem fs, Path path)
specifier|private
specifier|static
name|boolean
name|checkNoChange
parameter_list|(
name|DistCpOptions
name|inputOptions
parameter_list|,
name|DistributedFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
name|SnapshotDiffReport
name|targetDiff
init|=
name|fs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|path
argument_list|,
name|inputOptions
operator|.
name|getFromSnapshot
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetDiff
operator|.
name|getDiffList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DistCp
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"The target has been modified since snapshot "
operator|+
name|inputOptions
operator|.
name|getFromSnapshot
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DistCp
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to compute snapshot diff on "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDiffs (DistCpOptions inputOptions, DistributedFileSystem fs, Path sourceDir, Path targetDir)
specifier|static
name|DiffInfo
index|[]
name|getDiffs
parameter_list|(
name|DistCpOptions
name|inputOptions
parameter_list|,
name|DistributedFileSystem
name|fs
parameter_list|,
name|Path
name|sourceDir
parameter_list|,
name|Path
name|targetDir
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|from
init|=
name|getSnapshotName
argument_list|(
name|inputOptions
operator|.
name|getFromSnapshot
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|to
init|=
name|getSnapshotName
argument_list|(
name|inputOptions
operator|.
name|getToSnapshot
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotDiffReport
name|sourceDiff
init|=
name|fs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|sourceDir
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
return|return
name|DiffInfo
operator|.
name|getDiffs
argument_list|(
name|sourceDiff
argument_list|,
name|targetDir
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DistCp
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to compute snapshot diff on "
operator|+
name|sourceDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|syncDiff (DiffInfo[] diffs, DistributedFileSystem targetFs, Path tmpDir)
specifier|private
specifier|static
name|void
name|syncDiff
parameter_list|(
name|DiffInfo
index|[]
name|diffs
parameter_list|,
name|DistributedFileSystem
name|targetFs
parameter_list|,
name|Path
name|tmpDir
parameter_list|)
throws|throws
name|IOException
block|{
name|moveToTmpDir
argument_list|(
name|diffs
argument_list|,
name|targetFs
argument_list|,
name|tmpDir
argument_list|)
expr_stmt|;
name|moveToTarget
argument_list|(
name|diffs
argument_list|,
name|targetFs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Move all the source files that should be renamed or deleted to the tmp    * directory.    */
DECL|method|moveToTmpDir (DiffInfo[] diffs, DistributedFileSystem targetFs, Path tmpDir)
specifier|private
specifier|static
name|void
name|moveToTmpDir
parameter_list|(
name|DiffInfo
index|[]
name|diffs
parameter_list|,
name|DistributedFileSystem
name|targetFs
parameter_list|,
name|Path
name|tmpDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// sort the diffs based on their source paths to make sure the files and
comment|// subdirs are moved before moving their parents/ancestors.
name|Arrays
operator|.
name|sort
argument_list|(
name|diffs
argument_list|,
name|DiffInfo
operator|.
name|sourceComparator
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|DiffInfo
name|diff
range|:
name|diffs
control|)
block|{
name|Path
name|tmpTarget
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
name|diff
operator|.
name|source
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|targetFs
operator|.
name|exists
argument_list|(
name|tmpTarget
argument_list|)
condition|)
block|{
name|tmpTarget
operator|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
name|diff
operator|.
name|source
operator|.
name|getName
argument_list|()
operator|+
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|setTmp
argument_list|(
name|tmpTarget
argument_list|)
expr_stmt|;
name|targetFs
operator|.
name|rename
argument_list|(
name|diff
operator|.
name|source
argument_list|,
name|tmpTarget
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Finish the rename operations: move all the intermediate files/directories    * from the tmp dir to the final targets.    */
DECL|method|moveToTarget (DiffInfo[] diffs, DistributedFileSystem targetFs)
specifier|private
specifier|static
name|void
name|moveToTarget
parameter_list|(
name|DiffInfo
index|[]
name|diffs
parameter_list|,
name|DistributedFileSystem
name|targetFs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// sort the diffs based on their target paths to make sure the parent
comment|// directories are created first.
name|Arrays
operator|.
name|sort
argument_list|(
name|diffs
argument_list|,
name|DiffInfo
operator|.
name|targetComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|DiffInfo
name|diff
range|:
name|diffs
control|)
block|{
if|if
condition|(
name|diff
operator|.
name|target
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|targetFs
operator|.
name|exists
argument_list|(
name|diff
operator|.
name|target
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
name|targetFs
operator|.
name|mkdirs
argument_list|(
name|diff
operator|.
name|target
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|targetFs
operator|.
name|rename
argument_list|(
name|diff
operator|.
name|getTmp
argument_list|()
argument_list|,
name|diff
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

