begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.mapred.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|mapred
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|DistCpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * The DynamicInputChunk represents a single chunk of work, when used in  * conjunction with the DynamicInputFormat and the DynamicRecordReader.  * The records in the DynamicInputFormat's input-file are split across various  * DynamicInputChunks. Each one is claimed and processed in an iteration of  * a dynamic-mapper. When a DynamicInputChunk has been exhausted, the faster  * mapper may claim another and process it, until there are no more to be  * consumed.  */
end_comment

begin_class
DECL|class|DynamicInputChunk
class|class
name|DynamicInputChunk
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DynamicInputChunk
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|static
name|Configuration
name|configuration
decl_stmt|;
DECL|field|chunkRootPath
specifier|private
specifier|static
name|Path
name|chunkRootPath
decl_stmt|;
DECL|field|chunkFilePrefix
specifier|private
specifier|static
name|String
name|chunkFilePrefix
decl_stmt|;
DECL|field|numChunksLeft
specifier|private
specifier|static
name|int
name|numChunksLeft
init|=
operator|-
literal|1
decl_stmt|;
comment|// Un-initialized before 1st dir-scan.
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|chunkFilePath
specifier|private
name|Path
name|chunkFilePath
decl_stmt|;
DECL|field|reader
specifier|private
name|SequenceFileRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|reader
decl_stmt|;
DECL|field|writer
specifier|private
name|SequenceFile
operator|.
name|Writer
name|writer
decl_stmt|;
DECL|method|initializeChunkInvariants (Configuration config)
specifier|private
specifier|static
name|void
name|initializeChunkInvariants
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|configuration
operator|=
name|config
expr_stmt|;
name|Path
name|listingFilePath
init|=
operator|new
name|Path
argument_list|(
name|getListingFilePath
argument_list|(
name|configuration
argument_list|)
argument_list|)
decl_stmt|;
name|chunkRootPath
operator|=
operator|new
name|Path
argument_list|(
name|listingFilePath
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"chunkDir"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|chunkRootPath
operator|.
name|getFileSystem
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|chunkFilePrefix
operator|=
name|listingFilePath
operator|.
name|getName
argument_list|()
operator|+
literal|".chunk."
expr_stmt|;
block|}
DECL|method|getListingFilePath (Configuration configuration)
specifier|private
specifier|static
name|String
name|getListingFilePath
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
specifier|final
name|String
name|listingFileString
init|=
name|configuration
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_LISTING_FILE_PATH
argument_list|,
literal|""
argument_list|)
decl_stmt|;
assert|assert
operator|!
name|listingFileString
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|:
literal|"Listing file not found."
assert|;
return|return
name|listingFileString
return|;
block|}
DECL|method|areInvariantsInitialized ()
specifier|private
specifier|static
name|boolean
name|areInvariantsInitialized
parameter_list|()
block|{
return|return
name|chunkRootPath
operator|!=
literal|null
return|;
block|}
DECL|method|DynamicInputChunk (String chunkId, Configuration configuration)
specifier|private
name|DynamicInputChunk
parameter_list|(
name|String
name|chunkId
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|areInvariantsInitialized
argument_list|()
condition|)
name|initializeChunkInvariants
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|chunkFilePath
operator|=
operator|new
name|Path
argument_list|(
name|chunkRootPath
argument_list|,
name|chunkFilePrefix
operator|+
name|chunkId
argument_list|)
expr_stmt|;
name|openForWrite
argument_list|()
expr_stmt|;
block|}
DECL|method|openForWrite ()
specifier|private
name|void
name|openForWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|chunkFilePath
operator|.
name|getFileSystem
argument_list|(
name|configuration
argument_list|)
argument_list|,
name|configuration
argument_list|,
name|chunkFilePath
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|FileStatus
operator|.
name|class
argument_list|,
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Factory method to create chunk-files for writing to.    * (For instance, when the DynamicInputFormat splits the input-file into    * chunks.)    * @param chunkId String to identify the chunk.    * @param configuration Configuration, describing the location of the listing-    * file, file-system for the map-job, etc.    * @return A DynamicInputChunk, corresponding to a chunk-file, with the name    * incorporating the chunk-id.    * @throws IOException Exception on failure to create the chunk.    */
DECL|method|createChunkForWrite (String chunkId, Configuration configuration)
specifier|public
specifier|static
name|DynamicInputChunk
name|createChunkForWrite
parameter_list|(
name|String
name|chunkId
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DynamicInputChunk
argument_list|(
name|chunkId
argument_list|,
name|configuration
argument_list|)
return|;
block|}
comment|/**    * Method to write records into a chunk.    * @param key Key from the listing file.    * @param value Corresponding value from the listing file.    * @throws IOException Exception onf failure to write to the file.    */
DECL|method|write (Text key, FileStatus value)
specifier|public
name|void
name|write
parameter_list|(
name|Text
name|key
parameter_list|,
name|FileStatus
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Closes streams opened to the chunk-file.    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reassigns the chunk to a specified Map-Task, for consumption.    * @param taskId The Map-Task to which a the chunk is to be reassigned.    * @throws IOException Exception on failure to reassign.    */
DECL|method|assignTo (TaskID taskId)
specifier|public
name|void
name|assignTo
parameter_list|(
name|TaskID
name|taskId
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|newPath
init|=
operator|new
name|Path
argument_list|(
name|chunkRootPath
argument_list|,
name|taskId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|chunkFilePath
argument_list|,
name|newPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|chunkFilePath
operator|+
literal|" could not be assigned to "
operator|+
name|taskId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|DynamicInputChunk (Path chunkFilePath, TaskAttemptContext taskAttemptContext)
specifier|private
name|DynamicInputChunk
parameter_list|(
name|Path
name|chunkFilePath
parameter_list|,
name|TaskAttemptContext
name|taskAttemptContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|areInvariantsInitialized
argument_list|()
condition|)
name|initializeChunkInvariants
argument_list|(
name|taskAttemptContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|chunkFilePath
operator|=
name|chunkFilePath
expr_stmt|;
name|openForRead
argument_list|(
name|taskAttemptContext
argument_list|)
expr_stmt|;
block|}
DECL|method|openForRead (TaskAttemptContext taskAttemptContext)
specifier|private
name|void
name|openForRead
parameter_list|(
name|TaskAttemptContext
name|taskAttemptContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|reader
operator|=
operator|new
name|SequenceFileRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
expr_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
operator|new
name|FileSplit
argument_list|(
name|chunkFilePath
argument_list|,
literal|0
argument_list|,
name|DistCpUtils
operator|.
name|getFileSize
argument_list|(
name|chunkFilePath
argument_list|,
name|configuration
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
name|taskAttemptContext
argument_list|)
expr_stmt|;
block|}
comment|/**    * Factory method that    * 1. acquires a chunk for the specified map-task attempt    * 2. returns a DynamicInputChunk associated with the acquired chunk-file.    * @param taskAttemptContext The attempt-context for the map task that's    * trying to acquire a chunk.    * @return The acquired dynamic-chunk. The chunk-file is renamed to the    * attempt-id (from the attempt-context.)    * @throws IOException Exception on failure.    * @throws InterruptedException Exception on failure.    */
DECL|method|acquire (TaskAttemptContext taskAttemptContext)
specifier|public
specifier|static
name|DynamicInputChunk
name|acquire
parameter_list|(
name|TaskAttemptContext
name|taskAttemptContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|areInvariantsInitialized
argument_list|()
condition|)
name|initializeChunkInvariants
argument_list|(
name|taskAttemptContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|taskId
init|=
name|taskAttemptContext
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|acquiredFilePath
init|=
operator|new
name|Path
argument_list|(
name|chunkRootPath
argument_list|,
name|taskId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|acquiredFilePath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Acquiring pre-assigned chunk: "
operator|+
name|acquiredFilePath
argument_list|)
expr_stmt|;
return|return
operator|new
name|DynamicInputChunk
argument_list|(
name|acquiredFilePath
argument_list|,
name|taskAttemptContext
argument_list|)
return|;
block|}
for|for
control|(
name|FileStatus
name|chunkFile
range|:
name|getListOfChunkFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|fs
operator|.
name|rename
argument_list|(
name|chunkFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|acquiredFilePath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|taskId
operator|+
literal|" acquired "
operator|+
name|chunkFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|DynamicInputChunk
argument_list|(
name|acquiredFilePath
argument_list|,
name|taskAttemptContext
argument_list|)
return|;
block|}
else|else
name|LOG
operator|.
name|warn
argument_list|(
name|taskId
operator|+
literal|" could not acquire "
operator|+
name|chunkFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Method to be called to relinquish an acquired chunk. All streams open to    * the chunk are closed, and the chunk-file is deleted.    * @throws IOException Exception thrown on failure to release (i.e. delete)    * the chunk file.    */
DECL|method|release ()
specifier|public
name|void
name|release
parameter_list|()
throws|throws
name|IOException
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|chunkFilePath
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to release chunk at path: "
operator|+
name|chunkFilePath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to release chunk at path: "
operator|+
name|chunkFilePath
argument_list|)
throw|;
block|}
block|}
DECL|method|getListOfChunkFiles ()
specifier|static
name|FileStatus
index|[]
name|getListOfChunkFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|chunkFilePattern
init|=
operator|new
name|Path
argument_list|(
name|chunkRootPath
argument_list|,
name|chunkFilePrefix
operator|+
literal|"*"
argument_list|)
decl_stmt|;
name|FileStatus
name|chunkFiles
index|[]
init|=
name|fs
operator|.
name|globStatus
argument_list|(
name|chunkFilePattern
argument_list|)
decl_stmt|;
name|numChunksLeft
operator|=
name|chunkFiles
operator|.
name|length
expr_stmt|;
return|return
name|chunkFiles
return|;
block|}
comment|/**    * Getter for the chunk-file's path, on HDFS.    * @return The qualified path to the chunk-file.    */
DECL|method|getPath ()
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|chunkFilePath
return|;
block|}
comment|/**    * Getter for the record-reader, opened to the chunk-file.    * @return Opened Sequence-file reader.    */
DECL|method|getReader ()
specifier|public
name|SequenceFileRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getReader
parameter_list|()
block|{
assert|assert
name|reader
operator|!=
literal|null
operator|:
literal|"Reader un-initialized!"
assert|;
return|return
name|reader
return|;
block|}
comment|/**    * Getter for the number of chunk-files left in the chunk-file directory.    * Useful to determine how many chunks (and hence, records) are left to be    * processed.    * @return Before the first scan of the directory, the number returned is -1.    * Otherwise, the number of chunk-files seen from the last scan is returned.    */
DECL|method|getNumChunksLeft ()
specifier|public
specifier|static
name|int
name|getNumChunksLeft
parameter_list|()
block|{
return|return
name|numChunksLeft
return|;
block|}
block|}
end_class

end_unit

