begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_comment
comment|/**  * Information presenting a rename/delete op derived from a snapshot diff entry.  * This includes the source file/dir of the rename/delete op, and the target  * file/dir of a rename op.  */
end_comment

begin_class
DECL|class|DiffInfo
class|class
name|DiffInfo
block|{
DECL|field|sourceComparator
specifier|static
specifier|final
name|Comparator
argument_list|<
name|DiffInfo
argument_list|>
name|sourceComparator
init|=
operator|new
name|Comparator
argument_list|<
name|DiffInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DiffInfo
name|d1
parameter_list|,
name|DiffInfo
name|d2
parameter_list|)
block|{
return|return
name|d2
operator|.
name|source
operator|.
name|compareTo
argument_list|(
name|d1
operator|.
name|source
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|targetComparator
specifier|static
specifier|final
name|Comparator
argument_list|<
name|DiffInfo
argument_list|>
name|targetComparator
init|=
operator|new
name|Comparator
argument_list|<
name|DiffInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DiffInfo
name|d1
parameter_list|,
name|DiffInfo
name|d2
parameter_list|)
block|{
return|return
name|d1
operator|.
name|target
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
operator|(
name|d2
operator|.
name|target
operator|==
literal|null
condition|?
literal|1
else|:
name|d1
operator|.
name|target
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|target
argument_list|)
operator|)
return|;
block|}
block|}
decl_stmt|;
comment|/** The source file/dir of the rename or deletion op */
DECL|field|source
specifier|final
name|Path
name|source
decl_stmt|;
comment|/**    * The intermediate file/dir for the op. For a rename or a delete op,    * we first rename the source to this tmp file/dir.    */
DECL|field|tmp
specifier|private
name|Path
name|tmp
decl_stmt|;
comment|/** The target file/dir of the rename op. Null means the op is deletion. */
DECL|field|target
specifier|final
name|Path
name|target
decl_stmt|;
DECL|method|DiffInfo (Path source, Path target)
name|DiffInfo
parameter_list|(
name|Path
name|source
parameter_list|,
name|Path
name|target
parameter_list|)
block|{
assert|assert
name|source
operator|!=
literal|null
assert|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
DECL|method|setTmp (Path tmp)
name|void
name|setTmp
parameter_list|(
name|Path
name|tmp
parameter_list|)
block|{
name|this
operator|.
name|tmp
operator|=
name|tmp
expr_stmt|;
block|}
DECL|method|getTmp ()
name|Path
name|getTmp
parameter_list|()
block|{
return|return
name|tmp
return|;
block|}
DECL|method|getDiffs (SnapshotDiffReport report, Path targetDir)
specifier|static
name|DiffInfo
index|[]
name|getDiffs
parameter_list|(
name|SnapshotDiffReport
name|report
parameter_list|,
name|Path
name|targetDir
parameter_list|)
block|{
name|List
argument_list|<
name|DiffInfo
argument_list|>
name|diffs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
name|entry
range|:
name|report
operator|.
name|getDiffList
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|DELETE
condition|)
block|{
specifier|final
name|Path
name|source
init|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|diffs
operator|.
name|add
argument_list|(
operator|new
name|DiffInfo
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|RENAME
condition|)
block|{
specifier|final
name|Path
name|source
init|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|entry
operator|.
name|getTargetPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|diffs
operator|.
name|add
argument_list|(
operator|new
name|DiffInfo
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|diffs
operator|.
name|toArray
argument_list|(
operator|new
name|DiffInfo
index|[
name|diffs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

