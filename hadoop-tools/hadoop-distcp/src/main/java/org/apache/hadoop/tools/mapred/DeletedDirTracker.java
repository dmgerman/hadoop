begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|CopyListingFileStatus
import|;
end_import

begin_comment
comment|/**  * Track deleted directories and support queries to  * check for add them.  *  * Assumptions.  *<ol>  *<liA sorted list of deletions are processed, where directories come  *   before their children/descendants.</li>  *<li>Deep directory trees are being deleted.</li>  *<li>The total number of directories deleted is very much  *   less than the number of files.</li>  *<li>Most deleted files are in directories which have  *   been deleted.</li>  *<li>The cost of issuing a delete() call is less than that that  *   of creating Path entries for parent directories and looking them  *   up in a hash table.</li>  *<li>That a modest cache is sufficient to identify whether or not  *   a parent directory has been deleted./li>  *<li>And that if a path has been evicted from a path, the cost of  *   the extra deletions incurred is not significant.</li>  *</ol>  *  * The directory structure this algorithm is intended to optimize for is  * the deletion of datasets partitioned/bucketed into a directory tree,  * and deleted in bulk.  *  * The ordering of deletions comes from the merge sort of the copy listings;  * we rely on this placing a path "/dir1" ahead of "/dir1/file1",  * "/dir1/dir2/file2", and other descendants.  * We do not rely on parent entries being added immediately before children,  * as sorting may place "/dir12" between "/dir1" and its descendants.  *  * Algorithm  *  *<ol>  *<li>  *     Before deleting a directory or file, a check is made to see if an  *     ancestor is in the cache of deleted directories.  *</li>  *<li>  *     If an ancestor is found is: skip the delete.  *</li>  *<li>  *     If an ancestor is not foundI: delete the file/dir.  *</li>  *<li>  *     When the entry probed is a directory, it is always added to the cache of  *     directories, irrespective of the search for an ancestor.  *     This is to speed up scans of files directly underneath the path.  *</li>  *</ol>  *  *  */
end_comment

begin_class
DECL|class|DeletedDirTracker
specifier|final
class|class
name|DeletedDirTracker
block|{
comment|/**    * An LRU cache of directories.    */
DECL|field|directories
specifier|private
specifier|final
name|Cache
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|directories
decl_stmt|;
comment|/**    * Maximum size of the cache.    */
DECL|field|cacheSize
specifier|private
specifier|final
name|int
name|cacheSize
decl_stmt|;
comment|/**    * Create an instance.    * @param cacheSize maximum cache size.    */
DECL|method|DeletedDirTracker (int cacheSize)
name|DeletedDirTracker
parameter_list|(
name|int
name|cacheSize
parameter_list|)
block|{
name|this
operator|.
name|cacheSize
operator|=
name|cacheSize
expr_stmt|;
name|directories
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|this
operator|.
name|cacheSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**    * Recursive scan for a directory being in the cache of deleted paths.    * @param dir directory to look for.    * @return true iff the path or a parent is in the cache.    */
DECL|method|isDirectoryOrAncestorDeleted (Path dir)
name|boolean
name|isDirectoryOrAncestorDeleted
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
comment|// at root
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|isContained
argument_list|(
name|dir
argument_list|)
condition|)
block|{
comment|// cache hit
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// cache miss, check parent
return|return
name|isDirectoryOrAncestorDeleted
argument_list|(
name|dir
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Probe for a path being deleted by virtue of the fact that an    * ancestor dir has already been deleted.    * @param path path to check    * @return true if the parent dir is deleted.    */
DECL|method|isInDeletedDirectory (Path path)
specifier|private
name|boolean
name|isInDeletedDirectory
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|path
operator|.
name|isRoot
argument_list|()
argument_list|,
literal|"Root Dir"
argument_list|)
expr_stmt|;
return|return
name|isDirectoryOrAncestorDeleted
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Should a file or directory be deleted?    * The cache of deleted directories will be updated with the path    * of the status if it references a directory.    * @param status file/path to check    * @return true if the path should be deleted.    */
DECL|method|shouldDelete (CopyListingFileStatus status)
name|boolean
name|shouldDelete
parameter_list|(
name|CopyListingFileStatus
name|status
parameter_list|)
block|{
name|Path
name|path
init|=
name|status
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|path
operator|.
name|isRoot
argument_list|()
argument_list|,
literal|"Root Dir"
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|boolean
name|deleted
init|=
name|isDirectoryOrAncestorDeleted
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// even if an ancestor has been deleted, add this entry as
comment|// a deleted directory.
name|directories
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
operator|!
name|deleted
return|;
block|}
else|else
block|{
return|return
operator|!
name|isInDeletedDirectory
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
comment|/**    * Is a path directly contained in the set of deleted directories.    * @param dir directory to probe    * @return true if this directory is recorded as being deleted.    */
DECL|method|isContained (Path dir)
name|boolean
name|isContained
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
return|return
name|directories
operator|.
name|getIfPresent
argument_list|(
name|dir
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"DeletedDirTracker{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"maximum size="
argument_list|)
operator|.
name|append
argument_list|(
name|cacheSize
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"; current size="
argument_list|)
operator|.
name|append
argument_list|(
name|directories
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Return the current size of the tracker, as in #of entries in the cache.    * @return tracker size.    */
DECL|method|size ()
name|long
name|size
parameter_list|()
block|{
return|return
name|directories
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

