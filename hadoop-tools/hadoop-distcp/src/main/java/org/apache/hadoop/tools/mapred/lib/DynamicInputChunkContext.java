begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.mapred.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|mapred
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Class to initialize the DynamicInputChunk invariants.  */
end_comment

begin_class
DECL|class|DynamicInputChunkContext
class|class
name|DynamicInputChunkContext
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DynamicInputChunkContext
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
DECL|field|chunkRootPath
specifier|private
name|Path
name|chunkRootPath
init|=
literal|null
decl_stmt|;
DECL|field|chunkFilePrefix
specifier|private
name|String
name|chunkFilePrefix
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|numChunksLeft
specifier|private
name|int
name|numChunksLeft
init|=
operator|-
literal|1
decl_stmt|;
comment|// Un-initialized before 1st dir-scan.
DECL|method|DynamicInputChunkContext (Configuration config)
specifier|public
name|DynamicInputChunkContext
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|configuration
operator|=
name|config
expr_stmt|;
name|Path
name|listingFilePath
init|=
operator|new
name|Path
argument_list|(
name|getListingFilePath
argument_list|(
name|configuration
argument_list|)
argument_list|)
decl_stmt|;
name|chunkRootPath
operator|=
operator|new
name|Path
argument_list|(
name|listingFilePath
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"chunkDir"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|chunkRootPath
operator|.
name|getFileSystem
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|chunkFilePrefix
operator|=
name|listingFilePath
operator|.
name|getName
argument_list|()
operator|+
literal|".chunk."
expr_stmt|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|getChunkRootPath ()
specifier|public
name|Path
name|getChunkRootPath
parameter_list|()
block|{
return|return
name|chunkRootPath
return|;
block|}
DECL|method|getChunkFilePrefix ()
specifier|public
name|String
name|getChunkFilePrefix
parameter_list|()
block|{
return|return
name|chunkFilePrefix
return|;
block|}
DECL|method|getFs ()
specifier|public
name|FileSystem
name|getFs
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
DECL|method|getListingFilePath (Configuration configuration)
specifier|private
specifier|static
name|String
name|getListingFilePath
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
specifier|final
name|String
name|listingFileString
init|=
name|configuration
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_LISTING_FILE_PATH
argument_list|,
literal|""
argument_list|)
decl_stmt|;
assert|assert
operator|!
name|listingFileString
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|:
literal|"Listing file not found."
assert|;
return|return
name|listingFileString
return|;
block|}
DECL|method|getNumChunksLeft ()
specifier|public
name|int
name|getNumChunksLeft
parameter_list|()
block|{
return|return
name|numChunksLeft
return|;
block|}
DECL|method|acquire (TaskAttemptContext taskAttemptContext)
specifier|public
name|DynamicInputChunk
name|acquire
parameter_list|(
name|TaskAttemptContext
name|taskAttemptContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|taskId
init|=
name|taskAttemptContext
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|acquiredFilePath
init|=
operator|new
name|Path
argument_list|(
name|getChunkRootPath
argument_list|()
argument_list|,
name|taskId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|acquiredFilePath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Acquiring pre-assigned chunk: "
operator|+
name|acquiredFilePath
argument_list|)
expr_stmt|;
return|return
operator|new
name|DynamicInputChunk
argument_list|(
name|acquiredFilePath
argument_list|,
name|taskAttemptContext
argument_list|,
name|this
argument_list|)
return|;
block|}
for|for
control|(
name|FileStatus
name|chunkFile
range|:
name|getListOfChunkFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|fs
operator|.
name|rename
argument_list|(
name|chunkFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|acquiredFilePath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|taskId
operator|+
literal|" acquired "
operator|+
name|chunkFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|DynamicInputChunk
argument_list|(
name|acquiredFilePath
argument_list|,
name|taskAttemptContext
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|createChunkForWrite (String chunkId)
specifier|public
name|DynamicInputChunk
name|createChunkForWrite
parameter_list|(
name|String
name|chunkId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DynamicInputChunk
argument_list|(
name|chunkId
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|getListOfChunkFiles ()
specifier|public
name|FileStatus
index|[]
name|getListOfChunkFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|chunkFilePattern
init|=
operator|new
name|Path
argument_list|(
name|chunkRootPath
argument_list|,
name|chunkFilePrefix
operator|+
literal|"*"
argument_list|)
decl_stmt|;
name|FileStatus
name|chunkFiles
index|[]
init|=
name|fs
operator|.
name|globStatus
argument_list|(
name|chunkFilePattern
argument_list|)
decl_stmt|;
name|numChunksLeft
operator|=
name|chunkFiles
operator|.
name|length
expr_stmt|;
return|return
name|chunkFiles
return|;
block|}
block|}
end_class

end_unit

