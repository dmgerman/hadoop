begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A CopyFilter which compares Java Regex Patterns to each Path to determine  * whether a file should be copied.  */
end_comment

begin_class
DECL|class|RegexCopyFilter
specifier|public
class|class
name|RegexCopyFilter
extends|extends
name|CopyFilter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegexCopyFilter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|filtersFile
specifier|private
name|File
name|filtersFile
decl_stmt|;
DECL|field|filters
specifier|private
name|List
argument_list|<
name|Pattern
argument_list|>
name|filters
decl_stmt|;
comment|/**    * Constructor, sets up a File object to read filter patterns from and    * the List to store the patterns.    */
DECL|method|RegexCopyFilter (String filtersFilename)
specifier|protected
name|RegexCopyFilter
parameter_list|(
name|String
name|filtersFilename
parameter_list|)
block|{
name|filtersFile
operator|=
operator|new
name|File
argument_list|(
name|filtersFilename
argument_list|)
expr_stmt|;
name|filters
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Loads a list of filter patterns for use in shouldCopy.    */
annotation|@
name|Override
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|filtersFile
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|notFound
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't find filters file "
operator|+
name|filtersFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|cantRead
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"An error occurred while attempting to read from "
operator|+
name|filtersFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the list of filters to exclude files from copy.    * Simplifies testing of the filters feature.    *    * @param filtersList a list of Patterns to be excluded    */
annotation|@
name|VisibleForTesting
DECL|method|setFilters (List<Pattern> filtersList)
specifier|protected
specifier|final
name|void
name|setFilters
parameter_list|(
name|List
argument_list|<
name|Pattern
argument_list|>
name|filtersList
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|filtersList
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shouldCopy (Path path)
specifier|public
name|boolean
name|shouldCopy
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
for|for
control|(
name|Pattern
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|matcher
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

