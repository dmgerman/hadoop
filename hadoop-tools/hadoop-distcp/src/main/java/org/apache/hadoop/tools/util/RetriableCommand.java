begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
operator|.
name|RetryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ThreadUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * This class represents commands that be retried on failure, in a configurable  * manner.  */
end_comment

begin_class
DECL|class|RetriableCommand
specifier|public
specifier|abstract
class|class
name|RetriableCommand
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RetriableCommand
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DELAY_MILLISECONDS
specifier|private
specifier|static
specifier|final
name|long
name|DELAY_MILLISECONDS
init|=
literal|500
decl_stmt|;
DECL|field|MAX_RETRIES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RETRIES
init|=
literal|3
decl_stmt|;
DECL|field|retryPolicy
specifier|private
name|RetryPolicy
name|retryPolicy
init|=
name|RetryPolicies
operator|.
name|exponentialBackoffRetry
argument_list|(
name|MAX_RETRIES
argument_list|,
name|DELAY_MILLISECONDS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
DECL|field|description
specifier|protected
name|String
name|description
decl_stmt|;
comment|/**    * Constructor.    * @param description The human-readable description of the command.    */
DECL|method|RetriableCommand (String description)
specifier|public
name|RetriableCommand
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
comment|/**    * Constructor.    * @param description The human-readable description of the command.    * @param retryPolicy The RetryHandler to be used to compute retries.    */
DECL|method|RetriableCommand (String description, RetryPolicy retryPolicy)
specifier|public
name|RetriableCommand
parameter_list|(
name|String
name|description
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|)
block|{
name|this
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|setRetryPolicy
argument_list|(
name|retryPolicy
argument_list|)
expr_stmt|;
block|}
comment|/**    * Implement this interface-method define the command-logic that will be    * retried on failure (i.e. with Exception).    * @param arguments Argument-list to the command.    * @return Generic "Object".    * @throws Exception Throws Exception on complete failure.    */
DECL|method|doExecute (Object... arguments)
specifier|protected
specifier|abstract
name|Object
name|doExecute
parameter_list|(
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * The execute() method invokes doExecute() until either:    *  1. doExecute() succeeds, or    *  2. the command may no longer be retried (e.g. runs out of retry-attempts).    * @param arguments The list of arguments for the command.    * @return Generic "Object" from doExecute(), on success.    * @throws IOException, IOException, on complete failure.    */
DECL|method|execute (Object... arguments)
specifier|public
name|Object
name|execute
parameter_list|(
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
name|Exception
name|latestException
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
name|doExecute
argument_list|(
name|arguments
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failure in Retriable command: "
operator|+
name|description
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|latestException
operator|=
name|exception
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
name|RetryAction
name|action
init|=
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|latestException
argument_list|,
name|counter
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|action
operator|==
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|RETRY
condition|)
block|{
name|ThreadUtil
operator|.
name|sleepAtLeastIgnoreInterrupts
argument_list|(
name|action
operator|.
name|delayMillis
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't run retriable-command: "
operator|+
name|description
argument_list|,
name|latestException
argument_list|)
throw|;
block|}
comment|/**    * Fluent-interface to change the RetryHandler.    * @param retryHandler The new RetryHandler instance to be used.    * @return Self.    */
DECL|method|setRetryPolicy (RetryPolicy retryHandler)
specifier|public
name|RetriableCommand
name|setRetryPolicy
parameter_list|(
name|RetryPolicy
name|retryHandler
parameter_list|)
block|{
name|this
operator|.
name|retryPolicy
operator|=
name|retryHandler
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

