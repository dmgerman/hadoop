begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobSubmissionFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|mapred
operator|.
name|CopyOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Ignore
DECL|class|TestDistCp
specifier|public
class|class
name|TestDistCp
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDistCp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|pathList
specifier|private
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|pathList
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|FILE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|FILE_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|static
name|Configuration
name|configuration
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|mrCluster
specifier|private
specifier|static
name|MiniMRCluster
name|mrCluster
decl_stmt|;
DECL|field|SOURCE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|SOURCE_PATH
init|=
literal|"/tmp/source"
decl_stmt|;
DECL|field|TARGET_PATH
specifier|private
specifier|static
specifier|final
name|String
name|TARGET_PATH
init|=
literal|"/tmp/target"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|=
name|getConfigurationForCluster
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|configuration
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.hadoop.mapred.TaskTracker"
argument_list|,
literal|"target/tmp"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"org.apache.hadoop.mapred.TaskTracker"
argument_list|,
literal|"target/tmp"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
literal|"target/tmp"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
literal|"target/tmp"
argument_list|)
expr_stmt|;
name|mrCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Configuration
name|mrConf
init|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
specifier|final
name|String
name|mrJobTracker
init|=
name|mrConf
operator|.
name|get
argument_list|(
literal|"mapred.job.tracker"
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
name|mrJobTracker
argument_list|)
expr_stmt|;
specifier|final
name|String
name|mrJobTrackerAddress
init|=
name|mrConf
operator|.
name|get
argument_list|(
literal|"mapred.job.tracker.http.address"
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker.http.address"
argument_list|,
name|mrJobTrackerAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|getConfigurationForCluster ()
specifier|private
specifier|static
name|Configuration
name|getConfigurationForCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target/build/TEST_DISTCP/data"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
literal|"target/tmp"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"fs.default.name  == "
operator|+
name|configuration
operator|.
name|get
argument_list|(
literal|"fs.default.name"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"dfs.http.address == "
operator|+
name|configuration
operator|.
name|get
argument_list|(
literal|"dfs.http.address"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|configuration
return|;
block|}
DECL|method|createSourceData ()
specifier|private
specifier|static
name|void
name|createSourceData
parameter_list|()
throws|throws
name|Exception
block|{
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/1"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/2"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/2/3/4"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/2/3"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/5"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/5/6"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/7"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/7/8"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/7/8/9"
argument_list|)
expr_stmt|;
block|}
DECL|method|mkdirs (String path)
specifier|private
specifier|static
name|void
name|mkdirs
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fileSystem
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|qualifiedPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fileSystem
operator|.
name|getUri
argument_list|()
argument_list|,
name|fileSystem
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|pathList
operator|.
name|add
argument_list|(
name|qualifiedPath
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|qualifiedPath
argument_list|)
expr_stmt|;
block|}
DECL|method|touchFile (String path)
specifier|private
specifier|static
name|void
name|touchFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
decl_stmt|;
name|DataOutputStream
name|outputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|qualifiedPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|*
literal|2
decl_stmt|;
name|outputStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|qualifiedPath
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
call|(
name|short
call|)
argument_list|(
name|fs
operator|.
name|getDefaultReplication
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|*
literal|2
argument_list|)
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
argument_list|)
expr_stmt|;
name|pathList
operator|.
name|add
argument_list|(
name|qualifiedPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|clearState ()
specifier|private
specifier|static
name|void
name|clearState
parameter_list|()
throws|throws
name|Exception
block|{
name|pathList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TARGET_PATH
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
block|}
comment|//  @Test
DECL|method|testUniformSizeDistCp ()
specifier|public
name|void
name|testUniformSizeDistCp
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|clearState
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|fileSystem
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fileSystem
operator|.
name|getUri
argument_list|()
argument_list|,
name|fileSystem
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|sources
operator|.
name|add
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|TARGET_PATH
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fileSystem
operator|.
name|getUri
argument_list|()
argument_list|,
name|fileSystem
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
argument_list|(
name|sources
argument_list|,
name|targetPath
argument_list|)
decl_stmt|;
name|options
operator|.
name|setAtomicCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBlocking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|DistCp
argument_list|(
name|configuration
argument_list|,
name|options
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Path
name|workDir
init|=
name|CopyOutputFormat
operator|.
name|getWorkingDirectory
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
name|finalDir
init|=
name|CopyOutputFormat
operator|.
name|getCommitDirectory
argument_list|(
name|job
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
if|if
condition|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|workDir
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|finalDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_META_FOLDER
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//  @Test
DECL|method|testCleanup ()
specifier|public
name|void
name|testCleanup
parameter_list|()
block|{
try|try
block|{
name|clearState
argument_list|()
expr_stmt|;
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
literal|"noscheme:///file"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|sources
operator|.
name|add
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|TARGET_PATH
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
argument_list|(
name|sources
argument_list|,
name|targetPath
argument_list|)
decl_stmt|;
name|Path
name|stagingDir
init|=
name|JobSubmissionFiles
operator|.
name|getStagingDir
argument_list|(
operator|new
name|Cluster
argument_list|(
name|configuration
argument_list|)
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|stagingDir
operator|.
name|getFileSystem
argument_list|(
name|configuration
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|stagingDir
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|DistCp
argument_list|(
name|configuration
argument_list|,
name|options
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stagingDir
operator|.
name|getFileSystem
argument_list|(
name|configuration
argument_list|)
operator|.
name|listStatus
argument_list|(
name|stagingDir
argument_list|)
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCleanup failed "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRootPath ()
specifier|public
name|void
name|testRootPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|clearState
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|sources
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sources
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/b"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
literal|"/a/a.txt"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
literal|"/b/b.txt"
argument_list|)
expr_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
argument_list|(
name|sources
argument_list|,
name|targetPath
argument_list|)
decl_stmt|;
operator|new
name|DistCp
argument_list|(
name|configuration
argument_list|,
name|options
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/c/a/a.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/c/b/b.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDynamicDistCp ()
specifier|public
name|void
name|testDynamicDistCp
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|clearState
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|sources
operator|.
name|add
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|TARGET_PATH
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
argument_list|(
name|sources
argument_list|,
name|targetPath
argument_list|)
decl_stmt|;
name|options
operator|.
name|setCopyStrategy
argument_list|(
literal|"dynamic"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAtomicCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAtomicWorkPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/work"
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBlocking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|DistCp
argument_list|(
name|configuration
argument_list|,
name|options
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Path
name|workDir
init|=
name|CopyOutputFormat
operator|.
name|getWorkingDirectory
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
name|finalDir
init|=
name|CopyOutputFormat
operator|.
name|getCommitDirectory
argument_list|(
name|job
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|workDir
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|finalDir
argument_list|)
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyResults ()
specifier|private
specifier|static
name|void
name|verifyResults
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|sourcePath
init|=
name|path
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|sourcePath
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|SOURCE_PATH
argument_list|,
name|TARGET_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|isFile
argument_list|(
name|sourcePath
argument_list|)
argument_list|,
name|fs
operator|.
name|isFile
argument_list|(
name|targetPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

