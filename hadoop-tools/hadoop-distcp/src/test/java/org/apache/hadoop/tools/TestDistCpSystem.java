begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|getMethodName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_comment
comment|/**  * A JUnit test for copying files recursively.  */
end_comment

begin_class
DECL|class|TestDistCpSystem
specifier|public
class|class
name|TestDistCpSystem
block|{
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
DECL|field|SRCDAT
specifier|private
specifier|static
specifier|final
name|String
name|SRCDAT
init|=
literal|"srcdat"
decl_stmt|;
DECL|field|DSTDAT
specifier|private
specifier|static
specifier|final
name|String
name|DSTDAT
init|=
literal|"dstdat"
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|class|FileEntry
specifier|private
class|class
name|FileEntry
block|{
DECL|field|path
name|String
name|path
decl_stmt|;
DECL|field|isDir
name|boolean
name|isDir
decl_stmt|;
DECL|method|FileEntry (String path, boolean isDir)
specifier|public
name|FileEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|isDir
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|isDir
operator|=
name|isDir
expr_stmt|;
block|}
DECL|method|getPath ()
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|isDirectory ()
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
name|isDir
return|;
block|}
block|}
DECL|method|createFiles (FileSystem fs, String topdir, FileEntry[] entries)
specifier|private
name|void
name|createFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|FileEntry
index|[]
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|FileEntry
name|entry
range|:
name|entries
control|)
block|{
name|Path
name|newpath
init|=
operator|new
name|Path
argument_list|(
name|topdir
operator|+
literal|"/"
operator|+
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|newpath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|newpath
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
name|topdir
operator|+
literal|"/"
operator|+
name|entry
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getFileStatus (FileSystem fs, String topdir, FileEntry[] files)
specifier|private
specifier|static
name|FileStatus
index|[]
name|getFileStatus
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|FileEntry
index|[]
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|files
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|Path
name|newpath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|files
index|[
name|idx
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|statuses
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|newpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|statuses
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|statuses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** delete directory and everything underneath it.*/
DECL|method|deldir (FileSystem fs, String topdir)
specifier|private
specifier|static
name|void
name|deldir
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testPreserveUserHelper (String testRoot, FileEntry[] srcEntries, FileEntry[] dstEntries, boolean createSrcDir, boolean createTgtDir, boolean update)
specifier|private
name|void
name|testPreserveUserHelper
parameter_list|(
name|String
name|testRoot
parameter_list|,
name|FileEntry
index|[]
name|srcEntries
parameter_list|,
name|FileEntry
index|[]
name|dstEntries
parameter_list|,
name|boolean
name|createSrcDir
parameter_list|,
name|boolean
name|createTgtDir
parameter_list|,
name|boolean
name|update
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testSrcRel
init|=
name|SRCDAT
decl_stmt|;
specifier|final
name|String
name|testSrc
init|=
name|testRoot
operator|+
literal|"/"
operator|+
name|testSrcRel
decl_stmt|;
specifier|final
name|String
name|testDstRel
init|=
name|DSTDAT
decl_stmt|;
specifier|final
name|String
name|testDst
init|=
name|testRoot
operator|+
literal|"/"
operator|+
name|testDstRel
decl_stmt|;
name|String
name|nnUri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|nnUri
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|createSrcDir
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|testSrc
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|createTgtDir
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|testDst
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|createFiles
argument_list|(
name|fs
argument_list|,
name|testRoot
argument_list|,
name|srcEntries
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|srcstats
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
name|testRoot
argument_list|,
name|srcEntries
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcEntries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|srcstats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"u"
operator|+
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|args
init|=
name|update
condition|?
operator|new
name|String
index|[]
block|{
literal|"-pu"
block|,
literal|"-update"
block|,
name|nnUri
operator|+
name|testSrc
block|,
name|nnUri
operator|+
name|testDst
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"-pu"
block|,
name|nnUri
operator|+
name|testSrc
block|,
name|nnUri
operator|+
name|testDst
block|}
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|DistCp
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|String
name|realTgtPath
init|=
name|testDst
decl_stmt|;
if|if
condition|(
operator|!
name|createTgtDir
condition|)
block|{
name|realTgtPath
operator|=
name|testRoot
expr_stmt|;
block|}
name|FileStatus
index|[]
name|dststat
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
name|realTgtPath
argument_list|,
name|dstEntries
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dststat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
literal|"u"
operator|+
name|i
argument_list|,
name|dststat
index|[
name|i
index|]
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deldir
argument_list|(
name|fs
argument_list|,
name|testRoot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass ()
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass ()
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPreserveUseNonEmptyDir ()
specifier|public
name|void
name|testPreserveUseNonEmptyDir
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testRoot
init|=
literal|"/testdir."
operator|+
name|getMethodName
argument_list|()
decl_stmt|;
name|FileEntry
index|[]
name|srcfiles
init|=
block|{
operator|new
name|FileEntry
argument_list|(
name|SRCDAT
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|FileEntry
argument_list|(
name|SRCDAT
operator|+
literal|"/a"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|FileEntry
argument_list|(
name|SRCDAT
operator|+
literal|"/b"
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|FileEntry
argument_list|(
name|SRCDAT
operator|+
literal|"/b/c"
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|FileEntry
index|[]
name|dstfiles
init|=
block|{
operator|new
name|FileEntry
argument_list|(
name|DSTDAT
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|FileEntry
argument_list|(
name|DSTDAT
operator|+
literal|"/a"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|FileEntry
argument_list|(
name|DSTDAT
operator|+
literal|"/b"
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|FileEntry
argument_list|(
name|DSTDAT
operator|+
literal|"/b/c"
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|testPreserveUserHelper
argument_list|(
name|testRoot
argument_list|,
name|srcfiles
argument_list|,
name|srcfiles
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPreserveUserHelper
argument_list|(
name|testRoot
argument_list|,
name|srcfiles
argument_list|,
name|dstfiles
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreserveUserEmptyDir ()
specifier|public
name|void
name|testPreserveUserEmptyDir
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testRoot
init|=
literal|"/testdir."
operator|+
name|getMethodName
argument_list|()
decl_stmt|;
name|FileEntry
index|[]
name|srcfiles
init|=
block|{
operator|new
name|FileEntry
argument_list|(
name|SRCDAT
argument_list|,
literal|true
argument_list|)
block|}
decl_stmt|;
name|FileEntry
index|[]
name|dstfiles
init|=
block|{
operator|new
name|FileEntry
argument_list|(
name|DSTDAT
argument_list|,
literal|true
argument_list|)
block|}
decl_stmt|;
name|testPreserveUserHelper
argument_list|(
name|testRoot
argument_list|,
name|srcfiles
argument_list|,
name|srcfiles
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPreserveUserHelper
argument_list|(
name|testRoot
argument_list|,
name|srcfiles
argument_list|,
name|dstfiles
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreserveUserSingleFile ()
specifier|public
name|void
name|testPreserveUserSingleFile
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testRoot
init|=
literal|"/testdir."
operator|+
name|getMethodName
argument_list|()
decl_stmt|;
name|FileEntry
index|[]
name|srcfiles
init|=
block|{
operator|new
name|FileEntry
argument_list|(
name|SRCDAT
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|FileEntry
index|[]
name|dstfiles
init|=
block|{
operator|new
name|FileEntry
argument_list|(
name|DSTDAT
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|testPreserveUserHelper
argument_list|(
name|testRoot
argument_list|,
name|srcfiles
argument_list|,
name|srcfiles
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPreserveUserHelper
argument_list|(
name|testRoot
argument_list|,
name|srcfiles
argument_list|,
name|dstfiles
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreserveUserNonEmptyDirWithUpdate ()
specifier|public
name|void
name|testPreserveUserNonEmptyDirWithUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testRoot
init|=
literal|"/testdir."
operator|+
name|getMethodName
argument_list|()
decl_stmt|;
name|FileEntry
index|[]
name|srcfiles
init|=
block|{
operator|new
name|FileEntry
argument_list|(
name|SRCDAT
operator|+
literal|"/a"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|FileEntry
argument_list|(
name|SRCDAT
operator|+
literal|"/b"
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|FileEntry
argument_list|(
name|SRCDAT
operator|+
literal|"/b/c"
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|FileEntry
index|[]
name|dstfiles
init|=
block|{
operator|new
name|FileEntry
argument_list|(
literal|"a"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|FileEntry
argument_list|(
literal|"b"
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|FileEntry
argument_list|(
literal|"b/c"
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|testPreserveUserHelper
argument_list|(
name|testRoot
argument_list|,
name|srcfiles
argument_list|,
name|dstfiles
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSourceRoot ()
specifier|public
name|void
name|testSourceRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|rootStr
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|testRoot
init|=
literal|"/testdir."
operator|+
name|getMethodName
argument_list|()
decl_stmt|;
comment|// Case 1. The target does not exist.
name|Path
name|tgtPath
init|=
operator|new
name|Path
argument_list|(
name|testRoot
operator|+
literal|"/nodir"
argument_list|)
decl_stmt|;
name|String
name|tgtStr
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|tgtPath
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|rootStr
block|,
name|tgtStr
block|}
decl_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|DistCp
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 2. The target exists.
name|Path
name|tgtPath2
init|=
operator|new
name|Path
argument_list|(
name|testRoot
operator|+
literal|"/dir"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|tgtPath2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|tgtStr2
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|tgtPath2
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|args2
init|=
operator|new
name|String
index|[]
block|{
name|rootStr
block|,
name|tgtStr2
block|}
decl_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|DistCp
argument_list|()
argument_list|,
name|args2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

