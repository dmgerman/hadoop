begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|DistCpTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Tests distcp in combination with HDFS raw.* XAttrs.  */
end_comment

begin_class
DECL|class|TestDistCpWithRawXAttrs
specifier|public
class|class
name|TestDistCpWithRawXAttrs
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|rawName1
specifier|private
specifier|static
specifier|final
name|String
name|rawName1
init|=
literal|"raw.a1"
decl_stmt|;
DECL|field|rawValue1
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|rawValue1
init|=
block|{
literal|0x37
block|,
literal|0x38
block|,
literal|0x39
block|}
decl_stmt|;
DECL|field|userName1
specifier|private
specifier|static
specifier|final
name|String
name|userName1
init|=
literal|"user.a1"
decl_stmt|;
DECL|field|userValue1
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|userValue1
init|=
block|{
literal|0x38
block|,
literal|0x38
block|,
literal|0x38
block|}
decl_stmt|;
DECL|field|dir1
specifier|private
specifier|static
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
literal|"/src/dir1"
argument_list|)
decl_stmt|;
DECL|field|subDir1
specifier|private
specifier|static
specifier|final
name|Path
name|subDir1
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"subdir1"
argument_list|)
decl_stmt|;
DECL|field|file1
specifier|private
specifier|static
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/src/file1"
argument_list|)
decl_stmt|;
DECL|field|rawRootName
specifier|private
specifier|static
specifier|final
name|String
name|rawRootName
init|=
literal|"/.reserved/raw"
decl_stmt|;
DECL|field|rootedDestName
specifier|private
specifier|static
specifier|final
name|String
name|rootedDestName
init|=
literal|"/dest"
decl_stmt|;
DECL|field|rootedSrcName
specifier|private
specifier|static
specifier|final
name|String
name|rootedSrcName
init|=
literal|"/src"
decl_stmt|;
DECL|field|rawDestName
specifier|private
specifier|static
specifier|final
name|String
name|rawDestName
init|=
literal|"/.reserved/raw/dest"
decl_stmt|;
DECL|field|rawSrcName
specifier|private
specifier|static
specifier|final
name|String
name|rawSrcName
init|=
literal|"/.reserved/raw/src"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_XATTRS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Test that XAttrs and raw.* XAttrs are preserved when appropriate. */
annotation|@
name|Test
DECL|method|testPreserveRawXAttrs1 ()
specifier|public
name|void
name|testPreserveRawXAttrs1
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|relSrc
init|=
literal|"/./.reserved/../.reserved/raw/../raw/src/../src"
decl_stmt|;
specifier|final
name|String
name|relDst
init|=
literal|"/./.reserved/../.reserved/raw/../raw/dest/../dest"
decl_stmt|;
name|doTestPreserveRawXAttrs
argument_list|(
name|relSrc
argument_list|,
name|relDst
argument_list|,
literal|"-px"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|DistCpConstants
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|doTestStandardPreserveRawXAttrs
argument_list|(
literal|"-px"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|savedWd
init|=
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/.reserved/raw"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestPreserveRawXAttrs
argument_list|(
literal|"../.."
operator|+
name|rawSrcName
argument_list|,
literal|"../.."
operator|+
name|rawDestName
argument_list|,
literal|"-px"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|DistCpConstants
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|savedWd
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Test that XAttrs are not preserved and raw.* are when appropriate. */
annotation|@
name|Test
DECL|method|testPreserveRawXAttrs2 ()
specifier|public
name|void
name|testPreserveRawXAttrs2
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestStandardPreserveRawXAttrs
argument_list|(
literal|"-p"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/* Test that XAttrs are not preserved and raw.* are when appropriate. */
annotation|@
name|Test
DECL|method|testPreserveRawXAttrs3 ()
specifier|public
name|void
name|testPreserveRawXAttrs3
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestStandardPreserveRawXAttrs
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreserveRawXAttrs4 ()
specifier|public
name|void
name|testPreserveRawXAttrs4
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestStandardPreserveRawXAttrs
argument_list|(
literal|"-update -delete"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|field|pathnames
specifier|private
specifier|static
name|Path
index|[]
name|pathnames
init|=
block|{
operator|new
name|Path
argument_list|(
literal|"dir1"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"dir1/subdir1"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"file1"
argument_list|)
block|}
decl_stmt|;
DECL|method|makeFilesAndDirs (FileSystem fs)
specifier|private
specifier|static
name|void
name|makeFilesAndDirs
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dest"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|subDir1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|file1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|initXAttrs ()
specifier|private
name|void
name|initXAttrs
parameter_list|()
throws|throws
name|Exception
block|{
name|makeFilesAndDirs
argument_list|(
name|fs
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|pathnames
control|)
block|{
name|fs
operator|.
name|setXAttr
argument_list|(
operator|new
name|Path
argument_list|(
name|rawRootName
operator|+
literal|"/src"
argument_list|,
name|p
argument_list|)
argument_list|,
name|rawName1
argument_list|,
name|rawValue1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
operator|new
name|Path
argument_list|(
name|rawRootName
operator|+
literal|"/src"
argument_list|,
name|p
argument_list|)
argument_list|,
name|userName1
argument_list|,
name|userValue1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestStandardPreserveRawXAttrs (String options, boolean expectUser)
specifier|private
name|void
name|doTestStandardPreserveRawXAttrs
parameter_list|(
name|String
name|options
parameter_list|,
name|boolean
name|expectUser
parameter_list|)
throws|throws
name|Exception
block|{
name|doTestPreserveRawXAttrs
argument_list|(
name|rootedSrcName
argument_list|,
name|rootedDestName
argument_list|,
name|options
argument_list|,
literal|false
argument_list|,
name|expectUser
argument_list|,
name|DistCpConstants
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|doTestPreserveRawXAttrs
argument_list|(
name|rootedSrcName
argument_list|,
name|rawDestName
argument_list|,
name|options
argument_list|,
literal|false
argument_list|,
name|expectUser
argument_list|,
name|DistCpConstants
operator|.
name|INVALID_ARGUMENT
argument_list|)
expr_stmt|;
name|doTestPreserveRawXAttrs
argument_list|(
name|rawSrcName
argument_list|,
name|rootedDestName
argument_list|,
name|options
argument_list|,
literal|false
argument_list|,
name|expectUser
argument_list|,
name|DistCpConstants
operator|.
name|INVALID_ARGUMENT
argument_list|)
expr_stmt|;
name|doTestPreserveRawXAttrs
argument_list|(
name|rawSrcName
argument_list|,
name|rawDestName
argument_list|,
name|options
argument_list|,
literal|true
argument_list|,
name|expectUser
argument_list|,
name|DistCpConstants
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestPreserveRawXAttrs (String src, String dest, String preserveOpts, boolean expectRaw, boolean expectUser, int expectedExitCode)
specifier|private
name|void
name|doTestPreserveRawXAttrs
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dest
parameter_list|,
name|String
name|preserveOpts
parameter_list|,
name|boolean
name|expectRaw
parameter_list|,
name|boolean
name|expectUser
parameter_list|,
name|int
name|expectedExitCode
parameter_list|)
throws|throws
name|Exception
block|{
name|initXAttrs
argument_list|()
expr_stmt|;
name|DistCpTestUtils
operator|.
name|assertRunDistCp
argument_list|(
name|expectedExitCode
argument_list|,
name|src
argument_list|,
name|dest
argument_list|,
name|preserveOpts
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedExitCode
operator|==
name|DistCpConstants
operator|.
name|SUCCESS
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|pathnames
control|)
block|{
name|xAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|expectRaw
condition|)
block|{
name|xAttrs
operator|.
name|put
argument_list|(
name|rawName1
argument_list|,
name|rawValue1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectUser
condition|)
block|{
name|xAttrs
operator|.
name|put
argument_list|(
name|userName1
argument_list|,
name|userValue1
argument_list|)
expr_stmt|;
block|}
name|DistCpTestUtils
operator|.
name|assertXAttrs
argument_list|(
operator|new
name|Path
argument_list|(
name|dest
argument_list|,
name|p
argument_list|)
argument_list|,
name|fs
argument_list|,
name|xAttrs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

