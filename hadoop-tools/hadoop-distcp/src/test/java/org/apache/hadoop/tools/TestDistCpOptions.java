begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpOptions
operator|.
name|FileAttribute
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpOptions
operator|.
name|MAX_NUM_LISTSTATUS_THREADS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This is to test constructing {@link DistCpOptions} manually with setters.  *  * The test cases in this class is very similar to the parser test, see  * {@link TestOptionsParser}.  */
end_comment

begin_class
DECL|class|TestDistCpOptions
specifier|public
class|class
name|TestDistCpOptions
block|{
DECL|field|DELTA
specifier|private
specifier|static
specifier|final
name|float
name|DELTA
init|=
literal|0.001f
decl_stmt|;
annotation|@
name|Test
DECL|method|testSetIgnoreFailure ()
specifier|public
name|void
name|testSetIgnoreFailure
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldIgnoreFailures
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withIgnoreFailures
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldIgnoreFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetOverwrite ()
specifier|public
name|void
name|testSetOverwrite
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldOverwrite
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withOverwrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldOverwrite
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Update and overwrite aren't allowed together"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignore
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testLogPath ()
specifier|public
name|void
name|testLogPath
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getLogPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|logPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/logs"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|withLogPath
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|logPath
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getLogPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetBlokcing ()
specifier|public
name|void
name|testSetBlokcing
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldBlock
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withBlocking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetBandwidth ()
specifier|public
name|void
name|testSetBandwidth
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getMapBandwidth
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withMapBandwidth
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getMapBandwidth
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testSetNonPositiveBandwidth ()
specifier|public
name|void
name|testSetNonPositiveBandwidth
parameter_list|()
block|{
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withMapBandwidth
argument_list|(
operator|-
literal|11
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testSetZeroBandwidth ()
specifier|public
name|void
name|testSetZeroBandwidth
parameter_list|()
block|{
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withMapBandwidth
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetSkipCRC ()
specifier|public
name|void
name|testSetSkipCRC
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldSkipCRC
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DistCpOptions
name|options
init|=
name|builder
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|withCRC
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldSyncFolder
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldSkipCRC
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAtomicCommit ()
specifier|public
name|void
name|testSetAtomicCommit
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldAtomicCommit
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withAtomicCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldAtomicCommit
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Atomic and sync folders were mutually exclusive"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignore
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testSetWorkPath ()
specifier|public
name|void
name|testSetWorkPath
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getAtomicWorkPath
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withAtomicCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getAtomicWorkPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|workPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/work"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|withAtomicWorkPath
argument_list|(
name|workPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|workPath
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getAtomicWorkPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetSyncFolders ()
specifier|public
name|void
name|testSetSyncFolders
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldSyncFolder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldSyncFolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetDeleteMissing ()
specifier|public
name|void
name|testSetDeleteMissing
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldDeleteMissing
argument_list|()
argument_list|)
expr_stmt|;
name|DistCpOptions
name|options
init|=
name|builder
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|withDeleteMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldSyncFolder
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldDeleteMissing
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withOverwrite
argument_list|(
literal|true
argument_list|)
operator|.
name|withDeleteMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldOverwrite
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldDeleteMissing
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withDeleteMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Delete missing should fail without update or overwrite options"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Delete missing is applicable only with update "
operator|+
literal|"or overwrite options"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|withDeleteMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|withUseDiff
argument_list|(
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed as -delete and -diff are mutually exclusive."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"-delete and -diff/-rdiff are mutually exclusive."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetMaps ()
specifier|public
name|void
name|testSetMaps
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpConstants
operator|.
name|DEFAULT_MAPS
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getMaxMaps
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|maxMaps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getMaxMaps
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|maxMaps
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getMaxMaps
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetNumListtatusThreads ()
specifier|public
name|void
name|testSetNumListtatusThreads
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
comment|// If command line argument isn't set, we expect .getNumListstatusThreads
comment|// option to be zero (so that we know when to override conf properties).
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getNumListstatusThreads
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withNumListstatusThreads
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getNumListstatusThreads
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withNumListstatusThreads
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getNumListstatusThreads
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ignore large number of threads.
name|builder
operator|.
name|withNumListstatusThreads
argument_list|(
name|MAX_NUM_LISTSTATUS_THREADS
operator|*
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MAX_NUM_LISTSTATUS_THREADS
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getNumListstatusThreads
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSourceListing ()
specifier|public
name|void
name|testSourceListing
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getSourceFileListing
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testMissingTarget ()
specifier|public
name|void
name|testMissingTarget
parameter_list|()
block|{
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|DistCpOptions
name|option
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"xyz"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|val
init|=
literal|"DistCpOptions{atomicCommit=false, syncFolder=false, "
operator|+
literal|"deleteMissing=false, ignoreFailures=false, overwrite=false, "
operator|+
literal|"append=false, useDiff=false, useRdiff=false, "
operator|+
literal|"fromSnapshot=null, toSnapshot=null, "
operator|+
literal|"skipCRC=false, blocking=true, numListstatusThreads=0, maxMaps=20, "
operator|+
literal|"mapBandwidth=0.0, copyStrategy='uniformsize', preserveStatus=[], "
operator|+
literal|"atomicWorkPath=null, logPath=null, sourceFileListing=abc, "
operator|+
literal|"sourcePaths=null, targetPath=xyz, filtersFile='null', "
operator|+
literal|"blocksPerChunk=0, copyBufferSize=8192, verboseLog=false, "
operator|+
literal|"directWrite=false}"
decl_stmt|;
name|String
name|optionString
init|=
name|option
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|val
argument_list|,
name|optionString
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|DistCpOptionSwitch
operator|.
name|ATOMIC_COMMIT
operator|.
name|toString
argument_list|()
argument_list|,
name|DistCpOptionSwitch
operator|.
name|ATOMIC_COMMIT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyStrategy ()
specifier|public
name|void
name|testCopyStrategy
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpConstants
operator|.
name|UNIFORMSIZE
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getCopyStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withCopyStrategy
argument_list|(
literal|"dynamic"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dynamic"
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getCopyStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTargetPath ()
specifier|public
name|void
name|testTargetPath
parameter_list|()
block|{
specifier|final
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|,
name|options
operator|.
name|getTargetPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreserve ()
specifier|public
name|void
name|testPreserve
parameter_list|()
block|{
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|BLOCKSIZE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|REPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|CHECKSUMTYPE
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|preserve
argument_list|(
name|FileAttribute
operator|.
name|ACL
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|BLOCKSIZE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|REPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|CHECKSUMTYPE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|ACL
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|preserve
argument_list|(
name|FileAttribute
operator|.
name|BLOCKSIZE
argument_list|)
operator|.
name|preserve
argument_list|(
name|FileAttribute
operator|.
name|REPLICATION
argument_list|)
operator|.
name|preserve
argument_list|(
name|FileAttribute
operator|.
name|PERMISSION
argument_list|)
operator|.
name|preserve
argument_list|(
name|FileAttribute
operator|.
name|USER
argument_list|)
operator|.
name|preserve
argument_list|(
name|FileAttribute
operator|.
name|GROUP
argument_list|)
operator|.
name|preserve
argument_list|(
name|FileAttribute
operator|.
name|CHECKSUMTYPE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|BLOCKSIZE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|REPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|CHECKSUMTYPE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|options
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|XATTR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendOption ()
specifier|public
name|void
name|testAppendOption
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|withAppend
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldAppend
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// make sure -append is only valid when -update is specified
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withAppend
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Append should fail if update option is not specified"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Append is valid only with update options"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// make sure -append is invalid when skipCrc is specified
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|withAppend
argument_list|(
literal|true
argument_list|)
operator|.
name|withCRC
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Append should fail if skipCrc option is specified"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Append is disallowed when skipping CRC"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDiffOption ()
specifier|public
name|void
name|testDiffOption
parameter_list|()
block|{
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|withUseDiff
argument_list|(
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldUseDiff
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|options
operator|.
name|getFromSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"s2"
argument_list|,
name|options
operator|.
name|getToSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|withUseDiff
argument_list|(
literal|"s1"
argument_list|,
literal|"."
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|options
operator|.
name|shouldUseDiff
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|options
operator|.
name|getFromSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"."
argument_list|,
name|options
operator|.
name|getToSnapshot
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure -diff is only valid when -update is specified
try|try
block|{
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withUseDiff
argument_list|(
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"-diff should fail if -update option is not specified"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"-diff/-rdiff is valid only with -update option"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|withUseDiff
argument_list|(
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
operator|.
name|withDeleteMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail as -delete and -diff/-rdiff are mutually exclusive."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"-delete and -diff/-rdiff are mutually exclusive."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withUseDiff
argument_list|(
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
operator|.
name|withDeleteMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"-diff should fail if -update option is not specified"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"-delete and -diff/-rdiff are mutually exclusive."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withDeleteMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|withUseDiff
argument_list|(
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed as -delete and -diff are mutually exclusive"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"-delete and -diff/-rdiff are mutually exclusive"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExclusionsOption ()
specifier|public
name|void
name|testExclusionsOption
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/first"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getFiltersFile
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withFiltersFile
argument_list|(
literal|"/tmp/filters.txt"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/tmp/filters.txt"
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getFiltersFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetOptionsForSplitLargeFile ()
specifier|public
name|void
name|testSetOptionsForSplitLargeFile
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source/"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withAppend
argument_list|(
literal|true
argument_list|)
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|BLOCKSIZE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldAppend
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withBlocksPerChunk
argument_list|(
literal|5440
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldPreserve
argument_list|(
name|FileAttribute
operator|.
name|BLOCKSIZE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldAppend
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetCopyBufferSize ()
specifier|public
name|void
name|testSetCopyBufferSize
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpConstants
operator|.
name|COPY_BUFFER_SIZE_DEFAULT
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getCopyBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withCopyBufferSize
argument_list|(
literal|4194304
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4194304
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getCopyBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withCopyBufferSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpConstants
operator|.
name|COPY_BUFFER_SIZE_DEFAULT
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getCopyBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerboseLog ()
specifier|public
name|void
name|testVerboseLog
parameter_list|()
block|{
specifier|final
name|DistCpOptions
operator|.
name|Builder
name|builder
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldVerboseLog
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|withVerboseLog
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"-v should fail if -log option is not specified"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"-v is valid only with -log option"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|logPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/logs"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|withLogPath
argument_list|(
name|logPath
argument_list|)
operator|.
name|withVerboseLog
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|shouldVerboseLog
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendToConf ()
specifier|public
name|void
name|testAppendToConf
parameter_list|()
block|{
specifier|final
name|int
name|expectedBlocksPerChunk
init|=
literal|999
decl_stmt|;
specifier|final
name|String
name|expectedValForEmptyConfigKey
init|=
literal|"VALUE_OF_EMPTY_CONFIG_KEY"
decl_stmt|;
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/source"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://localhost:8020/target/"
argument_list|)
argument_list|)
operator|.
name|withBlocksPerChunk
argument_list|(
name|expectedBlocksPerChunk
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
literal|""
argument_list|,
name|expectedValForEmptyConfigKey
argument_list|)
expr_stmt|;
name|options
operator|.
name|appendToConf
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedBlocksPerChunk
argument_list|,
name|config
operator|.
name|getInt
argument_list|(
name|DistCpOptionSwitch
operator|.
name|BLOCKS_PER_CHUNK
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Some DistCpOptionSwitch's config label is empty! "
operator|+
literal|"Pls ensure the config label is provided when apply to config, "
operator|+
literal|"otherwise it may not be fetched properly"
argument_list|,
name|expectedValForEmptyConfigKey
argument_list|,
name|config
operator|.
name|get
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

