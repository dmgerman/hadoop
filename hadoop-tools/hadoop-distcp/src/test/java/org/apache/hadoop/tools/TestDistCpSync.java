begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|mapred
operator|.
name|CopyMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|TestDistCpSync
specifier|public
class|class
name|TestDistCpSync
block|{
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|context
specifier|private
name|DistCpContext
name|context
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|Path
name|source
init|=
operator|new
name|Path
argument_list|(
literal|"/source"
argument_list|)
decl_stmt|;
DECL|field|target
specifier|private
specifier|final
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/target"
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|final
name|long
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|DATA_NUM
specifier|private
specifier|final
name|short
name|DATA_NUM
init|=
literal|1
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATA_NUM
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|target
argument_list|)
expr_stmt|;
specifier|final
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|source
argument_list|)
argument_list|,
name|target
argument_list|)
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|withUseDiff
argument_list|(
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|options
operator|.
name|appendToConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|DistCpContext
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_WORK_PATH
argument_list|,
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_FINAL_PATH
argument_list|,
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test the sync returns false in the following scenarios:    * 1. the source/target dir are not snapshottable dir    * 2. the source/target does not have the given snapshots    * 3. changes have been made in target    */
annotation|@
name|Test
DECL|method|testFallback ()
specifier|public
name|void
name|testFallback
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the source/target dir are not snapshottable dir
name|Assert
operator|.
name|assertFalse
argument_list|(
name|sync
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the source path has been updated to the snapshot path
specifier|final
name|Path
name|spath
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|,
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"s2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|spath
argument_list|,
name|context
operator|.
name|getSourcePaths
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset source path in options
name|context
operator|.
name|setSourcePaths
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
comment|// the source/target does not have the given snapshots
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|sync
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|spath
argument_list|,
name|context
operator|.
name|getSourcePaths
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset source path in options
name|context
operator|.
name|setSourcePaths
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|target
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sync
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset source paths in options
name|context
operator|.
name|setSourcePaths
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
comment|// changes have been made in target
specifier|final
name|Path
name|subTarget
init|=
operator|new
name|Path
argument_list|(
name|target
argument_list|,
literal|"sub"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|subTarget
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|sync
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the source path has been updated to the snapshot path
name|Assert
operator|.
name|assertEquals
argument_list|(
name|spath
argument_list|,
name|context
operator|.
name|getSourcePaths
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset source paths in options
name|context
operator|.
name|setSourcePaths
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|subTarget
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sync
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|enableAndCreateFirstSnapshot ()
specifier|private
name|void
name|enableAndCreateFirstSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|target
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
block|}
DECL|method|syncAndVerify ()
specifier|private
name|void
name|syncAndVerify
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sync
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCopy
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|source
argument_list|)
argument_list|,
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|target
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|sync ()
specifier|private
name|boolean
name|sync
parameter_list|()
throws|throws
name|Exception
block|{
name|DistCpSync
name|distCpSync
init|=
operator|new
name|DistCpSync
argument_list|(
name|context
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|distCpSync
operator|.
name|sync
argument_list|()
return|;
block|}
comment|/**    * create some files and directories under the given directory.    * the final subtree looks like this:    *                     dir/    *              foo/          bar/    *           d1/    f1     d2/    f2    *         f3            f4    */
DECL|method|initData (Path dir)
specifier|private
name|void
name|initData
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"d1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d2
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"d2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f2
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f3
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"f3"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f4
init|=
operator|new
name|Path
argument_list|(
name|d2
argument_list|,
literal|"f4"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f2
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f3
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f4
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * make some changes under the given directory (created in the above way).    * 1. rename dir/foo/d1 to dir/bar/d1    * 2. delete dir/bar/d1/f3    * 3. rename dir/foo to /dir/bar/d1/foo    * 4. delete dir/bar/d1/foo/f1    * 5. create file dir/bar/d1/foo/f1 whose size is 2*BLOCK_SIZE    * 6. append one BLOCK to file dir/bar/f2    * 7. rename dir/bar to dir/foo    *    * Thus after all these ops the subtree looks like this:    *                       dir/    *                       foo/    *                 d1/    f2(A)    d2/    *                foo/             f4    *                f1(new)    */
DECL|method|changeData (Path dir)
specifier|private
name|int
name|changeData
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"d1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f2
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar_d1
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"d1"
argument_list|)
decl_stmt|;
name|int
name|numCreatedModified
init|=
literal|0
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|d1
argument_list|,
name|bar_d1
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|+=
literal|1
expr_stmt|;
comment|// modify ./foo
name|numCreatedModified
operator|+=
literal|1
expr_stmt|;
comment|// modify ./bar
specifier|final
name|Path
name|f3
init|=
operator|new
name|Path
argument_list|(
name|bar_d1
argument_list|,
literal|"f3"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|f3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newfoo
init|=
operator|new
name|Path
argument_list|(
name|bar_d1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newfoo
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|+=
literal|1
expr_stmt|;
comment|// modify ./foo/d1
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|newfoo
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|f1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f1
argument_list|,
literal|2
operator|*
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|+=
literal|1
expr_stmt|;
comment|// create ./foo/f1
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|f2
argument_list|,
operator|(
name|int
operator|)
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|+=
literal|1
expr_stmt|;
comment|// modify ./bar/f2
name|dfs
operator|.
name|rename
argument_list|(
name|bar
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|numCreatedModified
return|;
block|}
comment|/**    * Test the basic functionality.    */
annotation|@
name|Test
DECL|method|testSync ()
specifier|public
name|void
name|testSync
parameter_list|()
throws|throws
name|Exception
block|{
name|initData
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|initData
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|enableAndCreateFirstSnapshot
argument_list|()
expr_stmt|;
comment|// make changes under source
name|int
name|numCreatedModified
init|=
name|changeData
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// before sync, make some further changes on source. this should not affect
comment|// the later distcp since we're copying (s2-s1) to target
specifier|final
name|Path
name|toDelete
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|,
literal|"foo/d1/foo/f1"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|toDelete
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newdir
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|,
literal|"foo/d1/foo/newdir"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|newdir
argument_list|)
expr_stmt|;
name|SnapshotDiffReport
name|report
init|=
name|dfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|source
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|DistCpSync
name|distCpSync
init|=
operator|new
name|DistCpSync
argument_list|(
name|context
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// do the sync
name|Assert
operator|.
name|assertTrue
argument_list|(
name|distCpSync
operator|.
name|sync
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the source path has been updated to the snapshot path
specifier|final
name|Path
name|spath
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|,
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"s2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|spath
argument_list|,
name|context
operator|.
name|getSourcePaths
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// build copy listing
specifier|final
name|Path
name|listingPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/META/fileList.seq"
argument_list|)
decl_stmt|;
name|CopyListing
name|listing
init|=
operator|new
name|SimpleCopyListing
argument_list|(
name|conf
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|,
name|distCpSync
argument_list|)
decl_stmt|;
name|listing
operator|.
name|buildListing
argument_list|(
name|listingPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Text
argument_list|,
name|CopyListingFileStatus
argument_list|>
name|copyListing
init|=
name|getListing
argument_list|(
name|listingPath
argument_list|)
decl_stmt|;
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Mapper
argument_list|<
name|Text
argument_list|,
name|CopyListingFileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|mapContext
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
comment|// Enable append
name|mapContext
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|DistCpOptionSwitch
operator|.
name|APPEND
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|setup
argument_list|(
name|mapContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|CopyListingFileStatus
argument_list|>
name|entry
range|:
name|copyListing
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|copyMapper
operator|.
name|map
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapContext
argument_list|)
expr_stmt|;
block|}
comment|// verify that we only list modified and created files/directories
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numCreatedModified
argument_list|,
name|copyListing
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that we only copied new appended data of f2 and the new file f1
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BLOCK_SIZE
operator|*
literal|3
argument_list|,
name|stubContext
operator|.
name|getReporter
argument_list|()
operator|.
name|getCounter
argument_list|(
name|CopyMapper
operator|.
name|Counter
operator|.
name|BYTESCOPIED
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify the source and target now has the same structure
name|verifyCopy
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|spath
argument_list|)
argument_list|,
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|target
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getListing (Path listingPath)
specifier|private
name|Map
argument_list|<
name|Text
argument_list|,
name|CopyListingFileStatus
argument_list|>
name|getListing
parameter_list|(
name|Path
name|listingPath
parameter_list|)
throws|throws
name|Exception
block|{
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|listingPath
argument_list|)
argument_list|)
decl_stmt|;
name|Text
name|key
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|CopyListingFileStatus
name|value
init|=
operator|new
name|CopyListingFileStatus
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Text
argument_list|,
name|CopyListingFileStatus
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|value
operator|=
operator|new
name|CopyListingFileStatus
argument_list|()
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|method|verifyCopy (FileStatus s, FileStatus t, boolean compareName)
specifier|private
name|void
name|verifyCopy
parameter_list|(
name|FileStatus
name|s
parameter_list|,
name|FileStatus
name|t
parameter_list|,
name|boolean
name|compareName
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|t
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|compareName
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|s
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// verify the file content is the same
name|byte
index|[]
name|sbytes
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|dfs
argument_list|,
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tbytes
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|dfs
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|sbytes
argument_list|,
name|tbytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileStatus
index|[]
name|slist
init|=
name|dfs
operator|.
name|listStatus
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|tlist
init|=
name|dfs
operator|.
name|listStatus
argument_list|(
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slist
operator|.
name|length
argument_list|,
name|tlist
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slist
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|verifyCopy
argument_list|(
name|slist
index|[
name|i
index|]
argument_list|,
name|tlist
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Similar test with testSync, but the "to" snapshot is specified as "."    * @throws Exception    */
annotation|@
name|Test
DECL|method|testSyncWithCurrent ()
specifier|public
name|void
name|testSyncWithCurrent
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|source
argument_list|)
argument_list|,
name|target
argument_list|)
operator|.
name|withSyncFolder
argument_list|(
literal|true
argument_list|)
operator|.
name|withUseDiff
argument_list|(
literal|"s1"
argument_list|,
literal|"."
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|context
operator|=
operator|new
name|DistCpContext
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|initData
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|initData
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|enableAndCreateFirstSnapshot
argument_list|()
expr_stmt|;
comment|// make changes under source
name|changeData
argument_list|(
name|source
argument_list|)
expr_stmt|;
comment|// do the sync
name|sync
argument_list|()
expr_stmt|;
comment|// make sure the source path is still unchanged
name|Assert
operator|.
name|assertEquals
argument_list|(
name|source
argument_list|,
name|context
operator|.
name|getSourcePaths
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initData2 (Path dir)
specifier|private
name|void
name|initData2
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f2
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f3
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"f3"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f2
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f3
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
block|}
DECL|method|changeData2 (Path dir)
specifier|private
name|void
name|changeData2
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|tmpFoo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"tmpFoo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|test
argument_list|,
name|tmpFoo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|bar
argument_list|,
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|tmpFoo
argument_list|,
name|bar
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSync2 ()
specifier|public
name|void
name|testSync2
parameter_list|()
throws|throws
name|Exception
block|{
name|initData2
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|initData2
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|enableAndCreateFirstSnapshot
argument_list|()
expr_stmt|;
comment|// make changes under source
name|changeData2
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|SnapshotDiffReport
name|report
init|=
name|dfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|source
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|syncAndVerify
argument_list|()
expr_stmt|;
block|}
DECL|method|initData3 (Path dir)
specifier|private
name|void
name|initData3
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f2
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f3
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f2
argument_list|,
name|BLOCK_SIZE
operator|*
literal|2
argument_list|,
name|DATA_NUM
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f3
argument_list|,
name|BLOCK_SIZE
operator|*
literal|3
argument_list|,
name|DATA_NUM
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
block|}
DECL|method|changeData3 (Path dir)
specifier|private
name|void
name|changeData3
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f2
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f3
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|newf1
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"newfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|newf2
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"newfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|newf3
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"newfile"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|f1
argument_list|,
name|newf1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|f2
argument_list|,
name|newf2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|f3
argument_list|,
name|newf3
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a case where there are multiple source files with the same name.    */
annotation|@
name|Test
DECL|method|testSync3 ()
specifier|public
name|void
name|testSync3
parameter_list|()
throws|throws
name|Exception
block|{
name|initData3
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|initData3
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|enableAndCreateFirstSnapshot
argument_list|()
expr_stmt|;
comment|// make changes under source
name|changeData3
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|SnapshotDiffReport
name|report
init|=
name|dfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|source
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|syncAndVerify
argument_list|()
expr_stmt|;
block|}
DECL|method|initData4 (Path dir)
specifier|private
name|void
name|initData4
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|d1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"d1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d2
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"d2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|d2
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|changeData4 (Path dir)
specifier|private
name|void
name|changeData4
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|d1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"d1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d11
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"d11"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d2
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"d2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d21
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"d21"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|d2
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|f1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|d2
argument_list|,
name|d21
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|d1
argument_list|,
name|d11
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a case where multiple level dirs are renamed.    */
annotation|@
name|Test
DECL|method|testSync4 ()
specifier|public
name|void
name|testSync4
parameter_list|()
throws|throws
name|Exception
block|{
name|initData4
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|initData4
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|enableAndCreateFirstSnapshot
argument_list|()
expr_stmt|;
comment|// make changes under source
name|changeData4
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|SnapshotDiffReport
name|report
init|=
name|dfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|source
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|syncAndVerify
argument_list|()
expr_stmt|;
block|}
DECL|method|initData5 (Path dir)
specifier|private
name|void
name|initData5
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|d1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"d1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"d2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f2
init|=
operator|new
name|Path
argument_list|(
name|d2
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f2
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|changeData5 (Path dir)
specifier|private
name|void
name|changeData5
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|d1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"d1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"d2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|f1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|d1
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|d2
argument_list|,
name|d1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|f2
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|f2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a case with different delete and rename sequences.    */
annotation|@
name|Test
DECL|method|testSync5 ()
specifier|public
name|void
name|testSync5
parameter_list|()
throws|throws
name|Exception
block|{
name|initData5
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|initData5
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|enableAndCreateFirstSnapshot
argument_list|()
expr_stmt|;
comment|// make changes under source
name|changeData5
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|SnapshotDiffReport
name|report
init|=
name|dfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|source
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|syncAndVerify
argument_list|()
expr_stmt|;
block|}
DECL|method|testAndVerify (int numCreatedModified)
specifier|private
name|void
name|testAndVerify
parameter_list|(
name|int
name|numCreatedModified
parameter_list|)
throws|throws
name|Exception
block|{
name|SnapshotDiffReport
name|report
init|=
name|dfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|source
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|DistCpSync
name|distCpSync
init|=
operator|new
name|DistCpSync
argument_list|(
name|context
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// do the sync
name|Assert
operator|.
name|assertTrue
argument_list|(
name|distCpSync
operator|.
name|sync
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the source path has been updated to the snapshot path
specifier|final
name|Path
name|spath
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|,
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"s2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|spath
argument_list|,
name|context
operator|.
name|getSourcePaths
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// build copy listing
specifier|final
name|Path
name|listingPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/META/fileList.seq"
argument_list|)
decl_stmt|;
name|CopyListing
name|listing
init|=
operator|new
name|SimpleCopyListing
argument_list|(
name|conf
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|,
name|distCpSync
argument_list|)
decl_stmt|;
name|listing
operator|.
name|buildListing
argument_list|(
name|listingPath
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Text
argument_list|,
name|CopyListingFileStatus
argument_list|>
name|copyListing
init|=
name|getListing
argument_list|(
name|listingPath
argument_list|)
decl_stmt|;
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Mapper
argument_list|<
name|Text
argument_list|,
name|CopyListingFileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|mapContext
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
comment|// Enable append
name|mapContext
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|DistCpOptionSwitch
operator|.
name|APPEND
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|setup
argument_list|(
name|mapContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|CopyListingFileStatus
argument_list|>
name|entry
range|:
name|copyListing
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|copyMapper
operator|.
name|map
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapContext
argument_list|)
expr_stmt|;
block|}
comment|// verify that we only list modified and created files/directories
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numCreatedModified
argument_list|,
name|copyListing
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify the source and target now has the same structure
name|verifyCopy
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|spath
argument_list|)
argument_list|,
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|target
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|initData6 (Path dir)
specifier|private
name|void
name|initData6
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_f1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar_f1
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|foo_f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|bar_f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|changeData6 (Path dir)
specifier|private
name|int
name|changeData6
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_f1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|int
name|numCreatedModified
init|=
literal|0
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|bar
argument_list|,
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|foo2
argument_list|,
name|bar
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|foo_f1
argument_list|,
operator|(
name|int
operator|)
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|+=
literal|1
expr_stmt|;
comment|// modify ./bar/f1
return|return
name|numCreatedModified
return|;
block|}
comment|/**    * Test a case where there is a cycle in renaming dirs.    */
annotation|@
name|Test
DECL|method|testSync6 ()
specifier|public
name|void
name|testSync6
parameter_list|()
throws|throws
name|Exception
block|{
name|initData6
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|initData6
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|enableAndCreateFirstSnapshot
argument_list|()
expr_stmt|;
name|int
name|numCreatedModified
init|=
name|changeData6
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|testAndVerify
argument_list|(
name|numCreatedModified
argument_list|)
expr_stmt|;
block|}
DECL|method|initData7 (Path dir)
specifier|private
name|void
name|initData7
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_f1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar_f1
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|foo_f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|bar_f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|changeData7 (Path dir)
specifier|private
name|int
name|changeData7
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_f1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo2_f2
init|=
operator|new
name|Path
argument_list|(
name|foo2
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_d1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"d1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_d1_f3
init|=
operator|new
name|Path
argument_list|(
name|foo_d1
argument_list|,
literal|"f3"
argument_list|)
decl_stmt|;
name|int
name|numCreatedModified
init|=
literal|0
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|foo_f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|+=
literal|2
expr_stmt|;
comment|// create ./foo and ./foo/f1
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|foo_f1
argument_list|,
operator|(
name|int
operator|)
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|foo_f1
argument_list|,
name|foo2_f2
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|-=
literal|1
expr_stmt|;
comment|// mv ./foo/f1
name|numCreatedModified
operator|+=
literal|2
expr_stmt|;
comment|// "M ./foo" and "+ ./foo/f2"
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|foo_d1_f3
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|+=
literal|2
expr_stmt|;
comment|// create ./foo/d1 and ./foo/d1/f3
return|return
name|numCreatedModified
return|;
block|}
comment|/**    * Test a case where rename a dir, then create a new dir with the same name    * and sub dir.    */
annotation|@
name|Test
DECL|method|testSync7 ()
specifier|public
name|void
name|testSync7
parameter_list|()
throws|throws
name|Exception
block|{
name|initData7
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|initData7
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|enableAndCreateFirstSnapshot
argument_list|()
expr_stmt|;
name|int
name|numCreatedModified
init|=
name|changeData7
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|testAndVerify
argument_list|(
name|numCreatedModified
argument_list|)
expr_stmt|;
block|}
DECL|method|initData8 (Path dir)
specifier|private
name|void
name|initData8
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"d1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_f1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar_f1
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d1_f1
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|foo_f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|bar_f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|d1_f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|changeData8 (Path dir)
specifier|private
name|int
name|changeData8
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|createdDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"d1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|d1_f1
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|createdDir_f1
init|=
operator|new
name|Path
argument_list|(
name|createdDir
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_f3
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f3"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|new_foo
init|=
operator|new
name|Path
argument_list|(
name|createdDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_f4
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f4"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_d1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"d1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar1"
argument_list|)
decl_stmt|;
name|int
name|numCreatedModified
init|=
literal|0
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|foo_f3
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|+=
literal|1
expr_stmt|;
comment|// create  ./c/foo/f3
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdDir_f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|+=
literal|1
expr_stmt|;
comment|// create ./c
name|dfs
operator|.
name|rename
argument_list|(
name|createdDir_f1
argument_list|,
name|foo_f4
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|+=
literal|1
expr_stmt|;
comment|// create ./c/foo/f4
name|dfs
operator|.
name|rename
argument_list|(
name|d1_f1
argument_list|,
name|createdDir_f1
argument_list|)
expr_stmt|;
comment|// rename ./d1/f1 -> ./c/f1
name|numCreatedModified
operator|+=
literal|1
expr_stmt|;
comment|// modify ./c/foo/d1
name|dfs
operator|.
name|rename
argument_list|(
name|d1
argument_list|,
name|foo_d1
argument_list|)
expr_stmt|;
name|numCreatedModified
operator|+=
literal|1
expr_stmt|;
comment|// modify ./c/foo
name|dfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|new_foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|bar
argument_list|,
name|bar1
argument_list|)
expr_stmt|;
return|return
name|numCreatedModified
return|;
block|}
comment|/**    * Test a case where create a dir, then mv a existed dir into it.    */
annotation|@
name|Test
DECL|method|testSync8 ()
specifier|public
name|void
name|testSync8
parameter_list|()
throws|throws
name|Exception
block|{
name|initData8
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|initData8
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|enableAndCreateFirstSnapshot
argument_list|()
expr_stmt|;
name|int
name|numCreatedModified
init|=
name|changeData8
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|testAndVerify
argument_list|(
name|numCreatedModified
argument_list|)
expr_stmt|;
block|}
DECL|method|initData9 (Path dir)
specifier|private
name|void
name|initData9
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_f1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|foo_f1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|changeData9 (Path dir)
specifier|private
name|void
name|changeData9
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_f2
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|foo_f2
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|DATA_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a case where the source path is relative.    */
annotation|@
name|Test
DECL|method|testSync9 ()
specifier|public
name|void
name|testSync9
parameter_list|()
throws|throws
name|Exception
block|{
comment|// use /user/$USER/source for source directory
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
name|dfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
literal|"source"
argument_list|)
decl_stmt|;
name|initData9
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|initData9
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|sourcePath
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|target
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|changeData9
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|sourcePath
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-update"
block|,
literal|"-diff"
block|,
literal|"s1"
block|,
literal|"s2"
block|,
literal|"source"
block|,
name|target
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
operator|new
name|DistCp
argument_list|(
name|conf
argument_list|,
name|OptionsParser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|verifyCopy
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|sourcePath
argument_list|)
argument_list|,
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|target
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSyncSnapshotTimeStampChecking ()
specifier|public
name|void
name|testSyncSnapshotTimeStampChecking
parameter_list|()
throws|throws
name|Exception
block|{
name|initData
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|initData
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|target
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// Sleep one second to make snapshot s1 created later than s2
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|source
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|boolean
name|threwException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|DistCpSync
name|distCpSync
init|=
operator|new
name|DistCpSync
argument_list|(
name|context
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// do the sync
name|distCpSync
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HadoopIllegalArgumentException
name|e
parameter_list|)
block|{
name|threwException
operator|=
literal|true
expr_stmt|;
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Snapshot s2 should be newer than s1"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|threwException
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

