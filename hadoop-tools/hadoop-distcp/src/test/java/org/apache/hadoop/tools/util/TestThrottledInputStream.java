begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestThrottledInputStream
specifier|public
class|class
name|TestThrottledInputStream
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestThrottledInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BUFF_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BUFF_SIZE
init|=
literal|1024
decl_stmt|;
DECL|enum|CB
DECL|enumConstant|ONE_C
DECL|enumConstant|BUFFER
DECL|enumConstant|BUFF_OFFSET
specifier|private
enum|enum
name|CB
block|{
name|ONE_C
block|,
name|BUFFER
block|,
name|BUFF_OFFSET
block|}
annotation|@
name|Test
DECL|method|testRead ()
specifier|public
name|void
name|testRead
parameter_list|()
block|{
name|File
name|tmpFile
decl_stmt|;
name|File
name|outFile
decl_stmt|;
try|try
block|{
name|tmpFile
operator|=
name|createFile
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|outFile
operator|=
name|createFile
argument_list|()
expr_stmt|;
name|tmpFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|outFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|long
name|maxBandwidth
init|=
name|copyAndAssert
argument_list|(
name|tmpFile
argument_list|,
name|outFile
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|CB
operator|.
name|BUFFER
argument_list|)
decl_stmt|;
name|copyAndAssert
argument_list|(
name|tmpFile
argument_list|,
name|outFile
argument_list|,
name|maxBandwidth
argument_list|,
literal|20
argument_list|,
literal|0
argument_list|,
name|CB
operator|.
name|BUFFER
argument_list|)
expr_stmt|;
comment|/*       copyAndAssert(tmpFile, outFile, maxBandwidth, 10, 0, CB.BUFFER);       copyAndAssert(tmpFile, outFile, maxBandwidth, 50, 0, CB.BUFFER); */
name|copyAndAssert
argument_list|(
name|tmpFile
argument_list|,
name|outFile
argument_list|,
name|maxBandwidth
argument_list|,
literal|20
argument_list|,
literal|0
argument_list|,
name|CB
operator|.
name|BUFF_OFFSET
argument_list|)
expr_stmt|;
comment|/*       copyAndAssert(tmpFile, outFile, maxBandwidth, 10, 0, CB.BUFF_OFFSET);       copyAndAssert(tmpFile, outFile, maxBandwidth, 50, 0, CB.BUFF_OFFSET); */
name|copyAndAssert
argument_list|(
name|tmpFile
argument_list|,
name|outFile
argument_list|,
name|maxBandwidth
argument_list|,
literal|20
argument_list|,
literal|0
argument_list|,
name|CB
operator|.
name|ONE_C
argument_list|)
expr_stmt|;
comment|/*       copyAndAssert(tmpFile, outFile, maxBandwidth, 10, 0, CB.ONE_C);       copyAndAssert(tmpFile, outFile, maxBandwidth, 50, 0, CB.ONE_C); */
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copyAndAssert (File tmpFile, File outFile, long maxBandwidth, float factor, int sleepTime, CB flag)
specifier|private
name|long
name|copyAndAssert
parameter_list|(
name|File
name|tmpFile
parameter_list|,
name|File
name|outFile
parameter_list|,
name|long
name|maxBandwidth
parameter_list|,
name|float
name|factor
parameter_list|,
name|int
name|sleepTime
parameter_list|,
name|CB
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bandwidth
decl_stmt|;
name|ThrottledInputStream
name|in
decl_stmt|;
name|long
name|maxBPS
init|=
call|(
name|long
call|)
argument_list|(
name|maxBandwidth
operator|/
name|factor
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxBandwidth
operator|==
literal|0
condition|)
block|{
name|in
operator|=
operator|new
name|ThrottledInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tmpFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|=
operator|new
name|ThrottledInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tmpFile
argument_list|)
argument_list|,
name|maxBPS
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|flag
operator|==
name|CB
operator|.
name|BUFFER
condition|)
block|{
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|BUFF_SIZE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flag
operator|==
name|CB
operator|.
name|BUFF_OFFSET
condition|)
block|{
name|copyBytesWithOffset
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|BUFF_SIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyByteByByte
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|bandwidth
operator|=
name|in
operator|.
name|getBytesPerSec
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|in
operator|.
name|getTotalBytesRead
argument_list|()
argument_list|,
name|tmpFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|in
operator|.
name|getBytesPerSec
argument_list|()
operator|>
name|maxBandwidth
operator|/
operator|(
name|factor
operator|*
literal|1.2
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|in
operator|.
name|getTotalSleepTime
argument_list|()
operator|>
name|sleepTime
operator|||
name|in
operator|.
name|getBytesPerSec
argument_list|()
operator|<=
name|maxBPS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
return|return
name|bandwidth
return|;
block|}
DECL|method|copyBytesWithOffset (InputStream in, OutputStream out, int buffSize)
specifier|private
specifier|static
name|void
name|copyBytesWithOffset
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|int
name|buffSize
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
name|buffSize
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buffSize
argument_list|)
decl_stmt|;
while|while
condition|(
name|bytesRead
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copyByteByByte (InputStream in, OutputStream out)
specifier|private
specifier|static
name|void
name|copyByteByByte
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ch
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|ch
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|ch
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|copyBytes (InputStream in, OutputStream out, int buffSize)
specifier|private
specifier|static
name|void
name|copyBytes
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|int
name|buffSize
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
name|buffSize
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
while|while
condition|(
name|bytesRead
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFile (long sizeInKB)
specifier|private
name|File
name|createFile
parameter_list|(
name|long
name|sizeInKB
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmpFile
init|=
name|createFile
argument_list|()
decl_stmt|;
name|writeToFile
argument_list|(
name|tmpFile
argument_list|,
name|sizeInKB
argument_list|)
expr_stmt|;
return|return
name|tmpFile
return|;
block|}
DECL|method|createFile ()
specifier|private
name|File
name|createFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tmp"
argument_list|,
literal|"dat"
argument_list|)
return|;
block|}
DECL|method|writeToFile (File tmpFile, long sizeInKB)
specifier|private
name|void
name|writeToFile
parameter_list|(
name|File
name|tmpFile
parameter_list|,
name|long
name|sizeInKB
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
for|for
control|(
name|long
name|index
init|=
literal|0
init|;
name|index
operator|<
name|sizeInKB
condition|;
name|index
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

