begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests distcp in combination with HDFS ACLs.  */
end_comment

begin_class
DECL|class|TestDistCpWithAcls
specifier|public
class|class
name|TestDistCpWithAcls
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|initCluster
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create this directory structure:
comment|// /src
comment|//   /dir1
comment|//     /subdir1
comment|//   /dir2
comment|//     /dir2/file2
comment|//     /dir2/file3
comment|//   /dir3sticky
comment|//   /file1
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src/dir1/subdir1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src/dir2"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src/dir2/file2"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src/dir2/file3"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src/dir3sticky"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src/file1"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Set a mix of ACLs and plain permissions throughout the tree.
name|fs
operator|.
name|modifyAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src/dir1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src/dir2/file2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"sales"
argument_list|,
name|NONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src/dir2/file3"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0660
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src/file1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/src/dir3sticky"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|01777
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPreserveAcls ()
specifier|public
name|void
name|testPreserveAcls
parameter_list|()
throws|throws
name|Exception
block|{
name|assertRunDistCp
argument_list|(
name|DistCpConstants
operator|.
name|SUCCESS
argument_list|,
literal|"/dstPreserveAcls"
argument_list|)
expr_stmt|;
name|assertAclEntries
argument_list|(
literal|"/dstPreserveAcls/dir1"
argument_list|,
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"bruce"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
literal|"/dstPreserveAcls/dir1"
argument_list|,
operator|(
name|short
operator|)
literal|0755
argument_list|)
expr_stmt|;
name|assertAclEntries
argument_list|(
literal|"/dstPreserveAcls/dir1/subdir1"
argument_list|,
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
literal|"/dstPreserveAcls/dir1/subdir1"
argument_list|,
operator|(
name|short
operator|)
literal|0755
argument_list|)
expr_stmt|;
name|assertAclEntries
argument_list|(
literal|"/dstPreserveAcls/dir2"
argument_list|,
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
literal|"/dstPreserveAcls/dir2"
argument_list|,
operator|(
name|short
operator|)
literal|0755
argument_list|)
expr_stmt|;
name|assertAclEntries
argument_list|(
literal|"/dstPreserveAcls/dir2/file2"
argument_list|,
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"sales"
argument_list|,
name|NONE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
literal|"/dstPreserveAcls/dir2/file2"
argument_list|,
operator|(
name|short
operator|)
literal|0644
argument_list|)
expr_stmt|;
name|assertAclEntries
argument_list|(
literal|"/dstPreserveAcls/dir2/file3"
argument_list|,
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
literal|"/dstPreserveAcls/dir2/file3"
argument_list|,
operator|(
name|short
operator|)
literal|0660
argument_list|)
expr_stmt|;
name|assertAclEntries
argument_list|(
literal|"/dstPreserveAcls/dir3sticky"
argument_list|,
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
literal|"/dstPreserveAcls/dir3sticky"
argument_list|,
operator|(
name|short
operator|)
literal|01777
argument_list|)
expr_stmt|;
name|assertAclEntries
argument_list|(
literal|"/dstPreserveAcls/file1"
argument_list|,
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"diana"
argument_list|,
name|READ
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
literal|"/dstPreserveAcls/file1"
argument_list|,
operator|(
name|short
operator|)
literal|0644
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclsNotEnabled ()
specifier|public
name|void
name|testAclsNotEnabled
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|restart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertRunDistCp
argument_list|(
name|DistCpConstants
operator|.
name|ACLS_NOT_SUPPORTED
argument_list|,
literal|"/dstAclsNotEnabled"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|restart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAclsNotImplemented ()
specifier|public
name|void
name|testAclsNotImplemented
parameter_list|()
throws|throws
name|Exception
block|{
name|assertRunDistCp
argument_list|(
name|DistCpConstants
operator|.
name|ACLS_NOT_SUPPORTED
argument_list|,
literal|"stubfs://dstAclsNotImplemented"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stub FileSystem implementation used for testing the case of attempting    * distcp with ACLs preserved on a file system that does not support ACLs.    * The base class implementation throws UnsupportedOperationException for the    * ACL methods, so we don't need to override them.    */
DECL|class|StubFileSystem
specifier|public
specifier|static
class|class
name|StubFileSystem
extends|extends
name|FileSystem
block|{
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|URI
operator|.
name|create
argument_list|(
literal|"stubfs:///"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileStatus
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{     }
block|}
comment|/**    * Create a new AclEntry with scope, type and permission (no name).    *    * @param scope AclEntryScope scope of the ACL entry    * @param type AclEntryType ACL entry type    * @param permission FsAction set of permissions in the ACL entry    * @return AclEntry new AclEntry    */
DECL|method|aclEntry (AclEntryScope scope, AclEntryType type, FsAction permission)
specifier|private
specifier|static
name|AclEntry
name|aclEntry
parameter_list|(
name|AclEntryScope
name|scope
parameter_list|,
name|AclEntryType
name|type
parameter_list|,
name|FsAction
name|permission
parameter_list|)
block|{
return|return
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
operator|.
name|setType
argument_list|(
name|type
argument_list|)
operator|.
name|setPermission
argument_list|(
name|permission
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a new AclEntry with scope, type, name and permission.    *    * @param scope AclEntryScope scope of the ACL entry    * @param type AclEntryType ACL entry type    * @param name String optional ACL entry name    * @param permission FsAction set of permissions in the ACL entry    * @return AclEntry new AclEntry    */
DECL|method|aclEntry (AclEntryScope scope, AclEntryType type, String name, FsAction permission)
specifier|private
specifier|static
name|AclEntry
name|aclEntry
parameter_list|(
name|AclEntryScope
name|scope
parameter_list|,
name|AclEntryType
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|FsAction
name|permission
parameter_list|)
block|{
return|return
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
operator|.
name|setType
argument_list|(
name|type
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|setPermission
argument_list|(
name|permission
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Asserts the ACL entries returned by getAclStatus for a specific path.    *    * @param path String path to check    * @param entries AclEntry[] expected ACL entries    * @throws Exception if there is any error    */
DECL|method|assertAclEntries (String path, AclEntry[] entries)
specifier|private
specifier|static
name|void
name|assertAclEntries
parameter_list|(
name|String
name|path
parameter_list|,
name|AclEntry
index|[]
name|entries
parameter_list|)
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
name|entries
argument_list|,
name|fs
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts the value of the FsPermission bits on the inode of a specific path.    *    * @param path String path to check    * @param perm short expected permission bits    * @throws Exception if there is any error    */
DECL|method|assertPermission (String path, short perm)
specifier|private
specifier|static
name|void
name|assertPermission
parameter_list|(
name|String
name|path
parameter_list|,
name|short
name|perm
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|perm
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs distcp from /src to specified destination, preserving ACLs.  Asserts    * expected exit code.    *    * @param int exitCode expected exit code    * @param dst String distcp destination    * @throws Exception if there is any error    */
DECL|method|assertRunDistCp (int exitCode, String dst)
specifier|private
specifier|static
name|void
name|assertRunDistCp
parameter_list|(
name|int
name|exitCode
parameter_list|,
name|String
name|dst
parameter_list|)
throws|throws
name|Exception
block|{
name|DistCp
name|distCp
init|=
operator|new
name|DistCp
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exitCode
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|distCp
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-pa"
block|,
literal|"/src"
block|,
name|dst
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize the cluster, wait for it to become active, and get FileSystem.    *    * @param format if true, format the NameNode and DataNodes before starting up    * @param aclsEnabled if true, ACL support is enabled    * @throws Exception if any step fails    */
DECL|method|initCluster (boolean format, boolean aclsEnabled)
specifier|private
specifier|static
name|void
name|initCluster
parameter_list|(
name|boolean
name|format
parameter_list|,
name|boolean
name|aclsEnabled
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
name|aclsEnabled
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"stubfs:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.stubfs.impl"
argument_list|,
name|StubFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
name|format
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
comment|/**    * Restarts the cluster with ACLs enabled or disabled.    *    * @param aclsEnabled if true, ACL support is enabled    * @throws Exception if any step fails    */
DECL|method|restart (boolean aclsEnabled)
specifier|private
specifier|static
name|void
name|restart
parameter_list|(
name|boolean
name|aclsEnabled
parameter_list|)
throws|throws
name|Exception
block|{
name|shutdown
argument_list|()
expr_stmt|;
name|initCluster
argument_list|(
literal|false
argument_list|,
name|aclsEnabled
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

