begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|contract
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractFSContractTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * Contract test suite covering a file system's integration with DistCp.  The  * tests coordinate two file system instances: one "local", which is the local  * file system, and the other "remote", which is the file system implementation  * under test.  The tests in the suite cover both copying from local to remote  * (e.g. a backup use case) and copying from remote to local (e.g. a restore use  * case).  */
end_comment

begin_class
DECL|class|AbstractContractDistCpTest
specifier|public
specifier|abstract
class|class
name|AbstractContractDistCpTest
extends|extends
name|AbstractFSContractTestBase
block|{
annotation|@
name|Rule
DECL|field|testName
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|localFS
DECL|field|remoteFS
specifier|private
name|FileSystem
name|localFS
decl_stmt|,
name|remoteFS
decl_stmt|;
DECL|field|localDir
DECL|field|remoteDir
specifier|private
name|Path
name|localDir
decl_stmt|,
name|remoteDir
decl_stmt|;
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
return|return
name|newConf
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|conf
operator|=
name|getContract
argument_list|()
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|remoteFS
operator|=
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// Test paths are isolated by concrete subclass name and test method name.
comment|// All paths are fully qualified including scheme (not taking advantage of
comment|// default file system), so if something fails, the messages will make it
comment|// clear which paths are local and which paths are remote.
name|Path
name|testSubDir
init|=
operator|new
name|Path
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|localDir
operator|=
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
name|testSubDir
argument_list|)
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|localFS
argument_list|,
name|localDir
argument_list|)
expr_stmt|;
name|remoteDir
operator|=
name|remoteFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|getContract
argument_list|()
operator|.
name|getTestPath
argument_list|()
argument_list|,
name|testSubDir
argument_list|)
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|remoteFS
argument_list|,
name|remoteDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deepDirectoryStructureToRemote ()
specifier|public
name|void
name|deepDirectoryStructureToRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"copy a deep directory structure from local to remote"
argument_list|)
expr_stmt|;
name|deepDirectoryStructure
argument_list|(
name|localFS
argument_list|,
name|localDir
argument_list|,
name|remoteFS
argument_list|,
name|remoteDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|largeFilesToRemote ()
specifier|public
name|void
name|largeFilesToRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"copy multiple large files from local to remote"
argument_list|)
expr_stmt|;
name|largeFiles
argument_list|(
name|localFS
argument_list|,
name|localDir
argument_list|,
name|remoteFS
argument_list|,
name|remoteDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deepDirectoryStructureFromRemote ()
specifier|public
name|void
name|deepDirectoryStructureFromRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"copy a deep directory structure from remote to local"
argument_list|)
expr_stmt|;
name|deepDirectoryStructure
argument_list|(
name|remoteFS
argument_list|,
name|remoteDir
argument_list|,
name|localFS
argument_list|,
name|localDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|largeFilesFromRemote ()
specifier|public
name|void
name|largeFilesFromRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"copy multiple large files from remote to local"
argument_list|)
expr_stmt|;
name|largeFiles
argument_list|(
name|remoteFS
argument_list|,
name|remoteDir
argument_list|,
name|localFS
argument_list|,
name|localDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Executes a test using a file system sub-tree with multiple nesting levels.    *    * @param srcFS source FileSystem    * @param srcDir source directory    * @param dstFS destination FileSystem    * @param dstDir destination directory    * @throws Exception if there is a failure    */
DECL|method|deepDirectoryStructure (FileSystem srcFS, Path srcDir, FileSystem dstFS, Path dstDir)
specifier|private
name|void
name|deepDirectoryStructure
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|srcDir
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dstDir
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|inputDir
init|=
operator|new
name|Path
argument_list|(
name|srcDir
argument_list|,
literal|"inputDir"
argument_list|)
decl_stmt|;
name|Path
name|inputSubDir1
init|=
operator|new
name|Path
argument_list|(
name|inputDir
argument_list|,
literal|"subDir1"
argument_list|)
decl_stmt|;
name|Path
name|inputSubDir2
init|=
operator|new
name|Path
argument_list|(
name|inputDir
argument_list|,
literal|"subDir2/subDir3"
argument_list|)
decl_stmt|;
name|Path
name|inputFile1
init|=
operator|new
name|Path
argument_list|(
name|inputDir
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|inputFile2
init|=
operator|new
name|Path
argument_list|(
name|inputSubDir1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|Path
name|inputFile3
init|=
operator|new
name|Path
argument_list|(
name|inputSubDir2
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|srcFS
argument_list|,
name|inputSubDir1
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|srcFS
argument_list|,
name|inputSubDir2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data1
init|=
name|dataset
argument_list|(
literal|100
argument_list|,
literal|33
argument_list|,
literal|43
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|srcFS
argument_list|,
name|inputFile1
argument_list|,
literal|true
argument_list|,
name|data1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data2
init|=
name|dataset
argument_list|(
literal|200
argument_list|,
literal|43
argument_list|,
literal|53
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|srcFS
argument_list|,
name|inputFile2
argument_list|,
literal|true
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data3
init|=
name|dataset
argument_list|(
literal|300
argument_list|,
literal|53
argument_list|,
literal|63
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|srcFS
argument_list|,
name|inputFile3
argument_list|,
literal|true
argument_list|,
name|data3
argument_list|)
expr_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|dstDir
argument_list|,
literal|"outputDir"
argument_list|)
decl_stmt|;
name|runDistCp
argument_list|(
name|inputDir
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertIsDirectory
argument_list|(
name|dstFS
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|verifyFileContents
argument_list|(
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|target
argument_list|,
literal|"inputDir/file1"
argument_list|)
argument_list|,
name|data1
argument_list|)
expr_stmt|;
name|verifyFileContents
argument_list|(
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|target
argument_list|,
literal|"inputDir/subDir1/file2"
argument_list|)
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|verifyFileContents
argument_list|(
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|target
argument_list|,
literal|"inputDir/subDir2/subDir3/file3"
argument_list|)
argument_list|,
name|data3
argument_list|)
expr_stmt|;
block|}
comment|/**    * Executes a test using multiple large files.    *    * @param srcFS source FileSystem    * @param srcDir source directory    * @param dstFS destination FileSystem    * @param dstDir destination directory    * @throws Exception if there is a failure    */
DECL|method|largeFiles (FileSystem srcFS, Path srcDir, FileSystem dstFS, Path dstDir)
specifier|private
name|void
name|largeFiles
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|srcDir
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dstDir
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|inputDir
init|=
operator|new
name|Path
argument_list|(
name|srcDir
argument_list|,
literal|"inputDir"
argument_list|)
decl_stmt|;
name|Path
name|inputFile1
init|=
operator|new
name|Path
argument_list|(
name|inputDir
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|inputFile2
init|=
operator|new
name|Path
argument_list|(
name|inputDir
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|Path
name|inputFile3
init|=
operator|new
name|Path
argument_list|(
name|inputDir
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|srcFS
argument_list|,
name|inputDir
argument_list|)
expr_stmt|;
name|int
name|fileSizeKb
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"scale.test.distcp.file.size.kb"
argument_list|,
literal|10
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|int
name|fileSizeMb
init|=
name|fileSizeKb
operator|*
literal|1024
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"{} with file size {}"
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|fileSizeMb
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data1
init|=
name|dataset
argument_list|(
operator|(
name|fileSizeMb
operator|+
literal|1
operator|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|33
argument_list|,
literal|43
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|srcFS
argument_list|,
name|inputFile1
argument_list|,
literal|true
argument_list|,
name|data1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data2
init|=
name|dataset
argument_list|(
operator|(
name|fileSizeMb
operator|+
literal|2
operator|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|43
argument_list|,
literal|53
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|srcFS
argument_list|,
name|inputFile2
argument_list|,
literal|true
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data3
init|=
name|dataset
argument_list|(
operator|(
name|fileSizeMb
operator|+
literal|3
operator|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|53
argument_list|,
literal|63
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|srcFS
argument_list|,
name|inputFile3
argument_list|,
literal|true
argument_list|,
name|data3
argument_list|)
expr_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|dstDir
argument_list|,
literal|"outputDir"
argument_list|)
decl_stmt|;
name|runDistCp
argument_list|(
name|inputDir
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertIsDirectory
argument_list|(
name|dstFS
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|verifyFileContents
argument_list|(
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|target
argument_list|,
literal|"inputDir/file1"
argument_list|)
argument_list|,
name|data1
argument_list|)
expr_stmt|;
name|verifyFileContents
argument_list|(
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|target
argument_list|,
literal|"inputDir/file2"
argument_list|)
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|verifyFileContents
argument_list|(
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|target
argument_list|,
literal|"inputDir/file3"
argument_list|)
argument_list|,
name|data3
argument_list|)
expr_stmt|;
block|}
comment|/**    * Executes DistCp and asserts that the job finished successfully.    *    * @param src source path    * @param dst destination path    * @throws Exception if there is a failure    */
DECL|method|runDistCp (Path src, Path dst)
specifier|private
name|void
name|runDistCp
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|Exception
block|{
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|src
argument_list|)
argument_list|,
name|dst
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|DistCp
argument_list|(
name|conf
argument_list|,
name|options
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Unexpected null job returned from DistCp execution."
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"DistCp job did not complete."
argument_list|,
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"DistCp job did not complete successfully."
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a directory and any ancestor directories required.    *    * @param fs FileSystem in which to create directories    * @param dir path of directory to create    * @throws Exception if there is a failure    */
DECL|method|mkdirs (FileSystem fs, Path dir)
specifier|private
specifier|static
name|void
name|mkdirs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Failed to mkdir "
operator|+
name|dir
argument_list|,
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

