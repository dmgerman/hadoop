begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|DistCpTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Tests distcp in combination with HDFS XAttrs.  */
end_comment

begin_class
DECL|class|TestDistCpWithXAttrs
specifier|public
class|class
name|TestDistCpWithXAttrs
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
comment|//XAttrs
DECL|field|name1
specifier|private
specifier|static
specifier|final
name|String
name|name1
init|=
literal|"user.a1"
decl_stmt|;
DECL|field|value1
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|value1
init|=
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
DECL|field|name2
specifier|private
specifier|static
specifier|final
name|String
name|name2
init|=
literal|"trusted.a2"
decl_stmt|;
DECL|field|value2
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|value2
init|=
block|{
literal|0x37
block|,
literal|0x38
block|,
literal|0x39
block|}
decl_stmt|;
DECL|field|name3
specifier|private
specifier|static
specifier|final
name|String
name|name3
init|=
literal|"user.a3"
decl_stmt|;
DECL|field|value3
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|value3
init|=
literal|null
decl_stmt|;
DECL|field|name4
specifier|private
specifier|static
specifier|final
name|String
name|name4
init|=
literal|"user.a4"
decl_stmt|;
DECL|field|value4
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|value4
init|=
literal|null
decl_stmt|;
DECL|field|dir1
specifier|private
specifier|static
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
literal|"/src/dir1"
argument_list|)
decl_stmt|;
DECL|field|subDir1
specifier|private
specifier|static
specifier|final
name|Path
name|subDir1
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"subdir1"
argument_list|)
decl_stmt|;
DECL|field|file1
specifier|private
specifier|static
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/src/file1"
argument_list|)
decl_stmt|;
DECL|field|dir2
specifier|private
specifier|static
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
literal|"/src/dir2"
argument_list|)
decl_stmt|;
DECL|field|file2
specifier|private
specifier|static
specifier|final
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
DECL|field|file3
specifier|private
specifier|static
specifier|final
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
DECL|field|file4
specifier|private
specifier|static
specifier|final
name|Path
name|file4
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"file4"
argument_list|)
decl_stmt|;
DECL|field|dstDir1
specifier|private
specifier|static
specifier|final
name|Path
name|dstDir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dstPreserveXAttrs/dir1"
argument_list|)
decl_stmt|;
DECL|field|dstSubDir1
specifier|private
specifier|static
specifier|final
name|Path
name|dstSubDir1
init|=
operator|new
name|Path
argument_list|(
name|dstDir1
argument_list|,
literal|"subdir1"
argument_list|)
decl_stmt|;
DECL|field|dstFile1
specifier|private
specifier|static
specifier|final
name|Path
name|dstFile1
init|=
operator|new
name|Path
argument_list|(
literal|"/dstPreserveXAttrs/file1"
argument_list|)
decl_stmt|;
DECL|field|dstDir2
specifier|private
specifier|static
specifier|final
name|Path
name|dstDir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dstPreserveXAttrs/dir2"
argument_list|)
decl_stmt|;
DECL|field|dstFile2
specifier|private
specifier|static
specifier|final
name|Path
name|dstFile2
init|=
operator|new
name|Path
argument_list|(
name|dstDir2
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
DECL|field|dstFile3
specifier|private
specifier|static
specifier|final
name|Path
name|dstFile3
init|=
operator|new
name|Path
argument_list|(
name|dstDir2
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
DECL|field|dstFile4
specifier|private
specifier|static
specifier|final
name|Path
name|dstFile4
init|=
operator|new
name|Path
argument_list|(
name|dstDir2
argument_list|,
literal|"file4"
argument_list|)
decl_stmt|;
DECL|field|rootedSrcName
specifier|private
specifier|static
specifier|final
name|String
name|rootedSrcName
init|=
literal|"/src"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|initCluster
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|subDir1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|file1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|file2
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|file3
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|file4
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// dir1
name|fs
operator|.
name|setXAttr
argument_list|(
name|dir1
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|dir1
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
comment|// subDir1
name|fs
operator|.
name|setXAttr
argument_list|(
name|subDir1
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|subDir1
argument_list|,
name|name3
argument_list|,
name|value3
argument_list|)
expr_stmt|;
comment|// file1
name|fs
operator|.
name|setXAttr
argument_list|(
name|file1
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|file1
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|file1
argument_list|,
name|name3
argument_list|,
name|value3
argument_list|)
expr_stmt|;
comment|// dir2
name|fs
operator|.
name|setXAttr
argument_list|(
name|dir2
argument_list|,
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
comment|// file2
name|fs
operator|.
name|setXAttr
argument_list|(
name|file2
argument_list|,
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|file2
argument_list|,
name|name4
argument_list|,
name|value4
argument_list|)
expr_stmt|;
comment|// file3
name|fs
operator|.
name|setXAttr
argument_list|(
name|file3
argument_list|,
name|name3
argument_list|,
name|value3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|file3
argument_list|,
name|name4
argument_list|,
name|value4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPreserveXAttrs ()
specifier|public
name|void
name|testPreserveXAttrs
parameter_list|()
throws|throws
name|Exception
block|{
name|DistCpTestUtils
operator|.
name|assertRunDistCp
argument_list|(
name|DistCpConstants
operator|.
name|SUCCESS
argument_list|,
name|rootedSrcName
argument_list|,
literal|"/dstPreserveXAttrs"
argument_list|,
literal|"-px"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// dstDir1
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|DistCpTestUtils
operator|.
name|assertXAttrs
argument_list|(
name|dstDir1
argument_list|,
name|fs
argument_list|,
name|xAttrs
argument_list|)
expr_stmt|;
comment|// dstSubDir1
name|xAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name3
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|DistCpTestUtils
operator|.
name|assertXAttrs
argument_list|(
name|dstSubDir1
argument_list|,
name|fs
argument_list|,
name|xAttrs
argument_list|)
expr_stmt|;
comment|// dstFile1
name|xAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name3
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|DistCpTestUtils
operator|.
name|assertXAttrs
argument_list|(
name|dstFile1
argument_list|,
name|fs
argument_list|,
name|xAttrs
argument_list|)
expr_stmt|;
comment|// dstDir2
name|xAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|DistCpTestUtils
operator|.
name|assertXAttrs
argument_list|(
name|dstDir2
argument_list|,
name|fs
argument_list|,
name|xAttrs
argument_list|)
expr_stmt|;
comment|// dstFile2
name|xAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name4
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|DistCpTestUtils
operator|.
name|assertXAttrs
argument_list|(
name|dstFile2
argument_list|,
name|fs
argument_list|,
name|xAttrs
argument_list|)
expr_stmt|;
comment|// dstFile3
name|xAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name3
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name4
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|DistCpTestUtils
operator|.
name|assertXAttrs
argument_list|(
name|dstFile3
argument_list|,
name|fs
argument_list|,
name|xAttrs
argument_list|)
expr_stmt|;
comment|// dstFile4
name|xAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|DistCpTestUtils
operator|.
name|assertXAttrs
argument_list|(
name|dstFile4
argument_list|,
name|fs
argument_list|,
name|xAttrs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXAttrsNotEnabled ()
specifier|public
name|void
name|testXAttrsNotEnabled
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|restart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|DistCpTestUtils
operator|.
name|assertRunDistCp
argument_list|(
name|DistCpConstants
operator|.
name|XATTRS_NOT_SUPPORTED
argument_list|,
name|rootedSrcName
argument_list|,
literal|"/dstXAttrsNotEnabled"
argument_list|,
literal|"-px"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|restart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testXAttrsNotImplemented ()
specifier|public
name|void
name|testXAttrsNotImplemented
parameter_list|()
throws|throws
name|Exception
block|{
name|DistCpTestUtils
operator|.
name|assertRunDistCp
argument_list|(
name|DistCpConstants
operator|.
name|XATTRS_NOT_SUPPORTED
argument_list|,
name|rootedSrcName
argument_list|,
literal|"stubfs://dstXAttrsNotImplemented"
argument_list|,
literal|"-px"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stub FileSystem implementation used for testing the case of attempting    * distcp with XAttrs preserved on a file system that does not support XAttrs.     * The base class implementation throws UnsupportedOperationException for     * the XAttr methods, so we don't need to override them.    */
DECL|class|StubFileSystem
specifier|public
specifier|static
class|class
name|StubFileSystem
extends|extends
name|FileSystem
block|{
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|URI
operator|.
name|create
argument_list|(
literal|"stubfs:///"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{     }
block|}
comment|/**    * Initialize the cluster, wait for it to become active, and get FileSystem.    *     * @param format if true, format the NameNode and DataNodes before starting up    * @param xAttrsEnabled if true, XAttr support is enabled    * @throws Exception if any step fails    */
DECL|method|initCluster (boolean format, boolean xAttrsEnabled)
specifier|private
specifier|static
name|void
name|initCluster
parameter_list|(
name|boolean
name|format
parameter_list|,
name|boolean
name|xAttrsEnabled
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_XATTRS_ENABLED_KEY
argument_list|,
name|xAttrsEnabled
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"stubfs:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.stubfs.impl"
argument_list|,
name|StubFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
name|format
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
comment|/**    * Restarts the cluster with XAttrs enabled or disabled.    *     * @param xAttrsEnabled if true, XAttr support is enabled    * @throws Exception if any step fails    */
DECL|method|restart (boolean xAttrsEnabled)
specifier|private
specifier|static
name|void
name|restart
parameter_list|(
name|boolean
name|xAttrsEnabled
parameter_list|)
throws|throws
name|Exception
block|{
name|shutdown
argument_list|()
expr_stmt|;
name|initCluster
argument_list|(
literal|false
argument_list|,
name|xAttrsEnabled
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

