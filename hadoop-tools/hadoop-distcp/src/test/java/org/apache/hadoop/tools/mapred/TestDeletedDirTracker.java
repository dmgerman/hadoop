begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|CopyListingFileStatus
import|;
end_import

begin_comment
comment|/**  * Unit tests of the deleted directory tracker.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"RedundantThrows"
argument_list|)
DECL|class|TestDeletedDirTracker
specifier|public
class|class
name|TestDeletedDirTracker
extends|extends
name|Assert
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDeletedDirTracker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT
specifier|public
specifier|static
specifier|final
name|Path
name|ROOT
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://namenode/"
argument_list|)
decl_stmt|;
DECL|field|DIR1
specifier|public
specifier|static
specifier|final
name|Path
name|DIR1
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
DECL|field|FILE0
specifier|public
specifier|static
specifier|final
name|Path
name|FILE0
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
DECL|field|DIR1_FILE1
specifier|public
specifier|static
specifier|final
name|Path
name|DIR1_FILE1
init|=
operator|new
name|Path
argument_list|(
name|DIR1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
DECL|field|DIR1_FILE2
specifier|public
specifier|static
specifier|final
name|Path
name|DIR1_FILE2
init|=
operator|new
name|Path
argument_list|(
name|DIR1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
DECL|field|DIR1_DIR3
specifier|public
specifier|static
specifier|final
name|Path
name|DIR1_DIR3
init|=
operator|new
name|Path
argument_list|(
name|DIR1
argument_list|,
literal|"dir3"
argument_list|)
decl_stmt|;
DECL|field|DIR1_DIR3_DIR4
specifier|public
specifier|static
specifier|final
name|Path
name|DIR1_DIR3_DIR4
init|=
operator|new
name|Path
argument_list|(
name|DIR1_DIR3
argument_list|,
literal|"dir4"
argument_list|)
decl_stmt|;
DECL|field|DIR1_DIR3_DIR4_FILE_3
specifier|public
specifier|static
specifier|final
name|Path
name|DIR1_DIR3_DIR4_FILE_3
init|=
operator|new
name|Path
argument_list|(
name|DIR1_DIR3_DIR4
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
DECL|field|tracker
specifier|private
name|DeletedDirTracker
name|tracker
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|tracker
operator|=
operator|new
name|DeletedDirTracker
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|tracker
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNoRootDir ()
specifier|public
name|void
name|testNoRootDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|shouldDelete
argument_list|(
name|ROOT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNoRootFile ()
specifier|public
name|void
name|testNoRootFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|shouldDelete
argument_list|(
name|dirStatus
argument_list|(
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileInRootDir ()
specifier|public
name|void
name|testFileInRootDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectShouldDelete
argument_list|(
name|FILE0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectShouldDelete
argument_list|(
name|FILE0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteDir1 ()
specifier|public
name|void
name|testDeleteDir1
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectShouldDelete
argument_list|(
name|DIR1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expectShouldNotDelete
argument_list|(
name|DIR1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expectShouldNotDelete
argument_list|(
name|DIR1_FILE1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectNotCached
argument_list|(
name|DIR1_FILE1
argument_list|)
expr_stmt|;
name|expectShouldNotDelete
argument_list|(
name|DIR1_DIR3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expectCached
argument_list|(
name|DIR1_DIR3
argument_list|)
expr_stmt|;
name|expectShouldNotDelete
argument_list|(
name|DIR1_FILE2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectShouldNotDelete
argument_list|(
name|DIR1_DIR3_DIR4_FILE_3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectShouldNotDelete
argument_list|(
name|DIR1_DIR3_DIR4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expectShouldNotDelete
argument_list|(
name|DIR1_DIR3_DIR4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteDirDeep ()
specifier|public
name|void
name|testDeleteDirDeep
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectShouldDelete
argument_list|(
name|DIR1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expectShouldNotDelete
argument_list|(
name|DIR1_DIR3_DIR4_FILE_3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeletePerfectCache ()
specifier|public
name|void
name|testDeletePerfectCache
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// run a larger scale test. Also use the ordering we'd expect for a sorted
comment|// listing, which we implement by sorting the paths
name|List
argument_list|<
name|CopyListingFileStatus
argument_list|>
name|statusList
init|=
name|buildStatusList
argument_list|()
decl_stmt|;
comment|// cache is bigger than the status list
name|tracker
operator|=
operator|new
name|DeletedDirTracker
argument_list|(
name|statusList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AtomicInteger
name|deletedFiles
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|deletedDirs
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|deletePaths
argument_list|(
name|statusList
argument_list|,
name|deletedFiles
argument_list|,
name|deletedDirs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deletedFiles
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteFullCache ()
specifier|public
name|void
name|testDeleteFullCache
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// run a larger scale test. Also use the ordering we'd expect for a sorted
comment|// listing, which we implement by sorting the paths
name|AtomicInteger
name|deletedFiles
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|deletedDirs
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|deletePaths
argument_list|(
name|buildStatusList
argument_list|()
argument_list|,
name|deletedFiles
argument_list|,
name|deletedDirs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deletedFiles
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteMediumCache ()
specifier|public
name|void
name|testDeleteMediumCache
parameter_list|()
throws|throws
name|Throwable
block|{
name|tracker
operator|=
operator|new
name|DeletedDirTracker
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|AtomicInteger
name|deletedFiles
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|deletedDirs
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|deletePaths
argument_list|(
name|buildStatusList
argument_list|()
argument_list|,
name|deletedFiles
argument_list|,
name|deletedDirs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deletedFiles
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteFullSmallCache ()
specifier|public
name|void
name|testDeleteFullSmallCache
parameter_list|()
throws|throws
name|Throwable
block|{
name|tracker
operator|=
operator|new
name|DeletedDirTracker
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|AtomicInteger
name|deletedFiles
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|deletedDirs
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|deletePaths
argument_list|(
name|buildStatusList
argument_list|()
argument_list|,
name|deletedFiles
argument_list|,
name|deletedDirs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deletedFiles
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|deletePaths (final List<CopyListingFileStatus> statusList, final AtomicInteger deletedFiles, final AtomicInteger deletedDirs)
specifier|protected
name|void
name|deletePaths
parameter_list|(
specifier|final
name|List
argument_list|<
name|CopyListingFileStatus
argument_list|>
name|statusList
parameter_list|,
specifier|final
name|AtomicInteger
name|deletedFiles
parameter_list|,
specifier|final
name|AtomicInteger
name|deletedDirs
parameter_list|)
block|{
for|for
control|(
name|CopyListingFileStatus
name|status
range|:
name|statusList
control|)
block|{
if|if
condition|(
name|shouldDelete
argument_list|(
name|status
argument_list|)
condition|)
block|{
name|AtomicInteger
name|r
init|=
name|status
operator|.
name|isDirectory
argument_list|()
condition|?
name|deletedDirs
else|:
name|deletedFiles
decl_stmt|;
name|r
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Delete {}"
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"After proposing to delete {} paths, {} directories and {} files"
operator|+
literal|" were explicitly deleted from a cache {}"
argument_list|,
name|statusList
operator|.
name|size
argument_list|()
argument_list|,
name|deletedDirs
argument_list|,
name|deletedFiles
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build a large YMD status list; 30 * 12 * 10 directories,    * each with 24 files.    * @return a sorted list.    */
DECL|method|buildStatusList ()
specifier|protected
name|List
argument_list|<
name|CopyListingFileStatus
argument_list|>
name|buildStatusList
parameter_list|()
block|{
name|List
argument_list|<
name|CopyListingFileStatus
argument_list|>
name|statusList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// recursive create of many files
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<=
literal|20
condition|;
name|y
operator|++
control|)
block|{
name|Path
name|yp
init|=
operator|new
name|Path
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"YEAR=%d"
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|statusList
operator|.
name|add
argument_list|(
name|dirStatus
argument_list|(
name|yp
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|1
init|;
name|m
operator|<=
literal|12
condition|;
name|m
operator|++
control|)
block|{
name|Path
name|ymp
init|=
operator|new
name|Path
argument_list|(
name|yp
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"MONTH=%d"
argument_list|,
name|m
argument_list|)
argument_list|)
decl_stmt|;
name|statusList
operator|.
name|add
argument_list|(
name|dirStatus
argument_list|(
name|ymp
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<
literal|30
condition|;
name|d
operator|++
control|)
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|ymp
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"DAY=%02d"
argument_list|,
name|d
argument_list|)
argument_list|)
decl_stmt|;
name|statusList
operator|.
name|add
argument_list|(
name|dirStatus
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|h
init|=
literal|0
init|;
name|h
operator|<
literal|24
condition|;
name|h
operator|++
control|)
block|{
name|statusList
operator|.
name|add
argument_list|(
name|fileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%02d00.avro"
argument_list|,
name|h
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// sort on paths.
name|Collections
operator|.
name|sort
argument_list|(
name|statusList
argument_list|,
parameter_list|(
name|l
parameter_list|,
name|r
parameter_list|)
lambda|->
name|l
operator|.
name|getPath
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|statusList
return|;
block|}
DECL|method|expectShouldDelete (final Path path, boolean isDir)
specifier|private
name|void
name|expectShouldDelete
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
name|boolean
name|isDir
parameter_list|)
block|{
name|expectShouldDelete
argument_list|(
name|newStatus
argument_list|(
name|path
argument_list|,
name|isDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectShouldDelete (CopyListingFileStatus status)
specifier|private
name|void
name|expectShouldDelete
parameter_list|(
name|CopyListingFileStatus
name|status
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected shouldDelete of "
operator|+
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
name|shouldDelete
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldDelete (final Path path, final boolean isDir)
specifier|private
name|boolean
name|shouldDelete
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|isDir
parameter_list|)
block|{
return|return
name|shouldDelete
argument_list|(
name|newStatus
argument_list|(
name|path
argument_list|,
name|isDir
argument_list|)
argument_list|)
return|;
block|}
DECL|method|shouldDelete (final CopyListingFileStatus status)
specifier|private
name|boolean
name|shouldDelete
parameter_list|(
specifier|final
name|CopyListingFileStatus
name|status
parameter_list|)
block|{
return|return
name|tracker
operator|.
name|shouldDelete
argument_list|(
name|status
argument_list|)
return|;
block|}
DECL|method|expectShouldNotDelete (final Path path, boolean isDir)
specifier|private
name|void
name|expectShouldNotDelete
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
name|boolean
name|isDir
parameter_list|)
block|{
name|expectShouldNotDelete
argument_list|(
name|newStatus
argument_list|(
name|path
argument_list|,
name|isDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectShouldNotDelete (CopyListingFileStatus status)
specifier|private
name|void
name|expectShouldNotDelete
parameter_list|(
name|CopyListingFileStatus
name|status
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Expected !shouldDelete of "
operator|+
name|status
operator|.
name|getPath
argument_list|()
operator|+
literal|" but got true"
argument_list|,
name|shouldDelete
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newStatus (final Path path, final boolean isDir)
specifier|private
name|CopyListingFileStatus
name|newStatus
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|isDir
parameter_list|)
block|{
return|return
operator|new
name|CopyListingFileStatus
argument_list|(
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
name|isDir
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|path
argument_list|)
argument_list|)
return|;
block|}
DECL|method|dirStatus (final Path path)
specifier|private
name|CopyListingFileStatus
name|dirStatus
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
return|return
name|newStatus
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|fileStatus (final Path path)
specifier|private
name|CopyListingFileStatus
name|fileStatus
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
return|return
name|newStatus
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|expectCached (final Path path)
specifier|private
name|void
name|expectCached
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Path "
operator|+
name|path
operator|+
literal|" is not in the cache of "
operator|+
name|tracker
argument_list|,
name|tracker
operator|.
name|isContained
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectNotCached (final Path path)
specifier|private
name|void
name|expectNotCached
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Path "
operator|+
name|path
operator|+
literal|" is in the cache of "
operator|+
name|tracker
argument_list|,
name|tracker
operator|.
name|isContained
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

