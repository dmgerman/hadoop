begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|TestRetriableCommand
specifier|public
class|class
name|TestRetriableCommand
block|{
DECL|class|MyRetriableCommand
specifier|private
specifier|static
class|class
name|MyRetriableCommand
extends|extends
name|RetriableCommand
block|{
DECL|field|succeedAfter
specifier|private
name|int
name|succeedAfter
decl_stmt|;
DECL|field|retryCount
specifier|private
name|int
name|retryCount
init|=
literal|0
decl_stmt|;
DECL|method|MyRetriableCommand (int succeedAfter)
specifier|public
name|MyRetriableCommand
parameter_list|(
name|int
name|succeedAfter
parameter_list|)
block|{
name|super
argument_list|(
literal|"MyRetriableCommand"
argument_list|)
expr_stmt|;
name|this
operator|.
name|succeedAfter
operator|=
name|succeedAfter
expr_stmt|;
block|}
DECL|method|MyRetriableCommand (int succeedAfter, RetryPolicy retryPolicy)
specifier|public
name|MyRetriableCommand
parameter_list|(
name|int
name|succeedAfter
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|)
block|{
name|super
argument_list|(
literal|"MyRetriableCommand"
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|this
operator|.
name|succeedAfter
operator|=
name|succeedAfter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute (Object... arguments)
specifier|protected
name|Object
name|doExecute
parameter_list|(
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|++
name|retryCount
operator|<
name|succeedAfter
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Transient failure#"
operator|+
name|retryCount
argument_list|)
throw|;
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRetriableCommand ()
specifier|public
name|void
name|testRetriableCommand
parameter_list|()
block|{
try|try
block|{
operator|new
name|MyRetriableCommand
argument_list|(
literal|5
argument_list|)
operator|.
name|execute
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|MyRetriableCommand
argument_list|(
literal|3
argument_list|)
operator|.
name|execute
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|MyRetriableCommand
argument_list|(
literal|5
argument_list|,
name|RetryPolicies
operator|.
name|retryUpToMaximumCountWithFixedSleep
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

