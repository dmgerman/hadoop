begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|ProducerConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|WorkReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|WorkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|WorkRequestProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Exception
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Integer
import|;
end_import

begin_class
DECL|class|TestProducerConsumer
specifier|public
class|class
name|TestProducerConsumer
block|{
DECL|class|CopyProcessor
specifier|public
class|class
name|CopyProcessor
implements|implements
name|WorkRequestProcessor
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
block|{
DECL|method|processItem (WorkRequest<Integer> workRequest)
specifier|public
name|WorkReport
argument_list|<
name|Integer
argument_list|>
name|processItem
parameter_list|(
name|WorkRequest
argument_list|<
name|Integer
argument_list|>
name|workRequest
parameter_list|)
block|{
name|Integer
name|item
init|=
operator|new
name|Integer
argument_list|(
name|workRequest
operator|.
name|getItem
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|WorkReport
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|item
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
DECL|class|ExceptionProcessor
specifier|public
class|class
name|ExceptionProcessor
implements|implements
name|WorkRequestProcessor
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"null"
argument_list|)
DECL|method|processItem (WorkRequest<Integer> workRequest)
specifier|public
name|WorkReport
argument_list|<
name|Integer
argument_list|>
name|processItem
parameter_list|(
name|WorkRequest
argument_list|<
name|Integer
argument_list|>
name|workRequest
parameter_list|)
block|{
try|try
block|{
name|Integer
name|item
init|=
literal|null
decl_stmt|;
name|item
operator|.
name|intValue
argument_list|()
expr_stmt|;
comment|// Throw NULL pointer exception.
comment|// We should never be here (null pointer exception above)
return|return
operator|new
name|WorkReport
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|item
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Integer
name|item
init|=
operator|new
name|Integer
argument_list|(
name|workRequest
operator|.
name|getItem
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|WorkReport
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|item
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleProducerConsumer ()
specifier|public
name|void
name|testSimpleProducerConsumer
parameter_list|()
block|{
name|ProducerConsumer
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|worker
init|=
operator|new
name|ProducerConsumer
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|worker
operator|.
name|addWorker
argument_list|(
operator|new
name|CopyProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|worker
operator|.
name|put
argument_list|(
operator|new
name|WorkRequest
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|WorkReport
argument_list|<
name|Integer
argument_list|>
name|report
init|=
name|worker
operator|.
name|take
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|report
operator|.
name|getItem
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultipleProducerConsumer ()
specifier|public
name|void
name|testMultipleProducerConsumer
parameter_list|()
block|{
name|ProducerConsumer
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|workers
init|=
operator|new
name|ProducerConsumer
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|workers
operator|.
name|addWorker
argument_list|(
operator|new
name|CopyProcessor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|int
name|numRequests
init|=
literal|2000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRequests
condition|;
name|i
operator|++
control|)
block|{
name|workers
operator|.
name|put
argument_list|(
operator|new
name|WorkRequest
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|i
operator|+
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|sum
operator|+=
name|i
operator|+
literal|42
expr_stmt|;
block|}
name|int
name|numReports
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|workers
operator|.
name|getWorkCnt
argument_list|()
operator|>
literal|0
condition|)
block|{
name|WorkReport
argument_list|<
name|Integer
argument_list|>
name|report
init|=
name|workers
operator|.
name|blockingTake
argument_list|()
decl_stmt|;
name|sum
operator|-=
name|report
operator|.
name|getItem
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|numReports
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sum
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numRequests
argument_list|,
name|numReports
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionProducerConsumer ()
specifier|public
name|void
name|testExceptionProducerConsumer
parameter_list|()
block|{
name|ProducerConsumer
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|worker
init|=
operator|new
name|ProducerConsumer
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|worker
operator|.
name|addWorker
argument_list|(
operator|new
name|ExceptionProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|worker
operator|.
name|put
argument_list|(
operator|new
name|WorkRequest
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|WorkReport
argument_list|<
name|Integer
argument_list|>
name|report
init|=
name|worker
operator|.
name|take
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|report
operator|.
name|getItem
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|report
operator|.
name|getSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|report
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

