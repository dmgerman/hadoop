begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|TestRegexCopyFilter
specifier|public
class|class
name|TestRegexCopyFilter
block|{
annotation|@
name|Test
DECL|method|testShouldCopyTrue ()
specifier|public
name|void
name|testShouldCopyTrue
parameter_list|()
block|{
name|List
argument_list|<
name|Pattern
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|RegexCopyFilter
name|regexCopyFilter
init|=
operator|new
name|RegexCopyFilter
argument_list|(
literal|"fakeFile"
argument_list|)
decl_stmt|;
name|regexCopyFilter
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|Path
name|shouldCopyPath
init|=
operator|new
name|Path
argument_list|(
literal|"/user/bar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|regexCopyFilter
operator|.
name|shouldCopy
argument_list|(
name|shouldCopyPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShouldCopyFalse ()
specifier|public
name|void
name|testShouldCopyFalse
parameter_list|()
block|{
name|List
argument_list|<
name|Pattern
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*test.*"
argument_list|)
argument_list|)
expr_stmt|;
name|RegexCopyFilter
name|regexCopyFilter
init|=
operator|new
name|RegexCopyFilter
argument_list|(
literal|"fakeFile"
argument_list|)
decl_stmt|;
name|regexCopyFilter
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|Path
name|shouldNotCopyPath
init|=
operator|new
name|Path
argument_list|(
literal|"/user/testing"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|regexCopyFilter
operator|.
name|shouldCopy
argument_list|(
name|shouldNotCopyPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShouldCopyWithMultipleFilters ()
specifier|public
name|void
name|testShouldCopyWithMultipleFilters
parameter_list|()
block|{
name|List
argument_list|<
name|Pattern
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*test.*"
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/user/b.*"
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*_SUCCESS"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|toCopy
init|=
name|getTestPaths
argument_list|()
decl_stmt|;
name|int
name|shouldCopyCount
init|=
literal|0
decl_stmt|;
name|RegexCopyFilter
name|regexCopyFilter
init|=
operator|new
name|RegexCopyFilter
argument_list|(
literal|"fakeFile"
argument_list|)
decl_stmt|;
name|regexCopyFilter
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|toCopy
control|)
block|{
if|if
condition|(
name|regexCopyFilter
operator|.
name|shouldCopy
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|shouldCopyCount
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|shouldCopyCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShouldExcludeAll ()
specifier|public
name|void
name|testShouldExcludeAll
parameter_list|()
block|{
name|List
argument_list|<
name|Pattern
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*test.*"
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/user/b.*"
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*"
argument_list|)
argument_list|)
expr_stmt|;
comment|// exclude everything
name|List
argument_list|<
name|Path
argument_list|>
name|toCopy
init|=
name|getTestPaths
argument_list|()
decl_stmt|;
name|int
name|shouldCopyCount
init|=
literal|0
decl_stmt|;
name|RegexCopyFilter
name|regexCopyFilter
init|=
operator|new
name|RegexCopyFilter
argument_list|(
literal|"fakeFile"
argument_list|)
decl_stmt|;
name|regexCopyFilter
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|toCopy
control|)
block|{
if|if
condition|(
name|regexCopyFilter
operator|.
name|shouldCopy
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|shouldCopyCount
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shouldCopyCount
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestPaths ()
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|getTestPaths
parameter_list|()
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|toCopy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|toCopy
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|toCopy
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo/_SUCCESS"
argument_list|)
argument_list|)
expr_stmt|;
name|toCopy
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hive/test_data"
argument_list|)
argument_list|)
expr_stmt|;
name|toCopy
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|toCopy
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|toCopy
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/mapred/.staging_job"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|toCopy
return|;
block|}
block|}
end_class

end_unit

