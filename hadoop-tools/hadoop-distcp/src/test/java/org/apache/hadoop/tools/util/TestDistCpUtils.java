begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpOptions
operator|.
name|FileAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_class
DECL|class|TestDistCpUtils
specifier|public
class|class
name|TestDistCpUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDistCpUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
specifier|static
specifier|final
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|create ()
specifier|public
specifier|static
name|void
name|create
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|destroy ()
specifier|public
specifier|static
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetRelativePathRoot ()
specifier|public
name|void
name|testGetRelativePathRoot
parameter_list|()
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/abc"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/abc/xyz/file"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
name|root
argument_list|,
name|child
argument_list|)
argument_list|,
literal|"/xyz/file"
argument_list|)
expr_stmt|;
name|root
operator|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|child
operator|=
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
name|root
argument_list|,
name|child
argument_list|)
argument_list|,
literal|"/a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPackAttributes ()
specifier|public
name|void
name|testPackAttributes
parameter_list|()
block|{
name|EnumSet
argument_list|<
name|FileAttribute
argument_list|>
name|attributes
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FileAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|attributes
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|FileAttribute
operator|.
name|REPLICATION
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|attributes
argument_list|)
argument_list|,
literal|"R"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attributes
argument_list|,
name|DistCpUtils
operator|.
name|unpackAttributes
argument_list|(
literal|"R"
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|FileAttribute
operator|.
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|attributes
argument_list|)
argument_list|,
literal|"RB"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attributes
argument_list|,
name|DistCpUtils
operator|.
name|unpackAttributes
argument_list|(
literal|"RB"
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|FileAttribute
operator|.
name|USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|attributes
argument_list|)
argument_list|,
literal|"RBU"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attributes
argument_list|,
name|DistCpUtils
operator|.
name|unpackAttributes
argument_list|(
literal|"RBU"
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|FileAttribute
operator|.
name|GROUP
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|attributes
argument_list|)
argument_list|,
literal|"RBUG"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attributes
argument_list|,
name|DistCpUtils
operator|.
name|unpackAttributes
argument_list|(
literal|"RBUG"
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|FileAttribute
operator|.
name|PERMISSION
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|attributes
argument_list|)
argument_list|,
literal|"RBUGP"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attributes
argument_list|,
name|DistCpUtils
operator|.
name|unpackAttributes
argument_list|(
literal|"RBUGP"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreserve ()
specifier|public
name|void
name|testPreserve
parameter_list|()
block|{
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|FileAttribute
argument_list|>
name|attributes
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FileAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/abc"
argument_list|)
decl_stmt|;
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/src"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|FileStatus
name|srcStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|FsPermission
name|noPerm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|noPerm
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|path
argument_list|,
literal|"nobody"
argument_list|,
literal|"nobody"
argument_list|)
expr_stmt|;
name|DistCpUtils
operator|.
name|preserve
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|srcStatus
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|FileStatus
name|target
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|target
operator|.
name|getPermission
argument_list|()
argument_list|,
name|noPerm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|target
operator|.
name|getOwner
argument_list|()
argument_list|,
literal|"nobody"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|target
operator|.
name|getGroup
argument_list|()
argument_list|,
literal|"nobody"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|FileAttribute
operator|.
name|PERMISSION
argument_list|)
expr_stmt|;
name|DistCpUtils
operator|.
name|preserve
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|srcStatus
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|target
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|target
operator|.
name|getPermission
argument_list|()
argument_list|,
name|srcStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|target
operator|.
name|getOwner
argument_list|()
argument_list|,
literal|"nobody"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|target
operator|.
name|getGroup
argument_list|()
argument_list|,
literal|"nobody"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|FileAttribute
operator|.
name|GROUP
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|FileAttribute
operator|.
name|USER
argument_list|)
expr_stmt|;
name|DistCpUtils
operator|.
name|preserve
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|srcStatus
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|target
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|target
operator|.
name|getPermission
argument_list|()
argument_list|,
name|srcStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|target
operator|.
name|getOwner
argument_list|()
argument_list|,
name|srcStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|target
operator|.
name|getGroup
argument_list|()
argument_list|,
name|srcStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Preserve test failure"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|rand
specifier|private
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|createTestSetup (FileSystem fs)
specifier|public
specifier|static
name|String
name|createTestSetup
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTestSetup
argument_list|(
literal|"/tmp1"
argument_list|,
name|fs
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createTestSetup (FileSystem fs, FsPermission perm)
specifier|public
specifier|static
name|String
name|createTestSetup
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FsPermission
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTestSetup
argument_list|(
literal|"/tmp1"
argument_list|,
name|fs
argument_list|,
name|perm
argument_list|)
return|;
block|}
DECL|method|createTestSetup (String baseDir, FileSystem fs, FsPermission perm)
specifier|public
specifier|static
name|String
name|createTestSetup
parameter_list|(
name|String
name|baseDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|FsPermission
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|base
init|=
name|getBase
argument_list|(
name|baseDir
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/newTest/hello/world1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/newTest/hello/world2/newworld"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/newTest/hello/world3/oldworld"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/newTest"
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/newTest/hello"
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/newTest/hello/world1"
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/newTest/hello/world2"
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/newTest/hello/world2/newworld"
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/newTest/hello/world3"
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/newTest/hello/world3/oldworld"
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|base
operator|+
literal|"/newTest/1"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|base
operator|+
literal|"/newTest/hello/2"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|base
operator|+
literal|"/newTest/hello/world3/oldworld/3"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|base
operator|+
literal|"/newTest/hello/world2/4"
argument_list|)
expr_stmt|;
return|return
name|base
return|;
block|}
DECL|method|getBase (String base)
specifier|private
specifier|static
name|String
name|getBase
parameter_list|(
name|String
name|base
parameter_list|)
block|{
name|String
name|location
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|base
operator|+
literal|"/"
operator|+
name|location
return|;
block|}
DECL|method|delete (FileSystem fs, String path)
specifier|public
specifier|static
name|void
name|delete
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|path
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFile (FileSystem fs, String filePath)
specifier|public
specifier|static
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|filePath
argument_list|)
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|checkIfFoldersAreInSync (FileSystem fs, String targetBase, String sourceBase)
specifier|public
specifier|static
name|boolean
name|checkIfFoldersAreInSync
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|targetBase
parameter_list|,
name|String
name|sourceBase
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|base
init|=
operator|new
name|Path
argument_list|(
name|targetBase
argument_list|)
decl_stmt|;
name|Stack
argument_list|<
name|Path
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|base
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|file
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
continue|continue;
name|FileStatus
index|[]
name|fStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|fStatus
operator|==
literal|null
operator|||
name|fStatus
operator|.
name|length
operator|==
literal|0
condition|)
continue|continue;
for|for
control|(
name|FileStatus
name|status
range|:
name|fStatus
control|)
block|{
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|stack
operator|.
name|push
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|sourceBase
operator|+
literal|"/"
operator|+
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
operator|new
name|Path
argument_list|(
name|targetBase
argument_list|)
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

