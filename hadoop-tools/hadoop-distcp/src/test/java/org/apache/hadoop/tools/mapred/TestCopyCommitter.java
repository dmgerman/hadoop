begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|JobContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|CopyListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpOptions
operator|.
name|FileAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|GlobbedCopyListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|TestDistCpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestCopyCommitter
specifier|public
class|class
name|TestCopyCommitter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCopyCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rand
specifier|private
specifier|static
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|CREDENTIALS
specifier|private
specifier|static
specifier|final
name|Credentials
name|CREDENTIALS
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
DECL|field|PORT
specifier|public
specifier|static
specifier|final
name|int
name|PORT
init|=
literal|39737
decl_stmt|;
DECL|field|config
specifier|private
specifier|static
name|Configuration
name|config
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|method|getJobForClient ()
specifier|private
specifier|static
name|Job
name|getJobForClient
parameter_list|()
throws|throws
name|IOException
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
literal|"localhost:"
operator|+
name|PORT
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|NullInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|create ()
specifier|public
specifier|static
name|void
name|create
parameter_list|()
throws|throws
name|IOException
block|{
name|config
operator|=
name|getJobForClient
argument_list|()
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|config
operator|.
name|setLong
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TOTAL_BYTES_TO_BE_COPIED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|destroy ()
specifier|public
specifier|static
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|createMetaFolder ()
specifier|public
name|void
name|createMetaFolder
parameter_list|()
block|{
name|config
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_META_FOLDER
argument_list|,
literal|"/meta"
argument_list|)
expr_stmt|;
comment|// Unset listing file path since the config is shared by
comment|// multiple tests, and some test doesn't set it, such as
comment|// testNoCommitAction, but the distcp code will check it.
name|config
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_LISTING_FILE_PATH
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Path
name|meta
init|=
operator|new
name|Path
argument_list|(
literal|"/meta"
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while creating meta folder"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unable to create meta folder"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|cleanupMetaFolder ()
specifier|public
name|void
name|cleanupMetaFolder
parameter_list|()
block|{
name|Path
name|meta
init|=
operator|new
name|Path
argument_list|(
literal|"/meta"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|meta
argument_list|)
condition|)
block|{
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|meta
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected meta folder to be deleted"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while cleaning up folder"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unable to clean up meta folder"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoCommitAction ()
specifier|public
name|void
name|testNoCommitAction
parameter_list|()
block|{
name|TaskAttemptContext
name|taskAttemptContext
init|=
name|getTaskAttemptContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|JobContext
name|jobContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|taskAttemptContext
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|taskAttemptContext
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|OutputCommitter
name|committer
init|=
operator|new
name|CopyCommitter
argument_list|(
literal|null
argument_list|,
name|taskAttemptContext
argument_list|)
decl_stmt|;
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|taskAttemptContext
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|"Commit Successful"
argument_list|)
expr_stmt|;
comment|//Test for idempotent commit
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|taskAttemptContext
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|"Commit Successful"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Commit failed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPreserveStatus ()
specifier|public
name|void
name|testPreserveStatus
parameter_list|()
block|{
name|TaskAttemptContext
name|taskAttemptContext
init|=
name|getTaskAttemptContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|JobContext
name|jobContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|taskAttemptContext
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|taskAttemptContext
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|jobContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|sourceBase
decl_stmt|;
name|String
name|targetBase
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OutputCommitter
name|committer
init|=
operator|new
name|CopyCommitter
argument_list|(
literal|null
argument_list|,
name|taskAttemptContext
argument_list|)
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FsPermission
name|sourcePerm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|511
argument_list|)
decl_stmt|;
name|FsPermission
name|initialPerm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|448
argument_list|)
decl_stmt|;
name|sourceBase
operator|=
name|TestDistCpUtils
operator|.
name|createTestSetup
argument_list|(
name|fs
argument_list|,
name|sourcePerm
argument_list|)
expr_stmt|;
name|targetBase
operator|=
name|TestDistCpUtils
operator|.
name|createTestSetup
argument_list|(
name|fs
argument_list|,
name|initialPerm
argument_list|)
expr_stmt|;
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Path
argument_list|(
name|sourceBase
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/out"
argument_list|)
argument_list|)
decl_stmt|;
name|options
operator|.
name|preserve
argument_list|(
name|FileAttribute
operator|.
name|PERMISSION
argument_list|)
expr_stmt|;
name|options
operator|.
name|appendToConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setTargetPathExists
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CopyListing
name|listing
init|=
operator|new
name|GlobbedCopyListing
argument_list|(
name|conf
argument_list|,
name|CREDENTIALS
argument_list|)
decl_stmt|;
name|Path
name|listingFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp1/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|listing
operator|.
name|buildListing
argument_list|(
name|listingFile
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_WORK_PATH
argument_list|,
name|targetBase
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|checkDirectoryPermissions
argument_list|(
name|fs
argument_list|,
name|targetBase
argument_list|,
name|sourcePerm
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Permission don't match"
argument_list|)
expr_stmt|;
block|}
comment|//Test for idempotent commit
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|checkDirectoryPermissions
argument_list|(
name|fs
argument_list|,
name|targetBase
argument_list|,
name|sourcePerm
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Permission don't match"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing for preserve status"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Preserve status failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_PRESERVE_STATUS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteMissing ()
specifier|public
name|void
name|testDeleteMissing
parameter_list|()
block|{
name|TaskAttemptContext
name|taskAttemptContext
init|=
name|getTaskAttemptContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|JobContext
name|jobContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|taskAttemptContext
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|taskAttemptContext
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|jobContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|sourceBase
decl_stmt|;
name|String
name|targetBase
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OutputCommitter
name|committer
init|=
operator|new
name|CopyCommitter
argument_list|(
literal|null
argument_list|,
name|taskAttemptContext
argument_list|)
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|sourceBase
operator|=
name|TestDistCpUtils
operator|.
name|createTestSetup
argument_list|(
name|fs
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|targetBase
operator|=
name|TestDistCpUtils
operator|.
name|createTestSetup
argument_list|(
name|fs
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|targetBaseAdd
init|=
name|TestDistCpUtils
operator|.
name|createTestSetup
argument_list|(
name|fs
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|targetBaseAdd
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|targetBase
argument_list|)
argument_list|)
expr_stmt|;
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Path
argument_list|(
name|sourceBase
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/out"
argument_list|)
argument_list|)
decl_stmt|;
name|options
operator|.
name|setSyncFolder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDeleteMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|appendToConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CopyListing
name|listing
init|=
operator|new
name|GlobbedCopyListing
argument_list|(
name|conf
argument_list|,
name|CREDENTIALS
argument_list|)
decl_stmt|;
name|Path
name|listingFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp1/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|listing
operator|.
name|buildListing
argument_list|(
name|listingFile
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_WORK_PATH
argument_list|,
name|targetBase
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_FINAL_PATH
argument_list|,
name|targetBase
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|TestDistCpUtils
operator|.
name|checkIfFoldersAreInSync
argument_list|(
name|fs
argument_list|,
name|targetBase
argument_list|,
name|sourceBase
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Source and target folders are not in sync"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|TestDistCpUtils
operator|.
name|checkIfFoldersAreInSync
argument_list|(
name|fs
argument_list|,
name|sourceBase
argument_list|,
name|targetBase
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Source and target folders are not in sync"
argument_list|)
expr_stmt|;
block|}
comment|//Test for idempotent commit
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|TestDistCpUtils
operator|.
name|checkIfFoldersAreInSync
argument_list|(
name|fs
argument_list|,
name|targetBase
argument_list|,
name|sourceBase
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Source and target folders are not in sync"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|TestDistCpUtils
operator|.
name|checkIfFoldersAreInSync
argument_list|(
name|fs
argument_list|,
name|sourceBase
argument_list|,
name|targetBase
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Source and target folders are not in sync"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing for delete missing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Delete missing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_DELETE_MISSING
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteMissingFlatInterleavedFiles ()
specifier|public
name|void
name|testDeleteMissingFlatInterleavedFiles
parameter_list|()
block|{
name|TaskAttemptContext
name|taskAttemptContext
init|=
name|getTaskAttemptContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|JobContext
name|jobContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|taskAttemptContext
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|taskAttemptContext
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|jobContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|sourceBase
decl_stmt|;
name|String
name|targetBase
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OutputCommitter
name|committer
init|=
operator|new
name|CopyCommitter
argument_list|(
literal|null
argument_list|,
name|taskAttemptContext
argument_list|)
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|sourceBase
operator|=
literal|"/tmp1/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|targetBase
operator|=
literal|"/tmp1/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|sourceBase
operator|+
literal|"/1"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|sourceBase
operator|+
literal|"/3"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|sourceBase
operator|+
literal|"/4"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|sourceBase
operator|+
literal|"/5"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|sourceBase
operator|+
literal|"/7"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|sourceBase
operator|+
literal|"/8"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|sourceBase
operator|+
literal|"/9"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|targetBase
operator|+
literal|"/2"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|targetBase
operator|+
literal|"/4"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|targetBase
operator|+
literal|"/5"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|targetBase
operator|+
literal|"/7"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|targetBase
operator|+
literal|"/9"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|targetBase
operator|+
literal|"/A"
argument_list|)
expr_stmt|;
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Path
argument_list|(
name|sourceBase
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/out"
argument_list|)
argument_list|)
decl_stmt|;
name|options
operator|.
name|setSyncFolder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDeleteMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|appendToConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CopyListing
name|listing
init|=
operator|new
name|GlobbedCopyListing
argument_list|(
name|conf
argument_list|,
name|CREDENTIALS
argument_list|)
decl_stmt|;
name|Path
name|listingFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp1/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|listing
operator|.
name|buildListing
argument_list|(
name|listingFile
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_WORK_PATH
argument_list|,
name|targetBase
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_FINAL_PATH
argument_list|,
name|targetBase
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|TestDistCpUtils
operator|.
name|checkIfFoldersAreInSync
argument_list|(
name|fs
argument_list|,
name|targetBase
argument_list|,
name|sourceBase
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Source and target folders are not in sync"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|targetBase
argument_list|)
argument_list|)
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Test for idempotent commit
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|TestDistCpUtils
operator|.
name|checkIfFoldersAreInSync
argument_list|(
name|fs
argument_list|,
name|targetBase
argument_list|,
name|sourceBase
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Source and target folders are not in sync"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|targetBase
argument_list|)
argument_list|)
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing for delete missing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Delete missing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_DELETE_MISSING
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAtomicCommitMissingFinal ()
specifier|public
name|void
name|testAtomicCommitMissingFinal
parameter_list|()
block|{
name|TaskAttemptContext
name|taskAttemptContext
init|=
name|getTaskAttemptContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|JobContext
name|jobContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|taskAttemptContext
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|taskAttemptContext
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|jobContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|workPath
init|=
literal|"/tmp1/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|finalPath
init|=
literal|"/tmp1/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OutputCommitter
name|committer
init|=
operator|new
name|CopyCommitter
argument_list|(
literal|null
argument_list|,
name|taskAttemptContext
argument_list|)
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|workPath
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_WORK_PATH
argument_list|,
name|workPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_FINAL_PATH
argument_list|,
name|finalPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_ATOMIC_COPY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|workPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|workPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test for idempotent commit
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|workPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing for preserve status"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Atomic commit failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|workPath
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|finalPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_ATOMIC_COPY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAtomicCommitExistingFinal ()
specifier|public
name|void
name|testAtomicCommitExistingFinal
parameter_list|()
block|{
name|TaskAttemptContext
name|taskAttemptContext
init|=
name|getTaskAttemptContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|JobContext
name|jobContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|taskAttemptContext
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|taskAttemptContext
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|jobContext
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|workPath
init|=
literal|"/tmp1/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|finalPath
init|=
literal|"/tmp1/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OutputCommitter
name|committer
init|=
operator|new
name|CopyCommitter
argument_list|(
literal|null
argument_list|,
name|taskAttemptContext
argument_list|)
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|workPath
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_WORK_PATH
argument_list|,
name|workPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_FINAL_PATH
argument_list|,
name|finalPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_ATOMIC_COPY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|workPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|committer
operator|.
name|commitJob
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not be able to atomic-commit to pre-existing path."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|workPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Atomic-commit Test pass."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing for atomic commit."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Atomic commit failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|workPath
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|finalPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_ATOMIC_COPY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTaskAttemptContext (Configuration conf)
specifier|private
name|TaskAttemptContext
name|getTaskAttemptContext
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|conf
argument_list|,
operator|new
name|TaskAttemptID
argument_list|(
literal|"200707121733"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|checkDirectoryPermissions (FileSystem fs, String targetBase, FsPermission sourcePerm)
specifier|private
name|boolean
name|checkDirectoryPermissions
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|targetBase
parameter_list|,
name|FsPermission
name|sourcePerm
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|base
init|=
operator|new
name|Path
argument_list|(
name|targetBase
argument_list|)
decl_stmt|;
name|Stack
argument_list|<
name|Path
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|base
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|file
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
continue|continue;
name|FileStatus
index|[]
name|fStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|fStatus
operator|==
literal|null
operator|||
name|fStatus
operator|.
name|length
operator|==
literal|0
condition|)
continue|continue;
for|for
control|(
name|FileStatus
name|status
range|:
name|fStatus
control|)
block|{
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|stack
operator|.
name|push
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|status
operator|.
name|getPermission
argument_list|()
argument_list|,
name|sourcePerm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|class|NullInputFormat
specifier|private
specifier|static
class|class
name|NullInputFormat
extends|extends
name|InputFormat
block|{
annotation|@
name|Override
DECL|method|getSplits (JobContext context)
specifier|public
name|List
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
annotation|@
name|Override
DECL|method|createRecordReader (InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

