begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobSubmissionFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|TestDistCpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_class
DECL|class|TestExternalCall
specifier|public
class|class
name|TestExternalCall
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestExternalCall
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|root
specifier|private
specifier|static
name|String
name|root
decl_stmt|;
DECL|method|getConf ()
specifier|private
specifier|static
name|Configuration
name|getConf
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|securityManager
operator|=
name|System
operator|.
name|getSecurityManager
argument_list|()
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
operator|new
name|NoExitSecurityManager
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|=
operator|new
name|Path
argument_list|(
literal|"target/tmp"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|System
operator|.
name|setSecurityManager
argument_list|(
name|securityManager
argument_list|)
expr_stmt|;
block|}
comment|/**  * test methods run end execute of DistCp class. silple copy file  * @throws Exception   */
annotation|@
name|Test
DECL|method|testCleanup ()
specifier|public
name|void
name|testCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|Path
name|stagingDir
init|=
name|JobSubmissionFiles
operator|.
name|getStagingDir
argument_list|(
operator|new
name|Cluster
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|stagingDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|stagingDir
argument_list|)
expr_stmt|;
name|Path
name|soure
init|=
name|createFile
argument_list|(
literal|"tmp.txt"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
name|createFile
argument_list|(
literal|"target.txt"
argument_list|)
decl_stmt|;
name|DistCp
name|distcp
init|=
operator|new
name|DistCp
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
index|[]
name|arg
init|=
block|{
name|soure
operator|.
name|toString
argument_list|()
block|,
name|target
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|distcp
operator|.
name|run
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (String fname)
specifier|private
name|Path
name|createFile
parameter_list|(
name|String
name|fname
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|result
init|=
operator|new
name|Path
argument_list|(
name|root
operator|+
literal|"/"
operator|+
name|fname
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|result
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
name|root
operator|+
literal|"/"
operator|+
name|fname
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * test main method of DistCp. Method should to call System.exit().    *     */
annotation|@
name|Test
DECL|method|testCleanupTestViaToolRunner ()
specifier|public
name|void
name|testCleanupTestViaToolRunner
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|Path
name|stagingDir
init|=
name|JobSubmissionFiles
operator|.
name|getStagingDir
argument_list|(
operator|new
name|Cluster
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|stagingDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|stagingDir
argument_list|)
expr_stmt|;
name|Path
name|soure
init|=
name|createFile
argument_list|(
literal|"tmp.txt"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
name|createFile
argument_list|(
literal|"target.txt"
argument_list|)
decl_stmt|;
try|try
block|{
name|String
index|[]
name|arg
init|=
block|{
name|target
operator|.
name|toString
argument_list|()
block|,
name|soure
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|DistCp
operator|.
name|main
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|t
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|status
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stagingDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|listStatus
argument_list|(
name|stagingDir
argument_list|)
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|securityManager
specifier|private
name|SecurityManager
name|securityManager
decl_stmt|;
DECL|class|ExitException
specifier|protected
specifier|static
class|class
name|ExitException
extends|extends
name|SecurityException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1982617086752946683L
decl_stmt|;
DECL|field|status
specifier|public
specifier|final
name|int
name|status
decl_stmt|;
DECL|method|ExitException (int status)
specifier|public
name|ExitException
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|super
argument_list|(
literal|"There is no escape!"
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
block|}
DECL|class|NoExitSecurityManager
specifier|private
specifier|static
class|class
name|NoExitSecurityManager
extends|extends
name|SecurityManager
block|{
annotation|@
name|Override
DECL|method|checkPermission (Permission perm)
specifier|public
name|void
name|checkPermission
parameter_list|(
name|Permission
name|perm
parameter_list|)
block|{
comment|// allow anything.
block|}
annotation|@
name|Override
DECL|method|checkPermission (Permission perm, Object context)
specifier|public
name|void
name|checkPermission
parameter_list|(
name|Permission
name|perm
parameter_list|,
name|Object
name|context
parameter_list|)
block|{
comment|// allow anything.
block|}
annotation|@
name|Override
DECL|method|checkExit (int status)
specifier|public
name|void
name|checkExit
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|super
operator|.
name|checkExit
argument_list|(
name|status
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExitException
argument_list|(
name|status
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

