begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpOptionSwitch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|StubContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|DistCpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|TestCopyMapper
specifier|public
class|class
name|TestCopyMapper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCopyMapper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|pathList
specifier|private
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|pathList
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|nFiles
specifier|private
specifier|static
name|int
name|nFiles
init|=
literal|0
decl_stmt|;
DECL|field|DEFAULT_FILE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_FILE_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|SOURCE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|SOURCE_PATH
init|=
literal|"/tmp/source"
decl_stmt|;
DECL|field|TARGET_PATH
specifier|private
specifier|static
specifier|final
name|String
name|TARGET_PATH
init|=
literal|"/tmp/target"
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|static
name|Configuration
name|configuration
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|=
name|getConfigurationForCluster
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|configuration
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|getConfigurationForCluster ()
specifier|private
specifier|static
name|Configuration
name|getConfigurationForCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target/tmp/build/TEST_COPY_MAPPER/data"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
literal|"target/tmp"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"fs.default.name  == "
operator|+
name|configuration
operator|.
name|get
argument_list|(
literal|"fs.default.name"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"dfs.http.address == "
operator|+
name|configuration
operator|.
name|get
argument_list|(
literal|"dfs.http.address"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|configuration
return|;
block|}
DECL|method|getConfiguration ()
specifier|private
specifier|static
name|Configuration
name|getConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|configuration
init|=
name|getConfigurationForCluster
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|workPath
init|=
operator|new
name|Path
argument_list|(
name|TARGET_PATH
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_WORK_PATH
argument_list|,
name|workPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_FINAL_PATH
argument_list|,
name|workPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|DistCpOptionSwitch
operator|.
name|OVERWRITE
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|DistCpOptionSwitch
operator|.
name|SKIP_CRC
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|DistCpOptionSwitch
operator|.
name|SYNC_FOLDERS
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|DistCpOptionSwitch
operator|.
name|PRESERVE_STATUS
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
literal|"br"
argument_list|)
expr_stmt|;
return|return
name|configuration
return|;
block|}
DECL|method|createSourceData ()
specifier|private
specifier|static
name|void
name|createSourceData
parameter_list|()
throws|throws
name|Exception
block|{
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/1"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/2"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/2/3/4"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/2/3"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/5"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/5/6"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/7"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/7/8"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/7/8/9"
argument_list|)
expr_stmt|;
block|}
DECL|method|createSourceDataWithDifferentBlockSize ()
specifier|private
specifier|static
name|void
name|createSourceDataWithDifferentBlockSize
parameter_list|()
throws|throws
name|Exception
block|{
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/1"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/2"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/2/3/4"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/2/3"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/5"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/5/6"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/7"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/7/8"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/7/8/9"
argument_list|)
expr_stmt|;
block|}
DECL|method|mkdirs (String path)
specifier|private
specifier|static
name|void
name|mkdirs
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fileSystem
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|qualifiedPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fileSystem
operator|.
name|getUri
argument_list|()
argument_list|,
name|fileSystem
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|pathList
operator|.
name|add
argument_list|(
name|qualifiedPath
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|qualifiedPath
argument_list|)
expr_stmt|;
block|}
DECL|method|touchFile (String path)
specifier|private
specifier|static
name|void
name|touchFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|touchFile
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|touchFile (String path, boolean createMultipleBlocks)
specifier|private
specifier|static
name|void
name|touchFile
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|createMultipleBlocks
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|NON_DEFAULT_BLOCK_SIZE
init|=
literal|4096
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|DataOutputStream
name|outputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|qualifiedPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
name|createMultipleBlocks
condition|?
name|NON_DEFAULT_BLOCK_SIZE
else|:
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|qualifiedPath
argument_list|)
operator|*
literal|2
decl_stmt|;
name|outputStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|qualifiedPath
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
call|(
name|short
call|)
argument_list|(
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|qualifiedPath
argument_list|)
operator|*
literal|2
argument_list|)
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|DEFAULT_FILE_SIZE
index|]
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|long
name|fileSize
init|=
name|DEFAULT_FILE_SIZE
decl_stmt|;
if|if
condition|(
name|createMultipleBlocks
condition|)
block|{
while|while
condition|(
name|fileSize
operator|<
literal|2
operator|*
name|blockSize
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fileSize
operator|+=
name|DEFAULT_FILE_SIZE
expr_stmt|;
block|}
block|}
name|pathList
operator|.
name|add
argument_list|(
name|qualifiedPath
argument_list|)
expr_stmt|;
operator|++
name|nFiles
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|qualifiedPath
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fileStatus
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fileStatus
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testRun ()
specifier|public
name|void
name|testRun
parameter_list|()
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
block|{
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|// Check that the maps worked.
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
block|{
specifier|final
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|SOURCE_PATH
argument_list|,
name|TARGET_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|isFile
argument_list|(
name|targetPath
argument_list|)
operator|==
name|fs
operator|.
name|isFile
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|targetPath
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|targetPath
argument_list|)
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|isFile
argument_list|(
name|targetPath
argument_list|)
operator|||
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|targetPath
argument_list|)
operator|.
name|equals
argument_list|(
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pathList
operator|.
name|size
argument_list|()
argument_list|,
name|stubContext
operator|.
name|getReporter
argument_list|()
operator|.
name|getCounter
argument_list|(
name|CopyMapper
operator|.
name|Counter
operator|.
name|COPY
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nFiles
operator|*
name|DEFAULT_FILE_SIZE
argument_list|,
name|stubContext
operator|.
name|getReporter
argument_list|()
operator|.
name|getCounter
argument_list|(
name|CopyMapper
operator|.
name|Counter
operator|.
name|BYTESCOPIED
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|testCopyingExistingFiles
argument_list|(
name|fs
argument_list|,
name|copyMapper
argument_list|,
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Text
name|value
range|:
name|stubContext
operator|.
name|getWriter
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|" is not skipped"
argument_list|,
name|value
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"SKIP:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCopyingExistingFiles (FileSystem fs, CopyMapper copyMapper, Mapper<Text, FileStatus, Text, Text>.Context context)
specifier|private
name|void
name|testCopyingExistingFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|CopyMapper
name|copyMapper
parameter_list|,
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
block|{
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nFiles
argument_list|,
name|context
operator|.
name|getCounter
argument_list|(
name|CopyMapper
operator|.
name|Counter
operator|.
name|SKIP
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Caught unexpected exception:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testMakeDirFailure ()
specifier|public
name|void
name|testMakeDirFailure
parameter_list|()
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|workPath
init|=
operator|new
name|Path
argument_list|(
literal|"hftp://localhost:1234/*/*/*/?/"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_WORK_PATH
argument_list|,
name|workPath
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
argument_list|,
name|pathList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|pathList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"There should have been an exception."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testIgnoreFailures ()
specifier|public
name|void
name|testIgnoreFailures
parameter_list|()
block|{
name|doTestIgnoreFailures
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doTestIgnoreFailures
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testDirToFile ()
specifier|public
name|void
name|testDirToFile
parameter_list|()
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|mkdirs
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|TARGET_PATH
operator|+
literal|"/src/file"
argument_list|)
expr_stmt|;
try|try
block|{
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
literal|"/src/file"
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Can't replace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testPreserve ()
specifier|public
name|void
name|testPreserve
parameter_list|()
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|tmpUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"guest"
argument_list|)
decl_stmt|;
specifier|final
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
specifier|final
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|run
parameter_list|()
block|{
try|try
block|{
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|stubContext
operator|.
name|getContext
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|DistCpOptions
operator|.
name|FileAttribute
argument_list|>
name|preserveStatus
init|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DistCpOptions
operator|.
name|FileAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_PRESERVE_STATUS
argument_list|,
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|preserveStatus
argument_list|)
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|TARGET_PATH
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|TARGET_PATH
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|511
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|tmpFS
init|=
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Test ought to fail here"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
block|{
try|try
block|{
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
literal|"/src/file"
argument_list|)
argument_list|,
name|tmpFS
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected copy to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Got exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testCopyReadableFiles ()
specifier|public
name|void
name|testCopyReadableFiles
parameter_list|()
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|tmpUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"guest"
argument_list|)
decl_stmt|;
specifier|final
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
specifier|final
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|run
parameter_list|()
block|{
try|try
block|{
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|stubContext
operator|.
name|getContext
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|TARGET_PATH
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|TARGET_PATH
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|511
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|tmpFS
init|=
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Test ought to fail here"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
block|{
try|try
block|{
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
literal|"/src/file"
argument_list|)
argument_list|,
name|tmpFS
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testSkipCopyNoPerms ()
specifier|public
name|void
name|testSkipCopyNoPerms
parameter_list|()
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|tmpUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"guest"
argument_list|)
decl_stmt|;
specifier|final
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
specifier|final
name|StubContext
name|stubContext
init|=
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|StubContext
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StubContext
name|run
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|DistCpOptions
operator|.
name|FileAttribute
argument_list|>
name|preserveStatus
init|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DistCpOptions
operator|.
name|FileAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_PRESERVE_STATUS
argument_list|,
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|preserveStatus
argument_list|)
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|TARGET_PATH
operator|+
literal|"/src/file"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|TARGET_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|tmpFS
init|=
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Test ought to fail here"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
block|{
try|try
block|{
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
literal|"/src/file"
argument_list|)
argument_list|,
name|tmpFS
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stubContext
operator|.
name|getWriter
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stubContext
operator|.
name|getWriter
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"SKIP"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stubContext
operator|.
name|getWriter
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testFailCopyWithAccessControlException ()
specifier|public
name|void
name|testFailCopyWithAccessControlException
parameter_list|()
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|tmpUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"guest"
argument_list|)
decl_stmt|;
specifier|final
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
specifier|final
name|StubContext
name|stubContext
init|=
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|StubContext
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StubContext
name|run
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|DistCpOptions
operator|.
name|FileAttribute
argument_list|>
name|preserveStatus
init|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DistCpOptions
operator|.
name|FileAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_PRESERVE_STATUS
argument_list|,
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|preserveStatus
argument_list|)
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|TARGET_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"hello world"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|TARGET_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|tmpFS
init|=
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Test ought to fail here"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|tmpUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
block|{
try|try
block|{
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
literal|"/src/file"
argument_list|)
argument_list|,
name|tmpFS
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Didn't expect the file to be copied"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ignore
parameter_list|)
block|{           }
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// We want to make sure the underlying cause of the exception is
comment|// due to permissions error. The exception we're interested in is
comment|// wrapped twice - once in RetriableCommand and again in CopyMapper
comment|// itself.
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
operator|||
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|==
literal|null
operator|||
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AccessControlException
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testFileToDir ()
specifier|public
name|void
name|testFileToDir
parameter_list|()
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|TARGET_PATH
operator|+
literal|"/src/file"
argument_list|)
expr_stmt|;
try|try
block|{
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
literal|"/src/file"
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/src/file"
argument_list|)
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Can't replace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestIgnoreFailures (boolean ignoreFailures)
specifier|private
name|void
name|doTestIgnoreFailures
parameter_list|(
name|boolean
name|ignoreFailures
parameter_list|)
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|DistCpOptionSwitch
operator|.
name|IGNORE_FAILURES
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
name|ignoreFailures
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|DistCpOptionSwitch
operator|.
name|OVERWRITE
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|DistCpOptionSwitch
operator|.
name|SKIP_CRC
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
block|{
specifier|final
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|,
name|fileStatus
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ignoreFailures
condition|)
block|{
for|for
control|(
name|Text
name|value
range|:
name|stubContext
operator|.
name|getWriter
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|" is not skipped"
argument_list|,
name|value
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"FAIL:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"There should have been an exception."
argument_list|,
name|ignoreFailures
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|!
name|ignoreFailures
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deleteState ()
specifier|private
specifier|static
name|void
name|deleteState
parameter_list|()
throws|throws
name|IOException
block|{
name|pathList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nFiles
operator|=
literal|0
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TARGET_PATH
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testPreserveBlockSizeAndReplication ()
specifier|public
name|void
name|testPreserveBlockSizeAndReplication
parameter_list|()
block|{
name|testPreserveBlockSizeAndReplicationImpl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testPreserveBlockSizeAndReplicationImpl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testCopyFailOnBlockSizeDifference ()
specifier|public
name|void
name|testCopyFailOnBlockSizeDifference
parameter_list|()
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceDataWithDifferentBlockSize
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|DistCpOptions
operator|.
name|FileAttribute
argument_list|>
name|fileAttributes
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|DistCpOptions
operator|.
name|FileAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|DistCpOptionSwitch
operator|.
name|PRESERVE_STATUS
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|fileAttributes
argument_list|)
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
block|{
specifier|final
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|,
name|fileStatus
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"Copy should have failed because of block-size difference."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
comment|// Check that the exception suggests the use of -pb/-skipCrc.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Failure exception should have suggested the use of -pb."
argument_list|,
name|exception
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"pb"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Failure exception should have suggested the use of -skipCrc."
argument_list|,
name|exception
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"skipCrc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPreserveBlockSizeAndReplicationImpl (boolean preserve)
specifier|private
name|void
name|testPreserveBlockSizeAndReplicationImpl
parameter_list|(
name|boolean
name|preserve
parameter_list|)
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|DistCpOptions
operator|.
name|FileAttribute
argument_list|>
name|fileAttributes
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|DistCpOptions
operator|.
name|FileAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|preserve
condition|)
block|{
name|fileAttributes
operator|.
name|add
argument_list|(
name|DistCpOptions
operator|.
name|FileAttribute
operator|.
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|fileAttributes
operator|.
name|add
argument_list|(
name|DistCpOptions
operator|.
name|FileAttribute
operator|.
name|REPLICATION
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|set
argument_list|(
name|DistCpOptionSwitch
operator|.
name|PRESERVE_STATUS
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|fileAttributes
argument_list|)
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
block|{
specifier|final
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|,
name|fileStatus
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|// Check that the block-size/replication aren't preserved.
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
block|{
specifier|final
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|SOURCE_PATH
argument_list|,
name|TARGET_PATH
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|source
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|target
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|preserve
operator|||
name|source
operator|.
name|getBlockSize
argument_list|()
operator|!=
name|target
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|preserve
operator|||
name|source
operator|.
name|getReplication
argument_list|()
operator|!=
name|target
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|preserve
operator|||
name|source
operator|.
name|getBlockSize
argument_list|()
operator|==
name|target
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|preserve
operator|||
name|source
operator|.
name|getReplication
argument_list|()
operator|==
name|target
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|changeUserGroup (String user, String group)
specifier|private
specifier|static
name|void
name|changeUserGroup
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FsPermission
name|changedPermission
init|=
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
if|if
condition|(
name|fs
operator|.
name|isFile
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|path
argument_list|,
name|user
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|changedPermission
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If a single file is being copied to a location where the file (of the same    * name) already exists, then the file shouldn't be skipped.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testSingleFileCopy ()
specifier|public
name|void
name|testSingleFileCopy
parameter_list|()
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|touchFile
argument_list|(
name|SOURCE_PATH
operator|+
literal|"/1"
argument_list|)
expr_stmt|;
name|Path
name|sourceFilePath
init|=
name|pathList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Path
name|targetFilePath
init|=
operator|new
name|Path
argument_list|(
name|sourceFilePath
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|SOURCE_PATH
argument_list|,
name|TARGET_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|touchFile
argument_list|(
name|targetFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_FINAL_PATH
argument_list|,
name|targetFilePath
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Parent directory.
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|sourceFileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|sourceFilePath
argument_list|)
decl_stmt|;
name|long
name|before
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|targetFilePath
argument_list|)
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
argument_list|,
name|sourceFilePath
argument_list|)
argument_list|)
argument_list|,
name|sourceFileStatus
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|long
name|after
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|targetFilePath
argument_list|)
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File should have been skipped"
argument_list|,
name|before
operator|==
name|after
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_TARGET_FINAL_PATH
argument_list|,
name|targetFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Specify the file path.
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|before
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|targetFilePath
argument_list|)
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{}
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
argument_list|,
name|sourceFilePath
argument_list|)
argument_list|)
argument_list|,
name|sourceFileStatus
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|after
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|targetFilePath
argument_list|)
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File should have been overwritten."
argument_list|,
name|before
operator|<
name|after
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testPreserveUserGroup ()
specifier|public
name|void
name|testPreserveUserGroup
parameter_list|()
block|{
name|testPreserveUserGroupImpl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testPreserveUserGroupImpl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testPreserveUserGroupImpl (boolean preserve)
specifier|private
name|void
name|testPreserveUserGroupImpl
parameter_list|(
name|boolean
name|preserve
parameter_list|)
block|{
try|try
block|{
name|deleteState
argument_list|()
expr_stmt|;
name|createSourceData
argument_list|()
expr_stmt|;
name|changeUserGroup
argument_list|(
literal|"Michael"
argument_list|,
literal|"Corleone"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|CopyMapper
name|copyMapper
init|=
operator|new
name|CopyMapper
argument_list|()
decl_stmt|;
name|StubContext
name|stubContext
init|=
operator|new
name|StubContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileStatus
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
operator|.
name|Context
name|context
init|=
name|stubContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|DistCpOptions
operator|.
name|FileAttribute
argument_list|>
name|fileAttributes
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|DistCpOptions
operator|.
name|FileAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|preserve
condition|)
block|{
name|fileAttributes
operator|.
name|add
argument_list|(
name|DistCpOptions
operator|.
name|FileAttribute
operator|.
name|USER
argument_list|)
expr_stmt|;
name|fileAttributes
operator|.
name|add
argument_list|(
name|DistCpOptions
operator|.
name|FileAttribute
operator|.
name|GROUP
argument_list|)
expr_stmt|;
name|fileAttributes
operator|.
name|add
argument_list|(
name|DistCpOptions
operator|.
name|FileAttribute
operator|.
name|PERMISSION
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|set
argument_list|(
name|DistCpOptionSwitch
operator|.
name|PRESERVE_STATUS
operator|.
name|getConfigLabel
argument_list|()
argument_list|,
name|DistCpUtils
operator|.
name|packAttributes
argument_list|(
name|fileAttributes
argument_list|)
argument_list|)
expr_stmt|;
name|copyMapper
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
block|{
specifier|final
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|copyMapper
operator|.
name|map
argument_list|(
operator|new
name|Text
argument_list|(
name|DistCpUtils
operator|.
name|getRelativePath
argument_list|(
operator|new
name|Path
argument_list|(
name|SOURCE_PATH
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|,
name|fileStatus
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|// Check that the user/group attributes are preserved
comment|// (only) as necessary.
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
block|{
specifier|final
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|SOURCE_PATH
argument_list|,
name|TARGET_PATH
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|source
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|target
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|preserve
operator|||
name|source
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|preserve
operator|||
name|source
operator|.
name|getGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|preserve
operator|||
name|source
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|preserve
operator|||
operator|!
name|source
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|preserve
operator|||
operator|!
name|source
operator|.
name|getGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|preserve
operator|||
operator|!
name|source
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|source
operator|.
name|isDirectory
argument_list|()
operator|||
name|source
operator|.
name|getReplication
argument_list|()
operator|!=
name|target
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

