begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobSubmissionFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|TestDistCpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestIntegration
specifier|public
class|class
name|TestIntegration
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestIntegration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|listFile
specifier|private
specifier|static
name|Path
name|listFile
decl_stmt|;
DECL|field|target
specifier|private
specifier|static
name|Path
name|target
decl_stmt|;
DECL|field|root
specifier|private
specifier|static
name|String
name|root
decl_stmt|;
DECL|field|numListstatusThreads
specifier|private
name|int
name|numListstatusThreads
decl_stmt|;
DECL|method|TestIntegration (int numListstatusThreads)
specifier|public
name|TestIntegration
parameter_list|(
name|int
name|numListstatusThreads
parameter_list|)
block|{
name|this
operator|.
name|numListstatusThreads
operator|=
name|numListstatusThreads
expr_stmt|;
block|}
annotation|@
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|data
init|=
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|1
block|}
block|,
block|{
literal|2
block|}
block|,
block|{
literal|10
block|}
block|}
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|data
argument_list|)
return|;
block|}
DECL|method|getConf ()
specifier|private
specifier|static
name|Configuration
name|getConf
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|listFile
operator|=
operator|new
name|Path
argument_list|(
literal|"target/tmp/listing"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|target
operator|=
operator|new
name|Path
argument_list|(
literal|"target/tmp/target"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|=
operator|new
name|Path
argument_list|(
literal|"target/tmp"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testSingleFileMissingTarget ()
specifier|public
name|void
name|testSingleFileMissingTarget
parameter_list|()
block|{
name|caseSingleFileMissingTarget
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseSingleFileMissingTarget
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseSingleFileMissingTarget (boolean sync)
specifier|private
name|void
name|caseSingleFileMissingTarget
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"singlefile1/file1"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"singlefile1/file1"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testSingleFileTargetFile ()
specifier|public
name|void
name|testSingleFileTargetFile
parameter_list|()
block|{
name|caseSingleFileTargetFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseSingleFileTargetFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseSingleFileTargetFile (boolean sync)
specifier|private
name|void
name|caseSingleFileTargetFile
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"singlefile1/file1"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"singlefile1/file1"
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testSingleFileTargetDir ()
specifier|public
name|void
name|testSingleFileTargetDir
parameter_list|()
block|{
name|caseSingleFileTargetDir
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseSingleFileTargetDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseSingleFileTargetDir (boolean sync)
specifier|private
name|void
name|caseSingleFileTargetDir
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"singlefile2/file2"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"singlefile2/file2"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|1
argument_list|,
literal|"file2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testSingleDirTargetMissing ()
specifier|public
name|void
name|testSingleDirTargetMissing
parameter_list|()
block|{
name|caseSingleDirTargetMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseSingleDirTargetMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseSingleDirTargetMissing (boolean sync)
specifier|private
name|void
name|caseSingleDirTargetMissing
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"singledir"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|root
operator|+
literal|"/singledir/dir1"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|1
argument_list|,
literal|"dir1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testSingleDirTargetPresent ()
specifier|public
name|void
name|testSingleDirTargetPresent
parameter_list|()
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"singledir"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|root
operator|+
literal|"/singledir/dir1"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|1
argument_list|,
literal|"singledir/dir1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testUpdateSingleDirTargetPresent ()
specifier|public
name|void
name|testUpdateSingleDirTargetPresent
parameter_list|()
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"Usingledir"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|root
operator|+
literal|"/Usingledir/Udir1"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|1
argument_list|,
literal|"Udir1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testMultiFileTargetPresent ()
specifier|public
name|void
name|testMultiFileTargetPresent
parameter_list|()
block|{
name|caseMultiFileTargetPresent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseMultiFileTargetPresent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseMultiFileTargetPresent (boolean sync)
specifier|private
name|void
name|caseMultiFileTargetPresent
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|3
argument_list|,
literal|"file3"
argument_list|,
literal|"file4"
argument_list|,
literal|"file5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testMultiFileTargetMissing ()
specifier|public
name|void
name|testMultiFileTargetMissing
parameter_list|()
block|{
name|caseMultiFileTargetMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseMultiFileTargetMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseMultiFileTargetMissing (boolean sync)
specifier|private
name|void
name|caseMultiFileTargetMissing
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|3
argument_list|,
literal|"file3"
argument_list|,
literal|"file4"
argument_list|,
literal|"file5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testMultiDirTargetPresent ()
specifier|public
name|void
name|testMultiDirTargetPresent
parameter_list|()
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"multifile"
argument_list|,
literal|"singledir"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|,
name|root
operator|+
literal|"/singledir/dir1"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|2
argument_list|,
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|,
literal|"singledir/dir1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testUpdateMultiDirTargetPresent ()
specifier|public
name|void
name|testUpdateMultiDirTargetPresent
parameter_list|()
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"Umultifile"
argument_list|,
literal|"Usingledir"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"Umultifile/Ufile3"
argument_list|,
literal|"Umultifile/Ufile4"
argument_list|,
literal|"Umultifile/Ufile5"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|,
name|root
operator|+
literal|"/Usingledir/Udir1"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|4
argument_list|,
literal|"Ufile3"
argument_list|,
literal|"Ufile4"
argument_list|,
literal|"Ufile5"
argument_list|,
literal|"Udir1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testMultiDirTargetMissing ()
specifier|public
name|void
name|testMultiDirTargetMissing
parameter_list|()
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"multifile"
argument_list|,
literal|"singledir"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|root
operator|+
literal|"/singledir/dir1"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|2
argument_list|,
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|,
literal|"singledir/dir1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testUpdateMultiDirTargetMissing ()
specifier|public
name|void
name|testUpdateMultiDirTargetMissing
parameter_list|()
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"multifile"
argument_list|,
literal|"singledir"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|root
operator|+
literal|"/singledir/dir1"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|4
argument_list|,
literal|"file3"
argument_list|,
literal|"file4"
argument_list|,
literal|"file5"
argument_list|,
literal|"dir1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testDeleteMissingInDestination ()
specifier|public
name|void
name|testDeleteMissingInDestination
parameter_list|()
block|{
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"srcdir"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"srcdir/file1"
argument_list|,
literal|"dstdir/file1"
argument_list|,
literal|"dstdir/file2"
argument_list|)
expr_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|root
operator|+
literal|"/dstdir"
argument_list|)
decl_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|1
argument_list|,
literal|"file1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while running distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"target/tmp1"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testOverwrite ()
specifier|public
name|void
name|testOverwrite
parameter_list|()
block|{
name|byte
index|[]
name|contents1
init|=
literal|"contents1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|contents2
init|=
literal|"contents2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|contents1
operator|.
name|length
argument_list|,
name|contents2
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"srcdir"
argument_list|)
expr_stmt|;
name|createWithContents
argument_list|(
literal|"srcdir/file1"
argument_list|,
name|contents1
argument_list|)
expr_stmt|;
name|createWithContents
argument_list|(
literal|"dstdir/file1"
argument_list|,
name|contents2
argument_list|)
expr_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|root
operator|+
literal|"/dstdir"
argument_list|)
decl_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|1
argument_list|,
literal|"file1"
argument_list|)
expr_stmt|;
comment|// make sure dstdir/file1 has been overwritten with the contents
comment|// of srcdir/file1
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|root
operator|+
literal|"/dstdir/file1"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|dstContents
init|=
operator|new
name|byte
index|[
name|contents1
operator|.
name|length
index|]
decl_stmt|;
name|is
operator|.
name|readFully
argument_list|(
name|dstContents
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|contents1
argument_list|,
name|dstContents
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while running distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"target/tmp1"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testGlobTargetMissingSingleLevel ()
specifier|public
name|void
name|testGlobTargetMissingSingleLevel
parameter_list|()
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"target/tmp1/listing"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"singledir/dir2/file6"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|2
argument_list|,
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|,
literal|"singledir/dir2/file6"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"target/tmp1"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testUpdateGlobTargetMissingSingleLevel ()
specifier|public
name|void
name|testUpdateGlobTargetMissingSingleLevel
parameter_list|()
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"target/tmp1/listing"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"singledir/dir2/file6"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|4
argument_list|,
literal|"file3"
argument_list|,
literal|"file4"
argument_list|,
literal|"file5"
argument_list|,
literal|"dir2/file6"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while running distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"target/tmp1"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testGlobTargetMissingMultiLevel ()
specifier|public
name|void
name|testGlobTargetMissingMultiLevel
parameter_list|()
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"target/tmp1/listing"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"*/*"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"singledir1/dir3/file7"
argument_list|,
literal|"singledir1/dir3/file8"
argument_list|,
literal|"singledir1/dir3/file9"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|4
argument_list|,
literal|"file3"
argument_list|,
literal|"file4"
argument_list|,
literal|"file5"
argument_list|,
literal|"dir3/file7"
argument_list|,
literal|"dir3/file8"
argument_list|,
literal|"dir3/file9"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while running distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"target/tmp1"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testUpdateGlobTargetMissingMultiLevel ()
specifier|public
name|void
name|testUpdateGlobTargetMissingMultiLevel
parameter_list|()
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"target/tmp1/listing"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"*/*"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"multifile/file3"
argument_list|,
literal|"multifile/file4"
argument_list|,
literal|"multifile/file5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"singledir1/dir3/file7"
argument_list|,
literal|"singledir1/dir3/file8"
argument_list|,
literal|"singledir1/dir3/file9"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|target
argument_list|,
literal|6
argument_list|,
literal|"file3"
argument_list|,
literal|"file4"
argument_list|,
literal|"file5"
argument_list|,
literal|"file7"
argument_list|,
literal|"file8"
argument_list|,
literal|"file9"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while running distcp"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"distcp failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"target/tmp1"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testCleanup ()
specifier|public
name|void
name|testCleanup
parameter_list|()
block|{
try|try
block|{
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
literal|"noscheme:///file"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|sources
operator|.
name|add
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|sources
argument_list|,
name|target
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|Path
name|stagingDir
init|=
name|JobSubmissionFiles
operator|.
name|getStagingDir
argument_list|(
operator|new
name|Cluster
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|stagingDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|stagingDir
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|DistCp
argument_list|(
name|conf
argument_list|,
name|options
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stagingDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|listStatus
argument_list|(
name|stagingDir
argument_list|)
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCleanup failed "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addEntries (Path listFile, String... entries)
specifier|private
name|void
name|addEntries
parameter_list|(
name|Path
name|listFile
parameter_list|,
name|String
modifier|...
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|listFile
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
name|root
operator|+
literal|"/"
operator|+
name|entry
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createFiles (String... entries)
specifier|private
name|void
name|createFiles
parameter_list|(
name|String
modifier|...
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|root
operator|+
literal|"/"
operator|+
name|entry
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
name|root
operator|+
literal|"/"
operator|+
name|entry
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createWithContents (String entry, byte[] contents)
specifier|private
name|void
name|createWithContents
parameter_list|(
name|String
name|entry
parameter_list|,
name|byte
index|[]
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|root
operator|+
literal|"/"
operator|+
name|entry
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|mkdirs (String... entries)
specifier|private
name|void
name|mkdirs
parameter_list|(
name|String
modifier|...
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runTest (Path listFile, Path target, boolean targetExists, boolean sync)
specifier|private
name|void
name|runTest
parameter_list|(
name|Path
name|listFile
parameter_list|,
name|Path
name|target
parameter_list|,
name|boolean
name|targetExists
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
name|targetExists
argument_list|,
name|sync
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|runTest (Path listFile, Path target, boolean targetExists, boolean sync, boolean delete, boolean overwrite)
specifier|private
name|void
name|runTest
parameter_list|(
name|Path
name|listFile
parameter_list|,
name|Path
name|target
parameter_list|,
name|boolean
name|targetExists
parameter_list|,
name|boolean
name|sync
parameter_list|,
name|boolean
name|delete
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
operator|.
name|Builder
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|)
operator|.
name|withSyncFolder
argument_list|(
name|sync
argument_list|)
operator|.
name|withDeleteMissing
argument_list|(
name|delete
argument_list|)
operator|.
name|withOverwrite
argument_list|(
name|overwrite
argument_list|)
operator|.
name|withNumListstatusThreads
argument_list|(
name|numListstatusThreads
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|DistCp
name|distCp
init|=
operator|new
name|DistCp
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|distCp
operator|.
name|context
operator|.
name|setTargetPathExists
argument_list|(
name|targetExists
argument_list|)
expr_stmt|;
name|distCp
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkResult (Path target, int count, String... relPaths)
specifier|private
name|void
name|checkResult
parameter_list|(
name|Path
name|target
parameter_list|,
name|int
name|count
parameter_list|,
name|String
modifier|...
name|relPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|count
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|target
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|relPaths
operator|==
literal|null
operator|||
name|relPaths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|String
name|relPath
range|:
name|relPaths
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|Path
argument_list|(
name|target
argument_list|,
name|relPath
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|target
argument_list|,
name|relPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

