begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|TestDistCpUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|TestFileBasedCopyListing
specifier|public
class|class
name|TestFileBasedCopyListing
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFileBasedCopyListing
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CREDENTIALS
specifier|private
specifier|static
specifier|final
name|Credentials
name|CREDENTIALS
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
DECL|field|config
specifier|private
specifier|static
specifier|final
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|create ()
specifier|public
specifier|static
name|void
name|create
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|buildExpectedValuesMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|destroy ()
specifier|public
specifier|static
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|map
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|buildExpectedValuesMap ()
specifier|private
specifier|static
name|void
name|buildExpectedValuesMap
parameter_list|()
block|{
name|map
operator|.
name|put
argument_list|(
literal|"/file1"
argument_list|,
literal|"/tmp/singlefile1/file1"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/file2"
argument_list|,
literal|"/tmp/singlefile2/file2"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/file3"
argument_list|,
literal|"/tmp/multifile/file3"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/file4"
argument_list|,
literal|"/tmp/multifile/file4"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/file5"
argument_list|,
literal|"/tmp/multifile/file5"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/multifile/file3"
argument_list|,
literal|"/tmp/multifile/file3"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/multifile/file4"
argument_list|,
literal|"/tmp/multifile/file4"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/multifile/file5"
argument_list|,
literal|"/tmp/multifile/file5"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/Ufile3"
argument_list|,
literal|"/tmp/Umultifile/Ufile3"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/Ufile4"
argument_list|,
literal|"/tmp/Umultifile/Ufile4"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/Ufile5"
argument_list|,
literal|"/tmp/Umultifile/Ufile5"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/dir1"
argument_list|,
literal|"/tmp/singledir/dir1"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/singledir/dir1"
argument_list|,
literal|"/tmp/singledir/dir1"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/dir2"
argument_list|,
literal|"/tmp/singledir/dir2"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/singledir/dir2"
argument_list|,
literal|"/tmp/singledir/dir2"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/Udir1"
argument_list|,
literal|"/tmp/Usingledir/Udir1"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/Udir2"
argument_list|,
literal|"/tmp/Usingledir/Udir2"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/dir2/file6"
argument_list|,
literal|"/tmp/singledir/dir2/file6"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/singledir/dir2/file6"
argument_list|,
literal|"/tmp/singledir/dir2/file6"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/file7"
argument_list|,
literal|"/tmp/singledir1/dir3/file7"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/file8"
argument_list|,
literal|"/tmp/singledir1/dir3/file8"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/file9"
argument_list|,
literal|"/tmp/singledir1/dir3/file9"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/dir3/file7"
argument_list|,
literal|"/tmp/singledir1/dir3/file7"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/dir3/file8"
argument_list|,
literal|"/tmp/singledir1/dir3/file8"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/dir3/file9"
argument_list|,
literal|"/tmp/singledir1/dir3/file9"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/Ufile7"
argument_list|,
literal|"/tmp/Usingledir1/Udir3/Ufile7"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/Ufile8"
argument_list|,
literal|"/tmp/Usingledir1/Udir3/Ufile8"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"/Ufile9"
argument_list|,
literal|"/tmp/Usingledir1/Udir3/Ufile9"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleFileMissingTarget ()
specifier|public
name|void
name|testSingleFileMissingTarget
parameter_list|()
block|{
name|caseSingleFileMissingTarget
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseSingleFileMissingTarget
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseSingleFileMissingTarget (boolean sync)
specifier|private
name|void
name|caseSingleFileMissingTarget
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/singlefile1/file1"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/singlefile1/file1"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleFileTargetFile ()
specifier|public
name|void
name|testSingleFileTargetFile
parameter_list|()
block|{
name|caseSingleFileTargetFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseSingleFileTargetFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseSingleFileTargetFile (boolean sync)
specifier|private
name|void
name|caseSingleFileTargetFile
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/singlefile1/file1"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/singlefile1/file1"
argument_list|,
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleFileTargetDir ()
specifier|public
name|void
name|testSingleFileTargetDir
parameter_list|()
block|{
name|caseSingleFileTargetDir
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseSingleFileTargetDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseSingleFileTargetDir (boolean sync)
specifier|private
name|void
name|caseSingleFileTargetDir
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/singlefile2/file2"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/singlefile2/file2"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleDirTargetMissing ()
specifier|public
name|void
name|testSingleDirTargetMissing
parameter_list|()
block|{
name|caseSingleDirTargetMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseSingleDirTargetMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseSingleDirTargetMissing (boolean sync)
specifier|private
name|void
name|caseSingleDirTargetMissing
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/singledir"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
literal|"/tmp/singledir/dir1"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleDirTargetPresent ()
specifier|public
name|void
name|testSingleDirTargetPresent
parameter_list|()
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/singledir"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
literal|"/tmp/singledir/dir1"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateSingleDirTargetPresent ()
specifier|public
name|void
name|testUpdateSingleDirTargetPresent
parameter_list|()
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/Usingledir"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
literal|"/tmp/Usingledir/Udir1"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiFileTargetPresent ()
specifier|public
name|void
name|testMultiFileTargetPresent
parameter_list|()
block|{
name|caseMultiFileTargetPresent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseMultiFileTargetPresent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseMultiFileTargetPresent (boolean sync)
specifier|private
name|void
name|caseMultiFileTargetPresent
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/multifile/file3"
argument_list|,
literal|"/tmp/multifile/file4"
argument_list|,
literal|"/tmp/multifile/file5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/multifile/file3"
argument_list|,
literal|"/tmp/multifile/file4"
argument_list|,
literal|"/tmp/multifile/file5"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiFileTargetMissing ()
specifier|public
name|void
name|testMultiFileTargetMissing
parameter_list|()
block|{
name|caseMultiFileTargetMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseMultiFileTargetMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseMultiFileTargetMissing (boolean sync)
specifier|private
name|void
name|caseMultiFileTargetMissing
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/multifile/file3"
argument_list|,
literal|"/tmp/multifile/file4"
argument_list|,
literal|"/tmp/multifile/file5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/multifile/file3"
argument_list|,
literal|"/tmp/multifile/file4"
argument_list|,
literal|"/tmp/multifile/file5"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiDirTargetPresent ()
specifier|public
name|void
name|testMultiDirTargetPresent
parameter_list|()
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/multifile"
argument_list|,
literal|"/tmp/singledir"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/multifile/file3"
argument_list|,
literal|"/tmp/multifile/file4"
argument_list|,
literal|"/tmp/multifile/file5"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/tmp/singledir/dir1"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateMultiDirTargetPresent ()
specifier|public
name|void
name|testUpdateMultiDirTargetPresent
parameter_list|()
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/Umultifile"
argument_list|,
literal|"/tmp/Usingledir"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/Umultifile/Ufile3"
argument_list|,
literal|"/tmp/Umultifile/Ufile4"
argument_list|,
literal|"/tmp/Umultifile/Ufile5"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/tmp/Usingledir/Udir1"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiDirTargetMissing ()
specifier|public
name|void
name|testMultiDirTargetMissing
parameter_list|()
block|{
name|caseMultiDirTargetMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseMultiDirTargetMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseMultiDirTargetMissing (boolean sync)
specifier|private
name|void
name|caseMultiDirTargetMissing
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/multifile"
argument_list|,
literal|"/tmp/singledir"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/multifile/file3"
argument_list|,
literal|"/tmp/multifile/file4"
argument_list|,
literal|"/tmp/multifile/file5"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
literal|"/tmp/singledir/dir1"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGlobTargetMissingSingleLevel ()
specifier|public
name|void
name|testGlobTargetMissingSingleLevel
parameter_list|()
block|{
name|caseGlobTargetMissingSingleLevel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseGlobTargetMissingSingleLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseGlobTargetMissingSingleLevel (boolean sync)
specifier|private
name|void
name|caseGlobTargetMissingSingleLevel
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp1/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/*"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/multifile/file3"
argument_list|,
literal|"/tmp/multifile/file4"
argument_list|,
literal|"/tmp/multifile/file5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/singledir/dir2/file6"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp1"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGlobTargetMissingMultiLevel ()
specifier|public
name|void
name|testGlobTargetMissingMultiLevel
parameter_list|()
block|{
name|caseGlobTargetMissingMultiLevel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caseGlobTargetMissingMultiLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|caseGlobTargetMissingMultiLevel (boolean sync)
specifier|private
name|void
name|caseGlobTargetMissingMultiLevel
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp1/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/*/*"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/multifile/file3"
argument_list|,
literal|"/tmp/multifile/file4"
argument_list|,
literal|"/tmp/multifile/file5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/singledir1/dir3/file7"
argument_list|,
literal|"/tmp/singledir1/dir3/file8"
argument_list|,
literal|"/tmp/singledir1/dir3/file9"
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp1"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGlobTargetDirMultiLevel ()
specifier|public
name|void
name|testGlobTargetDirMultiLevel
parameter_list|()
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp1/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/*/*"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/multifile/file3"
argument_list|,
literal|"/tmp/multifile/file4"
argument_list|,
literal|"/tmp/multifile/file5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/singledir1/dir3/file7"
argument_list|,
literal|"/tmp/singledir1/dir3/file8"
argument_list|,
literal|"/tmp/singledir1/dir3/file9"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp1"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateGlobTargetDirMultiLevel ()
specifier|public
name|void
name|testUpdateGlobTargetDirMultiLevel
parameter_list|()
block|{
try|try
block|{
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp1/listing"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/target"
argument_list|)
decl_stmt|;
name|addEntries
argument_list|(
name|listFile
argument_list|,
literal|"/tmp/*/*"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/Umultifile/Ufile3"
argument_list|,
literal|"/tmp/Umultifile/Ufile4"
argument_list|,
literal|"/tmp/Umultifile/Ufile5"
argument_list|)
expr_stmt|;
name|createFiles
argument_list|(
literal|"/tmp/Usingledir1/Udir3/Ufile7"
argument_list|,
literal|"/tmp/Usingledir1/Udir3/Ufile8"
argument_list|,
literal|"/tmp/Usingledir1/Udir3/Ufile9"
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|listFile
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while testing build listing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"build listing failure"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
name|TestDistCpUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
literal|"/tmp1"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addEntries (Path listFile, String... entries)
specifier|private
name|void
name|addEntries
parameter_list|(
name|Path
name|listFile
parameter_list|,
name|String
modifier|...
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|listFile
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|entry
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createFiles (String... entries)
specifier|private
name|void
name|createFiles
parameter_list|(
name|String
modifier|...
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|entry
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|entry
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|mkdirs (String... entries)
specifier|private
name|void
name|mkdirs
parameter_list|(
name|String
modifier|...
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runTest (Path listFile, Path target, boolean targetExists)
specifier|private
name|void
name|runTest
parameter_list|(
name|Path
name|listFile
parameter_list|,
name|Path
name|target
parameter_list|,
name|boolean
name|targetExists
parameter_list|)
throws|throws
name|IOException
block|{
name|runTest
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|,
name|targetExists
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|runTest (Path listFile, Path target, boolean targetExists, boolean sync)
specifier|private
name|void
name|runTest
parameter_list|(
name|Path
name|listFile
parameter_list|,
name|Path
name|target
parameter_list|,
name|boolean
name|targetExists
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
name|CopyListing
name|listing
init|=
operator|new
name|FileBasedCopyListing
argument_list|(
name|config
argument_list|,
name|CREDENTIALS
argument_list|)
decl_stmt|;
name|DistCpOptions
name|options
init|=
operator|new
name|DistCpOptions
argument_list|(
name|listFile
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|options
operator|.
name|setSyncFolder
argument_list|(
name|sync
argument_list|)
expr_stmt|;
name|options
operator|.
name|setTargetPathExists
argument_list|(
name|targetExists
argument_list|)
expr_stmt|;
name|listing
operator|.
name|buildListing
argument_list|(
name|listFile
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
DECL|method|checkResult (Path listFile, int count)
specifier|private
name|void
name|checkResult
parameter_list|(
name|Path
name|listFile
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|recCount
init|=
literal|0
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|config
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|listFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Text
name|relPath
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
operator|new
name|FileStatus
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|relPath
argument_list|,
name|fileStatus
argument_list|)
condition|)
block|{
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
operator|&&
name|relPath
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// ignore root with empty relPath, which is an entry to be
comment|// used for preserving root attributes etc.
continue|continue;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|relPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|recCount
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|recCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

