begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLogalyzer
specifier|public
class|class
name|TestLogalyzer
block|{
DECL|field|EL
specifier|private
specifier|static
name|String
name|EL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|TAB
specifier|private
specifier|static
name|String
name|TAB
init|=
literal|"\t"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLogalyzer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|workSpace
specifier|private
specifier|static
name|File
name|workSpace
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestLogalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-workSpace"
argument_list|)
decl_stmt|;
DECL|field|outdir
specifier|private
specifier|static
name|File
name|outdir
init|=
operator|new
name|File
argument_list|(
name|workSpace
operator|.
name|getAbsoluteFile
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"out"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testLogalyzer ()
specifier|public
name|void
name|testLogalyzer
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|f
init|=
name|createLogFile
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|10
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-archiveDir"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|f
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"-grep"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
literal|"44"
expr_stmt|;
name|args
index|[
literal|4
index|]
operator|=
literal|"-sort"
expr_stmt|;
name|args
index|[
literal|5
index|]
operator|=
literal|"0"
expr_stmt|;
name|args
index|[
literal|6
index|]
operator|=
literal|"-analysis"
expr_stmt|;
name|args
index|[
literal|7
index|]
operator|=
name|outdir
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|args
index|[
literal|8
index|]
operator|=
literal|"-separator"
expr_stmt|;
name|args
index|[
literal|9
index|]
operator|=
literal|" "
expr_stmt|;
name|Logalyzer
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|checkResult
argument_list|()
expr_stmt|;
block|}
DECL|method|checkResult ()
specifier|private
name|void
name|checkResult
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|result
init|=
operator|new
name|File
argument_list|(
name|outdir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"part-00000"
argument_list|)
decl_stmt|;
name|File
name|success
init|=
operator|new
name|File
argument_list|(
name|outdir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"_SUCCESS"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fis
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
literal|"1 44"
operator|+
name|TAB
operator|+
literal|"2"
operator|)
operator|.
name|equals
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
literal|"3 44"
operator|+
name|TAB
operator|+
literal|"1"
operator|)
operator|.
name|equals
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
literal|"4 44"
operator|+
name|TAB
operator|+
literal|"1"
operator|)
operator|.
name|equals
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create simple log file    *     * @return    * @throws IOException    */
DECL|method|createLogFile ()
specifier|private
name|Path
name|createLogFile
parameter_list|()
throws|throws
name|IOException
block|{
name|FileContext
name|files
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
decl_stmt|;
name|Path
name|ws
init|=
operator|new
name|Path
argument_list|(
name|workSpace
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|files
operator|.
name|delete
argument_list|(
name|ws
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|workSpacePath
init|=
operator|new
name|Path
argument_list|(
name|workSpace
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"log"
argument_list|)
decl_stmt|;
name|files
operator|.
name|mkdir
argument_list|(
name|workSpacePath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"create logfile.log"
argument_list|)
expr_stmt|;
name|Path
name|logfile1
init|=
operator|new
name|Path
argument_list|(
name|workSpacePath
argument_list|,
literal|"logfile.log"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|files
operator|.
name|create
argument_list|(
name|logfile1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"4 3"
operator|+
name|EL
operator|+
literal|"1 3"
operator|+
name|EL
operator|+
literal|"4 44"
operator|+
name|EL
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"2 3"
operator|+
name|EL
operator|+
literal|"1 3"
operator|+
name|EL
operator|+
literal|"0 45"
operator|+
name|EL
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"4 3"
operator|+
name|EL
operator|+
literal|"1 3"
operator|+
name|EL
operator|+
literal|"1 44"
operator|+
name|EL
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"create logfile1.log"
argument_list|)
expr_stmt|;
name|Path
name|logfile2
init|=
operator|new
name|Path
argument_list|(
name|workSpacePath
argument_list|,
literal|"logfile1.log"
argument_list|)
decl_stmt|;
name|os
operator|=
name|files
operator|.
name|create
argument_list|(
name|logfile2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"4 3"
operator|+
name|EL
operator|+
literal|"1 3"
operator|+
name|EL
operator|+
literal|"3 44"
operator|+
name|EL
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"2 3"
operator|+
name|EL
operator|+
literal|"1 3"
operator|+
name|EL
operator|+
literal|"0 45"
operator|+
name|EL
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"4 3"
operator|+
name|EL
operator|+
literal|"1 3"
operator|+
name|EL
operator|+
literal|"1 44"
operator|+
name|EL
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|workSpacePath
return|;
block|}
block|}
end_class

end_unit

