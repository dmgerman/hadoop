begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpV1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_comment
comment|/**  * A JUnit test for copying files recursively.  */
end_comment

begin_class
annotation|@
name|Ignore
DECL|class|TestCopyFiles
specifier|public
class|class
name|TestCopyFiles
extends|extends
name|TestCase
block|{
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hdfs.StateChange"
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DistCpV1
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|LOCAL_FS
specifier|static
specifier|final
name|URI
name|LOCAL_FS
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"file:///"
argument_list|)
decl_stmt|;
DECL|field|RAN
specifier|private
specifier|static
specifier|final
name|Random
name|RAN
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|NFILES
specifier|private
specifier|static
specifier|final
name|int
name|NFILES
init|=
literal|20
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
comment|/** class MyFile contains enough information to recreate the contents of    * a single file.    */
DECL|class|MyFile
specifier|private
specifier|static
class|class
name|MyFile
block|{
DECL|field|gen
specifier|private
specifier|static
name|Random
name|gen
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|MAX_LEVELS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LEVELS
init|=
literal|3
decl_stmt|;
DECL|field|MAX_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SIZE
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
DECL|field|dirNames
specifier|private
specifier|static
name|String
index|[]
name|dirNames
init|=
block|{
literal|"zero"
block|,
literal|"one"
block|,
literal|"two"
block|,
literal|"three"
block|,
literal|"four"
block|,
literal|"five"
block|,
literal|"six"
block|,
literal|"seven"
block|,
literal|"eight"
block|,
literal|"nine"
block|}
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
literal|0
decl_stmt|;
DECL|field|seed
specifier|private
name|long
name|seed
init|=
literal|0L
decl_stmt|;
DECL|method|MyFile ()
name|MyFile
parameter_list|()
block|{
name|this
argument_list|(
name|gen
operator|.
name|nextInt
argument_list|(
name|MAX_LEVELS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|MyFile (int nLevels)
name|MyFile
parameter_list|(
name|int
name|nLevels
parameter_list|)
block|{
name|String
name|xname
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|nLevels
operator|!=
literal|0
condition|)
block|{
name|int
index|[]
name|levels
init|=
operator|new
name|int
index|[
name|nLevels
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nLevels
condition|;
name|idx
operator|++
control|)
block|{
name|levels
index|[
name|idx
index|]
operator|=
name|gen
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nLevels
condition|;
name|idx
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|dirNames
index|[
name|levels
index|[
name|idx
index|]
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|xname
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|long
name|fidx
init|=
name|gen
operator|.
name|nextLong
argument_list|()
operator|&
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|name
operator|=
name|xname
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|fidx
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
specifier|final
name|int
name|oldsize
init|=
name|size
decl_stmt|;
do|do
block|{
name|size
operator|=
name|gen
operator|.
name|nextInt
argument_list|(
name|MAX_SIZE
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|oldsize
operator|==
name|size
condition|)
do|;
specifier|final
name|long
name|oldseed
init|=
name|seed
decl_stmt|;
do|do
block|{
name|seed
operator|=
name|gen
operator|.
name|nextLong
argument_list|()
operator|&
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
do|while
condition|(
name|oldseed
operator|==
name|seed
condition|)
do|;
block|}
DECL|method|getName ()
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getSize ()
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|getSeed ()
name|long
name|getSeed
parameter_list|()
block|{
return|return
name|seed
return|;
block|}
block|}
DECL|method|createFiles (URI fsname, String topdir)
specifier|private
specifier|static
name|MyFile
index|[]
name|createFiles
parameter_list|(
name|URI
name|fsname
parameter_list|,
name|String
name|topdir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createFiles
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|fsname
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
name|topdir
argument_list|)
return|;
block|}
comment|/** create NFILES with random names and directory hierarchies    * with random (but reproducible) data in them.    */
DECL|method|createFiles (FileSystem fs, String topdir)
specifier|private
specifier|static
name|MyFile
index|[]
name|createFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
name|MyFile
index|[]
name|files
init|=
operator|new
name|MyFile
index|[
name|NFILES
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NFILES
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|=
name|createFile
argument_list|(
name|root
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
DECL|method|createFile (Path root, FileSystem fs, int levels)
specifier|static
name|MyFile
name|createFile
parameter_list|(
name|Path
name|root
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|int
name|levels
parameter_list|)
throws|throws
name|IOException
block|{
name|MyFile
name|f
init|=
name|levels
operator|<
literal|0
condition|?
operator|new
name|MyFile
argument_list|()
else|:
operator|new
name|MyFile
argument_list|(
name|levels
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toWrite
init|=
operator|new
name|byte
index|[
name|f
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
operator|new
name|Random
argument_list|(
name|f
operator|.
name|getSeed
argument_list|()
argument_list|)
operator|.
name|nextBytes
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"created: "
operator|+
name|p
operator|+
literal|", size="
operator|+
name|f
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|createFile (Path root, FileSystem fs)
specifier|static
name|MyFile
name|createFile
parameter_list|(
name|Path
name|root
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createFile
argument_list|(
name|root
argument_list|,
name|fs
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|checkFiles (FileSystem fs, String topdir, MyFile[] files )
specifier|private
specifier|static
name|boolean
name|checkFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|MyFile
index|[]
name|files
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|checkFiles
argument_list|(
name|fs
argument_list|,
name|topdir
argument_list|,
name|files
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|checkFiles (FileSystem fs, String topdir, MyFile[] files, boolean existingOnly)
specifier|private
specifier|static
name|boolean
name|checkFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|MyFile
index|[]
name|files
parameter_list|,
name|boolean
name|existingOnly
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|files
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|Path
name|fPath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|files
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|getFileStatus
argument_list|(
name|fPath
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|fPath
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toRead
init|=
operator|new
name|byte
index|[
name|files
index|[
name|idx
index|]
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
name|byte
index|[]
name|toCompare
init|=
operator|new
name|byte
index|[
name|files
index|[
name|idx
index|]
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
name|Random
name|rb
init|=
operator|new
name|Random
argument_list|(
name|files
index|[
name|idx
index|]
operator|.
name|getSeed
argument_list|()
argument_list|)
decl_stmt|;
name|rb
operator|.
name|nextBytes
argument_list|(
name|toCompare
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cannnot read file."
argument_list|,
name|toRead
operator|.
name|length
argument_list|,
name|in
operator|.
name|read
argument_list|(
name|toRead
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toRead
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|toRead
index|[
name|i
index|]
operator|!=
name|toCompare
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|toRead
operator|=
literal|null
expr_stmt|;
name|toCompare
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|existingOnly
condition|)
block|{
throw|throw
name|fnfe
throw|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|updateFiles (FileSystem fs, String topdir, MyFile[] files, int nupdate)
specifier|private
specifier|static
name|void
name|updateFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|MyFile
index|[]
name|files
parameter_list|,
name|int
name|nupdate
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|nupdate
operator|<=
name|NFILES
assert|;
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nupdate
condition|;
operator|++
name|idx
control|)
block|{
name|Path
name|fPath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|files
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// overwrite file
name|assertTrue
argument_list|(
name|fPath
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|fPath
argument_list|)
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|fPath
argument_list|)
decl_stmt|;
name|files
index|[
name|idx
index|]
operator|.
name|reset
argument_list|()
expr_stmt|;
name|byte
index|[]
name|toWrite
init|=
operator|new
name|byte
index|[
name|files
index|[
name|idx
index|]
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
name|Random
name|rb
init|=
operator|new
name|Random
argument_list|(
name|files
index|[
name|idx
index|]
operator|.
name|getSeed
argument_list|()
argument_list|)
decl_stmt|;
name|rb
operator|.
name|nextBytes
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getFileStatus (FileSystem fs, String topdir, MyFile[] files)
specifier|private
specifier|static
name|FileStatus
index|[]
name|getFileStatus
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|MyFile
index|[]
name|files
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFileStatus
argument_list|(
name|fs
argument_list|,
name|topdir
argument_list|,
name|files
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getFileStatus (FileSystem fs, String topdir, MyFile[] files, boolean existingOnly)
specifier|private
specifier|static
name|FileStatus
index|[]
name|getFileStatus
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|MyFile
index|[]
name|files
parameter_list|,
name|boolean
name|existingOnly
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|NFILES
condition|;
operator|++
name|idx
control|)
block|{
try|try
block|{
name|statuses
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|files
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|existingOnly
condition|)
block|{
throw|throw
name|fnfe
throw|;
block|}
block|}
block|}
return|return
name|statuses
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|statuses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|checkUpdate (FileSystem fs, FileStatus[] old, String topdir, MyFile[] upd, final int nupdate)
specifier|private
specifier|static
name|boolean
name|checkUpdate
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
index|[]
name|old
parameter_list|,
name|String
name|topdir
parameter_list|,
name|MyFile
index|[]
name|upd
parameter_list|,
specifier|final
name|int
name|nupdate
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
comment|// overwrote updated files
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nupdate
condition|;
operator|++
name|idx
control|)
block|{
specifier|final
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|upd
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|getModificationTime
argument_list|()
operator|<=
name|old
index|[
name|idx
index|]
operator|.
name|getModificationTime
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// did not overwrite files not updated
for|for
control|(
name|int
name|idx
init|=
name|nupdate
init|;
name|idx
operator|<
name|NFILES
condition|;
operator|++
name|idx
control|)
block|{
specifier|final
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|upd
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|getModificationTime
argument_list|()
operator|!=
name|old
index|[
name|idx
index|]
operator|.
name|getModificationTime
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** delete directory and everything underneath it.*/
DECL|method|deldir (FileSystem fs, String topdir)
specifier|private
specifier|static
name|void
name|deldir
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** copy files from local file system to local file system */
DECL|method|testCopyFromLocalToLocal ()
specifier|public
name|void
name|testCopyFromLocalToLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|LOCAL_FS
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|LOCAL_FS
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
comment|/** copy files from dfs file system to dfs file system */
DECL|method|testCopyFromDfsToDfs ()
specifier|public
name|void
name|testCopyFromDfsToDfs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|namenode
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|namenode
operator|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|namenode
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
condition|)
block|{
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
argument_list|)
argument_list|,
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-log"
block|,
name|namenode
operator|+
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/srcdat"
block|,
name|namenode
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
operator|+
literal|"/logs"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Log directory does not exist."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|namenode
operator|+
literal|"/logs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** copy empty directory on dfs file system */
DECL|method|testEmptyDir ()
specifier|public
name|void
name|testEmptyDir
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|namenode
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|namenode
operator|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|namenode
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/empty"
argument_list|)
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-log"
block|,
name|namenode
operator|+
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/empty"
block|,
name|namenode
operator|+
literal|"/dest"
block|}
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
operator|+
literal|"/destdat"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Destination directory does not exist."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|namenode
operator|+
literal|"/dest"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/dest"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/empty"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** copy files from local file system to dfs file system */
DECL|method|testCopyFromLocalToDfs ()
specifier|public
name|void
name|testCopyFromLocalToDfs
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|namenode
init|=
name|hdfs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|namenode
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
condition|)
block|{
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|LOCAL_FS
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-log"
block|,
name|namenode
operator|+
literal|"/logs"
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
block|,
name|namenode
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Log directory does not exist."
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|namenode
operator|+
literal|"/logs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|LOCAL_FS
argument_list|,
name|conf
argument_list|)
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** copy files from dfs file system to local file system */
DECL|method|testCopyFromDfsToLocal ()
specifier|public
name|void
name|testCopyFromDfsToLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|LOCAL_FS
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|namenode
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|namenode
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
condition|)
block|{
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
argument_list|)
argument_list|,
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-log"
block|,
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/srcdat"
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Log directory does not exist."
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/logs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testCopyDfsToDfsUpdateOverwrite ()
specifier|public
name|void
name|testCopyDfsToDfsUpdateOverwrite
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|namenode
init|=
name|hdfs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|namenode
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
condition|)
block|{
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
argument_list|)
argument_list|,
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
literal|"-log"
block|,
name|namenode
operator|+
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/srcdat"
block|,
name|namenode
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
operator|+
literal|"/logs"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Log directory does not exist."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|namenode
operator|+
literal|"/logs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|dchkpoint
init|=
name|getFileStatus
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nupdate
init|=
name|NFILES
operator|>>
literal|2
decl_stmt|;
name|updateFiles
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
literal|"/srcdat"
argument_list|,
name|files
argument_list|,
name|nupdate
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-prbugp"
block|,
comment|// no t to avoid preserving mod. times
literal|"-update"
block|,
literal|"-log"
block|,
name|namenode
operator|+
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/srcdat"
block|,
name|namenode
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Update failed to replicate all changes in src"
argument_list|,
name|checkUpdate
argument_list|(
name|hdfs
argument_list|,
name|dchkpoint
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|,
name|nupdate
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-prbugp"
block|,
comment|// no t to avoid preserving mod. times
literal|"-overwrite"
block|,
literal|"-log"
block|,
name|namenode
operator|+
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/srcdat"
block|,
name|namenode
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"-overwrite didn't."
argument_list|,
name|checkUpdate
argument_list|(
name|hdfs
argument_list|,
name|dchkpoint
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|,
name|NFILES
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testCopyDfsToDfsUpdateWithSkipCRC ()
specifier|public
name|void
name|testCopyDfsToDfsUpdateWithSkipCRC
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|namenode
init|=
name|hdfs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create two files of the same name, same length but different
comment|// contents
specifier|final
name|String
name|testfilename
init|=
literal|"test"
decl_stmt|;
specifier|final
name|String
name|srcData
init|=
literal|"act act act"
decl_stmt|;
specifier|final
name|String
name|destData
init|=
literal|"cat cat cat"
decl_stmt|;
if|if
condition|(
name|namenode
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
condition|)
block|{
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
literal|"/srcdat"
argument_list|,
name|testfilename
argument_list|)
decl_stmt|;
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
literal|"/destdat"
argument_list|,
name|testfilename
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|srcPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|srcData
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|destPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|destData
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Run with -skipcrccheck option
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
literal|"-update"
block|,
literal|"-skipcrccheck"
block|,
literal|"-log"
block|,
name|namenode
operator|+
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/srcdat"
block|,
name|namenode
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
comment|// File should not be overwritten
name|FSDataInputStream
name|in
init|=
name|hdfs
operator|.
name|open
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dest had: "
operator|+
name|s
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dest got over written even with skip crc"
argument_list|,
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
name|destData
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
comment|// Run without the option
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
literal|"-update"
block|,
literal|"-log"
block|,
name|namenode
operator|+
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/srcdat"
block|,
name|namenode
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
comment|// File should be overwritten
name|in
operator|=
name|hdfs
operator|.
name|open
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|s
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dest had: "
operator|+
name|s
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dest did not get overwritten without skip crc"
argument_list|,
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
name|srcData
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testCopyDuplication ()
specifier|public
name|void
name|testCopyDuplication
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|LOCAL_FS
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/src2/srcdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/src2/srcdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DistCpV1
operator|.
name|DuplicationException
operator|.
name|ERROR_CODE
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/src2/srcdat"
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
block|,}
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deldir
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/src2"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCopySingleFile ()
specifier|public
name|void
name|testCopySingleFile
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|LOCAL_FS
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|)
decl_stmt|;
try|try
block|{
name|MyFile
index|[]
name|files
init|=
block|{
name|createFile
argument_list|(
name|root
argument_list|,
name|fs
argument_list|)
block|}
decl_stmt|;
comment|//copy a dir with a single file
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|fs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
comment|//copy a single file
name|String
name|fname
init|=
name|files
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|fname
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"fname="
operator|+
name|fname
operator|+
literal|", exists? "
operator|+
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat/"
operator|+
name|fname
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/dest2/"
operator|+
name|fname
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|fs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/dest2"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
comment|// single file update should skip copy if destination has the file already
name|String
index|[]
name|args
init|=
block|{
literal|"-update"
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat/"
operator|+
name|fname
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/dest2/"
operator|+
name|fname
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|DistCpV1
operator|.
name|class
argument_list|)
decl_stmt|;
name|DistCpV1
operator|.
name|Arguments
name|distcpArgs
init|=
name|DistCpV1
operator|.
name|Arguments
operator|.
name|valueOf
argument_list|(
name|args
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Single file update failed to skip copying even though the "
operator|+
literal|"file exists at destination."
argument_list|,
name|DistCpV1
operator|.
name|setup
argument_list|(
name|conf
argument_list|,
name|job
argument_list|,
name|distcpArgs
argument_list|)
argument_list|)
expr_stmt|;
comment|//copy single file to existing dir
name|deldir
argument_list|(
name|fs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/dest2"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/dest2"
argument_list|)
argument_list|)
expr_stmt|;
name|MyFile
index|[]
name|files2
init|=
block|{
name|createFile
argument_list|(
name|root
argument_list|,
name|fs
argument_list|,
literal|0
argument_list|)
block|}
decl_stmt|;
name|String
name|sname
init|=
name|files2
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-update"
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat/"
operator|+
name|sname
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/dest2/"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|fs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/dest2"
argument_list|,
name|files2
argument_list|)
argument_list|)
expr_stmt|;
name|updateFiles
argument_list|(
name|fs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|,
name|files2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//copy single file to existing dir w/ dst name conflict
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-update"
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat/"
operator|+
name|sname
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/dest2/"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|fs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/dest2"
argument_list|,
name|files2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deldir
argument_list|(
name|fs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/dest2"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** tests basedir option copying files from dfs file system to dfs file system */
DECL|method|testBasedir ()
specifier|public
name|void
name|testBasedir
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|namenode
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|namenode
operator|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|namenode
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
condition|)
block|{
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
argument_list|)
argument_list|,
literal|"/basedir/middle/srcdat"
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-basedir"
block|,
literal|"/basedir"
block|,
name|namenode
operator|+
literal|"/basedir/middle/srcdat"
block|,
name|namenode
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat/middle/srcdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/basedir"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPreserveOption ()
specifier|public
name|void
name|testPreserveOption
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|nnUri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|nnUri
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
block|{
comment|//test preserving user
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|nnUri
argument_list|)
argument_list|,
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|srcstat
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|,
name|files
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcstat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|srcstat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"u"
operator|+
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-pu"
block|,
name|nnUri
operator|+
literal|"/srcdat"
block|,
name|nnUri
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|dststat
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dststat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
literal|"u"
operator|+
name|i
argument_list|,
name|dststat
index|[
name|i
index|]
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deldir
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test preserving group
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|nnUri
argument_list|)
argument_list|,
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|srcstat
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|,
name|files
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcstat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|srcstat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"g"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-pg"
block|,
name|nnUri
operator|+
literal|"/srcdat"
block|,
name|nnUri
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|dststat
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dststat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
literal|"g"
operator|+
name|i
argument_list|,
name|dststat
index|[
name|i
index|]
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deldir
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test preserving mode
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|nnUri
argument_list|)
argument_list|,
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|srcstat
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|FsPermission
index|[]
name|permissions
init|=
operator|new
name|FsPermission
index|[
name|srcstat
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcstat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|permissions
index|[
name|i
index|]
operator|=
operator|new
name|FsPermission
argument_list|(
call|(
name|short
call|)
argument_list|(
name|i
operator|&
literal|0666
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|srcstat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|permissions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-pp"
block|,
name|nnUri
operator|+
literal|"/srcdat"
block|,
name|nnUri
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|dststat
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dststat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
name|permissions
index|[
name|i
index|]
argument_list|,
name|dststat
index|[
name|i
index|]
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deldir
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test preserving times
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|nnUri
argument_list|)
argument_list|,
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/srcdat/tmpf1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/srcdat/tmpf2"
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|srcstat
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|FsPermission
index|[]
name|permissions
init|=
operator|new
name|FsPermission
index|[
name|srcstat
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcstat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|setTimes
argument_list|(
name|srcstat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|40
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-pt"
block|,
name|nnUri
operator|+
literal|"/srcdat"
block|,
name|nnUri
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|dststat
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dststat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Modif. Time i="
operator|+
name|i
argument_list|,
literal|40
argument_list|,
name|dststat
index|[
name|i
index|]
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Access Time i="
operator|+
name|i
operator|+
name|srcstat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|+
literal|"-"
operator|+
name|dststat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|50
argument_list|,
name|dststat
index|[
name|i
index|]
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testMapCount ()
specifier|public
name|void
name|testMapCount
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|namenode
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|namenode
operator|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|3
argument_list|,
name|namenode
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|long
name|totsize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MyFile
name|f
range|:
name|files
control|)
block|{
name|totsize
operator|+=
name|f
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
name|Configuration
name|job
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|job
operator|.
name|setLong
argument_list|(
literal|"distcp.bytes.per.map"
argument_list|,
name|totsize
operator|/
literal|3
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|job
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-m"
block|,
literal|"100"
block|,
literal|"-log"
block|,
name|namenode
operator|+
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/srcdat"
block|,
name|namenode
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|logdir
init|=
name|namenode
operator|+
literal|"/logs"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|execCmd
argument_list|(
name|shell
argument_list|,
literal|"-lsr"
argument_list|,
name|logdir
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|logs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|logdir
argument_list|)
argument_list|)
decl_stmt|;
comment|// rare case where splits are exact, logs.length can be 4
name|assertTrue
argument_list|(
literal|"Unexpected map count, logs.length="
operator|+
name|logs
operator|.
name|length
argument_list|,
name|logs
operator|.
name|length
operator|==
literal|5
operator|||
name|logs
operator|.
name|length
operator|==
literal|4
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|job
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-m"
block|,
literal|"1"
block|,
literal|"-log"
block|,
name|namenode
operator|+
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/srcdat"
block|,
name|namenode
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|execCmd
argument_list|(
name|shell
argument_list|,
literal|"-lsr"
argument_list|,
name|logdir
argument_list|)
argument_list|)
expr_stmt|;
name|logs
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|namenode
operator|+
literal|"/logs/part*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected map count, logs.length="
operator|+
name|logs
operator|.
name|length
argument_list|,
name|logs
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testLimits ()
specifier|public
name|void
name|testLimits
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|String
name|nnUri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|nnUri
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|DistCpV1
name|distcp
init|=
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|srcrootdir
init|=
literal|"/src_root"
decl_stmt|;
specifier|final
name|Path
name|srcrootpath
init|=
operator|new
name|Path
argument_list|(
name|srcrootdir
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dstrootdir
init|=
literal|"/dst_root"
decl_stmt|;
specifier|final
name|Path
name|dstrootpath
init|=
operator|new
name|Path
argument_list|(
name|dstrootdir
argument_list|)
decl_stmt|;
block|{
comment|//test -filelimit
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|nnUri
argument_list|)
argument_list|,
name|srcrootdir
argument_list|)
decl_stmt|;
name|int
name|filelimit
init|=
name|files
operator|.
name|length
operator|/
literal|2
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"filelimit="
operator|+
name|filelimit
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|distcp
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-filelimit"
block|,
literal|""
operator|+
name|filelimit
block|,
name|nnUri
operator|+
name|srcrootdir
block|,
name|nnUri
operator|+
name|dstrootdir
block|}
argument_list|)
expr_stmt|;
name|String
name|results
init|=
name|execCmd
argument_list|(
name|shell
argument_list|,
literal|"-lsr"
argument_list|,
name|dstrootdir
argument_list|)
decl_stmt|;
name|results
operator|=
name|removePrefix
argument_list|(
name|results
argument_list|,
name|dstrootdir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"results="
operator|+
name|results
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|dststat
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
name|dstrootdir
argument_list|,
name|files
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|filelimit
argument_list|,
name|dststat
operator|.
name|length
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
name|dstrootdir
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
name|srcrootdir
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test -sizelimit
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|nnUri
argument_list|)
argument_list|,
name|srcrootdir
argument_list|)
expr_stmt|;
name|long
name|sizelimit
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|srcrootpath
argument_list|)
operator|.
name|getLength
argument_list|()
operator|/
literal|2
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sizelimit="
operator|+
name|sizelimit
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|distcp
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-sizelimit"
block|,
literal|""
operator|+
name|sizelimit
block|,
name|nnUri
operator|+
name|srcrootdir
block|,
name|nnUri
operator|+
name|dstrootdir
block|}
argument_list|)
expr_stmt|;
name|ContentSummary
name|summary
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|dstrootpath
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"summary="
operator|+
name|summary
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|summary
operator|.
name|getLength
argument_list|()
operator|<=
name|sizelimit
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
name|dstrootdir
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
name|srcrootdir
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test update
specifier|final
name|MyFile
index|[]
name|srcs
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|nnUri
argument_list|)
argument_list|,
name|srcrootdir
argument_list|)
decl_stmt|;
specifier|final
name|long
name|totalsize
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|srcrootpath
argument_list|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"src.length="
operator|+
name|srcs
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"totalsize ="
operator|+
name|totalsize
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dstrootpath
argument_list|)
expr_stmt|;
specifier|final
name|int
name|parts
init|=
name|RAN
operator|.
name|nextInt
argument_list|(
name|NFILES
operator|/
literal|3
operator|-
literal|1
argument_list|)
operator|+
literal|2
decl_stmt|;
specifier|final
name|int
name|filelimit
init|=
name|srcs
operator|.
name|length
operator|/
name|parts
decl_stmt|;
specifier|final
name|long
name|sizelimit
init|=
name|totalsize
operator|/
name|parts
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"filelimit="
operator|+
name|filelimit
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sizelimit="
operator|+
name|sizelimit
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"parts    ="
operator|+
name|parts
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|args
init|=
block|{
literal|"-filelimit"
block|,
literal|""
operator|+
name|filelimit
block|,
literal|"-sizelimit"
block|,
literal|""
operator|+
name|sizelimit
block|,
literal|"-update"
block|,
name|nnUri
operator|+
name|srcrootdir
block|,
name|nnUri
operator|+
name|dstrootdir
block|}
decl_stmt|;
name|int
name|dstfilecount
init|=
literal|0
decl_stmt|;
name|long
name|dstsize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|parts
condition|;
name|i
operator|++
control|)
block|{
name|ToolRunner
operator|.
name|run
argument_list|(
name|distcp
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|dststat
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
name|dstrootdir
argument_list|,
name|srcs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|") dststat.length="
operator|+
name|dststat
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dststat
operator|.
name|length
operator|-
name|dstfilecount
operator|<=
name|filelimit
argument_list|)
expr_stmt|;
name|ContentSummary
name|summary
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|dstrootpath
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|") summary.getLength()="
operator|+
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|summary
operator|.
name|getLength
argument_list|()
operator|-
name|dstsize
operator|<=
name|sizelimit
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkFiles
argument_list|(
name|fs
argument_list|,
name|dstrootdir
argument_list|,
name|srcs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dstfilecount
operator|=
name|dststat
operator|.
name|length
expr_stmt|;
name|dstsize
operator|=
name|summary
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|deldir
argument_list|(
name|fs
argument_list|,
name|dstrootdir
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
name|srcrootdir
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|now
specifier|static
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|method|createUGI (String name, boolean issuper)
specifier|static
name|UserGroupInformation
name|createUGI
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|issuper
parameter_list|)
block|{
name|String
name|username
init|=
name|name
operator|+
name|now
decl_stmt|;
name|String
name|group
init|=
name|issuper
condition|?
literal|"supergroup"
else|:
name|username
decl_stmt|;
return|return
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|username
argument_list|,
operator|new
name|String
index|[]
block|{
name|group
block|}
argument_list|)
return|;
block|}
DECL|method|createHomeDirectory (FileSystem fs, UserGroupInformation ugi )
specifier|static
name|Path
name|createHomeDirectory
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|home
init|=
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|home
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|home
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|home
return|;
block|}
DECL|method|testHftpAccessControl ()
specifier|public
name|void
name|testHftpAccessControl
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|UserGroupInformation
name|DFS_UGI
init|=
name|createUGI
argument_list|(
literal|"dfs"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|UserGroupInformation
name|USER_UGI
init|=
name|createUGI
argument_list|(
literal|"user"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//start cluster by DFS_UGI
specifier|final
name|Configuration
name|dfsConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|dfsConf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|String
name|httpAdd
init|=
name|dfsConf
operator|.
name|get
argument_list|(
literal|"dfs.http.address"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|nnURI
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|dfsConf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|nnUri
init|=
name|nnURI
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|DFS_UGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|nnURI
argument_list|,
name|dfsConf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|home
init|=
name|createHomeDirectory
argument_list|(
name|fs1
argument_list|,
name|USER_UGI
argument_list|)
decl_stmt|;
comment|//now, login as USER_UGI
specifier|final
name|Configuration
name|userConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|USER_UGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|nnURI
argument_list|,
name|userConf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|srcrootpath
init|=
operator|new
name|Path
argument_list|(
name|home
argument_list|,
literal|"src_root"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|srcrootdir
init|=
name|srcrootpath
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|dstrootpath
init|=
operator|new
name|Path
argument_list|(
name|home
argument_list|,
literal|"dst_root"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dstrootdir
init|=
name|dstrootpath
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|DistCpV1
name|distcp
init|=
name|USER_UGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|DistCpV1
argument_list|>
argument_list|()
block|{
specifier|public
name|DistCpV1
name|run
parameter_list|()
block|{
return|return
operator|new
name|DistCpV1
argument_list|(
name|userConf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|srcrootpath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|args
init|=
block|{
literal|"hftp://"
operator|+
name|httpAdd
operator|+
name|srcrootdir
block|,
name|nnUri
operator|+
name|dstrootdir
block|}
decl_stmt|;
block|{
comment|//copy with permission 000, should fail
name|fs
operator|.
name|setPermission
argument_list|(
name|srcrootpath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|USER_UGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|distcp
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** test -delete */
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"fs.trash.interval"
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|nnURI
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|nnUri
init|=
name|nnURI
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|nnUri
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|DistCpV1
name|distcp
init|=
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|srcrootdir
init|=
literal|"/src_root"
decl_stmt|;
specifier|final
name|String
name|dstrootdir
init|=
literal|"/dst_root"
decl_stmt|;
block|{
comment|//create source files
name|createFiles
argument_list|(
name|nnURI
argument_list|,
name|srcrootdir
argument_list|)
expr_stmt|;
name|String
name|srcresults
init|=
name|execCmd
argument_list|(
name|shell
argument_list|,
literal|"-lsr"
argument_list|,
name|srcrootdir
argument_list|)
decl_stmt|;
name|srcresults
operator|=
name|removePrefix
argument_list|(
name|srcresults
argument_list|,
name|srcrootdir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"srcresults="
operator|+
name|srcresults
argument_list|)
expr_stmt|;
comment|//create some files in dst
name|createFiles
argument_list|(
name|nnURI
argument_list|,
name|dstrootdir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"dstrootdir="
operator|+
name|dstrootdir
argument_list|)
expr_stmt|;
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-lsr"
block|,
name|dstrootdir
block|}
argument_list|)
expr_stmt|;
comment|//run distcp
name|ToolRunner
operator|.
name|run
argument_list|(
name|distcp
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-delete"
block|,
literal|"-update"
block|,
literal|"-log"
block|,
literal|"/log"
block|,
name|nnUri
operator|+
name|srcrootdir
block|,
name|nnUri
operator|+
name|dstrootdir
block|}
argument_list|)
expr_stmt|;
comment|//make sure src and dst contains the same files
name|String
name|dstresults
init|=
name|execCmd
argument_list|(
name|shell
argument_list|,
literal|"-lsr"
argument_list|,
name|dstrootdir
argument_list|)
decl_stmt|;
name|dstresults
operator|=
name|removePrefix
argument_list|(
name|dstresults
argument_list|,
name|dstrootdir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"first dstresults="
operator|+
name|dstresults
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|srcresults
argument_list|,
name|dstresults
argument_list|)
expr_stmt|;
comment|//create additional file in dst
name|create
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|dstrootdir
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|create
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|dstrootdir
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
comment|//run distcp again
name|ToolRunner
operator|.
name|run
argument_list|(
name|distcp
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-delete"
block|,
literal|"-update"
block|,
literal|"-log"
block|,
literal|"/log2"
block|,
name|nnUri
operator|+
name|srcrootdir
block|,
name|nnUri
operator|+
name|dstrootdir
block|}
argument_list|)
expr_stmt|;
comment|//make sure src and dst contains the same files
name|dstresults
operator|=
name|execCmd
argument_list|(
name|shell
argument_list|,
literal|"-lsr"
argument_list|,
name|dstrootdir
argument_list|)
expr_stmt|;
name|dstresults
operator|=
name|removePrefix
argument_list|(
name|dstresults
argument_list|,
name|dstrootdir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"second dstresults="
operator|+
name|dstresults
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|srcresults
argument_list|,
name|dstresults
argument_list|)
expr_stmt|;
comment|// verify that files removed in -delete were moved to the trash
comment|// regrettably, this test will break if Trash changes incompatibly
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
literal|".Trash/Current"
operator|+
name|dstrootdir
operator|+
literal|"/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
literal|".Trash/Current"
operator|+
name|dstrootdir
operator|+
literal|"/foobar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//cleanup
name|deldir
argument_list|(
name|fs
argument_list|,
name|dstrootdir
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|fs
argument_list|,
name|srcrootdir
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * verify that -delete option works for other {@link FileSystem}    * implementations. See MAPREDUCE-1285 */
DECL|method|testDeleteLocal ()
specifier|public
name|void
name|testDeleteLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|LOCAL_FS
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|namenode
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|namenode
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
condition|)
block|{
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
argument_list|)
argument_list|,
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|String
name|destdir
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
decl_stmt|;
name|MyFile
index|[]
name|localFiles
init|=
name|createFiles
argument_list|(
name|localfs
argument_list|,
name|destdir
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-delete"
block|,
literal|"-update"
block|,
literal|"-log"
block|,
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/srcdat"
block|,
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|localfs
argument_list|,
name|destdir
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Log directory does not exist."
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/logs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|localfs
argument_list|,
name|destdir
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** test globbing  */
DECL|method|testGlobbing ()
specifier|public
name|void
name|testGlobbing
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|namenode
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|namenode
operator|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|namenode
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
condition|)
block|{
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
argument_list|)
argument_list|,
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCpV1
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-log"
block|,
name|namenode
operator|+
literal|"/logs"
block|,
name|namenode
operator|+
literal|"/srcdat/*"
block|,
name|namenode
operator|+
literal|"/destdat"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
operator|+
literal|"/logs"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Log directory does not exist."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|namenode
operator|+
literal|"/logs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|create (FileSystem fs, Path f)
specifier|static
name|void
name|create
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1024
operator|+
name|RAN
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
index|]
decl_stmt|;
name|RAN
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|execCmd (FsShell shell, String... args)
specifier|static
name|String
name|execCmd
parameter_list|(
name|FsShell
name|shell
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|baout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|baout
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PrintStream
name|old
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|old
argument_list|)
expr_stmt|;
return|return
name|baout
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|removePrefix (String lines, String prefix)
specifier|private
specifier|static
name|String
name|removePrefix
parameter_list|(
name|String
name|lines
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
specifier|final
name|int
name|prefixlen
init|=
name|prefix
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|StringTokenizer
name|t
init|=
operator|new
name|StringTokenizer
argument_list|(
name|lines
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
specifier|final
name|StringBuffer
name|results
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|t
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|s
init|=
name|t
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|results
operator|.
name|append
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|indexOf
argument_list|(
name|prefix
argument_list|)
operator|+
name|prefixlen
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|results
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

