begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_class
annotation|@
name|Ignore
DECL|class|TestDistCh
specifier|public
class|class
name|TestDistCh
extends|extends
name|junit
operator|.
name|framework
operator|.
name|TestCase
block|{
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hdfs.StateChange"
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
block|}
DECL|field|RANDOM_NUMBER_GENERATOR_SEED
specifier|static
specifier|final
name|Long
name|RANDOM_NUMBER_GENERATOR_SEED
init|=
literal|null
decl_stmt|;
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
static|static
block|{
specifier|final
name|long
name|seed
init|=
name|RANDOM_NUMBER_GENERATOR_SEED
operator|==
literal|null
condition|?
name|RANDOM
operator|.
name|nextLong
argument_list|()
else|:
name|RANDOM_NUMBER_GENERATOR_SEED
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"seed="
operator|+
name|seed
argument_list|)
expr_stmt|;
name|RANDOM
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
DECL|field|TEST_ROOT_DIR
specifier|static
specifier|final
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
DECL|field|NUN_SUBS
specifier|static
specifier|final
name|int
name|NUN_SUBS
init|=
literal|5
decl_stmt|;
DECL|class|FileTree
specifier|static
class|class
name|FileTree
block|{
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|root
specifier|private
specifier|final
name|String
name|root
decl_stmt|;
DECL|field|rootdir
specifier|private
specifier|final
name|Path
name|rootdir
decl_stmt|;
DECL|field|fcount
specifier|private
name|int
name|fcount
init|=
literal|0
decl_stmt|;
DECL|method|createSmallFile (Path dir)
name|Path
name|createSmallFile
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"f"
operator|+
operator|++
name|fcount
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|writeBytes
argument_list|(
literal|"createSmallFile: f="
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|mkdir (Path dir)
name|Path
name|mkdir
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dir
return|;
block|}
DECL|method|FileTree (FileSystem fs, String name)
name|FileTree
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|root
operator|=
literal|"/test/"
operator|+
name|name
expr_stmt|;
name|this
operator|.
name|rootdir
operator|=
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|createSmallFile
argument_list|(
name|rootdir
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUN_SUBS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|sub
init|=
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"sub"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|num_files
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|num_files
condition|;
name|j
operator|++
control|)
block|{
name|createSmallFile
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"rootdir = "
operator|+
name|rootdir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ChPermissionStatus
specifier|static
class|class
name|ChPermissionStatus
extends|extends
name|PermissionStatus
block|{
DECL|method|ChPermissionStatus (FileStatus filestatus)
name|ChPermissionStatus
parameter_list|(
name|FileStatus
name|filestatus
parameter_list|)
block|{
name|this
argument_list|(
name|filestatus
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|ChPermissionStatus (FileStatus filestatus, String owner, String group, String permission)
name|ChPermissionStatus
parameter_list|(
name|FileStatus
name|filestatus
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|permission
parameter_list|)
block|{
name|super
argument_list|(
literal|""
operator|.
name|equals
argument_list|(
name|owner
argument_list|)
condition|?
name|filestatus
operator|.
name|getOwner
argument_list|()
else|:
name|owner
argument_list|,
literal|""
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|?
name|filestatus
operator|.
name|getGroup
argument_list|()
else|:
name|group
argument_list|,
literal|""
operator|.
name|equals
argument_list|(
name|permission
argument_list|)
condition|?
name|filestatus
operator|.
name|getPermission
argument_list|()
else|:
operator|new
name|FsPermission
argument_list|(
name|Short
operator|.
name|parseShort
argument_list|(
name|permission
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDistCh ()
specifier|public
name|void
name|testDistCh
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|MiniMRCluster
name|mr
init|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|FileTree
name|tree
init|=
operator|new
name|FileTree
argument_list|(
name|fs
argument_list|,
literal|"testDistCh"
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|rootstatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|tree
operator|.
name|rootdir
argument_list|)
decl_stmt|;
name|runLsr
argument_list|(
name|shell
argument_list|,
name|tree
operator|.
name|root
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//generate random arguments
specifier|final
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|NUN_SUBS
operator|-
literal|1
argument_list|)
operator|+
literal|1
index|]
decl_stmt|;
specifier|final
name|PermissionStatus
index|[]
name|newstatus
init|=
operator|new
name|PermissionStatus
index|[
name|NUN_SUBS
index|]
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|indices
init|=
operator|new
name|LinkedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUN_SUBS
condition|;
name|i
operator|++
control|)
block|{
name|indices
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|indices
operator|.
name|remove
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|indices
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sub
init|=
literal|"sub"
operator|+
name|index
decl_stmt|;
specifier|final
name|boolean
name|changeOwner
init|=
name|RANDOM
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|changeGroup
init|=
name|RANDOM
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|changeMode
init|=
operator|!
name|changeOwner
operator|&&
operator|!
name|changeGroup
condition|?
literal|true
else|:
name|RANDOM
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|String
name|owner
init|=
name|changeOwner
condition|?
name|sub
else|:
literal|""
decl_stmt|;
specifier|final
name|String
name|group
init|=
name|changeGroup
condition|?
name|sub
else|:
literal|""
decl_stmt|;
specifier|final
name|String
name|permission
init|=
name|changeMode
condition|?
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|8
argument_list|)
operator|+
literal|""
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|8
argument_list|)
operator|+
literal|""
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|8
argument_list|)
else|:
literal|""
decl_stmt|;
name|args
index|[
name|i
index|]
operator|=
name|tree
operator|.
name|root
operator|+
literal|"/"
operator|+
name|sub
operator|+
literal|":"
operator|+
name|owner
operator|+
literal|":"
operator|+
name|group
operator|+
literal|":"
operator|+
name|permission
expr_stmt|;
name|newstatus
index|[
name|index
index|]
operator|=
operator|new
name|ChPermissionStatus
argument_list|(
name|rootstatus
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUN_SUBS
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|newstatus
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|newstatus
index|[
name|i
index|]
operator|=
operator|new
name|ChPermissionStatus
argument_list|(
name|rootstatus
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"args="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|",\n  "
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"newstatus="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|newstatus
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|",\n  "
argument_list|)
argument_list|)
expr_stmt|;
comment|//run DistCh
operator|new
name|DistCh
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|runLsr
argument_list|(
name|shell
argument_list|,
name|tree
operator|.
name|root
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//check results
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUN_SUBS
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|sub
init|=
operator|new
name|Path
argument_list|(
name|tree
operator|.
name|root
operator|+
literal|"/sub"
operator|+
name|i
argument_list|)
decl_stmt|;
name|checkFileStatus
argument_list|(
name|newstatus
index|[
name|i
index|]
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|sub
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|sub
argument_list|)
control|)
block|{
name|checkFileStatus
argument_list|(
name|newstatus
index|[
name|i
index|]
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|UMASK
specifier|static
specifier|final
name|FsPermission
name|UMASK
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0111
argument_list|)
decl_stmt|;
DECL|method|checkFileStatus (PermissionStatus expected, FileStatus actual)
specifier|static
name|void
name|checkFileStatus
parameter_list|(
name|PermissionStatus
name|expected
parameter_list|,
name|FileStatus
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getUserName
argument_list|()
argument_list|,
name|actual
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|actual
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|FsPermission
name|perm
init|=
name|expected
operator|.
name|getPermission
argument_list|()
decl_stmt|;
if|if
condition|(
name|actual
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|perm
operator|=
name|perm
operator|.
name|applyUMask
argument_list|(
name|UMASK
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|perm
argument_list|,
name|actual
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|runLsr (final FsShell shell, String root, int returnvalue )
specifier|private
specifier|static
name|String
name|runLsr
parameter_list|(
specifier|final
name|FsShell
name|shell
parameter_list|,
name|String
name|root
parameter_list|,
name|int
name|returnvalue
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"root="
operator|+
name|root
operator|+
literal|", returnvalue="
operator|+
name|returnvalue
argument_list|)
expr_stmt|;
specifier|final
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
specifier|final
name|PrintStream
name|oldErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|out
argument_list|)
expr_stmt|;
specifier|final
name|String
name|results
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|returnvalue
argument_list|,
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-lsr"
block|,
name|root
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|bytes
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|oldErr
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"results:\n"
operator|+
name|results
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

