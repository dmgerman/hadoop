begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobSubmissionFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * A Map-reduce program to recursively change files properties  * such as owner, group and permission.  */
end_comment

begin_class
DECL|class|DistCh
specifier|public
class|class
name|DistCh
extends|extends
name|DistTool
block|{
DECL|field|NAME
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"distch"
decl_stmt|;
DECL|field|JOB_DIR_LABEL
specifier|static
specifier|final
name|String
name|JOB_DIR_LABEL
init|=
name|NAME
operator|+
literal|".job.dir"
decl_stmt|;
DECL|field|OP_LIST_LABEL
specifier|static
specifier|final
name|String
name|OP_LIST_LABEL
init|=
name|NAME
operator|+
literal|".op.list"
decl_stmt|;
DECL|field|OP_COUNT_LABEL
specifier|static
specifier|final
name|String
name|OP_COUNT_LABEL
init|=
name|NAME
operator|+
literal|".op.count"
decl_stmt|;
DECL|field|USAGE
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"java "
operator|+
name|DistCh
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" [OPTIONS]<path:owner:group:permission>+ "
operator|+
literal|"\n\nThe values of owner, group and permission can be empty."
operator|+
literal|"\nPermission is a octal number."
operator|+
literal|"\n\nOPTIONS:"
operator|+
literal|"\n-f<urilist_uri>       Use list at<urilist_uri> as src list"
operator|+
literal|"\n-i                     Ignore failures"
operator|+
literal|"\n-log<logdir>          Write logs to<logdir>"
decl_stmt|;
DECL|field|OP_PER_MAP
specifier|private
specifier|static
specifier|final
name|long
name|OP_PER_MAP
init|=
literal|1000
decl_stmt|;
DECL|field|MAX_MAPS_PER_NODE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_MAPS_PER_NODE
init|=
literal|20
decl_stmt|;
DECL|field|SYNC_FILE_MAX
specifier|private
specifier|static
specifier|final
name|int
name|SYNC_FILE_MAX
init|=
literal|10
decl_stmt|;
DECL|enum|Counter
DECL|enumConstant|SUCCEED
DECL|enumConstant|FAIL
specifier|static
enum|enum
name|Counter
block|{
name|SUCCEED
block|,
name|FAIL
block|}
DECL|enum|Option
specifier|static
enum|enum
name|Option
block|{
DECL|enumConstant|IGNORE_FAILURES
name|IGNORE_FAILURES
argument_list|(
literal|"-i"
argument_list|,
name|NAME
operator|+
literal|".ignore.failures"
argument_list|)
block|;
DECL|field|cmd
DECL|field|propertyname
specifier|final
name|String
name|cmd
block|,
name|propertyname
block|;
DECL|method|Option (String cmd, String propertyname)
specifier|private
name|Option
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
name|propertyname
parameter_list|)
block|{
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|this
operator|.
name|propertyname
operator|=
name|propertyname
expr_stmt|;
block|}
block|}
DECL|method|DistCh (Configuration conf)
name|DistCh
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|createJobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createJobConf (Configuration conf)
specifier|private
specifier|static
name|JobConf
name|createJobConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|JobConf
name|jobconf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|DistCh
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobconf
operator|.
name|setJobName
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setMapSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setInputFormat
argument_list|(
name|ChangeInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setMapperClass
argument_list|(
name|ChangeFilesMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|jobconf
return|;
block|}
comment|/** File operations. */
DECL|class|FileOperation
specifier|static
class|class
name|FileOperation
implements|implements
name|Writable
block|{
DECL|field|src
specifier|private
name|Path
name|src
decl_stmt|;
DECL|field|owner
specifier|private
name|String
name|owner
decl_stmt|;
DECL|field|group
specifier|private
name|String
name|group
decl_stmt|;
DECL|field|permission
specifier|private
name|FsPermission
name|permission
decl_stmt|;
DECL|method|FileOperation ()
name|FileOperation
parameter_list|()
block|{}
DECL|method|FileOperation (Path src, FileOperation that)
name|FileOperation
parameter_list|(
name|Path
name|src
parameter_list|,
name|FileOperation
name|that
parameter_list|)
block|{
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|that
operator|.
name|owner
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|that
operator|.
name|group
expr_stmt|;
name|this
operator|.
name|permission
operator|=
name|that
operator|.
name|permission
expr_stmt|;
name|checkState
argument_list|()
expr_stmt|;
block|}
comment|/**      * path:owner:group:permission      * e.g.      * /user/foo:foo:bar:700       */
DECL|method|FileOperation (String line)
name|FileOperation
parameter_list|(
name|String
name|line
parameter_list|)
block|{
try|try
block|{
name|String
index|[]
name|t
init|=
name|line
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|t
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|t
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|src
operator|=
operator|new
name|Path
argument_list|(
name|t
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|owner
operator|=
name|t
index|[
literal|1
index|]
expr_stmt|;
name|group
operator|=
name|t
index|[
literal|2
index|]
expr_stmt|;
name|permission
operator|=
name|t
index|[
literal|3
index|]
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|FsPermission
argument_list|(
name|Short
operator|.
name|parseShort
argument_list|(
name|t
index|[
literal|3
index|]
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|checkState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IllegalArgumentException
operator|)
operator|new
name|IllegalArgumentException
argument_list|(
literal|"line="
operator|+
name|line
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkState ()
specifier|private
name|void
name|checkState
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|owner
operator|==
literal|null
operator|&&
name|group
operator|==
literal|null
operator|&&
name|permission
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"owner == null&& group == null&& permission == null"
argument_list|)
throw|;
block|}
block|}
DECL|field|FILE_UMASK
specifier|static
specifier|final
name|FsPermission
name|FILE_UMASK
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0111
argument_list|)
decl_stmt|;
DECL|method|isDifferent (FileStatus original)
specifier|private
name|boolean
name|isDifferent
parameter_list|(
name|FileStatus
name|original
parameter_list|)
block|{
if|if
condition|(
name|owner
operator|!=
literal|null
operator|&&
operator|!
name|owner
operator|.
name|equals
argument_list|(
name|original
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
operator|!
name|group
operator|.
name|equals
argument_list|(
name|original
operator|.
name|getGroup
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|permission
operator|!=
literal|null
condition|)
block|{
name|FsPermission
name|orig
init|=
name|original
operator|.
name|getPermission
argument_list|()
decl_stmt|;
return|return
name|original
operator|.
name|isDirectory
argument_list|()
condition|?
operator|!
name|permission
operator|.
name|equals
argument_list|(
name|orig
argument_list|)
else|:
operator|!
name|permission
operator|.
name|applyUMask
argument_list|(
name|FILE_UMASK
argument_list|)
operator|.
name|equals
argument_list|(
name|orig
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|run (Configuration conf)
name|void
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|src
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|permission
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|src
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|owner
operator|!=
literal|null
operator|||
name|group
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|src
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|src
operator|=
operator|new
name|Path
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|owner
operator|=
name|DistTool
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|group
operator|=
name|DistTool
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|permission
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
condition|?
name|FsPermission
operator|.
name|read
argument_list|(
name|in
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|src
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DistTool
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|DistTool
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|boolean
name|b
init|=
name|permission
operator|!=
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|permission
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|src
operator|+
literal|":"
operator|+
name|owner
operator|+
literal|":"
operator|+
name|group
operator|+
literal|":"
operator|+
name|permission
return|;
block|}
block|}
comment|/** Responsible for generating splits of the src file list. */
DECL|class|ChangeInputFormat
specifier|static
class|class
name|ChangeInputFormat
implements|implements
name|InputFormat
argument_list|<
name|Text
argument_list|,
name|FileOperation
argument_list|>
block|{
comment|/** Do nothing. */
DECL|method|validateInput (JobConf job)
specifier|public
name|void
name|validateInput
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{}
comment|/**      * Produce splits such that each is no greater than the quotient of the      * total size and the number of splits requested.      * @param job The handle to the JobConf object      * @param numSplits Number of splits requested      */
DECL|method|getSplits (JobConf job, int numSplits )
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|srcCount
init|=
name|job
operator|.
name|getInt
argument_list|(
name|OP_COUNT_LABEL
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|targetcount
init|=
name|srcCount
operator|/
name|numSplits
decl_stmt|;
name|String
name|srclist
init|=
name|job
operator|.
name|get
argument_list|(
name|OP_LIST_LABEL
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcCount
operator|<
literal|0
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|srclist
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid metadata: #files("
operator|+
name|srcCount
operator|+
literal|") listuri("
operator|+
name|srclist
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|Path
name|srcs
init|=
operator|new
name|Path
argument_list|(
name|srclist
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|srcs
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|FileSplit
argument_list|>
argument_list|(
name|numSplits
argument_list|)
decl_stmt|;
name|Text
name|key
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|FileOperation
name|value
init|=
operator|new
name|FileOperation
argument_list|()
decl_stmt|;
name|long
name|prev
init|=
literal|0L
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|//count src
try|try
init|(
name|SequenceFile
operator|.
name|Reader
name|in
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|srcs
argument_list|,
name|job
argument_list|)
init|)
block|{
for|for
control|(
init|;
name|in
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|;
control|)
block|{
name|long
name|curr
init|=
name|in
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|curr
operator|-
name|prev
decl_stmt|;
if|if
condition|(
operator|++
name|count
operator|>
name|targetcount
condition|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|splits
operator|.
name|add
argument_list|(
operator|new
name|FileSplit
argument_list|(
name|srcs
argument_list|,
name|prev
argument_list|,
name|delta
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|prev
operator|=
name|curr
expr_stmt|;
block|}
block|}
block|}
name|long
name|remaining
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|srcs
argument_list|)
operator|.
name|getLen
argument_list|()
operator|-
name|prev
decl_stmt|;
if|if
condition|(
name|remaining
operator|!=
literal|0
condition|)
block|{
name|splits
operator|.
name|add
argument_list|(
operator|new
name|FileSplit
argument_list|(
name|srcs
argument_list|,
name|prev
argument_list|,
name|remaining
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"numSplits="
operator|+
name|numSplits
operator|+
literal|", splits.size()="
operator|+
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|splits
operator|.
name|toArray
argument_list|(
operator|new
name|FileSplit
index|[
name|splits
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|getRecordReader (InputSplit split, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|FileOperation
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SequenceFileRecordReader
argument_list|<
name|Text
argument_list|,
name|FileOperation
argument_list|>
argument_list|(
name|job
argument_list|,
operator|(
name|FileSplit
operator|)
name|split
argument_list|)
return|;
block|}
block|}
comment|/** The mapper for changing files. */
DECL|class|ChangeFilesMapper
specifier|static
class|class
name|ChangeFilesMapper
implements|implements
name|Mapper
argument_list|<
name|Text
argument_list|,
name|FileOperation
argument_list|,
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|jobconf
specifier|private
name|JobConf
name|jobconf
decl_stmt|;
DECL|field|ignoreFailures
specifier|private
name|boolean
name|ignoreFailures
decl_stmt|;
DECL|field|failcount
specifier|private
name|int
name|failcount
init|=
literal|0
decl_stmt|;
DECL|field|succeedcount
specifier|private
name|int
name|succeedcount
init|=
literal|0
decl_stmt|;
DECL|method|getCountString ()
specifier|private
name|String
name|getCountString
parameter_list|()
block|{
return|return
literal|"Succeeded: "
operator|+
name|succeedcount
operator|+
literal|" Failed: "
operator|+
name|failcount
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|this
operator|.
name|jobconf
operator|=
name|job
expr_stmt|;
name|ignoreFailures
operator|=
name|job
operator|.
name|getBoolean
argument_list|(
name|Option
operator|.
name|IGNORE_FAILURES
operator|.
name|propertyname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Run a FileOperation */
DECL|method|map (Text key, FileOperation value, OutputCollector<WritableComparable<?>, Text> out, Reporter reporter )
specifier|public
name|void
name|map
parameter_list|(
name|Text
name|key
parameter_list|,
name|FileOperation
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|,
name|Text
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|value
operator|.
name|run
argument_list|(
name|jobconf
argument_list|)
expr_stmt|;
operator|++
name|succeedcount
expr_stmt|;
name|reporter
operator|.
name|incrCounter
argument_list|(
name|Counter
operator|.
name|SUCCEED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
operator|++
name|failcount
expr_stmt|;
name|reporter
operator|.
name|incrCounter
argument_list|(
name|Counter
operator|.
name|FAIL
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|s
init|=
literal|"FAIL: "
operator|+
name|value
operator|+
literal|", "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|out
operator|.
name|collect
argument_list|(
literal|null
argument_list|,
operator|new
name|Text
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reporter
operator|.
name|setStatus
argument_list|(
name|getCountString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|failcount
operator|==
literal|0
operator|||
name|ignoreFailures
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|getCountString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|check (Configuration conf, List<FileOperation> ops )
specifier|private
specifier|static
name|void
name|check
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|FileOperation
argument_list|>
name|ops
parameter_list|)
throws|throws
name|InvalidInputException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|srcs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileOperation
name|op
range|:
name|ops
control|)
block|{
name|srcs
operator|.
name|add
argument_list|(
name|op
operator|.
name|src
argument_list|)
expr_stmt|;
block|}
name|DistTool
operator|.
name|checkSource
argument_list|(
name|conf
argument_list|,
name|srcs
argument_list|)
expr_stmt|;
block|}
DECL|method|fetchList (Configuration conf, Path inputfile )
specifier|private
specifier|static
name|List
argument_list|<
name|FileOperation
argument_list|>
name|fetchList
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|inputfile
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FileOperation
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|FileOperation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|readFile
argument_list|(
name|conf
argument_list|,
name|inputfile
argument_list|)
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|FileOperation
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** This is the main driver for recursively changing files properties. */
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|FileOperation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|FileOperation
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|logpath
init|=
literal|null
decl_stmt|;
name|boolean
name|isIgnoreFailures
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|args
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
literal|"-f"
operator|.
name|equals
argument_list|(
name|args
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
operator|++
name|idx
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"urilist_uri not specified"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|ops
operator|.
name|addAll
argument_list|(
name|fetchList
argument_list|(
name|jobconf
argument_list|,
operator|new
name|Path
argument_list|(
name|args
index|[
name|idx
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Option
operator|.
name|IGNORE_FAILURES
operator|.
name|cmd
operator|.
name|equals
argument_list|(
name|args
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
name|isIgnoreFailures
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-log"
operator|.
name|equals
argument_list|(
name|args
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
operator|++
name|idx
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"logdir not specified"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|logpath
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|'-'
operator|==
name|args
index|[
name|idx
index|]
operator|.
name|codePointAt
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invalid switch "
operator|+
name|args
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|ops
operator|.
name|add
argument_list|(
operator|new
name|FileOperation
argument_list|(
name|args
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// mandatory command-line parameters
if|if
condition|(
name|ops
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Operation is empty"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"ops="
operator|+
name|ops
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"isIgnoreFailures="
operator|+
name|isIgnoreFailures
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setBoolean
argument_list|(
name|Option
operator|.
name|IGNORE_FAILURES
operator|.
name|propertyname
argument_list|,
name|isIgnoreFailures
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|jobconf
argument_list|,
name|ops
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|setup
argument_list|(
name|ops
argument_list|,
name|logpath
argument_list|)
condition|)
block|{
name|JobClient
operator|.
name|runJob
argument_list|(
name|jobconf
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|logpath
operator|==
literal|null
condition|)
block|{
comment|//delete log directory
specifier|final
name|Path
name|logdir
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|jobconf
argument_list|)
decl_stmt|;
if|if
condition|(
name|logdir
operator|!=
literal|null
condition|)
block|{
name|logdir
operator|.
name|getFileSystem
argument_list|(
name|jobconf
argument_list|)
operator|.
name|delete
argument_list|(
name|logdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
comment|//delete job directory
specifier|final
name|String
name|jobdir
init|=
name|jobconf
operator|.
name|get
argument_list|(
name|JOB_DIR_LABEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobdir
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Path
name|jobpath
init|=
operator|new
name|Path
argument_list|(
name|jobdir
argument_list|)
decl_stmt|;
name|jobpath
operator|.
name|getFileSystem
argument_list|(
name|jobconf
argument_list|)
operator|.
name|delete
argument_list|(
name|jobpath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DuplicationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Input error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|DuplicationException
operator|.
name|ERROR_CODE
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|NAME
operator|+
literal|" failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/** Calculate how many maps to run. */
DECL|method|getMapCount (int srcCount, int numNodes)
specifier|private
specifier|static
name|int
name|getMapCount
parameter_list|(
name|int
name|srcCount
parameter_list|,
name|int
name|numNodes
parameter_list|)
block|{
name|int
name|numMaps
init|=
call|(
name|int
call|)
argument_list|(
name|srcCount
operator|/
name|OP_PER_MAP
argument_list|)
decl_stmt|;
name|numMaps
operator|=
name|Math
operator|.
name|min
argument_list|(
name|numMaps
argument_list|,
name|numNodes
operator|*
name|MAX_MAPS_PER_NODE
argument_list|)
expr_stmt|;
return|return
name|Math
operator|.
name|max
argument_list|(
name|numMaps
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|setup (List<FileOperation> ops, Path log)
specifier|private
name|boolean
name|setup
parameter_list|(
name|List
argument_list|<
name|FileOperation
argument_list|>
name|ops
parameter_list|,
name|Path
name|log
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|randomId
init|=
name|getRandomId
argument_list|()
decl_stmt|;
name|JobClient
name|jClient
init|=
operator|new
name|JobClient
argument_list|(
name|jobconf
argument_list|)
decl_stmt|;
name|Path
name|stagingArea
decl_stmt|;
try|try
block|{
name|stagingArea
operator|=
name|JobSubmissionFiles
operator|.
name|getStagingDir
argument_list|(
name|jClient
operator|.
name|getClusterHandle
argument_list|()
argument_list|,
name|jobconf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|Path
name|jobdir
init|=
operator|new
name|Path
argument_list|(
name|stagingArea
operator|+
name|NAME
operator|+
literal|"_"
operator|+
name|randomId
argument_list|)
decl_stmt|;
name|FsPermission
name|mapredSysPerms
init|=
operator|new
name|FsPermission
argument_list|(
name|JobSubmissionFiles
operator|.
name|JOB_DIR_PERMISSION
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|jClient
operator|.
name|getFs
argument_list|()
argument_list|,
name|jobdir
argument_list|,
name|mapredSysPerms
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|JOB_DIR_LABEL
operator|+
literal|"="
operator|+
name|jobdir
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|==
literal|null
condition|)
block|{
name|log
operator|=
operator|new
name|Path
argument_list|(
name|jobdir
argument_list|,
literal|"_logs"
argument_list|)
expr_stmt|;
block|}
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jobconf
argument_list|,
name|log
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"log="
operator|+
name|log
argument_list|)
expr_stmt|;
comment|//create operation list
name|FileSystem
name|fs
init|=
name|jobdir
operator|.
name|getFileSystem
argument_list|(
name|jobconf
argument_list|)
decl_stmt|;
name|Path
name|opList
init|=
operator|new
name|Path
argument_list|(
name|jobdir
argument_list|,
literal|"_"
operator|+
name|OP_LIST_LABEL
argument_list|)
decl_stmt|;
name|jobconf
operator|.
name|set
argument_list|(
name|OP_LIST_LABEL
argument_list|,
name|opList
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|opCount
init|=
literal|0
decl_stmt|,
name|synCount
init|=
literal|0
decl_stmt|;
try|try
init|(
name|SequenceFile
operator|.
name|Writer
name|opWriter
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|jobconf
argument_list|,
name|opList
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|FileOperation
operator|.
name|class
argument_list|,
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|NONE
argument_list|)
init|)
block|{
for|for
control|(
name|FileOperation
name|op
range|:
name|ops
control|)
block|{
name|FileStatus
name|srcstat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|op
operator|.
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcstat
operator|.
name|isDirectory
argument_list|()
operator|&&
name|op
operator|.
name|isDifferent
argument_list|(
name|srcstat
argument_list|)
condition|)
block|{
operator|++
name|opCount
expr_stmt|;
name|opWriter
operator|.
name|append
argument_list|(
operator|new
name|Text
argument_list|(
name|op
operator|.
name|src
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
name|Stack
argument_list|<
name|Path
argument_list|>
name|pathstack
init|=
operator|new
name|Stack
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|pathstack
operator|.
name|push
argument_list|(
name|op
operator|.
name|src
argument_list|)
init|;
operator|!
name|pathstack
operator|.
name|empty
argument_list|()
condition|;
control|)
block|{
for|for
control|(
name|FileStatus
name|stat
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|pathstack
operator|.
name|pop
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|pathstack
operator|.
name|push
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|isDifferent
argument_list|(
name|stat
argument_list|)
condition|)
block|{
operator|++
name|opCount
expr_stmt|;
if|if
condition|(
operator|++
name|synCount
operator|>
name|SYNC_FILE_MAX
condition|)
block|{
name|opWriter
operator|.
name|sync
argument_list|()
expr_stmt|;
name|synCount
operator|=
literal|0
expr_stmt|;
block|}
name|Path
name|f
init|=
name|stat
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|opWriter
operator|.
name|append
argument_list|(
operator|new
name|Text
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|FileOperation
argument_list|(
name|f
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|checkDuplication
argument_list|(
name|fs
argument_list|,
name|opList
argument_list|,
operator|new
name|Path
argument_list|(
name|jobdir
argument_list|,
literal|"_sorted"
argument_list|)
argument_list|,
name|jobconf
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setInt
argument_list|(
name|OP_COUNT_LABEL
argument_list|,
name|opCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|OP_COUNT_LABEL
operator|+
literal|"="
operator|+
name|opCount
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setNumMapTasks
argument_list|(
name|getMapCount
argument_list|(
name|opCount
argument_list|,
operator|new
name|JobClient
argument_list|(
name|jobconf
argument_list|)
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getTaskTrackers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|opCount
operator|!=
literal|0
return|;
block|}
DECL|method|checkDuplication (FileSystem fs, Path file, Path sorted, Configuration conf)
specifier|private
specifier|static
name|void
name|checkDuplication
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|Path
name|sorted
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|SequenceFile
operator|.
name|Sorter
name|sorter
init|=
operator|new
name|SequenceFile
operator|.
name|Sorter
argument_list|(
name|fs
argument_list|,
operator|new
name|Text
operator|.
name|Comparator
argument_list|()
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|FileOperation
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|sorter
operator|.
name|sort
argument_list|(
name|file
argument_list|,
name|sorted
argument_list|)
expr_stmt|;
try|try
init|(
name|SequenceFile
operator|.
name|Reader
name|in
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|sorted
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|FileOperation
name|curop
init|=
operator|new
name|FileOperation
argument_list|()
decl_stmt|;
name|Text
name|prevsrc
init|=
literal|null
decl_stmt|,
name|cursrc
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|in
operator|.
name|next
argument_list|(
name|cursrc
argument_list|,
name|curop
argument_list|)
condition|;
control|)
block|{
if|if
condition|(
name|prevsrc
operator|!=
literal|null
operator|&&
name|cursrc
operator|.
name|equals
argument_list|(
name|prevsrc
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DuplicationException
argument_list|(
literal|"Invalid input, there are duplicated files in the sources: "
operator|+
name|prevsrc
operator|+
literal|", "
operator|+
name|cursrc
argument_list|)
throw|;
block|}
name|prevsrc
operator|=
name|cursrc
expr_stmt|;
name|cursrc
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|curop
operator|=
operator|new
name|FileOperation
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|exit
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DistCh
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

