begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JarFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * test {@link HadoopArchives}  */
end_comment

begin_class
DECL|class|TestHadoopArchives
specifier|public
class|class
name|TestHadoopArchives
extends|extends
name|TestCase
block|{
DECL|field|HADOOP_ARCHIVES_JAR
specifier|public
specifier|static
specifier|final
name|String
name|HADOOP_ARCHIVES_JAR
init|=
name|JarFinder
operator|.
name|getJar
argument_list|(
name|HadoopArchives
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AsyncDiskService
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
block|}
DECL|field|inputDir
specifier|private
specifier|static
specifier|final
name|String
name|inputDir
init|=
literal|"input"
decl_stmt|;
DECL|field|inputPath
specifier|private
name|Path
name|inputPath
decl_stmt|;
DECL|field|dfscluster
specifier|private
name|MiniDFSCluster
name|dfscluster
decl_stmt|;
DECL|field|mapred
specifier|private
name|MiniMRCluster
name|mapred
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|archivePath
specifier|private
name|Path
name|archivePath
decl_stmt|;
DECL|method|createFile (Path dir, String filename, FileSystem fs )
specifier|static
specifier|private
name|Path
name|createFile
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|filename
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|filename
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|filename
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|dfscluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dfscluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|mapred
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inputPath
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
name|inputDir
argument_list|)
expr_stmt|;
name|archivePath
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
literal|"archive"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|inputPath
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|inputPath
argument_list|,
literal|"a"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|inputPath
argument_list|,
literal|"b"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|inputPath
argument_list|,
literal|"c"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|mapred
operator|!=
literal|null
condition|)
block|{
name|mapred
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfscluster
operator|!=
literal|null
condition|)
block|{
name|dfscluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testPathWithSpaces ()
specifier|public
name|void
name|testPathWithSpaces
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|archivePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//create files/directories with spaces
name|createFile
argument_list|(
name|inputPath
argument_list|,
literal|"c c"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|sub1
init|=
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"sub 1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|sub1
argument_list|,
literal|"file x y z"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|sub1
argument_list|,
literal|"file"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|sub1
argument_list|,
literal|"x"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|sub1
argument_list|,
literal|"y"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|sub1
argument_list|,
literal|"z"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|sub2
init|=
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"sub 1 with suffix"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|sub2
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|sub2
argument_list|,
literal|"z"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|mapred
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
specifier|final
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|inputPathStr
init|=
name|inputPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"inputPathStr = "
operator|+
name|inputPathStr
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|originalPaths
init|=
name|lsr
argument_list|(
name|shell
argument_list|,
name|inputPathStr
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
specifier|final
name|String
name|prefix
init|=
literal|"har://hdfs-"
operator|+
name|uri
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|uri
operator|.
name|getPort
argument_list|()
operator|+
name|archivePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
block|{
comment|//Enable space replacement
specifier|final
name|String
name|harName
init|=
literal|"foo.har"
decl_stmt|;
specifier|final
name|String
index|[]
name|args
init|=
block|{
literal|"-archiveName"
block|,
name|harName
block|,
literal|"-p"
block|,
name|inputPathStr
block|,
literal|"*"
block|,
name|archivePath
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HadoopArchives
operator|.
name|TEST_HADOOP_ARCHIVES_JAR_PATH
argument_list|,
name|HADOOP_ARCHIVES_JAR
argument_list|)
expr_stmt|;
specifier|final
name|HadoopArchives
name|har
init|=
operator|new
name|HadoopArchives
argument_list|(
name|mapred
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|har
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|//compare results
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|harPaths
init|=
name|lsr
argument_list|(
name|shell
argument_list|,
name|prefix
operator|+
name|harName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|originalPaths
argument_list|,
name|harPaths
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|lsr (final FsShell shell, String dir )
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|lsr
parameter_list|(
specifier|final
name|FsShell
name|shell
parameter_list|,
name|String
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"lsr root="
operator|+
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
specifier|final
name|PrintStream
name|oldErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|out
argument_list|)
expr_stmt|;
specifier|final
name|String
name|results
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-lsr"
block|,
name|dir
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|bytes
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|oldErr
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"lsr results:\n"
operator|+
name|results
argument_list|)
expr_stmt|;
specifier|final
name|String
name|dirname
init|=
name|dir
operator|.
name|substring
argument_list|(
name|dir
operator|.
name|lastIndexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|t
init|=
operator|new
name|StringTokenizer
argument_list|(
name|results
argument_list|,
literal|"\n"
argument_list|)
init|;
name|t
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|s
init|=
name|t
operator|.
name|nextToken
argument_list|()
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|dirname
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|i
operator|+
name|dirname
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"lsr paths = "
operator|+
name|paths
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|", "
argument_list|,
literal|",\n  "
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|paths
return|;
block|}
block|}
end_class

end_unit

