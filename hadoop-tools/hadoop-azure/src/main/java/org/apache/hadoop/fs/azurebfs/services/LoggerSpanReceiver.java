begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|AzureBlobFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|HTraceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|SpanReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|SerializationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * LoggerSpanReceiver is a layer between HTrace and log4j only used for {@link org.apache.hadoop.fs.azurebfs.contracts.services.TracingService}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|LoggerSpanReceiver
specifier|public
class|class
name|LoggerSpanReceiver
extends|extends
name|SpanReceiver
block|{
DECL|field|JSON_WRITER
specifier|private
specifier|static
specifier|final
name|ObjectWriter
name|JSON_WRITER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|configure
argument_list|(
name|SerializationFeature
operator|.
name|INDENT_OUTPUT
argument_list|,
literal|true
argument_list|)
operator|.
name|configure
argument_list|(
name|SerializationFeature
operator|.
name|WRITE_BIGDECIMAL_AS_PLAIN
argument_list|,
literal|true
argument_list|)
operator|.
name|configure
argument_list|(
name|SerializationFeature
operator|.
name|WRITE_EMPTY_JSON_ARRAYS
argument_list|,
literal|false
argument_list|)
operator|.
name|configure
argument_list|(
name|SerializationFeature
operator|.
name|USE_EQUALITY_FOR_OBJECT_ID
argument_list|,
literal|false
argument_list|)
operator|.
name|writer
argument_list|()
decl_stmt|;
DECL|method|LoggerSpanReceiver (HTraceConfiguration hTraceConfiguration)
specifier|public
name|LoggerSpanReceiver
parameter_list|(
name|HTraceConfiguration
name|hTraceConfiguration
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|hTraceConfiguration
argument_list|,
literal|"hTraceConfiguration"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|receiveSpan (final Span span)
specifier|public
name|void
name|receiveSpan
parameter_list|(
specifier|final
name|Span
name|span
parameter_list|)
block|{
name|String
name|jsonValue
decl_stmt|;
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AzureBlobFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|jsonValue
operator|=
name|JSON_WRITER
operator|.
name|writeValueAsString
argument_list|(
name|span
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
name|jsonValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonProcessingException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Json processing error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// No-Op
block|}
block|}
end_class

end_unit

