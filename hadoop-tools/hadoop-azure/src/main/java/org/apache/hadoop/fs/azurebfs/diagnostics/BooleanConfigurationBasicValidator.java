begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.diagnostics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|diagnostics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|InvalidConfigurationValueException
import|;
end_import

begin_comment
comment|/**  * Boolean configuration value validator  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|BooleanConfigurationBasicValidator
specifier|public
class|class
name|BooleanConfigurationBasicValidator
extends|extends
name|ConfigurationBasicValidator
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|field|TRUE
specifier|private
specifier|static
specifier|final
name|String
name|TRUE
init|=
literal|"true"
decl_stmt|;
DECL|field|FALSE
specifier|private
specifier|static
specifier|final
name|String
name|FALSE
init|=
literal|"false"
decl_stmt|;
DECL|method|BooleanConfigurationBasicValidator (final String configKey, final boolean defaultVal, final boolean throwIfInvalid)
specifier|public
name|BooleanConfigurationBasicValidator
parameter_list|(
specifier|final
name|String
name|configKey
parameter_list|,
specifier|final
name|boolean
name|defaultVal
parameter_list|,
specifier|final
name|boolean
name|throwIfInvalid
parameter_list|)
block|{
name|super
argument_list|(
name|configKey
argument_list|,
name|defaultVal
argument_list|,
name|throwIfInvalid
argument_list|)
expr_stmt|;
block|}
DECL|method|validate (final String configValue)
specifier|public
name|Boolean
name|validate
parameter_list|(
specifier|final
name|String
name|configValue
parameter_list|)
throws|throws
name|InvalidConfigurationValueException
block|{
name|Boolean
name|result
init|=
name|super
operator|.
name|validate
argument_list|(
name|configValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
if|if
condition|(
name|configValue
operator|.
name|equalsIgnoreCase
argument_list|(
name|TRUE
argument_list|)
operator|||
name|configValue
operator|.
name|equalsIgnoreCase
argument_list|(
name|FALSE
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|configValue
argument_list|)
return|;
block|}
throw|throw
operator|new
name|InvalidConfigurationValueException
argument_list|(
name|getConfigKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

