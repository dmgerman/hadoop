begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Helper class to calculate rolling-window averages.  * Used to calculate rolling-window metrics in AzureNativeFileSystem.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|RollingWindowAverage
specifier|final
class|class
name|RollingWindowAverage
block|{
DECL|field|currentPoints
specifier|private
specifier|final
name|ArrayDeque
argument_list|<
name|DataPoint
argument_list|>
name|currentPoints
init|=
operator|new
name|ArrayDeque
argument_list|<
name|DataPoint
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|windowSizeMs
specifier|private
specifier|final
name|long
name|windowSizeMs
decl_stmt|;
comment|/**    * Create a new rolling-window average for the given window size.    * @param windowSizeMs The size of the window in milliseconds.    */
DECL|method|RollingWindowAverage (long windowSizeMs)
specifier|public
name|RollingWindowAverage
parameter_list|(
name|long
name|windowSizeMs
parameter_list|)
block|{
name|this
operator|.
name|windowSizeMs
operator|=
name|windowSizeMs
expr_stmt|;
block|}
comment|/**    * Add a new data point that just happened.    * @param value The value of the data point.    */
DECL|method|addPoint (long value)
specifier|public
specifier|synchronized
name|void
name|addPoint
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|currentPoints
operator|.
name|offer
argument_list|(
operator|new
name|DataPoint
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|cleanupOldPoints
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the current average.    * @return The current average.    */
DECL|method|getCurrentAverage ()
specifier|public
specifier|synchronized
name|long
name|getCurrentAverage
parameter_list|()
block|{
name|cleanupOldPoints
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentPoints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DataPoint
name|current
range|:
name|currentPoints
control|)
block|{
name|sum
operator|+=
name|current
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|sum
operator|/
name|currentPoints
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Clean up points that don't count any more (are before our    * rolling window) from our current queue of points.    */
DECL|method|cleanupOldPoints ()
specifier|private
name|void
name|cleanupOldPoints
parameter_list|()
block|{
name|Date
name|cutoffTime
init|=
operator|new
name|Date
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|windowSizeMs
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|currentPoints
operator|.
name|isEmpty
argument_list|()
operator|&&
name|currentPoints
operator|.
name|peekFirst
argument_list|()
operator|.
name|getEventTime
argument_list|()
operator|.
name|before
argument_list|(
name|cutoffTime
argument_list|)
condition|)
block|{
name|currentPoints
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A single data point.    */
DECL|class|DataPoint
specifier|private
specifier|static
class|class
name|DataPoint
block|{
DECL|field|eventTime
specifier|private
specifier|final
name|Date
name|eventTime
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|long
name|value
decl_stmt|;
DECL|method|DataPoint (Date eventTime, long value)
specifier|public
name|DataPoint
parameter_list|(
name|Date
name|eventTime
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|eventTime
operator|=
name|eventTime
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getEventTime ()
specifier|public
name|Date
name|getEventTime
parameter_list|()
block|{
return|return
name|eventTime
return|;
block|}
DECL|method|getValue ()
specifier|public
name|long
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

