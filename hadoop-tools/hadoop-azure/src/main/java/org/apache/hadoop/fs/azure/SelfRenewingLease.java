begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|StorageInterface
operator|.
name|CloudBlobWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|AccessCondition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * An Azure blob lease that automatically renews itself indefinitely  * using a background thread. Use it to synchronize distributed processes,  * or to prevent writes to the blob by other processes that don't  * have the lease.  *  * Creating a new Lease object blocks the caller until the Azure blob lease is  * acquired.  *  * Attempting to get a lease on a non-existent blob throws StorageException.  *  * Call free() to release the Lease.  *  * You can use this Lease like a distributed lock. If the holder process  * dies, the lease will time out since it won't be renewed.  */
end_comment

begin_class
DECL|class|SelfRenewingLease
specifier|public
class|class
name|SelfRenewingLease
block|{
DECL|field|blobWrapper
specifier|private
name|CloudBlobWrapper
name|blobWrapper
decl_stmt|;
DECL|field|renewer
specifier|private
name|Thread
name|renewer
decl_stmt|;
DECL|field|leaseFreed
specifier|private
specifier|volatile
name|boolean
name|leaseFreed
decl_stmt|;
DECL|field|leaseID
specifier|private
name|String
name|leaseID
init|=
literal|null
decl_stmt|;
DECL|field|LEASE_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|LEASE_TIMEOUT
init|=
literal|60
decl_stmt|;
comment|// Lease timeout in seconds
comment|// Time to wait to renew lease in milliseconds
DECL|field|LEASE_RENEWAL_PERIOD
specifier|public
specifier|static
specifier|final
name|int
name|LEASE_RENEWAL_PERIOD
init|=
literal|40000
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SelfRenewingLease
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Used to allocate thread serial numbers in thread name
DECL|field|threadNumber
specifier|private
specifier|static
name|AtomicInteger
name|threadNumber
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Time to wait to retry getting the lease in milliseconds
annotation|@
name|VisibleForTesting
DECL|field|LEASE_ACQUIRE_RETRY_INTERVAL
specifier|static
specifier|final
name|int
name|LEASE_ACQUIRE_RETRY_INTERVAL
init|=
literal|2000
decl_stmt|;
DECL|method|SelfRenewingLease (CloudBlobWrapper blobWrapper)
specifier|public
name|SelfRenewingLease
parameter_list|(
name|CloudBlobWrapper
name|blobWrapper
parameter_list|)
throws|throws
name|StorageException
block|{
name|this
operator|.
name|leaseFreed
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|blobWrapper
operator|=
name|blobWrapper
expr_stmt|;
comment|// Keep trying to get the lease until you get it.
name|CloudBlob
name|blob
init|=
name|blobWrapper
operator|.
name|getBlob
argument_list|()
decl_stmt|;
while|while
condition|(
name|leaseID
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|leaseID
operator|=
name|blob
operator|.
name|acquireLease
argument_list|(
name|LEASE_TIMEOUT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|// Throw again if we don't want to keep waiting.
comment|// We expect it to be that the lease is already present,
comment|// or in some cases that the blob does not exist.
if|if
condition|(
operator|!
name|e
operator|.
name|getErrorCode
argument_list|()
operator|.
name|equals
argument_list|(
literal|"LeaseAlreadyPresent"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught exception when trying to get lease on blob "
operator|+
name|blobWrapper
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|". "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|leaseID
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|LEASE_ACQUIRE_RETRY_INTERVAL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|renewer
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Renewer
argument_list|()
argument_list|)
expr_stmt|;
comment|// A Renewer running should not keep JVM from exiting, so make it a daemon.
name|renewer
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|renewer
operator|.
name|setName
argument_list|(
literal|"AzureLeaseRenewer-"
operator|+
name|threadNumber
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|renewer
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Acquired lease "
operator|+
name|leaseID
operator|+
literal|" on "
operator|+
name|blob
operator|.
name|getUri
argument_list|()
operator|+
literal|" managed by thread "
operator|+
name|renewer
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Free the lease and stop the keep-alive thread.    * @throws StorageException    */
DECL|method|free ()
specifier|public
name|void
name|free
parameter_list|()
throws|throws
name|StorageException
block|{
name|AccessCondition
name|accessCondition
init|=
name|AccessCondition
operator|.
name|generateEmptyCondition
argument_list|()
decl_stmt|;
name|accessCondition
operator|.
name|setLeaseID
argument_list|(
name|leaseID
argument_list|)
expr_stmt|;
try|try
block|{
name|blobWrapper
operator|.
name|getBlob
argument_list|()
operator|.
name|releaseLease
argument_list|(
name|accessCondition
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorCode
argument_list|()
operator|.
name|equals
argument_list|(
literal|"BlobNotFound"
argument_list|)
condition|)
block|{
comment|// Don't do anything -- it's okay to free a lease
comment|// on a deleted file. The delete freed the lease
comment|// implicitly.
block|}
else|else
block|{
comment|// This error is not anticipated, so re-throw it.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unanticipated exception when trying to free lease "
operator|+
name|leaseID
operator|+
literal|" on "
operator|+
name|blobWrapper
operator|.
name|getStorageUri
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
finally|finally
block|{
comment|// Even if releasing the lease fails (e.g. because the file was deleted),
comment|// make sure to record that we freed the lease, to terminate the
comment|// keep-alive thread.
name|leaseFreed
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Freed lease "
operator|+
name|leaseID
operator|+
literal|" on "
operator|+
name|blobWrapper
operator|.
name|getUri
argument_list|()
operator|+
literal|" managed by thread "
operator|+
name|renewer
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isFreed ()
specifier|public
name|boolean
name|isFreed
parameter_list|()
block|{
return|return
name|leaseFreed
return|;
block|}
DECL|method|getLeaseID ()
specifier|public
name|String
name|getLeaseID
parameter_list|()
block|{
return|return
name|leaseID
return|;
block|}
DECL|method|getCloudBlob ()
specifier|public
name|CloudBlob
name|getCloudBlob
parameter_list|()
block|{
return|return
name|blobWrapper
operator|.
name|getBlob
argument_list|()
return|;
block|}
DECL|class|Renewer
specifier|private
class|class
name|Renewer
implements|implements
name|Runnable
block|{
comment|/**      * Start a keep-alive thread that will continue to renew      * the lease until it is freed or the process dies.      */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting lease keep-alive thread."
argument_list|)
expr_stmt|;
name|AccessCondition
name|accessCondition
init|=
name|AccessCondition
operator|.
name|generateEmptyCondition
argument_list|()
decl_stmt|;
name|accessCondition
operator|.
name|setLeaseID
argument_list|(
name|leaseID
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|leaseFreed
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|LEASE_RENEWAL_PERIOD
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Keep-alive thread for lease "
operator|+
name|leaseID
operator|+
literal|" interrupted."
argument_list|)
expr_stmt|;
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|leaseFreed
condition|)
block|{
name|blobWrapper
operator|.
name|getBlob
argument_list|()
operator|.
name|renewLease
argument_list|(
name|accessCondition
argument_list|)
expr_stmt|;
comment|// It'll be very rare to renew the lease (most will be short)
comment|// so log that we did it, to help with system debugging.
name|LOG
operator|.
name|info
argument_list|(
literal|"Renewed lease "
operator|+
name|leaseID
operator|+
literal|" on "
operator|+
name|getCloudBlob
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|leaseFreed
condition|)
block|{
comment|// Free the lease so we don't leave this thread running forever.
name|leaseFreed
operator|=
literal|true
expr_stmt|;
comment|// Normally leases should be freed and there should be no
comment|// exceptions, so log a warning.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempt to renew lease "
operator|+
name|leaseID
operator|+
literal|" on "
operator|+
name|getCloudBlob
argument_list|()
operator|.
name|getUri
argument_list|()
operator|+
literal|" failed, but lease not yet freed. Reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

