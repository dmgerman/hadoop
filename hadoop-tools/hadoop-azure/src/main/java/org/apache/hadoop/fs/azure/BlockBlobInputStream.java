begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|OperationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSExceptionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Seekable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|StorageInterface
operator|.
name|CloudBlockBlobWrapper
import|;
end_import

begin_comment
comment|/**  * Encapsulates the BlobInputStream used by block blobs and adds support for  * random access and seek. Random access performance is improved by several  * orders of magnitude.  */
end_comment

begin_class
DECL|class|BlockBlobInputStream
specifier|final
class|class
name|BlockBlobInputStream
extends|extends
name|InputStream
implements|implements
name|Seekable
block|{
DECL|field|blob
specifier|private
specifier|final
name|CloudBlockBlobWrapper
name|blob
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|BlobRequestOptions
name|options
decl_stmt|;
DECL|field|opContext
specifier|private
specifier|final
name|OperationContext
name|opContext
decl_stmt|;
DECL|field|blobInputStream
specifier|private
name|InputStream
name|blobInputStream
init|=
literal|null
decl_stmt|;
DECL|field|minimumReadSizeInBytes
specifier|private
name|int
name|minimumReadSizeInBytes
init|=
literal|0
decl_stmt|;
DECL|field|streamPositionAfterLastRead
specifier|private
name|long
name|streamPositionAfterLastRead
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|streamPosition
specifier|private
name|long
name|streamPosition
init|=
literal|0
decl_stmt|;
DECL|field|streamLength
specifier|private
name|long
name|streamLength
init|=
literal|0
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|streamBuffer
specifier|private
name|byte
index|[]
name|streamBuffer
decl_stmt|;
DECL|field|streamBufferPosition
specifier|private
name|int
name|streamBufferPosition
decl_stmt|;
DECL|field|streamBufferLength
specifier|private
name|int
name|streamBufferLength
decl_stmt|;
comment|/**    * Creates a seek-able stream for reading from block blobs.    * @param blob a block blob reference.    * @param options the blob request options.    * @param opContext the blob operation context.    * @throws IOException IO failure    */
DECL|method|BlockBlobInputStream (CloudBlockBlobWrapper blob, BlobRequestOptions options, OperationContext opContext)
name|BlockBlobInputStream
parameter_list|(
name|CloudBlockBlobWrapper
name|blob
parameter_list|,
name|BlobRequestOptions
name|options
parameter_list|,
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|blob
operator|=
name|blob
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|opContext
operator|=
name|opContext
expr_stmt|;
name|this
operator|.
name|minimumReadSizeInBytes
operator|=
name|blob
operator|.
name|getStreamMinimumReadSizeInBytes
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|blobInputStream
operator|=
name|blob
operator|.
name|openInputStream
argument_list|(
name|options
argument_list|,
name|opContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|streamLength
operator|=
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
DECL|method|checkState ()
specifier|private
name|void
name|checkState
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|FSExceptionMessages
operator|.
name|STREAM_IS_CLOSED
argument_list|)
throw|;
block|}
block|}
comment|/**    * Gets the read position of the stream.    * @return the zero-based byte offset of the read position.    * @throws IOException IO failure    */
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
name|checkState
argument_list|()
expr_stmt|;
return|return
name|streamPosition
return|;
block|}
comment|/**    * Sets the read position of the stream.    * @param pos a zero-based byte offset in the stream.    * @throws EOFException if read is out of range    */
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|checkState
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
name|FSExceptionMessages
operator|.
name|NEGATIVE_SEEK
operator|+
literal|" "
operator|+
name|pos
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|>
name|streamLength
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
name|FSExceptionMessages
operator|.
name|CANNOT_SEEK_PAST_EOF
operator|+
literal|" "
operator|+
name|pos
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|==
name|getPos
argument_list|()
condition|)
block|{
comment|// no=op, no state change
return|return;
block|}
if|if
condition|(
name|streamBuffer
operator|!=
literal|null
condition|)
block|{
name|long
name|offset
init|=
name|streamPosition
operator|-
name|pos
decl_stmt|;
if|if
condition|(
name|offset
operator|>
literal|0
operator|&&
name|offset
operator|<
name|streamBufferLength
condition|)
block|{
name|streamBufferPosition
operator|=
name|streamBufferLength
operator|-
operator|(
name|int
operator|)
name|offset
expr_stmt|;
block|}
else|else
block|{
name|streamBufferPosition
operator|=
name|streamBufferLength
expr_stmt|;
block|}
block|}
name|streamPosition
operator|=
name|pos
expr_stmt|;
comment|// close BlobInputStream after seek is invoked because BlobInputStream
comment|// does not support seek
name|closeBlobInputStream
argument_list|()
expr_stmt|;
block|}
comment|/**    * Seeks an secondary copy of the data.  This method is not supported.    * @param targetPos a zero-based byte offset in the stream.    * @return false    * @throws IOException IO failure    */
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Gets the number of bytes that can be read (or skipped over) without    * performing a network operation.    * @throws IOException IO failure    */
annotation|@
name|Override
DECL|method|available ()
specifier|public
specifier|synchronized
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|checkState
argument_list|()
expr_stmt|;
if|if
condition|(
name|blobInputStream
operator|!=
literal|null
condition|)
block|{
return|return
name|blobInputStream
operator|.
name|available
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
name|streamBuffer
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|streamBufferLength
operator|-
name|streamBufferPosition
return|;
block|}
block|}
DECL|method|closeBlobInputStream ()
specifier|private
name|void
name|closeBlobInputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|blobInputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|blobInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|blobInputStream
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Closes this stream and releases any system resources associated with it.    * @throws IOException IO failure    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|closeBlobInputStream
argument_list|()
expr_stmt|;
name|streamBuffer
operator|=
literal|null
expr_stmt|;
name|streamBufferPosition
operator|=
literal|0
expr_stmt|;
name|streamBufferLength
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|doNetworkRead (byte[] buffer, int offset, int len)
specifier|private
name|int
name|doNetworkRead
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|MemoryOutputStream
name|outputStream
decl_stmt|;
name|boolean
name|needToCopy
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|streamPositionAfterLastRead
operator|==
name|streamPosition
condition|)
block|{
comment|// caller is reading sequentially, so initialize the stream buffer
if|if
condition|(
name|streamBuffer
operator|==
literal|null
condition|)
block|{
name|streamBuffer
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|minimumReadSizeInBytes
argument_list|,
name|streamLength
argument_list|)
index|]
expr_stmt|;
block|}
name|streamBufferPosition
operator|=
literal|0
expr_stmt|;
name|streamBufferLength
operator|=
literal|0
expr_stmt|;
name|outputStream
operator|=
operator|new
name|MemoryOutputStream
argument_list|(
name|streamBuffer
argument_list|,
name|streamBufferPosition
argument_list|,
name|streamBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|needToCopy
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|outputStream
operator|=
operator|new
name|MemoryOutputStream
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|long
name|bytesToRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|minimumReadSizeInBytes
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|outputStream
operator|.
name|capacity
argument_list|()
argument_list|,
name|streamLength
operator|-
name|streamPosition
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|blob
operator|.
name|downloadRange
argument_list|(
name|streamPosition
argument_list|,
name|bytesToRead
argument_list|,
name|outputStream
argument_list|,
name|options
argument_list|,
name|opContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|int
name|bytesRead
init|=
name|outputStream
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|>
literal|0
condition|)
block|{
name|streamPosition
operator|+=
name|bytesRead
expr_stmt|;
name|streamPositionAfterLastRead
operator|=
name|streamPosition
expr_stmt|;
name|int
name|count
init|=
name|Math
operator|.
name|min
argument_list|(
name|bytesRead
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|needToCopy
condition|)
block|{
name|streamBufferLength
operator|=
name|bytesRead
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|streamBuffer
argument_list|,
name|streamBufferPosition
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|streamBufferPosition
operator|+=
name|count
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
else|else
block|{
comment|// This may happen if the blob was modified after the length was obtained.
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"End of stream reached unexpectedly."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Reads up to<code>len</code> bytes of data from the input stream into an    * array of bytes.    * @param b a buffer into which the data is written.    * @param offset a start offset into {@code buffer} where the data is written.    * @param len the maximum number of bytes to be read.    * @return the number of bytes written into {@code buffer}, or -1.    * @throws IOException IO failure    */
annotation|@
name|Override
DECL|method|read (byte[] b, int offset, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkState
argument_list|()
expr_stmt|;
name|NativeAzureFileSystemHelper
operator|.
name|validateReadArgs
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobInputStream
operator|!=
literal|null
condition|)
block|{
name|int
name|numberOfBytesRead
init|=
name|blobInputStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|streamPosition
operator|+=
name|numberOfBytesRead
expr_stmt|;
return|return
name|numberOfBytesRead
return|;
block|}
else|else
block|{
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|len
argument_list|>
name|b
operator|.
name|length
operator|-
name|offset
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"read arguments out of range"
argument_list|)
throw|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|bytesRead
init|=
literal|0
decl_stmt|;
name|int
name|available
init|=
name|available
argument_list|()
decl_stmt|;
if|if
condition|(
name|available
operator|>
literal|0
condition|)
block|{
name|bytesRead
operator|=
name|Math
operator|.
name|min
argument_list|(
name|available
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|streamBuffer
argument_list|,
name|streamBufferPosition
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|streamBufferPosition
operator|+=
name|bytesRead
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|==
name|bytesRead
condition|)
block|{
return|return
name|len
return|;
block|}
if|if
condition|(
name|streamPosition
operator|>=
name|streamLength
condition|)
block|{
return|return
operator|(
name|bytesRead
operator|>
literal|0
operator|)
condition|?
name|bytesRead
else|:
operator|-
literal|1
return|;
block|}
name|offset
operator|+=
name|bytesRead
expr_stmt|;
name|len
operator|-=
name|bytesRead
expr_stmt|;
return|return
name|bytesRead
operator|+
name|doNetworkRead
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
comment|/**    * Reads the next byte of data from the stream.    * @return the next byte of data, or -1    * @throws IOException IO failure    */
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|int
name|numberOfBytesRead
init|=
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
operator|(
name|numberOfBytesRead
operator|<
literal|1
operator|)
condition|?
operator|-
literal|1
else|:
name|buffer
index|[
literal|0
index|]
return|;
block|}
comment|/**    * Skips over and discards n bytes of data from this input stream.    * @param n the number of bytes to be skipped.    * @return the actual number of bytes skipped.    * @throws IOException IO failure    */
annotation|@
name|Override
DECL|method|skip (long n)
specifier|public
specifier|synchronized
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|checkState
argument_list|()
expr_stmt|;
if|if
condition|(
name|blobInputStream
operator|!=
literal|null
condition|)
block|{
return|return
name|blobInputStream
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|n
argument_list|<
literal|0
operator|||
name|streamPosition
operator|+
name|n
argument_list|>
name|streamLength
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"skip range"
argument_list|)
throw|;
block|}
if|if
condition|(
name|streamBuffer
operator|!=
literal|null
condition|)
block|{
name|streamBufferPosition
operator|=
operator|(
name|n
operator|<
name|streamBufferLength
operator|-
name|streamBufferPosition
operator|)
condition|?
name|streamBufferPosition
operator|+
operator|(
name|int
operator|)
name|n
else|:
name|streamBufferLength
expr_stmt|;
block|}
name|streamPosition
operator|+=
name|n
expr_stmt|;
return|return
name|n
return|;
block|}
block|}
comment|/**    * An<code>OutputStream</code> backed by a user-supplied buffer.    */
DECL|class|MemoryOutputStream
specifier|static
class|class
name|MemoryOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|buffer
specifier|private
specifier|final
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
DECL|field|writePosition
specifier|private
name|int
name|writePosition
decl_stmt|;
comment|/**      * Creates a<code>MemoryOutputStream</code> from a user-supplied buffer.      * @param buffer an array of bytes.      * @param offset a starting offset in<code>buffer</code> where the data      * will be written.      * @param length the maximum number of bytes to be written to the stream.      */
DECL|method|MemoryOutputStream (byte[] buffer, int offset, int length)
name|MemoryOutputStream
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"buffer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|length
argument_list|<
literal|0
operator|||
name|length
argument_list|>
name|buffer
operator|.
name|length
operator|-
name|offset
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"offset out of range of buffer"
argument_list|)
throw|;
block|}
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|writePosition
operator|=
name|offset
expr_stmt|;
block|}
comment|/**      * Gets the current size of the stream.      */
DECL|method|size ()
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|writePosition
operator|-
name|offset
return|;
block|}
comment|/**      * Gets the current capacity of the stream.      */
DECL|method|capacity ()
specifier|public
specifier|synchronized
name|int
name|capacity
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**      * Writes the next byte to the stream.      * @param b the byte to be written.      * @throws IOException IO failure      */
DECL|method|write (int b)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
name|length
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No space for more writes"
argument_list|)
throw|;
block|}
name|buffer
index|[
name|writePosition
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
block|}
comment|/**      * Writes a range of bytes to the stream.      * @param b a byte array.      * @param off the start offset in<code>buffer</code> from which the data      * is read.      * @param length the number of bytes to be written.      * @throws IOException IO failure      */
DECL|method|write (byte[] b, int off, int length)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null buffer argument"
argument_list|)
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|length
argument_list|<
literal|0
operator|||
name|length
argument_list|>
name|b
operator|.
name|length
operator|-
name|off
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"array write offset"
argument_list|)
throw|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|buffer
argument_list|,
name|writePosition
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|writePosition
operator|+=
name|length
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

