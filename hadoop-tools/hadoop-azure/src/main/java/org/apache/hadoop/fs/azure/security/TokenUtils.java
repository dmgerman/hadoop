begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Utility methods common for token management  */
end_comment

begin_class
DECL|class|TokenUtils
specifier|public
specifier|final
class|class
name|TokenUtils
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TokenUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|URL_STRING
specifier|public
specifier|static
specifier|final
name|String
name|URL_STRING
init|=
literal|"urlString"
decl_stmt|;
DECL|method|TokenUtils ()
specifier|private
name|TokenUtils
parameter_list|()
block|{   }
DECL|method|toDelegationToken ( final Map<?, ?> inputMap)
specifier|public
specifier|static
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|toDelegationToken
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|inputMap
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|inputMap
operator|.
name|get
argument_list|(
name|Token
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
operator|)
name|toToken
argument_list|(
name|m
argument_list|)
return|;
block|}
DECL|method|toToken (final Map<?, ?> m)
specifier|public
specifier|static
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|toToken
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|urlString
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
name|URL_STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlString
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read url string param - {}"
argument_list|,
name|urlString
argument_list|)
expr_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
name|urlString
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

