begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|utils
package|;
end_package

begin_comment
comment|/**  * CRC64 implementation for AzureBlobFileSystem.  */
end_comment

begin_class
DECL|class|CRC64
specifier|public
class|class
name|CRC64
block|{
DECL|field|POLY
specifier|private
specifier|static
specifier|final
name|long
name|POLY
init|=
literal|0x9a6c9329ac4bc9b5L
decl_stmt|;
DECL|field|TABLE_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|TABLE_LENGTH
init|=
literal|256
decl_stmt|;
DECL|field|TABLE
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|TABLE
init|=
operator|new
name|long
index|[
name|TABLE_LENGTH
index|]
decl_stmt|;
DECL|field|value
specifier|private
name|long
name|value
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * @param input byte arrays.    * @return long value of the CRC-64 checksum of the data.    * */
DECL|method|compute (byte[] input)
specifier|public
name|long
name|compute
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|value
operator|=
name|TABLE
index|[
operator|(
name|input
index|[
name|i
index|]
operator|^
operator|(
name|int
operator|)
name|value
operator|)
operator|&
literal|0xFF
index|]
operator|^
operator|(
name|value
operator|>>>
literal|8
operator|)
expr_stmt|;
block|}
return|return
operator|~
name|value
return|;
block|}
comment|/*    * Initialize a table constructed from POLY (0x9a6c9329ac4bc9b5L).    * */
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
name|value
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|TABLE_LENGTH
condition|;
operator|++
name|n
control|)
block|{
name|long
name|crc
init|=
name|n
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|crc
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|crc
operator|=
operator|(
name|crc
operator|>>>
literal|1
operator|)
operator|^
name|POLY
expr_stmt|;
block|}
else|else
block|{
name|crc
operator|>>>=
literal|1
expr_stmt|;
block|}
block|}
name|TABLE
index|[
name|n
index|]
operator|=
name|crc
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

