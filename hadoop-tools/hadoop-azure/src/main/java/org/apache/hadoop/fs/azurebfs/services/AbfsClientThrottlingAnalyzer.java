begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|AbfsClientThrottlingAnalyzer
class|class
name|AbfsClientThrottlingAnalyzer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbfsClientThrottlingAnalyzer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_ANALYSIS_PERIOD_MS
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_ANALYSIS_PERIOD_MS
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
DECL|field|MIN_ANALYSIS_PERIOD_MS
specifier|private
specifier|static
specifier|final
name|int
name|MIN_ANALYSIS_PERIOD_MS
init|=
literal|1000
decl_stmt|;
DECL|field|MAX_ANALYSIS_PERIOD_MS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ANALYSIS_PERIOD_MS
init|=
literal|30000
decl_stmt|;
DECL|field|MIN_ACCEPTABLE_ERROR_PERCENTAGE
specifier|private
specifier|static
specifier|final
name|double
name|MIN_ACCEPTABLE_ERROR_PERCENTAGE
init|=
literal|.1
decl_stmt|;
DECL|field|MAX_EQUILIBRIUM_ERROR_PERCENTAGE
specifier|private
specifier|static
specifier|final
name|double
name|MAX_EQUILIBRIUM_ERROR_PERCENTAGE
init|=
literal|1
decl_stmt|;
DECL|field|RAPID_SLEEP_DECREASE_FACTOR
specifier|private
specifier|static
specifier|final
name|double
name|RAPID_SLEEP_DECREASE_FACTOR
init|=
literal|.75
decl_stmt|;
DECL|field|RAPID_SLEEP_DECREASE_TRANSITION_PERIOD_MS
specifier|private
specifier|static
specifier|final
name|double
name|RAPID_SLEEP_DECREASE_TRANSITION_PERIOD_MS
init|=
literal|150
operator|*
literal|1000
decl_stmt|;
DECL|field|SLEEP_DECREASE_FACTOR
specifier|private
specifier|static
specifier|final
name|double
name|SLEEP_DECREASE_FACTOR
init|=
literal|.975
decl_stmt|;
DECL|field|SLEEP_INCREASE_FACTOR
specifier|private
specifier|static
specifier|final
name|double
name|SLEEP_INCREASE_FACTOR
init|=
literal|1.05
decl_stmt|;
DECL|field|analysisPeriodMs
specifier|private
name|int
name|analysisPeriodMs
decl_stmt|;
DECL|field|sleepDuration
specifier|private
specifier|volatile
name|int
name|sleepDuration
init|=
literal|0
decl_stmt|;
DECL|field|consecutiveNoErrorCount
specifier|private
name|long
name|consecutiveNoErrorCount
init|=
literal|0
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
DECL|field|timer
specifier|private
name|Timer
name|timer
init|=
literal|null
decl_stmt|;
DECL|field|blobMetrics
specifier|private
name|AtomicReference
argument_list|<
name|AbfsOperationMetrics
argument_list|>
name|blobMetrics
init|=
literal|null
decl_stmt|;
DECL|method|AbfsClientThrottlingAnalyzer ()
specifier|private
name|AbfsClientThrottlingAnalyzer
parameter_list|()
block|{
comment|// hide default constructor
block|}
comment|/**    * Creates an instance of the<code>AbfsClientThrottlingAnalyzer</code> class with    * the specified name.    *    * @param name a name used to identify this instance.    * @throws IllegalArgumentException if name is null or empty.    */
DECL|method|AbfsClientThrottlingAnalyzer (String name)
name|AbfsClientThrottlingAnalyzer
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
argument_list|(
name|name
argument_list|,
name|DEFAULT_ANALYSIS_PERIOD_MS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an instance of the<code>AbfsClientThrottlingAnalyzer</code> class with    * the specified name and period.    *    * @param name   A name used to identify this instance.    * @param period The frequency, in milliseconds, at which metrics are    *               analyzed.    * @throws IllegalArgumentException If name is null or empty.    *                                  If period is less than 1000 or greater than 30000 milliseconds.    */
DECL|method|AbfsClientThrottlingAnalyzer (String name, int period)
name|AbfsClientThrottlingAnalyzer
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|period
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|name
argument_list|)
argument_list|,
literal|"The argument 'name' cannot be null or empty."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|period
operator|>=
name|MIN_ANALYSIS_PERIOD_MS
operator|&&
name|period
operator|<=
name|MAX_ANALYSIS_PERIOD_MS
argument_list|,
literal|"The argument 'period' must be between 1000 and 30000."
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|analysisPeriodMs
operator|=
name|period
expr_stmt|;
name|this
operator|.
name|blobMetrics
operator|=
operator|new
name|AtomicReference
argument_list|<
name|AbfsOperationMetrics
argument_list|>
argument_list|(
operator|new
name|AbfsOperationMetrics
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|timer
operator|=
operator|new
name|Timer
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"abfs-timer-client-throttling-analyzer-%s"
argument_list|,
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|timer
operator|.
name|schedule
argument_list|(
operator|new
name|TimerTaskImpl
argument_list|()
argument_list|,
name|analysisPeriodMs
argument_list|,
name|analysisPeriodMs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates metrics with results from the current storage operation.    *    * @param count             The count of bytes transferred.    * @param isFailedOperation True if the operation failed; otherwise false.    */
DECL|method|addBytesTransferred (long count, boolean isFailedOperation)
specifier|public
name|void
name|addBytesTransferred
parameter_list|(
name|long
name|count
parameter_list|,
name|boolean
name|isFailedOperation
parameter_list|)
block|{
name|AbfsOperationMetrics
name|metrics
init|=
name|blobMetrics
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFailedOperation
condition|)
block|{
name|metrics
operator|.
name|bytesFailed
operator|.
name|addAndGet
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|operationsFailed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|metrics
operator|.
name|bytesSuccessful
operator|.
name|addAndGet
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|operationsSuccessful
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Suspends the current storage operation, as necessary, to reduce throughput.    */
DECL|method|suspendIfNecessary ()
specifier|public
name|void
name|suspendIfNecessary
parameter_list|()
block|{
name|int
name|duration
init|=
name|sleepDuration
decl_stmt|;
if|if
condition|(
name|duration
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getSleepDuration ()
name|int
name|getSleepDuration
parameter_list|()
block|{
return|return
name|sleepDuration
return|;
block|}
DECL|method|analyzeMetricsAndUpdateSleepDuration (AbfsOperationMetrics metrics, int sleepDuration)
specifier|private
name|int
name|analyzeMetricsAndUpdateSleepDuration
parameter_list|(
name|AbfsOperationMetrics
name|metrics
parameter_list|,
name|int
name|sleepDuration
parameter_list|)
block|{
specifier|final
name|double
name|percentageConversionFactor
init|=
literal|100
decl_stmt|;
name|double
name|bytesFailed
init|=
name|metrics
operator|.
name|bytesFailed
operator|.
name|get
argument_list|()
decl_stmt|;
name|double
name|bytesSuccessful
init|=
name|metrics
operator|.
name|bytesSuccessful
operator|.
name|get
argument_list|()
decl_stmt|;
name|double
name|operationsFailed
init|=
name|metrics
operator|.
name|operationsFailed
operator|.
name|get
argument_list|()
decl_stmt|;
name|double
name|operationsSuccessful
init|=
name|metrics
operator|.
name|operationsSuccessful
operator|.
name|get
argument_list|()
decl_stmt|;
name|double
name|errorPercentage
init|=
operator|(
name|bytesFailed
operator|<=
literal|0
operator|)
condition|?
literal|0
else|:
operator|(
name|percentageConversionFactor
operator|*
name|bytesFailed
operator|/
operator|(
name|bytesFailed
operator|+
name|bytesSuccessful
operator|)
operator|)
decl_stmt|;
name|long
name|periodMs
init|=
name|metrics
operator|.
name|endTime
operator|-
name|metrics
operator|.
name|startTime
decl_stmt|;
name|double
name|newSleepDuration
decl_stmt|;
if|if
condition|(
name|errorPercentage
operator|<
name|MIN_ACCEPTABLE_ERROR_PERCENTAGE
condition|)
block|{
operator|++
name|consecutiveNoErrorCount
expr_stmt|;
comment|// Decrease sleepDuration in order to increase throughput.
name|double
name|reductionFactor
init|=
operator|(
name|consecutiveNoErrorCount
operator|*
name|analysisPeriodMs
operator|>=
name|RAPID_SLEEP_DECREASE_TRANSITION_PERIOD_MS
operator|)
condition|?
name|RAPID_SLEEP_DECREASE_FACTOR
else|:
name|SLEEP_DECREASE_FACTOR
decl_stmt|;
name|newSleepDuration
operator|=
name|sleepDuration
operator|*
name|reductionFactor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|errorPercentage
operator|<
name|MAX_EQUILIBRIUM_ERROR_PERCENTAGE
condition|)
block|{
comment|// Do not modify sleepDuration in order to stabilize throughput.
name|newSleepDuration
operator|=
name|sleepDuration
expr_stmt|;
block|}
else|else
block|{
comment|// Increase sleepDuration in order to minimize error rate.
name|consecutiveNoErrorCount
operator|=
literal|0
expr_stmt|;
comment|// Increase sleep duration in order to reduce throughput and error rate.
comment|// First, calculate target throughput: bytesSuccessful / periodMs.
comment|// Next, calculate time required to send *all* data (assuming next period
comment|// is similar to previous) at the target throughput: (bytesSuccessful
comment|// + bytesFailed) * periodMs / bytesSuccessful. Next, subtract periodMs to
comment|// get the total additional delay needed.
name|double
name|additionalDelayNeeded
init|=
literal|5
operator|*
name|analysisPeriodMs
decl_stmt|;
if|if
condition|(
name|bytesSuccessful
operator|>
literal|0
condition|)
block|{
name|additionalDelayNeeded
operator|=
operator|(
name|bytesSuccessful
operator|+
name|bytesFailed
operator|)
operator|*
name|periodMs
operator|/
name|bytesSuccessful
operator|-
name|periodMs
expr_stmt|;
block|}
comment|// amortize the additional delay needed across the estimated number of
comment|// requests during the next period
name|newSleepDuration
operator|=
name|additionalDelayNeeded
operator|/
operator|(
name|operationsFailed
operator|+
name|operationsSuccessful
operator|)
expr_stmt|;
specifier|final
name|double
name|maxSleepDuration
init|=
name|analysisPeriodMs
decl_stmt|;
specifier|final
name|double
name|minSleepDuration
init|=
name|sleepDuration
operator|*
name|SLEEP_INCREASE_FACTOR
decl_stmt|;
comment|// Add 1 ms to avoid rounding down and to decrease proximity to the server
comment|// side ingress/egress limit.  Ensure that the new sleep duration is
comment|// larger than the current one to more quickly reduce the number of
comment|// errors.  Don't allow the sleep duration to grow unbounded, after a
comment|// certain point throttling won't help, for example, if there are far too
comment|// many tasks/containers/nodes no amount of throttling will help.
name|newSleepDuration
operator|=
name|Math
operator|.
name|max
argument_list|(
name|newSleepDuration
argument_list|,
name|minSleepDuration
argument_list|)
operator|+
literal|1
expr_stmt|;
name|newSleepDuration
operator|=
name|Math
operator|.
name|min
argument_list|(
name|newSleepDuration
argument_list|,
name|maxSleepDuration
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%5.5s, %10d, %10d, %10d, %10d, %6.2f, %5d, %5d, %5d"
argument_list|,
name|name
argument_list|,
operator|(
name|int
operator|)
name|bytesFailed
argument_list|,
operator|(
name|int
operator|)
name|bytesSuccessful
argument_list|,
operator|(
name|int
operator|)
name|operationsFailed
argument_list|,
operator|(
name|int
operator|)
name|operationsSuccessful
argument_list|,
name|errorPercentage
argument_list|,
name|periodMs
argument_list|,
operator|(
name|int
operator|)
name|sleepDuration
argument_list|,
operator|(
name|int
operator|)
name|newSleepDuration
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|newSleepDuration
return|;
block|}
comment|/**    * Timer callback implementation for periodically analyzing metrics.    */
DECL|class|TimerTaskImpl
class|class
name|TimerTaskImpl
extends|extends
name|TimerTask
block|{
DECL|field|doingWork
specifier|private
name|AtomicInteger
name|doingWork
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Periodically analyzes a snapshot of the blob storage metrics and updates      * the sleepDuration in order to appropriately throttle storage operations.      */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|doWork
init|=
literal|false
decl_stmt|;
try|try
block|{
name|doWork
operator|=
name|doingWork
operator|.
name|compareAndSet
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// prevent concurrent execution of this task
if|if
condition|(
operator|!
name|doWork
condition|)
block|{
return|return;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|blobMetrics
operator|.
name|get
argument_list|()
operator|.
name|startTime
operator|>=
name|analysisPeriodMs
condition|)
block|{
name|AbfsOperationMetrics
name|oldMetrics
init|=
name|blobMetrics
operator|.
name|getAndSet
argument_list|(
operator|new
name|AbfsOperationMetrics
argument_list|(
name|now
argument_list|)
argument_list|)
decl_stmt|;
name|oldMetrics
operator|.
name|endTime
operator|=
name|now
expr_stmt|;
name|sleepDuration
operator|=
name|analyzeMetricsAndUpdateSleepDuration
argument_list|(
name|oldMetrics
argument_list|,
name|sleepDuration
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|doWork
condition|)
block|{
name|doingWork
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Stores Abfs operation metrics during each analysis period.    */
DECL|class|AbfsOperationMetrics
specifier|static
class|class
name|AbfsOperationMetrics
block|{
DECL|field|bytesFailed
specifier|private
name|AtomicLong
name|bytesFailed
decl_stmt|;
DECL|field|bytesSuccessful
specifier|private
name|AtomicLong
name|bytesSuccessful
decl_stmt|;
DECL|field|operationsFailed
specifier|private
name|AtomicLong
name|operationsFailed
decl_stmt|;
DECL|field|operationsSuccessful
specifier|private
name|AtomicLong
name|operationsSuccessful
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|method|AbfsOperationMetrics (long startTime)
name|AbfsOperationMetrics
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|bytesFailed
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|bytesSuccessful
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|operationsFailed
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|operationsSuccessful
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

