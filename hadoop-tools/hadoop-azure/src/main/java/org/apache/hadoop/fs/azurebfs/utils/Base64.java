begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|utils
package|;
end_package

begin_comment
comment|/**  * Base64  */
end_comment

begin_class
DECL|class|Base64
specifier|public
specifier|final
class|class
name|Base64
block|{
comment|/**    * The Base 64 Characters.    */
DECL|field|BASE_64_CHARS
specifier|private
specifier|static
specifier|final
name|String
name|BASE_64_CHARS
init|=
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
decl_stmt|;
comment|/**    * Decoded values, -1 is invalid character, -2 is = pad character.    */
DECL|field|DECODE_64
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DECODE_64
init|=
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|// 0-15
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|/*                                                                              * 16- 31                                                                              */
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|62
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|63
block|,
comment|/*                                                                              * 32- 47                                                                              */
literal|52
block|,
literal|53
block|,
literal|54
block|,
literal|55
block|,
literal|56
block|,
literal|57
block|,
literal|58
block|,
literal|59
block|,
literal|60
block|,
literal|61
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|2
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|/*                                                                              * 48- 63                                                                              */
operator|-
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
comment|/* 64-79 */
literal|15
block|,
literal|16
block|,
literal|17
block|,
literal|18
block|,
literal|19
block|,
literal|20
block|,
literal|21
block|,
literal|22
block|,
literal|23
block|,
literal|24
block|,
literal|25
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|/*                                                                              * 80- 95                                                                              */
operator|-
literal|1
block|,
literal|26
block|,
literal|27
block|,
literal|28
block|,
literal|29
block|,
literal|30
block|,
literal|31
block|,
literal|32
block|,
literal|33
block|,
literal|34
block|,
literal|35
block|,
literal|36
block|,
literal|37
block|,
literal|38
block|,
literal|39
block|,
literal|40
block|,
comment|/*                                                                              * 96- 111                                                                              */
literal|41
block|,
literal|42
block|,
literal|43
block|,
literal|44
block|,
literal|45
block|,
literal|46
block|,
literal|47
block|,
literal|48
block|,
literal|49
block|,
literal|50
block|,
literal|51
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
comment|/*                                                                             * 112- 127                                                                             */
block|}
decl_stmt|;
comment|/**    * Decodes a given Base64 string into its corresponding byte array.    *    * @param data    *            the Base64 string, as a<code>String</code> object, to decode    *    * @return the corresponding decoded byte array    * @throws IllegalArgumentException    *             If the string is not a valid base64 encoded string    */
DECL|method|decode (final String data)
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
specifier|final
name|String
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The data parameter is not a valid base64-encoded string."
argument_list|)
throw|;
block|}
name|int
name|byteArrayLength
init|=
literal|3
operator|*
name|data
operator|.
name|length
argument_list|()
operator|/
literal|4
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|endsWith
argument_list|(
literal|"=="
argument_list|)
condition|)
block|{
name|byteArrayLength
operator|-=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|endsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|byteArrayLength
operator|-=
literal|1
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|retArray
init|=
operator|new
name|byte
index|[
name|byteArrayLength
index|]
decl_stmt|;
name|int
name|byteDex
init|=
literal|0
decl_stmt|;
name|int
name|charDex
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|charDex
operator|<
name|data
operator|.
name|length
argument_list|()
condition|;
name|charDex
operator|+=
literal|4
control|)
block|{
comment|// get 4 chars, convert to 3 bytes
specifier|final
name|int
name|char1
init|=
name|DECODE_64
index|[
operator|(
name|byte
operator|)
name|data
operator|.
name|charAt
argument_list|(
name|charDex
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|char2
init|=
name|DECODE_64
index|[
operator|(
name|byte
operator|)
name|data
operator|.
name|charAt
argument_list|(
name|charDex
operator|+
literal|1
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|char3
init|=
name|DECODE_64
index|[
operator|(
name|byte
operator|)
name|data
operator|.
name|charAt
argument_list|(
name|charDex
operator|+
literal|2
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|char4
init|=
name|DECODE_64
index|[
operator|(
name|byte
operator|)
name|data
operator|.
name|charAt
argument_list|(
name|charDex
operator|+
literal|3
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|char1
operator|<
literal|0
operator|||
name|char2
operator|<
literal|0
operator|||
name|char3
operator|==
operator|-
literal|1
operator|||
name|char4
operator|==
operator|-
literal|1
condition|)
block|{
comment|// invalid character(-1), or bad padding (-2)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The data parameter is not a valid base64-encoded string."
argument_list|)
throw|;
block|}
name|int
name|tVal
init|=
name|char1
operator|<<
literal|18
decl_stmt|;
name|tVal
operator|+=
name|char2
operator|<<
literal|12
expr_stmt|;
name|tVal
operator|+=
operator|(
name|char3
operator|&
literal|0xff
operator|)
operator|<<
literal|6
expr_stmt|;
name|tVal
operator|+=
name|char4
operator|&
literal|0xff
expr_stmt|;
if|if
condition|(
name|char3
operator|==
operator|-
literal|2
condition|)
block|{
comment|// two "==" pad chars, check bits 12-24
name|tVal
operator|&=
literal|0x00FFF000
expr_stmt|;
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|>>
literal|16
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|char4
operator|==
operator|-
literal|2
condition|)
block|{
comment|// one pad char "=" , check bits 6-24.
name|tVal
operator|&=
literal|0x00FFFFC0
expr_stmt|;
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|>>
literal|16
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|>>
literal|8
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No pads take all 3 bytes, bits 0-24
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|>>
literal|16
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|>>
literal|8
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retArray
return|;
block|}
comment|/**    * Decodes a given Base64 string into its corresponding byte array.    *    * @param data    *            the Base64 string, as a<code>String</code> object, to decode    *    * @return the corresponding decoded byte array    * @throws IllegalArgumentException    *             If the string is not a valid base64 encoded string    */
DECL|method|decodeAsByteObjectArray (final String data)
specifier|public
specifier|static
name|Byte
index|[]
name|decodeAsByteObjectArray
parameter_list|(
specifier|final
name|String
name|data
parameter_list|)
block|{
name|int
name|byteArrayLength
init|=
literal|3
operator|*
name|data
operator|.
name|length
argument_list|()
operator|/
literal|4
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|endsWith
argument_list|(
literal|"=="
argument_list|)
condition|)
block|{
name|byteArrayLength
operator|-=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|endsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|byteArrayLength
operator|-=
literal|1
expr_stmt|;
block|}
specifier|final
name|Byte
index|[]
name|retArray
init|=
operator|new
name|Byte
index|[
name|byteArrayLength
index|]
decl_stmt|;
name|int
name|byteDex
init|=
literal|0
decl_stmt|;
name|int
name|charDex
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|charDex
operator|<
name|data
operator|.
name|length
argument_list|()
condition|;
name|charDex
operator|+=
literal|4
control|)
block|{
comment|// get 4 chars, convert to 3 bytes
specifier|final
name|int
name|char1
init|=
name|DECODE_64
index|[
operator|(
name|byte
operator|)
name|data
operator|.
name|charAt
argument_list|(
name|charDex
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|char2
init|=
name|DECODE_64
index|[
operator|(
name|byte
operator|)
name|data
operator|.
name|charAt
argument_list|(
name|charDex
operator|+
literal|1
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|char3
init|=
name|DECODE_64
index|[
operator|(
name|byte
operator|)
name|data
operator|.
name|charAt
argument_list|(
name|charDex
operator|+
literal|2
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|char4
init|=
name|DECODE_64
index|[
operator|(
name|byte
operator|)
name|data
operator|.
name|charAt
argument_list|(
name|charDex
operator|+
literal|3
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|char1
operator|<
literal|0
operator|||
name|char2
operator|<
literal|0
operator|||
name|char3
operator|==
operator|-
literal|1
operator|||
name|char4
operator|==
operator|-
literal|1
condition|)
block|{
comment|// invalid character(-1), or bad padding (-2)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The data parameter is not a valid base64-encoded string."
argument_list|)
throw|;
block|}
name|int
name|tVal
init|=
name|char1
operator|<<
literal|18
decl_stmt|;
name|tVal
operator|+=
name|char2
operator|<<
literal|12
expr_stmt|;
name|tVal
operator|+=
operator|(
name|char3
operator|&
literal|0xff
operator|)
operator|<<
literal|6
expr_stmt|;
name|tVal
operator|+=
name|char4
operator|&
literal|0xff
expr_stmt|;
if|if
condition|(
name|char3
operator|==
operator|-
literal|2
condition|)
block|{
comment|// two "==" pad chars, check bits 12-24
name|tVal
operator|&=
literal|0x00FFF000
expr_stmt|;
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|>>
literal|16
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|char4
operator|==
operator|-
literal|2
condition|)
block|{
comment|// one pad char "=" , check bits 6-24.
name|tVal
operator|&=
literal|0x00FFFFC0
expr_stmt|;
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|>>
literal|16
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|>>
literal|8
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No pads take all 3 bytes, bits 0-24
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|>>
literal|16
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|>>
literal|8
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|retArray
index|[
name|byteDex
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tVal
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retArray
return|;
block|}
comment|/**    * Encodes a byte array as a Base64 string.    *    * @param data    *            the byte array to encode    * @return the Base64-encoded string, as a<code>String</code> object    */
DECL|method|encode (final byte[] data)
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|dataRemainder
init|=
name|data
operator|.
name|length
operator|%
literal|3
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|j
operator|<
name|data
operator|.
name|length
condition|;
name|j
operator|+=
literal|3
control|)
block|{
if|if
condition|(
name|j
operator|<
name|data
operator|.
name|length
operator|-
name|dataRemainder
condition|)
block|{
name|n
operator|=
operator|(
operator|(
name|data
index|[
name|j
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|data
index|[
name|j
operator|+
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|data
index|[
name|j
operator|+
literal|2
index|]
operator|&
literal|0xFF
operator|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dataRemainder
operator|==
literal|1
condition|)
block|{
name|n
operator|=
operator|(
name|data
index|[
name|j
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataRemainder
operator|==
literal|2
condition|)
block|{
name|n
operator|=
operator|(
operator|(
name|data
index|[
name|j
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|data
index|[
name|j
operator|+
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
expr_stmt|;
block|}
block|}
comment|// Left here for readability
comment|// byte char1 = (byte) ((n>>> 18)& 0x3F);
comment|// byte char2 = (byte) ((n>>> 12)& 0x3F);
comment|// byte char3 = (byte) ((n>>> 6)& 0x3F);
comment|// byte char4 = (byte) (n& 0x3F);
name|builder
operator|.
name|append
argument_list|(
name|BASE_64_CHARS
operator|.
name|charAt
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|n
operator|>>>
literal|18
operator|)
operator|&
literal|0x3F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|BASE_64_CHARS
operator|.
name|charAt
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|n
operator|>>>
literal|12
operator|)
operator|&
literal|0x3F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|BASE_64_CHARS
operator|.
name|charAt
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|n
operator|>>>
literal|6
operator|)
operator|&
literal|0x3F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|BASE_64_CHARS
operator|.
name|charAt
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|n
operator|&
literal|0x3F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|bLength
init|=
name|builder
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// append '=' to pad
if|if
condition|(
name|data
operator|.
name|length
operator|%
literal|3
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|replace
argument_list|(
name|bLength
operator|-
literal|2
argument_list|,
name|bLength
argument_list|,
literal|"=="
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|length
operator|%
literal|3
operator|==
literal|2
condition|)
block|{
name|builder
operator|.
name|replace
argument_list|(
name|bLength
operator|-
literal|1
argument_list|,
name|bLength
argument_list|,
literal|"="
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Encodes a byte array as a Base64 string.    *    * @param data    *            the byte array to encode    * @return the Base64-encoded string, as a<code>String</code> object    */
DECL|method|encode (final Byte[] data)
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
specifier|final
name|Byte
index|[]
name|data
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|dataRemainder
init|=
name|data
operator|.
name|length
operator|%
literal|3
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|j
operator|<
name|data
operator|.
name|length
condition|;
name|j
operator|+=
literal|3
control|)
block|{
if|if
condition|(
name|j
operator|<
name|data
operator|.
name|length
operator|-
name|dataRemainder
condition|)
block|{
name|n
operator|=
operator|(
operator|(
name|data
index|[
name|j
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|data
index|[
name|j
operator|+
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|data
index|[
name|j
operator|+
literal|2
index|]
operator|&
literal|0xFF
operator|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dataRemainder
operator|==
literal|1
condition|)
block|{
name|n
operator|=
operator|(
name|data
index|[
name|j
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataRemainder
operator|==
literal|2
condition|)
block|{
name|n
operator|=
operator|(
operator|(
name|data
index|[
name|j
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|data
index|[
name|j
operator|+
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
expr_stmt|;
block|}
block|}
comment|// Left here for readability
comment|// byte char1 = (byte) ((n>>> 18)& 0x3F);
comment|// byte char2 = (byte) ((n>>> 12)& 0x3F);
comment|// byte char3 = (byte) ((n>>> 6)& 0x3F);
comment|// byte char4 = (byte) (n& 0x3F);
name|builder
operator|.
name|append
argument_list|(
name|BASE_64_CHARS
operator|.
name|charAt
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|n
operator|>>>
literal|18
operator|)
operator|&
literal|0x3F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|BASE_64_CHARS
operator|.
name|charAt
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|n
operator|>>>
literal|12
operator|)
operator|&
literal|0x3F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|BASE_64_CHARS
operator|.
name|charAt
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|n
operator|>>>
literal|6
operator|)
operator|&
literal|0x3F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|BASE_64_CHARS
operator|.
name|charAt
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|n
operator|&
literal|0x3F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|bLength
init|=
name|builder
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// append '=' to pad
if|if
condition|(
name|data
operator|.
name|length
operator|%
literal|3
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|replace
argument_list|(
name|bLength
operator|-
literal|2
argument_list|,
name|bLength
argument_list|,
literal|"=="
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|length
operator|%
literal|3
operator|==
literal|2
condition|)
block|{
name|builder
operator|.
name|replace
argument_list|(
name|bLength
operator|-
literal|1
argument_list|,
name|bLength
argument_list|,
literal|"="
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Determines whether the given string contains only Base64 characters.    *    * @param data    *            the string, as a<code>String</code> object, to validate    * @return<code>true</code> if<code>data</code> is a valid Base64 string, otherwise<code>false</code>    */
DECL|method|validateIsBase64String (final String data)
specifier|public
specifier|static
name|boolean
name|validateIsBase64String
parameter_list|(
specifier|final
name|String
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
argument_list|()
operator|%
literal|4
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|data
operator|.
name|length
argument_list|()
condition|;
name|m
operator|++
control|)
block|{
specifier|final
name|byte
name|charByte
init|=
operator|(
name|byte
operator|)
name|data
operator|.
name|charAt
argument_list|(
name|m
argument_list|)
decl_stmt|;
comment|// pad char detected
if|if
condition|(
name|DECODE_64
index|[
name|charByte
index|]
operator|==
operator|-
literal|2
condition|)
block|{
if|if
condition|(
name|m
operator|<
name|data
operator|.
name|length
argument_list|()
operator|-
literal|2
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
name|data
operator|.
name|length
argument_list|()
operator|-
literal|2
operator|&&
name|DECODE_64
index|[
operator|(
name|byte
operator|)
name|data
operator|.
name|charAt
argument_list|(
name|m
operator|+
literal|1
argument_list|)
index|]
operator|!=
operator|-
literal|2
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|charByte
operator|<
literal|0
operator|||
name|DECODE_64
index|[
name|charByte
index|]
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Private Default Ctor.    */
DECL|method|Base64 ()
specifier|private
name|Base64
parameter_list|()
block|{
comment|// No op
block|}
block|}
end_class

end_unit

