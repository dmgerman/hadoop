begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.diagnostics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|diagnostics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|diagnostics
operator|.
name|ConfigurationValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|InvalidConfigurationValueException
import|;
end_import

begin_comment
comment|/**  * ConfigurationBasicValidator covers the base case of missing user defined configuration value  * @param<T> the type of the validated value  */
end_comment

begin_class
DECL|class|ConfigurationBasicValidator
specifier|abstract
class|class
name|ConfigurationBasicValidator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|ConfigurationValidator
block|{
DECL|field|defaultVal
specifier|private
specifier|final
name|T
name|defaultVal
decl_stmt|;
DECL|field|configKey
specifier|private
specifier|final
name|String
name|configKey
decl_stmt|;
DECL|field|throwIfInvalid
specifier|private
specifier|final
name|boolean
name|throwIfInvalid
decl_stmt|;
DECL|method|ConfigurationBasicValidator (final String configKey, final T defaultVal, final boolean throwIfInvalid)
name|ConfigurationBasicValidator
parameter_list|(
specifier|final
name|String
name|configKey
parameter_list|,
specifier|final
name|T
name|defaultVal
parameter_list|,
specifier|final
name|boolean
name|throwIfInvalid
parameter_list|)
block|{
name|this
operator|.
name|configKey
operator|=
name|configKey
expr_stmt|;
name|this
operator|.
name|defaultVal
operator|=
name|defaultVal
expr_stmt|;
name|this
operator|.
name|throwIfInvalid
operator|=
name|throwIfInvalid
expr_stmt|;
block|}
comment|/**    * This method handles the base case where the configValue is null, based on the throwIfInvalid it either throws or returns the defaultVal,    * otherwise it returns null indicating that the configValue needs to be validated further    * @param configValue the configuration value set by the user    * @return the defaultVal in case the configValue is null and not required to be set, null in case the configValue not null    * @throws InvalidConfigurationValueException in case the configValue is null and required to be set    */
DECL|method|validate (final String configValue)
specifier|public
name|T
name|validate
parameter_list|(
specifier|final
name|String
name|configValue
parameter_list|)
throws|throws
name|InvalidConfigurationValueException
block|{
if|if
condition|(
name|configValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|throwIfInvalid
condition|)
block|{
throw|throw
operator|new
name|InvalidConfigurationValueException
argument_list|(
name|this
operator|.
name|configKey
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|defaultVal
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getDefaultVal ()
specifier|public
name|T
name|getDefaultVal
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultVal
return|;
block|}
DECL|method|getConfigKey ()
specifier|public
name|String
name|getConfigKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|configKey
return|;
block|}
DECL|method|getThrowIfInvalid ()
specifier|public
name|boolean
name|getThrowIfInvalid
parameter_list|()
block|{
return|return
name|this
operator|.
name|throwIfInvalid
return|;
block|}
block|}
end_class

end_unit

