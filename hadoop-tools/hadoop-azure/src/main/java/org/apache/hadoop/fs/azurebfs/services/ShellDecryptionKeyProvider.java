begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|KeyProviderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Shell decryption key provider which invokes an external script that will  * perform the key decryption.  */
end_comment

begin_class
DECL|class|ShellDecryptionKeyProvider
specifier|public
class|class
name|ShellDecryptionKeyProvider
extends|extends
name|SimpleKeyProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ShellDecryptionKeyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getStorageAccountKey (String accountName, Configuration conf)
specifier|public
name|String
name|getStorageAccountKey
parameter_list|(
name|String
name|accountName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|KeyProviderException
block|{
name|String
name|envelope
init|=
name|super
operator|.
name|getStorageAccountKey
argument_list|(
name|accountName
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|command
init|=
name|conf
operator|.
name|get
argument_list|(
name|ConfigurationKeys
operator|.
name|AZURE_KEY_ACCOUNT_SHELLKEYPROVIDER_SCRIPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|KeyProviderException
argument_list|(
literal|"Script path is not specified via fs.azure.shellkeyprovider.script"
argument_list|)
throw|;
block|}
name|String
index|[]
name|cmd
init|=
name|command
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|String
index|[]
name|cmdWithEnvelope
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|cmd
argument_list|,
name|cmd
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|cmdWithEnvelope
index|[
name|cmdWithEnvelope
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|envelope
expr_stmt|;
name|String
name|decryptedKey
init|=
literal|null
decl_stmt|;
try|try
block|{
name|decryptedKey
operator|=
name|Shell
operator|.
name|execCommand
argument_list|(
name|cmdWithEnvelope
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|KeyProviderException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|// trim any whitespace
return|return
name|decryptedKey
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
end_class

end_unit

