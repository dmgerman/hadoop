begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.oauth2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|AbfsHttpConstants
operator|.
name|AT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|AbfsHttpConstants
operator|.
name|STAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|AbfsHttpConstants
operator|.
name|SUPER_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_SKIP_SUPER_USER_REPLACEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_FILE_OWNER_DOMAINNAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_FILE_OWNER_ENABLE_SHORTNAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_OVERRIDE_OWNER_SP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_OVERRIDE_OWNER_SP_LIST
import|;
end_import

begin_comment
comment|/**  * Perform transformation for Azure Active Directory identities used in owner, group and acls.  */
end_comment

begin_class
DECL|class|IdentityTransformer
specifier|public
class|class
name|IdentityTransformer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IdentityTransformer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|isSecure
specifier|private
name|boolean
name|isSecure
decl_stmt|;
DECL|field|servicePrincipalId
specifier|private
name|String
name|servicePrincipalId
decl_stmt|;
DECL|field|serviceWhiteList
specifier|private
name|String
name|serviceWhiteList
decl_stmt|;
DECL|field|domainName
specifier|private
name|String
name|domainName
decl_stmt|;
DECL|field|enableShortName
specifier|private
name|boolean
name|enableShortName
decl_stmt|;
DECL|field|skipUserIdentityReplacement
specifier|private
name|boolean
name|skipUserIdentityReplacement
decl_stmt|;
DECL|field|skipSuperUserReplacement
specifier|private
name|boolean
name|skipSuperUserReplacement
decl_stmt|;
DECL|field|domainIsSet
specifier|private
name|boolean
name|domainIsSet
decl_stmt|;
DECL|field|UUID_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|UUID_PATTERN
init|=
literal|"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
decl_stmt|;
DECL|method|IdentityTransformer (Configuration configuration)
specifier|public
name|IdentityTransformer
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|configuration
argument_list|,
literal|"configuration"
argument_list|)
expr_stmt|;
name|this
operator|.
name|isSecure
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|isSecurityEnabled
argument_list|()
expr_stmt|;
name|this
operator|.
name|servicePrincipalId
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|FS_AZURE_OVERRIDE_OWNER_SP
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|serviceWhiteList
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|FS_AZURE_OVERRIDE_OWNER_SP_LIST
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|domainName
operator|=
name|configuration
operator|.
name|get
argument_list|(
name|FS_AZURE_FILE_OWNER_DOMAINNAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|enableShortName
operator|=
name|configuration
operator|.
name|getBoolean
argument_list|(
name|FS_AZURE_FILE_OWNER_ENABLE_SHORTNAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// - "servicePrincipalId" and "serviceWhiteList" are required for
comment|//    transformation between localUserOrGroup and principalId,$superuser
comment|// - "enableShortName" is required for transformation between shortName and fullyQualifiedName.
name|this
operator|.
name|skipUserIdentityReplacement
operator|=
name|servicePrincipalId
operator|.
name|isEmpty
argument_list|()
operator|&&
name|serviceWhiteList
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|enableShortName
expr_stmt|;
name|this
operator|.
name|skipSuperUserReplacement
operator|=
name|configuration
operator|.
name|getBoolean
argument_list|(
name|FS_AZURE_SKIP_SUPER_USER_REPLACEMENT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableShortName
condition|)
block|{
comment|// need to check the domain setting only when short name is enabled.
comment|// if shortName is not enabled, transformer won't transform a shortName to
comment|// a fully qualified name.
name|this
operator|.
name|domainIsSet
operator|=
operator|!
name|domainName
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Perform identity transformation for the Get request results in AzureBlobFileSystemStore:    * getFileStatus(), listStatus(), getAclStatus().    * Input originalIdentity can be one of the following:    * 1. $superuser:    *     by default it will be transformed to local user/group, this can be disabled by setting    *     "fs.azure.identity.transformer.skip.superuser.replacement" to true.    *    * 2. User principal id:    *     can be transformed to localIdentity, if this principal id matches the principal id set in    *     "fs.azure.identity.transformer.service.principal.id" and localIdentity is stated in    *     "fs.azure.identity.transformer.service.principal.substitution.list"    *    * 3. User principal name (UPN):    *     can be transformed to a short name(localIdentity) if originalIdentity is owner name, and    *     "fs.azure.identity.transformer.enable.short.name" is enabled.    *    * @param originalIdentity the original user or group in the get request results: FileStatus, AclStatus.    * @param isUserName indicate whether the input originalIdentity is an owner name or owning group name.    * @param localIdentity the local user or group, should be parsed from UserGroupInformation.    * @return owner or group after transformation.    * */
DECL|method|transformIdentityForGetRequest (String originalIdentity, boolean isUserName, String localIdentity)
specifier|public
name|String
name|transformIdentityForGetRequest
parameter_list|(
name|String
name|originalIdentity
parameter_list|,
name|boolean
name|isUserName
parameter_list|,
name|String
name|localIdentity
parameter_list|)
block|{
if|if
condition|(
name|originalIdentity
operator|==
literal|null
condition|)
block|{
name|originalIdentity
operator|=
name|localIdentity
expr_stmt|;
comment|// localIdentity might be a full name, so continue the transformation.
block|}
comment|// case 1: it is $superuser and replace $superuser config is enabled
if|if
condition|(
operator|!
name|skipSuperUserReplacement
operator|&&
name|SUPER_USER
operator|.
name|equals
argument_list|(
name|originalIdentity
argument_list|)
condition|)
block|{
return|return
name|localIdentity
return|;
block|}
if|if
condition|(
name|skipUserIdentityReplacement
condition|)
block|{
return|return
name|originalIdentity
return|;
block|}
comment|// case 2: original owner is principalId set in config, and localUser
comment|//         is a daemon service specified in substitution list,
comment|//         To avoid ownership check failure in job task, replace it
comment|//         to local daemon user/group
if|if
condition|(
name|originalIdentity
operator|.
name|equals
argument_list|(
name|servicePrincipalId
argument_list|)
operator|&&
name|isInSubstitutionList
argument_list|(
name|localIdentity
argument_list|)
condition|)
block|{
return|return
name|localIdentity
return|;
block|}
comment|// case 3: If original owner is a fully qualified name, and
comment|//         short name is enabled, replace with shortName.
if|if
condition|(
name|isUserName
operator|&&
name|shouldUseShortUserName
argument_list|(
name|originalIdentity
argument_list|)
condition|)
block|{
return|return
name|getShortName
argument_list|(
name|originalIdentity
argument_list|)
return|;
block|}
return|return
name|originalIdentity
return|;
block|}
comment|/**    * Perform Identity transformation when setting owner on a path.    * There are four possible input:    * 1.short name; 2.$superuser; 3.Fully qualified name; 4. principal id.    *    * short name could be transformed to:    *    - A service principal id or $superuser, if short name belongs a daemon service    *      stated in substitution list AND "fs.azure.identity.transformer.service.principal.id"    *      is set with $superuser or a principal id.    *    - Fully qualified name, if "fs.azure.identity.transformer.domain.name" is set in configuration.    *    * $superuser, fully qualified name and principalId should not be transformed.    *    * @param userOrGroup the user or group to be set as owner.    * @return user or group after transformation.    * */
DECL|method|transformUserOrGroupForSetRequest (String userOrGroup)
specifier|public
name|String
name|transformUserOrGroupForSetRequest
parameter_list|(
name|String
name|userOrGroup
parameter_list|)
block|{
if|if
condition|(
name|userOrGroup
operator|==
literal|null
operator|||
name|userOrGroup
operator|.
name|isEmpty
argument_list|()
operator|||
name|skipUserIdentityReplacement
condition|)
block|{
return|return
name|userOrGroup
return|;
block|}
comment|// case 1: when the owner to be set is stated in substitution list.
if|if
condition|(
name|isInSubstitutionList
argument_list|(
name|userOrGroup
argument_list|)
condition|)
block|{
return|return
name|servicePrincipalId
return|;
block|}
comment|// case 2: when the owner is a short name of the user principal name(UPN).
if|if
condition|(
name|shouldUseFullyQualifiedUserName
argument_list|(
name|userOrGroup
argument_list|)
condition|)
block|{
return|return
name|getFullyQualifiedName
argument_list|(
name|userOrGroup
argument_list|)
return|;
block|}
return|return
name|userOrGroup
return|;
block|}
comment|/**    * Perform Identity transformation when calling setAcl(),removeAclEntries() and modifyAclEntries()    * If the AclEntry type is a user or group, and its name is one of the following:    * 1.short name; 2.$superuser; 3.Fully qualified name; 4. principal id.    * Short name could be transformed to:    *    - A service principal id or $superuser, if short name belongs a daemon service    *      stated in substitution list AND "fs.azure.identity.transformer.service.principal.id"    *      is set with $superuser or a principal id.    *    - A fully qualified name, if the AclEntry type is User AND if "fs.azure.identity.transformer.domain.name"    *    is set in configuration. This is to make the behavior consistent with HDI.    *    * $superuser, fully qualified name and principal id should not be transformed.    *    * @param aclEntries list of AclEntry    * @return list of AclEntry after the identity transformation.    * */
DECL|method|transformAclEntriesForSetRequest (final List<AclEntry> aclEntries)
specifier|public
name|List
argument_list|<
name|AclEntry
argument_list|>
name|transformAclEntriesForSetRequest
parameter_list|(
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
parameter_list|)
block|{
if|if
condition|(
name|skipUserIdentityReplacement
condition|)
block|{
return|return
name|aclEntries
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aclEntries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|AclEntry
name|aclEntry
init|=
name|aclEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|aclEntry
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|transformedName
init|=
name|name
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
operator|||
name|aclEntry
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|AclEntryType
operator|.
name|OTHER
argument_list|)
operator|||
name|aclEntry
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|AclEntryType
operator|.
name|MASK
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// case 1: when the user or group name to be set is stated in substitution list.
if|if
condition|(
name|isInSubstitutionList
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|transformedName
operator|=
name|servicePrincipalId
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aclEntry
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
comment|// case 2: when the owner is a short name
operator|&&
name|shouldUseFullyQualifiedUserName
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|//         of the user principal name (UPN).
comment|// Notice: for group type ACL entry, if name is shortName.
comment|//         It won't be converted to Full Name. This is
comment|//         to make the behavior consistent with HDI.
name|transformedName
operator|=
name|getFullyQualifiedName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Avoid unnecessary new AclEntry allocation
if|if
condition|(
name|transformedName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|AclEntry
operator|.
name|Builder
name|aclEntryBuilder
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|aclEntryBuilder
operator|.
name|setType
argument_list|(
name|aclEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setName
argument_list|(
name|transformedName
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setScope
argument_list|(
name|aclEntry
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setPermission
argument_list|(
name|aclEntry
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
comment|// Replace the original AclEntry
name|aclEntries
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|aclEntryBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|aclEntries
return|;
block|}
comment|/**    * Internal method to identify if owner name returned by the ADLS backend is short name or not.    * If name contains "@", this code assumes that whatever comes after '@' is domain name and ignores it.    * @param owner    * @return    */
DECL|method|isShortUserName (String owner)
specifier|private
name|boolean
name|isShortUserName
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
return|return
operator|(
name|owner
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|owner
operator|.
name|contains
argument_list|(
name|AT
argument_list|)
return|;
block|}
DECL|method|shouldUseShortUserName (String owner)
specifier|private
name|boolean
name|shouldUseShortUserName
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
return|return
name|enableShortName
operator|&&
operator|!
name|isShortUserName
argument_list|(
name|owner
argument_list|)
return|;
block|}
DECL|method|getShortName (String userName)
specifier|private
name|String
name|getShortName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|isShortUserName
argument_list|(
name|userName
argument_list|)
condition|)
block|{
return|return
name|userName
return|;
block|}
name|String
name|userNameBeforeAt
init|=
name|userName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|userName
operator|.
name|indexOf
argument_list|(
name|AT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSecure
condition|)
block|{
comment|//In secure clusters we apply auth to local rules to lowercase all short localUser names (notice /L at the end),
comment|//E.G. : RULE:[1:$1@$0](.*@FOO.ONMICROSOFT.COM)s/@.*/// Ideally we should use the HadoopKerberosName class to get
comment|// new HadoopKerberosName(arg).getShortName. However,
comment|//1. ADLS can report the Realm in lower case while returning file owner names( ie. : Some.User@realm.onmicrosoft.com)
comment|//2. The RULE specification does not allow specifying character classes to do case insensitive matches
comment|//Due to this, we end up using a forced lowercase version of the manually shortened name
return|return
name|userNameBeforeAt
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
return|;
block|}
return|return
name|userNameBeforeAt
return|;
block|}
DECL|method|getFullyQualifiedName (String name)
specifier|private
name|String
name|getFullyQualifiedName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|domainIsSet
operator|&&
operator|(
name|name
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|name
operator|.
name|contains
argument_list|(
name|AT
argument_list|)
condition|)
block|{
return|return
name|name
operator|+
name|AT
operator|+
name|domainName
return|;
block|}
return|return
name|name
return|;
block|}
DECL|method|shouldUseFullyQualifiedUserName (String owner)
specifier|private
name|boolean
name|shouldUseFullyQualifiedUserName
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
return|return
name|domainIsSet
operator|&&
operator|!
name|SUPER_USER
operator|.
name|equals
argument_list|(
name|owner
argument_list|)
operator|&&
operator|!
name|isUuid
argument_list|(
name|owner
argument_list|)
operator|&&
name|enableShortName
operator|&&
name|isShortUserName
argument_list|(
name|owner
argument_list|)
return|;
block|}
DECL|method|isInSubstitutionList (String localUserName)
specifier|private
name|boolean
name|isInSubstitutionList
parameter_list|(
name|String
name|localUserName
parameter_list|)
block|{
return|return
name|serviceWhiteList
operator|.
name|contains
argument_list|(
name|STAR
argument_list|)
operator|||
name|serviceWhiteList
operator|.
name|contains
argument_list|(
name|localUserName
argument_list|)
return|;
block|}
DECL|method|isUuid (String input)
specifier|private
name|boolean
name|isUuid
parameter_list|(
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|input
operator|.
name|matches
argument_list|(
name|UUID_PATTERN
argument_list|)
return|;
block|}
block|}
end_class

end_unit

