begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|annotations
operator|.
name|ConfigurationValidationAnnotations
operator|.
name|IntegerConfigurationValidatorAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|annotations
operator|.
name|ConfigurationValidationAnnotations
operator|.
name|LongConfigurationValidatorAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|annotations
operator|.
name|ConfigurationValidationAnnotations
operator|.
name|StringConfigurationValidatorAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|annotations
operator|.
name|ConfigurationValidationAnnotations
operator|.
name|Base64StringConfigurationValidatorAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|annotations
operator|.
name|ConfigurationValidationAnnotations
operator|.
name|BooleanConfigurationValidatorAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|AzureBlobFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|ConfigurationPropertyNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|InvalidConfigurationValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|KeyProviderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|TokenAccessProviderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|diagnostics
operator|.
name|Base64StringConfigurationBasicValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|diagnostics
operator|.
name|BooleanConfigurationBasicValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|diagnostics
operator|.
name|IntegerConfigurationBasicValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|diagnostics
operator|.
name|LongConfigurationBasicValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|diagnostics
operator|.
name|StringConfigurationBasicValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|AbfsAuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|AbfsAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|CustomTokenProviderAdaptee
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
operator|.
name|AccessTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
operator|.
name|ClientCredsTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
operator|.
name|CustomTokenProviderAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
operator|.
name|MsiTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
operator|.
name|RefreshTokenBasedTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
operator|.
name|UserPasswordTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|security
operator|.
name|AbfsDelegationTokenManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AuthType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|SimpleKeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|DelegatingSSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|FileSystemConfigurations
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Configuration for Azure Blob FileSystem.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|AbfsConfiguration
specifier|public
class|class
name|AbfsConfiguration
block|{
DECL|field|rawConfig
specifier|private
specifier|final
name|Configuration
name|rawConfig
decl_stmt|;
DECL|field|accountName
specifier|private
specifier|final
name|String
name|accountName
decl_stmt|;
DECL|field|isSecure
specifier|private
specifier|final
name|boolean
name|isSecure
decl_stmt|;
annotation|@
name|IntegerConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_WRITE_BUFFER_SIZE
argument_list|,
name|MinValue
operator|=
name|MIN_BUFFER_SIZE
argument_list|,
name|MaxValue
operator|=
name|MAX_BUFFER_SIZE
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_WRITE_BUFFER_SIZE
argument_list|)
DECL|field|writeBufferSize
specifier|private
name|int
name|writeBufferSize
decl_stmt|;
annotation|@
name|IntegerConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_READ_BUFFER_SIZE
argument_list|,
name|MinValue
operator|=
name|MIN_BUFFER_SIZE
argument_list|,
name|MaxValue
operator|=
name|MAX_BUFFER_SIZE
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_READ_BUFFER_SIZE
argument_list|)
DECL|field|readBufferSize
specifier|private
name|int
name|readBufferSize
decl_stmt|;
annotation|@
name|IntegerConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_MIN_BACKOFF_INTERVAL
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_MIN_BACKOFF_INTERVAL
argument_list|)
DECL|field|minBackoffInterval
specifier|private
name|int
name|minBackoffInterval
decl_stmt|;
annotation|@
name|IntegerConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_MAX_BACKOFF_INTERVAL
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_MAX_BACKOFF_INTERVAL
argument_list|)
DECL|field|maxBackoffInterval
specifier|private
name|int
name|maxBackoffInterval
decl_stmt|;
annotation|@
name|IntegerConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_BACKOFF_INTERVAL
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_BACKOFF_INTERVAL
argument_list|)
DECL|field|backoffInterval
specifier|private
name|int
name|backoffInterval
decl_stmt|;
annotation|@
name|IntegerConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_MAX_IO_RETRIES
argument_list|,
name|MinValue
operator|=
literal|0
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_MAX_RETRY_ATTEMPTS
argument_list|)
DECL|field|maxIoRetries
specifier|private
name|int
name|maxIoRetries
decl_stmt|;
annotation|@
name|LongConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_BLOCK_SIZE_PROPERTY_NAME
argument_list|,
name|MinValue
operator|=
literal|0
argument_list|,
name|MaxValue
operator|=
name|MAX_AZURE_BLOCK_SIZE
argument_list|,
name|DefaultValue
operator|=
name|MAX_AZURE_BLOCK_SIZE
argument_list|)
DECL|field|azureBlockSize
specifier|private
name|long
name|azureBlockSize
decl_stmt|;
annotation|@
name|StringConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_BLOCK_LOCATION_HOST_PROPERTY_NAME
argument_list|,
name|DefaultValue
operator|=
name|AZURE_BLOCK_LOCATION_HOST_DEFAULT
argument_list|)
DECL|field|azureBlockLocationHost
specifier|private
name|String
name|azureBlockLocationHost
decl_stmt|;
annotation|@
name|IntegerConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_CONCURRENT_CONNECTION_VALUE_OUT
argument_list|,
name|MinValue
operator|=
literal|1
argument_list|,
name|DefaultValue
operator|=
name|MAX_CONCURRENT_WRITE_THREADS
argument_list|)
DECL|field|maxConcurrentWriteThreads
specifier|private
name|int
name|maxConcurrentWriteThreads
decl_stmt|;
annotation|@
name|IntegerConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_CONCURRENT_CONNECTION_VALUE_IN
argument_list|,
name|MinValue
operator|=
literal|1
argument_list|,
name|DefaultValue
operator|=
name|MAX_CONCURRENT_READ_THREADS
argument_list|)
DECL|field|maxConcurrentReadThreads
specifier|private
name|int
name|maxConcurrentReadThreads
decl_stmt|;
annotation|@
name|BooleanConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_TOLERATE_CONCURRENT_APPEND
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_READ_TOLERATE_CONCURRENT_APPEND
argument_list|)
DECL|field|tolerateOobAppends
specifier|private
name|boolean
name|tolerateOobAppends
decl_stmt|;
annotation|@
name|StringConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|FS_AZURE_ATOMIC_RENAME_KEY
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_FS_AZURE_ATOMIC_RENAME_DIRECTORIES
argument_list|)
DECL|field|azureAtomicDirs
specifier|private
name|String
name|azureAtomicDirs
decl_stmt|;
annotation|@
name|BooleanConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_CREATE_REMOTE_FILESYSTEM_DURING_INITIALIZATION
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_AZURE_CREATE_REMOTE_FILESYSTEM_DURING_INITIALIZATION
argument_list|)
DECL|field|createRemoteFileSystemDuringInitialization
specifier|private
name|boolean
name|createRemoteFileSystemDuringInitialization
decl_stmt|;
annotation|@
name|BooleanConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|AZURE_SKIP_USER_GROUP_METADATA_DURING_INITIALIZATION
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_AZURE_SKIP_USER_GROUP_METADATA_DURING_INITIALIZATION
argument_list|)
DECL|field|skipUserGroupMetadataDuringInitialization
specifier|private
name|boolean
name|skipUserGroupMetadataDuringInitialization
decl_stmt|;
annotation|@
name|IntegerConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|FS_AZURE_READ_AHEAD_QUEUE_DEPTH
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_READ_AHEAD_QUEUE_DEPTH
argument_list|)
DECL|field|readAheadQueueDepth
specifier|private
name|int
name|readAheadQueueDepth
decl_stmt|;
annotation|@
name|BooleanConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|FS_AZURE_ENABLE_FLUSH
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_ENABLE_FLUSH
argument_list|)
DECL|field|enableFlush
specifier|private
name|boolean
name|enableFlush
decl_stmt|;
annotation|@
name|BooleanConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|FS_AZURE_ENABLE_AUTOTHROTTLING
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_ENABLE_AUTOTHROTTLING
argument_list|)
DECL|field|enableAutoThrottling
specifier|private
name|boolean
name|enableAutoThrottling
decl_stmt|;
annotation|@
name|StringConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|FS_AZURE_USER_AGENT_PREFIX_KEY
argument_list|,
name|DefaultValue
operator|=
literal|""
argument_list|)
DECL|field|userAgentId
specifier|private
name|String
name|userAgentId
decl_stmt|;
annotation|@
name|BooleanConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|FS_AZURE_ENABLE_DELEGATION_TOKEN
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_ENABLE_DELEGATION_TOKEN
argument_list|)
DECL|field|enableDelegationToken
specifier|private
name|boolean
name|enableDelegationToken
decl_stmt|;
annotation|@
name|StringConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|ABFS_EXTERNAL_AUTHORIZATION_CLASS
argument_list|,
name|DefaultValue
operator|=
literal|""
argument_list|)
DECL|field|abfsExternalAuthorizationClass
specifier|private
name|String
name|abfsExternalAuthorizationClass
decl_stmt|;
annotation|@
name|BooleanConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|FS_AZURE_ALWAYS_USE_HTTPS
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_ENABLE_HTTPS
argument_list|)
DECL|field|alwaysUseHttps
specifier|private
name|boolean
name|alwaysUseHttps
decl_stmt|;
annotation|@
name|BooleanConfigurationValidatorAnnotation
argument_list|(
name|ConfigurationKey
operator|=
name|FS_AZURE_USE_UPN
argument_list|,
name|DefaultValue
operator|=
name|DEFAULT_USE_UPN
argument_list|)
DECL|field|useUpn
specifier|private
name|boolean
name|useUpn
decl_stmt|;
DECL|field|storageAccountKeys
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|storageAccountKeys
decl_stmt|;
DECL|method|AbfsConfiguration (final Configuration rawConfig, String accountName)
specifier|public
name|AbfsConfiguration
parameter_list|(
specifier|final
name|Configuration
name|rawConfig
parameter_list|,
name|String
name|accountName
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvalidConfigurationValueException
throws|,
name|IOException
block|{
name|this
operator|.
name|rawConfig
operator|=
name|ProviderUtils
operator|.
name|excludeIncompatibleCredentialProviders
argument_list|(
name|rawConfig
argument_list|,
name|AzureBlobFileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|accountName
operator|=
name|accountName
expr_stmt|;
name|this
operator|.
name|isSecure
operator|=
name|getBoolean
argument_list|(
name|FS_AZURE_SECURE_MODE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateStorageAccountKeys
argument_list|()
expr_stmt|;
name|Field
index|[]
name|fields
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|IntegerConfigurationValidatorAnnotation
operator|.
name|class
argument_list|)
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|validateInt
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|LongConfigurationValidatorAnnotation
operator|.
name|class
argument_list|)
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|validateLong
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|StringConfigurationValidatorAnnotation
operator|.
name|class
argument_list|)
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|validateString
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|Base64StringConfigurationValidatorAnnotation
operator|.
name|class
argument_list|)
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|validateBase64String
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|BooleanConfigurationValidatorAnnotation
operator|.
name|class
argument_list|)
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|validateBoolean
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Appends an account name to a configuration key yielding the    * account-specific form.    * @param key Account-agnostic configuration key    * @return Account-specific configuration key    */
DECL|method|accountConf (String key)
specifier|public
name|String
name|accountConf
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|key
operator|+
literal|"."
operator|+
name|accountName
return|;
block|}
comment|/**    * Returns the account-specific value if it exists, then looks for an    * account-agnostic value.    * @param key Account-agnostic configuration key    * @return value if one exists, else null    */
DECL|method|get (String key)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|rawConfig
operator|.
name|get
argument_list|(
name|accountConf
argument_list|(
name|key
argument_list|)
argument_list|,
name|rawConfig
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the account-specific value if it exists, then looks for an    * account-agnostic value.    * @param key Account-agnostic configuration key    * @return value if one exists, else the default value    */
DECL|method|getString (String key, String defaultValue)
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|rawConfig
operator|.
name|get
argument_list|(
name|accountConf
argument_list|(
name|key
argument_list|)
argument_list|,
name|rawConfig
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the account-specific value if it exists, then looks for an    * account-agnostic value, and finally tries the default value.    * @param key Account-agnostic configuration key    * @param defaultValue Value returned if none is configured    * @return value if one exists, else the default value    */
DECL|method|getBoolean (String key, boolean defaultValue)
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|rawConfig
operator|.
name|getBoolean
argument_list|(
name|accountConf
argument_list|(
name|key
argument_list|)
argument_list|,
name|rawConfig
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the account-specific value if it exists, then looks for an    * account-agnostic value, and finally tries the default value.    * @param key Account-agnostic configuration key    * @param defaultValue Value returned if none is configured    * @return value if one exists, else the default value    */
DECL|method|getLong (String key, long defaultValue)
specifier|public
name|long
name|getLong
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
return|return
name|rawConfig
operator|.
name|getLong
argument_list|(
name|accountConf
argument_list|(
name|key
argument_list|)
argument_list|,
name|rawConfig
operator|.
name|getLong
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the account-specific password in string form if it exists, then    * looks for an account-agnostic value.    * @param key Account-agnostic configuration key    * @return value in String form if one exists, else null    * @throws IOException    */
DECL|method|getPasswordString (String key)
specifier|public
name|String
name|getPasswordString
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|passchars
init|=
name|rawConfig
operator|.
name|getPassword
argument_list|(
name|accountConf
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|passchars
operator|==
literal|null
condition|)
block|{
name|passchars
operator|=
name|rawConfig
operator|.
name|getPassword
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|passchars
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|passchars
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns the account-specific Class if it exists, then looks for an    * account-agnostic value, and finally tries the default value.    * @param name Account-agnostic configuration key    * @param defaultValue Class returned if none is configured    * @param xface Interface shared by all possible values    * @return Highest-precedence Class object that was found    */
DECL|method|getClass (String name, Class<? extends U> defaultValue, Class<U> xface)
specifier|public
parameter_list|<
name|U
parameter_list|>
name|Class
argument_list|<
name|?
extends|extends
name|U
argument_list|>
name|getClass
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|U
argument_list|>
name|defaultValue
parameter_list|,
name|Class
argument_list|<
name|U
argument_list|>
name|xface
parameter_list|)
block|{
return|return
name|rawConfig
operator|.
name|getClass
argument_list|(
name|accountConf
argument_list|(
name|name
argument_list|)
argument_list|,
name|rawConfig
operator|.
name|getClass
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|,
name|xface
argument_list|)
argument_list|,
name|xface
argument_list|)
return|;
block|}
comment|/**    * Returns the account-specific password in string form if it exists, then    * looks for an account-agnostic value.    * @param name Account-agnostic configuration key    * @param defaultValue Value returned if none is configured    * @return value in String form if one exists, else null    */
DECL|method|getEnum (String name, T defaultValue)
specifier|public
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|getEnum
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
return|return
name|rawConfig
operator|.
name|getEnum
argument_list|(
name|accountConf
argument_list|(
name|name
argument_list|)
argument_list|,
name|rawConfig
operator|.
name|getEnum
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Unsets parameter in the underlying Configuration object.    * Provided only as a convenience; does not add any account logic.    * @param key Configuration key    */
DECL|method|unset (String key)
specifier|public
name|void
name|unset
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|rawConfig
operator|.
name|unset
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets String in the underlying Configuration object.    * Provided only as a convenience; does not add any account logic.    * @param key Configuration key    * @param value Configuration value    */
DECL|method|set (String key, String value)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|rawConfig
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets boolean in the underlying Configuration object.    * Provided only as a convenience; does not add any account logic.    * @param key Configuration key    * @param value Configuration value    */
DECL|method|setBoolean (String key, boolean value)
specifier|public
name|void
name|setBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|rawConfig
operator|.
name|setBoolean
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|isSecureMode ()
specifier|public
name|boolean
name|isSecureMode
parameter_list|()
block|{
return|return
name|isSecure
return|;
block|}
DECL|method|getStorageAccountKey ()
specifier|public
name|String
name|getStorageAccountKey
parameter_list|()
throws|throws
name|AzureBlobFileSystemException
block|{
name|String
name|key
decl_stmt|;
name|String
name|keyProviderClass
init|=
name|get
argument_list|(
name|AZURE_KEY_ACCOUNT_KEYPROVIDER
argument_list|)
decl_stmt|;
name|KeyProvider
name|keyProvider
decl_stmt|;
if|if
condition|(
name|keyProviderClass
operator|==
literal|null
condition|)
block|{
comment|// No key provider was provided so use the provided key as is.
name|keyProvider
operator|=
operator|new
name|SimpleKeyProvider
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// create an instance of the key provider class and verify it
comment|// implements KeyProvider
name|Object
name|keyProviderObject
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|rawConfig
operator|.
name|getClassByName
argument_list|(
name|keyProviderClass
argument_list|)
decl_stmt|;
name|keyProviderObject
operator|=
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|KeyProviderException
argument_list|(
literal|"Unable to load key provider class."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|keyProviderObject
operator|instanceof
name|KeyProvider
operator|)
condition|)
block|{
throw|throw
operator|new
name|KeyProviderException
argument_list|(
name|keyProviderClass
operator|+
literal|" specified in config is not a valid KeyProvider class."
argument_list|)
throw|;
block|}
name|keyProvider
operator|=
operator|(
name|KeyProvider
operator|)
name|keyProviderObject
expr_stmt|;
block|}
name|key
operator|=
name|keyProvider
operator|.
name|getStorageAccountKey
argument_list|(
name|accountName
argument_list|,
name|rawConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationPropertyNotFoundException
argument_list|(
name|accountName
argument_list|)
throw|;
block|}
return|return
name|key
return|;
block|}
DECL|method|getRawConfiguration ()
specifier|public
name|Configuration
name|getRawConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|rawConfig
return|;
block|}
DECL|method|getWriteBufferSize ()
specifier|public
name|int
name|getWriteBufferSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|writeBufferSize
return|;
block|}
DECL|method|getReadBufferSize ()
specifier|public
name|int
name|getReadBufferSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|readBufferSize
return|;
block|}
DECL|method|getMinBackoffIntervalMilliseconds ()
specifier|public
name|int
name|getMinBackoffIntervalMilliseconds
parameter_list|()
block|{
return|return
name|this
operator|.
name|minBackoffInterval
return|;
block|}
DECL|method|getMaxBackoffIntervalMilliseconds ()
specifier|public
name|int
name|getMaxBackoffIntervalMilliseconds
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxBackoffInterval
return|;
block|}
DECL|method|getBackoffIntervalMilliseconds ()
specifier|public
name|int
name|getBackoffIntervalMilliseconds
parameter_list|()
block|{
return|return
name|this
operator|.
name|backoffInterval
return|;
block|}
DECL|method|getMaxIoRetries ()
specifier|public
name|int
name|getMaxIoRetries
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxIoRetries
return|;
block|}
DECL|method|getAzureBlockSize ()
specifier|public
name|long
name|getAzureBlockSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|azureBlockSize
return|;
block|}
DECL|method|getAzureBlockLocationHost ()
specifier|public
name|String
name|getAzureBlockLocationHost
parameter_list|()
block|{
return|return
name|this
operator|.
name|azureBlockLocationHost
return|;
block|}
DECL|method|getMaxConcurrentWriteThreads ()
specifier|public
name|int
name|getMaxConcurrentWriteThreads
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxConcurrentWriteThreads
return|;
block|}
DECL|method|getMaxConcurrentReadThreads ()
specifier|public
name|int
name|getMaxConcurrentReadThreads
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxConcurrentReadThreads
return|;
block|}
DECL|method|getTolerateOobAppends ()
specifier|public
name|boolean
name|getTolerateOobAppends
parameter_list|()
block|{
return|return
name|this
operator|.
name|tolerateOobAppends
return|;
block|}
DECL|method|getAzureAtomicRenameDirs ()
specifier|public
name|String
name|getAzureAtomicRenameDirs
parameter_list|()
block|{
return|return
name|this
operator|.
name|azureAtomicDirs
return|;
block|}
DECL|method|getCreateRemoteFileSystemDuringInitialization ()
specifier|public
name|boolean
name|getCreateRemoteFileSystemDuringInitialization
parameter_list|()
block|{
return|return
name|this
operator|.
name|createRemoteFileSystemDuringInitialization
return|;
block|}
DECL|method|getSkipUserGroupMetadataDuringInitialization ()
specifier|public
name|boolean
name|getSkipUserGroupMetadataDuringInitialization
parameter_list|()
block|{
return|return
name|this
operator|.
name|skipUserGroupMetadataDuringInitialization
return|;
block|}
DECL|method|getReadAheadQueueDepth ()
specifier|public
name|int
name|getReadAheadQueueDepth
parameter_list|()
block|{
return|return
name|this
operator|.
name|readAheadQueueDepth
return|;
block|}
DECL|method|isFlushEnabled ()
specifier|public
name|boolean
name|isFlushEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|enableFlush
return|;
block|}
DECL|method|isAutoThrottlingEnabled ()
specifier|public
name|boolean
name|isAutoThrottlingEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|enableAutoThrottling
return|;
block|}
DECL|method|getCustomUserAgentPrefix ()
specifier|public
name|String
name|getCustomUserAgentPrefix
parameter_list|()
block|{
return|return
name|this
operator|.
name|userAgentId
return|;
block|}
DECL|method|getPreferredSSLFactoryOption ()
specifier|public
name|DelegatingSSLSocketFactory
operator|.
name|SSLChannelMode
name|getPreferredSSLFactoryOption
parameter_list|()
block|{
return|return
name|getEnum
argument_list|(
name|FS_AZURE_SSL_CHANNEL_MODE_KEY
argument_list|,
name|DEFAULT_FS_AZURE_SSL_CHANNEL_MODE
argument_list|)
return|;
block|}
DECL|method|getAuthType (String accountName)
specifier|public
name|AuthType
name|getAuthType
parameter_list|(
name|String
name|accountName
parameter_list|)
block|{
return|return
name|getEnum
argument_list|(
name|FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME
argument_list|,
name|AuthType
operator|.
name|SharedKey
argument_list|)
return|;
block|}
DECL|method|isDelegationTokenManagerEnabled ()
specifier|public
name|boolean
name|isDelegationTokenManagerEnabled
parameter_list|()
block|{
return|return
name|enableDelegationToken
return|;
block|}
DECL|method|getDelegationTokenManager ()
specifier|public
name|AbfsDelegationTokenManager
name|getDelegationTokenManager
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|AbfsDelegationTokenManager
argument_list|(
name|getRawConfiguration
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isHttpsAlwaysUsed ()
specifier|public
name|boolean
name|isHttpsAlwaysUsed
parameter_list|()
block|{
return|return
name|this
operator|.
name|alwaysUseHttps
return|;
block|}
DECL|method|isUpnUsed ()
specifier|public
name|boolean
name|isUpnUsed
parameter_list|()
block|{
return|return
name|this
operator|.
name|useUpn
return|;
block|}
DECL|method|getTokenProvider ()
specifier|public
name|AccessTokenProvider
name|getTokenProvider
parameter_list|()
throws|throws
name|TokenAccessProviderException
block|{
name|AuthType
name|authType
init|=
name|getEnum
argument_list|(
name|FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME
argument_list|,
name|AuthType
operator|.
name|SharedKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|authType
operator|==
name|AuthType
operator|.
name|OAuth
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|AccessTokenProvider
argument_list|>
name|tokenProviderClass
init|=
name|getClass
argument_list|(
name|FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME
argument_list|,
literal|null
argument_list|,
name|AccessTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|AccessTokenProvider
name|tokenProvider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tokenProviderClass
operator|==
name|ClientCredsTokenProvider
operator|.
name|class
condition|)
block|{
name|String
name|authEndpoint
init|=
name|getPasswordString
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT
argument_list|)
decl_stmt|;
name|String
name|clientId
init|=
name|getPasswordString
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID
argument_list|)
decl_stmt|;
name|String
name|clientSecret
init|=
name|getPasswordString
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET
argument_list|)
decl_stmt|;
name|tokenProvider
operator|=
operator|new
name|ClientCredsTokenProvider
argument_list|(
name|authEndpoint
argument_list|,
name|clientId
argument_list|,
name|clientSecret
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenProviderClass
operator|==
name|UserPasswordTokenProvider
operator|.
name|class
condition|)
block|{
name|String
name|authEndpoint
init|=
name|getPasswordString
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_ENDPOINT
argument_list|)
decl_stmt|;
name|String
name|username
init|=
name|getPasswordString
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_USER_NAME
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|getPasswordString
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_USER_PASSWORD
argument_list|)
decl_stmt|;
name|tokenProvider
operator|=
operator|new
name|UserPasswordTokenProvider
argument_list|(
name|authEndpoint
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenProviderClass
operator|==
name|MsiTokenProvider
operator|.
name|class
condition|)
block|{
name|String
name|tenantGuid
init|=
name|getPasswordString
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_MSI_TENANT
argument_list|)
decl_stmt|;
name|String
name|clientId
init|=
name|getPasswordString
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID
argument_list|)
decl_stmt|;
name|tokenProvider
operator|=
operator|new
name|MsiTokenProvider
argument_list|(
name|tenantGuid
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenProviderClass
operator|==
name|RefreshTokenBasedTokenProvider
operator|.
name|class
condition|)
block|{
name|String
name|refreshToken
init|=
name|getPasswordString
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_REFRESH_TOKEN
argument_list|)
decl_stmt|;
name|String
name|clientId
init|=
name|getPasswordString
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID
argument_list|)
decl_stmt|;
name|tokenProvider
operator|=
operator|new
name|RefreshTokenBasedTokenProvider
argument_list|(
name|clientId
argument_list|,
name|refreshToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to initialize "
operator|+
name|tokenProviderClass
argument_list|)
throw|;
block|}
return|return
name|tokenProvider
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TokenAccessProviderException
argument_list|(
literal|"Unable to load key provider class."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|authType
operator|==
name|AuthType
operator|.
name|Custom
condition|)
block|{
try|try
block|{
name|String
name|configKey
init|=
name|FS_AZURE_ACCOUNT_TOKEN_PROVIDER_TYPE_PROPERTY_NAME
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|CustomTokenProviderAdaptee
argument_list|>
name|customTokenProviderClass
init|=
name|getClass
argument_list|(
name|configKey
argument_list|,
literal|null
argument_list|,
name|CustomTokenProviderAdaptee
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|customTokenProviderClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The configuration value for \"%s\" is invalid."
argument_list|,
name|configKey
argument_list|)
argument_list|)
throw|;
block|}
name|CustomTokenProviderAdaptee
name|azureTokenProvider
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|customTokenProviderClass
argument_list|,
name|rawConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|azureTokenProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to initialize "
operator|+
name|customTokenProviderClass
argument_list|)
throw|;
block|}
name|azureTokenProvider
operator|.
name|initialize
argument_list|(
name|rawConfig
argument_list|,
name|accountName
argument_list|)
expr_stmt|;
return|return
operator|new
name|CustomTokenProviderAdapter
argument_list|(
name|azureTokenProvider
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TokenAccessProviderException
argument_list|(
literal|"Unable to load custom token provider class: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|TokenAccessProviderException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid auth type: %s is being used, expecting OAuth"
argument_list|,
name|authType
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|getAbfsExternalAuthorizationClass ()
specifier|public
name|String
name|getAbfsExternalAuthorizationClass
parameter_list|()
block|{
return|return
name|this
operator|.
name|abfsExternalAuthorizationClass
return|;
block|}
DECL|method|getAbfsAuthorizer ()
specifier|public
name|AbfsAuthorizer
name|getAbfsAuthorizer
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|authClassName
init|=
name|getAbfsExternalAuthorizationClass
argument_list|()
decl_stmt|;
name|AbfsAuthorizer
name|authorizer
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|authClassName
operator|!=
literal|null
operator|&&
operator|!
name|authClassName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|AbfsAuthorizer
argument_list|>
name|authClass
init|=
operator|(
name|Class
argument_list|<
name|AbfsAuthorizer
argument_list|>
operator|)
name|rawConfig
operator|.
name|getClassByName
argument_list|(
name|authClassName
argument_list|)
decl_stmt|;
name|authorizer
operator|=
name|authClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|Configuration
operator|.
name|class
block|}
argument_list|)
operator|.
name|newInstance
argument_list|(
name|rawConfig
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InstantiationException
decl||
name|ClassNotFoundException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
decl||
name|NoSuchMethodException
decl||
name|SecurityException
decl||
name|AbfsAuthorizationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|authorizer
return|;
block|}
DECL|method|validateStorageAccountKeys ()
name|void
name|validateStorageAccountKeys
parameter_list|()
throws|throws
name|InvalidConfigurationValueException
block|{
name|Base64StringConfigurationBasicValidator
name|validator
init|=
operator|new
name|Base64StringConfigurationBasicValidator
argument_list|(
name|FS_AZURE_ACCOUNT_KEY_PROPERTY_NAME
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|this
operator|.
name|storageAccountKeys
operator|=
name|rawConfig
operator|.
name|getValByRegex
argument_list|(
name|FS_AZURE_ACCOUNT_KEY_PROPERTY_NAME_REGX
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|account
range|:
name|storageAccountKeys
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|validator
operator|.
name|validate
argument_list|(
name|account
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateInt (Field field)
name|int
name|validateInt
parameter_list|(
name|Field
name|field
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvalidConfigurationValueException
block|{
name|IntegerConfigurationValidatorAnnotation
name|validator
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|IntegerConfigurationValidatorAnnotation
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|get
argument_list|(
name|validator
operator|.
name|ConfigurationKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// validate
return|return
operator|new
name|IntegerConfigurationBasicValidator
argument_list|(
name|validator
operator|.
name|MinValue
argument_list|()
argument_list|,
name|validator
operator|.
name|MaxValue
argument_list|()
argument_list|,
name|validator
operator|.
name|DefaultValue
argument_list|()
argument_list|,
name|validator
operator|.
name|ConfigurationKey
argument_list|()
argument_list|,
name|validator
operator|.
name|ThrowIfInvalid
argument_list|()
argument_list|)
operator|.
name|validate
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|validateLong (Field field)
name|long
name|validateLong
parameter_list|(
name|Field
name|field
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvalidConfigurationValueException
block|{
name|LongConfigurationValidatorAnnotation
name|validator
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|LongConfigurationValidatorAnnotation
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|rawConfig
operator|.
name|get
argument_list|(
name|validator
operator|.
name|ConfigurationKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// validate
return|return
operator|new
name|LongConfigurationBasicValidator
argument_list|(
name|validator
operator|.
name|MinValue
argument_list|()
argument_list|,
name|validator
operator|.
name|MaxValue
argument_list|()
argument_list|,
name|validator
operator|.
name|DefaultValue
argument_list|()
argument_list|,
name|validator
operator|.
name|ConfigurationKey
argument_list|()
argument_list|,
name|validator
operator|.
name|ThrowIfInvalid
argument_list|()
argument_list|)
operator|.
name|validate
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|validateString (Field field)
name|String
name|validateString
parameter_list|(
name|Field
name|field
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvalidConfigurationValueException
block|{
name|StringConfigurationValidatorAnnotation
name|validator
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|StringConfigurationValidatorAnnotation
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|rawConfig
operator|.
name|get
argument_list|(
name|validator
operator|.
name|ConfigurationKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// validate
return|return
operator|new
name|StringConfigurationBasicValidator
argument_list|(
name|validator
operator|.
name|ConfigurationKey
argument_list|()
argument_list|,
name|validator
operator|.
name|DefaultValue
argument_list|()
argument_list|,
name|validator
operator|.
name|ThrowIfInvalid
argument_list|()
argument_list|)
operator|.
name|validate
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|validateBase64String (Field field)
name|String
name|validateBase64String
parameter_list|(
name|Field
name|field
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvalidConfigurationValueException
block|{
name|Base64StringConfigurationValidatorAnnotation
name|validator
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
operator|(
name|Base64StringConfigurationValidatorAnnotation
operator|.
name|class
operator|)
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|rawConfig
operator|.
name|get
argument_list|(
name|validator
operator|.
name|ConfigurationKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// validate
return|return
operator|new
name|Base64StringConfigurationBasicValidator
argument_list|(
name|validator
operator|.
name|ConfigurationKey
argument_list|()
argument_list|,
name|validator
operator|.
name|DefaultValue
argument_list|()
argument_list|,
name|validator
operator|.
name|ThrowIfInvalid
argument_list|()
argument_list|)
operator|.
name|validate
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|validateBoolean (Field field)
name|boolean
name|validateBoolean
parameter_list|(
name|Field
name|field
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvalidConfigurationValueException
block|{
name|BooleanConfigurationValidatorAnnotation
name|validator
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|BooleanConfigurationValidatorAnnotation
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|rawConfig
operator|.
name|get
argument_list|(
name|validator
operator|.
name|ConfigurationKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// validate
return|return
operator|new
name|BooleanConfigurationBasicValidator
argument_list|(
name|validator
operator|.
name|ConfigurationKey
argument_list|()
argument_list|,
name|validator
operator|.
name|DefaultValue
argument_list|()
argument_list|,
name|validator
operator|.
name|ThrowIfInvalid
argument_list|()
argument_list|)
operator|.
name|validate
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setReadBufferSize (int bufferSize)
name|void
name|setReadBufferSize
parameter_list|(
name|int
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|readBufferSize
operator|=
name|bufferSize
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setWriteBufferSize (int bufferSize)
name|void
name|setWriteBufferSize
parameter_list|(
name|int
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|writeBufferSize
operator|=
name|bufferSize
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setEnableFlush (boolean enableFlush)
name|void
name|setEnableFlush
parameter_list|(
name|boolean
name|enableFlush
parameter_list|)
block|{
name|this
operator|.
name|enableFlush
operator|=
name|enableFlush
expr_stmt|;
block|}
block|}
end_class

end_unit

