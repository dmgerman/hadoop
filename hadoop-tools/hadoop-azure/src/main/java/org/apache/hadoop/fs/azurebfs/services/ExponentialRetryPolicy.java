begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_class
DECL|class|ExponentialRetryPolicy
class|class
name|ExponentialRetryPolicy
block|{
comment|/**    * Represents the default number of retry attempts.    */
DECL|field|DEFAULT_CLIENT_RETRY_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CLIENT_RETRY_COUNT
init|=
literal|30
decl_stmt|;
comment|/**    * Represents the default amount of time used when calculating a random delta in the exponential    * delay between retries.    */
DECL|field|DEFAULT_CLIENT_BACKOFF
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CLIENT_BACKOFF
init|=
literal|1000
operator|*
literal|3
decl_stmt|;
comment|/**    * Represents the default maximum amount of time used when calculating the exponential    * delay between retries.    */
DECL|field|DEFAULT_MAX_BACKOFF
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_BACKOFF
init|=
literal|1000
operator|*
literal|30
decl_stmt|;
comment|/**    *Represents the default minimum amount of time used when calculating the exponential    * delay between retries.    */
DECL|field|DEFAULT_MIN_BACKOFF
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_BACKOFF
init|=
literal|1000
operator|*
literal|3
decl_stmt|;
comment|/**    *  The minimum random ratio used for delay interval calculation.    */
DECL|field|MIN_RANDOM_RATIO
specifier|private
specifier|static
specifier|final
name|double
name|MIN_RANDOM_RATIO
init|=
literal|0.8
decl_stmt|;
comment|/**    *  The maximum random ratio used for delay interval calculation.    */
DECL|field|MAX_RANDOM_RATIO
specifier|private
specifier|static
specifier|final
name|double
name|MAX_RANDOM_RATIO
init|=
literal|1.2
decl_stmt|;
comment|/**    *  Holds the random number generator used to calculate randomized backoff intervals    */
DECL|field|randRef
specifier|private
specifier|final
name|Random
name|randRef
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * The value that will be used to calculate a random delta in the exponential delay interval    */
DECL|field|deltaBackoff
specifier|private
specifier|final
name|int
name|deltaBackoff
decl_stmt|;
comment|/**    * The maximum backoff time.    */
DECL|field|maxBackoff
specifier|private
specifier|final
name|int
name|maxBackoff
decl_stmt|;
comment|/**    * The minimum backoff time.    */
DECL|field|minBackoff
specifier|private
specifier|final
name|int
name|minBackoff
decl_stmt|;
comment|/**    * The maximum number of retry attempts.    */
DECL|field|retryCount
specifier|private
specifier|final
name|int
name|retryCount
decl_stmt|;
comment|/**    * Initializes a new instance of the {@link ExponentialRetryPolicy} class.    */
DECL|method|ExponentialRetryPolicy ()
name|ExponentialRetryPolicy
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_CLIENT_RETRY_COUNT
argument_list|,
name|DEFAULT_MIN_BACKOFF
argument_list|,
name|DEFAULT_MAX_BACKOFF
argument_list|,
name|DEFAULT_CLIENT_BACKOFF
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes a new instance of the {@link ExponentialRetryPolicy} class.    *    * @param retryCount The maximum number of retry attempts.    * @param minBackoff The minimum backoff time.    * @param maxBackoff The maximum backoff time.    * @param deltaBackoff The value that will be used to calculate a random delta in the exponential delay    *                     between retries.    */
DECL|method|ExponentialRetryPolicy (final int retryCount, final int minBackoff, final int maxBackoff, final int deltaBackoff)
name|ExponentialRetryPolicy
parameter_list|(
specifier|final
name|int
name|retryCount
parameter_list|,
specifier|final
name|int
name|minBackoff
parameter_list|,
specifier|final
name|int
name|maxBackoff
parameter_list|,
specifier|final
name|int
name|deltaBackoff
parameter_list|)
block|{
name|this
operator|.
name|retryCount
operator|=
name|retryCount
expr_stmt|;
name|this
operator|.
name|minBackoff
operator|=
name|minBackoff
expr_stmt|;
name|this
operator|.
name|maxBackoff
operator|=
name|maxBackoff
expr_stmt|;
name|this
operator|.
name|deltaBackoff
operator|=
name|deltaBackoff
expr_stmt|;
block|}
comment|/**    * Returns if a request should be retried based on the retry count, current response,    * and the current strategy.    *    * @param retryCount The current retry attempt count.    * @param statusCode The status code of the response, or -1 for socket error.    * @return true if the request should be retried; false otherwise.    */
DECL|method|shouldRetry (final int retryCount, final int statusCode)
specifier|public
name|boolean
name|shouldRetry
parameter_list|(
specifier|final
name|int
name|retryCount
parameter_list|,
specifier|final
name|int
name|statusCode
parameter_list|)
block|{
return|return
name|retryCount
operator|<
name|this
operator|.
name|retryCount
operator|&&
operator|(
name|statusCode
operator|==
operator|-
literal|1
operator|||
name|statusCode
operator|==
name|HttpURLConnection
operator|.
name|HTTP_CLIENT_TIMEOUT
operator|||
operator|(
name|statusCode
operator|>=
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
operator|&&
name|statusCode
operator|!=
name|HttpURLConnection
operator|.
name|HTTP_NOT_IMPLEMENTED
operator|&&
name|statusCode
operator|!=
name|HttpURLConnection
operator|.
name|HTTP_VERSION
operator|)
operator|)
return|;
block|}
comment|/**    * Returns backoff interval between 80% and 120% of the desired backoff,    * multiply by 2^n-1 for exponential.    *    * @param retryCount The current retry attempt count.    * @return backoff Interval time    */
DECL|method|getRetryInterval (final int retryCount)
specifier|public
name|long
name|getRetryInterval
parameter_list|(
specifier|final
name|int
name|retryCount
parameter_list|)
block|{
specifier|final
name|long
name|boundedRandDelta
init|=
call|(
name|int
call|)
argument_list|(
name|this
operator|.
name|deltaBackoff
operator|*
name|MIN_RANDOM_RATIO
argument_list|)
operator|+
name|this
operator|.
name|randRef
operator|.
name|nextInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|this
operator|.
name|deltaBackoff
operator|*
name|MAX_RANDOM_RATIO
argument_list|)
operator|-
call|(
name|int
call|)
argument_list|(
name|this
operator|.
name|deltaBackoff
operator|*
name|MIN_RANDOM_RATIO
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|double
name|incrementDelta
init|=
operator|(
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|retryCount
operator|-
literal|1
argument_list|)
operator|)
operator|*
name|boundedRandDelta
decl_stmt|;
specifier|final
name|long
name|retryInterval
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|this
operator|.
name|minBackoff
operator|+
name|incrementDelta
argument_list|,
name|maxBackoff
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|retryInterval
return|;
block|}
block|}
end_class

end_unit

