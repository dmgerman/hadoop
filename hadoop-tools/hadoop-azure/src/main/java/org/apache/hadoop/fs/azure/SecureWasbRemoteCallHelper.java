begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|Validate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|security
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|security
operator|.
name|WasbDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|Authenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|KerberosDelegationTokenAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpUriRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Helper class the has constants and helper methods  * used in WASB when integrating with a remote http cred  * service which uses Kerberos and delegation tokens.  * Currently, remote service will be used to generate  * SAS keys, authorization and delegation token operations.  */
end_comment

begin_class
DECL|class|SecureWasbRemoteCallHelper
specifier|public
class|class
name|SecureWasbRemoteCallHelper
extends|extends
name|WasbRemoteCallHelper
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SecureWasbRemoteCallHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Delegation token query parameter to be used when making rest call.    */
DECL|field|DELEGATION_TOKEN_QUERY_PARAM_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_QUERY_PARAM_NAME
init|=
literal|"delegation"
decl_stmt|;
comment|/**    * Delegation token to be used for making the remote call.    */
DECL|field|delegationToken
specifier|private
name|Token
argument_list|<
name|?
argument_list|>
name|delegationToken
init|=
literal|null
decl_stmt|;
comment|/**    * Does Remote Http Call requires Kerberos Authentication always, even if the delegation token is present.    */
DECL|field|alwaysRequiresKerberosAuth
specifier|private
name|boolean
name|alwaysRequiresKerberosAuth
decl_stmt|;
DECL|method|SecureWasbRemoteCallHelper (RetryPolicy retryPolicy, boolean alwaysRequiresKerberosAuth)
specifier|public
name|SecureWasbRemoteCallHelper
parameter_list|(
name|RetryPolicy
name|retryPolicy
parameter_list|,
name|boolean
name|alwaysRequiresKerberosAuth
parameter_list|)
block|{
name|super
argument_list|(
name|retryPolicy
argument_list|)
expr_stmt|;
name|this
operator|.
name|alwaysRequiresKerberosAuth
operator|=
name|alwaysRequiresKerberosAuth
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeRemoteRequest (final String[] urls, final String path, final List<NameValuePair> queryParams, final String httpMethod)
specifier|public
name|String
name|makeRemoteRequest
parameter_list|(
specifier|final
name|String
index|[]
name|urls
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|queryParams
parameter_list|,
specifier|final
name|String
name|httpMethod
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|connectUgi
init|=
name|ugi
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectUgi
operator|==
literal|null
condition|)
block|{
name|connectUgi
operator|=
name|ugi
expr_stmt|;
block|}
if|if
condition|(
name|delegationToken
operator|==
literal|null
condition|)
block|{
name|connectUgi
operator|.
name|checkTGTAndReloginFromKeytab
argument_list|()
expr_stmt|;
block|}
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|connectUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|retryableRequest
argument_list|(
name|urls
argument_list|,
name|path
argument_list|,
name|queryParams
argument_list|,
name|httpMethod
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpRequest (String[] urls, String path, List<NameValuePair> queryParams, int urlIndex, String httpMethod)
specifier|public
name|HttpUriRequest
name|getHttpRequest
parameter_list|(
name|String
index|[]
name|urls
parameter_list|,
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|queryParams
parameter_list|,
name|int
name|urlIndex
parameter_list|,
name|String
name|httpMethod
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|connectUgi
init|=
name|ugi
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectUgi
operator|!=
literal|null
condition|)
block|{
name|queryParams
operator|.
name|add
argument_list|(
operator|new
name|NameValuePair
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|DOAS_PARAM
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|ugi
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Token
name|delegationToken
init|=
name|getDelegationToken
argument_list|(
name|ugi
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|alwaysRequiresKerberosAuth
operator|&&
name|delegationToken
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|delegationTokenEncodedUrlString
init|=
name|delegationToken
operator|.
name|encodeToUrlString
argument_list|()
decl_stmt|;
name|queryParams
operator|.
name|add
argument_list|(
operator|new
name|NameValuePair
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|DELEGATION_TOKEN_QUERY_PARAM_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|delegationTokenEncodedUrlString
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|URIBuilder
name|uriBuilder
init|=
operator|new
name|URIBuilder
argument_list|(
name|urls
index|[
name|urlIndex
index|]
argument_list|)
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
operator|.
name|setParameters
argument_list|(
name|queryParams
argument_list|)
decl_stmt|;
name|HttpUriRequest
name|httpUriRequest
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|httpMethod
condition|)
block|{
case|case
name|HttpPut
operator|.
name|METHOD_NAME
case|:
name|httpUriRequest
operator|=
operator|new
name|HttpPut
argument_list|(
name|uriBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|HttpPost
operator|.
name|METHOD_NAME
case|:
name|httpUriRequest
operator|=
operator|new
name|HttpPost
argument_list|(
name|uriBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|httpUriRequest
operator|=
operator|new
name|HttpGet
argument_list|(
name|uriBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"SecureWasbRemoteCallHelper#getHttpRequest() {}"
argument_list|,
name|uriBuilder
operator|.
name|build
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|alwaysRequiresKerberosAuth
operator|||
name|delegationToken
operator|==
literal|null
condition|)
block|{
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
specifier|final
name|Authenticator
name|kerberosAuthenticator
init|=
operator|new
name|KerberosDelegationTokenAuthenticator
argument_list|()
decl_stmt|;
try|try
block|{
name|kerberosAuthenticator
operator|.
name|authenticate
argument_list|(
name|uriBuilder
operator|.
name|build
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WasbRemoteCallException
argument_list|(
name|Constants
operator|.
name|AUTHENTICATION_FAILED_ERROR_MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Validate
operator|.
name|isTrue
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|,
literal|"Authenticated Token is NOT present. The request cannot proceed."
argument_list|)
expr_stmt|;
name|httpUriRequest
operator|.
name|setHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
operator|+
literal|"="
operator|+
name|token
argument_list|)
expr_stmt|;
block|}
return|return
name|httpUriRequest
return|;
block|}
DECL|method|getDelegationToken ( UserGroupInformation userGroupInformation)
specifier|private
specifier|synchronized
name|Token
argument_list|<
name|?
argument_list|>
name|getDelegationToken
parameter_list|(
name|UserGroupInformation
name|userGroupInformation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|delegationToken
operator|==
literal|null
condition|)
block|{
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Token
name|iterToken
range|:
name|userGroupInformation
operator|.
name|getTokens
argument_list|()
control|)
block|{
if|if
condition|(
name|iterToken
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|WasbDelegationTokenIdentifier
operator|.
name|TOKEN_KIND
argument_list|)
condition|)
block|{
name|token
operator|=
name|iterToken
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} token found in cache : {}"
argument_list|,
name|WasbDelegationTokenIdentifier
operator|.
name|TOKEN_KIND
argument_list|,
name|iterToken
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"UGI Information: {}"
argument_list|,
name|userGroupInformation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// ugi tokens are usually indicative of a task which can't
comment|// refetch tokens.  even if ugi has credentials, don't attempt
comment|// to get another token to match hdfs/rpc behavior
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using UGI token: {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delegation token from cache - {}"
argument_list|,
name|delegationToken
operator|!=
literal|null
condition|?
name|delegationToken
operator|.
name|encodeToUrlString
argument_list|()
else|:
literal|"null"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|delegationToken
return|;
block|}
DECL|method|setDelegationToken ( final Token<T> token)
specifier|private
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|setDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|T
argument_list|>
name|token
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|delegationToken
operator|=
name|token
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

