begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|Constants
operator|.
name|HeaderConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * Determines the operation type (PutBlock, PutPage, GetBlob, etc) of Azure  * Storage operations.  This is used by the handlers of the SendingRequestEvent  * and ResponseReceivedEvent exposed by the Azure Storage SDK to identify  * operation types (since the type of operation is not exposed by the SDK).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BlobOperationDescriptor
specifier|final
class|class
name|BlobOperationDescriptor
block|{
DECL|method|BlobOperationDescriptor ()
specifier|private
name|BlobOperationDescriptor
parameter_list|()
block|{
comment|// hide default constructor
block|}
comment|/**    * Gets the content length for the Azure Storage operation from the    * 'x-ms-range' header, if set.    * @param range the value of the 'x-ms-range' header.    * @return the content length, or zero if not set.    */
DECL|method|getContentLengthIfKnown (String range)
specifier|private
specifier|static
name|long
name|getContentLengthIfKnown
parameter_list|(
name|String
name|range
parameter_list|)
block|{
name|long
name|contentLength
init|=
literal|0
decl_stmt|;
comment|// Format is "bytes=%d-%d"
if|if
condition|(
name|range
operator|!=
literal|null
operator|&&
name|range
operator|.
name|startsWith
argument_list|(
literal|"bytes="
argument_list|)
condition|)
block|{
name|String
index|[]
name|offsets
init|=
name|range
operator|.
name|substring
argument_list|(
literal|"bytes="
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|offsets
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|contentLength
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|offsets
index|[
literal|1
index|]
argument_list|)
operator|-
name|Long
operator|.
name|parseLong
argument_list|(
name|offsets
index|[
literal|0
index|]
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
block|}
return|return
name|contentLength
return|;
block|}
comment|/**    * Gets the content length for the Azure Storage operation, or returns zero if    * unknown.    * @param conn the connection object for the Azure Storage operation.    * @param operationType the Azure Storage operation type.    * @return the content length, or zero if unknown.    */
DECL|method|getContentLengthIfKnown (HttpURLConnection conn, OperationType operationType)
specifier|static
name|long
name|getContentLengthIfKnown
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|,
name|OperationType
name|operationType
parameter_list|)
block|{
name|long
name|contentLength
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|operationType
condition|)
block|{
case|case
name|AppendBlock
case|:
case|case
name|PutBlock
case|:
name|String
name|lengthString
init|=
name|conn
operator|.
name|getRequestProperty
argument_list|(
name|HeaderConstants
operator|.
name|CONTENT_LENGTH
argument_list|)
decl_stmt|;
name|contentLength
operator|=
operator|(
name|lengthString
operator|!=
literal|null
operator|)
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
name|lengthString
argument_list|)
else|:
literal|0
expr_stmt|;
break|break;
case|case
name|PutPage
case|:
case|case
name|GetBlob
case|:
name|contentLength
operator|=
name|BlobOperationDescriptor
operator|.
name|getContentLengthIfKnown
argument_list|(
name|conn
operator|.
name|getRequestProperty
argument_list|(
literal|"x-ms-range"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|contentLength
return|;
block|}
comment|/**    * Gets the operation type of an Azure Storage operation.    *    * @param conn the connection object for the Azure Storage operation.    * @return the operation type.    */
DECL|method|getOperationType (HttpURLConnection conn)
specifier|static
name|OperationType
name|getOperationType
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
block|{
name|OperationType
name|operationType
init|=
name|OperationType
operator|.
name|Unknown
decl_stmt|;
name|String
name|method
init|=
name|conn
operator|.
name|getRequestMethod
argument_list|()
decl_stmt|;
name|String
name|compValue
init|=
name|getQueryParameter
argument_list|(
name|conn
operator|.
name|getURL
argument_list|()
argument_list|,
literal|"comp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"PUT"
argument_list|)
condition|)
block|{
if|if
condition|(
name|compValue
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|compValue
condition|)
block|{
case|case
literal|"metadata"
case|:
name|operationType
operator|=
name|OperationType
operator|.
name|SetMetadata
expr_stmt|;
break|break;
case|case
literal|"properties"
case|:
name|operationType
operator|=
name|OperationType
operator|.
name|SetProperties
expr_stmt|;
break|break;
case|case
literal|"block"
case|:
name|operationType
operator|=
name|OperationType
operator|.
name|PutBlock
expr_stmt|;
break|break;
case|case
literal|"page"
case|:
name|String
name|pageWrite
init|=
name|conn
operator|.
name|getRequestProperty
argument_list|(
literal|"x-ms-page-write"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pageWrite
operator|!=
literal|null
operator|&&
name|pageWrite
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"UPDATE"
argument_list|)
condition|)
block|{
name|operationType
operator|=
name|OperationType
operator|.
name|PutPage
expr_stmt|;
block|}
break|break;
case|case
literal|"appendblock"
case|:
name|operationType
operator|=
name|OperationType
operator|.
name|AppendBlock
expr_stmt|;
break|break;
case|case
literal|"blocklist"
case|:
name|operationType
operator|=
name|OperationType
operator|.
name|PutBlockList
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
else|else
block|{
name|String
name|blobType
init|=
name|conn
operator|.
name|getRequestProperty
argument_list|(
literal|"x-ms-blob-type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobType
operator|!=
literal|null
operator|&&
operator|(
name|blobType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"PageBlob"
argument_list|)
operator|||
name|blobType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"BlockBlob"
argument_list|)
operator|||
name|blobType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"AppendBlob"
argument_list|)
operator|)
condition|)
block|{
name|operationType
operator|=
name|OperationType
operator|.
name|CreateBlob
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blobType
operator|==
literal|null
condition|)
block|{
name|String
name|resType
init|=
name|getQueryParameter
argument_list|(
name|conn
operator|.
name|getURL
argument_list|()
argument_list|,
literal|"restype"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resType
operator|!=
literal|null
operator|&&
name|resType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"container"
argument_list|)
condition|)
block|{
name|operationType
operator|=
name|operationType
operator|.
name|CreateContainer
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"GET"
argument_list|)
condition|)
block|{
if|if
condition|(
name|compValue
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|compValue
condition|)
block|{
case|case
literal|"list"
case|:
name|operationType
operator|=
name|OperationType
operator|.
name|ListBlobs
expr_stmt|;
break|break;
case|case
literal|"metadata"
case|:
name|operationType
operator|=
name|OperationType
operator|.
name|GetMetadata
expr_stmt|;
break|break;
case|case
literal|"blocklist"
case|:
name|operationType
operator|=
name|OperationType
operator|.
name|GetBlockList
expr_stmt|;
break|break;
case|case
literal|"pagelist"
case|:
name|operationType
operator|=
name|OperationType
operator|.
name|GetPageList
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|conn
operator|.
name|getRequestProperty
argument_list|(
literal|"x-ms-range"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|operationType
operator|=
name|OperationType
operator|.
name|GetBlob
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"HEAD"
argument_list|)
condition|)
block|{
name|operationType
operator|=
name|OperationType
operator|.
name|GetProperties
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"DELETE"
argument_list|)
condition|)
block|{
name|String
name|resType
init|=
name|getQueryParameter
argument_list|(
name|conn
operator|.
name|getURL
argument_list|()
argument_list|,
literal|"restype"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resType
operator|!=
literal|null
operator|&&
name|resType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"container"
argument_list|)
condition|)
block|{
name|operationType
operator|=
name|operationType
operator|.
name|DeleteContainer
expr_stmt|;
block|}
else|else
block|{
name|operationType
operator|=
name|OperationType
operator|.
name|DeleteBlob
expr_stmt|;
block|}
block|}
return|return
name|operationType
return|;
block|}
DECL|method|getQueryParameter (URL url, String queryParameterName)
specifier|private
specifier|static
name|String
name|getQueryParameter
parameter_list|(
name|URL
name|url
parameter_list|,
name|String
name|queryParameterName
parameter_list|)
block|{
name|String
name|query
init|=
operator|(
name|url
operator|!=
literal|null
operator|)
condition|?
name|url
operator|.
name|getQuery
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|searchValue
init|=
name|queryParameterName
operator|+
literal|"="
decl_stmt|;
name|int
name|offset
init|=
name|query
operator|.
name|indexOf
argument_list|(
name|searchValue
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|beginIndex
init|=
name|offset
operator|+
name|searchValue
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|endIndex
init|=
name|query
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|,
name|beginIndex
argument_list|)
decl_stmt|;
name|value
operator|=
operator|(
name|endIndex
operator|==
operator|-
literal|1
operator|)
condition|?
name|query
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|)
else|:
name|query
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|endIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|enum|OperationType
enum|enum
name|OperationType
block|{
DECL|enumConstant|AppendBlock
name|AppendBlock
block|,
DECL|enumConstant|CreateBlob
name|CreateBlob
block|,
DECL|enumConstant|CreateContainer
name|CreateContainer
block|,
DECL|enumConstant|DeleteBlob
name|DeleteBlob
block|,
DECL|enumConstant|DeleteContainer
name|DeleteContainer
block|,
DECL|enumConstant|GetBlob
name|GetBlob
block|,
DECL|enumConstant|GetBlockList
name|GetBlockList
block|,
DECL|enumConstant|GetMetadata
name|GetMetadata
block|,
DECL|enumConstant|GetPageList
name|GetPageList
block|,
DECL|enumConstant|GetProperties
name|GetProperties
block|,
DECL|enumConstant|ListBlobs
name|ListBlobs
block|,
DECL|enumConstant|PutBlock
name|PutBlock
block|,
DECL|enumConstant|PutBlockList
name|PutBlockList
block|,
DECL|enumConstant|PutPage
name|PutPage
block|,
DECL|enumConstant|SetMetadata
name|SetMetadata
block|,
DECL|enumConstant|SetProperties
name|SetProperties
block|,
DECL|enumConstant|Unknown
name|Unknown
block|}
block|}
end_class

end_unit

