begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|AzureFileSystemThreadPoolExecutor
class|class
name|AzureFileSystemThreadPoolExecutor
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AzureFileSystemThreadPoolExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/*    * Number of threads to keep in the pool.    */
DECL|field|threadCount
specifier|private
name|int
name|threadCount
decl_stmt|;
comment|/*    * Prefix to be used for naming threads.    */
DECL|field|threadNamePrefix
specifier|private
name|String
name|threadNamePrefix
decl_stmt|;
comment|/*    * File system operation like delete/rename. Used for logging purpose.    */
DECL|field|operation
specifier|private
name|String
name|operation
decl_stmt|;
comment|/*    * Source blob key used for file operation. Used for logging purpose.    */
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
comment|/*    * Configuration name for recommendations. Used for logging purpose.    */
DECL|field|config
specifier|private
name|String
name|config
decl_stmt|;
comment|/**    * Creates a new AzureFileSystemThreadPoolExecutor object.    *    * @param threadCount    *        Number of threads to be used after reading user configuration.    * @param threadNamePrefix    *        Prefix to be used to name threads for the file operation.    * @param operation    *        File system operation like delete/rename. Used for logging purpose.    * @param key    *        Source blob key used for file operation. Used for logging purpose.    * @param config    *        Configuration name for recommendations. Used for logging purpose.    */
DECL|method|AzureFileSystemThreadPoolExecutor (int threadCount, String threadNamePrefix, String operation, String key, String config)
specifier|public
name|AzureFileSystemThreadPoolExecutor
parameter_list|(
name|int
name|threadCount
parameter_list|,
name|String
name|threadNamePrefix
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|config
parameter_list|)
block|{
name|this
operator|.
name|threadCount
operator|=
name|threadCount
expr_stmt|;
name|this
operator|.
name|threadNamePrefix
operator|=
name|threadNamePrefix
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
comment|/**    * Gets a new thread pool    * @param threadCount    *        Number of threads to keep in the pool.    * @param threadNamePrefix    *        Prefix to be used for naming threads.    *    * @return    *        Returns a new thread pool.    */
annotation|@
name|VisibleForTesting
DECL|method|getThreadPool (int threadCount)
name|ThreadPoolExecutor
name|getThreadPool
parameter_list|(
name|int
name|threadCount
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ThreadPoolExecutor
argument_list|(
name|threadCount
argument_list|,
name|threadCount
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|AzureFileSystemThreadFactory
argument_list|(
name|this
operator|.
name|threadNamePrefix
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Execute the file operation parallel using threads. All threads works on a    * single working set of files stored in input 'contents'. The synchronization    * between multiple threads is achieved through retrieving atomic index value    * from the array. Once thread gets the index, it retrieves the file and initiates    * the file operation. The advantage with this method is that file operations    * doesn't get serialized due to any thread. Also, the input copy is not changed    * such that caller can reuse the list for other purposes.    *    * This implementation also considers that failure of operation on single file    * is considered as overall operation failure. All threads bail out their execution    * as soon as they detect any single thread either got exception or operation is failed.    *    * @param contents    *        List of blobs on which operation to be done.    * @param threadOperation    *        The actual operation to be executed by each thread on a file.    *    * @param operationStatus    *        Returns true if the operation is success, false if operation is failed.    * @throws IOException    *    */
DECL|method|executeParallel (FileMetadata[] contents, AzureFileSystemThreadTask threadOperation)
name|boolean
name|executeParallel
parameter_list|(
name|FileMetadata
index|[]
name|contents
parameter_list|,
name|AzureFileSystemThreadTask
name|threadOperation
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|operationStatus
init|=
literal|false
decl_stmt|;
name|boolean
name|threadsEnabled
init|=
literal|false
decl_stmt|;
name|int
name|threadCount
init|=
name|this
operator|.
name|threadCount
decl_stmt|;
name|ThreadPoolExecutor
name|ioThreadPool
init|=
literal|null
decl_stmt|;
comment|// Start time for file operation
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
comment|// If number of files  are less then reduce threads to file count.
name|threadCount
operator|=
name|Math
operator|.
name|min
argument_list|(
name|contents
operator|.
name|length
argument_list|,
name|threadCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|threadCount
operator|>
literal|1
condition|)
block|{
try|try
block|{
name|ioThreadPool
operator|=
name|getThreadPool
argument_list|(
name|threadCount
argument_list|)
expr_stmt|;
name|threadsEnabled
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// The possibility of this scenario is very remote. Added this code as safety net.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create thread pool with threads {} for operation {} on blob {}."
operator|+
literal|" Use config {} to set less number of threads. Setting config value to<= 1 will disable threads."
argument_list|,
name|threadCount
argument_list|,
name|operation
argument_list|,
name|key
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Disabling threads for {} operation as thread count {} is<= 1"
argument_list|,
name|operation
argument_list|,
name|threadCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|threadsEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using thread pool for {} operation with threads {}"
argument_list|,
name|operation
argument_list|,
name|threadCount
argument_list|)
expr_stmt|;
name|boolean
name|started
init|=
literal|false
decl_stmt|;
name|AzureFileSystemThreadRunnable
name|runnable
init|=
operator|new
name|AzureFileSystemThreadRunnable
argument_list|(
name|contents
argument_list|,
name|threadOperation
argument_list|,
name|operation
argument_list|)
decl_stmt|;
comment|// Don't start any new requests if there is an exception from any one thread.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
operator|&&
name|runnable
operator|.
name|lastException
operator|==
literal|null
operator|&&
name|runnable
operator|.
name|operationStatus
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ioThreadPool
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ex
parameter_list|)
block|{
comment|// If threads can't be scheduled then report error and move ahead with next thread.
comment|// Don't fail operation due to this issue.
name|LOG
operator|.
name|error
argument_list|(
literal|"Rejected execution of thread for {} operation on blob {}."
operator|+
literal|" Continuing with existing threads. Use config {} to set less number of threads"
operator|+
literal|" to avoid this error"
argument_list|,
name|operation
argument_list|,
name|key
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Stop accepting any new execute requests.
name|ioThreadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Wait for threads to terminate. Keep time out as large value
name|ioThreadPool
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|intrEx
parameter_list|)
block|{
comment|// If current thread got interrupted then shutdown all threads now.
name|ioThreadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Threads got interrupted {} blob operation for {} "
argument_list|,
name|operation
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
name|int
name|threadsNotUsed
init|=
name|threadCount
operator|-
name|runnable
operator|.
name|threadsUsed
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|threadsNotUsed
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} threads not used for {} operation on blob {}"
argument_list|,
name|threadsNotUsed
argument_list|,
name|operation
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|started
condition|)
block|{
comment|// No threads started. Fall back to serial mode.
name|threadsEnabled
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Not able to schedule threads to {} blob {}. Fall back to {} blob serially."
argument_list|,
name|operation
argument_list|,
name|key
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOException
name|lastException
init|=
name|runnable
operator|.
name|lastException
decl_stmt|;
comment|// There are no exceptions from threads and no operation failures. Consider this scenario
comment|// as failure only if file operations are not done on all files.
if|if
condition|(
name|lastException
operator|==
literal|null
operator|&&
name|runnable
operator|.
name|operationStatus
operator|&&
name|runnable
operator|.
name|filesProcessed
operator|.
name|get
argument_list|()
operator|<
name|contents
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} failed as operation on subfolders and files failed."
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|lastException
operator|=
operator|new
name|IOException
argument_list|(
name|operation
operator|+
literal|" failed as operation on subfolders and files failed."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastException
operator|!=
literal|null
condition|)
block|{
comment|// Threads started and executed. One or more threads seems to have hit exception.
comment|// Raise the same exception.
throw|throw
name|lastException
throw|;
block|}
name|operationStatus
operator|=
name|runnable
operator|.
name|operationStatus
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|threadsEnabled
condition|)
block|{
comment|// No threads. Serialize the operation. Clear any last exceptions.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Serializing the {} operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|threadOperation
operator|.
name|execute
argument_list|(
name|contents
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to {} file {}"
argument_list|,
name|operation
argument_list|,
name|contents
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// Operation is success
name|operationStatus
operator|=
literal|true
expr_stmt|;
block|}
comment|// Find the duration of time taken for file operation
name|long
name|end
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time taken for {} operation is: {} ms with threads: {}"
argument_list|,
name|operation
argument_list|,
operator|(
name|end
operator|-
name|start
operator|)
argument_list|,
name|threadCount
argument_list|)
expr_stmt|;
return|return
name|operationStatus
return|;
block|}
comment|/**    * A ThreadFactory for Azure File operation threads with meaningful names helpful    * for debugging purposes.    */
DECL|class|AzureFileSystemThreadFactory
specifier|static
class|class
name|AzureFileSystemThreadFactory
implements|implements
name|ThreadFactory
block|{
DECL|field|threadIdPrefix
specifier|private
name|String
name|threadIdPrefix
init|=
literal|"AzureFileSystemThread"
decl_stmt|;
comment|/**      * Atomic integer to provide thread id for thread names.      */
DECL|field|threadSequenceNumber
specifier|private
name|AtomicInteger
name|threadSequenceNumber
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|AzureFileSystemThreadFactory (String prefix)
specifier|public
name|AzureFileSystemThreadFactory
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|threadIdPrefix
operator|=
name|prefix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newThread (Runnable r)
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// Use current thread name as part in naming thread such that use of
comment|// same file system object will have unique names.
name|t
operator|.
name|setName
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s-%s-%d"
argument_list|,
name|threadIdPrefix
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|threadSequenceNumber
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
DECL|class|AzureFileSystemThreadRunnable
specifier|static
class|class
name|AzureFileSystemThreadRunnable
implements|implements
name|Runnable
block|{
comment|// Tracks if any thread has raised exception.
DECL|field|lastException
specifier|private
specifier|volatile
name|IOException
name|lastException
init|=
literal|null
decl_stmt|;
comment|// Tracks if any thread has failed execution.
DECL|field|operationStatus
specifier|private
specifier|volatile
name|boolean
name|operationStatus
init|=
literal|true
decl_stmt|;
comment|// Atomic tracker to retrieve index of next file to be processed
DECL|field|fileIndex
specifier|private
name|AtomicInteger
name|fileIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Atomic tracker to count number of files successfully processed
DECL|field|filesProcessed
specifier|private
name|AtomicInteger
name|filesProcessed
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Atomic tracker to retrieve number of threads used to do at least one file operation.
DECL|field|threadsUsed
specifier|private
name|AtomicInteger
name|threadsUsed
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Type of file system operation
DECL|field|operation
specifier|private
name|String
name|operation
init|=
literal|"Unknown"
decl_stmt|;
comment|// List of files to be processed.
DECL|field|files
specifier|private
specifier|final
name|FileMetadata
index|[]
name|files
decl_stmt|;
comment|// Thread task which encapsulates the file system operation work on a file.
DECL|field|task
specifier|private
name|AzureFileSystemThreadTask
name|task
decl_stmt|;
DECL|method|AzureFileSystemThreadRunnable (final FileMetadata[] files, AzureFileSystemThreadTask task, String operation)
specifier|public
name|AzureFileSystemThreadRunnable
parameter_list|(
specifier|final
name|FileMetadata
index|[]
name|files
parameter_list|,
name|AzureFileSystemThreadTask
name|task
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|int
name|currentIndex
decl_stmt|;
name|int
name|processedFilesCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|currentIndex
operator|=
name|fileIndex
operator|.
name|getAndIncrement
argument_list|()
operator|)
operator|<
name|files
operator|.
name|length
condition|)
block|{
name|processedFilesCount
operator|++
expr_stmt|;
name|FileMetadata
name|file
init|=
name|files
index|[
name|currentIndex
index|]
decl_stmt|;
try|try
block|{
comment|// Execute the file operation.
if|if
condition|(
operator|!
name|task
operator|.
name|execute
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} operation failed for file {}"
argument_list|,
name|this
operator|.
name|operation
argument_list|,
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|operationStatus
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|filesProcessed
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Encountered Exception for {} operation for file {}"
argument_list|,
name|this
operator|.
name|operation
argument_list|,
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|lastException
operator|=
operator|new
name|IOException
argument_list|(
literal|"Encountered Exception for "
operator|+
name|this
operator|.
name|operation
operator|+
literal|" operation for file "
operator|+
name|file
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// If any thread has seen exception or operation failed then we
comment|// don't have to process further.
if|if
condition|(
name|lastException
operator|!=
literal|null
operator|||
operator|!
name|operationStatus
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Terminating execution of {} operation now as some other thread"
operator|+
literal|" already got exception or operation failed"
argument_list|,
name|this
operator|.
name|operation
argument_list|,
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|long
name|end
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Time taken to process {} files count for {} operation: {} ms"
argument_list|,
name|processedFilesCount
argument_list|,
name|this
operator|.
name|operation
argument_list|,
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|processedFilesCount
operator|>
literal|0
condition|)
block|{
name|threadsUsed
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

