begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|exception
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BufferedFSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|StorageInterface
operator|.
name|CloudBlobWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|AccessCondition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|OperationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|core
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A {@link FileSystem} for reading and writing files stored on<a  * href="http://store.azure.com/">Windows Azure</a>. This implementation is  * blob-based and stores files on Azure in their native form so they can be read  * by other Azure tools.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|NativeAzureFileSystem
specifier|public
class|class
name|NativeAzureFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|USER_WX_PERMISION
specifier|private
specifier|static
specifier|final
name|int
name|USER_WX_PERMISION
init|=
literal|0300
decl_stmt|;
comment|/**    * A description of a folder rename operation, including the source and    * destination keys, and descriptions of the files in the source folder.    */
DECL|class|FolderRenamePending
specifier|public
specifier|static
class|class
name|FolderRenamePending
block|{
DECL|field|folderLease
specifier|private
name|SelfRenewingLease
name|folderLease
decl_stmt|;
DECL|field|srcKey
specifier|private
name|String
name|srcKey
decl_stmt|;
DECL|field|dstKey
specifier|private
name|String
name|dstKey
decl_stmt|;
DECL|field|fileMetadata
specifier|private
name|FileMetadata
index|[]
name|fileMetadata
init|=
literal|null
decl_stmt|;
comment|// descriptions of source files
DECL|field|fileStrings
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fileStrings
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
name|NativeAzureFileSystem
name|fs
decl_stmt|;
DECL|field|MAX_RENAME_PENDING_FILE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RENAME_PENDING_FILE_SIZE
init|=
literal|10000000
decl_stmt|;
DECL|field|FORMATTING_BUFFER
specifier|private
specifier|static
specifier|final
name|int
name|FORMATTING_BUFFER
init|=
literal|10000
decl_stmt|;
DECL|field|committed
specifier|private
name|boolean
name|committed
decl_stmt|;
DECL|field|SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|SUFFIX
init|=
literal|"-RenamePending.json"
decl_stmt|;
comment|// Prepare in-memory information needed to do or redo a folder rename.
DECL|method|FolderRenamePending (String srcKey, String dstKey, SelfRenewingLease lease, NativeAzureFileSystem fs)
specifier|public
name|FolderRenamePending
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|String
name|dstKey
parameter_list|,
name|SelfRenewingLease
name|lease
parameter_list|,
name|NativeAzureFileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|srcKey
operator|=
name|srcKey
expr_stmt|;
name|this
operator|.
name|dstKey
operator|=
name|dstKey
expr_stmt|;
name|this
operator|.
name|folderLease
operator|=
name|lease
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|ArrayList
argument_list|<
name|FileMetadata
argument_list|>
name|fileMetadataList
init|=
operator|new
name|ArrayList
argument_list|<
name|FileMetadata
argument_list|>
argument_list|()
decl_stmt|;
comment|// List all the files in the folder.
name|String
name|priorLastKey
init|=
literal|null
decl_stmt|;
do|do
block|{
name|PartialListing
name|listing
init|=
name|fs
operator|.
name|getStoreInterface
argument_list|()
operator|.
name|listAll
argument_list|(
name|srcKey
argument_list|,
name|AZURE_LIST_ALL
argument_list|,
name|AZURE_UNBOUNDED_DEPTH
argument_list|,
name|priorLastKey
argument_list|)
decl_stmt|;
for|for
control|(
name|FileMetadata
name|file
range|:
name|listing
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|fileMetadataList
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|priorLastKey
operator|=
name|listing
operator|.
name|getPriorLastKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|priorLastKey
operator|!=
literal|null
condition|)
do|;
name|fileMetadata
operator|=
name|fileMetadataList
operator|.
name|toArray
argument_list|(
operator|new
name|FileMetadata
index|[
name|fileMetadataList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|committed
operator|=
literal|true
expr_stmt|;
block|}
comment|// Prepare in-memory information needed to do or redo folder rename from
comment|// a -RenamePending.json file read from storage. This constructor is to use during
comment|// redo processing.
DECL|method|FolderRenamePending (Path redoFile, NativeAzureFileSystem fs)
specifier|public
name|FolderRenamePending
parameter_list|(
name|Path
name|redoFile
parameter_list|,
name|NativeAzureFileSystem
name|fs
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
comment|// open redo file
name|Path
name|f
init|=
name|redoFile
decl_stmt|;
name|FSDataInputStream
name|input
init|=
name|fs
operator|.
name|open
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|MAX_RENAME_PENDING_FILE_SIZE
index|]
decl_stmt|;
name|int
name|l
init|=
name|input
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error reading pending rename file contents -- no data available"
argument_list|)
throw|;
block|}
if|if
condition|(
name|l
operator|==
name|MAX_RENAME_PENDING_FILE_SIZE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error reading pending rename file contents -- "
operator|+
literal|"maximum file size exceeded"
argument_list|)
throw|;
block|}
name|String
name|contents
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|l
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
comment|// parse the JSON
name|ObjectMapper
name|objMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|objMapper
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_UNQUOTED_FIELD_NAMES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|JsonNode
name|json
init|=
literal|null
decl_stmt|;
try|try
block|{
name|json
operator|=
name|objMapper
operator|.
name|readValue
argument_list|(
name|contents
argument_list|,
name|JsonNode
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|committed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonMappingException
name|e
parameter_list|)
block|{
comment|// The -RedoPending.json file is corrupted, so we assume it was
comment|// not completely written
comment|// and the redo operation did not commit.
name|this
operator|.
name|committed
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonParseException
name|e
parameter_list|)
block|{
name|this
operator|.
name|committed
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|committed
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|committed
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Deleting corruped rename pending file {} \n {}"
argument_list|,
name|redoFile
argument_list|,
name|contents
argument_list|)
expr_stmt|;
comment|// delete the -RenamePending.json file
name|fs
operator|.
name|delete
argument_list|(
name|redoFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// initialize this object's fields
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fileStrList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|JsonNode
name|oldFolderName
init|=
name|json
operator|.
name|get
argument_list|(
literal|"OldFolderName"
argument_list|)
decl_stmt|;
name|JsonNode
name|newFolderName
init|=
name|json
operator|.
name|get
argument_list|(
literal|"NewFolderName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldFolderName
operator|==
literal|null
operator|||
name|newFolderName
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|committed
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|srcKey
operator|=
name|oldFolderName
operator|.
name|getTextValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|dstKey
operator|=
name|newFolderName
operator|.
name|getTextValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|srcKey
operator|==
literal|null
operator|||
name|this
operator|.
name|dstKey
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|committed
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|JsonNode
name|fileList
init|=
name|json
operator|.
name|get
argument_list|(
literal|"FileList"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileList
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|committed
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fileStrList
operator|.
name|add
argument_list|(
name|fileList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|this
operator|.
name|fileStrings
operator|=
name|fileStrList
expr_stmt|;
block|}
DECL|method|getFiles ()
specifier|public
name|FileMetadata
index|[]
name|getFiles
parameter_list|()
block|{
return|return
name|fileMetadata
return|;
block|}
DECL|method|getFolderLease ()
specifier|public
name|SelfRenewingLease
name|getFolderLease
parameter_list|()
block|{
return|return
name|folderLease
return|;
block|}
comment|/**      * Write to disk the information needed to redo folder rename,      * in JSON format. The file name will be      * {@code wasb://<sourceFolderPrefix>/folderName-RenamePending.json}      * The file format will be:      *<pre>{@code      * {      *   FormatVersion: "1.0",      *   OperationTime: "<YYYY-MM-DD HH:MM:SS.MMM>",      *   OldFolderName: "<key>",      *   NewFolderName: "<key>",      *   FileList: [<string> ,<string> , ... ]      * }      *      * Here's a sample:      * {      *  FormatVersion: "1.0",      *  OperationUTCTime: "2014-07-01 23:50:35.572",      *  OldFolderName: "user/ehans/folderToRename",      *  NewFolderName: "user/ehans/renamedFolder",      *  FileList: [      *    "innerFile",      *    "innerFile2"      *  ]      * } }</pre>      * @throws IOException      */
DECL|method|writeFile (FileSystem fs)
specifier|public
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getRenamePendingFilePath
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Preparing to write atomic rename state to {}"
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|OutputStream
name|output
init|=
literal|null
decl_stmt|;
name|String
name|contents
init|=
name|makeRenamePendingFileContents
argument_list|()
decl_stmt|;
comment|// Write file.
try|try
block|{
name|output
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to write RenamePending file for folder rename from "
operator|+
name|srcKey
operator|+
literal|" to "
operator|+
name|dstKey
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|NativeAzureFileSystem
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Return the contents of the JSON file to represent the operations      * to be performed for a folder rename.      */
DECL|method|makeRenamePendingFileContents ()
specifier|public
name|String
name|makeRenamePendingFileContents
parameter_list|()
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss.SSS"
argument_list|)
decl_stmt|;
name|sdf
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|time
init|=
name|sdf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
comment|// Make file list string
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"[\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|fileMetadata
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|String
name|noPrefix
init|=
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|fileMetadata
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
argument_list|,
name|srcKey
operator|+
literal|"/"
argument_list|)
decl_stmt|;
comment|// Quote string file names, escaping any possible " characters or other
comment|// necessary characters in the name.
name|builder
operator|.
name|append
argument_list|(
name|quote
argument_list|(
name|noPrefix
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>=
name|MAX_RENAME_PENDING_FILE_SIZE
operator|-
name|FORMATTING_BUFFER
condition|)
block|{
comment|// Give up now to avoid using too much memory.
name|LOG
operator|.
name|error
argument_list|(
literal|"Internal error: Exceeded maximum rename pending file size of {} bytes."
argument_list|,
name|MAX_RENAME_PENDING_FILE_SIZE
argument_list|)
expr_stmt|;
comment|// return some bad JSON with an error message to make it human readable
return|return
literal|"exceeded maximum rename pending file size"
return|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"\n  ]"
argument_list|)
expr_stmt|;
name|String
name|fileList
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Make file contents as a string. Again, quote file names, escaping
comment|// characters as appropriate.
name|String
name|contents
init|=
literal|"{\n"
operator|+
literal|"  FormatVersion: \"1.0\",\n"
operator|+
literal|"  OperationUTCTime: \""
operator|+
name|time
operator|+
literal|"\",\n"
operator|+
literal|"  OldFolderName: "
operator|+
name|quote
argument_list|(
name|srcKey
argument_list|)
operator|+
literal|",\n"
operator|+
literal|"  NewFolderName: "
operator|+
name|quote
argument_list|(
name|dstKey
argument_list|)
operator|+
literal|",\n"
operator|+
literal|"  FileList: "
operator|+
name|fileList
operator|+
literal|"\n"
operator|+
literal|"}\n"
decl_stmt|;
return|return
name|contents
return|;
block|}
comment|/**      * This is an exact copy of org.codehaus.jettison.json.JSONObject.quote       * method.      *       * Produce a string in double quotes with backslash sequences in all the      * right places. A backslash will be inserted within</, allowing JSON      * text to be delivered in HTML. In JSON text, a string cannot contain a      * control character or an unescaped quote or backslash.      * @param string A String      * @return  A String correctly formatted for insertion in a JSON text.      */
DECL|method|quote (String string)
specifier|private
name|String
name|quote
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
operator|||
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|"\"\""
return|;
block|}
name|char
name|c
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
name|int
name|len
init|=
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
operator|+
literal|4
argument_list|)
decl_stmt|;
name|String
name|t
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|+=
literal|1
control|)
block|{
name|c
operator|=
name|string
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\\'
case|:
case|case
literal|'"'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'/'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\b'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\b"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\t"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\f'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\f"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\r"
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|c
operator|<
literal|' '
condition|)
block|{
name|t
operator|=
literal|"000"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\\u"
operator|+
name|t
operator|.
name|substring
argument_list|(
name|t
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getSrcKey ()
specifier|public
name|String
name|getSrcKey
parameter_list|()
block|{
return|return
name|srcKey
return|;
block|}
DECL|method|getDstKey ()
specifier|public
name|String
name|getDstKey
parameter_list|()
block|{
return|return
name|dstKey
return|;
block|}
DECL|method|getSourceMetadata ()
specifier|public
name|FileMetadata
name|getSourceMetadata
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getStoreInterface
argument_list|()
operator|.
name|retrieveMetadata
argument_list|(
name|srcKey
argument_list|)
return|;
block|}
comment|/**      * Execute a folder rename. This is the execution path followed      * when everything is working normally. See redo() for the alternate      * execution path for the case where we're recovering from a folder rename      * failure.      * @throws IOException      */
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|FileMetadata
name|file
range|:
name|this
operator|.
name|getFiles
argument_list|()
control|)
block|{
comment|// Rename all materialized entries under the folder to point to the
comment|// final destination.
if|if
condition|(
name|file
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Explicit
condition|)
block|{
name|String
name|srcName
init|=
name|file
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|suffix
init|=
name|srcName
operator|.
name|substring
argument_list|(
operator|(
name|this
operator|.
name|getSrcKey
argument_list|()
operator|)
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dstName
init|=
name|this
operator|.
name|getDstKey
argument_list|()
operator|+
name|suffix
decl_stmt|;
comment|// Rename gets exclusive access (via a lease) for files
comment|// designated for atomic rename.
comment|// The main use case is for HBase write-ahead log (WAL) and data
comment|// folder processing correctness.  See the rename code for details.
name|boolean
name|acquireLease
init|=
name|fs
operator|.
name|getStoreInterface
argument_list|()
operator|.
name|isAtomicRenameKey
argument_list|(
name|srcName
argument_list|)
decl_stmt|;
name|fs
operator|.
name|getStoreInterface
argument_list|()
operator|.
name|rename
argument_list|(
name|srcName
argument_list|,
name|dstName
argument_list|,
name|acquireLease
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Rename the source folder 0-byte root file itself.
name|FileMetadata
name|srcMetadata2
init|=
name|this
operator|.
name|getSourceMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcMetadata2
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Explicit
condition|)
block|{
comment|// It already has a lease on it from the "prepare" phase so there's no
comment|// need to get one now. Pass in existing lease to allow file delete.
name|fs
operator|.
name|getStoreInterface
argument_list|()
operator|.
name|rename
argument_list|(
name|this
operator|.
name|getSrcKey
argument_list|()
argument_list|,
name|this
operator|.
name|getDstKey
argument_list|()
argument_list|,
literal|false
argument_list|,
name|folderLease
argument_list|)
expr_stmt|;
block|}
comment|// Update the last-modified time of the parent folders of both source and
comment|// destination.
name|fs
operator|.
name|updateParentFolderLastModifiedTime
argument_list|(
name|srcKey
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateParentFolderLastModifiedTime
argument_list|(
name|dstKey
argument_list|)
expr_stmt|;
block|}
comment|/** Clean up after execution of rename.      * @throws IOException */
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|getStoreInterface
argument_list|()
operator|.
name|isAtomicRenameKey
argument_list|(
name|srcKey
argument_list|)
condition|)
block|{
comment|// Remove RenamePending file
name|fs
operator|.
name|delete
argument_list|(
name|getRenamePendingFilePath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Freeing source folder lease is not necessary since the source
comment|// folder file was deleted.
block|}
block|}
DECL|method|getRenamePendingFilePath ()
specifier|private
name|Path
name|getRenamePendingFilePath
parameter_list|()
block|{
name|String
name|fileName
init|=
name|srcKey
operator|+
name|SUFFIX
decl_stmt|;
name|Path
name|fileNamePath
init|=
name|keyToPath
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
name|fs
operator|.
name|makeAbsolute
argument_list|(
name|fileNamePath
argument_list|)
decl_stmt|;
return|return
name|path
return|;
block|}
comment|/**      * Recover from a folder rename failure by redoing the intended work,      * as recorded in the -RenamePending.json file.      *       * @throws IOException      */
DECL|method|redo ()
specifier|public
name|void
name|redo
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
comment|// Nothing to do. The -RedoPending.json file should have already been
comment|// deleted.
return|return;
block|}
comment|// Try to get a lease on source folder to block concurrent access to it.
comment|// It may fail if the folder is already gone. We don't check if the
comment|// source exists explicitly because that could recursively trigger redo
comment|// and give an infinite recursion.
name|SelfRenewingLease
name|lease
init|=
literal|null
decl_stmt|;
name|boolean
name|sourceFolderGone
init|=
literal|false
decl_stmt|;
try|try
block|{
name|lease
operator|=
name|fs
operator|.
name|leaseSourceFolder
argument_list|(
name|srcKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AzureException
name|e
parameter_list|)
block|{
comment|// If the source folder was not found then somebody probably
comment|// raced with us and finished the rename first, or the
comment|// first rename failed right before deleting the rename pending
comment|// file.
name|String
name|errorCode
init|=
literal|""
decl_stmt|;
try|try
block|{
name|StorageException
name|se
init|=
operator|(
name|StorageException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|errorCode
operator|=
name|se
operator|.
name|getErrorCode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
empty_stmt|;
comment|// do nothing -- could not get errorCode
block|}
if|if
condition|(
name|errorCode
operator|.
name|equals
argument_list|(
literal|"BlobNotFound"
argument_list|)
condition|)
block|{
name|sourceFolderGone
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected error when trying to lease source folder name during "
operator|+
literal|"folder rename redo"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|sourceFolderGone
condition|)
block|{
comment|// Make sure the target folder exists.
name|Path
name|dst
init|=
name|fullPath
argument_list|(
name|dstKey
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
comment|// For each file inside the folder to be renamed,
comment|// make sure it has been renamed.
for|for
control|(
name|String
name|fileName
range|:
name|fileStrings
control|)
block|{
name|finishSingleFileRename
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
comment|// Remove the source folder. Don't check explicitly if it exists,
comment|// to avoid triggering redo recursively.
try|try
block|{
name|fs
operator|.
name|getStoreInterface
argument_list|()
operator|.
name|delete
argument_list|(
name|srcKey
argument_list|,
name|lease
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to delete source folder during folder rename redo. "
operator|+
literal|"If the source folder is already gone, this is not an error "
operator|+
literal|"condition. Continuing with redo."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Update the last-modified time of the parent folders of both source
comment|// and destination.
name|fs
operator|.
name|updateParentFolderLastModifiedTime
argument_list|(
name|srcKey
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateParentFolderLastModifiedTime
argument_list|(
name|dstKey
argument_list|)
expr_stmt|;
block|}
comment|// Remove the -RenamePending.json file.
name|fs
operator|.
name|delete
argument_list|(
name|getRenamePendingFilePath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// See if the source file is still there, and if it is, rename it.
DECL|method|finishSingleFileRename (String fileName)
specifier|private
name|void
name|finishSingleFileRename
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|srcFile
init|=
name|fullPath
argument_list|(
name|srcKey
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|Path
name|dstFile
init|=
name|fullPath
argument_list|(
name|dstKey
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|boolean
name|srcExists
init|=
name|fs
operator|.
name|exists
argument_list|(
name|srcFile
argument_list|)
decl_stmt|;
name|boolean
name|dstExists
init|=
name|fs
operator|.
name|exists
argument_list|(
name|dstFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcExists
operator|&&
operator|!
name|dstExists
condition|)
block|{
comment|// Rename gets exclusive access (via a lease) for HBase write-ahead log
comment|// (WAL) file processing correctness.  See the rename code for details.
name|String
name|srcName
init|=
name|fs
operator|.
name|pathToKey
argument_list|(
name|srcFile
argument_list|)
decl_stmt|;
name|String
name|dstName
init|=
name|fs
operator|.
name|pathToKey
argument_list|(
name|dstFile
argument_list|)
decl_stmt|;
name|fs
operator|.
name|getStoreInterface
argument_list|()
operator|.
name|rename
argument_list|(
name|srcName
argument_list|,
name|dstName
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|srcExists
operator|&&
name|dstExists
condition|)
block|{
comment|// Get a lease on source to block write access.
name|String
name|srcName
init|=
name|fs
operator|.
name|pathToKey
argument_list|(
name|srcFile
argument_list|)
decl_stmt|;
name|SelfRenewingLease
name|lease
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lease
operator|=
name|fs
operator|.
name|acquireLease
argument_list|(
name|srcFile
argument_list|)
expr_stmt|;
comment|// Delete the file. This will free the lease too.
name|fs
operator|.
name|getStoreInterface
argument_list|()
operator|.
name|delete
argument_list|(
name|srcName
argument_list|,
name|lease
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AzureException
name|e
parameter_list|)
block|{
name|String
name|errorCode
init|=
literal|""
decl_stmt|;
try|try
block|{
name|StorageException
name|e2
init|=
operator|(
name|StorageException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|errorCode
operator|=
name|e2
operator|.
name|getErrorCode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e3
parameter_list|)
block|{
comment|// do nothing if cast fails
block|}
comment|// If the rename already finished do nothing
if|if
condition|(
operator|!
name|errorCode
operator|.
name|equals
argument_list|(
literal|"BlobNotFound"
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|lease
operator|!=
literal|null
condition|)
block|{
name|lease
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to free lease because: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|srcExists
operator|&&
name|dstExists
condition|)
block|{
comment|// The rename already finished, so do nothing.
empty_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Attempting to complete rename of file "
operator|+
name|srcKey
operator|+
literal|"/"
operator|+
name|fileName
operator|+
literal|" during folder rename redo, and file was not found in source "
operator|+
literal|"or destination."
argument_list|)
throw|;
block|}
block|}
comment|// Return an absolute path for the specific fileName within the folder
comment|// specified by folderKey.
DECL|method|fullPath (String folderKey, String fileName)
specifier|private
name|Path
name|fullPath
parameter_list|(
name|String
name|folderKey
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|,
literal|"/"
operator|+
name|folderKey
operator|+
literal|"/"
operator|+
name|fileName
argument_list|)
return|;
block|}
DECL|method|fullPath (String fileKey)
specifier|private
name|Path
name|fullPath
parameter_list|(
name|String
name|fileKey
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|,
literal|"/"
operator|+
name|fileKey
argument_list|)
return|;
block|}
block|}
DECL|field|TRAILING_PERIOD_PLACEHOLDER
specifier|private
specifier|static
specifier|final
name|String
name|TRAILING_PERIOD_PLACEHOLDER
init|=
literal|"[[.]]"
decl_stmt|;
DECL|field|TRAILING_PERIOD_PLACEHOLDER_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|TRAILING_PERIOD_PLACEHOLDER_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\[\\[\\.\\]\\](?=$|/)"
argument_list|)
decl_stmt|;
DECL|field|TRAILING_PERIOD_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|TRAILING_PERIOD_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\.(?=$|/)"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"wasb"
return|;
block|}
comment|/**    *<p>    * A {@link FileSystem} for reading and writing files stored on<a    * href="http://store.azure.com/">Windows Azure</a>. This implementation is    * blob-based and stores files on Azure in their native form so they can be read    * by other Azure tools. This implementation uses HTTPS for secure network communication.    *</p>    */
DECL|class|Secure
specifier|public
specifier|static
class|class
name|Secure
extends|extends
name|NativeAzureFileSystem
block|{
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"wasbs"
return|;
block|}
block|}
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NativeAzureFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AZURE_BLOCK_SIZE_PROPERTY_NAME
specifier|static
specifier|final
name|String
name|AZURE_BLOCK_SIZE_PROPERTY_NAME
init|=
literal|"fs.azure.block.size"
decl_stmt|;
comment|/**    * The time span in seconds before which we consider a temp blob to be    * dangling (not being actively uploaded to) and up for reclamation.    *     * So e.g. if this is 60, then any temporary blobs more than a minute old    * would be considered dangling.    */
DECL|field|AZURE_TEMP_EXPIRY_PROPERTY_NAME
specifier|static
specifier|final
name|String
name|AZURE_TEMP_EXPIRY_PROPERTY_NAME
init|=
literal|"fs.azure.fsck.temp.expiry.seconds"
decl_stmt|;
DECL|field|AZURE_TEMP_EXPIRY_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|AZURE_TEMP_EXPIRY_DEFAULT
init|=
literal|3600
decl_stmt|;
DECL|field|PATH_DELIMITER
specifier|static
specifier|final
name|String
name|PATH_DELIMITER
init|=
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
DECL|field|AZURE_TEMP_FOLDER
specifier|static
specifier|final
name|String
name|AZURE_TEMP_FOLDER
init|=
literal|"_$azuretmpfolder$"
decl_stmt|;
DECL|field|AZURE_LIST_ALL
specifier|private
specifier|static
specifier|final
name|int
name|AZURE_LIST_ALL
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|AZURE_UNBOUNDED_DEPTH
specifier|private
specifier|static
specifier|final
name|int
name|AZURE_UNBOUNDED_DEPTH
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|MAX_AZURE_BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|long
name|MAX_AZURE_BLOCK_SIZE
init|=
literal|512
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
comment|/**    * The configuration property that determines which group owns files created    * in WASB.    */
DECL|field|AZURE_DEFAULT_GROUP_PROPERTY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_DEFAULT_GROUP_PROPERTY_NAME
init|=
literal|"fs.azure.permissions.supergroup"
decl_stmt|;
comment|/**    * The default value for fs.azure.permissions.supergroup. Chosen as the same    * default as DFS.    */
DECL|field|AZURE_DEFAULT_GROUP_DEFAULT
specifier|static
specifier|final
name|String
name|AZURE_DEFAULT_GROUP_DEFAULT
init|=
literal|"supergroup"
decl_stmt|;
DECL|field|AZURE_BLOCK_LOCATION_HOST_PROPERTY_NAME
specifier|static
specifier|final
name|String
name|AZURE_BLOCK_LOCATION_HOST_PROPERTY_NAME
init|=
literal|"fs.azure.block.location.impersonatedhost"
decl_stmt|;
DECL|field|AZURE_BLOCK_LOCATION_HOST_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_BLOCK_LOCATION_HOST_DEFAULT
init|=
literal|"localhost"
decl_stmt|;
DECL|field|AZURE_RINGBUFFER_CAPACITY_PROPERTY_NAME
specifier|static
specifier|final
name|String
name|AZURE_RINGBUFFER_CAPACITY_PROPERTY_NAME
init|=
literal|"fs.azure.ring.buffer.capacity"
decl_stmt|;
DECL|field|AZURE_OUTPUT_STREAM_BUFFER_SIZE_PROPERTY_NAME
specifier|static
specifier|final
name|String
name|AZURE_OUTPUT_STREAM_BUFFER_SIZE_PROPERTY_NAME
init|=
literal|"fs.azure.output.stream.buffer.size"
decl_stmt|;
DECL|field|SKIP_AZURE_METRICS_PROPERTY_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SKIP_AZURE_METRICS_PROPERTY_NAME
init|=
literal|"fs.azure.skip.metrics"
decl_stmt|;
DECL|class|NativeAzureFsInputStream
specifier|private
class|class
name|NativeAzureFsInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|in
specifier|private
name|InputStream
name|in
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|pos
specifier|private
name|long
name|pos
init|=
literal|0
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|isPageBlob
specifier|private
name|boolean
name|isPageBlob
decl_stmt|;
comment|// File length, valid only for streams over block blobs.
DECL|field|fileLength
specifier|private
name|long
name|fileLength
decl_stmt|;
DECL|method|NativeAzureFsInputStream (DataInputStream in, String key, long fileLength)
specifier|public
name|NativeAzureFsInputStream
parameter_list|(
name|DataInputStream
name|in
parameter_list|,
name|String
name|key
parameter_list|,
name|long
name|fileLength
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|isPageBlob
operator|=
name|store
operator|.
name|isPageBlobKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileLength
operator|=
name|fileLength
expr_stmt|;
block|}
comment|/**      * Return the size of the remaining available bytes      * if the size is less than or equal to {@link Integer#MAX_VALUE},      * otherwise, return {@link Integer#MAX_VALUE}.      *      * This is to match the behavior of DFSInputStream.available(),      * which some clients may rely on (HBase write-ahead log reading in      * particular).      */
annotation|@
name|Override
DECL|method|available ()
specifier|public
specifier|synchronized
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isPageBlob
condition|)
block|{
return|return
name|in
operator|.
name|available
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
specifier|final
name|long
name|remaining
init|=
name|this
operator|.
name|fileLength
operator|-
name|pos
decl_stmt|;
return|return
name|remaining
operator|<=
name|Integer
operator|.
name|MAX_VALUE
condition|?
operator|(
name|int
operator|)
name|remaining
else|:
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
block|}
comment|/*      * Reads the next byte of data from the input stream. The value byte is      * returned as an integer in the range 0 to 255. If no byte is available      * because the end of the stream has been reached, the value -1 is returned.      * This method blocks until input data is available, the end of the stream      * is detected, or an exception is thrown.      *      * @returns int An integer corresponding to the byte read.      */
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|result
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|statistics
operator|!=
literal|null
condition|)
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Return to the caller with the result.
comment|//
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|StorageException
condition|)
block|{
name|StorageException
name|storageExcp
init|=
operator|(
name|StorageException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Encountered Storage Exception for read on Blob : {}"
operator|+
literal|" Exception details: {} Error Code : {}"
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|storageExcp
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/*      * Reads up to len bytes of data from the input stream into an array of      * bytes. An attempt is made to read as many as len bytes, but a smaller      * number may be read. The number of bytes actually read is returned as an      * integer. This method blocks until input data is available, end of file is      * detected, or an exception is thrown. If len is zero, then no bytes are      * read and 0 is returned; otherwise, there is an attempt to read at least      * one byte. If no byte is available because the stream is at end of file,      * the value -1 is returned; otherwise, at least one byte is read and stored      * into b.      *      * @param b -- the buffer into which data is read      *      * @param off -- the start offset in the array b at which data is written      *      * @param len -- the maximum number of bytes read      *      * @ returns int The total number of byes read into the buffer, or -1 if      * there is no more data because the end of stream is reached.      */
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|result
operator|=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|pos
operator|+=
name|result
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|statistics
condition|)
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|// Return to the caller with the result.
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|StorageException
condition|)
block|{
name|StorageException
name|storageExcp
init|=
operator|(
name|StorageException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Encountered Storage Exception for read on Blob : {}"
operator|+
literal|" Exception details: {} Error Code : {}"
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|storageExcp
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
name|store
operator|.
name|retrieve
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|in
operator|.
name|skip
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Seek to position {}. Bytes skipped {}"
argument_list|,
name|pos
argument_list|,
name|this
operator|.
name|pos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|NativeAzureFsOutputStream
specifier|private
class|class
name|NativeAzureFsOutputStream
extends|extends
name|OutputStream
block|{
comment|// We should not override flush() to actually close current block and flush
comment|// to DFS, this will break applications that assume flush() is a no-op.
comment|// Applications are advised to use Syncable.hflush() for that purpose.
comment|// NativeAzureFsOutputStream needs to implement Syncable if needed.
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
DECL|field|keyEncoded
specifier|private
name|String
name|keyEncoded
decl_stmt|;
DECL|field|out
specifier|private
name|OutputStream
name|out
decl_stmt|;
DECL|method|NativeAzureFsOutputStream (OutputStream out, String aKey, String anEncodedKey)
specifier|public
name|NativeAzureFsOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|aKey
parameter_list|,
name|String
name|anEncodedKey
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check input arguments. The output stream should be non-null and the
comment|// keys
comment|// should be valid strings.
if|if
condition|(
literal|null
operator|==
name|out
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal argument: the output stream is null."
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|aKey
operator|||
literal|0
operator|==
name|aKey
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal argument the key string is null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|anEncodedKey
operator|||
literal|0
operator|==
name|anEncodedKey
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal argument the encoded key string is null or empty"
argument_list|)
throw|;
block|}
comment|// Initialize the member variables with the incoming parameters.
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|setKey
argument_list|(
name|aKey
argument_list|)
expr_stmt|;
name|setEncodedKey
argument_list|(
name|anEncodedKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
comment|// Close the output stream and decode the key for the output stream
comment|// before returning to the caller.
comment|//
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|restoreKey
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Writes the specified byte to this output stream. The general contract for      * write is that one byte is written to the output stream. The byte to be      * written is the eight low-order bits of the argument b. The 24 high-order      * bits of b are ignored.      *       * @param b      *          32-bit integer of block of 4 bytes      */
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|StorageException
condition|)
block|{
name|StorageException
name|storageExcp
init|=
operator|(
name|StorageException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Encountered Storage Exception for write on Blob : {}"
operator|+
literal|" Exception details: {} Error Code : {}"
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|storageExcp
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Writes b.length bytes from the specified byte array to this output      * stream. The general contract for write(b) is that it should have exactly      * the same effect as the call write(b, 0, b.length).      *       * @param b      *          Block of bytes to be written to the output stream.      */
annotation|@
name|Override
DECL|method|write (byte[] b)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|StorageException
condition|)
block|{
name|StorageException
name|storageExcp
init|=
operator|(
name|StorageException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Encountered Storage Exception for write on Blob : {}"
operator|+
literal|" Exception details: {} Error Code : {}"
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|storageExcp
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Writes<code>len</code> from the specified byte array starting at offset      *<code>off</code> to the output stream. The general contract for write(b,      * off, len) is that some of the bytes in the array<code>      * b</code b> are written to the output stream in order; element      *<code>b[off]</code> is the first byte written and      *<code>b[off+len-1]</code> is the last byte written by this operation.      *       * @param b      *          Byte array to be written.      * @param off      *          Write this offset in stream.      * @param len      *          Number of bytes to be written.      */
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|StorageException
condition|)
block|{
name|StorageException
name|storageExcp
init|=
operator|(
name|StorageException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Encountered Storage Exception for write on Blob : {}"
operator|+
literal|" Exception details: {} Error Code : {}"
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|storageExcp
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Get the blob name.      *       * @return String Blob name.      */
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * Set the blob name.      *       * @param key      *          Blob name.      */
DECL|method|setKey (String key)
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
comment|/**      * Get the blob name.      *       * @return String Blob name.      */
DECL|method|getEncodedKey ()
specifier|public
name|String
name|getEncodedKey
parameter_list|()
block|{
return|return
name|keyEncoded
return|;
block|}
comment|/**      * Set the blob name.      *       * @param anEncodedKey      *          Blob name.      */
DECL|method|setEncodedKey (String anEncodedKey)
specifier|public
name|void
name|setEncodedKey
parameter_list|(
name|String
name|anEncodedKey
parameter_list|)
block|{
name|this
operator|.
name|keyEncoded
operator|=
name|anEncodedKey
expr_stmt|;
block|}
comment|/**      * Restore the original key name from the m_key member variable. Note: The      * output file stream is created with an encoded blob store key to guarantee      * load balancing on the front end of the Azure storage partition servers.      * The create also includes the name of the original key value which is      * stored in the m_key member variable. This method should only be called      * when the stream is closed.      */
DECL|method|restoreKey ()
specifier|private
name|void
name|restoreKey
parameter_list|()
throws|throws
name|IOException
block|{
name|store
operator|.
name|rename
argument_list|(
name|getEncodedKey
argument_list|()
argument_list|,
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|store
specifier|private
name|NativeFileSystemStore
name|store
decl_stmt|;
DECL|field|actualStore
specifier|private
name|AzureNativeFileSystemStore
name|actualStore
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|blockSize
specifier|private
name|long
name|blockSize
init|=
name|MAX_AZURE_BLOCK_SIZE
decl_stmt|;
DECL|field|instrumentation
specifier|private
name|AzureFileSystemInstrumentation
name|instrumentation
decl_stmt|;
DECL|field|metricsSourceName
specifier|private
name|String
name|metricsSourceName
decl_stmt|;
DECL|field|isClosed
specifier|private
name|boolean
name|isClosed
init|=
literal|false
decl_stmt|;
DECL|field|suppressRetryPolicy
specifier|private
specifier|static
name|boolean
name|suppressRetryPolicy
init|=
literal|false
decl_stmt|;
comment|// A counter to create unique (within-process) names for my metrics sources.
DECL|field|metricsSourceNameCounter
specifier|private
specifier|static
name|AtomicInteger
name|metricsSourceNameCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|NativeAzureFileSystem ()
specifier|public
name|NativeAzureFileSystem
parameter_list|()
block|{
comment|// set store in initialize()
block|}
DECL|method|NativeAzureFileSystem (NativeFileSystemStore store)
specifier|public
name|NativeAzureFileSystem
parameter_list|(
name|NativeFileSystemStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
comment|/**    * Suppress the default retry policy for the Storage, useful in unit tests to    * test negative cases without waiting forever.    */
annotation|@
name|VisibleForTesting
DECL|method|suppressRetryPolicy ()
specifier|static
name|void
name|suppressRetryPolicy
parameter_list|()
block|{
name|suppressRetryPolicy
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Undo the effect of suppressRetryPolicy.    */
annotation|@
name|VisibleForTesting
DECL|method|resumeRetryPolicy ()
specifier|static
name|void
name|resumeRetryPolicy
parameter_list|()
block|{
name|suppressRetryPolicy
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Creates a new metrics source name that's unique within this process.    */
annotation|@
name|VisibleForTesting
DECL|method|newMetricsSourceName ()
specifier|public
specifier|static
name|String
name|newMetricsSourceName
parameter_list|()
block|{
name|int
name|number
init|=
name|metricsSourceNameCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
specifier|final
name|String
name|baseName
init|=
literal|"AzureFileSystemMetrics"
decl_stmt|;
if|if
condition|(
name|number
operator|==
literal|1
condition|)
block|{
comment|// No need for a suffix for the first one
return|return
name|baseName
return|;
block|}
else|else
block|{
return|return
name|baseName
operator|+
name|number
return|;
block|}
block|}
comment|/**    * Checks if the given URI scheme is a scheme that's affiliated with the Azure    * File System.    *     * @param scheme    *          The URI scheme.    * @return true iff it's an Azure File System URI scheme.    */
DECL|method|isWasbScheme (String scheme)
specifier|private
specifier|static
name|boolean
name|isWasbScheme
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
comment|// The valid schemes are: asv (old name), asvs (old name over HTTPS),
comment|// wasb (new name), wasbs (new name over HTTPS).
return|return
name|scheme
operator|!=
literal|null
operator|&&
operator|(
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"asv"
argument_list|)
operator|||
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"asvs"
argument_list|)
operator|||
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"wasb"
argument_list|)
operator|||
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"wasbs"
argument_list|)
operator|)
return|;
block|}
comment|/**    * Puts in the authority of the default file system if it is a WASB file    * system and the given URI's authority is null.    *     * @return The URI with reconstructed authority if necessary and possible.    */
DECL|method|reconstructAuthorityIfNeeded (URI uri, Configuration conf)
specifier|private
specifier|static
name|URI
name|reconstructAuthorityIfNeeded
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|uri
operator|.
name|getAuthority
argument_list|()
condition|)
block|{
comment|// If WASB is the default file system, get the authority from there
name|URI
name|defaultUri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultUri
operator|!=
literal|null
operator|&&
name|isWasbScheme
argument_list|(
name|defaultUri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
comment|// Reconstruct the URI with the authority from the default URI.
return|return
operator|new
name|URI
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|defaultUri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|uri
operator|.
name|getQuery
argument_list|()
argument_list|,
name|uri
operator|.
name|getFragment
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// This should never happen.
throw|throw
operator|new
name|Error
argument_list|(
literal|"Bad URI construction"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|checkPath (Path path)
specifier|protected
name|void
name|checkPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// Make sure to reconstruct the path's authority if needed
name|super
operator|.
name|checkPath
argument_list|(
operator|new
name|Path
argument_list|(
name|reconstructAuthorityIfNeeded
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|getConf
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
comment|// Check authority for the URI to guarantee that it is non-null.
name|uri
operator|=
name|reconstructAuthorityIfNeeded
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|uri
operator|.
name|getAuthority
argument_list|()
condition|)
block|{
specifier|final
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Cannot initialize WASB file system, URI authority not recognized."
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
name|super
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|store
operator|=
name|createDefaultStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|instrumentation
operator|=
operator|new
name|AzureFileSystemInstrumentation
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|SKIP_AZURE_METRICS_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// Make sure the metrics system is available before interacting with Azure
name|AzureFileSystemMetricsSystem
operator|.
name|fileSystemStarted
argument_list|()
expr_stmt|;
name|metricsSourceName
operator|=
name|newMetricsSourceName
argument_list|()
expr_stmt|;
name|String
name|sourceDesc
init|=
literal|"Azure Storage Volume File System metrics"
decl_stmt|;
name|AzureFileSystemMetricsSystem
operator|.
name|registerSource
argument_list|(
name|metricsSourceName
argument_list|,
name|sourceDesc
argument_list|,
name|instrumentation
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|,
name|instrumentation
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|workingDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|getUri
argument_list|()
argument_list|,
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|AZURE_BLOCK_SIZE_PROPERTY_NAME
argument_list|,
name|MAX_AZURE_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"NativeAzureFileSystem. Initializing."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  blockSize  = {}"
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|AZURE_BLOCK_SIZE_PROPERTY_NAME
argument_list|,
name|MAX_AZURE_BLOCK_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createDefaultStore (Configuration conf)
specifier|private
name|NativeFileSystemStore
name|createDefaultStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|actualStore
operator|=
operator|new
name|AzureNativeFileSystemStore
argument_list|()
expr_stmt|;
if|if
condition|(
name|suppressRetryPolicy
condition|)
block|{
name|actualStore
operator|.
name|suppressRetryPolicy
argument_list|()
expr_stmt|;
block|}
return|return
name|actualStore
return|;
block|}
comment|/**    * Azure Storage doesn't allow the blob names to end in a period,    * so encode this here to work around that limitation.    */
DECL|method|encodeTrailingPeriod (String toEncode)
specifier|private
specifier|static
name|String
name|encodeTrailingPeriod
parameter_list|(
name|String
name|toEncode
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|TRAILING_PERIOD_PATTERN
operator|.
name|matcher
argument_list|(
name|toEncode
argument_list|)
decl_stmt|;
return|return
name|matcher
operator|.
name|replaceAll
argument_list|(
name|TRAILING_PERIOD_PLACEHOLDER
argument_list|)
return|;
block|}
comment|/**    * Reverse the encoding done by encodeTrailingPeriod().    */
DECL|method|decodeTrailingPeriod (String toDecode)
specifier|private
specifier|static
name|String
name|decodeTrailingPeriod
parameter_list|(
name|String
name|toDecode
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|TRAILING_PERIOD_PLACEHOLDER_PATTERN
operator|.
name|matcher
argument_list|(
name|toDecode
argument_list|)
decl_stmt|;
return|return
name|matcher
operator|.
name|replaceAll
argument_list|(
literal|"."
argument_list|)
return|;
block|}
comment|/**    * Convert the path to a key. By convention, any leading or trailing slash is    * removed, except for the special case of a single slash.    */
annotation|@
name|VisibleForTesting
DECL|method|pathToKey (Path path)
specifier|public
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// Convert the path to a URI to parse the scheme, the authority, and the
comment|// path from the path object.
name|URI
name|tmpUri
init|=
name|path
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|String
name|pathUri
init|=
name|tmpUri
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// The scheme and authority is valid. If the path does not exist add a "/"
comment|// separator to list the root of the container.
name|Path
name|newPath
init|=
name|path
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|pathUri
argument_list|)
condition|)
block|{
name|newPath
operator|=
operator|new
name|Path
argument_list|(
name|tmpUri
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
comment|// Verify path is absolute if the path refers to a windows drive scheme.
if|if
condition|(
operator|!
name|newPath
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Path must be absolute: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|String
name|key
init|=
literal|null
decl_stmt|;
name|key
operator|=
name|newPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|key
operator|=
name|removeTrailingSlash
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|key
operator|=
name|encodeTrailingPeriod
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|key
return|;
block|}
else|else
block|{
return|return
name|key
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
comment|// remove initial slash
block|}
block|}
comment|// Remove any trailing slash except for the case of a single slash.
DECL|method|removeTrailingSlash (String key)
specifier|private
specifier|static
name|String
name|removeTrailingSlash
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|key
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|key
return|;
block|}
if|if
condition|(
name|key
operator|.
name|charAt
argument_list|(
name|key
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
condition|)
block|{
return|return
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
DECL|method|keyToPath (String key)
specifier|private
specifier|static
name|Path
name|keyToPath
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
return|;
comment|// container
block|}
return|return
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|decodeTrailingPeriod
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get the absolute version of the path (fully qualified).    * This is public for testing purposes.    *    * @param path    * @return fully qualified path    */
annotation|@
name|VisibleForTesting
DECL|method|makeAbsolute (Path path)
specifier|public
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**    * For unit test purposes, retrieves the AzureNativeFileSystemStore store    * backing this file system.    *     * @return The store object.    */
annotation|@
name|VisibleForTesting
DECL|method|getStore ()
specifier|public
name|AzureNativeFileSystemStore
name|getStore
parameter_list|()
block|{
return|return
name|actualStore
return|;
block|}
DECL|method|getStoreInterface ()
name|NativeFileSystemStore
name|getStoreInterface
parameter_list|()
block|{
return|return
name|store
return|;
block|}
comment|/**    * Gets the metrics source for this file system.    * This is mainly here for unit testing purposes.    *    * @return the metrics source.    */
DECL|method|getInstrumentation ()
specifier|public
name|AzureFileSystemInstrumentation
name|getInstrumentation
parameter_list|()
block|{
return|return
name|instrumentation
return|;
block|}
comment|/** This optional operation is not yet supported. */
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
name|permission
argument_list|,
name|overwrite
argument_list|,
literal|true
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
operator|(
name|SelfRenewingLease
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get a self-renewing lease on the specified file.    */
DECL|method|acquireLease (Path path)
specifier|public
name|SelfRenewingLease
name|acquireLease
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|AzureException
block|{
name|String
name|fullKey
init|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|getStore
argument_list|()
operator|.
name|acquireLease
argument_list|(
name|fullKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createNonRecursive (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
name|f
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// Get exclusive access to folder if this is a directory designated
comment|// for atomic rename. The primary use case of for HBase write-ahead
comment|// log file management.
name|SelfRenewingLease
name|lease
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|store
operator|.
name|isAtomicRenameKey
argument_list|(
name|pathToKey
argument_list|(
name|f
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|lease
operator|=
name|acquireLease
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AzureException
name|e
parameter_list|)
block|{
name|String
name|errorCode
init|=
literal|""
decl_stmt|;
try|try
block|{
name|StorageException
name|e2
init|=
operator|(
name|StorageException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|errorCode
operator|=
name|e2
operator|.
name|getErrorCode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e3
parameter_list|)
block|{
comment|// do nothing if cast fails
block|}
if|if
condition|(
name|errorCode
operator|.
name|equals
argument_list|(
literal|"BlobNotFound"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Cannot create file "
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|" because parent folder does not exist."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got unexpected exception trying to get lease on {} . {}"
argument_list|,
name|pathToKey
argument_list|(
name|parent
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// See if the parent folder exists. If not, throw error.
comment|// The exists() check will push any pending rename operation forward,
comment|// if there is one, and return false.
comment|//
comment|// At this point, we have exclusive access to the source folder
comment|// via the lease, so we will not conflict with an active folder
comment|// rename operation.
if|if
condition|(
operator|!
name|exists
argument_list|(
name|parent
argument_list|)
condition|)
block|{
try|try
block|{
comment|// This'll let the keep-alive thread exit as soon as it wakes up.
name|lease
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to free lease because: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Cannot create file "
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|" because parent folder does not exist."
argument_list|)
throw|;
block|}
comment|// Create file inside folder.
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|create
argument_list|(
name|f
argument_list|,
name|permission
argument_list|,
name|overwrite
argument_list|,
literal|false
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|lease
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Release exclusive access to folder.
try|try
block|{
if|if
condition|(
name|lease
operator|!=
literal|null
condition|)
block|{
name|lease
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NativeAzureFileSystem
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
literal|"Unable to free lease on "
operator|+
name|parent
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|out
return|;
block|}
annotation|@
name|Override
DECL|method|createNonRecursive (Path f, FsPermission permission, EnumSet<CreateFlag> flags, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flags
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check if file should be appended or overwritten. Assume that the file
comment|// is overwritten on if the CREATE and OVERWRITE create flags are set. Note
comment|// that any other combinations of create flags will result in an open new or
comment|// open with append.
specifier|final
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|createflags
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
decl_stmt|;
name|boolean
name|overwrite
init|=
name|flags
operator|.
name|containsAll
argument_list|(
name|createflags
argument_list|)
decl_stmt|;
comment|// Delegate the create non-recursive call.
return|return
name|this
operator|.
name|createNonRecursive
argument_list|(
name|f
argument_list|,
name|permission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createNonRecursive (Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|createNonRecursive
argument_list|(
name|f
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
comment|/**    * Create an Azure blob and return an output stream to use    * to write data to it.    *    * @param f    * @param permission    * @param overwrite    * @param createParent    * @param bufferSize    * @param replication    * @param blockSize    * @param progress    * @param parentFolderLease Lease on parent folder (or null if    * no lease).    * @return    * @throws IOException    */
DECL|method|create (Path f, FsPermission permission, boolean overwrite, boolean createParent, int bufferSize, short replication, long blockSize, Progressable progress, SelfRenewingLease parentFolderLease)
specifier|private
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|SelfRenewingLease
name|parentFolderLease
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating file: {}"
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|containsColon
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create file "
operator|+
name|f
operator|+
literal|" through WASB that has colons in the name"
argument_list|)
throw|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
name|FileMetadata
name|existingMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingMetadata
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create file "
operator|+
name|f
operator|+
literal|"; already exists as a directory."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File already exists:"
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
name|Path
name|parentFolder
init|=
name|absolutePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentFolder
operator|!=
literal|null
operator|&&
name|parentFolder
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// skip root
comment|// Update the parent folder last modified time if the parent folder
comment|// already exists.
name|String
name|parentKey
init|=
name|pathToKey
argument_list|(
name|parentFolder
argument_list|)
decl_stmt|;
name|FileMetadata
name|parentMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|parentKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentMetadata
operator|!=
literal|null
operator|&&
name|parentMetadata
operator|.
name|isDir
argument_list|()
operator|&&
name|parentMetadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Explicit
condition|)
block|{
if|if
condition|(
name|parentFolderLease
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|updateFolderLastModifiedTime
argument_list|(
name|parentKey
argument_list|,
name|parentFolderLease
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateParentFolderLastModifiedTime
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Make sure that the parent folder exists.
comment|// Create it using inherited permissions from the first existing directory going up the path
name|Path
name|firstExisting
init|=
name|parentFolder
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|FileMetadata
name|metadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|pathToKey
argument_list|(
name|firstExisting
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
comment|// Guaranteed to terminate properly because we will eventually hit root, which will return non-null metadata
name|firstExisting
operator|=
name|firstExisting
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|metadata
operator|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|pathToKey
argument_list|(
name|firstExisting
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mkdirs
argument_list|(
name|parentFolder
argument_list|,
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Mask the permission first (with the default permission mask as well).
name|FsPermission
name|masked
init|=
name|applyUMask
argument_list|(
name|permission
argument_list|,
name|UMaskApplyMode
operator|.
name|NewFile
argument_list|)
decl_stmt|;
name|PermissionStatus
name|permissionStatus
init|=
name|createPermissionStatus
argument_list|(
name|masked
argument_list|)
decl_stmt|;
name|OutputStream
name|bufOutStream
decl_stmt|;
if|if
condition|(
name|store
operator|.
name|isPageBlobKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// Store page blobs directly in-place without renames.
name|bufOutStream
operator|=
name|store
operator|.
name|storefile
argument_list|(
name|key
argument_list|,
name|permissionStatus
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This is a block blob, so open the output blob stream based on the
comment|// encoded key.
comment|//
name|String
name|keyEncoded
init|=
name|encodeKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// First create a blob at the real key, pointing back to the temporary file
comment|// This accomplishes a few things:
comment|// 1. Makes sure we can create a file there.
comment|// 2. Makes it visible to other concurrent threads/processes/nodes what
comment|// we're
comment|// doing.
comment|// 3. Makes it easier to restore/cleanup data in the event of us crashing.
name|store
operator|.
name|storeEmptyLinkFile
argument_list|(
name|key
argument_list|,
name|keyEncoded
argument_list|,
name|permissionStatus
argument_list|)
expr_stmt|;
comment|// The key is encoded to point to a common container at the storage server.
comment|// This reduces the number of splits on the server side when load balancing.
comment|// Ingress to Azure storage can take advantage of earlier splits. We remove
comment|// the root path to the key and prefix a random GUID to the tail (or leaf
comment|// filename) of the key. Keys are thus broadly and randomly distributed over
comment|// a single container to ease load balancing on the storage server. When the
comment|// blob is committed it is renamed to its earlier key. Uncommitted blocks
comment|// are not cleaned up and we leave it to Azure storage to garbage collect
comment|// these
comment|// blocks.
name|bufOutStream
operator|=
operator|new
name|NativeAzureFsOutputStream
argument_list|(
name|store
operator|.
name|storefile
argument_list|(
name|keyEncoded
argument_list|,
name|permissionStatus
argument_list|)
argument_list|,
name|key
argument_list|,
name|keyEncoded
argument_list|)
expr_stmt|;
block|}
comment|// Construct the data output stream from the buffered output stream.
name|FSDataOutputStream
name|fsOut
init|=
operator|new
name|FSDataOutputStream
argument_list|(
name|bufOutStream
argument_list|,
name|statistics
argument_list|)
decl_stmt|;
comment|// Increment the counter
name|instrumentation
operator|.
name|fileCreated
argument_list|()
expr_stmt|;
comment|// Return data output stream to caller.
return|return
name|fsOut
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|delete (Path path)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delete
argument_list|(
name|f
argument_list|,
name|recursive
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Delete the specified file or folder. The parameter    * skipParentFolderLastModifidedTimeUpdate    * is used in the case of atomic folder rename redo. In that case, there is    * a lease on the parent folder, so (without reworking the code) modifying    * the parent folder update time will fail because of a conflict with the    * lease. Since we are going to delete the folder soon anyway so accurate    * modified time is not necessary, it's easier to just skip    * the modified time update.    *    * @param f    * @param recursive    * @param skipParentFolderLastModifidedTimeUpdate If true, don't update the folder last    * modified time.    * @return true if and only if the file is deleted    * @throws IOException    */
DECL|method|delete (Path f, boolean recursive, boolean skipParentFolderLastModifidedTimeUpdate)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|skipParentFolderLastModifidedTimeUpdate
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting file: {}"
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
comment|// Capture the metadata for the path.
comment|//
name|FileMetadata
name|metaFile
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|metaFile
condition|)
block|{
comment|// The path to be deleted does not exist.
return|return
literal|false
return|;
block|}
comment|// The path exists, determine if it is a folder containing objects,
comment|// an empty folder, or a simple file and take the appropriate actions.
if|if
condition|(
operator|!
name|metaFile
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// The path specifies a file. We need to check the parent path
comment|// to make sure it's a proper materialized directory before we
comment|// delete the file. Otherwise we may get into a situation where
comment|// the file we were deleting was the last one in an implicit directory
comment|// (e.g. the blob store only contains the blob a/b and there's no
comment|// corresponding directory blob a) and that would implicitly delete
comment|// the directory as well, which is not correct.
name|Path
name|parentPath
init|=
name|absolutePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentPath
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Not root
name|String
name|parentKey
init|=
name|pathToKey
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|FileMetadata
name|parentMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|parentKey
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parentMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// Invalid state: the parent path is actually a file. Throw.
throw|throw
operator|new
name|AzureException
argument_list|(
literal|"File "
operator|+
name|f
operator|+
literal|" has a parent directory "
operator|+
name|parentPath
operator|+
literal|" which is also a file. Can't resolve."
argument_list|)
throw|;
block|}
if|if
condition|(
name|parentMetadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found an implicit parent directory while trying to"
operator|+
literal|" delete the file {}. Creating the directory blob for"
operator|+
literal|" it in {}."
argument_list|,
name|f
argument_list|,
name|parentKey
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|parentKey
argument_list|,
name|createPermissionStatus
argument_list|(
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|skipParentFolderLastModifidedTimeUpdate
condition|)
block|{
name|updateParentFolderLastModifiedTime
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|store
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|instrumentation
operator|.
name|fileDeleted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// The path specifies a folder. Recursively delete all entries under the
comment|// folder.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Directory Delete encountered: {}"
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|parentPath
init|=
name|absolutePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentPath
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|parentKey
init|=
name|pathToKey
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|FileMetadata
name|parentMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|parentKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentMetadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found an implicit parent directory while trying to"
operator|+
literal|" delete the directory {}. Creating the directory blob for"
operator|+
literal|" it in {}. "
argument_list|,
name|f
argument_list|,
name|parentKey
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|parentKey
argument_list|,
name|createPermissionStatus
argument_list|(
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// List all the blobs in the current folder.
name|String
name|priorLastKey
init|=
literal|null
decl_stmt|;
name|PartialListing
name|listing
init|=
name|store
operator|.
name|listAll
argument_list|(
name|key
argument_list|,
name|AZURE_LIST_ALL
argument_list|,
literal|1
argument_list|,
name|priorLastKey
argument_list|)
decl_stmt|;
name|FileMetadata
index|[]
name|contents
init|=
name|listing
operator|.
name|getFiles
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|recursive
operator|&&
name|contents
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// The folder is non-empty and recursive delete was not specified.
comment|// Throw an exception indicating that a non-recursive delete was
comment|// specified for a non-empty folder.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Non-recursive delete of non-empty directory "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// Delete all the files in the folder.
for|for
control|(
name|FileMetadata
name|p
range|:
name|contents
control|)
block|{
comment|// Tag on the directory name found as the suffix of the suffix of the
comment|// parent directory to get the new absolute path.
name|String
name|suffix
init|=
name|p
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|PATH_DELIMITER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|key
operator|+
name|suffix
argument_list|)
expr_stmt|;
name|instrumentation
operator|.
name|fileDeleted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Recursively delete contents of the sub-folders. Notice this also
comment|// deletes the blob for the directory.
if|if
condition|(
operator|!
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|f
operator|.
name|toString
argument_list|()
operator|+
name|suffix
argument_list|)
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
name|store
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// Update parent directory last modified time
name|Path
name|parent
init|=
name|absolutePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// not root
if|if
condition|(
operator|!
name|skipParentFolderLastModifidedTimeUpdate
condition|)
block|{
name|updateParentFolderLastModifiedTime
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|instrumentation
operator|.
name|directoryDeleted
argument_list|()
expr_stmt|;
block|}
comment|// File or directory was successfully deleted.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete Successful for : {}"
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting the file status for {}"
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Capture the absolute path and the path to key.
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// root always exists
return|return
name|newDirectory
argument_list|(
literal|null
argument_list|,
name|absolutePath
argument_list|)
return|;
block|}
comment|// The path is either a folder or a file. Retrieve metadata to
comment|// determine if it is a directory or file.
name|FileMetadata
name|meta
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|meta
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// The path is a folder with files in it.
comment|//
name|LOG
operator|.
name|debug
argument_list|(
literal|"Path {} is a folder."
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// If a rename operation for the folder was pending, redo it.
comment|// Then the file does not exist, so signal that.
if|if
condition|(
name|conditionalRedoFolderRename
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|absolutePath
operator|+
literal|": No such file or directory."
argument_list|)
throw|;
block|}
comment|// Return reference to the directory object.
return|return
name|newDirectory
argument_list|(
name|meta
argument_list|,
name|absolutePath
argument_list|)
return|;
block|}
comment|// The path is a file.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found the path: {} as a file."
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Return with reference to a file object.
return|return
name|newFile
argument_list|(
name|meta
argument_list|,
name|absolutePath
argument_list|)
return|;
block|}
comment|// File not found. Throw exception no such file or directory.
comment|//
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|absolutePath
operator|+
literal|": No such file or directory."
argument_list|)
throw|;
block|}
comment|// Return true if there is a rename pending and we redo it, otherwise false.
DECL|method|conditionalRedoFolderRename (Path f)
specifier|private
name|boolean
name|conditionalRedoFolderRename
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Can't rename /, so return immediately in that case.
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check if there is a -RenamePending.json file for this folder, and if so,
comment|// redo the rename.
name|Path
name|absoluteRenamePendingFile
init|=
name|renamePendingFilePath
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|absoluteRenamePendingFile
argument_list|)
condition|)
block|{
name|FolderRenamePending
name|pending
init|=
operator|new
name|FolderRenamePending
argument_list|(
name|absoluteRenamePendingFile
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|pending
operator|.
name|redo
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Return the path name that would be used for rename of folder with path f.
DECL|method|renamePendingFilePath (Path f)
specifier|private
name|Path
name|renamePendingFilePath
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
name|Path
name|absPath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|key
operator|+=
literal|"-RenamePending.json"
expr_stmt|;
return|return
name|keyToPath
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
comment|/**    * Retrieve the status of a given path if it is a file, or of all the    * contained files if it is a directory.    */
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Listing status for {}"
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|FileStatus
argument_list|>
name|status
init|=
operator|new
name|TreeSet
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|FileMetadata
name|meta
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|meta
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found path as a file"
argument_list|)
expr_stmt|;
return|return
operator|new
name|FileStatus
index|[]
block|{
name|newFile
argument_list|(
name|meta
argument_list|,
name|absolutePath
argument_list|)
block|}
return|;
block|}
name|String
name|partialKey
init|=
literal|null
decl_stmt|;
name|PartialListing
name|listing
init|=
name|store
operator|.
name|list
argument_list|(
name|key
argument_list|,
name|AZURE_LIST_ALL
argument_list|,
literal|1
argument_list|,
name|partialKey
argument_list|)
decl_stmt|;
comment|// For any -RenamePending.json files in the listing,
comment|// push the rename forward.
name|boolean
name|renamed
init|=
name|conditionalRedoFolderRenames
argument_list|(
name|listing
argument_list|)
decl_stmt|;
comment|// If any renames were redone, get another listing,
comment|// since the current one may have changed due to the redo.
if|if
condition|(
name|renamed
condition|)
block|{
name|listing
operator|=
name|store
operator|.
name|list
argument_list|(
name|key
argument_list|,
name|AZURE_LIST_ALL
argument_list|,
literal|1
argument_list|,
name|partialKey
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FileMetadata
name|fileMetadata
range|:
name|listing
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|Path
name|subpath
init|=
name|keyToPath
argument_list|(
name|fileMetadata
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// Test whether the metadata represents a file or directory and
comment|// add the appropriate metadata object.
comment|//
comment|// Note: There was a very old bug here where directories were added
comment|// to the status set as files flattening out recursive listings
comment|// using "-lsr" down the file system hierarchy.
if|if
condition|(
name|fileMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// Make sure we hide the temp upload folder
if|if
condition|(
name|fileMetadata
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|AZURE_TEMP_FOLDER
argument_list|)
condition|)
block|{
comment|// Don't expose that.
continue|continue;
block|}
name|status
operator|.
name|add
argument_list|(
name|newDirectory
argument_list|(
name|fileMetadata
argument_list|,
name|subpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|.
name|add
argument_list|(
name|newFile
argument_list|(
name|fileMetadata
argument_list|,
name|subpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found path as a directory with {}"
operator|+
literal|" files in it."
argument_list|,
name|status
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// There is no metadata found for the path.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Did not find any metadata for path: {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File"
operator|+
name|f
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
return|return
name|status
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|// Redo any folder renames needed if there are rename pending files in the
comment|// directory listing. Return true if one or more redo operations were done.
DECL|method|conditionalRedoFolderRenames (PartialListing listing)
specifier|private
name|boolean
name|conditionalRedoFolderRenames
parameter_list|(
name|PartialListing
name|listing
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|boolean
name|renamed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FileMetadata
name|fileMetadata
range|:
name|listing
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|Path
name|subpath
init|=
name|keyToPath
argument_list|(
name|fileMetadata
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRenamePendingFile
argument_list|(
name|subpath
argument_list|)
condition|)
block|{
name|FolderRenamePending
name|pending
init|=
operator|new
name|FolderRenamePending
argument_list|(
name|subpath
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|pending
operator|.
name|redo
argument_list|()
expr_stmt|;
name|renamed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|renamed
return|;
block|}
comment|// True if this is a folder rename pending file, else false.
DECL|method|isRenamePendingFile (Path path)
specifier|private
name|boolean
name|isRenamePendingFile
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|FolderRenamePending
operator|.
name|SUFFIX
argument_list|)
return|;
block|}
DECL|method|newFile (FileMetadata meta, Path path)
specifier|private
name|FileStatus
name|newFile
parameter_list|(
name|FileMetadata
name|meta
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|meta
operator|.
name|getLength
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|blockSize
argument_list|,
name|meta
operator|.
name|getLastModified
argument_list|()
argument_list|,
literal|0
argument_list|,
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
argument_list|,
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|getUri
argument_list|()
argument_list|,
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newDirectory (FileMetadata meta, Path path)
specifier|private
name|FileStatus
name|newDirectory
parameter_list|(
name|FileMetadata
name|meta
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
name|blockSize
argument_list|,
name|meta
operator|==
literal|null
condition|?
literal|0
else|:
name|meta
operator|.
name|getLastModified
argument_list|()
argument_list|,
literal|0
argument_list|,
name|meta
operator|==
literal|null
condition|?
name|FsPermission
operator|.
name|getDefault
argument_list|()
else|:
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
argument_list|,
name|meta
operator|==
literal|null
condition|?
literal|""
else|:
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|meta
operator|==
literal|null
condition|?
literal|""
else|:
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|getUri
argument_list|()
argument_list|,
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|enum|UMaskApplyMode
specifier|private
specifier|static
enum|enum
name|UMaskApplyMode
block|{
DECL|enumConstant|NewFile
name|NewFile
block|,
DECL|enumConstant|NewDirectory
name|NewDirectory
block|,
DECL|enumConstant|NewDirectoryNoUmask
name|NewDirectoryNoUmask
block|,
DECL|enumConstant|ChangeExistingFile
name|ChangeExistingFile
block|,
DECL|enumConstant|ChangeExistingDirectory
name|ChangeExistingDirectory
block|,   }
comment|/**    * Applies the applicable UMASK's on the given permission.    *     * @param permission    *          The permission to mask.    * @param applyMode    *          Whether to also apply the default umask.    * @return The masked persmission.    */
DECL|method|applyUMask (final FsPermission permission, final UMaskApplyMode applyMode)
specifier|private
name|FsPermission
name|applyUMask
parameter_list|(
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|UMaskApplyMode
name|applyMode
parameter_list|)
block|{
name|FsPermission
name|newPermission
init|=
operator|new
name|FsPermission
argument_list|(
name|permission
argument_list|)
decl_stmt|;
comment|// Apply the default umask - this applies for new files or directories.
if|if
condition|(
name|applyMode
operator|==
name|UMaskApplyMode
operator|.
name|NewFile
operator|||
name|applyMode
operator|==
name|UMaskApplyMode
operator|.
name|NewDirectory
condition|)
block|{
name|newPermission
operator|=
name|newPermission
operator|.
name|applyUMask
argument_list|(
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newPermission
return|;
block|}
comment|/**    * Creates the PermissionStatus object to use for the given permission, based    * on the current user in context.    *     * @param permission    *          The permission for the file.    * @return The permission status object to use.    * @throws IOException    *           If login fails in getCurrentUser    */
DECL|method|createPermissionStatus (FsPermission permission)
specifier|private
name|PermissionStatus
name|createPermissionStatus
parameter_list|(
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create the permission status for this file based on current user
return|return
operator|new
name|PermissionStatus
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|AZURE_DEFAULT_GROUP_PROPERTY_NAME
argument_list|,
name|AZURE_DEFAULT_GROUP_DEFAULT
argument_list|)
argument_list|,
name|permission
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mkdirs
argument_list|(
name|f
argument_list|,
name|permission
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|mkdirs (Path f, FsPermission permission, boolean noUmask)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|noUmask
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating directory: {}"
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|containsColon
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create directory "
operator|+
name|f
operator|+
literal|" through WASB that has colons in the name"
argument_list|)
throw|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|PermissionStatus
name|permissionStatus
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|noUmask
condition|)
block|{
comment|// ensure owner still has wx permissions at the minimum
name|permissionStatus
operator|=
name|createPermissionStatus
argument_list|(
name|applyUMask
argument_list|(
name|FsPermission
operator|.
name|createImmutable
argument_list|(
call|(
name|short
call|)
argument_list|(
name|permission
operator|.
name|toShort
argument_list|()
operator||
name|USER_WX_PERMISION
argument_list|)
argument_list|)
argument_list|,
name|UMaskApplyMode
operator|.
name|NewDirectoryNoUmask
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permissionStatus
operator|=
name|createPermissionStatus
argument_list|(
name|applyUMask
argument_list|(
name|permission
argument_list|,
name|UMaskApplyMode
operator|.
name|NewDirectory
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keysToCreateAsFolder
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keysToUpdateAsFolder
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|childCreated
init|=
literal|false
decl_stmt|;
comment|// Check that there is no file in the parent chain of the given path.
for|for
control|(
name|Path
name|current
init|=
name|absolutePath
init|,
name|parent
init|=
name|current
operator|.
name|getParent
argument_list|()
init|;
name|parent
operator|!=
literal|null
condition|;
comment|// Stop when you get to the root
name|current
operator|=
name|parent
operator|,
name|parent
operator|=
name|current
operator|.
name|getParent
argument_list|()
control|)
block|{
name|String
name|currentKey
init|=
name|pathToKey
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|FileMetadata
name|currentMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|currentKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentMetadata
operator|!=
literal|null
operator|&&
operator|!
name|currentMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create directory "
operator|+
name|f
operator|+
literal|" because "
operator|+
name|current
operator|+
literal|" is an existing file."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|currentMetadata
operator|==
literal|null
condition|)
block|{
name|keysToCreateAsFolder
operator|.
name|add
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
name|childCreated
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// The directory already exists. Its last modified time need to be
comment|// updated if there is a child directory created under it.
if|if
condition|(
name|childCreated
condition|)
block|{
name|keysToUpdateAsFolder
operator|.
name|add
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
block|}
name|childCreated
operator|=
literal|false
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|currentKey
range|:
name|keysToCreateAsFolder
control|)
block|{
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|currentKey
argument_list|,
name|permissionStatus
argument_list|)
expr_stmt|;
block|}
name|instrumentation
operator|.
name|directoryCreated
argument_list|()
expr_stmt|;
comment|// otherwise throws exception
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opening file: {}"
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
name|FileMetadata
name|meta
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|meta
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|f
operator|.
name|toString
argument_list|()
operator|+
literal|" is a directory not a file."
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|BufferedFSInputStream
argument_list|(
operator|new
name|NativeAzureFsInputStream
argument_list|(
name|store
operator|.
name|retrieve
argument_list|(
name|key
argument_list|)
argument_list|,
name|key
argument_list|,
name|meta
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|FolderRenamePending
name|renamePending
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moving {} to {}"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
if|if
condition|(
name|containsColon
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot rename to file "
operator|+
name|dst
operator|+
literal|" through WASB that has colons in the name"
argument_list|)
throw|;
block|}
name|String
name|srcKey
init|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcKey
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Cannot rename root of file system
return|return
literal|false
return|;
block|}
comment|// Figure out the final destination
name|Path
name|absoluteDst
init|=
name|makeAbsolute
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|String
name|dstKey
init|=
name|pathToKey
argument_list|(
name|absoluteDst
argument_list|)
decl_stmt|;
name|FileMetadata
name|dstMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|dstKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstMetadata
operator|!=
literal|null
operator|&&
name|dstMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// It's an existing directory.
name|dstKey
operator|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|src
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Destination {} "
operator|+
literal|" is a directory, adjusted the destination to be {}"
argument_list|,
name|dst
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dstMetadata
operator|!=
literal|null
condition|)
block|{
comment|// Attempting to overwrite a file using rename()
name|LOG
operator|.
name|debug
argument_list|(
literal|"Destination {}"
operator|+
literal|" is an already existing file, failing the rename."
argument_list|,
name|dst
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// Check that the parent directory exists.
name|FileMetadata
name|parentOfDestMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|pathToKey
argument_list|(
name|absoluteDst
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentOfDestMetadata
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parent of the destination {}"
operator|+
literal|" doesn't exist, failing the rename."
argument_list|,
name|dst
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|parentOfDestMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parent of the destination {}"
operator|+
literal|" is a file, failing the rename."
argument_list|,
name|dst
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|FileMetadata
name|srcMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|srcKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcMetadata
operator|==
literal|null
condition|)
block|{
comment|// Source doesn't exist
name|LOG
operator|.
name|debug
argument_list|(
literal|"Source {} doesn't exist, failing the rename."
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|srcMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Source {} found as a file, renaming."
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|store
operator|.
name|rename
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Prepare for, execute and clean up after of all files in folder, and
comment|// the root file, and update the last modified time of the source and
comment|// target parent folders. The operation can be redone if it fails part
comment|// way through, by applying the "Rename Pending" file.
comment|// The following code (internally) only does atomic rename preparation
comment|// and lease management for page blob folders, limiting the scope of the
comment|// operation to HBase log file folders, where atomic rename is required.
comment|// In the future, we could generalize it easily to all folders.
name|renamePending
operator|=
name|prepareAtomicFolderRename
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
name|renamePending
operator|.
name|execute
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renamed {} to {} successfully."
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|renamePending
operator|.
name|cleanup
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Update the last-modified time of the parent folders of both source
comment|// and destination.
name|updateParentFolderLastModifiedTime
argument_list|(
name|srcKey
argument_list|)
expr_stmt|;
name|updateParentFolderLastModifiedTime
argument_list|(
name|dstKey
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renamed {} to {} successfully."
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Update the last-modified time of the parent folder of the file    * identified by key.    * @param key    * @throws IOException    */
DECL|method|updateParentFolderLastModifiedTime (String key)
specifier|private
name|void
name|updateParentFolderLastModifiedTime
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
name|makeAbsolute
argument_list|(
name|keyToPath
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// not root
name|String
name|parentKey
init|=
name|pathToKey
argument_list|(
name|parent
argument_list|)
decl_stmt|;
comment|// ensure the parent is a materialized folder
name|FileMetadata
name|parentMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|parentKey
argument_list|)
decl_stmt|;
comment|// The metadata could be null if the implicit folder only contains a
comment|// single file. In this case, the parent folder no longer exists if the
comment|// file is renamed; so we can safely ignore the null pointer case.
if|if
condition|(
name|parentMetadata
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parentMetadata
operator|.
name|isDir
argument_list|()
operator|&&
name|parentMetadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
condition|)
block|{
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|parentKey
argument_list|,
name|createPermissionStatus
argument_list|(
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|store
operator|.
name|isAtomicRenameKey
argument_list|(
name|parentKey
argument_list|)
condition|)
block|{
name|SelfRenewingLease
name|lease
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lease
operator|=
name|leaseSourceFolder
argument_list|(
name|parentKey
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateFolderLastModifiedTime
argument_list|(
name|parentKey
argument_list|,
name|lease
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AzureException
name|e
parameter_list|)
block|{
name|String
name|errorCode
init|=
literal|""
decl_stmt|;
try|try
block|{
name|StorageException
name|e2
init|=
operator|(
name|StorageException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|errorCode
operator|=
name|e2
operator|.
name|getErrorCode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e3
parameter_list|)
block|{
comment|// do nothing if cast fails
block|}
if|if
condition|(
name|errorCode
operator|.
name|equals
argument_list|(
literal|"BlobNotFound"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Folder does not exist: "
operator|+
name|parentKey
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got unexpected exception trying to get lease on {}. {}"
argument_list|,
name|parentKey
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|lease
operator|!=
literal|null
condition|)
block|{
name|lease
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to free lease on {}"
argument_list|,
name|parentKey
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|store
operator|.
name|updateFolderLastModifiedTime
argument_list|(
name|parentKey
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * If the source is a page blob folder,    * prepare to rename this folder atomically. This means to get exclusive    * access to the source folder, and record the actions to be performed for    * this rename in a "Rename Pending" file. This code was designed to    * meet the needs of HBase, which requires atomic rename of write-ahead log    * (WAL) folders for correctness.    *    * Before calling this method, the caller must ensure that the source is a    * folder.    *    * For non-page-blob directories, prepare the in-memory information needed,    * but don't take the lease or write the redo file. This is done to limit the    * scope of atomic folder rename to HBase, at least at the time of writing    * this code.    *    * @param srcKey Source folder name.    * @param dstKey Destination folder name.    * @throws IOException    */
DECL|method|prepareAtomicFolderRename ( String srcKey, String dstKey)
specifier|private
name|FolderRenamePending
name|prepareAtomicFolderRename
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|String
name|dstKey
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|store
operator|.
name|isAtomicRenameKey
argument_list|(
name|srcKey
argument_list|)
condition|)
block|{
comment|// Block unwanted concurrent access to source folder.
name|SelfRenewingLease
name|lease
init|=
name|leaseSourceFolder
argument_list|(
name|srcKey
argument_list|)
decl_stmt|;
comment|// Prepare in-memory information needed to do or redo a folder rename.
name|FolderRenamePending
name|renamePending
init|=
operator|new
name|FolderRenamePending
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|,
name|lease
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// Save it to persistent storage to help recover if the operation fails.
name|renamePending
operator|.
name|writeFile
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|renamePending
return|;
block|}
else|else
block|{
name|FolderRenamePending
name|renamePending
init|=
operator|new
name|FolderRenamePending
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
return|return
name|renamePending
return|;
block|}
block|}
comment|/**    * Get a self-renewing Azure blob lease on the source folder zero-byte file.    */
DECL|method|leaseSourceFolder (String srcKey)
specifier|private
name|SelfRenewingLease
name|leaseSourceFolder
parameter_list|(
name|String
name|srcKey
parameter_list|)
throws|throws
name|AzureException
block|{
return|return
name|store
operator|.
name|acquireLease
argument_list|(
name|srcKey
argument_list|)
return|;
block|}
comment|/**    * Return an array containing hostnames, offset and size of    * portions of the given file. For WASB we'll just lie and give    * fake hosts to make sure we get many splits in MR jobs.    */
annotation|@
name|Override
DECL|method|getFileBlockLocations (FileStatus file, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|(
name|start
operator|<
literal|0
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid start or len parameter"
argument_list|)
throw|;
block|}
if|if
condition|(
name|file
operator|.
name|getLen
argument_list|()
operator|<
name|start
condition|)
block|{
return|return
operator|new
name|BlockLocation
index|[
literal|0
index|]
return|;
block|}
specifier|final
name|String
name|blobLocationHost
init|=
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|AZURE_BLOCK_LOCATION_HOST_PROPERTY_NAME
argument_list|,
name|AZURE_BLOCK_LOCATION_HOST_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|name
init|=
block|{
name|blobLocationHost
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|host
init|=
block|{
name|blobLocationHost
block|}
decl_stmt|;
name|long
name|blockSize
init|=
name|file
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The block size for the given file is not a positive number: "
operator|+
name|blockSize
argument_list|)
throw|;
block|}
name|int
name|numberOfLocations
init|=
call|(
name|int
call|)
argument_list|(
name|len
operator|/
name|blockSize
argument_list|)
operator|+
operator|(
operator|(
name|len
operator|%
name|blockSize
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
operator|new
name|BlockLocation
index|[
name|numberOfLocations
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|currentOffset
init|=
name|start
operator|+
operator|(
name|i
operator|*
name|blockSize
operator|)
decl_stmt|;
name|long
name|currentLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|blockSize
argument_list|,
name|start
operator|+
name|len
operator|-
name|currentOffset
argument_list|)
decl_stmt|;
name|locations
index|[
name|i
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|name
argument_list|,
name|host
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
block|}
return|return
name|locations
return|;
block|}
comment|/**    * Set the working directory to the given directory.    */
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
name|workingDir
operator|=
name|makeAbsolute
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
DECL|method|setPermission (Path p, FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|p
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
name|FileMetadata
name|metadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File doesn't exist: "
operator|+
name|p
argument_list|)
throw|;
block|}
name|permission
operator|=
name|applyUMask
argument_list|(
name|permission
argument_list|,
name|metadata
operator|.
name|isDir
argument_list|()
condition|?
name|UMaskApplyMode
operator|.
name|ChangeExistingDirectory
else|:
name|UMaskApplyMode
operator|.
name|ChangeExistingFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
condition|)
block|{
comment|// It's an implicit folder, need to materialize it.
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|key
argument_list|,
name|createPermissionStatus
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|permission
argument_list|)
condition|)
block|{
name|store
operator|.
name|changePermissionStatus
argument_list|(
name|key
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setOwner (Path p, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
name|FileMetadata
name|metadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File doesn't exist: "
operator|+
name|p
argument_list|)
throw|;
block|}
name|PermissionStatus
name|newPermissionStatus
init|=
operator|new
name|PermissionStatus
argument_list|(
name|username
operator|==
literal|null
condition|?
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getUserName
argument_list|()
else|:
name|username
argument_list|,
name|groupname
operator|==
literal|null
condition|?
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getGroupName
argument_list|()
else|:
name|groupname
argument_list|,
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
condition|)
block|{
comment|// It's an implicit folder, need to materialize it.
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|key
argument_list|,
name|newPermissionStatus
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|changePermissionStatus
argument_list|(
name|key
argument_list|,
name|newPermissionStatus
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
return|return;
block|}
comment|// Call the base close() to close any resources there.
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Close the store to close any resources there - e.g. the bandwidth
comment|// updater thread would be stopped at this time.
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Notify the metrics system that this file system is closed, which may
comment|// trigger one final metrics push to get the accurate final file system
comment|// metrics out.
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|SKIP_AZURE_METRICS_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|AzureFileSystemMetricsSystem
operator|.
name|unregisterSource
argument_list|(
name|metricsSourceName
argument_list|)
expr_stmt|;
name|AzureFileSystemMetricsSystem
operator|.
name|fileSystemClosed
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submitting metrics when file system closed took {} ms."
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
argument_list|)
expr_stmt|;
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * A handler that defines what to do with blobs whose upload was    * interrupted.    */
DECL|class|DanglingFileHandler
specifier|private
specifier|abstract
class|class
name|DanglingFileHandler
block|{
DECL|method|handleFile (FileMetadata file, FileMetadata tempFile)
specifier|abstract
name|void
name|handleFile
parameter_list|(
name|FileMetadata
name|file
parameter_list|,
name|FileMetadata
name|tempFile
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Handler implementation for just deleting dangling files and cleaning    * them up.    */
DECL|class|DanglingFileDeleter
specifier|private
class|class
name|DanglingFileDeleter
extends|extends
name|DanglingFileHandler
block|{
annotation|@
name|Override
DECL|method|handleFile (FileMetadata file, FileMetadata tempFile)
name|void
name|handleFile
parameter_list|(
name|FileMetadata
name|file
parameter_list|,
name|FileMetadata
name|tempFile
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting dangling file {}"
argument_list|,
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|delete
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|delete
argument_list|(
name|tempFile
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handler implementation for just moving dangling files to recovery    * location (/lost+found).    */
DECL|class|DanglingFileRecoverer
specifier|private
class|class
name|DanglingFileRecoverer
extends|extends
name|DanglingFileHandler
block|{
DECL|field|destination
specifier|private
specifier|final
name|Path
name|destination
decl_stmt|;
DECL|method|DanglingFileRecoverer (Path destination)
name|DanglingFileRecoverer
parameter_list|(
name|Path
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleFile (FileMetadata file, FileMetadata tempFile)
name|void
name|handleFile
parameter_list|(
name|FileMetadata
name|file
parameter_list|,
name|FileMetadata
name|tempFile
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recovering {}"
argument_list|,
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// Move to the final destination
name|String
name|finalDestinationKey
init|=
name|pathToKey
argument_list|(
operator|new
name|Path
argument_list|(
name|destination
argument_list|,
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|rename
argument_list|(
name|tempFile
operator|.
name|getKey
argument_list|()
argument_list|,
name|finalDestinationKey
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finalDestinationKey
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// Delete the empty link file now that we've restored it.
name|store
operator|.
name|delete
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check if a path has colons in its name    */
DECL|method|containsColon (Path p)
specifier|private
name|boolean
name|containsColon
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
return|;
block|}
comment|/**    * Implements recover and delete (-move and -delete) behaviors for handling    * dangling files (blobs whose upload was interrupted).    *     * @param root    *          The root path to check from.    * @param handler    *          The handler that deals with dangling files.    */
DECL|method|handleFilesWithDanglingTempData (Path root, DanglingFileHandler handler)
specifier|private
name|void
name|handleFilesWithDanglingTempData
parameter_list|(
name|Path
name|root
parameter_list|,
name|DanglingFileHandler
name|handler
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Calculate the cut-off for when to consider a blob to be dangling.
name|long
name|cutoffForDangling
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|AZURE_TEMP_EXPIRY_PROPERTY_NAME
argument_list|,
name|AZURE_TEMP_EXPIRY_DEFAULT
argument_list|)
operator|*
literal|1000
decl_stmt|;
comment|// Go over all the blobs under the given root and look for blobs to
comment|// recover.
name|String
name|priorLastKey
init|=
literal|null
decl_stmt|;
do|do
block|{
name|PartialListing
name|listing
init|=
name|store
operator|.
name|listAll
argument_list|(
name|pathToKey
argument_list|(
name|root
argument_list|)
argument_list|,
name|AZURE_LIST_ALL
argument_list|,
name|AZURE_UNBOUNDED_DEPTH
argument_list|,
name|priorLastKey
argument_list|)
decl_stmt|;
for|for
control|(
name|FileMetadata
name|file
range|:
name|listing
operator|.
name|getFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// We don't recover directory blobs
comment|// See if this blob has a link in it (meaning it's a place-holder
comment|// blob for when the upload to the temp blob is complete).
name|String
name|link
init|=
name|store
operator|.
name|getLinkInFileMetadata
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|link
operator|!=
literal|null
condition|)
block|{
comment|// It has a link, see if the temp blob it is pointing to is
comment|// existent and old enough to be considered dangling.
name|FileMetadata
name|linkMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|link
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkMetadata
operator|!=
literal|null
operator|&&
name|linkMetadata
operator|.
name|getLastModified
argument_list|()
operator|>=
name|cutoffForDangling
condition|)
block|{
comment|// Found one!
name|handler
operator|.
name|handleFile
argument_list|(
name|file
argument_list|,
name|linkMetadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|priorLastKey
operator|=
name|listing
operator|.
name|getPriorLastKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|priorLastKey
operator|!=
literal|null
condition|)
do|;
block|}
comment|/**    * Looks under the given root path for any blob that are left "dangling",    * meaning that they are place-holder blobs that we created while we upload    * the data to a temporary blob, but for some reason we crashed in the middle    * of the upload and left them there. If any are found, we move them to the    * destination given.    *     * @param root    *          The root path to consider.    * @param destination    *          The destination path to move any recovered files to.    * @throws IOException    */
DECL|method|recoverFilesWithDanglingTempData (Path root, Path destination)
specifier|public
name|void
name|recoverFilesWithDanglingTempData
parameter_list|(
name|Path
name|root
parameter_list|,
name|Path
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recovering files with dangling temp data in {}"
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|handleFilesWithDanglingTempData
argument_list|(
name|root
argument_list|,
operator|new
name|DanglingFileRecoverer
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Looks under the given root path for any blob that are left "dangling",    * meaning that they are place-holder blobs that we created while we upload    * the data to a temporary blob, but for some reason we crashed in the middle    * of the upload and left them there. If any are found, we delete them.    *     * @param root    *          The root path to consider.    * @throws IOException    */
DECL|method|deleteFilesWithDanglingTempData (Path root)
specifier|public
name|void
name|deleteFilesWithDanglingTempData
parameter_list|(
name|Path
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting files with dangling temp data in {}"
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|handleFilesWithDanglingTempData
argument_list|(
name|root
argument_list|,
operator|new
name|DanglingFileDeleter
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finalize ()
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"finalize() called."
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
comment|/**    * Encode the key with a random prefix for load balancing in Azure storage.    * Upload data to a random temporary file then do storage side renaming to    * recover the original key.    *     * @param aKey    * @return Encoded version of the original key.    */
DECL|method|encodeKey (String aKey)
specifier|private
specifier|static
name|String
name|encodeKey
parameter_list|(
name|String
name|aKey
parameter_list|)
block|{
comment|// Get the tail end of the key name.
comment|//
name|String
name|fileName
init|=
name|aKey
operator|.
name|substring
argument_list|(
name|aKey
operator|.
name|lastIndexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|+
literal|1
argument_list|,
name|aKey
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// Construct the randomized prefix of the file name. The prefix ensures the
comment|// file always drops into the same folder but with a varying tail key name.
name|String
name|filePrefix
init|=
name|AZURE_TEMP_FOLDER
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Concatenate the randomized prefix with the tail of the key name.
name|String
name|randomizedKey
init|=
name|filePrefix
operator|+
name|fileName
decl_stmt|;
comment|// Return to the caller with the randomized key.
return|return
name|randomizedKey
return|;
block|}
DECL|method|cleanup (Logger log, java.io.Closeable closeable)
specifier|private
specifier|static
name|void
name|cleanup
parameter_list|(
name|Logger
name|log
parameter_list|,
name|java
operator|.
name|io
operator|.
name|Closeable
name|closeable
parameter_list|)
block|{
if|if
condition|(
name|closeable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception in closing {}"
argument_list|,
name|closeable
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

