begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BufferedFSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|core
operator|.
name|Utility
import|;
end_import

begin_comment
comment|/**  *<p>  * A {@link FileSystem} for reading and writing files stored on<a  * href="http://store.azure.com/">Windows Azure</a>. This implementation is  * blob-based and stores files on Azure in their native form so they can be read  * by other Azure tools.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|NativeAzureFileSystem
specifier|public
class|class
name|NativeAzureFileSystem
extends|extends
name|FileSystem
block|{
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"wasb"
return|;
block|}
comment|/**    *<p>    * A {@link FileSystem} for reading and writing files stored on<a    * href="http://store.azure.com/">Windows Azure</a>. This implementation is    * blob-based and stores files on Azure in their native form so they can be read    * by other Azure tools. This implementation uses HTTPS for secure network communication.    *</p>    */
DECL|class|Secure
specifier|public
specifier|static
class|class
name|Secure
extends|extends
name|NativeAzureFileSystem
block|{
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"wasbs"
return|;
block|}
block|}
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NativeAzureFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AZURE_BLOCK_SIZE_PROPERTY_NAME
specifier|static
specifier|final
name|String
name|AZURE_BLOCK_SIZE_PROPERTY_NAME
init|=
literal|"fs.azure.block.size"
decl_stmt|;
comment|/**    * The time span in seconds before which we consider a temp blob to be    * dangling (not being actively uploaded to) and up for reclamation.    *     * So e.g. if this is 60, then any temporary blobs more than a minute old    * would be considered dangling.    */
DECL|field|AZURE_TEMP_EXPIRY_PROPERTY_NAME
specifier|static
specifier|final
name|String
name|AZURE_TEMP_EXPIRY_PROPERTY_NAME
init|=
literal|"fs.azure.fsck.temp.expiry.seconds"
decl_stmt|;
DECL|field|AZURE_TEMP_EXPIRY_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|AZURE_TEMP_EXPIRY_DEFAULT
init|=
literal|3600
decl_stmt|;
DECL|field|PATH_DELIMITER
specifier|static
specifier|final
name|String
name|PATH_DELIMITER
init|=
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
DECL|field|AZURE_TEMP_FOLDER
specifier|static
specifier|final
name|String
name|AZURE_TEMP_FOLDER
init|=
literal|"_$azuretmpfolder$"
decl_stmt|;
DECL|field|AZURE_LIST_ALL
specifier|private
specifier|static
specifier|final
name|int
name|AZURE_LIST_ALL
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|AZURE_UNBOUNDED_DEPTH
specifier|private
specifier|static
specifier|final
name|int
name|AZURE_UNBOUNDED_DEPTH
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|MAX_AZURE_BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|long
name|MAX_AZURE_BLOCK_SIZE
init|=
literal|512
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
comment|/**    * The configuration property that determines which group owns files created    * in WASB.    */
DECL|field|AZURE_DEFAULT_GROUP_PROPERTY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_DEFAULT_GROUP_PROPERTY_NAME
init|=
literal|"fs.azure.permissions.supergroup"
decl_stmt|;
comment|/**    * The default value for fs.azure.permissions.supergroup. Chosen as the same    * default as DFS.    */
DECL|field|AZURE_DEFAULT_GROUP_DEFAULT
specifier|static
specifier|final
name|String
name|AZURE_DEFAULT_GROUP_DEFAULT
init|=
literal|"supergroup"
decl_stmt|;
DECL|field|AZURE_BLOCK_LOCATION_HOST_PROPERTY_NAME
specifier|static
specifier|final
name|String
name|AZURE_BLOCK_LOCATION_HOST_PROPERTY_NAME
init|=
literal|"fs.azure.block.location.impersonatedhost"
decl_stmt|;
DECL|field|AZURE_BLOCK_LOCATION_HOST_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_BLOCK_LOCATION_HOST_DEFAULT
init|=
literal|"localhost"
decl_stmt|;
DECL|class|NativeAzureFsInputStream
specifier|private
class|class
name|NativeAzureFsInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|in
specifier|private
name|InputStream
name|in
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|pos
specifier|private
name|long
name|pos
init|=
literal|0
decl_stmt|;
DECL|method|NativeAzureFsInputStream (DataInputStream in, String key)
specifier|public
name|NativeAzureFsInputStream
parameter_list|(
name|DataInputStream
name|in
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
comment|/*      * Reads the next byte of data from the input stream. The value byte is      * returned as an integer in the range 0 to 255. If no byte is available      * because the end of the stream has been reached, the value -1 is returned.      * This method blocks until input data is available, the end of the stream      * is detected, or an exception is thrown.      *       * @returns int An integer corresponding to the byte read.      */
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|result
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|statistics
operator|!=
literal|null
condition|)
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Return to the caller with the result.
comment|//
return|return
name|result
return|;
block|}
comment|/*      * Reads up to len bytes of data from the input stream into an array of      * bytes. An attempt is made to read as many as len bytes, but a smaller      * number may be read. The number of bytes actually read is returned as an      * integer. This method blocks until input data is available, end of file is      * detected, or an exception is thrown. If len is zero, then no bytes are      * read and 0 is returned; otherwise, there is an attempt to read at least      * one byte. If no byte is available because the stream is at end of file,      * the value -1 is returned; otherwise, at least one byte is read and stored      * into b.      *       * @param b -- the buffer into which data is read      *       * @param off -- the start offset in the array b at which data is written      *       * @param len -- the maximum number of bytes read      *       * @ returns int The total number of byes read into the buffer, or -1 if      * there is no more data because the end of stream is reached.      */
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|result
operator|=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|pos
operator|+=
name|result
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|statistics
condition|)
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|// Return to the caller with the result.
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
name|store
operator|.
name|retrieve
argument_list|(
name|key
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|NativeAzureFsOutputStream
specifier|private
class|class
name|NativeAzureFsOutputStream
extends|extends
name|OutputStream
block|{
comment|// We should not override flush() to actually close current block and flush
comment|// to DFS, this will break applications that assume flush() is a no-op.
comment|// Applications are advised to use Syncable.hflush() for that purpose.
comment|// NativeAzureFsOutputStream needs to implement Syncable if needed.
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
DECL|field|keyEncoded
specifier|private
name|String
name|keyEncoded
decl_stmt|;
DECL|field|out
specifier|private
name|OutputStream
name|out
decl_stmt|;
DECL|method|NativeAzureFsOutputStream (OutputStream out, String aKey, String anEncodedKey)
specifier|public
name|NativeAzureFsOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|aKey
parameter_list|,
name|String
name|anEncodedKey
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check input arguments. The output stream should be non-null and the
comment|// keys
comment|// should be valid strings.
if|if
condition|(
literal|null
operator|==
name|out
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal argument: the output stream is null."
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|aKey
operator|||
literal|0
operator|==
name|aKey
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal argument the key string is null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|anEncodedKey
operator|||
literal|0
operator|==
name|anEncodedKey
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal argument the encoded key string is null or empty"
argument_list|)
throw|;
block|}
comment|// Initialize the member variables with the incoming parameters.
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|setKey
argument_list|(
name|aKey
argument_list|)
expr_stmt|;
name|setEncodedKey
argument_list|(
name|anEncodedKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
comment|// Close the output stream and decode the key for the output stream
comment|// before returning to the caller.
comment|//
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|restoreKey
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Writes the specified byte to this output stream. The general contract for      * write is that one byte is written to the output stream. The byte to be      * written is the eight low-order bits of the argument b. The 24 high-order      * bits of b are ignored.      *       * @param b      *          32-bit integer of block of 4 bytes      */
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes b.length bytes from the specified byte array to this output      * stream. The general contract for write(b) is that it should have exactly      * the same effect as the call write(b, 0, b.length).      *       * @param b      *          Block of bytes to be written to the output stream.      */
annotation|@
name|Override
DECL|method|write (byte[] b)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes<code>len</code> from the specified byte array starting at offset      *<code>off</code> to the output stream. The general contract for write(b,      * off, len) is that some of the bytes in the array<code>      * b</code b> are written to the output stream in order; element      *<code>b[off]</code> is the first byte written and      *<code>b[off+len-1]</code> is the last byte written by this operation.      *       * @param b      *          Byte array to be written.      * @param off      *          Write this offset in stream.      * @param len      *          Number of bytes to be written.      */
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the blob name.      *       * @return String Blob name.      */
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * Set the blob name.      *       * @param key      *          Blob name.      */
DECL|method|setKey (String key)
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
comment|/**      * Get the blob name.      *       * @return String Blob name.      */
DECL|method|getEncodedKey ()
specifier|public
name|String
name|getEncodedKey
parameter_list|()
block|{
return|return
name|keyEncoded
return|;
block|}
comment|/**      * Set the blob name.      *       * @param anEncodedKey      *          Blob name.      */
DECL|method|setEncodedKey (String anEncodedKey)
specifier|public
name|void
name|setEncodedKey
parameter_list|(
name|String
name|anEncodedKey
parameter_list|)
block|{
name|this
operator|.
name|keyEncoded
operator|=
name|anEncodedKey
expr_stmt|;
block|}
comment|/**      * Restore the original key name from the m_key member variable. Note: The      * output file stream is created with an encoded blob store key to guarantee      * load balancing on the front end of the Azure storage partition servers.      * The create also includes the name of the original key value which is      * stored in the m_key member variable. This method should only be called      * when the stream is closed.      *       * @param anEncodedKey      *          Encoding of the original key stored in m_key member.      */
DECL|method|restoreKey ()
specifier|private
name|void
name|restoreKey
parameter_list|()
throws|throws
name|IOException
block|{
name|store
operator|.
name|rename
argument_list|(
name|getEncodedKey
argument_list|()
argument_list|,
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|store
specifier|private
name|NativeFileSystemStore
name|store
decl_stmt|;
DECL|field|actualStore
specifier|private
name|AzureNativeFileSystemStore
name|actualStore
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|blockSize
specifier|private
name|long
name|blockSize
init|=
name|MAX_AZURE_BLOCK_SIZE
decl_stmt|;
DECL|field|suppressRetryPolicy
specifier|private
specifier|static
name|boolean
name|suppressRetryPolicy
init|=
literal|false
decl_stmt|;
DECL|method|NativeAzureFileSystem ()
specifier|public
name|NativeAzureFileSystem
parameter_list|()
block|{
comment|// set store in initialize()
block|}
DECL|method|NativeAzureFileSystem (NativeFileSystemStore store)
specifier|public
name|NativeAzureFileSystem
parameter_list|(
name|NativeFileSystemStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
comment|/**    * Suppress the default retry policy for the Storage, useful in unit tests to    * test negative cases without waiting forever.    */
annotation|@
name|VisibleForTesting
DECL|method|suppressRetryPolicy ()
specifier|static
name|void
name|suppressRetryPolicy
parameter_list|()
block|{
name|suppressRetryPolicy
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Undo the effect of suppressRetryPolicy.    */
annotation|@
name|VisibleForTesting
DECL|method|resumeRetryPolicy ()
specifier|static
name|void
name|resumeRetryPolicy
parameter_list|()
block|{
name|suppressRetryPolicy
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Checks if the given URI scheme is a scheme that's affiliated with the Azure    * File System.    *     * @param scheme    *          The URI scheme.    * @return true iff it's an Azure File System URI scheme.    */
DECL|method|isWasbScheme (String scheme)
specifier|private
specifier|static
name|boolean
name|isWasbScheme
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
comment|// The valid schemes are: asv (old name), asvs (old name over HTTPS),
comment|// wasb (new name), wasbs (new name over HTTPS).
return|return
name|scheme
operator|!=
literal|null
operator|&&
operator|(
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"asv"
argument_list|)
operator|||
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"asvs"
argument_list|)
operator|||
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"wasb"
argument_list|)
operator|||
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"wasbs"
argument_list|)
operator|)
return|;
block|}
comment|/**    * Puts in the authority of the default file system if it is a WASB file    * system and the given URI's authority is null.    *     * @return The URI with reconstructed authority if necessary and possible.    */
DECL|method|reconstructAuthorityIfNeeded (URI uri, Configuration conf)
specifier|private
specifier|static
name|URI
name|reconstructAuthorityIfNeeded
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|uri
operator|.
name|getAuthority
argument_list|()
condition|)
block|{
comment|// If WASB is the default file system, get the authority from there
name|URI
name|defaultUri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultUri
operator|!=
literal|null
operator|&&
name|isWasbScheme
argument_list|(
name|defaultUri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
comment|// Reconstruct the URI with the authority from the default URI.
return|return
operator|new
name|URI
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|defaultUri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|uri
operator|.
name|getQuery
argument_list|()
argument_list|,
name|uri
operator|.
name|getFragment
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// This should never happen.
throw|throw
operator|new
name|Error
argument_list|(
literal|"Bad URI construction"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|checkPath (Path path)
specifier|protected
name|void
name|checkPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// Make sure to reconstruct the path's authority if needed
name|super
operator|.
name|checkPath
argument_list|(
operator|new
name|Path
argument_list|(
name|reconstructAuthorityIfNeeded
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|getConf
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check authority for the URI to guarantee that it is non-null.
name|uri
operator|=
name|reconstructAuthorityIfNeeded
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|uri
operator|.
name|getAuthority
argument_list|()
condition|)
block|{
specifier|final
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Cannot initialize WASB file system, URI authority not recognized."
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
name|super
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|store
operator|=
name|createDefaultStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|workingDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|getUri
argument_list|()
argument_list|,
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|AZURE_BLOCK_SIZE_PROPERTY_NAME
argument_list|,
name|MAX_AZURE_BLOCK_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NativeAzureFileSystem. Initializing."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  blockSize  = "
operator|+
name|conf
operator|.
name|getLong
argument_list|(
name|AZURE_BLOCK_SIZE_PROPERTY_NAME
argument_list|,
name|MAX_AZURE_BLOCK_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createDefaultStore (Configuration conf)
specifier|private
name|NativeFileSystemStore
name|createDefaultStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|actualStore
operator|=
operator|new
name|AzureNativeFileSystemStore
argument_list|()
expr_stmt|;
if|if
condition|(
name|suppressRetryPolicy
condition|)
block|{
name|actualStore
operator|.
name|suppressRetryPolicy
argument_list|()
expr_stmt|;
block|}
return|return
name|actualStore
return|;
block|}
comment|// Note: The logic for this method is confusing as to whether it strips the
comment|// last slash or not (it adds it in the beginning, then strips it at the end).
comment|// We should revisit that.
DECL|method|pathToKey (Path path)
specifier|private
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// Convert the path to a URI to parse the scheme, the authority, and the
comment|// path from the path object.
name|URI
name|tmpUri
init|=
name|path
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|String
name|pathUri
init|=
name|tmpUri
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// The scheme and authority is valid. If the path does not exist add a "/"
comment|// separator to list the root of the container.
name|Path
name|newPath
init|=
name|path
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|pathUri
argument_list|)
condition|)
block|{
name|newPath
operator|=
operator|new
name|Path
argument_list|(
name|tmpUri
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
comment|// Verify path is absolute if the path refers to a windows drive scheme.
if|if
condition|(
operator|!
name|newPath
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Path must be absolute: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|String
name|key
init|=
literal|null
decl_stmt|;
name|key
operator|=
name|newPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|key
return|;
block|}
else|else
block|{
return|return
name|key
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
comment|// remove initial slash
block|}
block|}
DECL|method|keyToPath (String key)
specifier|private
specifier|static
name|Path
name|keyToPath
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
return|;
comment|// container
block|}
return|return
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|key
argument_list|)
return|;
block|}
DECL|method|makeAbsolute (Path path)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**    * For unit test purposes, retrieves the AzureNativeFileSystemStore store    * backing this file system.    *     * @return The store object.    */
annotation|@
name|VisibleForTesting
DECL|method|getStore ()
name|AzureNativeFileSystemStore
name|getStore
parameter_list|()
block|{
return|return
name|actualStore
return|;
block|}
comment|/** This optional operation is not yet supported. */
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating file: "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containsColon
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create file "
operator|+
name|f
operator|+
literal|" through WASB that has colons in the name"
argument_list|)
throw|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
name|FileMetadata
name|existingMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingMetadata
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create file "
operator|+
name|f
operator|+
literal|"; already exists as a directory."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File already exists:"
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
name|Path
name|parentFolder
init|=
name|absolutePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentFolder
operator|!=
literal|null
operator|&&
name|parentFolder
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// skip root
comment|// Update the parent folder last modified time if the parent folder
comment|// already exists.
name|String
name|parentKey
init|=
name|pathToKey
argument_list|(
name|parentFolder
argument_list|)
decl_stmt|;
name|FileMetadata
name|parentMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|parentKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentMetadata
operator|!=
literal|null
operator|&&
name|parentMetadata
operator|.
name|isDir
argument_list|()
operator|&&
name|parentMetadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Explicit
condition|)
block|{
name|store
operator|.
name|updateFolderLastModifiedTime
argument_list|(
name|parentKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Make sure that the parent folder exists.
name|mkdirs
argument_list|(
name|parentFolder
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Open the output blob stream based on the encoded key.
name|String
name|keyEncoded
init|=
name|encodeKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Mask the permission first (with the default permission mask as well).
name|FsPermission
name|masked
init|=
name|applyUMask
argument_list|(
name|permission
argument_list|,
name|UMaskApplyMode
operator|.
name|NewFile
argument_list|)
decl_stmt|;
name|PermissionStatus
name|permissionStatus
init|=
name|createPermissionStatus
argument_list|(
name|masked
argument_list|)
decl_stmt|;
comment|// First create a blob at the real key, pointing back to the temporary file
comment|// This accomplishes a few things:
comment|// 1. Makes sure we can create a file there.
comment|// 2. Makes it visible to other concurrent threads/processes/nodes what
comment|// we're
comment|// doing.
comment|// 3. Makes it easier to restore/cleanup data in the event of us crashing.
name|store
operator|.
name|storeEmptyLinkFile
argument_list|(
name|key
argument_list|,
name|keyEncoded
argument_list|,
name|permissionStatus
argument_list|)
expr_stmt|;
comment|// The key is encoded to point to a common container at the storage server.
comment|// This reduces the number of splits on the server side when load balancing.
comment|// Ingress to Azure storage can take advantage of earlier splits. We remove
comment|// the root path to the key and prefix a random GUID to the tail (or leaf
comment|// filename) of the key. Keys are thus broadly and randomly distributed over
comment|// a single container to ease load balancing on the storage server. When the
comment|// blob is committed it is renamed to its earlier key. Uncommitted blocks
comment|// are not cleaned up and we leave it to Azure storage to garbage collect
comment|// these
comment|// blocks.
name|OutputStream
name|bufOutStream
init|=
operator|new
name|NativeAzureFsOutputStream
argument_list|(
name|store
operator|.
name|storefile
argument_list|(
name|keyEncoded
argument_list|,
name|permissionStatus
argument_list|)
argument_list|,
name|key
argument_list|,
name|keyEncoded
argument_list|)
decl_stmt|;
comment|// Construct the data output stream from the buffered output stream.
name|FSDataOutputStream
name|fsOut
init|=
operator|new
name|FSDataOutputStream
argument_list|(
name|bufOutStream
argument_list|,
name|statistics
argument_list|)
decl_stmt|;
comment|// Return data output stream to caller.
return|return
name|fsOut
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|delete (Path path)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting file: "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
comment|// Capture the metadata for the path.
comment|//
name|FileMetadata
name|metaFile
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|metaFile
condition|)
block|{
comment|// The path to be deleted does not exist.
return|return
literal|false
return|;
block|}
comment|// The path exists, determine if it is a folder containing objects,
comment|// an empty folder, or a simple file and take the appropriate actions.
if|if
condition|(
operator|!
name|metaFile
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// The path specifies a file. We need to check the parent path
comment|// to make sure it's a proper materialized directory before we
comment|// delete the file. Otherwise we may get into a situation where
comment|// the file we were deleting was the last one in an implicit directory
comment|// (e.g. the blob store only contains the blob a/b and there's no
comment|// corresponding directory blob a) and that would implicitly delete
comment|// the directory as well, which is not correct.
name|Path
name|parentPath
init|=
name|absolutePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentPath
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Not root
name|String
name|parentKey
init|=
name|pathToKey
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|FileMetadata
name|parentMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|parentKey
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parentMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// Invalid state: the parent path is actually a file. Throw.
throw|throw
operator|new
name|AzureException
argument_list|(
literal|"File "
operator|+
name|f
operator|+
literal|" has a parent directory "
operator|+
name|parentPath
operator|+
literal|" which is also a file. Can't resolve."
argument_list|)
throw|;
block|}
if|if
condition|(
name|parentMetadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found an implicit parent directory while trying to"
operator|+
literal|" delete the file "
operator|+
name|f
operator|+
literal|". Creating the directory blob for"
operator|+
literal|" it in "
operator|+
name|parentKey
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|parentKey
argument_list|,
name|createPermissionStatus
argument_list|(
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|updateFolderLastModifiedTime
argument_list|(
name|parentKey
argument_list|)
expr_stmt|;
block|}
block|}
name|store
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The path specifies a folder. Recursively delete all entries under the
comment|// folder.
name|Path
name|parentPath
init|=
name|absolutePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentPath
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|parentKey
init|=
name|pathToKey
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|FileMetadata
name|parentMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|parentKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentMetadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found an implicit parent directory while trying to"
operator|+
literal|" delete the directory "
operator|+
name|f
operator|+
literal|". Creating the directory blob for"
operator|+
literal|" it in "
operator|+
name|parentKey
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|parentKey
argument_list|,
name|createPermissionStatus
argument_list|(
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// List all the blobs in the current folder.
name|String
name|priorLastKey
init|=
literal|null
decl_stmt|;
name|PartialListing
name|listing
init|=
name|store
operator|.
name|listAll
argument_list|(
name|key
argument_list|,
name|AZURE_LIST_ALL
argument_list|,
literal|1
argument_list|,
name|priorLastKey
argument_list|)
decl_stmt|;
name|FileMetadata
index|[]
name|contents
init|=
name|listing
operator|.
name|getFiles
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|recursive
operator|&&
name|contents
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// The folder is non-empty and recursive delete was not specified.
comment|// Throw an exception indicating that a non-recursive delete was
comment|// specified for a non-empty folder.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Non-recursive delete of non-empty directory "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// Delete all the files in the folder.
for|for
control|(
name|FileMetadata
name|p
range|:
name|contents
control|)
block|{
comment|// Tag on the directory name found as the suffix of the suffix of the
comment|// parent directory to get the new absolute path.
name|String
name|suffix
init|=
name|p
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|PATH_DELIMITER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|key
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Recursively delete contents of the sub-folders. Notice this also
comment|// deletes the blob for the directory.
if|if
condition|(
operator|!
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|f
operator|.
name|toString
argument_list|()
operator|+
name|suffix
argument_list|)
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
name|store
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// Update parent directory last modified time
name|Path
name|parent
init|=
name|absolutePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// not root
name|String
name|parentKey
init|=
name|pathToKey
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|store
operator|.
name|updateFolderLastModifiedTime
argument_list|(
name|parentKey
argument_list|)
expr_stmt|;
block|}
block|}
comment|// File or directory was successfully deleted.
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting the file status for "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Capture the absolute path and the path to key.
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// root always exists
return|return
name|newDirectory
argument_list|(
literal|null
argument_list|,
name|absolutePath
argument_list|)
return|;
block|}
comment|// The path is either a folder or a file. Retrieve metadata to
comment|// determine if it is a directory or file.
name|FileMetadata
name|meta
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|meta
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// The path is a folder with files in it.
comment|//
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Path "
operator|+
name|f
operator|.
name|toString
argument_list|()
operator|+
literal|"is a folder."
argument_list|)
expr_stmt|;
block|}
comment|// Return reference to the directory object.
return|return
name|newDirectory
argument_list|(
name|meta
argument_list|,
name|absolutePath
argument_list|)
return|;
block|}
comment|// The path is a file.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found the path: "
operator|+
name|f
operator|.
name|toString
argument_list|()
operator|+
literal|" as a file."
argument_list|)
expr_stmt|;
block|}
comment|// Return with reference to a file object.
return|return
name|newFile
argument_list|(
name|meta
argument_list|,
name|absolutePath
argument_list|)
return|;
block|}
comment|// File not found. Throw exception no such file or directory.
comment|// Note: Should never get to this point since the root always exists.
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|absolutePath
operator|+
literal|": No such file or directory."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
comment|/**    * Retrieve the status of a given path if it is a file, or of all the    * contained files if it is a directory.    */
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Listing status for "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|FileStatus
argument_list|>
name|status
init|=
operator|new
name|TreeSet
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|FileMetadata
name|meta
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|meta
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found path as a file"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FileStatus
index|[]
block|{
name|newFile
argument_list|(
name|meta
argument_list|,
name|absolutePath
argument_list|)
block|}
return|;
block|}
name|String
name|partialKey
init|=
literal|null
decl_stmt|;
name|PartialListing
name|listing
init|=
name|store
operator|.
name|list
argument_list|(
name|key
argument_list|,
name|AZURE_LIST_ALL
argument_list|,
literal|1
argument_list|,
name|partialKey
argument_list|)
decl_stmt|;
for|for
control|(
name|FileMetadata
name|fileMetadata
range|:
name|listing
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|Path
name|subpath
init|=
name|keyToPath
argument_list|(
name|fileMetadata
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// Test whether the metadata represents a file or directory and
comment|// add the appropriate metadata object.
comment|//
comment|// Note: There was a very old bug here where directories were added
comment|// to the status set as files flattening out recursive listings
comment|// using "-lsr" down the file system hierarchy.
if|if
condition|(
name|fileMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// Make sure we hide the temp upload folder
if|if
condition|(
name|fileMetadata
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|AZURE_TEMP_FOLDER
argument_list|)
condition|)
block|{
comment|// Don't expose that.
continue|continue;
block|}
name|status
operator|.
name|add
argument_list|(
name|newDirectory
argument_list|(
name|fileMetadata
argument_list|,
name|subpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|.
name|add
argument_list|(
name|newFile
argument_list|(
name|fileMetadata
argument_list|,
name|subpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found path as a directory with "
operator|+
name|status
operator|.
name|size
argument_list|()
operator|+
literal|" files in it."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// There is no metadata found for the path.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Did not find any metadata for path: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File"
operator|+
name|f
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
return|return
name|status
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|newFile (FileMetadata meta, Path path)
specifier|private
name|FileStatus
name|newFile
parameter_list|(
name|FileMetadata
name|meta
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|meta
operator|.
name|getLength
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|blockSize
argument_list|,
name|meta
operator|.
name|getLastModified
argument_list|()
argument_list|,
literal|0
argument_list|,
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
argument_list|,
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|getUri
argument_list|()
argument_list|,
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newDirectory (FileMetadata meta, Path path)
specifier|private
name|FileStatus
name|newDirectory
parameter_list|(
name|FileMetadata
name|meta
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
name|blockSize
argument_list|,
name|meta
operator|==
literal|null
condition|?
literal|0
else|:
name|meta
operator|.
name|getLastModified
argument_list|()
argument_list|,
literal|0
argument_list|,
name|meta
operator|==
literal|null
condition|?
name|FsPermission
operator|.
name|getDefault
argument_list|()
else|:
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
argument_list|,
name|meta
operator|==
literal|null
condition|?
literal|""
else|:
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|meta
operator|==
literal|null
condition|?
literal|""
else|:
name|meta
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|getUri
argument_list|()
argument_list|,
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|enum|UMaskApplyMode
specifier|private
specifier|static
enum|enum
name|UMaskApplyMode
block|{
DECL|enumConstant|NewFile
DECL|enumConstant|NewDirectory
DECL|enumConstant|ChangeExistingFile
DECL|enumConstant|ChangeExistingDirectory
name|NewFile
block|,
name|NewDirectory
block|,
name|ChangeExistingFile
block|,
name|ChangeExistingDirectory
block|,   }
comment|/**    * Applies the applicable UMASK's on the given permission.    *     * @param permission    *          The permission to mask.    * @param applyDefaultUmask    *          Whether to also apply the default umask.    * @return The masked persmission.    */
DECL|method|applyUMask (final FsPermission permission, final UMaskApplyMode applyMode)
specifier|private
name|FsPermission
name|applyUMask
parameter_list|(
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|UMaskApplyMode
name|applyMode
parameter_list|)
block|{
name|FsPermission
name|newPermission
init|=
operator|new
name|FsPermission
argument_list|(
name|permission
argument_list|)
decl_stmt|;
comment|// Apply the default umask - this applies for new files or directories.
if|if
condition|(
name|applyMode
operator|==
name|UMaskApplyMode
operator|.
name|NewFile
operator|||
name|applyMode
operator|==
name|UMaskApplyMode
operator|.
name|NewDirectory
condition|)
block|{
name|newPermission
operator|=
name|newPermission
operator|.
name|applyUMask
argument_list|(
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newPermission
return|;
block|}
comment|/**    * Creates the PermissionStatus object to use for the given permission, based    * on the current user in context.    *     * @param permission    *          The permission for the file.    * @return The permission status object to use.    * @throws IOException    *           If login fails in getCurrentUser    */
DECL|method|createPermissionStatus (FsPermission permission)
specifier|private
name|PermissionStatus
name|createPermissionStatus
parameter_list|(
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create the permission status for this file based on current user
return|return
operator|new
name|PermissionStatus
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|AZURE_DEFAULT_GROUP_PROPERTY_NAME
argument_list|,
name|AZURE_DEFAULT_GROUP_DEFAULT
argument_list|)
argument_list|,
name|permission
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating directory: "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containsColon
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create directory "
operator|+
name|f
operator|+
literal|" through WASB that has colons in the name"
argument_list|)
throw|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|PermissionStatus
name|permissionStatus
init|=
name|createPermissionStatus
argument_list|(
name|applyUMask
argument_list|(
name|permission
argument_list|,
name|UMaskApplyMode
operator|.
name|NewDirectory
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keysToCreateAsFolder
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keysToUpdateAsFolder
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|childCreated
init|=
literal|false
decl_stmt|;
comment|// Check that there is no file in the parent chain of the given path.
comment|// Stop when you get to the root
for|for
control|(
name|Path
name|current
init|=
name|absolutePath
init|,
name|parent
init|=
name|current
operator|.
name|getParent
argument_list|()
init|;
name|parent
operator|!=
literal|null
condition|;
name|current
operator|=
name|parent
operator|,
name|parent
operator|=
name|current
operator|.
name|getParent
argument_list|()
control|)
block|{
name|String
name|currentKey
init|=
name|pathToKey
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|FileMetadata
name|currentMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|currentKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentMetadata
operator|!=
literal|null
operator|&&
operator|!
name|currentMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create directory "
operator|+
name|f
operator|+
literal|" because "
operator|+
name|current
operator|+
literal|" is an existing file."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|currentMetadata
operator|==
literal|null
operator|||
operator|(
name|currentMetadata
operator|.
name|isDir
argument_list|()
operator|&&
name|currentMetadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
operator|)
condition|)
block|{
name|keysToCreateAsFolder
operator|.
name|add
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
name|childCreated
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// The directory already exists. Its last modified time need to be
comment|// updated if there is a child directory created under it.
if|if
condition|(
name|childCreated
condition|)
block|{
name|keysToUpdateAsFolder
operator|.
name|add
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
block|}
name|childCreated
operator|=
literal|false
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|currentKey
range|:
name|keysToCreateAsFolder
control|)
block|{
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|currentKey
argument_list|,
name|permissionStatus
argument_list|)
expr_stmt|;
block|}
comment|// Take the time after finishing mkdirs as the modified time, and update all
comment|// the existing directories' modified time to it uniformly.
specifier|final
name|Calendar
name|lastModifiedCalendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Utility
operator|.
name|LOCALE_US
argument_list|)
decl_stmt|;
name|lastModifiedCalendar
operator|.
name|setTimeZone
argument_list|(
name|Utility
operator|.
name|UTC_ZONE
argument_list|)
expr_stmt|;
name|Date
name|lastModified
init|=
name|lastModifiedCalendar
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keysToUpdateAsFolder
control|)
block|{
name|store
operator|.
name|updateFolderLastModifiedTime
argument_list|(
name|key
argument_list|,
name|lastModified
argument_list|)
expr_stmt|;
block|}
comment|// otherwise throws exception
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opening file: "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
name|FileMetadata
name|meta
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|meta
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|f
operator|.
name|toString
argument_list|()
operator|+
literal|" is a directory not a file."
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|BufferedFSInputStream
argument_list|(
operator|new
name|NativeAzureFsInputStream
argument_list|(
name|store
operator|.
name|retrieve
argument_list|(
name|key
argument_list|)
argument_list|,
name|key
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moving "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containsColon
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot rename to file "
operator|+
name|dst
operator|+
literal|" through WASB that has colons in the name"
argument_list|)
throw|;
block|}
name|String
name|srcKey
init|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcKey
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Cannot rename root of file system
return|return
literal|false
return|;
block|}
name|FileMetadata
name|srcMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|srcKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcMetadata
operator|==
literal|null
condition|)
block|{
comment|// Source doesn't exist
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Source "
operator|+
name|src
operator|+
literal|" doesn't exist, failing the rename."
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// Figure out the final destination
name|Path
name|absoluteDst
init|=
name|makeAbsolute
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|String
name|dstKey
init|=
name|pathToKey
argument_list|(
name|absoluteDst
argument_list|)
decl_stmt|;
name|FileMetadata
name|dstMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|dstKey
argument_list|)
decl_stmt|;
comment|// directory rename validations
if|if
condition|(
name|srcMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// rename dir to self is an error
if|if
condition|(
name|srcKey
operator|.
name|equals
argument_list|(
name|dstKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renaming directory to itself is disallowed. path="
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// rename dir to (sub-)child of self is an error. see
comment|// FileSystemContractBaseTest.testRenameChildDirForbidden
if|if
condition|(
name|dstKey
operator|.
name|startsWith
argument_list|(
name|srcKey
operator|+
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renaming directory to a itself is disallowed. src="
operator|+
name|src
operator|+
literal|" dest="
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|// file rename early checks
if|if
condition|(
operator|!
name|srcMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
name|srcKey
operator|.
name|equals
argument_list|(
name|dstKey
argument_list|)
condition|)
block|{
comment|// rename file to self is OK
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renaming file to itself. This is allowed and is treated as no-op. path="
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|// More validations..
comment|// If target is dir but target already exists, alter the dst to be a
comment|// subfolder.
comment|// eg move("/a/file.txt", "/b") where "/b" already exists causes the target
comment|// to be "/c/file.txt
if|if
condition|(
name|dstMetadata
operator|!=
literal|null
operator|&&
name|dstMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|dstKey
operator|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|src
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Best would be to update dstMetadata, but it is not used further, so set
comment|// it to null and skip the additional cost
name|dstMetadata
operator|=
literal|null
expr_stmt|;
comment|// dstMetadata = store.retrieveMetadata(dstKey);
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Destination "
operator|+
name|dst
operator|+
literal|" is a directory, adjusted the destination to be "
operator|+
name|dstKey
argument_list|)
expr_stmt|;
block|}
comment|// rename dir to self is an error
if|if
condition|(
name|srcKey
operator|.
name|equals
argument_list|(
name|dstKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renaming directory to itself is disallowed. path="
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|dstMetadata
operator|!=
literal|null
condition|)
block|{
comment|// Otherwise, attempting to overwrite a file is error
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Destination "
operator|+
name|dst
operator|+
literal|" is an already existing file, failing the rename."
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// Either dir or file and target doesn't exist.. Check that the parent
comment|// directory exists.
name|FileMetadata
name|parentOfDestMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|pathToKey
argument_list|(
name|absoluteDst
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentOfDestMetadata
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parent of the destination "
operator|+
name|dst
operator|+
literal|" doesn't exist, failing the rename."
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|parentOfDestMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parent of the destination "
operator|+
name|dst
operator|+
literal|" is a file, failing the rename."
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|// Validations complete, do the move.
if|if
condition|(
operator|!
name|srcMetadata
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Source "
operator|+
name|src
operator|+
literal|" found as a file, renaming."
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|rename
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Move everything inside the folder.
name|String
name|priorLastKey
init|=
literal|null
decl_stmt|;
comment|// Calculate the index of the part of the string to be moved. That
comment|// is everything on the path up to the folder name.
do|do
block|{
comment|// List all blobs rooted at the source folder.
name|PartialListing
name|listing
init|=
name|store
operator|.
name|listAll
argument_list|(
name|srcKey
argument_list|,
name|AZURE_LIST_ALL
argument_list|,
name|AZURE_UNBOUNDED_DEPTH
argument_list|,
name|priorLastKey
argument_list|)
decl_stmt|;
comment|// Rename all the files in the folder.
for|for
control|(
name|FileMetadata
name|file
range|:
name|listing
operator|.
name|getFiles
argument_list|()
control|)
block|{
comment|// Rename all materialized entries under the folder to point to the
comment|// final destination.
if|if
condition|(
name|file
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Explicit
condition|)
block|{
name|String
name|srcName
init|=
name|file
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|suffix
init|=
name|srcName
operator|.
name|substring
argument_list|(
name|srcKey
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dstName
init|=
name|dstKey
operator|+
name|suffix
decl_stmt|;
name|store
operator|.
name|rename
argument_list|(
name|srcName
argument_list|,
name|dstName
argument_list|)
expr_stmt|;
block|}
block|}
name|priorLastKey
operator|=
name|listing
operator|.
name|getPriorLastKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|priorLastKey
operator|!=
literal|null
condition|)
do|;
comment|// Rename the top level empty blob for the folder.
if|if
condition|(
name|srcMetadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Explicit
condition|)
block|{
name|store
operator|.
name|rename
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update both source and destination parent folder last modified time.
name|Path
name|srcParent
init|=
name|makeAbsolute
argument_list|(
name|keyToPath
argument_list|(
name|srcKey
argument_list|)
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcParent
operator|!=
literal|null
operator|&&
name|srcParent
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// not root
name|String
name|srcParentKey
init|=
name|pathToKey
argument_list|(
name|srcParent
argument_list|)
decl_stmt|;
comment|// ensure the srcParent is a materialized folder
name|FileMetadata
name|srcParentMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|srcParentKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcParentMetadata
operator|.
name|isDir
argument_list|()
operator|&&
name|srcParentMetadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
condition|)
block|{
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|srcParentKey
argument_list|,
name|createPermissionStatus
argument_list|(
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|updateFolderLastModifiedTime
argument_list|(
name|srcParentKey
argument_list|)
expr_stmt|;
block|}
name|Path
name|destParent
init|=
name|makeAbsolute
argument_list|(
name|keyToPath
argument_list|(
name|dstKey
argument_list|)
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|destParent
operator|!=
literal|null
operator|&&
name|destParent
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// not root
name|String
name|dstParentKey
init|=
name|pathToKey
argument_list|(
name|destParent
argument_list|)
decl_stmt|;
comment|// ensure the dstParent is a materialized folder
name|FileMetadata
name|dstParentMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|dstParentKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstParentMetadata
operator|.
name|isDir
argument_list|()
operator|&&
name|dstParentMetadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
condition|)
block|{
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|dstParentKey
argument_list|,
name|createPermissionStatus
argument_list|(
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|updateFolderLastModifiedTime
argument_list|(
name|dstParentKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renamed "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|" successfully."
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Return an array containing hostnames, offset and size of portions of the    * given file. For WASB we'll just lie and give fake hosts to make sure we get    * many splits in MR jobs.    */
annotation|@
name|Override
DECL|method|getFileBlockLocations (FileStatus file, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|(
name|start
operator|<
literal|0
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid start or len parameter"
argument_list|)
throw|;
block|}
if|if
condition|(
name|file
operator|.
name|getLen
argument_list|()
operator|<
name|start
condition|)
block|{
return|return
operator|new
name|BlockLocation
index|[
literal|0
index|]
return|;
block|}
specifier|final
name|String
name|blobLocationHost
init|=
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|AZURE_BLOCK_LOCATION_HOST_PROPERTY_NAME
argument_list|,
name|AZURE_BLOCK_LOCATION_HOST_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|name
init|=
block|{
name|blobLocationHost
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|host
init|=
block|{
name|blobLocationHost
block|}
decl_stmt|;
name|long
name|blockSize
init|=
name|file
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The block size for the given file is not a positive number: "
operator|+
name|blockSize
argument_list|)
throw|;
block|}
name|int
name|numberOfLocations
init|=
call|(
name|int
call|)
argument_list|(
name|len
operator|/
name|blockSize
argument_list|)
operator|+
operator|(
operator|(
name|len
operator|%
name|blockSize
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
operator|new
name|BlockLocation
index|[
name|numberOfLocations
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|currentOffset
init|=
name|start
operator|+
operator|(
name|i
operator|*
name|blockSize
operator|)
decl_stmt|;
name|long
name|currentLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|blockSize
argument_list|,
name|start
operator|+
name|len
operator|-
name|currentOffset
argument_list|)
decl_stmt|;
name|locations
index|[
name|i
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|name
argument_list|,
name|host
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
block|}
return|return
name|locations
return|;
block|}
comment|/**    * Set the working directory to the given directory.    */
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
name|workingDir
operator|=
name|makeAbsolute
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
DECL|method|setPermission (Path p, FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|p
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
name|FileMetadata
name|metadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File doesn't exist: "
operator|+
name|p
argument_list|)
throw|;
block|}
name|permission
operator|=
name|applyUMask
argument_list|(
name|permission
argument_list|,
name|metadata
operator|.
name|isDir
argument_list|()
condition|?
name|UMaskApplyMode
operator|.
name|ChangeExistingDirectory
else|:
name|UMaskApplyMode
operator|.
name|ChangeExistingFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
condition|)
block|{
comment|// It's an implicit folder, need to materialize it.
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|key
argument_list|,
name|createPermissionStatus
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|permission
argument_list|)
condition|)
block|{
name|store
operator|.
name|changePermissionStatus
argument_list|(
name|key
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setOwner (Path p, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
name|FileMetadata
name|metadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File doesn't exist: "
operator|+
name|p
argument_list|)
throw|;
block|}
name|PermissionStatus
name|newPermissionStatus
init|=
operator|new
name|PermissionStatus
argument_list|(
name|username
operator|==
literal|null
condition|?
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getUserName
argument_list|()
else|:
name|username
argument_list|,
name|groupname
operator|==
literal|null
condition|?
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getGroupName
argument_list|()
else|:
name|groupname
argument_list|,
name|metadata
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getBlobMaterialization
argument_list|()
operator|==
name|BlobMaterialization
operator|.
name|Implicit
condition|)
block|{
comment|// It's an implicit folder, need to materialize it.
name|store
operator|.
name|storeEmptyFolder
argument_list|(
name|key
argument_list|,
name|newPermissionStatus
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|changePermissionStatus
argument_list|(
name|key
argument_list|,
name|newPermissionStatus
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Call the base close() to close any resources there.
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Close the store
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * A handler that defines what to do with blobs whose upload was interrupted.    */
DECL|class|DanglingFileHandler
specifier|private
specifier|abstract
class|class
name|DanglingFileHandler
block|{
DECL|method|handleFile (FileMetadata file, FileMetadata tempFile)
specifier|abstract
name|void
name|handleFile
parameter_list|(
name|FileMetadata
name|file
parameter_list|,
name|FileMetadata
name|tempFile
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Handler implementation for just deleting dangling files and cleaning them    * up.    */
DECL|class|DanglingFileDeleter
specifier|private
class|class
name|DanglingFileDeleter
extends|extends
name|DanglingFileHandler
block|{
annotation|@
name|Override
DECL|method|handleFile (FileMetadata file, FileMetadata tempFile)
name|void
name|handleFile
parameter_list|(
name|FileMetadata
name|file
parameter_list|,
name|FileMetadata
name|tempFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting dangling file "
operator|+
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|delete
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|delete
argument_list|(
name|tempFile
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handler implementation for just moving dangling files to recovery location    * (/lost+found).    */
DECL|class|DanglingFileRecoverer
specifier|private
class|class
name|DanglingFileRecoverer
extends|extends
name|DanglingFileHandler
block|{
DECL|field|destination
specifier|private
specifier|final
name|Path
name|destination
decl_stmt|;
DECL|method|DanglingFileRecoverer (Path destination)
name|DanglingFileRecoverer
parameter_list|(
name|Path
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleFile (FileMetadata file, FileMetadata tempFile)
name|void
name|handleFile
parameter_list|(
name|FileMetadata
name|file
parameter_list|,
name|FileMetadata
name|tempFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recovering "
operator|+
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Move to the final destination
name|String
name|finalDestinationKey
init|=
name|pathToKey
argument_list|(
operator|new
name|Path
argument_list|(
name|destination
argument_list|,
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|rename
argument_list|(
name|tempFile
operator|.
name|getKey
argument_list|()
argument_list|,
name|finalDestinationKey
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finalDestinationKey
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// Delete the empty link file now that we've restored it.
name|store
operator|.
name|delete
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check if a path has colons in its name    */
DECL|method|containsColon (Path p)
specifier|private
name|boolean
name|containsColon
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
return|;
block|}
comment|/**    * Implements recover and delete (-move and -delete) behaviors for handling    * dangling files (blobs whose upload was interrupted).    *     * @param root    *          The root path to check from.    * @param handler    *          The handler that deals with dangling files.    */
DECL|method|handleFilesWithDanglingTempData (Path root, DanglingFileHandler handler)
specifier|private
name|void
name|handleFilesWithDanglingTempData
parameter_list|(
name|Path
name|root
parameter_list|,
name|DanglingFileHandler
name|handler
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Calculate the cut-off for when to consider a blob to be dangling.
name|long
name|cutoffForDangling
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|AZURE_TEMP_EXPIRY_PROPERTY_NAME
argument_list|,
name|AZURE_TEMP_EXPIRY_DEFAULT
argument_list|)
operator|*
literal|1000
decl_stmt|;
comment|// Go over all the blobs under the given root and look for blobs to
comment|// recover.
name|String
name|priorLastKey
init|=
literal|null
decl_stmt|;
do|do
block|{
name|PartialListing
name|listing
init|=
name|store
operator|.
name|listAll
argument_list|(
name|pathToKey
argument_list|(
name|root
argument_list|)
argument_list|,
name|AZURE_LIST_ALL
argument_list|,
name|AZURE_UNBOUNDED_DEPTH
argument_list|,
name|priorLastKey
argument_list|)
decl_stmt|;
for|for
control|(
name|FileMetadata
name|file
range|:
name|listing
operator|.
name|getFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// We don't recover directory blobs
comment|// See if this blob has a link in it (meaning it's a place-holder
comment|// blob for when the upload to the temp blob is complete).
name|String
name|link
init|=
name|store
operator|.
name|getLinkInFileMetadata
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|link
operator|!=
literal|null
condition|)
block|{
comment|// It has a link, see if the temp blob it is pointing to is
comment|// existent and old enough to be considered dangling.
name|FileMetadata
name|linkMetadata
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|link
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkMetadata
operator|!=
literal|null
operator|&&
name|linkMetadata
operator|.
name|getLastModified
argument_list|()
operator|>=
name|cutoffForDangling
condition|)
block|{
comment|// Found one!
name|handler
operator|.
name|handleFile
argument_list|(
name|file
argument_list|,
name|linkMetadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|priorLastKey
operator|=
name|listing
operator|.
name|getPriorLastKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|priorLastKey
operator|!=
literal|null
condition|)
do|;
block|}
comment|/**    * Looks under the given root path for any blob that are left "dangling",    * meaning that they are place-holder blobs that we created while we upload    * the data to a temporary blob, but for some reason we crashed in the middle    * of the upload and left them there. If any are found, we move them to the    * destination given.    *     * @param root    *          The root path to consider.    * @param destination    *          The destination path to move any recovered files to.    * @throws IOException    */
DECL|method|recoverFilesWithDanglingTempData (Path root, Path destination)
specifier|public
name|void
name|recoverFilesWithDanglingTempData
parameter_list|(
name|Path
name|root
parameter_list|,
name|Path
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recovering files with dangling temp data in "
operator|+
name|root
argument_list|)
expr_stmt|;
block|}
name|handleFilesWithDanglingTempData
argument_list|(
name|root
argument_list|,
operator|new
name|DanglingFileRecoverer
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Looks under the given root path for any blob that are left "dangling",    * meaning that they are place-holder blobs that we created while we upload    * the data to a temporary blob, but for some reason we crashed in the middle    * of the upload and left them there. If any are found, we delete them.    *     * @param root    *          The root path to consider.    * @throws IOException    */
DECL|method|deleteFilesWithDanglingTempData (Path root)
specifier|public
name|void
name|deleteFilesWithDanglingTempData
parameter_list|(
name|Path
name|root
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting files with dangling temp data in "
operator|+
name|root
argument_list|)
expr_stmt|;
block|}
name|handleFilesWithDanglingTempData
argument_list|(
name|root
argument_list|,
operator|new
name|DanglingFileDeleter
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Encode the key with a random prefix for load balancing in Azure storage.    * Upload data to a random temporary file then do storage side renaming to    * recover the original key.    *     * @param aKey    * @param numBuckets    * @return Encoded version of the original key.    */
DECL|method|encodeKey (String aKey)
specifier|private
specifier|static
name|String
name|encodeKey
parameter_list|(
name|String
name|aKey
parameter_list|)
block|{
comment|// Get the tail end of the key name.
comment|//
name|String
name|fileName
init|=
name|aKey
operator|.
name|substring
argument_list|(
name|aKey
operator|.
name|lastIndexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|+
literal|1
argument_list|,
name|aKey
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// Construct the randomized prefix of the file name. The prefix ensures the
comment|// file always drops into the same folder but with a varying tail key name.
name|String
name|filePrefix
init|=
name|AZURE_TEMP_FOLDER
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Concatenate the randomized prefix with the tail of the key name.
name|String
name|randomizedKey
init|=
name|filePrefix
operator|+
name|fileName
decl_stmt|;
comment|// Return to the caller with the randomized key.
return|return
name|randomizedKey
return|;
block|}
block|}
end_class

end_unit

