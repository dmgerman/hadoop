begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Throttles Azure Blob File System read and write operations to achieve maximum  * throughput by minimizing errors.  The errors occur when the account ingress  * or egress limits are exceeded and the server-side throttles requests.  * Server-side throttling causes the retry policy to be used, but the retry  * policy sleeps for long periods of time causing the total ingress or egress  * throughput to be as much as 35% lower than optimal.  The retry policy is also  * after the fact, in that it applies after a request fails.  On the other hand,  * the client-side throttling implemented here happens before requests are made  * and sleeps just enough to minimize errors, allowing optimal ingress and/or  * egress throughput.  */
end_comment

begin_class
DECL|class|AbfsClientThrottlingIntercept
specifier|public
specifier|final
class|class
name|AbfsClientThrottlingIntercept
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbfsClientThrottlingIntercept
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|singleton
specifier|private
specifier|static
name|AbfsClientThrottlingIntercept
name|singleton
init|=
literal|null
decl_stmt|;
DECL|field|readThrottler
specifier|private
name|AbfsClientThrottlingAnalyzer
name|readThrottler
init|=
literal|null
decl_stmt|;
DECL|field|writeThrottler
specifier|private
name|AbfsClientThrottlingAnalyzer
name|writeThrottler
init|=
literal|null
decl_stmt|;
DECL|field|isAutoThrottlingEnabled
specifier|private
specifier|static
name|boolean
name|isAutoThrottlingEnabled
init|=
literal|false
decl_stmt|;
comment|// Hide default constructor
DECL|method|AbfsClientThrottlingIntercept ()
specifier|private
name|AbfsClientThrottlingIntercept
parameter_list|()
block|{
name|readThrottler
operator|=
operator|new
name|AbfsClientThrottlingAnalyzer
argument_list|(
literal|"read"
argument_list|)
expr_stmt|;
name|writeThrottler
operator|=
operator|new
name|AbfsClientThrottlingAnalyzer
argument_list|(
literal|"write"
argument_list|)
expr_stmt|;
name|isAutoThrottlingEnabled
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client-side throttling is enabled for the ABFS file system."
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeSingleton (boolean isAutoThrottlingEnabled)
specifier|public
specifier|static
specifier|synchronized
name|void
name|initializeSingleton
parameter_list|(
name|boolean
name|isAutoThrottlingEnabled
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isAutoThrottlingEnabled
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|singleton
operator|==
literal|null
condition|)
block|{
name|singleton
operator|=
operator|new
name|AbfsClientThrottlingIntercept
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateMetrics (AbfsRestOperationType operationType, AbfsHttpOperation abfsHttpOperation)
specifier|static
name|void
name|updateMetrics
parameter_list|(
name|AbfsRestOperationType
name|operationType
parameter_list|,
name|AbfsHttpOperation
name|abfsHttpOperation
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isAutoThrottlingEnabled
operator|||
name|abfsHttpOperation
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|status
init|=
name|abfsHttpOperation
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|long
name|contentLength
init|=
literal|0
decl_stmt|;
comment|// If the socket is terminated prior to receiving a response, the HTTP
comment|// status may be 0 or -1.  A status less than 200 or greater than or equal
comment|// to 500 is considered an error.
name|boolean
name|isFailedOperation
init|=
operator|(
name|status
operator|<
name|HttpURLConnection
operator|.
name|HTTP_OK
operator|||
name|status
operator|>=
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
operator|)
decl_stmt|;
switch|switch
condition|(
name|operationType
condition|)
block|{
case|case
name|Append
case|:
name|contentLength
operator|=
name|abfsHttpOperation
operator|.
name|getBytesSent
argument_list|()
expr_stmt|;
if|if
condition|(
name|contentLength
operator|>
literal|0
condition|)
block|{
name|singleton
operator|.
name|writeThrottler
operator|.
name|addBytesTransferred
argument_list|(
name|contentLength
argument_list|,
name|isFailedOperation
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ReadFile
case|:
name|contentLength
operator|=
name|abfsHttpOperation
operator|.
name|getBytesReceived
argument_list|()
expr_stmt|;
if|if
condition|(
name|contentLength
operator|>
literal|0
condition|)
block|{
name|singleton
operator|.
name|readThrottler
operator|.
name|addBytesTransferred
argument_list|(
name|contentLength
argument_list|,
name|isFailedOperation
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
comment|/**    * Called before the request is sent.  Client-side throttling    * uses this to suspend the request, if necessary, to minimize errors and    * maximize throughput.    */
DECL|method|sendingRequest (AbfsRestOperationType operationType)
specifier|static
name|void
name|sendingRequest
parameter_list|(
name|AbfsRestOperationType
name|operationType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isAutoThrottlingEnabled
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|operationType
condition|)
block|{
case|case
name|ReadFile
case|:
name|singleton
operator|.
name|readThrottler
operator|.
name|suspendIfNecessary
argument_list|()
expr_stmt|;
break|break;
case|case
name|Append
case|:
name|singleton
operator|.
name|writeThrottler
operator|.
name|suspendIfNecessary
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
end_class

end_unit

