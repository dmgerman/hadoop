begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|AbfsHttpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|HttpHeaderConfigurations
import|;
end_import

begin_comment
comment|/**  * Represents the shared key credentials used to access an Azure Storage  * account.  */
end_comment

begin_class
DECL|class|SharedKeyCredentials
specifier|public
class|class
name|SharedKeyCredentials
block|{
DECL|field|EXPECTED_BLOB_QUEUE_CANONICALIZED_STRING_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|EXPECTED_BLOB_QUEUE_CANONICALIZED_STRING_LENGTH
init|=
literal|300
decl_stmt|;
DECL|field|CRLF
specifier|private
specifier|static
specifier|final
name|Pattern
name|CRLF
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\r\n"
argument_list|,
name|Pattern
operator|.
name|LITERAL
argument_list|)
decl_stmt|;
DECL|field|HMAC_SHA256
specifier|private
specifier|static
specifier|final
name|String
name|HMAC_SHA256
init|=
literal|"HmacSHA256"
decl_stmt|;
DECL|field|BASE_64
specifier|private
specifier|static
specifier|final
name|Base64
name|BASE_64
init|=
operator|new
name|Base64
argument_list|()
decl_stmt|;
comment|/**    * Stores a reference to the RFC1123 date/time pattern.    */
DECL|field|RFC1123_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|RFC1123_PATTERN
init|=
literal|"EEE, dd MMM yyyy HH:mm:ss z"
decl_stmt|;
DECL|field|accountName
specifier|private
name|String
name|accountName
decl_stmt|;
DECL|field|accountKey
specifier|private
name|byte
index|[]
name|accountKey
decl_stmt|;
DECL|field|hmacSha256
specifier|private
name|Mac
name|hmacSha256
decl_stmt|;
DECL|method|SharedKeyCredentials (final String accountName, final String accountKey)
specifier|public
name|SharedKeyCredentials
parameter_list|(
specifier|final
name|String
name|accountName
parameter_list|,
specifier|final
name|String
name|accountKey
parameter_list|)
block|{
if|if
condition|(
name|accountName
operator|==
literal|null
operator|||
name|accountName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid account name."
argument_list|)
throw|;
block|}
if|if
condition|(
name|accountKey
operator|==
literal|null
operator|||
name|accountKey
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid account key."
argument_list|)
throw|;
block|}
name|this
operator|.
name|accountName
operator|=
name|accountName
expr_stmt|;
name|this
operator|.
name|accountKey
operator|=
name|BASE_64
operator|.
name|decode
argument_list|(
name|accountKey
argument_list|)
expr_stmt|;
name|initializeMac
argument_list|()
expr_stmt|;
block|}
DECL|method|signRequest (HttpURLConnection connection, final long contentLength)
specifier|public
name|void
name|signRequest
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|,
specifier|final
name|long
name|contentLength
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|connection
operator|.
name|setRequestProperty
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_DATE
argument_list|,
name|getGMTTime
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|stringToSign
init|=
name|canonicalize
argument_list|(
name|connection
argument_list|,
name|accountName
argument_list|,
name|contentLength
argument_list|)
decl_stmt|;
specifier|final
name|String
name|computedBase64Signature
init|=
name|computeHmac256
argument_list|(
name|stringToSign
argument_list|)
decl_stmt|;
name|connection
operator|.
name|setRequestProperty
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|AUTHORIZATION
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s %s:%s"
argument_list|,
literal|"SharedKey"
argument_list|,
name|accountName
argument_list|,
name|computedBase64Signature
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|computeHmac256 (final String stringToSign)
specifier|private
name|String
name|computeHmac256
parameter_list|(
specifier|final
name|String
name|stringToSign
parameter_list|)
block|{
name|byte
index|[]
name|utf8Bytes
decl_stmt|;
try|try
block|{
name|utf8Bytes
operator|=
name|stringToSign
operator|.
name|getBytes
argument_list|(
name|AbfsHttpConstants
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|byte
index|[]
name|hmac
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|hmac
operator|=
name|hmacSha256
operator|.
name|doFinal
argument_list|(
name|utf8Bytes
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|BASE_64
operator|.
name|encode
argument_list|(
name|hmac
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
comment|/**    * Add x-ms- prefixed headers in a fixed order.    *    * @param conn                the HttpURLConnection for the operation    * @param canonicalizedString the canonicalized string to add the canonicalized headerst to.    */
DECL|method|addCanonicalizedHeaders (final HttpURLConnection conn, final StringBuilder canonicalizedString)
specifier|private
specifier|static
name|void
name|addCanonicalizedHeaders
parameter_list|(
specifier|final
name|HttpURLConnection
name|conn
parameter_list|,
specifier|final
name|StringBuilder
name|canonicalizedString
parameter_list|)
block|{
comment|// Look for header names that start with
comment|// HeaderNames.PrefixForStorageHeader
comment|// Then sort them in case-insensitive manner.
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
name|conn
operator|.
name|getRequestProperties
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|httpStorageHeaderNameArray
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|key
range|:
name|headers
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|startsWith
argument_list|(
name|AbfsHttpConstants
operator|.
name|HTTP_HEADER_PREFIX
argument_list|)
condition|)
block|{
name|httpStorageHeaderNameArray
operator|.
name|add
argument_list|(
name|key
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|httpStorageHeaderNameArray
argument_list|)
expr_stmt|;
comment|// Now go through each header's values in the sorted order and append
comment|// them to the canonicalized string.
for|for
control|(
specifier|final
name|String
name|key
range|:
name|httpStorageHeaderNameArray
control|)
block|{
specifier|final
name|StringBuilder
name|canonicalizedElement
init|=
operator|new
name|StringBuilder
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|delimiter
init|=
literal|":"
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|values
init|=
name|getHeaderValues
argument_list|(
name|headers
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|boolean
name|appendCanonicalizedElement
init|=
literal|false
decl_stmt|;
comment|// Go through values, unfold them, and then append them to the
comment|// canonicalized element string.
for|for
control|(
specifier|final
name|String
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|appendCanonicalizedElement
operator|=
literal|true
expr_stmt|;
block|}
comment|// Unfolding is simply removal of CRLF.
specifier|final
name|String
name|unfoldedValue
init|=
name|CRLF
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
comment|// Append it to the canonicalized element string.
name|canonicalizedElement
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
name|canonicalizedElement
operator|.
name|append
argument_list|(
name|unfoldedValue
argument_list|)
expr_stmt|;
name|delimiter
operator|=
literal|","
expr_stmt|;
block|}
comment|// Now, add this canonicalized element to the canonicalized header
comment|// string.
if|if
condition|(
name|appendCanonicalizedElement
condition|)
block|{
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|canonicalizedElement
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Initialize the HmacSha256 associated with the account key.    */
DECL|method|initializeMac ()
specifier|private
name|void
name|initializeMac
parameter_list|()
block|{
comment|// Initializes the HMAC-SHA256 Mac and SecretKey.
try|try
block|{
name|hmacSha256
operator|=
name|Mac
operator|.
name|getInstance
argument_list|(
name|HMAC_SHA256
argument_list|)
expr_stmt|;
name|hmacSha256
operator|.
name|init
argument_list|(
operator|new
name|SecretKeySpec
argument_list|(
name|accountKey
argument_list|,
name|HMAC_SHA256
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Append a string to a string builder with a newline constant.    *    * @param builder the StringBuilder object    * @param element the string to append.    */
DECL|method|appendCanonicalizedElement (final StringBuilder builder, final String element)
specifier|private
specifier|static
name|void
name|appendCanonicalizedElement
parameter_list|(
specifier|final
name|StringBuilder
name|builder
parameter_list|,
specifier|final
name|String
name|element
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a canonicalized string from the request's headers that will be used to construct the signature string    * for signing a Blob or Queue service request under the Shared Key Full authentication scheme.    *    * @param address       the request URI    * @param accountName   the account name associated with the request    * @param method        the verb to be used for the HTTP request.    * @param contentType   the content type of the HTTP request.    * @param contentLength the length of the content written to the outputstream in bytes, -1 if unknown    * @param date          the date/time specification for the HTTP request    * @param conn          the HttpURLConnection for the operation.    * @return A canonicalized string.    */
DECL|method|canonicalizeHttpRequest (final URL address, final String accountName, final String method, final String contentType, final long contentLength, final String date, final HttpURLConnection conn)
specifier|private
specifier|static
name|String
name|canonicalizeHttpRequest
parameter_list|(
specifier|final
name|URL
name|address
parameter_list|,
specifier|final
name|String
name|accountName
parameter_list|,
specifier|final
name|String
name|method
parameter_list|,
specifier|final
name|String
name|contentType
parameter_list|,
specifier|final
name|long
name|contentLength
parameter_list|,
specifier|final
name|String
name|date
parameter_list|,
specifier|final
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
comment|// The first element should be the Method of the request.
comment|// I.e. GET, POST, PUT, or HEAD.
specifier|final
name|StringBuilder
name|canonicalizedString
init|=
operator|new
name|StringBuilder
argument_list|(
name|EXPECTED_BLOB_QUEUE_CANONICALIZED_STRING_LENGTH
argument_list|)
decl_stmt|;
name|canonicalizedString
operator|.
name|append
argument_list|(
name|conn
operator|.
name|getRequestMethod
argument_list|()
argument_list|)
expr_stmt|;
comment|// The next elements are
comment|// If any element is missing it may be empty.
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|getHeaderValue
argument_list|(
name|conn
argument_list|,
name|HttpHeaderConfigurations
operator|.
name|CONTENT_ENCODING
argument_list|,
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|getHeaderValue
argument_list|(
name|conn
argument_list|,
name|HttpHeaderConfigurations
operator|.
name|CONTENT_LANGUAGE
argument_list|,
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|contentLength
operator|<=
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|contentLength
argument_list|)
argument_list|)
expr_stmt|;
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|getHeaderValue
argument_list|(
name|conn
argument_list|,
name|HttpHeaderConfigurations
operator|.
name|CONTENT_MD5
argument_list|,
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|contentType
operator|!=
literal|null
condition|?
name|contentType
else|:
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
expr_stmt|;
specifier|final
name|String
name|dateString
init|=
name|getHeaderValue
argument_list|(
name|conn
argument_list|,
name|HttpHeaderConfigurations
operator|.
name|X_MS_DATE
argument_list|,
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
decl_stmt|;
comment|// If x-ms-date header exists, Date should be empty string
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|dateString
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
condition|?
name|date
else|:
literal|""
argument_list|)
expr_stmt|;
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|getHeaderValue
argument_list|(
name|conn
argument_list|,
name|HttpHeaderConfigurations
operator|.
name|IF_MODIFIED_SINCE
argument_list|,
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|getHeaderValue
argument_list|(
name|conn
argument_list|,
name|HttpHeaderConfigurations
operator|.
name|IF_MATCH
argument_list|,
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|getHeaderValue
argument_list|(
name|conn
argument_list|,
name|HttpHeaderConfigurations
operator|.
name|IF_NONE_MATCH
argument_list|,
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|getHeaderValue
argument_list|(
name|conn
argument_list|,
name|HttpHeaderConfigurations
operator|.
name|IF_UNMODIFIED_SINCE
argument_list|,
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|getHeaderValue
argument_list|(
name|conn
argument_list|,
name|HttpHeaderConfigurations
operator|.
name|RANGE
argument_list|,
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|addCanonicalizedHeaders
argument_list|(
name|conn
argument_list|,
name|canonicalizedString
argument_list|)
expr_stmt|;
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedString
argument_list|,
name|getCanonicalizedResource
argument_list|(
name|address
argument_list|,
name|accountName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|canonicalizedString
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Gets the canonicalized resource string for a Blob or Queue service request under the Shared Key Lite    * authentication scheme.    *    * @param address     the resource URI.    * @param accountName the account name for the request.    * @return the canonicalized resource string.    */
DECL|method|getCanonicalizedResource (final URL address, final String accountName)
specifier|private
specifier|static
name|String
name|getCanonicalizedResource
parameter_list|(
specifier|final
name|URL
name|address
parameter_list|,
specifier|final
name|String
name|accountName
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
comment|// Resource path
specifier|final
name|StringBuilder
name|resourcepath
init|=
operator|new
name|StringBuilder
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
argument_list|)
decl_stmt|;
name|resourcepath
operator|.
name|append
argument_list|(
name|accountName
argument_list|)
expr_stmt|;
comment|// Note that AbsolutePath starts with a '/'.
name|resourcepath
operator|.
name|append
argument_list|(
name|address
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|canonicalizedResource
init|=
operator|new
name|StringBuilder
argument_list|(
name|resourcepath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// query parameters
if|if
condition|(
name|address
operator|.
name|getQuery
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|address
operator|.
name|getQuery
argument_list|()
operator|.
name|contains
argument_list|(
name|AbfsHttpConstants
operator|.
name|EQUAL
argument_list|)
condition|)
block|{
comment|//no query params.
return|return
name|canonicalizedResource
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryVariables
init|=
name|parseQueryString
argument_list|(
name|address
operator|.
name|getQuery
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lowercasedKeyNameValue
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|entry
range|:
name|queryVariables
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// sort the value and organize it as comma separated values
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|sortedValues
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedValues
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|stringValue
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|value
range|:
name|sortedValues
control|)
block|{
if|if
condition|(
name|stringValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|stringValue
operator|.
name|append
argument_list|(
name|AbfsHttpConstants
operator|.
name|COMMA
argument_list|)
expr_stmt|;
block|}
name|stringValue
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|// key turns out to be null for ?a&b&c&d
name|lowercasedKeyNameValue
operator|.
name|put
argument_list|(
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|)
operator|==
literal|null
condition|?
literal|null
else|:
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|stringValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|sortedKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|lowercasedKeyNameValue
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedKeys
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|key
range|:
name|sortedKeys
control|)
block|{
specifier|final
name|StringBuilder
name|queryParamString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|queryParamString
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|queryParamString
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|queryParamString
operator|.
name|append
argument_list|(
name|lowercasedKeyNameValue
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|appendCanonicalizedElement
argument_list|(
name|canonicalizedResource
argument_list|,
name|queryParamString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|canonicalizedResource
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Gets all the values for the given header in the one to many map,    * performs a trimStart() on each return value.    *    * @param headers    a one to many map of key / values representing the header values for the connection.    * @param headerName the name of the header to lookup    * @return an ArrayList<String> of all trimmed values corresponding to the requested headerName. This may be empty    * if the header is not found.    */
DECL|method|getHeaderValues ( final Map<String, List<String>> headers, final String headerName)
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getHeaderValues
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|,
specifier|final
name|String
name|headerName
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|arrayOfValues
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
name|headerName
argument_list|)
condition|)
block|{
name|values
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|value
range|:
name|values
control|)
block|{
comment|// canonicalization formula requires the string to be left
comment|// trimmed.
name|arrayOfValues
operator|.
name|add
argument_list|(
name|trimStart
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|arrayOfValues
return|;
block|}
comment|/**    * Parses a query string into a one to many hashmap.    *    * @param parseString the string to parse    * @return a HashMap<String, String[]> of the key values.    */
DECL|method|parseQueryString (String parseString)
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|parseQueryString
parameter_list|(
name|String
name|parseString
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|retVals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parseString
operator|==
literal|null
operator|||
name|parseString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|retVals
return|;
block|}
comment|// 1. Remove ? if present
specifier|final
name|int
name|queryDex
init|=
name|parseString
operator|.
name|indexOf
argument_list|(
name|AbfsHttpConstants
operator|.
name|QUESTION_MARK
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryDex
operator|>=
literal|0
operator|&&
name|parseString
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|parseString
operator|=
name|parseString
operator|.
name|substring
argument_list|(
name|queryDex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// 2. split name value pairs by splitting on the 'c&' character
specifier|final
name|String
index|[]
name|valuePairs
init|=
name|parseString
operator|.
name|contains
argument_list|(
name|AbfsHttpConstants
operator|.
name|AND_MARK
argument_list|)
condition|?
name|parseString
operator|.
name|split
argument_list|(
name|AbfsHttpConstants
operator|.
name|AND_MARK
argument_list|)
else|:
name|parseString
operator|.
name|split
argument_list|(
name|AbfsHttpConstants
operator|.
name|SEMICOLON
argument_list|)
decl_stmt|;
comment|// 3. for each field value pair parse into appropriate map entries
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|valuePairs
operator|.
name|length
condition|;
name|m
operator|++
control|)
block|{
specifier|final
name|int
name|equalDex
init|=
name|valuePairs
index|[
name|m
index|]
operator|.
name|indexOf
argument_list|(
name|AbfsHttpConstants
operator|.
name|EQUAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|equalDex
operator|<
literal|0
operator|||
name|equalDex
operator|==
name|valuePairs
index|[
name|m
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
continue|continue;
block|}
name|String
name|key
init|=
name|valuePairs
index|[
name|m
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|equalDex
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|valuePairs
index|[
name|m
index|]
operator|.
name|substring
argument_list|(
name|equalDex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|key
operator|=
name|safeDecode
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|value
operator|=
name|safeDecode
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// 3.1 add to map
name|String
index|[]
name|values
init|=
name|retVals
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|String
index|[]
block|{
name|value
block|}
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|retVals
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|retVals
return|;
block|}
comment|/**    * Performs safe decoding of the specified string, taking care to preserve each<code>+</code> character, rather    * than replacing it with a space character.    *    * @param stringToDecode A<code>String</code> that represents the string to decode.    * @return A<code>String</code> that represents the decoded string.    *<p>    * If a storage service error occurred.    */
DECL|method|safeDecode (final String stringToDecode)
specifier|private
specifier|static
name|String
name|safeDecode
parameter_list|(
specifier|final
name|String
name|stringToDecode
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|stringToDecode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|stringToDecode
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|stringToDecode
operator|.
name|contains
argument_list|(
name|AbfsHttpConstants
operator|.
name|PLUS
argument_list|)
condition|)
block|{
specifier|final
name|StringBuilder
name|outBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|startDex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|stringToDecode
operator|.
name|length
argument_list|()
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|stringToDecode
operator|.
name|charAt
argument_list|(
name|m
argument_list|)
operator|==
literal|'+'
condition|)
block|{
if|if
condition|(
name|m
operator|>
name|startDex
condition|)
block|{
name|outBuilder
operator|.
name|append
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|stringToDecode
operator|.
name|substring
argument_list|(
name|startDex
argument_list|,
name|m
argument_list|)
argument_list|,
name|AbfsHttpConstants
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outBuilder
operator|.
name|append
argument_list|(
name|AbfsHttpConstants
operator|.
name|PLUS
argument_list|)
expr_stmt|;
name|startDex
operator|=
name|m
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|startDex
operator|!=
name|stringToDecode
operator|.
name|length
argument_list|()
condition|)
block|{
name|outBuilder
operator|.
name|append
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|stringToDecode
operator|.
name|substring
argument_list|(
name|startDex
argument_list|,
name|stringToDecode
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|AbfsHttpConstants
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|outBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|stringToDecode
argument_list|,
name|AbfsHttpConstants
operator|.
name|UTF_8
argument_list|)
return|;
block|}
block|}
DECL|method|trimStart (final String value)
specifier|private
specifier|static
name|String
name|trimStart
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
name|int
name|spaceDex
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|spaceDex
operator|<
name|value
operator|.
name|length
argument_list|()
operator|&&
name|value
operator|.
name|charAt
argument_list|(
name|spaceDex
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|spaceDex
operator|++
expr_stmt|;
block|}
return|return
name|value
operator|.
name|substring
argument_list|(
name|spaceDex
argument_list|)
return|;
block|}
DECL|method|getHeaderValue (final HttpURLConnection conn, final String headerName, final String defaultValue)
specifier|private
specifier|static
name|String
name|getHeaderValue
parameter_list|(
specifier|final
name|HttpURLConnection
name|conn
parameter_list|,
specifier|final
name|String
name|headerName
parameter_list|,
specifier|final
name|String
name|defaultValue
parameter_list|)
block|{
specifier|final
name|String
name|headerValue
init|=
name|conn
operator|.
name|getRequestProperty
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
return|return
name|headerValue
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|headerValue
return|;
block|}
comment|/**    * Constructs a canonicalized string for signing a request.    *    * @param conn          the HttpURLConnection to canonicalize    * @param accountName   the account name associated with the request    * @param contentLength the length of the content written to the outputstream in bytes,    *                      -1 if unknown    * @return a canonicalized string.    */
DECL|method|canonicalize (final HttpURLConnection conn, final String accountName, final Long contentLength)
specifier|private
name|String
name|canonicalize
parameter_list|(
specifier|final
name|HttpURLConnection
name|conn
parameter_list|,
specifier|final
name|String
name|accountName
parameter_list|,
specifier|final
name|Long
name|contentLength
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|contentLength
operator|<
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Content-Length header must be greater than or equal to -1."
argument_list|)
throw|;
block|}
name|String
name|contentType
init|=
name|getHeaderValue
argument_list|(
name|conn
argument_list|,
name|HttpHeaderConfigurations
operator|.
name|CONTENT_TYPE
argument_list|,
literal|""
argument_list|)
decl_stmt|;
return|return
name|canonicalizeHttpRequest
argument_list|(
name|conn
operator|.
name|getURL
argument_list|()
argument_list|,
name|accountName
argument_list|,
name|conn
operator|.
name|getRequestMethod
argument_list|()
argument_list|,
name|contentType
argument_list|,
name|contentLength
argument_list|,
literal|null
argument_list|,
name|conn
argument_list|)
return|;
block|}
comment|/**    * Thread local for storing GMT date format.    */
DECL|field|rfc1123GmtDateTimeFormatter
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|DateFormat
argument_list|>
name|rfc1123GmtDateTimeFormatter
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DateFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|DateFormat
name|initialValue
parameter_list|()
block|{
specifier|final
name|DateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|RFC1123_PATTERN
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|GMT_ZONE
argument_list|)
expr_stmt|;
return|return
name|formatter
return|;
block|}
block|}
decl_stmt|;
DECL|field|GMT_ZONE
specifier|public
specifier|static
specifier|final
name|TimeZone
name|GMT_ZONE
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|AbfsHttpConstants
operator|.
name|GMT_TIMEZONE
argument_list|)
decl_stmt|;
comment|/**    * Returns the current GMT date/time String using the RFC1123 pattern.    *    * @return A<code>String</code> that represents the current GMT date/time using the RFC1123 pattern.    */
DECL|method|getGMTTime ()
specifier|static
name|String
name|getGMTTime
parameter_list|()
block|{
return|return
name|getGMTTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the GTM date/time String for the specified value using the RFC1123 pattern.    *    * @param date    *            A<code>Date</code> object that represents the date to convert to GMT date/time in the RFC1123    *            pattern.    *    * @return A<code>String</code> that represents the GMT date/time for the specified value using the RFC1123    *         pattern.    */
DECL|method|getGMTTime (final Date date)
specifier|static
name|String
name|getGMTTime
parameter_list|(
specifier|final
name|Date
name|date
parameter_list|)
block|{
return|return
name|rfc1123GmtDateTimeFormatter
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
end_class

end_unit

