begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * An fsck tool implementation for WASB that does various admin/cleanup/recovery  * tasks on the WASB file system.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|WasbFsck
specifier|public
class|class
name|WasbFsck
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|mockFileSystemForTesting
specifier|private
name|FileSystem
name|mockFileSystemForTesting
init|=
literal|null
decl_stmt|;
DECL|field|LOST_AND_FOUND_PATH
specifier|private
specifier|static
specifier|final
name|String
name|LOST_AND_FOUND_PATH
init|=
literal|"/lost+found"
decl_stmt|;
DECL|field|pathNameWarning
specifier|private
name|boolean
name|pathNameWarning
init|=
literal|false
decl_stmt|;
DECL|method|WasbFsck (Configuration conf)
specifier|public
name|WasbFsck
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * For testing purposes, set the file system to use here instead of relying on    * getting it from the FileSystem class based on the URI.    *     * @param fileSystem    *          The file system to use.    */
annotation|@
name|VisibleForTesting
DECL|method|setMockFileSystemForTesting (FileSystem fileSystem)
specifier|public
name|void
name|setMockFileSystemForTesting
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|)
block|{
name|this
operator|.
name|mockFileSystemForTesting
operator|=
name|fileSystem
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|doPrintUsage
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|Path
name|pathToCheck
init|=
literal|null
decl_stmt|;
name|boolean
name|doRecover
init|=
literal|false
decl_stmt|;
name|boolean
name|doDelete
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
operator|!
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|pathToCheck
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't specify multiple paths to check on the command-line"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|pathToCheck
operator|=
operator|new
name|Path
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-move"
argument_list|)
condition|)
block|{
name|doRecover
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-delete"
argument_list|)
condition|)
block|{
name|doDelete
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doRecover
operator|&&
name|doDelete
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Conflicting options: can't specify both -move and -delete."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|pathToCheck
operator|==
literal|null
condition|)
block|{
name|pathToCheck
operator|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// Check everything.
block|}
name|FileSystem
name|fs
decl_stmt|;
if|if
condition|(
name|mockFileSystemForTesting
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|pathToCheck
operator|.
name|toUri
argument_list|()
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|=
name|mockFileSystemForTesting
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|recursiveCheckChildPathName
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|makeQualified
argument_list|(
name|pathToCheck
argument_list|)
argument_list|)
condition|)
block|{
name|pathNameWarning
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|NativeAzureFileSystem
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can only check WASB file system. Instead I'm asked to"
operator|+
literal|" check: "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
name|NativeAzureFileSystem
name|wasbFs
init|=
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
decl_stmt|;
if|if
condition|(
name|doRecover
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Recovering files with dangling data under: "
operator|+
name|pathToCheck
argument_list|)
expr_stmt|;
name|wasbFs
operator|.
name|recoverFilesWithDanglingTempData
argument_list|(
name|pathToCheck
argument_list|,
operator|new
name|Path
argument_list|(
name|LOST_AND_FOUND_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|doDelete
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting temp files with dangling data under: "
operator|+
name|pathToCheck
argument_list|)
expr_stmt|;
name|wasbFs
operator|.
name|deleteFilesWithDanglingTempData
argument_list|(
name|pathToCheck
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Please specify -move or -delete"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|getPathNameWarning ()
specifier|public
name|boolean
name|getPathNameWarning
parameter_list|()
block|{
return|return
name|pathNameWarning
return|;
block|}
comment|/**    * Recursively check if a given path and its child paths have colons in their    * names. It returns true if none of them has a colon or this path does not    * exist, and false otherwise.    */
DECL|method|recursiveCheckChildPathName (FileSystem fs, Path p)
specifier|private
name|boolean
name|recursiveCheckChildPathName
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Path "
operator|+
name|p
operator|+
literal|" does not exist!"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|status
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|containsColon
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Warning: file "
operator|+
name|p
operator|+
literal|" has a colon in its name."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|boolean
name|flag
decl_stmt|;
if|if
condition|(
name|containsColon
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Warning: directory "
operator|+
name|p
operator|+
literal|" has a colon in its name."
argument_list|)
expr_stmt|;
name|flag
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|flag
operator|=
literal|true
expr_stmt|;
block|}
name|FileStatus
index|[]
name|listed
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|l
range|:
name|listed
control|)
block|{
if|if
condition|(
operator|!
name|recursiveCheckChildPathName
argument_list|(
name|fs
argument_list|,
name|l
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|flag
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|flag
return|;
block|}
block|}
DECL|method|containsColon (Path p)
specifier|private
name|boolean
name|containsColon
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
return|;
block|}
DECL|method|printUsage ()
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: WasbFSck [<path>] [-move | -delete]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t<path>\tstart checking from this path"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t-move\tmove any files whose upload was interrupted"
operator|+
literal|" mid-stream to "
operator|+
name|LOST_AND_FOUND_PATH
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t-delete\tdelete any files whose upload was interrupted"
operator|+
literal|" mid-stream"
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doPrintUsage (List<String> args)
specifier|private
name|boolean
name|doPrintUsage
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
return|return
name|args
operator|.
name|contains
argument_list|(
literal|"-H"
argument_list|)
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|WasbFsck
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

