begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageErrorCode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageErrorCodeStrings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSExceptionMessages
import|;
end_import

begin_comment
comment|/**  * Utility class that has helper methods.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|NativeAzureFileSystemHelper
specifier|final
class|class
name|NativeAzureFileSystemHelper
block|{
DECL|method|NativeAzureFileSystemHelper ()
specifier|private
name|NativeAzureFileSystemHelper
parameter_list|()
block|{
comment|// Hiding the cosnstructor as this is a utility class.
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NativeAzureFileSystemHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|cleanup (Logger log, java.io.Closeable closeable)
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|(
name|Logger
name|log
parameter_list|,
name|java
operator|.
name|io
operator|.
name|Closeable
name|closeable
parameter_list|)
block|{
if|if
condition|(
name|closeable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception in closing {}"
argument_list|,
name|closeable
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Helper method to recursively check if the cause of the exception is    * a Azure storage exception.    */
DECL|method|checkForAzureStorageException (Exception e)
specifier|public
specifier|static
name|Throwable
name|checkForAzureStorageException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwable
name|innerException
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
while|while
condition|(
name|innerException
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|innerException
operator|instanceof
name|StorageException
operator|)
condition|)
block|{
name|innerException
operator|=
name|innerException
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
name|innerException
return|;
block|}
comment|/*    * Helper method to check if the AzureStorageException is    * because backing blob was not found.    */
DECL|method|isFileNotFoundException (StorageException e)
specifier|public
specifier|static
name|boolean
name|isFileNotFoundException
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|String
name|errorCode
init|=
name|e
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorCode
operator|!=
literal|null
operator|&&
operator|(
name|errorCode
operator|.
name|equals
argument_list|(
name|StorageErrorCodeStrings
operator|.
name|BLOB_NOT_FOUND
argument_list|)
operator|||
name|errorCode
operator|.
name|equals
argument_list|(
name|StorageErrorCodeStrings
operator|.
name|RESOURCE_NOT_FOUND
argument_list|)
operator|||
name|errorCode
operator|.
name|equals
argument_list|(
name|StorageErrorCode
operator|.
name|BLOB_NOT_FOUND
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|errorCode
operator|.
name|equals
argument_list|(
name|StorageErrorCode
operator|.
name|RESOURCE_NOT_FOUND
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/*    * Helper method that logs stack traces from all live threads.    */
DECL|method|logAllLiveStackTraces ()
specifier|public
specifier|static
name|void
name|logAllLiveStackTraces
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|entry
range|:
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Thread "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StackTraceElement
index|[]
name|trace
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|trace
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"\tat "
operator|+
name|trace
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Validation code, based on    * {@code FSInputStream.validatePositionedReadArgs()}.    * @param buffer destination buffer    * @param offset offset within the buffer    * @param length length of bytes to read    * @throws EOFException if the position is negative    * @throws IndexOutOfBoundsException if there isn't space for the amount of    * data requested.    * @throws IllegalArgumentException other arguments are invalid.    */
DECL|method|validateReadArgs (byte[] buffer, int offset, int length)
specifier|static
name|void
name|validateReadArgs
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|EOFException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|length
operator|>=
literal|0
argument_list|,
literal|"length is negative"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|buffer
operator|!=
literal|null
argument_list|,
literal|"Null buffer"
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|length
operator|-
name|offset
operator|<
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|FSExceptionMessages
operator|.
name|TOO_MANY_BYTES_FOR_DEST_BUFFER
operator|+
literal|": request length="
operator|+
name|length
operator|+
literal|", with offset ="
operator|+
name|offset
operator|+
literal|"; buffer capacity ="
operator|+
operator|(
name|buffer
operator|.
name|length
operator|-
name|offset
operator|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

