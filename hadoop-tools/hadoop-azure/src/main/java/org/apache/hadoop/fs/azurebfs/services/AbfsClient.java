begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|utils
operator|.
name|SSLSocketFactoryEx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|AbfsHttpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|HttpHeaderConfigurations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|HttpQueryParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|AzureBlobFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|InvalidUriException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|ExtensionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|AbfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
operator|.
name|AccessTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|AbfsHttpConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|FileSystemUriSchemes
operator|.
name|HTTPS_SCHEME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|HttpHeaderConfigurations
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|HttpQueryParams
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * AbfsClient.  */
end_comment

begin_class
DECL|class|AbfsClient
specifier|public
class|class
name|AbfsClient
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbfsClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|baseUrl
specifier|private
specifier|final
name|URL
name|baseUrl
decl_stmt|;
DECL|field|sharedKeyCredentials
specifier|private
specifier|final
name|SharedKeyCredentials
name|sharedKeyCredentials
decl_stmt|;
DECL|field|xMsVersion
specifier|private
specifier|final
name|String
name|xMsVersion
init|=
literal|"2018-11-09"
decl_stmt|;
DECL|field|retryPolicy
specifier|private
specifier|final
name|ExponentialRetryPolicy
name|retryPolicy
decl_stmt|;
DECL|field|filesystem
specifier|private
specifier|final
name|String
name|filesystem
decl_stmt|;
DECL|field|abfsConfiguration
specifier|private
specifier|final
name|AbfsConfiguration
name|abfsConfiguration
decl_stmt|;
DECL|field|userAgent
specifier|private
specifier|final
name|String
name|userAgent
decl_stmt|;
DECL|field|tokenProvider
specifier|private
specifier|final
name|AccessTokenProvider
name|tokenProvider
decl_stmt|;
DECL|method|AbfsClient (final URL baseUrl, final SharedKeyCredentials sharedKeyCredentials, final AbfsConfiguration abfsConfiguration, final ExponentialRetryPolicy exponentialRetryPolicy, final AccessTokenProvider tokenProvider)
specifier|public
name|AbfsClient
parameter_list|(
specifier|final
name|URL
name|baseUrl
parameter_list|,
specifier|final
name|SharedKeyCredentials
name|sharedKeyCredentials
parameter_list|,
specifier|final
name|AbfsConfiguration
name|abfsConfiguration
parameter_list|,
specifier|final
name|ExponentialRetryPolicy
name|exponentialRetryPolicy
parameter_list|,
specifier|final
name|AccessTokenProvider
name|tokenProvider
parameter_list|)
block|{
name|this
operator|.
name|baseUrl
operator|=
name|baseUrl
expr_stmt|;
name|this
operator|.
name|sharedKeyCredentials
operator|=
name|sharedKeyCredentials
expr_stmt|;
name|String
name|baseUrlString
init|=
name|baseUrl
operator|.
name|toString
argument_list|()
decl_stmt|;
name|this
operator|.
name|filesystem
operator|=
name|baseUrlString
operator|.
name|substring
argument_list|(
name|baseUrlString
operator|.
name|lastIndexOf
argument_list|(
name|FORWARD_SLASH
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|abfsConfiguration
operator|=
name|abfsConfiguration
expr_stmt|;
name|this
operator|.
name|retryPolicy
operator|=
name|exponentialRetryPolicy
expr_stmt|;
name|String
name|sslProviderName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|baseUrl
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|HTTPS_SCHEME
argument_list|)
condition|)
block|{
try|try
block|{
name|SSLSocketFactoryEx
operator|.
name|initializeDefaultFactory
argument_list|(
name|this
operator|.
name|abfsConfiguration
operator|.
name|getPreferredSSLFactoryOption
argument_list|()
argument_list|)
expr_stmt|;
name|sslProviderName
operator|=
name|SSLSocketFactoryEx
operator|.
name|getDefaultFactory
argument_list|()
operator|.
name|getProviderName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Suppress exception. Failure to init SSLSocketFactoryEx would have only performance impact.
block|}
block|}
name|this
operator|.
name|userAgent
operator|=
name|initializeUserAgent
argument_list|(
name|abfsConfiguration
argument_list|,
name|sslProviderName
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenProvider
operator|=
name|tokenProvider
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|tokenProvider
operator|instanceof
name|Closeable
condition|)
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
operator|(
name|Closeable
operator|)
name|tokenProvider
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFileSystem ()
specifier|public
name|String
name|getFileSystem
parameter_list|()
block|{
return|return
name|filesystem
return|;
block|}
DECL|method|getRetryPolicy ()
name|ExponentialRetryPolicy
name|getRetryPolicy
parameter_list|()
block|{
return|return
name|retryPolicy
return|;
block|}
DECL|method|getSharedKeyCredentials ()
name|SharedKeyCredentials
name|getSharedKeyCredentials
parameter_list|()
block|{
return|return
name|sharedKeyCredentials
return|;
block|}
DECL|method|createDefaultHeaders ()
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|createDefaultHeaders
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
operator|new
name|ArrayList
argument_list|<
name|AbfsHttpHeader
argument_list|>
argument_list|()
decl_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|X_MS_VERSION
argument_list|,
name|xMsVersion
argument_list|)
argument_list|)
expr_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|ACCEPT
argument_list|,
name|APPLICATION_JSON
operator|+
name|COMMA
operator|+
name|SINGLE_WHITE_SPACE
operator|+
name|APPLICATION_OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|ACCEPT_CHARSET
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|EMPTY_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|USER_AGENT
argument_list|,
name|userAgent
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|requestHeaders
return|;
block|}
DECL|method|createDefaultUriQueryBuilder ()
name|AbfsUriQueryBuilder
name|createDefaultUriQueryBuilder
parameter_list|()
block|{
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
operator|new
name|AbfsUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_TIMEOUT
argument_list|,
name|DEFAULT_TIMEOUT
argument_list|)
expr_stmt|;
return|return
name|abfsUriQueryBuilder
return|;
block|}
DECL|method|createFilesystem ()
specifier|public
name|AbfsRestOperation
name|createFilesystem
parameter_list|()
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
operator|new
name|AbfsUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_RESOURCE
argument_list|,
name|FILESYSTEM
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|CreateFileSystem
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_PUT
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|setFilesystemProperties (final String properties)
specifier|public
name|AbfsRestOperation
name|setFilesystemProperties
parameter_list|(
specifier|final
name|String
name|properties
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
comment|// JDK7 does not support PATCH, so to workaround the issue we will use
comment|// PUT and specify the real method in the X-Http-Method-Override header.
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|X_HTTP_METHOD_OVERRIDE
argument_list|,
name|HTTP_METHOD_PATCH
argument_list|)
argument_list|)
expr_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|X_MS_PROPERTIES
argument_list|,
name|properties
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_RESOURCE
argument_list|,
name|FILESYSTEM
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|SetFileSystemProperties
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_PUT
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|listPath (final String relativePath, final boolean recursive, final int listMaxResults, final String continuation)
specifier|public
name|AbfsRestOperation
name|listPath
parameter_list|(
specifier|final
name|String
name|relativePath
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|,
specifier|final
name|int
name|listMaxResults
parameter_list|,
specifier|final
name|String
name|continuation
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_RESOURCE
argument_list|,
name|FILESYSTEM
argument_list|)
expr_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_DIRECTORY
argument_list|,
name|relativePath
operator|==
literal|null
condition|?
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
else|:
name|relativePath
argument_list|)
expr_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_RECURSIVE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|recursive
argument_list|)
argument_list|)
expr_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_CONTINUATION
argument_list|,
name|continuation
argument_list|)
expr_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_MAXRESULTS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|listMaxResults
argument_list|)
argument_list|)
expr_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|HttpQueryParams
operator|.
name|QUERY_PARAM_UPN
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|abfsConfiguration
operator|.
name|isUpnUsed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|ListPaths
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_GET
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|getFilesystemProperties ()
specifier|public
name|AbfsRestOperation
name|getFilesystemProperties
parameter_list|()
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_RESOURCE
argument_list|,
name|FILESYSTEM
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|GetFileSystemProperties
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_HEAD
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|deleteFilesystem ()
specifier|public
name|AbfsRestOperation
name|deleteFilesystem
parameter_list|()
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_RESOURCE
argument_list|,
name|FILESYSTEM
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|DeleteFileSystem
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_DELETE
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|createPath (final String path, final boolean isFile, final boolean overwrite, final String permission, final String umask)
specifier|public
name|AbfsRestOperation
name|createPath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|boolean
name|isFile
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|,
specifier|final
name|String
name|permission
parameter_list|,
specifier|final
name|String
name|umask
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|IF_NONE_MATCH
argument_list|,
name|AbfsHttpConstants
operator|.
name|STAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|permission
operator|!=
literal|null
operator|&&
operator|!
name|permission
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_PERMISSIONS
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|umask
operator|!=
literal|null
operator|&&
operator|!
name|umask
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_UMASK
argument_list|,
name|umask
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_RESOURCE
argument_list|,
name|isFile
condition|?
name|FILE
else|:
name|DIRECTORY
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|path
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|CreatePath
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_PUT
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|renamePath (final String source, final String destination, final String continuation)
specifier|public
name|AbfsRestOperation
name|renamePath
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|String
name|destination
parameter_list|,
specifier|final
name|String
name|continuation
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
specifier|final
name|String
name|encodedRenameSource
init|=
name|urlEncode
argument_list|(
name|FORWARD_SLASH
operator|+
name|this
operator|.
name|getFileSystem
argument_list|()
operator|+
name|source
argument_list|)
decl_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|X_MS_RENAME_SOURCE
argument_list|,
name|encodedRenameSource
argument_list|)
argument_list|)
expr_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|IF_NONE_MATCH
argument_list|,
name|STAR
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_CONTINUATION
argument_list|,
name|continuation
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|destination
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|RenamePath
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_PUT
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|append (final String path, final long position, final byte[] buffer, final int offset, final int length)
specifier|public
name|AbfsRestOperation
name|append
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|long
name|position
parameter_list|,
specifier|final
name|byte
index|[]
name|buffer
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
comment|// JDK7 does not support PATCH, so to workaround the issue we will use
comment|// PUT and specify the real method in the X-Http-Method-Override header.
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|X_HTTP_METHOD_OVERRIDE
argument_list|,
name|HTTP_METHOD_PATCH
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_ACTION
argument_list|,
name|APPEND_ACTION
argument_list|)
expr_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_POSITION
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|position
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|path
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|Append
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_PUT
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|flush (final String path, final long position, boolean retainUncommittedData, boolean isClose)
specifier|public
name|AbfsRestOperation
name|flush
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|long
name|position
parameter_list|,
name|boolean
name|retainUncommittedData
parameter_list|,
name|boolean
name|isClose
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
comment|// JDK7 does not support PATCH, so to workaround the issue we will use
comment|// PUT and specify the real method in the X-Http-Method-Override header.
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|X_HTTP_METHOD_OVERRIDE
argument_list|,
name|HTTP_METHOD_PATCH
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_ACTION
argument_list|,
name|FLUSH_ACTION
argument_list|)
expr_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_POSITION
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|position
argument_list|)
argument_list|)
expr_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_RETAIN_UNCOMMITTED_DATA
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|retainUncommittedData
argument_list|)
argument_list|)
expr_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_CLOSE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|isClose
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|path
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|Flush
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_PUT
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|setPathProperties (final String path, final String properties)
specifier|public
name|AbfsRestOperation
name|setPathProperties
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|properties
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
comment|// JDK7 does not support PATCH, so to workaround the issue we will use
comment|// PUT and specify the real method in the X-Http-Method-Override header.
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|X_HTTP_METHOD_OVERRIDE
argument_list|,
name|HTTP_METHOD_PATCH
argument_list|)
argument_list|)
expr_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|X_MS_PROPERTIES
argument_list|,
name|properties
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_ACTION
argument_list|,
name|SET_PROPERTIES_ACTION
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|path
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|SetPathProperties
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_PUT
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|getPathStatus (final String path)
specifier|public
name|AbfsRestOperation
name|getPathStatus
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|HttpQueryParams
operator|.
name|QUERY_PARAM_UPN
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|abfsConfiguration
operator|.
name|isUpnUsed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|path
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|GetPathStatus
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_HEAD
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|read (final String path, final long position, final byte[] buffer, final int bufferOffset, final int bufferLength, final String eTag)
specifier|public
name|AbfsRestOperation
name|read
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|long
name|position
parameter_list|,
specifier|final
name|byte
index|[]
name|buffer
parameter_list|,
specifier|final
name|int
name|bufferOffset
parameter_list|,
specifier|final
name|int
name|bufferLength
parameter_list|,
specifier|final
name|String
name|eTag
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|RANGE
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"bytes=%d-%d"
argument_list|,
name|position
argument_list|,
name|position
operator|+
name|bufferLength
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|IF_MATCH
argument_list|,
name|eTag
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|path
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|ReadFile
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_GET
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|,
name|buffer
argument_list|,
name|bufferOffset
argument_list|,
name|bufferLength
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|deletePath (final String path, final boolean recursive, final String continuation)
specifier|public
name|AbfsRestOperation
name|deletePath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|,
specifier|final
name|String
name|continuation
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_RECURSIVE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|recursive
argument_list|)
argument_list|)
expr_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|QUERY_PARAM_CONTINUATION
argument_list|,
name|continuation
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|path
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|DeletePath
argument_list|,
name|this
argument_list|,
name|HTTP_METHOD_DELETE
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|setOwner (final String path, final String owner, final String group)
specifier|public
name|AbfsRestOperation
name|setOwner
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|group
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
comment|// JDK7 does not support PATCH, so to workaround the issue we will use
comment|// PUT and specify the real method in the X-Http-Method-Override header.
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|X_HTTP_METHOD_OVERRIDE
argument_list|,
name|HTTP_METHOD_PATCH
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
operator|&&
operator|!
name|owner
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_OWNER
argument_list|,
name|owner
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
operator|!
name|group
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_GROUP
argument_list|,
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|HttpQueryParams
operator|.
name|QUERY_PARAM_ACTION
argument_list|,
name|AbfsHttpConstants
operator|.
name|SET_ACCESS_CONTROL
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|path
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|SetOwner
argument_list|,
name|this
argument_list|,
name|AbfsHttpConstants
operator|.
name|HTTP_METHOD_PUT
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|setPermission (final String path, final String permission)
specifier|public
name|AbfsRestOperation
name|setPermission
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|permission
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
comment|// JDK7 does not support PATCH, so to workaround the issue we will use
comment|// PUT and specify the real method in the X-Http-Method-Override header.
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|X_HTTP_METHOD_OVERRIDE
argument_list|,
name|HTTP_METHOD_PATCH
argument_list|)
argument_list|)
expr_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_PERMISSIONS
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|HttpQueryParams
operator|.
name|QUERY_PARAM_ACTION
argument_list|,
name|AbfsHttpConstants
operator|.
name|SET_ACCESS_CONTROL
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|path
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|SetPermissions
argument_list|,
name|this
argument_list|,
name|AbfsHttpConstants
operator|.
name|HTTP_METHOD_PUT
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|setAcl (final String path, final String aclSpecString)
specifier|public
name|AbfsRestOperation
name|setAcl
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|aclSpecString
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
return|return
name|setAcl
argument_list|(
name|path
argument_list|,
name|aclSpecString
argument_list|,
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
argument_list|)
return|;
block|}
DECL|method|setAcl (final String path, final String aclSpecString, final String eTag)
specifier|public
name|AbfsRestOperation
name|setAcl
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|aclSpecString
parameter_list|,
specifier|final
name|String
name|eTag
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
comment|// JDK7 does not support PATCH, so to workaround the issue we will use
comment|// PUT and specify the real method in the X-Http-Method-Override header.
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|X_HTTP_METHOD_OVERRIDE
argument_list|,
name|HTTP_METHOD_PATCH
argument_list|)
argument_list|)
expr_stmt|;
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_ACL
argument_list|,
name|aclSpecString
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|eTag
operator|!=
literal|null
operator|&&
operator|!
name|eTag
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requestHeaders
operator|.
name|add
argument_list|(
operator|new
name|AbfsHttpHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|IF_MATCH
argument_list|,
name|eTag
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|HttpQueryParams
operator|.
name|QUERY_PARAM_ACTION
argument_list|,
name|AbfsHttpConstants
operator|.
name|SET_ACCESS_CONTROL
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|path
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|SetAcl
argument_list|,
name|this
argument_list|,
name|AbfsHttpConstants
operator|.
name|HTTP_METHOD_PUT
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|getAclStatus (final String path)
specifier|public
name|AbfsRestOperation
name|getAclStatus
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
return|return
name|getAclStatus
argument_list|(
name|path
argument_list|,
name|abfsConfiguration
operator|.
name|isUpnUsed
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getAclStatus (final String path, final boolean useUPN)
specifier|public
name|AbfsRestOperation
name|getAclStatus
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|boolean
name|useUPN
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|List
argument_list|<
name|AbfsHttpHeader
argument_list|>
name|requestHeaders
init|=
name|createDefaultHeaders
argument_list|()
decl_stmt|;
specifier|final
name|AbfsUriQueryBuilder
name|abfsUriQueryBuilder
init|=
name|createDefaultUriQueryBuilder
argument_list|()
decl_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|HttpQueryParams
operator|.
name|QUERY_PARAM_ACTION
argument_list|,
name|AbfsHttpConstants
operator|.
name|GET_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|abfsUriQueryBuilder
operator|.
name|addQuery
argument_list|(
name|HttpQueryParams
operator|.
name|QUERY_PARAM_UPN
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|useUPN
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createRequestUrl
argument_list|(
name|path
argument_list|,
name|abfsUriQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
operator|new
name|AbfsRestOperation
argument_list|(
name|AbfsRestOperationType
operator|.
name|GetAcl
argument_list|,
name|this
argument_list|,
name|AbfsHttpConstants
operator|.
name|HTTP_METHOD_HEAD
argument_list|,
name|url
argument_list|,
name|requestHeaders
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|createRequestUrl (final String query)
specifier|private
name|URL
name|createRequestUrl
parameter_list|(
specifier|final
name|String
name|query
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
return|return
name|createRequestUrl
argument_list|(
name|EMPTY_STRING
argument_list|,
name|query
argument_list|)
return|;
block|}
DECL|method|createRequestUrl (final String path, final String query)
specifier|private
name|URL
name|createRequestUrl
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|query
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|String
name|base
init|=
name|baseUrl
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|encodedPath
init|=
name|path
decl_stmt|;
try|try
block|{
name|encodedPath
operator|=
name|urlEncode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AzureBlobFileSystemException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unexpected error."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidUriException
argument_list|(
name|path
argument_list|)
throw|;
block|}
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|encodedPath
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|query
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidUriException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|url
return|;
block|}
DECL|method|urlEncode (final String value)
specifier|public
specifier|static
name|String
name|urlEncode
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
name|String
name|encodedString
decl_stmt|;
try|try
block|{
name|encodedString
operator|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|value
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|replace
argument_list|(
name|PLUS
argument_list|,
name|PLUS_ENCODE
argument_list|)
operator|.
name|replace
argument_list|(
name|FORWARD_SLASH_ENCODE
argument_list|,
name|FORWARD_SLASH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidUriException
argument_list|(
name|value
argument_list|)
throw|;
block|}
return|return
name|encodedString
return|;
block|}
DECL|method|getAccessToken ()
specifier|public
specifier|synchronized
name|String
name|getAccessToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|tokenProvider
operator|!=
literal|null
condition|)
block|{
return|return
literal|"Bearer "
operator|+
name|tokenProvider
operator|.
name|getToken
argument_list|()
operator|.
name|getAccessToken
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|initializeUserAgent (final AbfsConfiguration abfsConfiguration, final String sslProviderName)
name|String
name|initializeUserAgent
parameter_list|(
specifier|final
name|AbfsConfiguration
name|abfsConfiguration
parameter_list|,
specifier|final
name|String
name|sslProviderName
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(JavaJRE "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|JAVA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|OS_NAME
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|SINGLE_WHITE_SPACE
argument_list|,
name|EMPTY_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|OS_VERSION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sslProviderName
operator|!=
literal|null
operator|&&
operator|!
name|sslProviderName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sslProviderName
argument_list|)
expr_stmt|;
block|}
name|String
name|tokenProviderField
init|=
name|ExtensionHelper
operator|.
name|getUserAgentSuffix
argument_list|(
name|tokenProvider
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tokenProviderField
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
operator|.
name|append
argument_list|(
name|tokenProviderField
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|userAgentComment
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|customUserAgentId
init|=
name|abfsConfiguration
operator|.
name|getCustomUserAgentPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|customUserAgentId
operator|!=
literal|null
operator|&&
operator|!
name|customUserAgentId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|CLIENT_VERSION
operator|+
literal|" %s %s"
argument_list|,
name|userAgentComment
argument_list|,
name|customUserAgentId
argument_list|)
return|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|CLIENT_VERSION
operator|+
literal|" %s"
argument_list|,
name|userAgentComment
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBaseUrl ()
name|URL
name|getBaseUrl
parameter_list|()
block|{
return|return
name|baseUrl
return|;
block|}
block|}
end_class

end_unit

