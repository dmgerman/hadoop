begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|ServiceResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|services
operator|.
name|AbfsServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|services
operator|.
name|InjectableService
import|;
end_import

begin_comment
comment|/**  * Dependency injected Azure Storage services provider.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|AbfsServiceProviderImpl
specifier|public
specifier|final
class|class
name|AbfsServiceProviderImpl
implements|implements
name|AbfsServiceProvider
block|{
DECL|field|abfsServiceProvider
specifier|private
specifier|static
name|AbfsServiceProviderImpl
name|abfsServiceProvider
decl_stmt|;
DECL|field|abfsServiceInjector
specifier|private
specifier|final
name|Injector
name|abfsServiceInjector
decl_stmt|;
DECL|method|AbfsServiceProviderImpl (final Configuration configuration)
specifier|private
name|AbfsServiceProviderImpl
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|abfsServiceInjector
operator|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|AbfsServiceInjectorImpl
argument_list|(
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|configuration
argument_list|,
literal|"configuration"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|AbfsServiceProviderImpl (final Injector abfsServiceInjector)
specifier|private
name|AbfsServiceProviderImpl
parameter_list|(
specifier|final
name|Injector
name|abfsServiceInjector
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|abfsServiceInjector
argument_list|,
literal|"abfsServiceInjector"
argument_list|)
expr_stmt|;
name|this
operator|.
name|abfsServiceInjector
operator|=
name|abfsServiceInjector
expr_stmt|;
block|}
comment|/**    * Create an instance or returns existing instance of service provider.    * This method must be marked as synchronized to ensure thread-safety.    * @param configuration hadoop configuration.    * @return AbfsServiceProvider the service provider instance.    */
DECL|method|create (final Configuration configuration)
specifier|public
specifier|static
specifier|synchronized
name|AbfsServiceProvider
name|create
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|abfsServiceProvider
operator|==
literal|null
condition|)
block|{
name|abfsServiceProvider
operator|=
operator|new
name|AbfsServiceProviderImpl
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
return|return
name|abfsServiceProvider
return|;
block|}
comment|/**    * Returns current instance of service provider.    * @return AbfsServiceProvider the service provider instance.    */
DECL|method|instance ()
specifier|public
specifier|static
name|AbfsServiceProvider
name|instance
parameter_list|()
block|{
return|return
name|abfsServiceProvider
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|create (Injector serviceInjector)
specifier|static
specifier|synchronized
name|AbfsServiceProvider
name|create
parameter_list|(
name|Injector
name|serviceInjector
parameter_list|)
block|{
name|abfsServiceProvider
operator|=
operator|new
name|AbfsServiceProviderImpl
argument_list|(
name|serviceInjector
argument_list|)
expr_stmt|;
return|return
name|abfsServiceProvider
return|;
block|}
comment|/**    * Returns an instance of resolved injectable service by class name.    * The injectable service must be configured first to be resolvable.    * @param clazz the injectable service which is expected to be returned.    * @param<T> The type of injectable service.    * @return T instance    * @throws ServiceResolutionException if the service is not resolvable.    */
annotation|@
name|Override
DECL|method|get (final Class<T> clazz)
specifier|public
parameter_list|<
name|T
extends|extends
name|InjectableService
parameter_list|>
name|T
name|get
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|ServiceResolutionException
block|{
try|try
block|{
return|return
name|this
operator|.
name|abfsServiceInjector
operator|.
name|getInstance
argument_list|(
name|clazz
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceResolutionException
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

