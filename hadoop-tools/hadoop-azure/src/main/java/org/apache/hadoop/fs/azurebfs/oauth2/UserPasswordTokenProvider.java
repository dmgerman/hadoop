begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.oauth2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Provides tokens based on username and password.  */
end_comment

begin_class
DECL|class|UserPasswordTokenProvider
specifier|public
class|class
name|UserPasswordTokenProvider
extends|extends
name|AccessTokenProvider
block|{
DECL|field|authEndpoint
specifier|private
specifier|final
name|String
name|authEndpoint
decl_stmt|;
DECL|field|username
specifier|private
specifier|final
name|String
name|username
decl_stmt|;
DECL|field|password
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AccessTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|UserPasswordTokenProvider (final String authEndpoint, final String username, final String password)
specifier|public
name|UserPasswordTokenProvider
parameter_list|(
specifier|final
name|String
name|authEndpoint
parameter_list|,
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|authEndpoint
argument_list|,
literal|"authEndpoint"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|username
argument_list|,
literal|"username"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|password
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|this
operator|.
name|authEndpoint
operator|=
name|authEndpoint
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|refreshToken ()
specifier|protected
name|AzureADToken
name|refreshToken
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"AADToken: refreshing user-password based token"
argument_list|)
expr_stmt|;
return|return
name|AzureADAuthenticator
operator|.
name|getTokenUsingClientCreds
argument_list|(
name|authEndpoint
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
return|;
block|}
block|}
end_class

end_unit

