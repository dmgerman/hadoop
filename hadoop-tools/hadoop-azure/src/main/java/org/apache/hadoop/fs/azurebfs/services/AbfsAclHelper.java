begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|AbfsHttpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|AzureBlobFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|InvalidAclOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_comment
comment|/**  * AbfsAclHelper provides convenience methods to implement modifyAclEntries / removeAclEntries / removeAcl / removeDefaultAcl  * from setAcl and getAcl.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|AbfsAclHelper
specifier|public
specifier|final
class|class
name|AbfsAclHelper
block|{
DECL|method|AbfsAclHelper ()
specifier|private
name|AbfsAclHelper
parameter_list|()
block|{
comment|// not called
block|}
DECL|method|deserializeAclSpec (final String aclSpecString)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|deserializeAclSpec
parameter_list|(
specifier|final
name|String
name|aclSpecString
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|aclArray
init|=
name|aclSpecString
operator|.
name|split
argument_list|(
name|AbfsHttpConstants
operator|.
name|COMMA
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|acl
range|:
name|aclArray
control|)
block|{
name|int
name|idx
init|=
name|acl
operator|.
name|lastIndexOf
argument_list|(
name|AbfsHttpConstants
operator|.
name|COLON
argument_list|)
decl_stmt|;
name|aclEntries
operator|.
name|put
argument_list|(
name|acl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|,
name|acl
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|aclEntries
return|;
block|}
DECL|method|serializeAclSpec (final Map<String, String> aclEntries)
specifier|public
specifier|static
name|String
name|serializeAclSpec
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntries
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntry
range|:
name|aclEntries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|aclEntry
operator|.
name|getKey
argument_list|()
operator|+
name|AbfsHttpConstants
operator|.
name|COLON
operator|+
name|aclEntry
operator|.
name|getValue
argument_list|()
operator|+
name|AbfsHttpConstants
operator|.
name|COMMA
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|processAclString (final String aclSpecString)
specifier|public
specifier|static
name|String
name|processAclString
parameter_list|(
specifier|final
name|String
name|aclSpecString
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|aclEntries
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|aclSpecString
operator|.
name|split
argument_list|(
name|AbfsHttpConstants
operator|.
name|COMMA
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|containsMask
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|aclEntries
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|ace
init|=
name|aclEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ace
operator|.
name|startsWith
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_OTHER
argument_list|)
operator|||
name|ace
operator|.
name|startsWith
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_USER
operator|+
name|AbfsHttpConstants
operator|.
name|COLON
argument_list|)
condition|)
block|{
comment|// skip
block|}
elseif|else
if|if
condition|(
name|ace
operator|.
name|startsWith
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_MASK
argument_list|)
condition|)
block|{
name|containsMask
operator|=
literal|true
expr_stmt|;
comment|// skip
block|}
elseif|else
if|if
condition|(
name|ace
operator|.
name|startsWith
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_GROUP
operator|+
name|AbfsHttpConstants
operator|.
name|COLON
argument_list|)
operator|&&
operator|!
name|containsMask
condition|)
block|{
comment|// skip
block|}
else|else
block|{
name|sb
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|ace
operator|+
name|AbfsHttpConstants
operator|.
name|COMMA
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
else|:
name|sb
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|removeAclEntriesInternal (Map<String, String> aclEntries, Map<String, String> toRemoveEntries)
specifier|public
specifier|static
name|void
name|removeAclEntriesInternal
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntries
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toRemoveEntries
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
name|boolean
name|accessAclTouched
init|=
literal|false
decl_stmt|;
name|boolean
name|defaultAclTouched
init|=
literal|false
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removeIndicationSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|entryKey
range|:
name|toRemoveEntries
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|boolean
name|isDefaultAcl
init|=
name|isDefaultAce
argument_list|(
name|entryKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|removeNamedAceAndUpdateSet
argument_list|(
name|entryKey
argument_list|,
name|isDefaultAcl
argument_list|,
name|removeIndicationSet
argument_list|,
name|aclEntries
argument_list|)
condition|)
block|{
if|if
condition|(
name|isDefaultAcl
condition|)
block|{
name|defaultAclTouched
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|accessAclTouched
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|accessAclTouched
condition|)
block|{
if|if
condition|(
name|removeIndicationSet
operator|.
name|contains
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_MASK
argument_list|)
condition|)
block|{
name|aclEntries
operator|.
name|remove
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_MASK
argument_list|)
expr_stmt|;
block|}
name|recalculateMask
argument_list|(
name|aclEntries
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultAclTouched
condition|)
block|{
if|if
condition|(
name|removeIndicationSet
operator|.
name|contains
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_MASK
argument_list|)
condition|)
block|{
name|aclEntries
operator|.
name|remove
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_MASK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|removeIndicationSet
operator|.
name|contains
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_USER
argument_list|)
condition|)
block|{
name|aclEntries
operator|.
name|put
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_USER
argument_list|,
name|aclEntries
operator|.
name|get
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|removeIndicationSet
operator|.
name|contains
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
name|aclEntries
operator|.
name|put
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_GROUP
argument_list|,
name|aclEntries
operator|.
name|get
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|removeIndicationSet
operator|.
name|contains
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_OTHER
argument_list|)
condition|)
block|{
name|aclEntries
operator|.
name|put
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_OTHER
argument_list|,
name|aclEntries
operator|.
name|get
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_OTHER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|recalculateMask
argument_list|(
name|aclEntries
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeNamedAceAndUpdateSet (String entry, boolean isDefaultAcl, Set<String> removeIndicationSet, Map<String, String> aclEntries)
specifier|private
specifier|static
name|boolean
name|removeNamedAceAndUpdateSet
parameter_list|(
name|String
name|entry
parameter_list|,
name|boolean
name|isDefaultAcl
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|removeIndicationSet
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntries
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
specifier|final
name|int
name|startIndex
init|=
name|isDefaultAcl
condition|?
literal|1
else|:
literal|0
decl_stmt|;
specifier|final
name|String
index|[]
name|entryParts
init|=
name|entry
operator|.
name|split
argument_list|(
name|AbfsHttpConstants
operator|.
name|COLON
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tag
init|=
name|isDefaultAcl
condition|?
name|AbfsHttpConstants
operator|.
name|DEFAULT_SCOPE
operator|+
name|entryParts
index|[
name|startIndex
index|]
operator|+
name|AbfsHttpConstants
operator|.
name|COLON
else|:
name|entryParts
index|[
name|startIndex
index|]
operator|+
name|AbfsHttpConstants
operator|.
name|COLON
decl_stmt|;
if|if
condition|(
operator|(
name|entry
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_USER
argument_list|)
operator|||
name|entry
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_GROUP
argument_list|)
operator|||
name|entry
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_OTHER
argument_list|)
operator|)
operator|&&
operator|!
name|isNamedAce
argument_list|(
name|entry
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidAclOperationException
argument_list|(
literal|"Cannot remove user, group or other entry from access ACL."
argument_list|)
throw|;
block|}
name|boolean
name|touched
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isNamedAce
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|removeIndicationSet
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
comment|// this must not be a access user, group or other
name|touched
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|aclEntries
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|touched
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|touched
return|;
block|}
DECL|method|recalculateMask (Map<String, String> aclEntries, boolean isDefaultMask)
specifier|private
specifier|static
name|void
name|recalculateMask
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntries
parameter_list|,
name|boolean
name|isDefaultMask
parameter_list|)
block|{
name|FsAction
name|umask
init|=
name|FsAction
operator|.
name|NONE
decl_stmt|;
if|if
condition|(
operator|!
name|isExtendAcl
argument_list|(
name|aclEntries
argument_list|,
name|isDefaultMask
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntry
range|:
name|aclEntries
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|isDefaultMask
condition|)
block|{
if|if
condition|(
operator|(
name|isDefaultAce
argument_list|(
name|aclEntry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|isNamedAce
argument_list|(
name|aclEntry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
operator|||
name|aclEntry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
name|umask
operator|=
name|umask
operator|.
name|or
argument_list|(
name|FsAction
operator|.
name|getFsAction
argument_list|(
name|aclEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
operator|!
name|isDefaultAce
argument_list|(
name|aclEntry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|isNamedAce
argument_list|(
name|aclEntry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
operator|||
name|aclEntry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_GROUP
argument_list|)
condition|)
block|{
name|umask
operator|=
name|umask
operator|.
name|or
argument_list|(
name|FsAction
operator|.
name|getFsAction
argument_list|(
name|aclEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|aclEntries
operator|.
name|put
argument_list|(
name|isDefaultMask
condition|?
name|AbfsHttpConstants
operator|.
name|DEFAULT_MASK
else|:
name|AbfsHttpConstants
operator|.
name|ACCESS_MASK
argument_list|,
name|umask
operator|.
name|SYMBOL
argument_list|)
expr_stmt|;
block|}
DECL|method|isExtendAcl (Map<String, String> aclEntries, boolean checkDefault)
specifier|private
specifier|static
name|boolean
name|isExtendAcl
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntries
parameter_list|,
name|boolean
name|checkDefault
parameter_list|)
block|{
for|for
control|(
name|String
name|entryKey
range|:
name|aclEntries
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|checkDefault
operator|&&
operator|!
operator|(
name|entryKey
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_USER
argument_list|)
operator|||
name|entryKey
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|||
name|entryKey
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_OTHER
argument_list|)
operator|||
operator|!
name|isDefaultAce
argument_list|(
name|entryKey
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|checkDefault
operator|&&
operator|!
operator|(
name|entryKey
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_USER
argument_list|)
operator|||
name|entryKey
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_GROUP
argument_list|)
operator|||
name|entryKey
operator|.
name|equals
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_OTHER
argument_list|)
operator|||
name|isDefaultAce
argument_list|(
name|entryKey
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isDefaultAce (String entry)
specifier|private
specifier|static
name|boolean
name|isDefaultAce
parameter_list|(
name|String
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|startsWith
argument_list|(
name|AbfsHttpConstants
operator|.
name|DEFAULT_SCOPE
argument_list|)
return|;
block|}
DECL|method|isNamedAce (String entry)
specifier|private
specifier|static
name|boolean
name|isNamedAce
parameter_list|(
name|String
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|charAt
argument_list|(
name|entry
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
name|AbfsHttpConstants
operator|.
name|COLON
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

