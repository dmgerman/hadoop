begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|services
operator|.
name|ReadBufferStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_class
DECL|class|ReadBuffer
class|class
name|ReadBuffer
block|{
DECL|field|stream
specifier|private
name|AbfsInputStream
name|stream
decl_stmt|;
DECL|field|offset
specifier|private
name|long
name|offset
decl_stmt|;
comment|// offset within the file for the buffer
DECL|field|length
specifier|private
name|int
name|length
decl_stmt|;
comment|// actual length, set after the buffer is filles
DECL|field|requestedLength
specifier|private
name|int
name|requestedLength
decl_stmt|;
comment|// requested length of the read
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
comment|// the buffer itself
DECL|field|bufferindex
specifier|private
name|int
name|bufferindex
init|=
operator|-
literal|1
decl_stmt|;
comment|// index in the buffers array in Buffer manager
DECL|field|status
specifier|private
name|ReadBufferStatus
name|status
decl_stmt|;
comment|// status of the buffer
DECL|field|latch
specifier|private
name|CountDownLatch
name|latch
init|=
literal|null
decl_stmt|;
comment|// signaled when the buffer is done reading, so any client
comment|// waiting on this buffer gets unblocked
comment|// fields to help with eviction logic
DECL|field|timeStamp
specifier|private
name|long
name|timeStamp
init|=
literal|0
decl_stmt|;
comment|// tick at which buffer became available to read
DECL|field|isFirstByteConsumed
specifier|private
name|boolean
name|isFirstByteConsumed
init|=
literal|false
decl_stmt|;
DECL|field|isLastByteConsumed
specifier|private
name|boolean
name|isLastByteConsumed
init|=
literal|false
decl_stmt|;
DECL|field|isAnyByteConsumed
specifier|private
name|boolean
name|isAnyByteConsumed
init|=
literal|false
decl_stmt|;
DECL|method|getStream ()
specifier|public
name|AbfsInputStream
name|getStream
parameter_list|()
block|{
return|return
name|stream
return|;
block|}
DECL|method|setStream (AbfsInputStream stream)
specifier|public
name|void
name|setStream
parameter_list|(
name|AbfsInputStream
name|stream
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
block|}
DECL|method|getOffset ()
specifier|public
name|long
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
DECL|method|setOffset (long offset)
specifier|public
name|void
name|setOffset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
DECL|method|getLength ()
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|setLength (int length)
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
DECL|method|getRequestedLength ()
specifier|public
name|int
name|getRequestedLength
parameter_list|()
block|{
return|return
name|requestedLength
return|;
block|}
DECL|method|setRequestedLength (int requestedLength)
specifier|public
name|void
name|setRequestedLength
parameter_list|(
name|int
name|requestedLength
parameter_list|)
block|{
name|this
operator|.
name|requestedLength
operator|=
name|requestedLength
expr_stmt|;
block|}
DECL|method|getBuffer ()
specifier|public
name|byte
index|[]
name|getBuffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
DECL|method|setBuffer (byte[] buffer)
specifier|public
name|void
name|setBuffer
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
block|}
DECL|method|getBufferindex ()
specifier|public
name|int
name|getBufferindex
parameter_list|()
block|{
return|return
name|bufferindex
return|;
block|}
DECL|method|setBufferindex (int bufferindex)
specifier|public
name|void
name|setBufferindex
parameter_list|(
name|int
name|bufferindex
parameter_list|)
block|{
name|this
operator|.
name|bufferindex
operator|=
name|bufferindex
expr_stmt|;
block|}
DECL|method|getStatus ()
specifier|public
name|ReadBufferStatus
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|setStatus (ReadBufferStatus status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|ReadBufferStatus
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|getLatch ()
specifier|public
name|CountDownLatch
name|getLatch
parameter_list|()
block|{
return|return
name|latch
return|;
block|}
DECL|method|setLatch (CountDownLatch latch)
specifier|public
name|void
name|setLatch
parameter_list|(
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
DECL|method|getTimeStamp ()
specifier|public
name|long
name|getTimeStamp
parameter_list|()
block|{
return|return
name|timeStamp
return|;
block|}
DECL|method|setTimeStamp (long timeStamp)
specifier|public
name|void
name|setTimeStamp
parameter_list|(
name|long
name|timeStamp
parameter_list|)
block|{
name|this
operator|.
name|timeStamp
operator|=
name|timeStamp
expr_stmt|;
block|}
DECL|method|isFirstByteConsumed ()
specifier|public
name|boolean
name|isFirstByteConsumed
parameter_list|()
block|{
return|return
name|isFirstByteConsumed
return|;
block|}
DECL|method|setFirstByteConsumed (boolean isFirstByteConsumed)
specifier|public
name|void
name|setFirstByteConsumed
parameter_list|(
name|boolean
name|isFirstByteConsumed
parameter_list|)
block|{
name|this
operator|.
name|isFirstByteConsumed
operator|=
name|isFirstByteConsumed
expr_stmt|;
block|}
DECL|method|isLastByteConsumed ()
specifier|public
name|boolean
name|isLastByteConsumed
parameter_list|()
block|{
return|return
name|isLastByteConsumed
return|;
block|}
DECL|method|setLastByteConsumed (boolean isLastByteConsumed)
specifier|public
name|void
name|setLastByteConsumed
parameter_list|(
name|boolean
name|isLastByteConsumed
parameter_list|)
block|{
name|this
operator|.
name|isLastByteConsumed
operator|=
name|isLastByteConsumed
expr_stmt|;
block|}
DECL|method|isAnyByteConsumed ()
specifier|public
name|boolean
name|isAnyByteConsumed
parameter_list|()
block|{
return|return
name|isAnyByteConsumed
return|;
block|}
DECL|method|setAnyByteConsumed (boolean isAnyByteConsumed)
specifier|public
name|void
name|setAnyByteConsumed
parameter_list|(
name|boolean
name|isAnyByteConsumed
parameter_list|)
block|{
name|this
operator|.
name|isAnyByteConsumed
operator|=
name|isAnyByteConsumed
expr_stmt|;
block|}
block|}
end_class

end_unit

