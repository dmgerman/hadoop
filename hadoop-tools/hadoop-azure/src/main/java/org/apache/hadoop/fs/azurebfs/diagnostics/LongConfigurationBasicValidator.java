begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.diagnostics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|diagnostics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|diagnostics
operator|.
name|ConfigurationValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|InvalidConfigurationValueException
import|;
end_import

begin_comment
comment|/**  * Long configuration value Validator.  */
end_comment

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|LongConfigurationBasicValidator
specifier|public
class|class
name|LongConfigurationBasicValidator
extends|extends
name|ConfigurationBasicValidator
argument_list|<
name|Long
argument_list|>
implements|implements
name|ConfigurationValidator
block|{
DECL|field|min
specifier|private
specifier|final
name|long
name|min
decl_stmt|;
DECL|field|max
specifier|private
specifier|final
name|long
name|max
decl_stmt|;
DECL|method|LongConfigurationBasicValidator (final long min, final long max, final long defaultVal, final String configKey, final boolean throwIfInvalid)
specifier|public
name|LongConfigurationBasicValidator
parameter_list|(
specifier|final
name|long
name|min
parameter_list|,
specifier|final
name|long
name|max
parameter_list|,
specifier|final
name|long
name|defaultVal
parameter_list|,
specifier|final
name|String
name|configKey
parameter_list|,
specifier|final
name|boolean
name|throwIfInvalid
parameter_list|)
block|{
name|super
argument_list|(
name|configKey
argument_list|,
name|defaultVal
argument_list|,
name|throwIfInvalid
argument_list|)
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
DECL|method|validate (final String configValue)
specifier|public
name|Long
name|validate
parameter_list|(
specifier|final
name|String
name|configValue
parameter_list|)
throws|throws
name|InvalidConfigurationValueException
block|{
name|Long
name|result
init|=
name|super
operator|.
name|validate
argument_list|(
name|configValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
try|try
block|{
name|result
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|configValue
argument_list|)
expr_stmt|;
comment|// throw an exception if a 'within bounds' value is missing
if|if
condition|(
name|getThrowIfInvalid
argument_list|()
operator|&&
operator|(
name|result
argument_list|<
name|this
operator|.
name|min
operator|||
name|result
argument_list|>
name|this
operator|.
name|max
operator|)
condition|)
block|{
throw|throw
operator|new
name|InvalidConfigurationValueException
argument_list|(
name|getConfigKey
argument_list|()
argument_list|)
throw|;
block|}
comment|// set the value to the nearest bound if it's out of bounds
if|if
condition|(
name|result
operator|<
name|this
operator|.
name|min
condition|)
block|{
return|return
name|this
operator|.
name|min
return|;
block|}
elseif|else
if|if
condition|(
name|result
operator|>
name|this
operator|.
name|max
condition|)
block|{
return|return
name|this
operator|.
name|max
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidConfigurationValueException
argument_list|(
name|getConfigKey
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

