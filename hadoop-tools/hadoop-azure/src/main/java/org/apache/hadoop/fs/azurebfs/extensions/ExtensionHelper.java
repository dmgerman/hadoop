begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.extensions
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * Classes to help with use of extensions, expecially those  * implementing @{@link BoundDTExtension}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
literal|"authorization-subsystems"
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ExtensionHelper
specifier|public
specifier|final
class|class
name|ExtensionHelper
block|{
DECL|method|ExtensionHelper ()
specifier|private
name|ExtensionHelper
parameter_list|()
block|{   }
comment|/**    * If the passed in extension class implements {@link BoundDTExtension}    * then it will have its {@link BoundDTExtension#bind(URI, Configuration)}    * method called.    * @param extension extension to examine and maybe invoke    * @param uri URI of the filesystem.    * @param conf configuration of this extension.    * @throws IOException failure during binding.    */
DECL|method|bind (Object extension, URI uri, Configuration conf)
specifier|public
specifier|static
name|void
name|bind
parameter_list|(
name|Object
name|extension
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|extension
operator|instanceof
name|BoundDTExtension
condition|)
block|{
operator|(
operator|(
name|BoundDTExtension
operator|)
name|extension
operator|)
operator|.
name|bind
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Close an extension if it is closeable.    * Any error raised is caught and logged.    * @param extension extension instance.    */
DECL|method|close (Object extension)
specifier|public
specifier|static
name|void
name|close
parameter_list|(
name|Object
name|extension
parameter_list|)
block|{
name|ifBoundDTExtension
argument_list|(
name|extension
argument_list|,
name|v
lambda|->
block|{
name|IOUtils
operator|.
name|closeStreams
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invoke {@link BoundDTExtension#getUserAgentSuffix()} or    * return the default value.    * @param extension extension to invoke    * @param def default if the class is of the wrong type.    * @return a user agent suffix    */
DECL|method|getUserAgentSuffix (Object extension, String def)
specifier|public
specifier|static
name|String
name|getUserAgentSuffix
parameter_list|(
name|Object
name|extension
parameter_list|,
name|String
name|def
parameter_list|)
block|{
return|return
name|ifBoundDTExtension
argument_list|(
name|extension
argument_list|,
name|BoundDTExtension
operator|::
name|getUserAgentSuffix
argument_list|)
operator|.
name|orElse
argument_list|(
name|def
argument_list|)
return|;
block|}
comment|/**    * Invoke {@link BoundDTExtension#getCanonicalServiceName()} or    * return the default value.    * @param extension extension to invoke    * @param def default if the class is of the wrong type.    * @return a canonical service name.    */
DECL|method|getCanonicalServiceName (Object extension, String def)
specifier|public
specifier|static
name|String
name|getCanonicalServiceName
parameter_list|(
name|Object
name|extension
parameter_list|,
name|String
name|def
parameter_list|)
block|{
return|return
name|ifBoundDTExtension
argument_list|(
name|extension
argument_list|,
name|BoundDTExtension
operator|::
name|getCanonicalServiceName
argument_list|)
operator|.
name|orElse
argument_list|(
name|def
argument_list|)
return|;
block|}
comment|/**    * Invoke an operation on an object if it implements the BoundDTExtension    * interface; returns an optional value.    * @param extension the extension to invoke.    * @param fn function to apply    * @param<V> return type of te function.    * @return an optional value which, if not empty, contains the return value    * of the invoked function. If empty: the object was not of a compatible    * type.    */
DECL|method|ifBoundDTExtension (Object extension, Function<? super BoundDTExtension, ? extends V> fn)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|Optional
argument_list|<
name|V
argument_list|>
name|ifBoundDTExtension
parameter_list|(
name|Object
name|extension
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|BoundDTExtension
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|fn
parameter_list|)
block|{
if|if
condition|(
name|extension
operator|instanceof
name|BoundDTExtension
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|(
name|BoundDTExtension
operator|)
name|extension
argument_list|)
operator|.
name|map
argument_list|(
name|fn
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

