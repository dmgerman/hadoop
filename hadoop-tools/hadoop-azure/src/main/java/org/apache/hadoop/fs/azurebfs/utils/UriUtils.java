begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Utility class to help with Abfs url transformation to blob urls.  */
end_comment

begin_class
DECL|class|UriUtils
specifier|public
specifier|final
class|class
name|UriUtils
block|{
DECL|field|ABFS_URI_REGEX
specifier|private
specifier|static
specifier|final
name|String
name|ABFS_URI_REGEX
init|=
literal|"[^.]+\\.dfs\\.(preprod\\.){0,1}core\\.windows\\.net"
decl_stmt|;
DECL|field|ABFS_URI_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|ABFS_URI_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|ABFS_URI_REGEX
argument_list|)
decl_stmt|;
comment|/**    * Checks whether a string includes abfs url.    * @param string the string to check.    * @return true if string has abfs url.    */
DECL|method|containsAbfsUrl (final String string)
specifier|public
specifier|static
name|boolean
name|containsAbfsUrl
parameter_list|(
specifier|final
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
operator|||
name|string
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|ABFS_URI_PATTERN
operator|.
name|matcher
argument_list|(
name|string
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/**    * Extracts the raw account name from account name.    * @param accountName to extract the raw account name.    * @return extracted raw account name.    */
DECL|method|extractRawAccountFromAccountName (final String accountName)
specifier|public
specifier|static
name|String
name|extractRawAccountFromAccountName
parameter_list|(
specifier|final
name|String
name|accountName
parameter_list|)
block|{
if|if
condition|(
name|accountName
operator|==
literal|null
operator|||
name|accountName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|containsAbfsUrl
argument_list|(
name|accountName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|splitByDot
init|=
name|accountName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitByDot
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|splitByDot
index|[
literal|0
index|]
return|;
block|}
comment|/**    * Generate unique test path for multiple user tests.    *    * @return root test path    */
DECL|method|generateUniqueTestPath ()
specifier|public
specifier|static
name|String
name|generateUniqueTestPath
parameter_list|()
block|{
name|String
name|testUniqueForkId
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.unique.fork.id"
argument_list|)
decl_stmt|;
return|return
name|testUniqueForkId
operator|==
literal|null
condition|?
literal|"/test"
else|:
literal|"/"
operator|+
name|testUniqueForkId
operator|+
literal|"/test"
return|;
block|}
DECL|method|UriUtils ()
specifier|private
name|UriUtils
parameter_list|()
block|{   }
block|}
end_class

end_unit

