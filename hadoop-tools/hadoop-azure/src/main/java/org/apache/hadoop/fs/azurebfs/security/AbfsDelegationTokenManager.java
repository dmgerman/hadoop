begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|CustomDelegationTokenManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Class for delegation token Manager.  */
end_comment

begin_class
DECL|class|AbfsDelegationTokenManager
specifier|public
class|class
name|AbfsDelegationTokenManager
block|{
DECL|field|tokenManager
specifier|private
name|CustomDelegationTokenManager
name|tokenManager
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbfsDelegationTokenManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AbfsDelegationTokenManager (final Configuration conf)
specifier|public
name|AbfsDelegationTokenManager
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|conf
argument_list|,
literal|"conf"
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|CustomDelegationTokenManager
argument_list|>
name|customDelegationTokenMgrClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|ConfigurationKeys
operator|.
name|FS_AZURE_DELEGATION_TOKEN_PROVIDER_TYPE
argument_list|,
literal|null
argument_list|,
name|CustomDelegationTokenManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|customDelegationTokenMgrClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The value for \"fs.azure.delegation.token.provider.type\" is not defined."
argument_list|)
throw|;
block|}
name|CustomDelegationTokenManager
name|customTokenMgr
init|=
operator|(
name|CustomDelegationTokenManager
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|customDelegationTokenMgrClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|customTokenMgr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to initialize %s."
argument_list|,
name|customDelegationTokenMgrClass
argument_list|)
argument_list|)
throw|;
block|}
name|customTokenMgr
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|tokenManager
operator|=
name|customTokenMgr
expr_stmt|;
block|}
DECL|method|getDelegationToken ( String renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|tokenManager
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
decl_stmt|;
name|token
operator|.
name|setKind
argument_list|(
name|AbfsDelegationTokenIdentifier
operator|.
name|TOKEN_KIND
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
DECL|method|renewDelegationToken (Token<?> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|tokenManager
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
return|;
block|}
DECL|method|cancelDelegationToken (Token<?> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|tokenManager
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

