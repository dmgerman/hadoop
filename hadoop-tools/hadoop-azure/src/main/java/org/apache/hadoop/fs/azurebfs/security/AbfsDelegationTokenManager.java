begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|BoundDTExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|CustomDelegationTokenManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|ExtensionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Class for delegation token Manager.  *  * Instantiates the class declared in  * {@link ConfigurationKeys#FS_AZURE_DELEGATION_TOKEN_PROVIDER_TYPE} and  * issues tokens from it.  */
end_comment

begin_class
DECL|class|AbfsDelegationTokenManager
specifier|public
class|class
name|AbfsDelegationTokenManager
implements|implements
name|BoundDTExtension
block|{
DECL|field|tokenManager
specifier|private
name|CustomDelegationTokenManager
name|tokenManager
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbfsDelegationTokenManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Create the custom delegation token manager and call its    * {@link CustomDelegationTokenManager#initialize(Configuration)} method.    * @param conf configuration    * @throws IOException failure during initialization.    * @throws RuntimeException classloading problems.    */
DECL|method|AbfsDelegationTokenManager (final Configuration conf)
specifier|public
name|AbfsDelegationTokenManager
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|conf
argument_list|,
literal|"conf"
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|CustomDelegationTokenManager
argument_list|>
name|customDelegationTokenMgrClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|ConfigurationKeys
operator|.
name|FS_AZURE_DELEGATION_TOKEN_PROVIDER_TYPE
argument_list|,
literal|null
argument_list|,
name|CustomDelegationTokenManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|customDelegationTokenMgrClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The value for \"fs.azure.delegation.token.provider.type\" is not defined."
argument_list|)
throw|;
block|}
name|CustomDelegationTokenManager
name|customTokenMgr
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|customDelegationTokenMgrClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|customTokenMgr
operator|!=
literal|null
argument_list|,
literal|"Failed to initialize %s."
argument_list|,
name|customDelegationTokenMgrClass
argument_list|)
expr_stmt|;
name|customTokenMgr
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|tokenManager
operator|=
name|customTokenMgr
expr_stmt|;
block|}
comment|/**    * Bind to a filesystem instance by passing the binding information down    * to any token manager which implements {@link BoundDTExtension}.    *    * This is not invoked before renew or cancel operations, but is guaranteed    * to be invoked before calls to {@link #getDelegationToken(String)}.    * @param fsURI URI of the filesystem.    * @param conf configuration of this extension.    * @throws IOException bind failure.    */
annotation|@
name|Override
DECL|method|bind (final URI fsURI, final Configuration conf)
specifier|public
name|void
name|bind
parameter_list|(
specifier|final
name|URI
name|fsURI
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|fsURI
argument_list|,
literal|"Np Filesystem URI"
argument_list|)
expr_stmt|;
name|ExtensionHelper
operator|.
name|bind
argument_list|(
name|tokenManager
argument_list|,
name|fsURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Query the token manager for the service name; if it does not implement    * the extension interface, null is returned.    * @return the canonical service name.    */
annotation|@
name|Override
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
return|return
name|ExtensionHelper
operator|.
name|getCanonicalServiceName
argument_list|(
name|tokenManager
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Close.    * If the token manager is closeable, it has its {@link Closeable#close()}    * method (quietly) invoked.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|tokenManager
operator|instanceof
name|Closeable
condition|)
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
operator|(
name|Closeable
operator|)
name|tokenManager
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a delegation token by invoking    * {@link CustomDelegationTokenManager#getDelegationToken(String)}.    * If the token returned already has a Kind; that is used.    * If not, then the token kind is set to    * {@link AbfsDelegationTokenIdentifier#TOKEN_KIND}, which implicitly    * resets any token renewer class.    * @param renewer the principal permitted to renew the token.    * @return a token for the filesystem.    * @throws IOException failure.    */
DECL|method|getDelegationToken ( String renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Requesting Delegation token for {}"
argument_list|,
name|renewer
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|tokenManager
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// if a token type is not set, use the default.
comment|// note: this also sets the renewer to null.
name|token
operator|.
name|setKind
argument_list|(
name|AbfsDelegationTokenIdentifier
operator|.
name|TOKEN_KIND
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
DECL|method|renewDelegationToken (Token<?> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|tokenManager
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
return|;
block|}
DECL|method|cancelDelegationToken (Token<?> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|tokenManager
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getTokenManager ()
specifier|public
name|CustomDelegationTokenManager
name|getTokenManager
parameter_list|()
block|{
return|return
name|tokenManager
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"AbfsDelegationTokenManager{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tokenManager="
argument_list|)
operator|.
name|append
argument_list|(
name|tokenManager
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

