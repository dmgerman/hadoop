begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_comment
comment|/**  * The AbfsPermission for AbfsClient.  */
end_comment

begin_class
DECL|class|AbfsPermission
specifier|public
class|class
name|AbfsPermission
extends|extends
name|FsPermission
block|{
DECL|field|STICKY_BIT_OCTAL_VALUE
specifier|private
specifier|static
specifier|final
name|int
name|STICKY_BIT_OCTAL_VALUE
init|=
literal|01000
decl_stmt|;
DECL|field|aclBit
specifier|private
specifier|final
name|boolean
name|aclBit
decl_stmt|;
DECL|method|AbfsPermission (Short aShort, boolean aclBitStatus)
specifier|public
name|AbfsPermission
parameter_list|(
name|Short
name|aShort
parameter_list|,
name|boolean
name|aclBitStatus
parameter_list|)
block|{
name|super
argument_list|(
name|aShort
argument_list|)
expr_stmt|;
name|this
operator|.
name|aclBit
operator|=
name|aclBitStatus
expr_stmt|;
block|}
DECL|method|AbfsPermission (FsAction u, FsAction g, FsAction o)
specifier|public
name|AbfsPermission
parameter_list|(
name|FsAction
name|u
parameter_list|,
name|FsAction
name|g
parameter_list|,
name|FsAction
name|o
parameter_list|)
block|{
name|super
argument_list|(
name|u
argument_list|,
name|g
argument_list|,
name|o
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|aclBit
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Returns true if there is also an ACL (access control list).    *    * @return boolean true if there is also an ACL (access control list).    * @deprecated Get acl bit from the {@link org.apache.hadoop.fs.FileStatus}    * object.    */
DECL|method|getAclBit ()
specifier|public
name|boolean
name|getAclBit
parameter_list|()
block|{
return|return
name|aclBit
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|FsPermission
condition|)
block|{
name|FsPermission
name|that
init|=
operator|(
name|FsPermission
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|getUserAction
argument_list|()
operator|==
name|that
operator|.
name|getUserAction
argument_list|()
operator|&&
name|this
operator|.
name|getGroupAction
argument_list|()
operator|==
name|that
operator|.
name|getGroupAction
argument_list|()
operator|&&
name|this
operator|.
name|getOtherAction
argument_list|()
operator|==
name|that
operator|.
name|getOtherAction
argument_list|()
operator|&&
name|this
operator|.
name|getStickyBit
argument_list|()
operator|==
name|that
operator|.
name|getStickyBit
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Create a AbfsPermission from a abfs symbolic permission string    * @param abfsSymbolicPermission e.g. "rw-rw-rw-+" / "rw-rw-rw-"    * @return a permission object for the provided string representation    */
DECL|method|valueOf (final String abfsSymbolicPermission)
specifier|public
specifier|static
name|AbfsPermission
name|valueOf
parameter_list|(
specifier|final
name|String
name|abfsSymbolicPermission
parameter_list|)
block|{
if|if
condition|(
name|abfsSymbolicPermission
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|boolean
name|isExtendedAcl
init|=
name|abfsSymbolicPermission
operator|.
name|charAt
argument_list|(
name|abfsSymbolicPermission
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'+'
decl_stmt|;
specifier|final
name|String
name|abfsRawSymbolicPermission
init|=
name|isExtendedAcl
condition|?
name|abfsSymbolicPermission
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|abfsSymbolicPermission
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|abfsSymbolicPermission
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|abfsRawSymbolicPermission
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|=
name|n
operator|<<
literal|1
expr_stmt|;
name|char
name|c
init|=
name|abfsRawSymbolicPermission
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|n
operator|+=
operator|(
name|c
operator|==
literal|'-'
operator|||
name|c
operator|==
literal|'T'
operator|||
name|c
operator|==
literal|'S'
operator|)
condition|?
literal|0
else|:
literal|1
expr_stmt|;
block|}
comment|// Add sticky bit value if set
if|if
condition|(
name|abfsRawSymbolicPermission
operator|.
name|charAt
argument_list|(
name|abfsRawSymbolicPermission
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'t'
operator|||
name|abfsRawSymbolicPermission
operator|.
name|charAt
argument_list|(
name|abfsRawSymbolicPermission
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'T'
condition|)
block|{
name|n
operator|+=
name|STICKY_BIT_OCTAL_VALUE
expr_stmt|;
block|}
return|return
operator|new
name|AbfsPermission
argument_list|(
operator|(
name|short
operator|)
name|n
argument_list|,
name|isExtendedAcl
argument_list|)
return|;
block|}
comment|/**    * Check whether abfs symbolic permission string is a extended Acl    * @param abfsSymbolicPermission e.g. "rw-rw-rw-+" / "rw-rw-rw-"    * @return true if the permission string indicates the existence of an    * extended ACL; otherwise false.    */
DECL|method|isExtendedAcl (final String abfsSymbolicPermission)
specifier|public
specifier|static
name|boolean
name|isExtendedAcl
parameter_list|(
specifier|final
name|String
name|abfsSymbolicPermission
parameter_list|)
block|{
if|if
condition|(
name|abfsSymbolicPermission
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|abfsSymbolicPermission
operator|.
name|charAt
argument_list|(
name|abfsSymbolicPermission
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'+'
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toShort
argument_list|()
return|;
block|}
block|}
end_class

end_unit

