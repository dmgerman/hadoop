begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|AbfsHttpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|FileSystemUriSchemes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|HttpHeaderConfigurations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|AbfsRestOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|AzureBlobFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|FileSystemOperationUnhandledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|InvalidAbfsRestOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|InvalidFileSystemPropertyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|InvalidUriAuthorityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|InvalidUriException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|services
operator|.
name|AzureServiceErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|services
operator|.
name|ListResultEntrySchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|services
operator|.
name|ListResultSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
operator|.
name|AccessTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
operator|.
name|IdentityTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AbfsAclHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AbfsClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AbfsHttpOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AbfsInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AbfsOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AbfsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AbfsRestOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AuthType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|ExponentialRetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|SharedKeyCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|utils
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|utils
operator|.
name|UriUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|AZURE_ABFS_ENDPOINT
import|;
end_import

begin_comment
comment|/**  * Provides the bridging logic between Hadoop's abstract filesystem and Azure Storage.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|AzureBlobFileSystemStore
specifier|public
class|class
name|AzureBlobFileSystemStore
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AzureBlobFileSystemStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
name|AbfsClient
name|client
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|field|primaryUserGroup
specifier|private
name|String
name|primaryUserGroup
decl_stmt|;
DECL|field|DATE_TIME_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|DATE_TIME_PATTERN
init|=
literal|"E, dd MMM yyyy HH:mm:ss 'GMT'"
decl_stmt|;
DECL|field|XMS_PROPERTIES_ENCODING
specifier|private
specifier|static
specifier|final
name|String
name|XMS_PROPERTIES_ENCODING
init|=
literal|"ISO-8859-1"
decl_stmt|;
DECL|field|LIST_MAX_RESULTS
specifier|private
specifier|static
specifier|final
name|int
name|LIST_MAX_RESULTS
init|=
literal|500
decl_stmt|;
DECL|field|abfsConfiguration
specifier|private
specifier|final
name|AbfsConfiguration
name|abfsConfiguration
decl_stmt|;
DECL|field|azureAtomicRenameDirSet
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|azureAtomicRenameDirSet
decl_stmt|;
DECL|field|isNamespaceEnabledSet
specifier|private
name|boolean
name|isNamespaceEnabledSet
decl_stmt|;
DECL|field|isNamespaceEnabled
specifier|private
name|boolean
name|isNamespaceEnabled
decl_stmt|;
DECL|field|authType
specifier|private
specifier|final
name|AuthType
name|authType
decl_stmt|;
DECL|field|userGroupInformation
specifier|private
specifier|final
name|UserGroupInformation
name|userGroupInformation
decl_stmt|;
DECL|field|identityTransformer
specifier|private
specifier|final
name|IdentityTransformer
name|identityTransformer
decl_stmt|;
DECL|method|AzureBlobFileSystemStore (URI uri, boolean isSecureScheme, Configuration configuration)
specifier|public
name|AzureBlobFileSystemStore
parameter_list|(
name|URI
name|uri
parameter_list|,
name|boolean
name|isSecureScheme
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|String
index|[]
name|authorityParts
init|=
name|authorityParts
argument_list|(
name|uri
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fileSystemName
init|=
name|authorityParts
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|String
name|accountName
init|=
name|authorityParts
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
name|this
operator|.
name|abfsConfiguration
operator|=
operator|new
name|AbfsConfiguration
argument_list|(
name|configuration
argument_list|,
name|accountName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|FileSystemOperationUnhandledException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
name|this
operator|.
name|userGroupInformation
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userGroupInformation
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|abfsConfiguration
operator|.
name|getSkipUserGroupMetadataDuringInitialization
argument_list|()
condition|)
block|{
try|try
block|{
name|this
operator|.
name|primaryUserGroup
operator|=
name|userGroupInformation
operator|.
name|getPrimaryGroupName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get primary group for {}, using user name as primary group name"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|this
operator|.
name|primaryUserGroup
operator|=
name|userName
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Provide a default group name
name|this
operator|.
name|primaryUserGroup
operator|=
name|userName
expr_stmt|;
block|}
name|this
operator|.
name|azureAtomicRenameDirSet
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|abfsConfiguration
operator|.
name|getAzureAtomicRenameDirs
argument_list|()
operator|.
name|split
argument_list|(
name|AbfsHttpConstants
operator|.
name|COMMA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|authType
operator|=
name|abfsConfiguration
operator|.
name|getAuthType
argument_list|(
name|accountName
argument_list|)
expr_stmt|;
name|boolean
name|usingOauth
init|=
operator|(
name|authType
operator|==
name|AuthType
operator|.
name|OAuth
operator|)
decl_stmt|;
name|boolean
name|useHttps
init|=
operator|(
name|usingOauth
operator|||
name|abfsConfiguration
operator|.
name|isHttpsAlwaysUsed
argument_list|()
operator|)
condition|?
literal|true
else|:
name|isSecureScheme
decl_stmt|;
name|initializeClient
argument_list|(
name|uri
argument_list|,
name|fileSystemName
argument_list|,
name|accountName
argument_list|,
name|useHttps
argument_list|)
expr_stmt|;
name|this
operator|.
name|identityTransformer
operator|=
operator|new
name|IdentityTransformer
argument_list|(
name|abfsConfiguration
operator|.
name|getRawConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return local user name.    * */
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|userName
return|;
block|}
comment|/**   * @return primary group that user belongs to.   * */
DECL|method|getPrimaryGroup ()
specifier|public
name|String
name|getPrimaryGroup
parameter_list|()
block|{
return|return
name|this
operator|.
name|primaryUserGroup
return|;
block|}
DECL|method|authorityParts (URI uri)
specifier|private
name|String
index|[]
name|authorityParts
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|InvalidUriAuthorityException
throws|,
name|InvalidUriException
block|{
specifier|final
name|String
name|authority
init|=
name|uri
operator|.
name|getRawAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|authority
condition|)
block|{
throw|throw
operator|new
name|InvalidUriAuthorityException
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|authority
operator|.
name|contains
argument_list|(
name|AbfsHttpConstants
operator|.
name|AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidUriAuthorityException
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|String
index|[]
name|authorityParts
init|=
name|authority
operator|.
name|split
argument_list|(
name|AbfsHttpConstants
operator|.
name|AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorityParts
operator|.
name|length
operator|<
literal|2
operator|||
name|authorityParts
index|[
literal|0
index|]
operator|!=
literal|null
operator|&&
name|authorityParts
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"'%s' has a malformed authority, expected container name. "
operator|+
literal|"Authority takes the form "
operator|+
name|FileSystemUriSchemes
operator|.
name|ABFS_SCHEME
operator|+
literal|"://[<container name>@]<account name>"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|InvalidUriException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
return|return
name|authorityParts
return|;
block|}
DECL|method|getIsNamespaceEnabled ()
specifier|public
name|boolean
name|getIsNamespaceEnabled
parameter_list|()
throws|throws
name|AzureBlobFileSystemException
block|{
if|if
condition|(
operator|!
name|isNamespaceEnabledSet
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get root ACL status"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getAclStatus
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|AbfsHttpConstants
operator|.
name|ROOT_PATH
argument_list|)
expr_stmt|;
name|isNamespaceEnabled
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbfsRestOperationException
name|ex
parameter_list|)
block|{
comment|// Get ACL status is a HEAD request, its response doesn't contain errorCode
comment|// So can only rely on its status code to determine its account type.
if|if
condition|(
name|HttpURLConnection
operator|.
name|HTTP_BAD_REQUEST
operator|!=
name|ex
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
name|isNamespaceEnabled
operator|=
literal|false
expr_stmt|;
block|}
name|isNamespaceEnabledSet
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|isNamespaceEnabled
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getURIBuilder (final String hostName, boolean isSecure)
name|URIBuilder
name|getURIBuilder
parameter_list|(
specifier|final
name|String
name|hostName
parameter_list|,
name|boolean
name|isSecure
parameter_list|)
block|{
name|String
name|scheme
init|=
name|isSecure
condition|?
name|FileSystemUriSchemes
operator|.
name|HTTPS_SCHEME
else|:
name|FileSystemUriSchemes
operator|.
name|HTTP_SCHEME
decl_stmt|;
specifier|final
name|URIBuilder
name|uriBuilder
init|=
operator|new
name|URIBuilder
argument_list|()
decl_stmt|;
name|uriBuilder
operator|.
name|setScheme
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
comment|// For testing purposes, an IP address and port may be provided to override
comment|// the host specified in the FileSystem URI.  Also note that the format of
comment|// the Azure Storage Service URI changes from
comment|// http[s]://[account][domain-suffix]/[filesystem] to
comment|// http[s]://[ip]:[port]/[account]/[filesystem].
name|String
name|endPoint
init|=
name|abfsConfiguration
operator|.
name|get
argument_list|(
name|AZURE_ABFS_ENDPOINT
argument_list|)
decl_stmt|;
if|if
condition|(
name|endPoint
operator|==
literal|null
operator|||
operator|!
name|endPoint
operator|.
name|contains
argument_list|(
name|AbfsHttpConstants
operator|.
name|COLON
argument_list|)
condition|)
block|{
name|uriBuilder
operator|.
name|setHost
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
return|return
name|uriBuilder
return|;
block|}
comment|// Split ip and port
name|String
index|[]
name|data
init|=
name|endPoint
operator|.
name|split
argument_list|(
name|AbfsHttpConstants
operator|.
name|COLON
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"ABFS endpoint is not set correctly : %s, "
operator|+
literal|"Do not specify scheme when using {IP}:{PORT}"
argument_list|,
name|endPoint
argument_list|)
argument_list|)
throw|;
block|}
name|uriBuilder
operator|.
name|setHost
argument_list|(
name|data
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|uriBuilder
operator|.
name|setPort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|data
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|uriBuilder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|UriUtils
operator|.
name|extractAccountNameFromHostName
argument_list|(
name|hostName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|uriBuilder
return|;
block|}
DECL|method|getAbfsConfiguration ()
specifier|public
name|AbfsConfiguration
name|getAbfsConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|abfsConfiguration
return|;
block|}
DECL|method|getFilesystemProperties ()
specifier|public
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFilesystemProperties
parameter_list|()
throws|throws
name|AzureBlobFileSystemException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFilesystemProperties for filesystem: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parsedXmsProperties
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|getFilesystemProperties
argument_list|()
decl_stmt|;
specifier|final
name|String
name|xMsProperties
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_PROPERTIES
argument_list|)
decl_stmt|;
name|parsedXmsProperties
operator|=
name|parseCommaSeparatedXmsProperties
argument_list|(
name|xMsProperties
argument_list|)
expr_stmt|;
return|return
name|parsedXmsProperties
return|;
block|}
DECL|method|setFilesystemProperties (final Hashtable<String, String> properties)
specifier|public
name|void
name|setFilesystemProperties
parameter_list|(
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
if|if
condition|(
name|properties
operator|==
literal|null
operator|||
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"setFilesystemProperties for filesystem: {} with properties: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|properties
argument_list|)
expr_stmt|;
specifier|final
name|String
name|commaSeparatedProperties
decl_stmt|;
try|try
block|{
name|commaSeparatedProperties
operator|=
name|convertXmsPropertiesToCommaSeparatedString
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidAbfsRestOperationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|client
operator|.
name|setFilesystemProperties
argument_list|(
name|commaSeparatedProperties
argument_list|)
expr_stmt|;
block|}
DECL|method|getPathProperties (final Path path)
specifier|public
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPathProperties
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getPathProperties for filesystem: {} path: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parsedXmsProperties
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|getPathProperties
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|isNamespaceEnabled
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xMsProperties
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_PROPERTIES
argument_list|)
decl_stmt|;
name|parsedXmsProperties
operator|=
name|parseCommaSeparatedXmsProperties
argument_list|(
name|xMsProperties
argument_list|)
expr_stmt|;
return|return
name|parsedXmsProperties
return|;
block|}
DECL|method|setPathProperties (final Path path, final Hashtable<String, String> properties)
specifier|public
name|void
name|setPathProperties
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"setFilesystemProperties for filesystem: {} path: {} with properties: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|properties
argument_list|)
expr_stmt|;
specifier|final
name|String
name|commaSeparatedProperties
decl_stmt|;
try|try
block|{
name|commaSeparatedProperties
operator|=
name|convertXmsPropertiesToCommaSeparatedString
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidAbfsRestOperationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|client
operator|.
name|setPathProperties
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|commaSeparatedProperties
argument_list|)
expr_stmt|;
block|}
DECL|method|createFilesystem ()
specifier|public
name|void
name|createFilesystem
parameter_list|()
throws|throws
name|AzureBlobFileSystemException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"createFilesystem for filesystem: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|createFilesystem
argument_list|()
expr_stmt|;
block|}
DECL|method|deleteFilesystem ()
specifier|public
name|void
name|deleteFilesystem
parameter_list|()
throws|throws
name|AzureBlobFileSystemException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteFilesystem for filesystem: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|deleteFilesystem
argument_list|()
expr_stmt|;
block|}
DECL|method|createFile (final Path path, final boolean overwrite, final FsPermission permission, final FsPermission umask)
specifier|public
name|OutputStream
name|createFile
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|FsPermission
name|umask
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
name|boolean
name|isNamespaceEnabled
init|=
name|getIsNamespaceEnabled
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"createFile filesystem: {} path: {} overwrite: {} permission: {} umask: {} isNamespaceEnabled: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|overwrite
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|,
name|umask
operator|.
name|toString
argument_list|()
argument_list|,
name|isNamespaceEnabled
argument_list|)
expr_stmt|;
name|client
operator|.
name|createPath
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|,
name|overwrite
argument_list|,
name|isNamespaceEnabled
condition|?
name|getOctalNotation
argument_list|(
name|permission
argument_list|)
else|:
literal|null
argument_list|,
name|isNamespaceEnabled
condition|?
name|getOctalNotation
argument_list|(
name|umask
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
return|return
operator|new
name|AbfsOutputStream
argument_list|(
name|client
argument_list|,
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|0
argument_list|,
name|abfsConfiguration
operator|.
name|getWriteBufferSize
argument_list|()
argument_list|,
name|abfsConfiguration
operator|.
name|isFlushEnabled
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createDirectory (final Path path, final FsPermission permission, final FsPermission umask)
specifier|public
name|void
name|createDirectory
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|FsPermission
name|umask
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
name|boolean
name|isNamespaceEnabled
init|=
name|getIsNamespaceEnabled
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"createDirectory filesystem: {} path: {} permission: {} umask: {} isNamespaceEnabled: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|permission
argument_list|,
name|umask
argument_list|,
name|isNamespaceEnabled
argument_list|)
expr_stmt|;
name|client
operator|.
name|createPath
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|isNamespaceEnabled
condition|?
name|getOctalNotation
argument_list|(
name|permission
argument_list|)
else|:
literal|null
argument_list|,
name|isNamespaceEnabled
condition|?
name|getOctalNotation
argument_list|(
name|umask
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|openFileForRead (final Path path, final FileSystem.Statistics statistics)
specifier|public
name|AbfsInputStream
name|openFileForRead
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|FileSystem
operator|.
name|Statistics
name|statistics
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"openFileForRead filesystem: {} path: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|getPathProperties
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|isNamespaceEnabled
argument_list|)
decl_stmt|;
specifier|final
name|String
name|resourceType
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_RESOURCE_TYPE
argument_list|)
decl_stmt|;
specifier|final
name|long
name|contentLength
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|CONTENT_LENGTH
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|eTag
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|ETAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseIsDirectory
argument_list|(
name|resourceType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AbfsRestOperationException
argument_list|(
name|AzureServiceErrorCode
operator|.
name|PATH_NOT_FOUND
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|AzureServiceErrorCode
operator|.
name|PATH_NOT_FOUND
operator|.
name|getErrorCode
argument_list|()
argument_list|,
literal|"openFileForRead must be used with files and not directories"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
comment|// Add statistics for InputStream
return|return
operator|new
name|AbfsInputStream
argument_list|(
name|client
argument_list|,
name|statistics
argument_list|,
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|contentLength
argument_list|,
name|abfsConfiguration
operator|.
name|getReadBufferSize
argument_list|()
argument_list|,
name|abfsConfiguration
operator|.
name|getReadAheadQueueDepth
argument_list|()
argument_list|,
name|abfsConfiguration
operator|.
name|getTolerateOobAppends
argument_list|()
argument_list|,
name|eTag
argument_list|)
return|;
block|}
DECL|method|openFileForWrite (final Path path, final boolean overwrite)
specifier|public
name|OutputStream
name|openFileForWrite
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"openFileForWrite filesystem: {} path: {} overwrite: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|getPathProperties
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|isNamespaceEnabled
argument_list|)
decl_stmt|;
specifier|final
name|String
name|resourceType
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_RESOURCE_TYPE
argument_list|)
decl_stmt|;
specifier|final
name|Long
name|contentLength
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|CONTENT_LENGTH
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseIsDirectory
argument_list|(
name|resourceType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AbfsRestOperationException
argument_list|(
name|AzureServiceErrorCode
operator|.
name|PATH_NOT_FOUND
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|AzureServiceErrorCode
operator|.
name|PATH_NOT_FOUND
operator|.
name|getErrorCode
argument_list|()
argument_list|,
literal|"openFileForRead must be used with files and not directories"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
specifier|final
name|long
name|offset
init|=
name|overwrite
condition|?
literal|0
else|:
name|contentLength
decl_stmt|;
return|return
operator|new
name|AbfsOutputStream
argument_list|(
name|client
argument_list|,
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|offset
argument_list|,
name|abfsConfiguration
operator|.
name|getWriteBufferSize
argument_list|()
argument_list|,
name|abfsConfiguration
operator|.
name|isFlushEnabled
argument_list|()
argument_list|)
return|;
block|}
DECL|method|rename (final Path source, final Path destination)
specifier|public
name|void
name|rename
parameter_list|(
specifier|final
name|Path
name|source
parameter_list|,
specifier|final
name|Path
name|destination
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
if|if
condition|(
name|isAtomicRenameKey
argument_list|(
name|source
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The atomic rename feature is not supported by the ABFS scheme; however rename,"
operator|+
literal|" create and delete operations are atomic if Namespace is enabled for your Azure Storage account."
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"renameAsync filesystem: {} source: {} destination: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|source
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|String
name|continuation
init|=
literal|null
decl_stmt|;
do|do
block|{
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|renamePath
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|source
argument_list|)
argument_list|,
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|destination
argument_list|)
argument_list|,
name|continuation
argument_list|)
decl_stmt|;
name|continuation
operator|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_CONTINUATION
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|continuation
operator|!=
literal|null
operator|&&
operator|!
name|continuation
operator|.
name|isEmpty
argument_list|()
condition|)
do|;
block|}
DECL|method|delete (final Path path, final boolean recursive)
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"delete filesystem: {} path: {} recursive: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|recursive
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|continuation
init|=
literal|null
decl_stmt|;
do|do
block|{
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|deletePath
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|recursive
argument_list|,
name|continuation
argument_list|)
decl_stmt|;
name|continuation
operator|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_CONTINUATION
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|continuation
operator|!=
literal|null
operator|&&
operator|!
name|continuation
operator|.
name|isEmpty
argument_list|()
condition|)
do|;
block|}
DECL|method|getFileStatus (final Path path)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isNamespaceEnabled
init|=
name|getIsNamespaceEnabled
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|isNamespaceEnabled
argument_list|)
expr_stmt|;
specifier|final
name|AbfsRestOperation
name|op
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|op
operator|=
name|isNamespaceEnabled
condition|?
name|client
operator|.
name|getAclStatus
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|AbfsHttpConstants
operator|.
name|ROOT_PATH
argument_list|)
else|:
name|client
operator|.
name|getFilesystemProperties
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|op
operator|=
name|client
operator|.
name|getPathProperties
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|isNamespaceEnabled
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|blockSize
init|=
name|abfsConfiguration
operator|.
name|getAzureBlockSize
argument_list|()
decl_stmt|;
specifier|final
name|AbfsHttpOperation
name|result
init|=
name|op
operator|.
name|getResult
argument_list|()
decl_stmt|;
specifier|final
name|String
name|eTag
init|=
name|result
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|ETAG
argument_list|)
decl_stmt|;
specifier|final
name|String
name|lastModified
init|=
name|result
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|LAST_MODIFIED
argument_list|)
decl_stmt|;
specifier|final
name|String
name|permissions
init|=
name|result
operator|.
name|getResponseHeader
argument_list|(
operator|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_PERMISSIONS
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasAcl
init|=
name|AbfsPermission
operator|.
name|isExtendedAcl
argument_list|(
name|permissions
argument_list|)
decl_stmt|;
specifier|final
name|long
name|contentLength
decl_stmt|;
specifier|final
name|boolean
name|resourceIsDir
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|contentLength
operator|=
literal|0
expr_stmt|;
name|resourceIsDir
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|contentLength
operator|=
name|parseContentLength
argument_list|(
name|result
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|CONTENT_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|resourceIsDir
operator|=
name|parseIsDirectory
argument_list|(
name|result
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_RESOURCE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|transformedOwner
init|=
name|identityTransformer
operator|.
name|transformIdentityForGetRequest
argument_list|(
name|result
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_OWNER
argument_list|)
argument_list|,
literal|true
argument_list|,
name|userName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|transformedGroup
init|=
name|identityTransformer
operator|.
name|transformIdentityForGetRequest
argument_list|(
name|result
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_GROUP
argument_list|)
argument_list|,
literal|false
argument_list|,
name|primaryUserGroup
argument_list|)
decl_stmt|;
return|return
operator|new
name|VersionedFileStatus
argument_list|(
name|transformedOwner
argument_list|,
name|transformedGroup
argument_list|,
name|permissions
operator|==
literal|null
condition|?
operator|new
name|AbfsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
else|:
name|AbfsPermission
operator|.
name|valueOf
argument_list|(
name|permissions
argument_list|)
argument_list|,
name|hasAcl
argument_list|,
name|contentLength
argument_list|,
name|resourceIsDir
argument_list|,
literal|1
argument_list|,
name|blockSize
argument_list|,
name|parseLastModifiedTime
argument_list|(
name|lastModified
argument_list|)
argument_list|,
name|path
argument_list|,
name|eTag
argument_list|)
return|;
block|}
DECL|method|listStatus (final Path path)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"listStatus filesystem: {} path: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|String
name|relativePath
init|=
name|path
operator|.
name|isRoot
argument_list|()
condition|?
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
else|:
name|getRelativePath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|continuation
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|fileStatuses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
do|do
block|{
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|listPath
argument_list|(
name|relativePath
argument_list|,
literal|false
argument_list|,
name|LIST_MAX_RESULTS
argument_list|,
name|continuation
argument_list|)
decl_stmt|;
name|continuation
operator|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_CONTINUATION
argument_list|)
expr_stmt|;
name|ListResultSchema
name|retrievedSchema
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getListResultSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|retrievedSchema
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AbfsRestOperationException
argument_list|(
name|AzureServiceErrorCode
operator|.
name|PATH_NOT_FOUND
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|AzureServiceErrorCode
operator|.
name|PATH_NOT_FOUND
operator|.
name|getErrorCode
argument_list|()
argument_list|,
literal|"listStatusAsync path not found"
argument_list|,
literal|null
argument_list|,
name|op
operator|.
name|getResult
argument_list|()
argument_list|)
throw|;
block|}
name|long
name|blockSize
init|=
name|abfsConfiguration
operator|.
name|getAzureBlockSize
argument_list|()
decl_stmt|;
for|for
control|(
name|ListResultEntrySchema
name|entry
range|:
name|retrievedSchema
operator|.
name|paths
argument_list|()
control|)
block|{
specifier|final
name|String
name|owner
init|=
name|identityTransformer
operator|.
name|transformIdentityForGetRequest
argument_list|(
name|entry
operator|.
name|owner
argument_list|()
argument_list|,
literal|true
argument_list|,
name|userName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|group
init|=
name|identityTransformer
operator|.
name|transformIdentityForGetRequest
argument_list|(
name|entry
operator|.
name|group
argument_list|()
argument_list|,
literal|false
argument_list|,
name|primaryUserGroup
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|fsPermission
init|=
name|entry
operator|.
name|permissions
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|AbfsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
else|:
name|AbfsPermission
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|permissions
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasAcl
init|=
name|AbfsPermission
operator|.
name|isExtendedAcl
argument_list|(
name|entry
operator|.
name|permissions
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|lastModifiedMillis
init|=
literal|0
decl_stmt|;
name|long
name|contentLength
init|=
name|entry
operator|.
name|contentLength
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|entry
operator|.
name|contentLength
argument_list|()
decl_stmt|;
name|boolean
name|isDirectory
init|=
name|entry
operator|.
name|isDirectory
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|entry
operator|.
name|isDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|lastModified
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|entry
operator|.
name|lastModified
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lastModifiedMillis
operator|=
name|parseLastModifiedTime
argument_list|(
name|entry
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|entryPath
init|=
operator|new
name|Path
argument_list|(
name|File
operator|.
name|separator
operator|+
name|entry
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|entryPath
operator|=
name|entryPath
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|uri
argument_list|,
name|entryPath
argument_list|)
expr_stmt|;
name|fileStatuses
operator|.
name|add
argument_list|(
operator|new
name|VersionedFileStatus
argument_list|(
name|owner
argument_list|,
name|group
argument_list|,
name|fsPermission
argument_list|,
name|hasAcl
argument_list|,
name|contentLength
argument_list|,
name|isDirectory
argument_list|,
literal|1
argument_list|,
name|blockSize
argument_list|,
name|lastModifiedMillis
argument_list|,
name|entryPath
argument_list|,
name|entry
operator|.
name|eTag
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|continuation
operator|!=
literal|null
operator|&&
operator|!
name|continuation
operator|.
name|isEmpty
argument_list|()
condition|)
do|;
return|return
name|fileStatuses
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|fileStatuses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|setOwner (final Path path, final String owner, final String group)
specifier|public
name|void
name|setOwner
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|group
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
if|if
condition|(
operator|!
name|getIsNamespaceEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is only valid for storage accounts with the hierarchical namespace enabled."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"setOwner filesystem: {} path: {} owner: {} group: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
expr_stmt|;
specifier|final
name|String
name|transformedOwner
init|=
name|identityTransformer
operator|.
name|transformUserOrGroupForSetRequest
argument_list|(
name|owner
argument_list|)
decl_stmt|;
specifier|final
name|String
name|transformedGroup
init|=
name|identityTransformer
operator|.
name|transformUserOrGroupForSetRequest
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|client
operator|.
name|setOwner
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|transformedOwner
argument_list|,
name|transformedGroup
argument_list|)
expr_stmt|;
block|}
DECL|method|setPermission (final Path path, final FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
if|if
condition|(
operator|!
name|getIsNamespaceEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is only valid for storage accounts with the hierarchical namespace enabled."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"setPermission filesystem: {} path: {} permission: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setPermission
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|AbfsHttpConstants
operator|.
name|PERMISSION_FORMAT
argument_list|,
name|permission
operator|.
name|toOctal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|modifyAclEntries (final Path path, final List<AclEntry> aclSpec)
specifier|public
name|void
name|modifyAclEntries
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
if|if
condition|(
operator|!
name|getIsNamespaceEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is only valid for storage accounts with the hierarchical namespace enabled."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"modifyAclEntries filesystem: {} path: {} aclSpec: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|AclEntry
operator|.
name|aclSpecToString
argument_list|(
name|aclSpec
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|transformedAclEntries
init|=
name|identityTransformer
operator|.
name|transformAclEntriesForSetRequest
argument_list|(
name|aclSpec
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|modifyAclEntries
init|=
name|AbfsAclHelper
operator|.
name|deserializeAclSpec
argument_list|(
name|AclEntry
operator|.
name|aclSpecToString
argument_list|(
name|transformedAclEntries
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|useUpn
init|=
name|AbfsAclHelper
operator|.
name|isUpnFormatAclEntries
argument_list|(
name|modifyAclEntries
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|getAclStatus
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|useUpn
argument_list|)
decl_stmt|;
specifier|final
name|String
name|eTag
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|ETAG
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntries
init|=
name|AbfsAclHelper
operator|.
name|deserializeAclSpec
argument_list|(
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_ACL
argument_list|)
argument_list|)
decl_stmt|;
name|AbfsAclHelper
operator|.
name|modifyAclEntriesInternal
argument_list|(
name|aclEntries
argument_list|,
name|modifyAclEntries
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAcl
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|AbfsAclHelper
operator|.
name|serializeAclSpec
argument_list|(
name|aclEntries
argument_list|)
argument_list|,
name|eTag
argument_list|)
expr_stmt|;
block|}
DECL|method|removeAclEntries (final Path path, final List<AclEntry> aclSpec)
specifier|public
name|void
name|removeAclEntries
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
if|if
condition|(
operator|!
name|getIsNamespaceEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is only valid for storage accounts with the hierarchical namespace enabled."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeAclEntries filesystem: {} path: {} aclSpec: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|AclEntry
operator|.
name|aclSpecToString
argument_list|(
name|aclSpec
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|transformedAclEntries
init|=
name|identityTransformer
operator|.
name|transformAclEntriesForSetRequest
argument_list|(
name|aclSpec
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|removeAclEntries
init|=
name|AbfsAclHelper
operator|.
name|deserializeAclSpec
argument_list|(
name|AclEntry
operator|.
name|aclSpecToString
argument_list|(
name|transformedAclEntries
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isUpnFormat
init|=
name|AbfsAclHelper
operator|.
name|isUpnFormatAclEntries
argument_list|(
name|removeAclEntries
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|getAclStatus
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|isUpnFormat
argument_list|)
decl_stmt|;
specifier|final
name|String
name|eTag
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|ETAG
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntries
init|=
name|AbfsAclHelper
operator|.
name|deserializeAclSpec
argument_list|(
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_ACL
argument_list|)
argument_list|)
decl_stmt|;
name|AbfsAclHelper
operator|.
name|removeAclEntriesInternal
argument_list|(
name|aclEntries
argument_list|,
name|removeAclEntries
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAcl
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|AbfsAclHelper
operator|.
name|serializeAclSpec
argument_list|(
name|aclEntries
argument_list|)
argument_list|,
name|eTag
argument_list|)
expr_stmt|;
block|}
DECL|method|removeDefaultAcl (final Path path)
specifier|public
name|void
name|removeDefaultAcl
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
if|if
condition|(
operator|!
name|getIsNamespaceEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is only valid for storage accounts with the hierarchical namespace enabled."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeDefaultAcl filesystem: {} path: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|getAclStatus
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|eTag
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|ETAG
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntries
init|=
name|AbfsAclHelper
operator|.
name|deserializeAclSpec
argument_list|(
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_ACL
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|defaultAclEntries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntry
range|:
name|aclEntries
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|aclEntry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"default:"
argument_list|)
condition|)
block|{
name|defaultAclEntries
operator|.
name|put
argument_list|(
name|aclEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|aclEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|aclEntries
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|defaultAclEntries
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAcl
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|AbfsAclHelper
operator|.
name|serializeAclSpec
argument_list|(
name|aclEntries
argument_list|)
argument_list|,
name|eTag
argument_list|)
expr_stmt|;
block|}
DECL|method|removeAcl (final Path path)
specifier|public
name|void
name|removeAcl
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
if|if
condition|(
operator|!
name|getIsNamespaceEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is only valid for storage accounts with the hierarchical namespace enabled."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeAcl filesystem: {} path: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|getAclStatus
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|eTag
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|ETAG
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntries
init|=
name|AbfsAclHelper
operator|.
name|deserializeAclSpec
argument_list|(
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_ACL
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newAclEntries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|newAclEntries
operator|.
name|put
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_USER
argument_list|,
name|aclEntries
operator|.
name|get
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_USER
argument_list|)
argument_list|)
expr_stmt|;
name|newAclEntries
operator|.
name|put
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_GROUP
argument_list|,
name|aclEntries
operator|.
name|get
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|newAclEntries
operator|.
name|put
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_OTHER
argument_list|,
name|aclEntries
operator|.
name|get
argument_list|(
name|AbfsHttpConstants
operator|.
name|ACCESS_OTHER
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAcl
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|AbfsAclHelper
operator|.
name|serializeAclSpec
argument_list|(
name|newAclEntries
argument_list|)
argument_list|,
name|eTag
argument_list|)
expr_stmt|;
block|}
DECL|method|setAcl (final Path path, final List<AclEntry> aclSpec)
specifier|public
name|void
name|setAcl
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
if|if
condition|(
operator|!
name|getIsNamespaceEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is only valid for storage accounts with the hierarchical namespace enabled."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"setAcl filesystem: {} path: {} aclspec: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|AclEntry
operator|.
name|aclSpecToString
argument_list|(
name|aclSpec
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|transformedAclEntries
init|=
name|identityTransformer
operator|.
name|transformAclEntriesForSetRequest
argument_list|(
name|aclSpec
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aclEntries
init|=
name|AbfsAclHelper
operator|.
name|deserializeAclSpec
argument_list|(
name|AclEntry
operator|.
name|aclSpecToString
argument_list|(
name|transformedAclEntries
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isUpnFormat
init|=
name|AbfsAclHelper
operator|.
name|isUpnFormatAclEntries
argument_list|(
name|aclEntries
argument_list|)
decl_stmt|;
specifier|final
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|getAclStatus
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|isUpnFormat
argument_list|)
decl_stmt|;
specifier|final
name|String
name|eTag
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|ETAG
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAclEntries
init|=
name|AbfsAclHelper
operator|.
name|deserializeAclSpec
argument_list|(
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_ACL
argument_list|)
argument_list|)
decl_stmt|;
name|AbfsAclHelper
operator|.
name|setAclEntriesInternal
argument_list|(
name|aclEntries
argument_list|,
name|getAclEntries
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAcl
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|AbfsAclHelper
operator|.
name|serializeAclSpec
argument_list|(
name|aclEntries
argument_list|)
argument_list|,
name|eTag
argument_list|)
expr_stmt|;
block|}
DECL|method|getAclStatus (final Path path)
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|getIsNamespaceEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is only valid for storage accounts with the hierarchical namespace enabled."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"getAclStatus filesystem: {} path: {}"
argument_list|,
name|client
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|AbfsRestOperation
name|op
init|=
name|client
operator|.
name|getAclStatus
argument_list|(
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|AbfsHttpOperation
name|result
init|=
name|op
operator|.
name|getResult
argument_list|()
decl_stmt|;
specifier|final
name|String
name|transformedOwner
init|=
name|identityTransformer
operator|.
name|transformIdentityForGetRequest
argument_list|(
name|result
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_OWNER
argument_list|)
argument_list|,
literal|true
argument_list|,
name|userName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|transformedGroup
init|=
name|identityTransformer
operator|.
name|transformIdentityForGetRequest
argument_list|(
name|result
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_GROUP
argument_list|)
argument_list|,
literal|false
argument_list|,
name|primaryUserGroup
argument_list|)
decl_stmt|;
specifier|final
name|String
name|permissions
init|=
name|result
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_PERMISSIONS
argument_list|)
decl_stmt|;
specifier|final
name|String
name|aclSpecString
init|=
name|op
operator|.
name|getResult
argument_list|()
operator|.
name|getResponseHeader
argument_list|(
name|HttpHeaderConfigurations
operator|.
name|X_MS_ACL
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|processedAclEntries
init|=
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
name|AbfsAclHelper
operator|.
name|processAclString
argument_list|(
name|aclSpecString
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|fsPermission
init|=
name|permissions
operator|==
literal|null
condition|?
operator|new
name|AbfsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
else|:
name|AbfsPermission
operator|.
name|valueOf
argument_list|(
name|permissions
argument_list|)
decl_stmt|;
specifier|final
name|AclStatus
operator|.
name|Builder
name|aclStatusBuilder
init|=
operator|new
name|AclStatus
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|aclStatusBuilder
operator|.
name|owner
argument_list|(
name|transformedOwner
argument_list|)
expr_stmt|;
name|aclStatusBuilder
operator|.
name|group
argument_list|(
name|transformedGroup
argument_list|)
expr_stmt|;
name|aclStatusBuilder
operator|.
name|setPermission
argument_list|(
name|fsPermission
argument_list|)
expr_stmt|;
name|aclStatusBuilder
operator|.
name|stickyBit
argument_list|(
name|fsPermission
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
name|aclStatusBuilder
operator|.
name|addEntries
argument_list|(
name|processedAclEntries
argument_list|)
expr_stmt|;
return|return
name|aclStatusBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|isAtomicRenameKey (String key)
specifier|public
name|boolean
name|isAtomicRenameKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|isKeyForDirectorySet
argument_list|(
name|key
argument_list|,
name|azureAtomicRenameDirSet
argument_list|)
return|;
block|}
DECL|method|initializeClient (URI uri, String fileSystemName, String accountName, boolean isSecure)
specifier|private
name|void
name|initializeClient
parameter_list|(
name|URI
name|uri
parameter_list|,
name|String
name|fileSystemName
parameter_list|,
name|String
name|accountName
parameter_list|,
name|boolean
name|isSecure
parameter_list|)
throws|throws
name|AzureBlobFileSystemException
block|{
if|if
condition|(
name|this
operator|.
name|client
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|URIBuilder
name|uriBuilder
init|=
name|getURIBuilder
argument_list|(
name|accountName
argument_list|,
name|isSecure
argument_list|)
decl_stmt|;
specifier|final
name|String
name|url
init|=
name|uriBuilder
operator|.
name|toString
argument_list|()
operator|+
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
operator|+
name|fileSystemName
decl_stmt|;
name|URL
name|baseUrl
decl_stmt|;
try|try
block|{
name|baseUrl
operator|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidUriException
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|SharedKeyCredentials
name|creds
init|=
literal|null
decl_stmt|;
name|AccessTokenProvider
name|tokenProvider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|abfsConfiguration
operator|.
name|getAuthType
argument_list|(
name|accountName
argument_list|)
operator|==
name|AuthType
operator|.
name|SharedKey
condition|)
block|{
name|int
name|dotIndex
init|=
name|accountName
operator|.
name|indexOf
argument_list|(
name|AbfsHttpConstants
operator|.
name|DOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidUriException
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
operator|+
literal|" - account name is not fully qualified."
argument_list|)
throw|;
block|}
name|creds
operator|=
operator|new
name|SharedKeyCredentials
argument_list|(
name|accountName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
argument_list|,
name|abfsConfiguration
operator|.
name|getStorageAccountKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenProvider
operator|=
name|abfsConfiguration
operator|.
name|getTokenProvider
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|client
operator|=
operator|new
name|AbfsClient
argument_list|(
name|baseUrl
argument_list|,
name|creds
argument_list|,
name|abfsConfiguration
argument_list|,
operator|new
name|ExponentialRetryPolicy
argument_list|()
argument_list|,
name|tokenProvider
argument_list|)
expr_stmt|;
block|}
DECL|method|getOctalNotation (FsPermission fsPermission)
specifier|private
name|String
name|getOctalNotation
parameter_list|(
name|FsPermission
name|fsPermission
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|fsPermission
argument_list|,
literal|"fsPermission"
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|AbfsHttpConstants
operator|.
name|PERMISSION_FORMAT
argument_list|,
name|fsPermission
operator|.
name|toOctal
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getRelativePath (final Path path)
specifier|private
name|String
name|getRelativePath
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
return|return
name|getRelativePath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getRelativePath (final Path path, final boolean allowRootPath)
specifier|private
name|String
name|getRelativePath
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|allowRootPath
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|path
argument_list|,
literal|"path"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|relativePath
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|relativePath
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
operator|(
name|relativePath
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|relativePath
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|Path
operator|.
name|SEPARATOR_CHAR
operator|)
condition|)
block|{
return|return
name|allowRootPath
condition|?
name|AbfsHttpConstants
operator|.
name|ROOT_PATH
else|:
name|AbfsHttpConstants
operator|.
name|EMPTY_STRING
return|;
block|}
if|if
condition|(
name|relativePath
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|Path
operator|.
name|SEPARATOR_CHAR
condition|)
block|{
return|return
name|relativePath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
name|relativePath
return|;
block|}
DECL|method|parseContentLength (final String contentLength)
specifier|private
name|long
name|parseContentLength
parameter_list|(
specifier|final
name|String
name|contentLength
parameter_list|)
block|{
if|if
condition|(
name|contentLength
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|contentLength
argument_list|)
return|;
block|}
DECL|method|parseIsDirectory (final String resourceType)
specifier|private
name|boolean
name|parseIsDirectory
parameter_list|(
specifier|final
name|String
name|resourceType
parameter_list|)
block|{
return|return
name|resourceType
operator|!=
literal|null
operator|&&
name|resourceType
operator|.
name|equalsIgnoreCase
argument_list|(
name|AbfsHttpConstants
operator|.
name|DIRECTORY
argument_list|)
return|;
block|}
DECL|method|parseLastModifiedTime (final String lastModifiedTime)
specifier|private
name|long
name|parseLastModifiedTime
parameter_list|(
specifier|final
name|String
name|lastModifiedTime
parameter_list|)
block|{
name|long
name|parsedTime
init|=
literal|0
decl_stmt|;
try|try
block|{
name|Date
name|utcDate
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DATE_TIME_PATTERN
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|parse
argument_list|(
name|lastModifiedTime
argument_list|)
decl_stmt|;
name|parsedTime
operator|=
name|utcDate
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to parse the date {}"
argument_list|,
name|lastModifiedTime
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
return|return
name|parsedTime
return|;
block|}
block|}
DECL|method|convertXmsPropertiesToCommaSeparatedString (final Hashtable<String, String> properties)
specifier|private
name|String
name|convertXmsPropertiesToCommaSeparatedString
parameter_list|(
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|CharacterCodingException
block|{
name|StringBuilder
name|commaSeparatedProperties
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|CharsetEncoder
name|encoder
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|XMS_PROPERTIES_ENCODING
argument_list|)
operator|.
name|newEncoder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propertyEntry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|propertyEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|propertyEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Boolean
name|canEncodeValue
init|=
name|encoder
operator|.
name|canEncode
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|canEncodeValue
condition|)
block|{
throw|throw
operator|new
name|CharacterCodingException
argument_list|()
throw|;
block|}
name|String
name|encodedPropertyValue
init|=
name|Base64
operator|.
name|encode
argument_list|(
name|encoder
operator|.
name|encode
argument_list|(
name|CharBuffer
operator|.
name|wrap
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|commaSeparatedProperties
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
name|AbfsHttpConstants
operator|.
name|EQUAL
argument_list|)
operator|.
name|append
argument_list|(
name|encodedPropertyValue
argument_list|)
expr_stmt|;
name|commaSeparatedProperties
operator|.
name|append
argument_list|(
name|AbfsHttpConstants
operator|.
name|COMMA
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commaSeparatedProperties
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|commaSeparatedProperties
operator|.
name|deleteCharAt
argument_list|(
name|commaSeparatedProperties
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|commaSeparatedProperties
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|parseCommaSeparatedXmsProperties (String xMsProperties)
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseCommaSeparatedXmsProperties
parameter_list|(
name|String
name|xMsProperties
parameter_list|)
throws|throws
name|InvalidFileSystemPropertyException
throws|,
name|InvalidAbfsRestOperationException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CharsetDecoder
name|decoder
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|XMS_PROPERTIES_ENCODING
argument_list|)
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
if|if
condition|(
name|xMsProperties
operator|!=
literal|null
operator|&&
operator|!
name|xMsProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|userProperties
init|=
name|xMsProperties
operator|.
name|split
argument_list|(
name|AbfsHttpConstants
operator|.
name|COMMA
argument_list|)
decl_stmt|;
if|if
condition|(
name|userProperties
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|properties
return|;
block|}
for|for
control|(
name|String
name|property
range|:
name|userProperties
control|)
block|{
if|if
condition|(
name|property
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidFileSystemPropertyException
argument_list|(
name|xMsProperties
argument_list|)
throw|;
block|}
name|String
index|[]
name|nameValue
init|=
name|property
operator|.
name|split
argument_list|(
name|AbfsHttpConstants
operator|.
name|EQUAL
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameValue
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|InvalidFileSystemPropertyException
argument_list|(
name|xMsProperties
argument_list|)
throw|;
block|}
name|byte
index|[]
name|decodedValue
init|=
name|Base64
operator|.
name|decode
argument_list|(
name|nameValue
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
name|decoder
operator|.
name|decode
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|decodedValue
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidAbfsRestOperationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|nameValue
index|[
literal|0
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|properties
return|;
block|}
DECL|method|isKeyForDirectorySet (String key, Set<String> dirSet)
specifier|private
name|boolean
name|isKeyForDirectorySet
parameter_list|(
name|String
name|key
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|dirSet
parameter_list|)
block|{
for|for
control|(
name|String
name|dir
range|:
name|dirSet
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|isEmpty
argument_list|()
operator|||
name|key
operator|.
name|startsWith
argument_list|(
name|dir
operator|+
name|AbfsHttpConstants
operator|.
name|FORWARD_SLASH
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|uri
operator|.
name|getAuthority
argument_list|()
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|dir
operator|+
literal|"/"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"URI syntax error creating URI for {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|class|VersionedFileStatus
specifier|private
specifier|static
class|class
name|VersionedFileStatus
extends|extends
name|FileStatus
block|{
DECL|field|version
specifier|private
specifier|final
name|String
name|version
decl_stmt|;
DECL|method|VersionedFileStatus ( final String owner, final String group, final FsPermission fsPermission, final boolean hasAcl, final long length, final boolean isdir, final int blockReplication, final long blocksize, final long modificationTime, final Path path, String version)
name|VersionedFileStatus
parameter_list|(
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|group
parameter_list|,
specifier|final
name|FsPermission
name|fsPermission
parameter_list|,
specifier|final
name|boolean
name|hasAcl
parameter_list|,
specifier|final
name|long
name|length
parameter_list|,
specifier|final
name|boolean
name|isdir
parameter_list|,
specifier|final
name|int
name|blockReplication
parameter_list|,
specifier|final
name|long
name|blocksize
parameter_list|,
specifier|final
name|long
name|modificationTime
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|super
argument_list|(
name|length
argument_list|,
name|isdir
argument_list|,
name|blockReplication
argument_list|,
name|blocksize
argument_list|,
name|modificationTime
argument_list|,
literal|0
argument_list|,
name|fsPermission
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|hasAcl
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/** Compare if this object is equal to another object.      * @param   obj the object to be compared.      * @return  true if two file status has the same path name; false if not.      */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|FileStatus
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileStatus
name|other
init|=
operator|(
name|FileStatus
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|other
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
block|{
comment|// compare the path
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|VersionedFileStatus
condition|)
block|{
return|return
name|this
operator|.
name|version
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|VersionedFileStatus
operator|)
name|other
operator|)
operator|.
name|version
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Returns a hash code value for the object, which is defined as      * the hash code of the path name.      *      * @return  a hash code value for the path name and version      */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|getPath
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hash
operator|=
literal|89
operator|*
name|hash
operator|+
operator|(
name|this
operator|.
name|version
operator|!=
literal|null
condition|?
name|this
operator|.
name|version
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|hash
return|;
block|}
comment|/**      * Returns the version of this FileStatus      *      * @return  a string value for the FileStatus version      */
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"VersionedFileStatus{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"; version='"
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getClient ()
name|AbfsClient
name|getClient
parameter_list|()
block|{
return|return
name|this
operator|.
name|client
return|;
block|}
block|}
end_class

end_unit

