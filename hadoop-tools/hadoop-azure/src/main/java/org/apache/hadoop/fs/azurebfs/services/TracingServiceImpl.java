begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|AzureBlobFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|services
operator|.
name|TracingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|HTraceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|SpanId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Singleton
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|TracingServiceImpl
specifier|final
class|class
name|TracingServiceImpl
implements|implements
name|TracingService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TracingService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tracer
specifier|private
specifier|final
name|Tracer
name|tracer
decl_stmt|;
DECL|field|currentScopeId
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|SpanId
argument_list|>
name|currentScopeId
decl_stmt|;
annotation|@
name|Inject
DECL|method|TracingServiceImpl ( final Configuration configuration)
name|TracingServiceImpl
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|configuration
argument_list|,
literal|"configuration"
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentScopeId
operator|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|tracer
operator|=
operator|new
name|Tracer
operator|.
name|Builder
argument_list|(
name|TracingService
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|conf
argument_list|(
operator|new
name|HTraceConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|key
argument_list|,
name|Tracer
operator|.
name|SPAN_RECEIVER_CLASSES_KEY
argument_list|)
condition|)
block|{
return|return
name|LoggerSpanReceiver
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
return|return
name|defaultValue
return|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|tracer
operator|.
name|addSampler
argument_list|(
name|Sampler
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|traceBegin (String description)
specifier|public
name|TraceScope
name|traceBegin
parameter_list|(
name|String
name|description
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|TraceScope
name|traceScope
init|=
name|this
operator|.
name|tracer
operator|.
name|newScope
argument_list|(
name|description
argument_list|)
decl_stmt|;
name|this
operator|.
name|currentScopeId
operator|.
name|set
argument_list|(
name|traceScope
operator|.
name|getSpanId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|traceScope
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|traceBegin (String description, SpanId parentSpanId)
specifier|public
name|TraceScope
name|traceBegin
parameter_list|(
name|String
name|description
parameter_list|,
name|SpanId
name|parentSpanId
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|TraceScope
name|traceScope
init|=
name|this
operator|.
name|tracer
operator|.
name|newScope
argument_list|(
name|description
argument_list|,
name|parentSpanId
argument_list|)
decl_stmt|;
name|this
operator|.
name|currentScopeId
operator|.
name|set
argument_list|(
name|traceScope
operator|.
name|getSpanId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|traceScope
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|traceException (TraceScope traceScope, AzureBlobFileSystemException azureBlobFileSystemException)
specifier|public
name|void
name|traceException
parameter_list|(
name|TraceScope
name|traceScope
parameter_list|,
name|AzureBlobFileSystemException
name|azureBlobFileSystemException
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|traceScope
argument_list|,
literal|"traceScope"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|azureBlobFileSystemException
argument_list|,
literal|"azureBlobFileSystemException"
argument_list|)
expr_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|printWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|stringWriter
argument_list|)
decl_stmt|;
name|azureBlobFileSystemException
operator|.
name|printStackTrace
argument_list|(
name|printWriter
argument_list|)
expr_stmt|;
name|printWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|traceScope
operator|.
name|addKVAnnotation
argument_list|(
literal|"Exception"
argument_list|,
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCurrentTraceScopeSpanId ()
specifier|public
name|SpanId
name|getCurrentTraceScopeSpanId
parameter_list|()
block|{
return|return
name|this
operator|.
name|currentScopeId
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|traceEnd (TraceScope traceScope)
specifier|public
name|void
name|traceEnd
parameter_list|(
name|TraceScope
name|traceScope
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|traceScope
argument_list|,
literal|"traceScope"
argument_list|)
expr_stmt|;
name|SpanId
index|[]
name|parents
init|=
name|traceScope
operator|.
name|getSpan
argument_list|()
operator|.
name|getParents
argument_list|()
decl_stmt|;
name|this
operator|.
name|currentScopeId
operator|.
name|set
argument_list|(
name|parents
operator|!=
literal|null
operator|&&
name|parents
operator|.
name|length
operator|>
literal|0
condition|?
name|parents
index|[
name|parents
operator|.
name|length
operator|-
literal|1
index|]
else|:
literal|null
argument_list|)
expr_stmt|;
name|traceScope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

