begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureNativeFileSystemStore
operator|.
name|TestHookOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|OperationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|SendingRequestEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|StorageEvent
import|;
end_import

begin_class
DECL|class|TestAzureFileSystemErrorConditions
specifier|public
class|class
name|TestAzureFileSystemErrorConditions
block|{
DECL|field|ALL_THREE_FILE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|ALL_THREE_FILE_SIZE
init|=
literal|1024
decl_stmt|;
annotation|@
name|Test
DECL|method|testNoInitialize ()
specifier|public
name|void
name|testNoInitialize
parameter_list|()
throws|throws
name|Exception
block|{
name|AzureNativeFileSystemStore
name|store
init|=
operator|new
name|AzureNativeFileSystemStore
argument_list|()
decl_stmt|;
name|boolean
name|passed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|store
operator|.
name|retrieveMetadata
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|passed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{     }
name|assertFalse
argument_list|(
literal|"Doing an operation on the store should throw if not initalized."
argument_list|,
name|passed
argument_list|)
expr_stmt|;
block|}
comment|/**    * Try accessing an unauthorized or non-existent (treated the same) container    * from WASB.    */
annotation|@
name|Test
DECL|method|testAccessUnauthorizedPublicContainer ()
specifier|public
name|void
name|testAccessUnauthorizedPublicContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|noAccessPath
init|=
operator|new
name|Path
argument_list|(
literal|"wasb://nonExistentContainer@hopefullyNonExistentAccount/someFile"
argument_list|)
decl_stmt|;
name|NativeAzureFileSystem
operator|.
name|suppressRetryPolicy
argument_list|()
expr_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|get
argument_list|(
name|noAccessPath
operator|.
name|toUri
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|open
argument_list|(
name|noAccessPath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should've thrown."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AzureException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected message in exception "
operator|+
name|ex
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unable to access container nonExistentContainer in account"
operator|+
literal|" hopefullyNonExistentAccount"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|NativeAzureFileSystem
operator|.
name|resumeRetryPolicy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAccessContainerWithWrongVersion ()
specifier|public
name|void
name|testAccessContainerWithWrongVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|AzureNativeFileSystemStore
name|store
init|=
operator|new
name|AzureNativeFileSystemStore
argument_list|()
decl_stmt|;
name|MockStorageInterface
name|mockStorage
init|=
operator|new
name|MockStorageInterface
argument_list|()
decl_stmt|;
name|store
operator|.
name|setAzureStorageInteractionLayer
argument_list|(
name|mockStorage
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
operator|new
name|NativeAzureFileSystem
argument_list|(
name|store
argument_list|)
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|AzureBlobStorageTestAccount
operator|.
name|setMockAccountKey
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|put
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|VERSION_METADATA_KEY
argument_list|,
literal|"2090-04-05"
argument_list|)
expr_stmt|;
comment|// It's from the future!
name|mockStorage
operator|.
name|addPreExistingContainer
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|getMockContainerUri
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|boolean
name|passed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|initialize
argument_list|(
operator|new
name|URI
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|MOCK_WASB_URI
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|passed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AzureException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception message: "
operator|+
name|ex
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unsupported version: 2090-04-05."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Should've thrown an exception because of the wrong version."
argument_list|,
name|passed
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|interface|ConnectionRecognizer
specifier|private
interface|interface
name|ConnectionRecognizer
block|{
DECL|method|isTargetConnection (HttpURLConnection connection)
name|boolean
name|isTargetConnection
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
function_decl|;
block|}
DECL|class|TransientErrorInjector
specifier|private
class|class
name|TransientErrorInjector
extends|extends
name|StorageEvent
argument_list|<
name|SendingRequestEvent
argument_list|>
block|{
DECL|field|connectionRecognizer
specifier|final
name|ConnectionRecognizer
name|connectionRecognizer
decl_stmt|;
DECL|field|injectedErrorOnce
specifier|private
name|boolean
name|injectedErrorOnce
init|=
literal|false
decl_stmt|;
DECL|method|TransientErrorInjector (ConnectionRecognizer connectionRecognizer)
specifier|public
name|TransientErrorInjector
parameter_list|(
name|ConnectionRecognizer
name|connectionRecognizer
parameter_list|)
block|{
name|this
operator|.
name|connectionRecognizer
operator|=
name|connectionRecognizer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|eventOccurred (SendingRequestEvent eventArg)
specifier|public
name|void
name|eventOccurred
parameter_list|(
name|SendingRequestEvent
name|eventArg
parameter_list|)
block|{
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|eventArg
operator|.
name|getConnectionObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|connectionRecognizer
operator|.
name|isTargetConnection
argument_list|(
name|connection
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|injectedErrorOnce
condition|)
block|{
name|connection
operator|.
name|setReadTimeout
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|injectedErrorOnce
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|method|injectTransientError (NativeAzureFileSystem fs, final ConnectionRecognizer connectionRecognizer)
specifier|private
name|void
name|injectTransientError
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
specifier|final
name|ConnectionRecognizer
name|connectionRecognizer
parameter_list|)
block|{
name|fs
operator|.
name|getStore
argument_list|()
operator|.
name|addTestHookToOperationContext
argument_list|(
operator|new
name|TestHookOperationContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OperationContext
name|modifyOperationContext
parameter_list|(
name|OperationContext
name|original
parameter_list|)
block|{
name|original
operator|.
name|getSendingRequestEventHandler
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|TransientErrorInjector
argument_list|(
name|connectionRecognizer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|original
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTransientErrorOnDelete ()
specifier|public
name|void
name|testTransientErrorOnDelete
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Need to do this test against a live storage account
name|AzureBlobStorageTestAccount
name|testAccount
init|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
decl_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
try|try
block|{
name|NativeAzureFileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|injectTransientError
argument_list|(
name|fs
argument_list|,
operator|new
name|ConnectionRecognizer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isTargetConnection
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
return|return
name|connection
operator|.
name|getRequestMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"DELETE"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/a/b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|testFile
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeAllThreeFile (NativeAzureFileSystem fs, Path testFile)
specifier|private
name|void
name|writeAllThreeFile
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
name|Path
name|testFile
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|ALL_THREE_FILE_SIZE
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
operator|(
name|byte
operator|)
literal|3
argument_list|)
expr_stmt|;
name|OutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|readAllThreeFile (NativeAzureFileSystem fs, Path testFile)
specifier|private
name|void
name|readAllThreeFile
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
name|Path
name|testFile
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|ALL_THREE_FILE_SIZE
index|]
decl_stmt|;
name|InputStream
name|inStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|inStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTransientErrorOnCommitBlockList ()
specifier|public
name|void
name|testTransientErrorOnCommitBlockList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Need to do this test against a live storage account
name|AzureBlobStorageTestAccount
name|testAccount
init|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
decl_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
try|try
block|{
name|NativeAzureFileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|injectTransientError
argument_list|(
name|fs
argument_list|,
operator|new
name|ConnectionRecognizer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isTargetConnection
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
return|return
name|connection
operator|.
name|getRequestMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"PUT"
argument_list|)
operator|&&
name|connection
operator|.
name|getURL
argument_list|()
operator|.
name|getQuery
argument_list|()
operator|.
name|contains
argument_list|(
literal|"blocklist"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/a/b"
argument_list|)
decl_stmt|;
name|writeAllThreeFile
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|readAllThreeFile
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTransientErrorOnRead ()
specifier|public
name|void
name|testTransientErrorOnRead
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Need to do this test against a live storage account
name|AzureBlobStorageTestAccount
name|testAccount
init|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
decl_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
try|try
block|{
name|NativeAzureFileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/a/b"
argument_list|)
decl_stmt|;
name|writeAllThreeFile
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|injectTransientError
argument_list|(
name|fs
argument_list|,
operator|new
name|ConnectionRecognizer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isTargetConnection
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
return|return
name|connection
operator|.
name|getRequestMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"GET"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|readAllThreeFile
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

