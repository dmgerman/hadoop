begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test class that runs wasb authorization tests with owner check enabled.  */
end_comment

begin_class
DECL|class|TestNativeAzureFileSystemAuthorizationWithOwner
specifier|public
class|class
name|TestNativeAzureFileSystemAuthorizationWithOwner
extends|extends
name|TestNativeAzureFileSystemAuthorization
block|{
annotation|@
name|Before
DECL|method|beforeMethod ()
specifier|public
name|void
name|beforeMethod
parameter_list|()
block|{
name|super
operator|.
name|beforeMethod
argument_list|()
expr_stmt|;
name|authorizer
operator|.
name|init
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case when owner matches current user    */
annotation|@
name|Test
DECL|method|testOwnerPermissionPositive ()
specifier|public
name|void
name|testOwnerPermissionPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testOwnerPermissionPositive"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test.data"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// additional rule used for assertPathExists
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
comment|// creates parentDir with owner as current user
name|fs
operator|.
name|mkdirs
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"parentDir does not exist"
argument_list|,
name|parentDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"testPath does not exist"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Negative test case for owner does not match current user    */
annotation|@
name|Test
DECL|method|testOwnerPermissionNegative ()
specifier|public
name|void
name|testOwnerPermissionNegative
parameter_list|()
throws|throws
name|Throwable
block|{
name|expectedEx
operator|.
name|expect
argument_list|(
name|WasbAuthorizationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testOwnerPermissionNegative"
argument_list|)
decl_stmt|;
name|Path
name|childDir
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"childDir"
argument_list|)
decl_stmt|;
name|setExpectedFailureMessage
argument_list|(
literal|"mkdirs"
argument_list|,
name|childDir
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugiSuperUser
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"testuser"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|ugiSuperUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test to verify that retrieving owner information does not    * throw when file/folder does not exist    */
annotation|@
name|Test
DECL|method|testRetrievingOwnerDoesNotFailWhenFileDoesNotExist ()
specifier|public
name|void
name|testRetrievingOwnerDoesNotFailWhenFileDoesNotExist
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|testdirectory
init|=
operator|new
name|Path
argument_list|(
literal|"/testDirectory123454565"
argument_list|)
decl_stmt|;
name|String
name|owner
init|=
name|fs
operator|.
name|getOwnerForPath
argument_list|(
name|testdirectory
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|owner
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

