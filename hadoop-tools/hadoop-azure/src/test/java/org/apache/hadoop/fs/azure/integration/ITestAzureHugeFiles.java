begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure.integration
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|FixMethodOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|MethodSorters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureBlobStorageTestAccount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|NativeAzureFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|integration
operator|.
name|AzureTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Scale test which creates a huge file.  *  *<b>Important:</b> the order in which these tests execute is fixed to  * alphabetical order. Test cases are numbered {@code test_123_} to impose  * an ordering based on the numbers.  *  * Having this ordering allows the tests to assume that the huge file  * exists. Even so: they should all have a {@link #assumeHugeFileExists()}  * check at the start, in case an individual test is executed.  *  *<b>Ignore checkstyle complaints about naming: we need a scheme with visible  * ordering.</b>  */
end_comment

begin_class
annotation|@
name|FixMethodOrder
argument_list|(
name|MethodSorters
operator|.
name|NAME_ASCENDING
argument_list|)
DECL|class|ITestAzureHugeFiles
specifier|public
class|class
name|ITestAzureHugeFiles
extends|extends
name|AbstractAzureScaleTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestAzureHugeFiles
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|scaleTestDir
specifier|private
name|Path
name|scaleTestDir
decl_stmt|;
DECL|field|hugefile
specifier|private
name|Path
name|hugefile
decl_stmt|;
DECL|field|hugefileRenamed
specifier|private
name|Path
name|hugefileRenamed
decl_stmt|;
DECL|field|testAccountForCleanup
specifier|private
name|AzureBlobStorageTestAccount
name|testAccountForCleanup
decl_stmt|;
DECL|field|UPLOAD_BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|int
name|UPLOAD_BLOCKSIZE
init|=
literal|64
operator|*
name|S_1K
decl_stmt|;
DECL|field|SOURCE_DATA
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|SOURCE_DATA
decl_stmt|;
static|static
block|{
name|SOURCE_DATA
operator|=
name|dataset
argument_list|(
name|UPLOAD_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|S_256
argument_list|)
expr_stmt|;
block|}
DECL|field|testPath
specifier|private
name|Path
name|testPath
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|testPath
operator|=
name|path
argument_list|(
literal|"ITestAzureHugeFiles"
argument_list|)
expr_stmt|;
name|scaleTestDir
operator|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"scale"
argument_list|)
expr_stmt|;
name|hugefile
operator|=
operator|new
name|Path
argument_list|(
name|scaleTestDir
argument_list|,
literal|"hugefile"
argument_list|)
expr_stmt|;
name|hugefileRenamed
operator|=
operator|new
name|Path
argument_list|(
name|scaleTestDir
argument_list|,
literal|"hugefileRenamed"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Only clean up the test account (and delete the container) if the account    * is set in the field {@code testAccountForCleanup}.    * @throws Exception    */
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|testAccountForCleanup
operator|!=
literal|null
condition|)
block|{
name|cleanupTestAccount
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|"testazurehugefiles"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
argument_list|,
name|createConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Stop the test-case teardown from deleting the test path.    * @throws IOException never    */
DECL|method|deleteTestDirInTeardown ()
specifier|protected
name|void
name|deleteTestDirInTeardown
parameter_list|()
throws|throws
name|IOException
block|{
comment|// this is a no-op, so the test file is preserved.
comment|// the last test in the suite does the teardown
block|}
DECL|method|deleteHugeFile ()
specifier|protected
name|void
name|deleteHugeFile
parameter_list|()
throws|throws
name|IOException
block|{
name|describe
argument_list|(
literal|"Deleting %s"
argument_list|,
name|hugefile
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|hugefile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|timer
operator|.
name|end
argument_list|(
literal|"time to delete %s"
argument_list|,
name|hugefile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Log how long an IOP took, by dividing the total time by the    * count of operations, printing in a human-readable form.    * @param operation operation being measured    * @param timer timing data    * @param count IOP count.    */
DECL|method|logTimePerIOP (String operation, ContractTestUtils.NanoTimer timer, long count)
specifier|protected
name|void
name|logTimePerIOP
parameter_list|(
name|String
name|operation
parameter_list|,
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per {}: {} nS"
argument_list|,
name|operation
argument_list|,
name|toHuman
argument_list|(
name|timer
operator|.
name|duration
argument_list|()
operator|/
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assume that the huge file exists, skip if not/empty.    * @return the file status    * @throws IOException IO failure    */
DECL|method|assumeHugeFileExists ()
name|FileStatus
name|assumeHugeFileExists
parameter_list|()
throws|throws
name|IOException
block|{
name|assertPathExists
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
literal|"huge file not created"
argument_list|,
name|hugefile
argument_list|)
expr_stmt|;
try|try
block|{
name|FileStatus
name|status
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|hugefile
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Not a file: "
operator|+
name|status
argument_list|,
name|status
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"File "
operator|+
name|hugefile
operator|+
literal|" is empty"
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|skip
argument_list|(
literal|"huge file not created: "
operator|+
name|hugefile
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * If/when {@link NativeAzureFileSystem#getStorageStatistics()} returns    * statistics, this will be interesting.    */
DECL|method|logFSState ()
specifier|private
name|void
name|logFSState
parameter_list|()
block|{
name|StorageStatistics
name|statistics
init|=
name|getFileSystem
argument_list|()
operator|.
name|getStorageStatistics
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|StorageStatistics
operator|.
name|LongStatistic
argument_list|>
name|longStatistics
init|=
name|statistics
operator|.
name|getLongStatistics
argument_list|()
decl_stmt|;
while|while
condition|(
name|longStatistics
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|StorageStatistics
operator|.
name|LongStatistic
name|next
init|=
name|longStatistics
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} = {}"
argument_list|,
name|next
operator|.
name|getName
argument_list|()
argument_list|,
name|next
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|test_010_CreateHugeFile ()
specifier|public
name|void
name|test_010_CreateHugeFile
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|filesize
init|=
name|getTestPropertyBytes
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|KEY_HUGE_FILESIZE
argument_list|,
name|DEFAULT_HUGE_FILESIZE
argument_list|)
decl_stmt|;
name|long
name|filesizeMB
init|=
name|filesize
operator|/
name|S_1M
decl_stmt|;
comment|// clean up from any previous attempts
name|deleteHugeFile
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Creating file %s of size %d MB"
argument_list|,
name|hugefile
argument_list|,
name|filesizeMB
argument_list|)
expr_stmt|;
comment|// now do a check of available upload time, with a pessimistic bandwidth
comment|// (that of remote upload tests). If the test times out then not only is
comment|// the test outcome lost, as the follow-on tests continue, they will
comment|// overlap with the ongoing upload test, for much confusion.
comment|/*     int timeout = getTestTimeoutSeconds();     // assume 1 MB/s upload bandwidth     int bandwidth = _1MB;     long uploadTime = filesize / bandwidth;     assertTrue(String.format("Timeout set in %s seconds is too low;" +             " estimating upload time of %d seconds at 1 MB/s." +             " Rerun tests with -D%s=%d",         timeout, uploadTime, KEY_TEST_TIMEOUT, uploadTime * 2),         uploadTime< timeout); */
name|assertEquals
argument_list|(
literal|"File size set in "
operator|+
name|KEY_HUGE_FILESIZE
operator|+
literal|" = "
operator|+
name|filesize
operator|+
literal|" is not a multiple of "
operator|+
name|UPLOAD_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|filesize
operator|%
name|UPLOAD_BLOCKSIZE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|SOURCE_DATA
decl_stmt|;
name|long
name|blocks
init|=
name|filesize
operator|/
name|UPLOAD_BLOCKSIZE
decl_stmt|;
name|long
name|blocksPerMB
init|=
name|S_1M
operator|/
name|UPLOAD_BLOCKSIZE
decl_stmt|;
comment|// perform the upload.
comment|// there's lots of logging here, so that a tail -f on the output log
comment|// can give a view of what is happening.
name|NativeAzureFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|long
name|blocksPer10MB
init|=
name|blocksPerMB
operator|*
literal|10
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|hugefile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|hugefile
argument_list|,
literal|true
argument_list|,
name|UPLOAD_BLOCKSIZE
argument_list|,
literal|null
argument_list|)
init|)
block|{
for|for
control|(
name|long
name|block
init|=
literal|1
init|;
name|block
operator|<=
name|blocks
condition|;
name|block
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|long
name|written
init|=
name|block
operator|*
name|UPLOAD_BLOCKSIZE
decl_stmt|;
comment|// every 10 MB and on file upload @ 100%, print some stats
if|if
condition|(
name|block
operator|%
name|blocksPer10MB
operator|==
literal|0
operator|||
name|written
operator|==
name|filesize
condition|)
block|{
name|long
name|percentage
init|=
name|written
operator|*
literal|100
operator|/
name|filesize
decl_stmt|;
name|double
name|elapsedTime
init|=
name|timer
operator|.
name|elapsedTime
argument_list|()
operator|/
name|NANOSEC
decl_stmt|;
name|double
name|writtenMB
init|=
literal|1.0
operator|*
name|written
operator|/
name|S_1M
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"[%02d%%] Buffered %.2f MB out of %d MB;"
operator|+
literal|" elapsedTime=%.2fs; write to buffer bandwidth=%.2f MB/s"
argument_list|,
name|percentage
argument_list|,
name|writtenMB
argument_list|,
name|filesizeMB
argument_list|,
name|elapsedTime
argument_list|,
name|writtenMB
operator|/
name|elapsedTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now close the file
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing stream {}"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|closeTimer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|closeTimer
operator|.
name|end
argument_list|(
literal|"time to close() output stream"
argument_list|)
expr_stmt|;
block|}
name|timer
operator|.
name|end
argument_list|(
literal|"time to write %d MB in blocks of %d"
argument_list|,
name|filesizeMB
argument_list|,
name|UPLOAD_BLOCKSIZE
argument_list|)
expr_stmt|;
name|logFSState
argument_list|()
expr_stmt|;
name|bandwidth
argument_list|(
name|timer
argument_list|,
name|filesize
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"Huge file"
argument_list|,
name|hugefile
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hugefile
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|assertIsFile
argument_list|(
name|hugefile
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File size in "
operator|+
name|status
argument_list|,
name|filesize
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_040_PositionedReadHugeFile ()
specifier|public
name|void
name|test_040_PositionedReadHugeFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Positioned reads of file %s"
argument_list|,
name|hugefile
argument_list|)
expr_stmt|;
name|NativeAzureFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hugefile
argument_list|)
decl_stmt|;
name|long
name|filesize
init|=
name|status
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|int
name|ops
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|bufferSize
init|=
literal|8192
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|long
name|eof
init|=
name|filesize
operator|-
literal|1
decl_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|readAtByte0
decl_stmt|,
name|readAtByte0Again
decl_stmt|,
name|readAtEOF
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|openDataFile
argument_list|()
init|)
block|{
name|readAtByte0
operator|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|readAtByte0
operator|.
name|end
argument_list|(
literal|"time to read data at start of file"
argument_list|)
expr_stmt|;
name|ops
operator|++
expr_stmt|;
name|readAtEOF
operator|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|eof
operator|-
name|bufferSize
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|readAtEOF
operator|.
name|end
argument_list|(
literal|"time to read data at end of file"
argument_list|)
expr_stmt|;
name|ops
operator|++
expr_stmt|;
name|readAtByte0Again
operator|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|readAtByte0Again
operator|.
name|end
argument_list|(
literal|"time to read data at start of file again"
argument_list|)
expr_stmt|;
name|ops
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Final stream state: {}"
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|long
name|mb
init|=
name|Math
operator|.
name|max
argument_list|(
name|filesize
operator|/
name|S_1M
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|logFSState
argument_list|()
expr_stmt|;
name|timer
operator|.
name|end
argument_list|(
literal|"time to performed positioned reads of %d MB "
argument_list|,
name|mb
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per positioned read = {} nS"
argument_list|,
name|toHuman
argument_list|(
name|timer
operator|.
name|nanosPerOperation
argument_list|(
name|ops
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|openDataFile ()
specifier|protected
name|FSDataInputStream
name|openDataFile
parameter_list|()
throws|throws
name|IOException
block|{
name|NanoTimer
name|openTimer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|inputStream
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|hugefile
argument_list|,
name|UPLOAD_BLOCKSIZE
argument_list|)
decl_stmt|;
name|openTimer
operator|.
name|end
argument_list|(
literal|"open data file"
argument_list|)
expr_stmt|;
return|return
name|inputStream
return|;
block|}
comment|/**    * Work out the bandwidth in bytes/second.    * @param timer timer measuring the duration    * @param bytes bytes    * @return the number of bytes/second of the recorded operation    */
DECL|method|bandwidthInBytes (NanoTimer timer, long bytes)
specifier|public
specifier|static
name|double
name|bandwidthInBytes
parameter_list|(
name|NanoTimer
name|timer
parameter_list|,
name|long
name|bytes
parameter_list|)
block|{
return|return
name|bytes
operator|*
name|NANOSEC
operator|/
name|timer
operator|.
name|duration
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|test_050_readHugeFile ()
specifier|public
name|void
name|test_050_readHugeFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"Reading %s"
argument_list|,
name|hugefile
argument_list|)
expr_stmt|;
name|NativeAzureFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hugefile
argument_list|)
decl_stmt|;
name|long
name|filesize
init|=
name|status
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|long
name|blocks
init|=
name|filesize
operator|/
name|UPLOAD_BLOCKSIZE
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|UPLOAD_BLOCKSIZE
index|]
decl_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|openDataFile
argument_list|()
init|)
block|{
for|for
control|(
name|long
name|block
init|=
literal|0
init|;
name|block
operator|<
name|blocks
condition|;
name|block
operator|++
control|)
block|{
name|in
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Final stream state: {}"
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|long
name|mb
init|=
name|Math
operator|.
name|max
argument_list|(
name|filesize
operator|/
name|S_1M
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|timer
operator|.
name|end
argument_list|(
literal|"time to read file of %d MB "
argument_list|,
name|mb
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per MB to read = {} nS"
argument_list|,
name|toHuman
argument_list|(
name|timer
operator|.
name|nanosPerOperation
argument_list|(
name|mb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bandwidth
argument_list|(
name|timer
argument_list|,
name|filesize
argument_list|)
expr_stmt|;
name|logFSState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_060_openAndReadWholeFileBlocks ()
specifier|public
name|void
name|test_060_openAndReadWholeFileBlocks
parameter_list|()
throws|throws
name|Throwable
block|{
name|FileStatus
name|status
init|=
name|assumeHugeFileExists
argument_list|()
decl_stmt|;
name|int
name|blockSize
init|=
name|S_1M
decl_stmt|;
name|describe
argument_list|(
literal|"Open the test file and read it in blocks of size %d"
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|status
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|openDataFile
argument_list|()
decl_stmt|;
name|NanoTimer
name|timer2
init|=
literal|null
decl_stmt|;
name|long
name|blockCount
init|=
literal|0
decl_stmt|;
name|long
name|totalToRead
init|=
literal|0
decl_stmt|;
name|int
name|resetCount
init|=
literal|0
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|block
init|=
operator|new
name|byte
index|[
name|blockSize
index|]
decl_stmt|;
name|timer2
operator|=
operator|new
name|NanoTimer
argument_list|()
expr_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
comment|// implicitly rounding down here
name|blockCount
operator|=
name|len
operator|/
name|blockSize
expr_stmt|;
name|totalToRead
operator|=
name|blockCount
operator|*
name|blockSize
expr_stmt|;
name|long
name|minimumBandwidth
init|=
name|S_128K
decl_stmt|;
name|int
name|maxResetCount
init|=
literal|4
decl_stmt|;
name|resetCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|remaining
init|=
name|blockSize
decl_stmt|;
name|long
name|blockId
init|=
name|i
operator|+
literal|1
decl_stmt|;
name|NanoTimer
name|blockTimer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|int
name|reads
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|NanoTimer
name|readTimer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|block
argument_list|,
name|offset
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|reads
operator|++
expr_stmt|;
if|if
condition|(
name|bytesRead
operator|==
literal|1
condition|)
block|{
break|break;
block|}
name|remaining
operator|-=
name|bytesRead
expr_stmt|;
name|offset
operator|+=
name|bytesRead
expr_stmt|;
name|count
operator|+=
name|bytesRead
expr_stmt|;
name|readTimer
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|bytesRead
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bytes in read #{}: {} , block bytes: {},"
operator|+
literal|" remaining in block: {}"
operator|+
literal|" duration={} nS; ns/byte: {}, bandwidth={} MB/s"
argument_list|,
name|reads
argument_list|,
name|bytesRead
argument_list|,
name|blockSize
operator|-
name|remaining
argument_list|,
name|remaining
argument_list|,
name|readTimer
operator|.
name|duration
argument_list|()
argument_list|,
name|readTimer
operator|.
name|nanosPerOperation
argument_list|(
name|bytesRead
argument_list|)
argument_list|,
name|readTimer
operator|.
name|bandwidthDescription
argument_list|(
name|bytesRead
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"0 bytes returned by read() operation #{}"
argument_list|,
name|reads
argument_list|)
expr_stmt|;
block|}
block|}
name|blockTimer
operator|.
name|end
argument_list|(
literal|"Reading block %d in %d reads"
argument_list|,
name|blockId
argument_list|,
name|reads
argument_list|)
expr_stmt|;
name|String
name|bw
init|=
name|blockTimer
operator|.
name|bandwidthDescription
argument_list|(
name|blockSize
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bandwidth of block {}: {} MB/s: "
argument_list|,
name|blockId
argument_list|,
name|bw
argument_list|)
expr_stmt|;
if|if
condition|(
name|bandwidthInBytes
argument_list|(
name|blockTimer
argument_list|,
name|blockSize
argument_list|)
operator|<
name|minimumBandwidth
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bandwidth {} too low on block {}: resetting connection"
argument_list|,
name|bw
argument_list|,
name|blockId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Bandwidth of "
operator|+
name|bw
operator|+
literal|" too low after "
operator|+
name|resetCount
operator|+
literal|" attempts"
argument_list|,
name|resetCount
operator|<=
name|maxResetCount
argument_list|)
expr_stmt|;
name|resetCount
operator|++
expr_stmt|;
comment|// reset the connection
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|timer2
operator|.
name|end
argument_list|(
literal|"Time to read %d bytes in %d blocks"
argument_list|,
name|totalToRead
argument_list|,
name|blockCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Overall Bandwidth {} MB/s; reset connections {}"
argument_list|,
name|timer2
operator|.
name|bandwidth
argument_list|(
name|totalToRead
argument_list|)
argument_list|,
name|resetCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_100_renameHugeFile ()
specifier|public
name|void
name|test_100_renameHugeFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
name|describe
argument_list|(
literal|"renaming %s to %s"
argument_list|,
name|hugefile
argument_list|,
name|hugefileRenamed
argument_list|)
expr_stmt|;
name|NativeAzureFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hugefile
argument_list|)
decl_stmt|;
name|long
name|filesize
init|=
name|status
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|hugefileRenamed
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|hugefile
argument_list|,
name|hugefileRenamed
argument_list|)
expr_stmt|;
name|long
name|mb
init|=
name|Math
operator|.
name|max
argument_list|(
name|filesize
operator|/
name|S_1M
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|timer
operator|.
name|end
argument_list|(
literal|"time to rename file of %d MB"
argument_list|,
name|mb
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per MB to rename = {} nS"
argument_list|,
name|toHuman
argument_list|(
name|timer
operator|.
name|nanosPerOperation
argument_list|(
name|mb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bandwidth
argument_list|(
name|timer
argument_list|,
name|filesize
argument_list|)
expr_stmt|;
name|logFSState
argument_list|()
expr_stmt|;
name|FileStatus
name|destFileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hugefileRenamed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|filesize
argument_list|,
name|destFileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// rename back
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer2
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|hugefileRenamed
argument_list|,
name|hugefile
argument_list|)
expr_stmt|;
name|timer2
operator|.
name|end
argument_list|(
literal|"Renaming back"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time per MB to rename = {} nS"
argument_list|,
name|toHuman
argument_list|(
name|timer2
operator|.
name|nanosPerOperation
argument_list|(
name|mb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bandwidth
argument_list|(
name|timer2
argument_list|,
name|filesize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_999_deleteHugeFiles ()
specifier|public
name|void
name|test_999_deleteHugeFiles
parameter_list|()
throws|throws
name|IOException
block|{
comment|// mark the test account for cleanup after this test
name|testAccountForCleanup
operator|=
name|testAccount
expr_stmt|;
name|deleteHugeFile
argument_list|()
expr_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer2
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|NativeAzureFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|hugefileRenamed
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|timer2
operator|.
name|end
argument_list|(
literal|"time to delete %s"
argument_list|,
name|hugefileRenamed
argument_list|)
expr_stmt|;
name|rm
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"deleted huge file"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

