begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|AbfsRestOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|services
operator|.
name|AzureServiceErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AuthType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_DATA_CONTRIBUTOR_CLIENT_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_DATA_CONTRIBUTOR_CLIENT_SECRET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_DATA_READER_CLIENT_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_DATA_READER_CLIENT_SECRET
import|;
end_import

begin_comment
comment|/**  * Test Azure Oauth with Blob Data contributor role and Blob Data Reader role.  * The Test AAD client need to be configured manually through Azure Portal, then save their properties in  * configuration files.  */
end_comment

begin_class
DECL|class|ITestAzureBlobFileSystemOauth
specifier|public
class|class
name|ITestAzureBlobFileSystemOauth
extends|extends
name|AbstractAbfsIntegrationTest
block|{
DECL|field|FILE_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|FILE_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/testFile"
argument_list|)
decl_stmt|;
DECL|field|EXISTED_FILE_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|EXISTED_FILE_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/existedFile"
argument_list|)
decl_stmt|;
DECL|field|EXISTED_FOLDER_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|EXISTED_FOLDER_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/existedFolder"
argument_list|)
decl_stmt|;
DECL|method|ITestAzureBlobFileSystemOauth ()
specifier|public
name|ITestAzureBlobFileSystemOauth
parameter_list|()
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|this
operator|.
name|getAuthType
argument_list|()
operator|==
name|AuthType
operator|.
name|OAuth
argument_list|)
expr_stmt|;
block|}
comment|/*   * BLOB DATA CONTRIBUTOR should have full access to the container and blobs in the container.   * */
annotation|@
name|Test
DECL|method|testBlobDataContributor ()
specifier|public
name|void
name|testBlobDataContributor
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|clientId
init|=
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_DATA_CONTRIBUTOR_CLIENT_ID
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Contributor client id not provided"
argument_list|,
name|clientId
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|secret
init|=
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_DATA_CONTRIBUTOR_CLIENT_SECRET
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Contributor client secret not provided"
argument_list|,
name|secret
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|prepareFiles
argument_list|()
expr_stmt|;
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|getBlobConributor
argument_list|()
decl_stmt|;
comment|// create and write into file in current container/fs
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|FILE_PATH
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|FILE_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|FILE_PATH
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete file
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|FILE_PATH
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|FILE_PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify Blob Data Contributor has full access to existed folder, file
comment|// READ FOLDER
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|EXISTED_FOLDER_PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|//DELETE FOLDER
name|fs
operator|.
name|delete
argument_list|(
name|EXISTED_FOLDER_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|EXISTED_FOLDER_PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|// READ FILE
try|try
init|(
name|FSDataInputStream
name|stream
init|=
name|fs
operator|.
name|open
argument_list|(
name|EXISTED_FILE_PATH
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|stream
operator|.
name|read
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|EXISTED_FILE_PATH
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// WRITE FILE
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|append
argument_list|(
name|EXISTED_FILE_PATH
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|EXISTED_FILE_PATH
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// REMOVE FILE
name|fs
operator|.
name|delete
argument_list|(
name|EXISTED_FILE_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|EXISTED_FILE_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * BLOB DATA READER should have only READ access to the container and blobs in the container.    * */
annotation|@
name|Test
DECL|method|testBlobDataReader ()
specifier|public
name|void
name|testBlobDataReader
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|clientId
init|=
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_DATA_READER_CLIENT_ID
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Reader client id not provided"
argument_list|,
name|clientId
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|secret
init|=
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_DATA_READER_CLIENT_SECRET
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Reader client secret not provided"
argument_list|,
name|secret
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|prepareFiles
argument_list|()
expr_stmt|;
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|getBlobReader
argument_list|()
decl_stmt|;
comment|// Use abfsStore in this test to verify the  ERROR code in AbfsRestOperationException
name|AzureBlobFileSystemStore
name|abfsStore
init|=
name|fs
operator|.
name|getAbfsStore
argument_list|()
decl_stmt|;
comment|// TEST READ FS
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|abfsStore
operator|.
name|getFilesystemProperties
argument_list|()
decl_stmt|;
comment|// TEST READ FOLDER
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|EXISTED_FOLDER_PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|// TEST DELETE FOLDER
try|try
block|{
name|abfsStore
operator|.
name|delete
argument_list|(
name|EXISTED_FOLDER_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbfsRestOperationException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|AzureServiceErrorCode
operator|.
name|AUTHORIZATION_PERMISSION_MISS_MATCH
argument_list|,
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TEST READ  FILE
try|try
init|(
name|InputStream
name|inputStream
init|=
name|abfsStore
operator|.
name|openFileForRead
argument_list|(
name|EXISTED_FILE_PATH
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|inputStream
operator|.
name|read
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// TEST WRITE FILE
try|try
block|{
name|abfsStore
operator|.
name|openFileForWrite
argument_list|(
name|EXISTED_FILE_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbfsRestOperationException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|AzureServiceErrorCode
operator|.
name|AUTHORIZATION_PERMISSION_MISS_MATCH
argument_list|,
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareFiles ()
specifier|private
name|void
name|prepareFiles
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create test files/folders to verify access control diff between
comment|// Blob data contributor and Blob data reader
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|EXISTED_FILE_PATH
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|EXISTED_FILE_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|EXISTED_FOLDER_PATH
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|EXISTED_FOLDER_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlobConributor ()
specifier|private
name|AzureBlobFileSystem
name|getBlobConributor
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|this
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID
operator|+
name|this
operator|.
name|getAccountName
argument_list|()
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|FS_AZURE_BLOB_DATA_CONTRIBUTOR_CLIENT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET
operator|+
name|this
operator|.
name|getAccountName
argument_list|()
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|FS_AZURE_BLOB_DATA_CONTRIBUTOR_CLIENT_SECRET
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|getFileSystem
argument_list|(
name|configuration
argument_list|)
return|;
block|}
DECL|method|getBlobReader ()
specifier|private
name|AzureBlobFileSystem
name|getBlobReader
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|this
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_ID
operator|+
name|this
operator|.
name|getAccountName
argument_list|()
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|FS_AZURE_BLOB_DATA_READER_CLIENT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|FS_AZURE_ACCOUNT_OAUTH_CLIENT_SECRET
operator|+
name|this
operator|.
name|getAccountName
argument_list|()
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|FS_AZURE_BLOB_DATA_READER_CLIENT_SECRET
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|getFileSystem
argument_list|(
name|configuration
argument_list|)
return|;
block|}
block|}
end_class

end_unit

