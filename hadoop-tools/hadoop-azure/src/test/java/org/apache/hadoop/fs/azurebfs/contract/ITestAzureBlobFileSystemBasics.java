begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemContractBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Basic Contract test for Azure BlobFileSystem.  */
end_comment

begin_class
DECL|class|ITestAzureBlobFileSystemBasics
specifier|public
class|class
name|ITestAzureBlobFileSystemBasics
extends|extends
name|FileSystemContractBaseTest
block|{
DECL|field|dependencyInjectedContractTest
specifier|private
specifier|final
name|DependencyInjectedContractTest
name|dependencyInjectedContractTest
decl_stmt|;
DECL|method|ITestAzureBlobFileSystemBasics ()
specifier|public
name|ITestAzureBlobFileSystemBasics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// If all contract tests are running in parallel, some root level tests in FileSystemContractBaseTest will fail
comment|// due to the race condition. Hence for this contract test it should be tested in different container
name|dependencyInjectedContractTest
operator|=
operator|new
name|DependencyInjectedContractTest
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|dependencyInjectedContractTest
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|fs
operator|=
name|this
operator|.
name|dependencyInjectedContractTest
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|testCleanup ()
specifier|public
name|void
name|testCleanup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This contract test is not using existing container for test,
comment|// instead it creates its own temp container for test, hence we need to destroy
comment|// it after the test.
name|this
operator|.
name|dependencyInjectedContractTest
operator|.
name|testCleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListOnFolderWithNoChildren ()
specifier|public
name|void
name|testListOnFolderWithNoChildren
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|(
literal|"testListStatus/c/1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|paths
decl_stmt|;
name|paths
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|(
literal|"testListStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ListStatus on folder with child
name|paths
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|(
literal|"testListStatus/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Remove the child and listStatus
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|(
literal|"testListStatus/c/1"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|paths
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|(
literal|"testListStatus/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|(
literal|"testListStatus"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListOnfileAndFolder ()
specifier|public
name|void
name|testListOnfileAndFolder
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|folderPath
init|=
name|path
argument_list|(
literal|"testListStatus/folder"
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
name|path
argument_list|(
literal|"testListStatus/file"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|folderPath
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|listFolderStatus
decl_stmt|;
name|listFolderStatus
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|(
literal|"testListStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filePath
argument_list|,
name|listFolderStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|//List on file should return absolute path
name|FileStatus
index|[]
name|listFileStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|filePath
argument_list|,
name|listFileStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Ignore
argument_list|(
literal|"Not implemented in ABFS yet"
argument_list|)
DECL|method|testMkdirsWithUmask ()
specifier|public
name|void
name|testMkdirsWithUmask
parameter_list|()
throws|throws
name|Exception
block|{   }
block|}
end_class

end_unit

