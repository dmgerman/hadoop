begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertIsDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertIsFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertMkdirs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertPathExists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertRenameOutcome
import|;
end_import

begin_comment
comment|/**  * Parameterized test of rename operations of unicode paths.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|ITestAzureBlobFileSystemRenameUnicode
specifier|public
class|class
name|ITestAzureBlobFileSystemRenameUnicode
extends|extends
name|AbstractAbfsIntegrationTest
block|{
annotation|@
name|Parameterized
operator|.
name|Parameter
DECL|field|srcDir
specifier|public
name|String
name|srcDir
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|1
argument_list|)
DECL|field|destDir
specifier|public
name|String
name|destDir
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|2
argument_list|)
DECL|field|filename
specifier|public
name|String
name|filename
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|params ()
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"/src"
block|,
literal|"/dest"
block|,
literal|"filename"
block|}
block|,
block|{
literal|"/%2c%26"
block|,
literal|"/abcÃâ123"
block|,
literal|"%2c%27"
block|}
block|,
block|{
literal|"/ÃÃ¡Î â"
block|,
literal|"/abcÃÃ¡Î â123"
block|,
literal|"ä¸­æ"
block|}
block|,
block|{
literal|"/A +B"
block|,
literal|"/B+ C"
block|,
literal|"C +D"
block|}
block|,
block|{
literal|"/A~`!@#$%^&*()-_+={};:'>,<B"
block|,
literal|"/B~`!@#$%^&*()-_+={};:'>,<C"
block|,
literal|"C~`!@#$%^&*()-_+={};:'>,<D"
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|ITestAzureBlobFileSystemRenameUnicode ()
specifier|public
name|ITestAzureBlobFileSystemRenameUnicode
parameter_list|()
block|{   }
comment|/**    * Known issue: ListStatus operation to folders/files whose name contains '?' will fail.    * This is because Auto rest client didn't encode '?' in the uri query parameters    */
annotation|@
name|Test
DECL|method|testRenameFileUsingUnicode ()
specifier|public
name|void
name|testRenameFileUsingUnicode
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|folderPath1
init|=
operator|new
name|Path
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
name|assertMkdirs
argument_list|(
name|fs
argument_list|,
name|folderPath1
argument_list|)
expr_stmt|;
name|assertIsDirectory
argument_list|(
name|fs
argument_list|,
name|folderPath1
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|folderPath1
operator|+
literal|"/"
operator|+
name|filename
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|assertIsFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|Path
name|folderPath2
init|=
operator|new
name|Path
argument_list|(
name|destDir
argument_list|)
decl_stmt|;
name|assertRenameOutcome
argument_list|(
name|fs
argument_list|,
name|folderPath1
argument_list|,
name|folderPath2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"renamed"
argument_list|,
name|folderPath1
argument_list|)
expr_stmt|;
name|assertIsDirectory
argument_list|(
name|fs
argument_list|,
name|folderPath2
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"renamed file"
argument_list|,
operator|new
name|Path
argument_list|(
name|folderPath2
operator|+
literal|"/"
operator|+
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|fileStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|folderPath2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Empty listing returned from listStatus(\""
operator|+
name|folderPath2
operator|+
literal|"\")"
argument_list|,
name|fileStatus
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

