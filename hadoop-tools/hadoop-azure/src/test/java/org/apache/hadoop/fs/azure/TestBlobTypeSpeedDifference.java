begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * A simple benchmark to find out the difference in speed between block  * and page blobs.  */
end_comment

begin_class
DECL|class|TestBlobTypeSpeedDifference
specifier|public
class|class
name|TestBlobTypeSpeedDifference
extends|extends
name|TestCase
block|{
comment|/**    * Writes data to the given stream of the given size, flushing every    * x bytes.    */
DECL|method|writeTestFile (OutputStream writeStream, long size, long flushInterval)
specifier|private
specifier|static
name|void
name|writeTestFile
parameter_list|(
name|OutputStream
name|writeStream
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|flushInterval
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bufferSize
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
literal|1000
argument_list|,
name|flushInterval
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
operator|(
name|byte
operator|)
literal|7
argument_list|)
expr_stmt|;
name|int
name|bytesWritten
init|=
literal|0
decl_stmt|;
name|int
name|bytesUnflushed
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bytesWritten
operator|<
name|size
condition|)
block|{
name|int
name|numberToWrite
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|bufferSize
argument_list|,
name|size
operator|-
name|bytesWritten
argument_list|)
decl_stmt|;
name|writeStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|numberToWrite
argument_list|)
expr_stmt|;
name|bytesWritten
operator|+=
name|numberToWrite
expr_stmt|;
name|bytesUnflushed
operator|+=
name|numberToWrite
expr_stmt|;
if|if
condition|(
name|bytesUnflushed
operator|>=
name|flushInterval
condition|)
block|{
name|writeStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|bytesUnflushed
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
DECL|class|TestResult
specifier|private
specifier|static
class|class
name|TestResult
block|{
DECL|field|timeTakenInMs
specifier|final
name|long
name|timeTakenInMs
decl_stmt|;
DECL|field|totalNumberOfRequests
specifier|final
name|long
name|totalNumberOfRequests
decl_stmt|;
DECL|method|TestResult (long timeTakenInMs, long totalNumberOfRequests)
name|TestResult
parameter_list|(
name|long
name|timeTakenInMs
parameter_list|,
name|long
name|totalNumberOfRequests
parameter_list|)
block|{
name|this
operator|.
name|timeTakenInMs
operator|=
name|timeTakenInMs
expr_stmt|;
name|this
operator|.
name|totalNumberOfRequests
operator|=
name|totalNumberOfRequests
expr_stmt|;
block|}
block|}
comment|/**    * Writes data to the given file of the given size, flushing every    * x bytes. Measure performance of that and return it.    */
DECL|method|writeTestFile (NativeAzureFileSystem fs, Path path, long size, long flushInterval)
specifier|private
specifier|static
name|TestResult
name|writeTestFile
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|flushInterval
parameter_list|)
throws|throws
name|IOException
block|{
name|AzureFileSystemInstrumentation
name|instrumentation
init|=
name|fs
operator|.
name|getInstrumentation
argument_list|()
decl_stmt|;
name|long
name|initialRequests
init|=
name|instrumentation
operator|.
name|getCurrentWebResponses
argument_list|()
decl_stmt|;
name|Date
name|start
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|OutputStream
name|output
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|writeTestFile
argument_list|(
name|output
argument_list|,
name|size
argument_list|,
name|flushInterval
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|finalRequests
init|=
name|instrumentation
operator|.
name|getCurrentWebResponses
argument_list|()
decl_stmt|;
return|return
operator|new
name|TestResult
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
operator|.
name|getTime
argument_list|()
argument_list|,
name|finalRequests
operator|-
name|initialRequests
argument_list|)
return|;
block|}
comment|/**    * Writes data to a block blob of the given size, flushing every    * x bytes. Measure performance of that and return it.    */
DECL|method|writeBlockBlobTestFile (NativeAzureFileSystem fs, long size, long flushInterval)
specifier|private
specifier|static
name|TestResult
name|writeBlockBlobTestFile
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|flushInterval
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeTestFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/blockBlob"
argument_list|)
argument_list|,
name|size
argument_list|,
name|flushInterval
argument_list|)
return|;
block|}
comment|/**    * Writes data to a page blob of the given size, flushing every    * x bytes. Measure performance of that and return it.    */
DECL|method|writePageBlobTestFile (NativeAzureFileSystem fs, long size, long flushInterval)
specifier|private
specifier|static
name|TestResult
name|writePageBlobTestFile
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|flushInterval
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeTestFile
argument_list|(
name|fs
argument_list|,
name|AzureBlobStorageTestAccount
operator|.
name|pageBlobPath
argument_list|(
literal|"pageBlob"
argument_list|)
argument_list|,
name|size
argument_list|,
name|flushInterval
argument_list|)
return|;
block|}
comment|/**    * Runs the benchmark over a small 10 KB file, flushing every 500 bytes.    */
annotation|@
name|Test
DECL|method|testTenKbFileFrequentFlush ()
specifier|public
name|void
name|testTenKbFileFrequentFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|AzureBlobStorageTestAccount
name|testAccount
init|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|testAccount
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|testForSizeAndFlushInterval
argument_list|(
name|testAccount
operator|.
name|getFileSystem
argument_list|()
argument_list|,
literal|10
operator|*
literal|1000
argument_list|,
literal|500
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Runs the benchmark for the given file size and flush frequency.    */
DECL|method|testForSizeAndFlushInterval (NativeAzureFileSystem fs, final long size, final long flushInterval)
specifier|private
specifier|static
name|void
name|testForSizeAndFlushInterval
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
specifier|final
name|long
name|size
parameter_list|,
specifier|final
name|long
name|flushInterval
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|TestResult
name|pageBlobResults
init|=
name|writePageBlobTestFile
argument_list|(
name|fs
argument_list|,
name|size
argument_list|,
name|flushInterval
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Page blob upload took %d ms. Total number of requests: %d.\n"
argument_list|,
name|pageBlobResults
operator|.
name|timeTakenInMs
argument_list|,
name|pageBlobResults
operator|.
name|totalNumberOfRequests
argument_list|)
expr_stmt|;
name|TestResult
name|blockBlobResults
init|=
name|writeBlockBlobTestFile
argument_list|(
name|fs
argument_list|,
name|size
argument_list|,
name|flushInterval
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Block blob upload took %d ms. Total number of requests: %d.\n"
argument_list|,
name|blockBlobResults
operator|.
name|timeTakenInMs
argument_list|,
name|blockBlobResults
operator|.
name|totalNumberOfRequests
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Runs the benchmark for the given file size and flush frequency from the    * command line.    */
DECL|method|main (String argv[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|long
name|size
init|=
literal|10
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
name|long
name|flushInterval
init|=
literal|2000
decl_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|size
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|flushInterval
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|testForSizeAndFlushInterval
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|,
name|size
argument_list|,
name|flushInterval
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

