begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.extensions
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_comment
comment|/**  * A mock Azure Blob File System Authorization Implementation  */
end_comment

begin_class
DECL|class|MockAbfsAuthorizer
specifier|public
class|class
name|MockAbfsAuthorizer
implements|implements
name|AbfsAuthorizer
block|{
DECL|field|TEST_READ_ONLY_FILE_0
specifier|public
specifier|static
specifier|final
name|String
name|TEST_READ_ONLY_FILE_0
init|=
literal|"readOnlyFile0"
decl_stmt|;
DECL|field|TEST_READ_ONLY_FILE_1
specifier|public
specifier|static
specifier|final
name|String
name|TEST_READ_ONLY_FILE_1
init|=
literal|"readOnlyFile1"
decl_stmt|;
DECL|field|TEST_READ_ONLY_FOLDER
specifier|public
specifier|static
specifier|final
name|String
name|TEST_READ_ONLY_FOLDER
init|=
literal|"readOnlyFolder"
decl_stmt|;
DECL|field|TEST_WRITE_ONLY_FILE_0
specifier|public
specifier|static
specifier|final
name|String
name|TEST_WRITE_ONLY_FILE_0
init|=
literal|"writeOnlyFile0"
decl_stmt|;
DECL|field|TEST_WRITE_ONLY_FILE_1
specifier|public
specifier|static
specifier|final
name|String
name|TEST_WRITE_ONLY_FILE_1
init|=
literal|"writeOnlyFile1"
decl_stmt|;
DECL|field|TEST_WRITE_ONLY_FOLDER
specifier|public
specifier|static
specifier|final
name|String
name|TEST_WRITE_ONLY_FOLDER
init|=
literal|"writeOnlyFolder"
decl_stmt|;
DECL|field|TEST_READ_WRITE_FILE_0
specifier|public
specifier|static
specifier|final
name|String
name|TEST_READ_WRITE_FILE_0
init|=
literal|"readWriteFile0"
decl_stmt|;
DECL|field|TEST_READ_WRITE_FILE_1
specifier|public
specifier|static
specifier|final
name|String
name|TEST_READ_WRITE_FILE_1
init|=
literal|"readWriteFile1"
decl_stmt|;
DECL|field|TEST_WRITE_THEN_READ_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|TEST_WRITE_THEN_READ_ONLY
init|=
literal|"writeThenReadOnlyFile"
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|readOnlyPaths
specifier|private
name|Set
argument_list|<
name|Path
argument_list|>
name|readOnlyPaths
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|writeOnlyPaths
specifier|private
name|Set
argument_list|<
name|Path
argument_list|>
name|writeOnlyPaths
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|readWritePaths
specifier|private
name|Set
argument_list|<
name|Path
argument_list|>
name|readWritePaths
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|writeThenReadOnly
specifier|private
name|int
name|writeThenReadOnly
init|=
literal|0
decl_stmt|;
DECL|method|MockAbfsAuthorizer (Configuration conf)
specifier|public
name|MockAbfsAuthorizer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|AbfsAuthorizationException
throws|,
name|IOException
block|{
name|readOnlyPaths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_READ_ONLY_FILE_0
argument_list|)
argument_list|)
expr_stmt|;
name|readOnlyPaths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_READ_ONLY_FILE_1
argument_list|)
argument_list|)
expr_stmt|;
name|readOnlyPaths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_READ_ONLY_FOLDER
argument_list|)
argument_list|)
expr_stmt|;
name|writeOnlyPaths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WRITE_ONLY_FILE_0
argument_list|)
argument_list|)
expr_stmt|;
name|writeOnlyPaths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WRITE_ONLY_FILE_1
argument_list|)
argument_list|)
expr_stmt|;
name|writeOnlyPaths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WRITE_ONLY_FOLDER
argument_list|)
argument_list|)
expr_stmt|;
name|readWritePaths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_READ_WRITE_FILE_0
argument_list|)
argument_list|)
expr_stmt|;
name|readWritePaths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_READ_WRITE_FILE_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isAuthorized (FsAction action, Path... absolutePaths)
specifier|public
name|boolean
name|isAuthorized
parameter_list|(
name|FsAction
name|action
parameter_list|,
name|Path
modifier|...
name|absolutePaths
parameter_list|)
throws|throws
name|AbfsAuthorizationException
throws|,
name|IOException
block|{
name|Set
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|absolutePaths
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
operator|&&
name|Stream
operator|.
name|concat
argument_list|(
name|readOnlyPaths
operator|.
name|stream
argument_list|()
argument_list|,
name|readWritePaths
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
operator|.
name|containsAll
argument_list|(
name|paths
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
operator|&&
name|paths
operator|.
name|contains
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WRITE_THEN_READ_ONLY
argument_list|)
argument_list|)
operator|&&
name|writeThenReadOnly
operator|==
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
operator|&&
name|Stream
operator|.
name|concat
argument_list|(
name|writeOnlyPaths
operator|.
name|stream
argument_list|()
argument_list|,
name|readWritePaths
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
operator|.
name|containsAll
argument_list|(
name|paths
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
operator|&&
name|paths
operator|.
name|contains
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WRITE_THEN_READ_ONLY
argument_list|)
argument_list|)
operator|&&
name|writeThenReadOnly
operator|==
literal|0
condition|)
block|{
name|writeThenReadOnly
operator|=
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|action
operator|.
name|equals
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
operator|&&
name|readWritePaths
operator|.
name|containsAll
argument_list|(
name|paths
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

