begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|AzureBlobFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|DependencyInjectedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|FileSystemConfigurations
operator|.
name|MIN_BUFFER_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|FileSystemConfigurations
operator|.
name|DEFAULT_READ_BUFFER_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|FileSystemConfigurations
operator|.
name|MAX_BUFFER_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_comment
comment|/**  * Test read, write and seek.  */
end_comment

begin_class
DECL|class|ITestReadWriteAndSeek
specifier|public
class|class
name|ITestReadWriteAndSeek
extends|extends
name|DependencyInjectedTest
block|{
DECL|field|TEST_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
DECL|method|ITestReadWriteAndSeek ()
specifier|public
name|ITestReadWriteAndSeek
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadAndWriteWithDifferentBufferSizesAndSeek ()
specifier|public
name|void
name|testReadAndWriteWithDifferentBufferSizesAndSeek
parameter_list|()
throws|throws
name|Exception
block|{
name|testReadWriteAndSeek
argument_list|(
name|MIN_BUFFER_SIZE
argument_list|)
expr_stmt|;
name|testReadWriteAndSeek
argument_list|(
name|DEFAULT_READ_BUFFER_SIZE
argument_list|)
expr_stmt|;
name|testReadWriteAndSeek
argument_list|(
name|MAX_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadWriteAndSeek (int bufferSize)
specifier|private
name|void
name|testReadWriteAndSeek
parameter_list|(
name|int
name|bufferSize
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|AbfsConfiguration
name|abfsConfiguration
init|=
operator|new
name|AbfsConfiguration
argument_list|(
name|this
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|abfsConfiguration
operator|.
name|setWriteBufferSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|abfsConfiguration
operator|.
name|setReadBufferSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
specifier|final
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|bufferSize
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|r
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|bufferSize
index|]
decl_stmt|;
specifier|final
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|r
argument_list|,
name|bufferSize
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|r
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

