begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|InvalidConfigurationValueException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests correct precedence of various configurations that might be returned.  * Configuration can be specified with the account name as a suffix to the  * config key, or without one. Account-specific values should be returned  * whenever they exist. Account-agnostic values are returned if they do not.  * Default values are returned if neither exists.  *  * These tests are in 2 main groups: tests of methods that allow default values  * (such as get and getPasswordString) are of one form, while tests of methods  * that do allow default values (all others) follow another form.  */
end_comment

begin_class
DECL|class|TestAccountConfiguration
specifier|public
class|class
name|TestAccountConfiguration
block|{
annotation|@
name|Test
DECL|method|testStringPrecedence ()
specifier|public
name|void
name|testStringPrecedence
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|IOException
throws|,
name|InvalidConfigurationValueException
block|{
name|AbfsConfiguration
name|abfsConf
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|accountName1
init|=
literal|"account1"
decl_stmt|;
specifier|final
name|String
name|accountName2
init|=
literal|"account2"
decl_stmt|;
specifier|final
name|String
name|accountName3
init|=
literal|"account3"
decl_stmt|;
specifier|final
name|String
name|globalKey
init|=
literal|"fs.azure.configuration"
decl_stmt|;
specifier|final
name|String
name|accountKey1
init|=
name|globalKey
operator|+
literal|"."
operator|+
name|accountName1
decl_stmt|;
specifier|final
name|String
name|accountKey2
init|=
name|globalKey
operator|+
literal|"."
operator|+
name|accountName2
decl_stmt|;
specifier|final
name|String
name|accountKey3
init|=
name|globalKey
operator|+
literal|"."
operator|+
name|accountName3
decl_stmt|;
specifier|final
name|String
name|globalValue
init|=
literal|"global"
decl_stmt|;
specifier|final
name|String
name|accountValue1
init|=
literal|"one"
decl_stmt|;
specifier|final
name|String
name|accountValue2
init|=
literal|"two"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|accountKey1
argument_list|,
name|accountValue1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|accountKey2
argument_list|,
name|accountValue2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|globalKey
argument_list|,
name|globalValue
argument_list|)
expr_stmt|;
name|abfsConf
operator|=
operator|new
name|AbfsConfiguration
argument_list|(
name|conf
argument_list|,
name|accountName1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value returned when account-specific value was requested"
argument_list|,
name|abfsConf
operator|.
name|get
argument_list|(
name|accountKey1
argument_list|)
argument_list|,
name|accountValue1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Account-specific value was not returned when one existed"
argument_list|,
name|abfsConf
operator|.
name|get
argument_list|(
name|globalKey
argument_list|)
argument_list|,
name|accountValue1
argument_list|)
expr_stmt|;
name|abfsConf
operator|=
operator|new
name|AbfsConfiguration
argument_list|(
name|conf
argument_list|,
name|accountName2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value returned when a different account-specific value was requested"
argument_list|,
name|abfsConf
operator|.
name|get
argument_list|(
name|accountKey1
argument_list|)
argument_list|,
name|accountValue1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value returned when account-specific value was requested"
argument_list|,
name|abfsConf
operator|.
name|get
argument_list|(
name|accountKey2
argument_list|)
argument_list|,
name|accountValue2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Account-agnostic value return even though account-specific value was set"
argument_list|,
name|abfsConf
operator|.
name|get
argument_list|(
name|globalKey
argument_list|)
argument_list|,
name|accountValue2
argument_list|)
expr_stmt|;
name|abfsConf
operator|=
operator|new
name|AbfsConfiguration
argument_list|(
name|conf
argument_list|,
name|accountName3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Account-specific value returned when none was set"
argument_list|,
name|abfsConf
operator|.
name|get
argument_list|(
name|accountKey3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Account-agnostic value not returned when no account-specific value was set"
argument_list|,
name|abfsConf
operator|.
name|get
argument_list|(
name|globalKey
argument_list|)
argument_list|,
name|globalValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPasswordPrecedence ()
specifier|public
name|void
name|testPasswordPrecedence
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|IOException
throws|,
name|InvalidConfigurationValueException
block|{
name|AbfsConfiguration
name|abfsConf
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|accountName1
init|=
literal|"account1"
decl_stmt|;
specifier|final
name|String
name|accountName2
init|=
literal|"account2"
decl_stmt|;
specifier|final
name|String
name|accountName3
init|=
literal|"account3"
decl_stmt|;
specifier|final
name|String
name|globalKey
init|=
literal|"fs.azure.password"
decl_stmt|;
specifier|final
name|String
name|accountKey1
init|=
name|globalKey
operator|+
literal|"."
operator|+
name|accountName1
decl_stmt|;
specifier|final
name|String
name|accountKey2
init|=
name|globalKey
operator|+
literal|"."
operator|+
name|accountName2
decl_stmt|;
specifier|final
name|String
name|accountKey3
init|=
name|globalKey
operator|+
literal|"."
operator|+
name|accountName3
decl_stmt|;
specifier|final
name|String
name|globalValue
init|=
literal|"global"
decl_stmt|;
specifier|final
name|String
name|accountValue1
init|=
literal|"one"
decl_stmt|;
specifier|final
name|String
name|accountValue2
init|=
literal|"two"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|accountKey1
argument_list|,
name|accountValue1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|accountKey2
argument_list|,
name|accountValue2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|globalKey
argument_list|,
name|globalValue
argument_list|)
expr_stmt|;
name|abfsConf
operator|=
operator|new
name|AbfsConfiguration
argument_list|(
name|conf
argument_list|,
name|accountName1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value returned when account-specific value was requested"
argument_list|,
name|abfsConf
operator|.
name|getPasswordString
argument_list|(
name|accountKey1
argument_list|)
argument_list|,
name|accountValue1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Account-specific value was not returned when one existed"
argument_list|,
name|abfsConf
operator|.
name|getPasswordString
argument_list|(
name|globalKey
argument_list|)
argument_list|,
name|accountValue1
argument_list|)
expr_stmt|;
name|abfsConf
operator|=
operator|new
name|AbfsConfiguration
argument_list|(
name|conf
argument_list|,
name|accountName2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value returned when a different account-specific value was requested"
argument_list|,
name|abfsConf
operator|.
name|getPasswordString
argument_list|(
name|accountKey1
argument_list|)
argument_list|,
name|accountValue1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value returned when account-specific value was requested"
argument_list|,
name|abfsConf
operator|.
name|getPasswordString
argument_list|(
name|accountKey2
argument_list|)
argument_list|,
name|accountValue2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Account-agnostic value return even though account-specific value was set"
argument_list|,
name|abfsConf
operator|.
name|getPasswordString
argument_list|(
name|globalKey
argument_list|)
argument_list|,
name|accountValue2
argument_list|)
expr_stmt|;
name|abfsConf
operator|=
operator|new
name|AbfsConfiguration
argument_list|(
name|conf
argument_list|,
name|accountName3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Account-specific value returned when none was set"
argument_list|,
name|abfsConf
operator|.
name|getPasswordString
argument_list|(
name|accountKey3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Account-agnostic value not returned when no account-specific value was set"
argument_list|,
name|abfsConf
operator|.
name|getPasswordString
argument_list|(
name|globalKey
argument_list|)
argument_list|,
name|globalValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBooleanPrecedence ()
specifier|public
name|void
name|testBooleanPrecedence
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|IOException
throws|,
name|InvalidConfigurationValueException
block|{
specifier|final
name|String
name|accountName
init|=
literal|"account"
decl_stmt|;
specifier|final
name|String
name|globalKey
init|=
literal|"fs.azure.bool"
decl_stmt|;
specifier|final
name|String
name|accountKey
init|=
name|globalKey
operator|+
literal|"."
operator|+
name|accountName
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|AbfsConfiguration
name|abfsConf
init|=
operator|new
name|AbfsConfiguration
argument_list|(
name|conf
argument_list|,
name|accountName
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|globalKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value returned even though account-agnostic config was set"
argument_list|,
name|abfsConf
operator|.
name|getBoolean
argument_list|(
name|globalKey
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|globalKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value not returned even though config was unset"
argument_list|,
name|abfsConf
operator|.
name|getBoolean
argument_list|(
name|globalKey
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|accountKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value returned even though account-specific config was set"
argument_list|,
name|abfsConf
operator|.
name|getBoolean
argument_list|(
name|globalKey
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|accountKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value not returned even though config was unset"
argument_list|,
name|abfsConf
operator|.
name|getBoolean
argument_list|(
name|globalKey
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|accountKey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|globalKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Account-agnostic or default value returned even though account-specific config was set"
argument_list|,
name|abfsConf
operator|.
name|getBoolean
argument_list|(
name|globalKey
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPrecedence ()
specifier|public
name|void
name|testLongPrecedence
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|IOException
throws|,
name|InvalidConfigurationValueException
block|{
specifier|final
name|String
name|accountName
init|=
literal|"account"
decl_stmt|;
specifier|final
name|String
name|globalKey
init|=
literal|"fs.azure.long"
decl_stmt|;
specifier|final
name|String
name|accountKey
init|=
name|globalKey
operator|+
literal|"."
operator|+
name|accountName
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|AbfsConfiguration
name|abfsConf
init|=
operator|new
name|AbfsConfiguration
argument_list|(
name|conf
argument_list|,
name|accountName
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|globalKey
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value returned even though account-agnostic config was set"
argument_list|,
name|abfsConf
operator|.
name|getLong
argument_list|(
name|globalKey
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|globalKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value not returned even though config was unset"
argument_list|,
name|abfsConf
operator|.
name|getLong
argument_list|(
name|globalKey
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|accountKey
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value returned even though account-specific config was set"
argument_list|,
name|abfsConf
operator|.
name|getLong
argument_list|(
name|globalKey
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|accountKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value not returned even though config was unset"
argument_list|,
name|abfsConf
operator|.
name|getLong
argument_list|(
name|globalKey
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|accountKey
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|globalKey
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Account-agnostic or default value returned even though account-specific config was set"
argument_list|,
name|abfsConf
operator|.
name|getLong
argument_list|(
name|globalKey
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Dummy type used for testing handling of enums in configuration.    */
DECL|enum|GetEnumType
specifier|public
enum|enum
name|GetEnumType
block|{
DECL|enumConstant|TRUE
DECL|enumConstant|FALSE
name|TRUE
block|,
name|FALSE
block|}
annotation|@
name|Test
DECL|method|testEnumPrecedence ()
specifier|public
name|void
name|testEnumPrecedence
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|IOException
throws|,
name|InvalidConfigurationValueException
block|{
specifier|final
name|String
name|accountName
init|=
literal|"account"
decl_stmt|;
specifier|final
name|String
name|globalKey
init|=
literal|"fs.azure.enum"
decl_stmt|;
specifier|final
name|String
name|accountKey
init|=
name|globalKey
operator|+
literal|"."
operator|+
name|accountName
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|AbfsConfiguration
name|abfsConf
init|=
operator|new
name|AbfsConfiguration
argument_list|(
name|conf
argument_list|,
name|accountName
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setEnum
argument_list|(
name|globalKey
argument_list|,
name|GetEnumType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value returned even though account-agnostic config was set"
argument_list|,
name|abfsConf
operator|.
name|getEnum
argument_list|(
name|globalKey
argument_list|,
name|GetEnumType
operator|.
name|TRUE
argument_list|)
argument_list|,
name|GetEnumType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|globalKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value not returned even though config was unset"
argument_list|,
name|abfsConf
operator|.
name|getEnum
argument_list|(
name|globalKey
argument_list|,
name|GetEnumType
operator|.
name|TRUE
argument_list|)
argument_list|,
name|GetEnumType
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setEnum
argument_list|(
name|accountKey
argument_list|,
name|GetEnumType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value returned even though account-specific config was set"
argument_list|,
name|abfsConf
operator|.
name|getEnum
argument_list|(
name|globalKey
argument_list|,
name|GetEnumType
operator|.
name|TRUE
argument_list|)
argument_list|,
name|GetEnumType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|accountKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value not returned even though config was unset"
argument_list|,
name|abfsConf
operator|.
name|getEnum
argument_list|(
name|globalKey
argument_list|,
name|GetEnumType
operator|.
name|TRUE
argument_list|)
argument_list|,
name|GetEnumType
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setEnum
argument_list|(
name|accountKey
argument_list|,
name|GetEnumType
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setEnum
argument_list|(
name|globalKey
argument_list|,
name|GetEnumType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Account-agnostic or default value returned even though account-specific config was set"
argument_list|,
name|abfsConf
operator|.
name|getEnum
argument_list|(
name|globalKey
argument_list|,
name|GetEnumType
operator|.
name|FALSE
argument_list|)
argument_list|,
name|GetEnumType
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Dummy type used for testing handling of classes in configuration.    */
DECL|interface|GetClassInterface
interface|interface
name|GetClassInterface
block|{   }
comment|/**    * Dummy type used for testing handling of classes in configuration.    */
DECL|class|GetClassImpl0
specifier|private
class|class
name|GetClassImpl0
implements|implements
name|GetClassInterface
block|{   }
comment|/**    * Dummy type used for testing handling of classes in configuration.    */
DECL|class|GetClassImpl1
specifier|private
class|class
name|GetClassImpl1
implements|implements
name|GetClassInterface
block|{   }
annotation|@
name|Test
DECL|method|testClassPrecedence ()
specifier|public
name|void
name|testClassPrecedence
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|IOException
throws|,
name|InvalidConfigurationValueException
block|{
specifier|final
name|String
name|accountName
init|=
literal|"account"
decl_stmt|;
specifier|final
name|String
name|globalKey
init|=
literal|"fs.azure.class"
decl_stmt|;
specifier|final
name|String
name|accountKey
init|=
name|globalKey
operator|+
literal|"."
operator|+
name|accountName
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|AbfsConfiguration
name|abfsConf
init|=
operator|new
name|AbfsConfiguration
argument_list|(
name|conf
argument_list|,
name|accountName
argument_list|)
decl_stmt|;
specifier|final
name|Class
name|class0
init|=
name|GetClassImpl0
operator|.
name|class
decl_stmt|;
specifier|final
name|Class
name|class1
init|=
name|GetClassImpl1
operator|.
name|class
decl_stmt|;
specifier|final
name|Class
name|xface
init|=
name|GetClassInterface
operator|.
name|class
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|globalKey
argument_list|,
name|class0
argument_list|,
name|xface
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value returned even though account-agnostic config was set"
argument_list|,
name|abfsConf
operator|.
name|getClass
argument_list|(
name|globalKey
argument_list|,
name|class1
argument_list|,
name|xface
argument_list|)
argument_list|,
name|class0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|globalKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value not returned even though config was unset"
argument_list|,
name|abfsConf
operator|.
name|getClass
argument_list|(
name|globalKey
argument_list|,
name|class1
argument_list|,
name|xface
argument_list|)
argument_list|,
name|class1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|accountKey
argument_list|,
name|class0
argument_list|,
name|xface
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value returned even though account-specific config was set"
argument_list|,
name|abfsConf
operator|.
name|getClass
argument_list|(
name|globalKey
argument_list|,
name|class1
argument_list|,
name|xface
argument_list|)
argument_list|,
name|class0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|accountKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default value not returned even though config was unset"
argument_list|,
name|abfsConf
operator|.
name|getClass
argument_list|(
name|globalKey
argument_list|,
name|class1
argument_list|,
name|xface
argument_list|)
argument_list|,
name|class1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|accountKey
argument_list|,
name|class1
argument_list|,
name|xface
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|globalKey
argument_list|,
name|class0
argument_list|,
name|xface
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Account-agnostic or default value returned even though account-specific config was set"
argument_list|,
name|abfsConf
operator|.
name|getClass
argument_list|(
name|globalKey
argument_list|,
name|class0
argument_list|,
name|xface
argument_list|)
argument_list|,
name|class1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

