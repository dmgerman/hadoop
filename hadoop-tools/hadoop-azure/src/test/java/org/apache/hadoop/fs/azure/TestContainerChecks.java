begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobOutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_comment
comment|/**  * Tests that WASB creates containers only if needed.  */
end_comment

begin_class
DECL|class|TestContainerChecks
specifier|public
class|class
name|TestContainerChecks
block|{
DECL|field|testAccount
specifier|private
name|AzureBlobStorageTestAccount
name|testAccount
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testAccount
operator|!=
literal|null
condition|)
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|testAccount
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testContainerExistAfterDoesNotExist ()
specifier|public
name|void
name|testContainerExistAfterDoesNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|""
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CreateOptions
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
name|CloudBlobContainer
name|container
init|=
name|testAccount
operator|.
name|getRealContainer
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Starting off with the container not there
name|assertFalse
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// A list shouldn't create the container and will set file system store
comment|// state to DoesNotExist
try|try
block|{
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should've thrown."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|ex
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"does not exist."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a container outside of the WASB FileSystem
name|container
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// Add a file to the container outside of the WASB FileSystem
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|BlobOutputStream
name|outputStream
init|=
name|blob
operator|.
name|openOutputStream
argument_list|()
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make sure the file is visible
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerCreateAfterDoesNotExist ()
specifier|public
name|void
name|testContainerCreateAfterDoesNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|""
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CreateOptions
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
name|CloudBlobContainer
name|container
init|=
name|testAccount
operator|.
name|getRealContainer
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Starting off with the container not there
name|assertFalse
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// A list shouldn't create the container and will set file system store
comment|// state to DoesNotExist
try|try
block|{
name|assertNull
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should've thrown."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|ex
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"does not exist."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a container outside of the WASB FileSystem
name|container
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// Write should succeed
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerCreateOnWrite ()
specifier|public
name|void
name|testContainerCreateOnWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|""
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CreateOptions
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
name|CloudBlobContainer
name|container
init|=
name|testAccount
operator|.
name|getRealContainer
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Starting off with the container not there
name|assertFalse
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// A list shouldn't create the container.
try|try
block|{
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should've thrown."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|ex
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"does not exist."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Neither should a read.
try|try
block|{
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Should've thrown."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{     }
name|assertFalse
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Neither should a rename
name|assertFalse
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// But a write should.
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerChecksWithSas ()
specifier|public
name|void
name|testContainerChecksWithSas
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|""
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateOptions
operator|.
name|UseSas
argument_list|)
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
name|CloudBlobContainer
name|container
init|=
name|testAccount
operator|.
name|getRealContainer
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// The container shouldn't be there
name|assertFalse
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// A write should just fail
try|try
block|{
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Should've thrown."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AzureException
name|ex
parameter_list|)
block|{     }
name|assertFalse
argument_list|(
name|container
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

