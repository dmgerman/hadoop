begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlockEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test class that runs WASB block compaction process for block blobs.  */
end_comment

begin_class
DECL|class|TestNativeAzureFileSystemBlockCompaction
specifier|public
class|class
name|TestNativeAzureFileSystemBlockCompaction
extends|extends
name|AbstractWasbTestBase
block|{
DECL|field|TEST_FILE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FILE
init|=
literal|"/user/active/test.dat"
decl_stmt|;
DECL|field|TEST_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
decl_stmt|;
DECL|field|TEST_FILE_NORMAL
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FILE_NORMAL
init|=
literal|"/user/normal/test.dat"
decl_stmt|;
DECL|field|TEST_PATH_NORMAL
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_PATH_NORMAL
init|=
operator|new
name|Path
argument_list|(
name|TEST_FILE_NORMAL
argument_list|)
decl_stmt|;
DECL|field|testAccount
specifier|private
name|AzureBlobStorageTestAccount
name|testAccount
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|testAccount
operator|=
name|createTestAccount
argument_list|()
expr_stmt|;
name|fs
operator|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|NativeAzureFileSystem
operator|.
name|APPEND_SUPPORT_ENABLE_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_BLOCK_BLOB_WITH_COMPACTION_DIRECTORIES
argument_list|,
literal|"/user/active"
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/*    * Helper method that creates test data of size provided by the    * "size" parameter.    */
DECL|method|getTestData (int size)
specifier|private
specifier|static
name|byte
index|[]
name|getTestData
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|testData
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
name|size
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|testData
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|testData
return|;
block|}
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
return|;
block|}
DECL|method|getBlockBlobAppendStream (FSDataOutputStream appendStream)
specifier|private
name|BlockBlobAppendStream
name|getBlockBlobAppendStream
parameter_list|(
name|FSDataOutputStream
name|appendStream
parameter_list|)
block|{
name|SyncableDataOutputStream
name|dataOutputStream
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|appendStream
operator|.
name|getWrappedStream
argument_list|()
operator|instanceof
name|NativeAzureFileSystem
operator|.
name|NativeAzureFsOutputStream
condition|)
block|{
name|NativeAzureFileSystem
operator|.
name|NativeAzureFsOutputStream
name|fsOutputStream
init|=
operator|(
name|NativeAzureFileSystem
operator|.
name|NativeAzureFsOutputStream
operator|)
name|appendStream
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
name|dataOutputStream
operator|=
operator|(
name|SyncableDataOutputStream
operator|)
name|fsOutputStream
operator|.
name|getOutStream
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|appendStream
operator|.
name|getWrappedStream
argument_list|()
operator|instanceof
name|SyncableDataOutputStream
condition|)
block|{
name|dataOutputStream
operator|=
operator|(
name|SyncableDataOutputStream
operator|)
name|appendStream
operator|.
name|getWrappedStream
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Did not recognize "
operator|+
name|dataOutputStream
argument_list|,
name|dataOutputStream
argument_list|)
expr_stmt|;
return|return
operator|(
name|BlockBlobAppendStream
operator|)
name|dataOutputStream
operator|.
name|getOutStream
argument_list|()
return|;
block|}
DECL|method|verifyBlockList (BlockBlobAppendStream blockBlobStream, int[] testData)
specifier|private
name|void
name|verifyBlockList
parameter_list|(
name|BlockBlobAppendStream
name|blockBlobStream
parameter_list|,
name|int
index|[]
name|testData
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|BlockEntry
argument_list|>
name|blockList
init|=
name|blockBlobStream
operator|.
name|getBlockList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Block list length"
argument_list|,
name|testData
operator|.
name|length
argument_list|,
name|blockList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockEntry
name|block
range|:
name|blockList
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|block
operator|.
name|getSize
argument_list|()
operator|==
name|testData
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|appendBlockList (FSDataOutputStream fsStream, ByteArrayOutputStream memStream, int[] testData)
specifier|private
name|void
name|appendBlockList
parameter_list|(
name|FSDataOutputStream
name|fsStream
parameter_list|,
name|ByteArrayOutputStream
name|memStream
parameter_list|,
name|int
index|[]
name|testData
parameter_list|)
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|d
range|:
name|testData
control|)
block|{
name|byte
index|[]
name|data
init|=
name|getTestData
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|memStream
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|fsStream
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|fsStream
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompactionDisabled ()
specifier|public
name|void
name|testCompactionDisabled
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
init|(
name|FSDataOutputStream
name|appendStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_PATH_NORMAL
argument_list|)
init|)
block|{
comment|// testing new file
name|SyncableDataOutputStream
name|dataOutputStream
init|=
literal|null
decl_stmt|;
name|OutputStream
name|wrappedStream
init|=
name|appendStream
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|wrappedStream
operator|instanceof
name|NativeAzureFileSystem
operator|.
name|NativeAzureFsOutputStream
condition|)
block|{
name|NativeAzureFileSystem
operator|.
name|NativeAzureFsOutputStream
name|fsOutputStream
init|=
operator|(
name|NativeAzureFileSystem
operator|.
name|NativeAzureFsOutputStream
operator|)
name|wrappedStream
decl_stmt|;
name|dataOutputStream
operator|=
operator|(
name|SyncableDataOutputStream
operator|)
name|fsOutputStream
operator|.
name|getOutStream
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wrappedStream
operator|instanceof
name|SyncableDataOutputStream
condition|)
block|{
name|dataOutputStream
operator|=
operator|(
name|SyncableDataOutputStream
operator|)
name|wrappedStream
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unable to determine type of "
operator|+
name|wrappedStream
operator|+
literal|" class of "
operator|+
name|wrappedStream
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Data output stream is a BlockBlobAppendStream: "
operator|+
name|dataOutputStream
argument_list|,
name|dataOutputStream
operator|.
name|getOutStream
argument_list|()
operator|instanceof
name|BlockBlobAppendStream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCompaction ()
specifier|public
name|void
name|testCompaction
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|n2
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|n4
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|n10
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|n12
init|=
literal|12
decl_stmt|;
specifier|final
name|int
name|n14
init|=
literal|14
decl_stmt|;
specifier|final
name|int
name|n16
init|=
literal|16
decl_stmt|;
specifier|final
name|int
name|maxBlockSize
init|=
literal|16
decl_stmt|;
specifier|final
name|int
name|compactionBlockCount
init|=
literal|4
decl_stmt|;
name|ByteArrayOutputStream
name|memStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|appendStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_PATH
argument_list|)
init|)
block|{
comment|// test new file
name|BlockBlobAppendStream
name|blockBlobStream
init|=
name|getBlockBlobAppendStream
argument_list|(
name|appendStream
argument_list|)
decl_stmt|;
name|blockBlobStream
operator|.
name|setMaxBlockSize
argument_list|(
name|maxBlockSize
argument_list|)
expr_stmt|;
name|blockBlobStream
operator|.
name|setCompactionBlockCount
argument_list|(
name|compactionBlockCount
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n2
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n2
block|}
argument_list|)
expr_stmt|;
name|appendStream
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n2
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n2
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendStream
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n2
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n2
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n2
block|,
name|n4
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n4
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n2
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n12
block|,
name|n10
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n12
block|,
name|n10
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|,
name|n4
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n12
block|,
name|n14
block|,
name|n16
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|,
name|n4
block|,
name|n4
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n12
block|,
name|n14
block|,
name|n16
block|,
name|n16
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n12
block|,
name|n14
block|,
name|n16
block|,
name|n16
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n12
block|,
name|n14
block|,
name|n16
block|,
name|n16
block|,
name|n4
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n12
block|,
name|n14
block|,
name|n16
block|,
name|n16
block|,
name|n4
block|,
name|n4
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContractTestUtils
operator|.
name|verifyFileContents
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|memStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|FSDataOutputStream
name|appendStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|TEST_PATH
argument_list|)
init|)
block|{
comment|// test existing file
name|BlockBlobAppendStream
name|blockBlobStream
init|=
name|getBlockBlobAppendStream
argument_list|(
name|appendStream
argument_list|)
decl_stmt|;
name|blockBlobStream
operator|.
name|setMaxBlockSize
argument_list|(
name|maxBlockSize
argument_list|)
expr_stmt|;
name|blockBlobStream
operator|.
name|setCompactionBlockCount
argument_list|(
name|compactionBlockCount
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n12
block|,
name|n14
block|,
name|n16
block|,
name|n16
block|,
name|n16
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n12
block|,
name|n14
block|,
name|n16
block|,
name|n16
block|,
name|n16
block|,
name|n4
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n12
block|,
name|n14
block|,
name|n16
block|,
name|n16
block|,
name|n16
block|,
name|n4
block|,
name|n4
block|,
name|n4
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendBlockList
argument_list|(
name|appendStream
argument_list|,
name|memStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n4
block|}
argument_list|)
expr_stmt|;
name|verifyBlockList
argument_list|(
name|blockBlobStream
argument_list|,
operator|new
name|int
index|[]
block|{
name|n14
block|,
name|n12
block|,
name|n14
block|,
name|n16
block|,
name|n16
block|,
name|n16
block|,
name|n16
block|,
name|n4
block|}
argument_list|)
expr_stmt|;
name|appendStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContractTestUtils
operator|.
name|verifyFileContents
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|memStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

