begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AbfsClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|FileSystemUriSchemes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AuthType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_ALWAYS_USE_HTTPS
import|;
end_import

begin_comment
comment|/**  * Parameterized test of ABFS CLIENT URL scheme verification.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|ITestClientUrlScheme
specifier|public
class|class
name|ITestClientUrlScheme
extends|extends
name|AbstractAbfsIntegrationTest
block|{
annotation|@
name|Parameterized
operator|.
name|Parameter
DECL|field|useSecureScheme
specifier|public
name|boolean
name|useSecureScheme
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|1
argument_list|)
DECL|field|alwaysUseHttps
specifier|public
name|boolean
name|alwaysUseHttps
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|params ()
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|false
block|,
literal|false
block|}
block|,
block|{
literal|false
block|,
literal|true
block|}
block|,
block|{
literal|true
block|,
literal|true
block|}
block|,
block|{
literal|true
block|,
literal|false
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|ITestClientUrlScheme ()
specifier|public
name|ITestClientUrlScheme
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|()
expr_stmt|;
comment|// authentication like OAUTH must use HTTPS
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"ITestClientUrlScheme is skipped because auth type is not SharedKey"
argument_list|,
name|getAuthType
argument_list|()
operator|==
name|AuthType
operator|.
name|SharedKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClientUrlScheme ()
specifier|public
name|void
name|testClientUrlScheme
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|urlWithoutScheme
init|=
name|this
operator|.
name|getTestUrl
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|fsUrl
decl_stmt|;
comment|// update filesystem scheme
if|if
condition|(
name|useSecureScheme
condition|)
block|{
name|fsUrl
operator|=
name|FileSystemUriSchemes
operator|.
name|ABFS_SECURE_SCHEME
operator|+
literal|":"
operator|+
name|urlWithoutScheme
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|fsUrl
operator|=
name|FileSystemUriSchemes
operator|.
name|ABFS_SCHEME
operator|+
literal|":"
operator|+
name|urlWithoutScheme
index|[
literal|1
index|]
expr_stmt|;
block|}
name|Configuration
name|config
init|=
name|getRawConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|fsUrl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|FS_AZURE_ALWAYS_USE_HTTPS
argument_list|,
name|alwaysUseHttps
argument_list|)
expr_stmt|;
name|AbfsClient
name|client
init|=
name|this
operator|.
name|getFileSystem
argument_list|(
name|config
argument_list|)
operator|.
name|getAbfsClient
argument_list|()
decl_stmt|;
name|Field
name|baseUrlField
init|=
name|AbfsClient
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"baseUrl"
argument_list|)
decl_stmt|;
name|baseUrlField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|url
init|=
operator|(
operator|(
name|URL
operator|)
name|baseUrlField
operator|.
name|get
argument_list|(
name|client
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// HTTP is enabled only when "abfs://XXX" is used and FS_AZURE_ALWAYS_USE_HTTPS
comment|// is set as false, otherwise HTTPS should be used.
if|if
condition|(
operator|!
name|useSecureScheme
operator|&&
operator|!
name|alwaysUseHttps
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|url
operator|.
name|startsWith
argument_list|(
name|FileSystemUriSchemes
operator|.
name|HTTP_SCHEME
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|url
operator|.
name|startsWith
argument_list|(
name|FileSystemUriSchemes
operator|.
name|HTTPS_SCHEME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

