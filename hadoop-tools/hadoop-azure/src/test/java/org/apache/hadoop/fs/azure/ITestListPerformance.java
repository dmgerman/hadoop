begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|FixMethodOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|MethodSorters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|integration
operator|.
name|AbstractAzureScaleTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|integration
operator|.
name|AzureTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_comment
comment|/**  * Test list performance.  */
end_comment

begin_class
annotation|@
name|FixMethodOrder
argument_list|(
name|MethodSorters
operator|.
name|NAME_ASCENDING
argument_list|)
DECL|class|ITestListPerformance
specifier|public
class|class
name|ITestListPerformance
extends|extends
name|AbstractAzureScaleTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestListPerformance
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_DIR_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"DirectoryWithManyFiles"
argument_list|)
decl_stmt|;
DECL|field|NUMBER_OF_THREADS
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_THREADS
init|=
literal|10
decl_stmt|;
DECL|field|NUMBER_OF_FILES_PER_THREAD
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_FILES_PER_THREAD
init|=
literal|1000
decl_stmt|;
DECL|field|threads
specifier|private
name|int
name|threads
decl_stmt|;
DECL|field|filesPerThread
specifier|private
name|int
name|filesPerThread
decl_stmt|;
DECL|field|expectedFileCount
specifier|private
name|int
name|expectedFileCount
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// fail fast
name|threads
operator|=
name|AzureTestUtils
operator|.
name|getTestPropertyInt
argument_list|(
name|conf
argument_list|,
literal|"fs.azure.scale.test.list.performance.threads"
argument_list|,
name|NUMBER_OF_THREADS
argument_list|)
expr_stmt|;
name|filesPerThread
operator|=
name|AzureTestUtils
operator|.
name|getTestPropertyInt
argument_list|(
name|conf
argument_list|,
literal|"fs.azure.scale.test.list.performance.files"
argument_list|,
name|NUMBER_OF_FILES_PER_THREAD
argument_list|)
expr_stmt|;
name|expectedFileCount
operator|=
name|threads
operator|*
name|filesPerThread
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Thread = {}, Files per Thread = {}, expected files = {}"
argument_list|,
name|threads
argument_list|,
name|filesPerThread
argument_list|,
name|expectedFileCount
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.azure.io.retry.max.retries"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.azure.delete.threads"
argument_list|,
literal|"16"
argument_list|)
expr_stmt|;
name|createTestAccount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|"itestlistperformance"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|test_0101_CreateDirectoryWithFiles ()
specifier|public
name|void
name|test_0101_CreateDirectoryWithFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeFalse
argument_list|(
literal|"Test path exists; skipping"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|TEST_DIR_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threads
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|container
init|=
name|testAccount
operator|.
name|getRealContainer
argument_list|()
decl_stmt|;
specifier|final
name|String
name|basePath
init|=
operator|(
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|TEST_DIR_PATH
operator|+
literal|"/"
operator|)
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|threads
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|TEST_DIR_PATH
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|call
parameter_list|()
block|{
name|int
name|written
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|filesPerThread
condition|;
name|j
operator|++
control|)
block|{
name|String
name|blobName
init|=
name|basePath
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|CloudBlockBlob
name|blob
init|=
name|container
operator|.
name|getBlockBlobReference
argument_list|(
name|blobName
argument_list|)
decl_stmt|;
name|blob
operator|.
name|uploadText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|written
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Filed to write {}"
argument_list|,
name|blobName
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Thread completed with {} files written"
argument_list|,
name|written
argument_list|)
expr_stmt|;
return|return
name|written
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Future
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|,
name|getTestTimeoutMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|long
name|elapsedMs
init|=
name|timer
operator|.
name|elapsedTimeMs
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"time to create files: {} millis"
argument_list|,
name|elapsedMs
argument_list|)
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Integer
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|assertTrue
argument_list|(
literal|"Future timed out"
argument_list|,
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Future did not write all files timed out"
argument_list|,
name|filesPerThread
argument_list|,
name|future
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|test_0200_ListStatusPerformance ()
specifier|public
name|void
name|test_0200_ListStatusPerformance
parameter_list|()
throws|throws
name|Exception
block|{
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|fileList
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|TEST_DIR_PATH
argument_list|)
decl_stmt|;
name|long
name|elapsedMs
init|=
name|timer
operator|.
name|elapsedTimeMs
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"files=%1$d, elapsedMs=%2$d"
argument_list|,
name|fileList
operator|.
name|length
argument_list|,
name|elapsedMs
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|foundInList
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|expectedFileCount
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|fileList
control|)
block|{
name|foundInList
operator|.
name|put
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|,
name|fileStatus
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: {}"
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"dir"
else|:
literal|"file"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Mismatch between expected files and actual"
argument_list|,
name|expectedFileCount
argument_list|,
name|fileList
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// now do a listFiles() recursive
name|ContractTestUtils
operator|.
name|NanoTimer
name|initialStatusCallTimer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listing
init|=
name|fs
operator|.
name|listFiles
argument_list|(
name|TEST_DIR_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|initialListTime
init|=
name|initialStatusCallTimer
operator|.
name|elapsedTimeMs
argument_list|()
decl_stmt|;
name|timer
operator|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
expr_stmt|;
while|while
condition|(
name|listing
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|fileStatus
init|=
name|listing
operator|.
name|next
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|fileStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileStatus
name|removed
init|=
name|foundInList
operator|.
name|remove
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Did not find "
operator|+
name|path
operator|+
literal|"{} in the previous listing"
argument_list|,
name|removed
argument_list|)
expr_stmt|;
block|}
name|elapsedMs
operator|=
name|timer
operator|.
name|elapsedTimeMs
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"time for listFiles() initial call: {} millis;"
operator|+
literal|" time to iterate: {} millis"
argument_list|,
name|initialListTime
argument_list|,
name|elapsedMs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not all files from listStatus() were found in listFiles()"
argument_list|,
literal|0
argument_list|,
name|foundInList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_0300_BulkDeletePerformance ()
specifier|public
name|void
name|test_0300_BulkDeletePerformance
parameter_list|()
throws|throws
name|Exception
block|{
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|TEST_DIR_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|elapsedMs
init|=
name|timer
operator|.
name|elapsedTimeMs
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"time for delete(): {} millis; {} nanoS per file"
argument_list|,
name|elapsedMs
argument_list|,
name|timer
operator|.
name|nanosPerOperation
argument_list|(
name|expectedFileCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

