begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test block location logic.  */
end_comment

begin_class
DECL|class|TestNativeAzureFileSystemBlockLocations
specifier|public
class|class
name|TestNativeAzureFileSystemBlockLocations
extends|extends
name|AbstractWasbTestWithTimeout
block|{
annotation|@
name|Test
DECL|method|testNumberOfBlocks ()
specifier|public
name|void
name|testNumberOfBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NativeAzureFileSystem
operator|.
name|AZURE_BLOCK_SIZE_PROPERTY_NAME
argument_list|,
literal|"500"
argument_list|)
expr_stmt|;
name|AzureBlobStorageTestAccount
name|testAccount
init|=
name|AzureBlobStorageTestAccount
operator|.
name|createMock
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|testFile
init|=
name|createTestFile
argument_list|(
name|fs
argument_list|,
literal|1200
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|stat
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockLocationsTypical ()
specifier|public
name|void
name|testBlockLocationsTypical
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocationsOutput
argument_list|(
literal|210
argument_list|,
literal|50
argument_list|,
literal|0
argument_list|,
literal|210
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|locations
index|[
literal|0
index|]
operator|.
name|getHosts
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|locations
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|locations
index|[
literal|4
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|locations
index|[
literal|2
index|]
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockLocationsEmptyFile ()
specifier|public
name|void
name|testBlockLocationsEmptyFile
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocationsOutput
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockLocationsSmallFile ()
specifier|public
name|void
name|testBlockLocationsSmallFile
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocationsOutput
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locations
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockLocationsExactBlockSizeMultiple ()
specifier|public
name|void
name|testBlockLocationsExactBlockSizeMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocationsOutput
argument_list|(
literal|200
argument_list|,
literal|50
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|150
argument_list|,
name|locations
index|[
literal|3
index|]
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|locations
index|[
literal|3
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockLocationsSubsetOfFile ()
specifier|public
name|void
name|testBlockLocationsSubsetOfFile
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocationsOutput
argument_list|(
literal|205
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|35
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|locations
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|locations
index|[
literal|0
index|]
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|locations
index|[
literal|3
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|locations
index|[
literal|3
index|]
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockLocationsOutOfRangeSubsetOfFile ()
specifier|public
name|void
name|testBlockLocationsOutOfRangeSubsetOfFile
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocationsOutput
argument_list|(
literal|205
argument_list|,
literal|10
argument_list|,
literal|300
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockLocationsEmptySubsetOfFile ()
specifier|public
name|void
name|testBlockLocationsEmptySubsetOfFile
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocationsOutput
argument_list|(
literal|205
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockLocationsDifferentLocationHost ()
specifier|public
name|void
name|testBlockLocationsDifferentLocationHost
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocationsOutput
argument_list|(
literal|100
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|"myblobhost"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myblobhost"
argument_list|,
name|locations
index|[
literal|0
index|]
operator|.
name|getHosts
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlockLocationsOutput (int fileSize, int blockSize, long start, long len)
specifier|private
specifier|static
name|BlockLocation
index|[]
name|getBlockLocationsOutput
parameter_list|(
name|int
name|fileSize
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getBlockLocationsOutput
argument_list|(
name|fileSize
argument_list|,
name|blockSize
argument_list|,
name|start
argument_list|,
name|len
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getBlockLocationsOutput (int fileSize, int blockSize, long start, long len, String blockLocationHost)
specifier|private
specifier|static
name|BlockLocation
index|[]
name|getBlockLocationsOutput
parameter_list|(
name|int
name|fileSize
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|,
name|String
name|blockLocationHost
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NativeAzureFileSystem
operator|.
name|AZURE_BLOCK_SIZE_PROPERTY_NAME
argument_list|,
literal|""
operator|+
name|blockSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockLocationHost
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|NativeAzureFileSystem
operator|.
name|AZURE_BLOCK_LOCATION_HOST_PROPERTY_NAME
argument_list|,
name|blockLocationHost
argument_list|)
expr_stmt|;
block|}
name|AzureBlobStorageTestAccount
name|testAccount
init|=
name|AzureBlobStorageTestAccount
operator|.
name|createMock
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|testFile
init|=
name|createTestFile
argument_list|(
name|fs
argument_list|,
name|fileSize
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|stat
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
return|return
name|locations
return|;
block|}
DECL|method|createTestFile (FileSystem fs, int size)
specifier|private
specifier|static
name|Path
name|createTestFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testFile"
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|size
index|]
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|testFile
return|;
block|}
block|}
end_class

end_unit

