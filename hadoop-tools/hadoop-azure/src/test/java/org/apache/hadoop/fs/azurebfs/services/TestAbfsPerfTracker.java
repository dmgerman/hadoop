begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Test the latency tracker for ABFS.  *  */
end_comment

begin_class
DECL|class|TestAbfsPerfTracker
specifier|public
specifier|final
class|class
name|TestAbfsPerfTracker
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAbfsPerfTracker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|executorService
specifier|private
specifier|static
name|ExecutorService
name|executorService
init|=
literal|null
decl_stmt|;
DECL|field|TEST_AGGREGATE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|TEST_AGGREGATE_COUNT
init|=
literal|42
decl_stmt|;
DECL|field|filesystemName
specifier|private
specifier|final
name|String
name|filesystemName
init|=
literal|"bogusFilesystemName"
decl_stmt|;
DECL|field|accountName
specifier|private
specifier|final
name|String
name|accountName
init|=
literal|"bogusAccountName"
decl_stmt|;
DECL|field|url
specifier|private
specifier|final
name|URL
name|url
decl_stmt|;
DECL|method|TestAbfsPerfTracker ()
specifier|public
name|TestAbfsPerfTracker
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
literal|"www.microsoft.com"
argument_list|,
literal|"/bogusFile"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|executorService
operator|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyDisablingOfTracker ()
specifier|public
name|void
name|verifyDisablingOfTracker
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify that disabling of the tracker works
name|AbfsPerfTracker
name|abfsPerfTracker
init|=
operator|new
name|AbfsPerfTracker
argument_list|(
name|accountName
argument_list|,
name|filesystemName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|latencyDetails
init|=
name|abfsPerfTracker
operator|.
name|getClientLatency
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|latencyDetails
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"AbfsPerfTracker should be empty"
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
try|try
init|(
name|AbfsPerfInfo
name|tracker
init|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"disablingCaller"
argument_list|,
literal|"disablingCallee"
argument_list|)
init|)
block|{
name|AbfsHttpOperation
name|op
init|=
operator|new
name|AbfsHttpOperation
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|registerResult
argument_list|(
name|op
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|latencyDetails
operator|=
name|abfsPerfTracker
operator|.
name|getClientLatency
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|latencyDetails
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"AbfsPerfTracker should return no record"
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyTrackingForSingletonLatencyRecords ()
specifier|public
name|void
name|verifyTrackingForSingletonLatencyRecords
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify that tracking for singleton latency records works as expected
specifier|final
name|int
name|numTasks
init|=
literal|100
decl_stmt|;
name|AbfsPerfTracker
name|abfsPerfTracker
init|=
operator|new
name|AbfsPerfTracker
argument_list|(
name|accountName
argument_list|,
name|filesystemName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|latencyDetails
init|=
name|abfsPerfTracker
operator|.
name|getClientLatency
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|latencyDetails
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"AbfsPerfTracker should be empty"
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|AbfsHttpOperation
name|httpOperation
init|=
operator|new
name|AbfsHttpOperation
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
init|(
name|AbfsPerfInfo
name|tracker
init|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"oneOperationCaller"
argument_list|,
literal|"oneOperationCallee"
argument_list|)
init|)
block|{
name|tracker
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Integer
argument_list|>
name|fr
range|:
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
control|)
block|{
name|fr
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
name|latencyDetails
operator|=
name|abfsPerfTracker
operator|.
name|getClientLatency
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|latencyDetails
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"AbfsPerfTracker should return non-null record"
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|latencyDetails
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Latency record should be in the correct format"
argument_list|)
operator|.
name|containsPattern
argument_list|(
literal|"h=[^ ]* t=[^ ]* a=bogusFilesystemName c=bogusAccountName cr=oneOperationCaller"
operator|+
literal|" ce=oneOperationCallee r=Succeeded l=[0-9]+ s=0 e= ci=[^ ]* ri=[^ ]* bs=0 br=0 m=GET"
operator|+
literal|" u=http%3A%2F%2Fwww.microsoft.com%2FbogusFile"
argument_list|)
expr_stmt|;
block|}
name|latencyDetails
operator|=
name|abfsPerfTracker
operator|.
name|getClientLatency
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|latencyDetails
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"AbfsPerfTracker should return no record"
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyTrackingForAggregateLatencyRecords ()
specifier|public
name|void
name|verifyTrackingForAggregateLatencyRecords
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify that tracking of aggregate latency records works as expected
specifier|final
name|int
name|numTasks
init|=
literal|100
decl_stmt|;
name|AbfsPerfTracker
name|abfsPerfTracker
init|=
operator|new
name|AbfsPerfTracker
argument_list|(
name|accountName
argument_list|,
name|filesystemName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|latencyDetails
init|=
name|abfsPerfTracker
operator|.
name|getClientLatency
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|latencyDetails
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"AbfsPerfTracker should be empty"
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|AbfsHttpOperation
name|httpOperation
init|=
operator|new
name|AbfsHttpOperation
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
init|(
name|AbfsPerfInfo
name|tracker
init|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"oneOperationCaller"
argument_list|,
literal|"oneOperationCallee"
argument_list|)
init|)
block|{
name|tracker
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|true
argument_list|)
operator|.
name|registerAggregates
argument_list|(
name|Instant
operator|.
name|now
argument_list|()
argument_list|,
name|TEST_AGGREGATE_COUNT
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Integer
argument_list|>
name|fr
range|:
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
control|)
block|{
name|fr
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
name|latencyDetails
operator|=
name|abfsPerfTracker
operator|.
name|getClientLatency
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|latencyDetails
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"AbfsPerfTracker should return non-null record"
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|latencyDetails
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Latency record should be in the correct format"
argument_list|)
operator|.
name|containsPattern
argument_list|(
literal|"h=[^ ]* t=[^ ]* a=bogusFilesystemName c=bogusAccountName cr=oneOperationCaller"
operator|+
literal|" ce=oneOperationCallee r=Succeeded l=[0-9]+ ls=[0-9]+ lc="
operator|+
name|TEST_AGGREGATE_COUNT
operator|+
literal|" s=0 e= ci=[^ ]* ri=[^ ]* bs=0 br=0 m=GET u=http%3A%2F%2Fwww.microsoft.com%2FbogusFile"
argument_list|)
expr_stmt|;
block|}
name|latencyDetails
operator|=
name|abfsPerfTracker
operator|.
name|getClientLatency
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|latencyDetails
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"AbfsPerfTracker should return no record"
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyRecordingSingletonLatencyIsCheapWhenDisabled ()
specifier|public
name|void
name|verifyRecordingSingletonLatencyIsCheapWhenDisabled
parameter_list|()
throws|throws
name|Exception
block|{
comment|// when latency tracker is disabled, we expect it to take time equivalent to checking a boolean value
specifier|final
name|double
name|maxLatencyWhenDisabledMs
init|=
literal|1000
decl_stmt|;
specifier|final
name|double
name|minLatencyWhenDisabledMs
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|numTasks
init|=
literal|1000
decl_stmt|;
name|long
name|aggregateLatency
init|=
literal|0
decl_stmt|;
name|AbfsPerfTracker
name|abfsPerfTracker
init|=
operator|new
name|AbfsPerfTracker
argument_list|(
name|accountName
argument_list|,
name|filesystemName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AbfsHttpOperation
name|httpOperation
init|=
operator|new
name|AbfsHttpOperation
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
block|{
name|Instant
name|startRecord
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
try|try
init|(
name|AbfsPerfInfo
name|tracker
init|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"oneOperationCaller"
argument_list|,
literal|"oneOperationCallee"
argument_list|)
init|)
block|{
name|tracker
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|long
name|latencyRecord
init|=
name|Duration
operator|.
name|between
argument_list|(
name|startRecord
argument_list|,
name|Instant
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Spent {} ms in recording latency."
argument_list|,
name|latencyRecord
argument_list|)
expr_stmt|;
return|return
name|latencyRecord
return|;
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Long
argument_list|>
name|fr
range|:
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
control|)
block|{
name|aggregateLatency
operator|+=
name|fr
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|double
name|averageRecordLatency
init|=
name|aggregateLatency
operator|/
name|numTasks
decl_stmt|;
name|assertThat
argument_list|(
name|averageRecordLatency
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Average time for recording singleton latencies should be bounded"
argument_list|)
operator|.
name|isBetween
argument_list|(
name|minLatencyWhenDisabledMs
argument_list|,
name|maxLatencyWhenDisabledMs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyRecordingAggregateLatencyIsCheapWhenDisabled ()
specifier|public
name|void
name|verifyRecordingAggregateLatencyIsCheapWhenDisabled
parameter_list|()
throws|throws
name|Exception
block|{
comment|// when latency tracker is disabled, we expect it to take time equivalent to checking a boolean value
specifier|final
name|double
name|maxLatencyWhenDisabledMs
init|=
literal|1000
decl_stmt|;
specifier|final
name|double
name|minLatencyWhenDisabledMs
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|numTasks
init|=
literal|1000
decl_stmt|;
name|long
name|aggregateLatency
init|=
literal|0
decl_stmt|;
name|AbfsPerfTracker
name|abfsPerfTracker
init|=
operator|new
name|AbfsPerfTracker
argument_list|(
name|accountName
argument_list|,
name|filesystemName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AbfsHttpOperation
name|httpOperation
init|=
operator|new
name|AbfsHttpOperation
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
block|{
name|Instant
name|startRecord
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
try|try
init|(
name|AbfsPerfInfo
name|tracker
init|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"oneOperationCaller"
argument_list|,
literal|"oneOperationCallee"
argument_list|)
init|)
block|{
name|tracker
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|true
argument_list|)
operator|.
name|registerAggregates
argument_list|(
name|startRecord
argument_list|,
name|TEST_AGGREGATE_COUNT
argument_list|)
expr_stmt|;
block|}
name|long
name|latencyRecord
init|=
name|Duration
operator|.
name|between
argument_list|(
name|startRecord
argument_list|,
name|Instant
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Spent {} ms in recording latency."
argument_list|,
name|latencyRecord
argument_list|)
expr_stmt|;
return|return
name|latencyRecord
return|;
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Long
argument_list|>
name|fr
range|:
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
control|)
block|{
name|aggregateLatency
operator|+=
name|fr
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|double
name|averageRecordLatency
init|=
name|aggregateLatency
operator|/
name|numTasks
decl_stmt|;
name|assertThat
argument_list|(
name|averageRecordLatency
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Average time for recording aggregate latencies should be bounded"
argument_list|)
operator|.
name|isBetween
argument_list|(
name|minLatencyWhenDisabledMs
argument_list|,
name|maxLatencyWhenDisabledMs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyGettingLatencyRecordsIsCheapWhenDisabled ()
specifier|public
name|void
name|verifyGettingLatencyRecordsIsCheapWhenDisabled
parameter_list|()
throws|throws
name|Exception
block|{
comment|// when latency tracker is disabled, we expect it to take time equivalent to checking a boolean value
specifier|final
name|double
name|maxLatencyWhenDisabledMs
init|=
literal|1000
decl_stmt|;
specifier|final
name|double
name|minLatencyWhenDisabledMs
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|numTasks
init|=
literal|1000
decl_stmt|;
name|long
name|aggregateLatency
init|=
literal|0
decl_stmt|;
name|AbfsPerfTracker
name|abfsPerfTracker
init|=
operator|new
name|AbfsPerfTracker
argument_list|(
name|accountName
argument_list|,
name|filesystemName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
block|{
name|Instant
name|startGet
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
name|abfsPerfTracker
operator|.
name|getClientLatency
argument_list|()
expr_stmt|;
name|long
name|latencyGet
init|=
name|Duration
operator|.
name|between
argument_list|(
name|startGet
argument_list|,
name|Instant
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Spent {} ms in retrieving latency record."
argument_list|,
name|latencyGet
argument_list|)
expr_stmt|;
return|return
name|latencyGet
return|;
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Long
argument_list|>
name|fr
range|:
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
control|)
block|{
name|aggregateLatency
operator|+=
name|fr
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|double
name|averageRecordLatency
init|=
name|aggregateLatency
operator|/
name|numTasks
decl_stmt|;
name|assertThat
argument_list|(
name|averageRecordLatency
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Average time for getting latency records should be bounded"
argument_list|)
operator|.
name|isBetween
argument_list|(
name|minLatencyWhenDisabledMs
argument_list|,
name|maxLatencyWhenDisabledMs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyRecordingSingletonLatencyIsCheapWhenEnabled ()
specifier|public
name|void
name|verifyRecordingSingletonLatencyIsCheapWhenEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|double
name|maxLatencyWhenDisabledMs
init|=
literal|5000
decl_stmt|;
specifier|final
name|double
name|minLatencyWhenDisabledMs
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|numTasks
init|=
literal|1000
decl_stmt|;
name|long
name|aggregateLatency
init|=
literal|0
decl_stmt|;
name|AbfsPerfTracker
name|abfsPerfTracker
init|=
operator|new
name|AbfsPerfTracker
argument_list|(
name|accountName
argument_list|,
name|filesystemName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AbfsHttpOperation
name|httpOperation
init|=
operator|new
name|AbfsHttpOperation
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
block|{
name|Instant
name|startRecord
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
try|try
init|(
name|AbfsPerfInfo
name|tracker
init|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"oneOperationCaller"
argument_list|,
literal|"oneOperationCallee"
argument_list|)
init|)
block|{
name|tracker
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|long
name|latencyRecord
init|=
name|Duration
operator|.
name|between
argument_list|(
name|startRecord
argument_list|,
name|Instant
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Spent {} ms in recording latency."
argument_list|,
name|latencyRecord
argument_list|)
expr_stmt|;
return|return
name|latencyRecord
return|;
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Long
argument_list|>
name|fr
range|:
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
control|)
block|{
name|aggregateLatency
operator|+=
name|fr
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|double
name|averageRecordLatency
init|=
name|aggregateLatency
operator|/
name|numTasks
decl_stmt|;
name|assertThat
argument_list|(
name|averageRecordLatency
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Average time for recording singleton latencies should be bounded"
argument_list|)
operator|.
name|isBetween
argument_list|(
name|minLatencyWhenDisabledMs
argument_list|,
name|maxLatencyWhenDisabledMs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyRecordingAggregateLatencyIsCheapWhenEnabled ()
specifier|public
name|void
name|verifyRecordingAggregateLatencyIsCheapWhenEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|double
name|maxLatencyWhenDisabledMs
init|=
literal|5000
decl_stmt|;
specifier|final
name|double
name|minLatencyWhenDisabledMs
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|numTasks
init|=
literal|1000
decl_stmt|;
name|long
name|aggregateLatency
init|=
literal|0
decl_stmt|;
name|AbfsPerfTracker
name|abfsPerfTracker
init|=
operator|new
name|AbfsPerfTracker
argument_list|(
name|accountName
argument_list|,
name|filesystemName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AbfsHttpOperation
name|httpOperation
init|=
operator|new
name|AbfsHttpOperation
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
block|{
name|Instant
name|startRecord
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
try|try
init|(
name|AbfsPerfInfo
name|tracker
init|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"oneOperationCaller"
argument_list|,
literal|"oneOperationCallee"
argument_list|)
init|)
block|{
name|tracker
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|true
argument_list|)
operator|.
name|registerAggregates
argument_list|(
name|startRecord
argument_list|,
name|TEST_AGGREGATE_COUNT
argument_list|)
expr_stmt|;
block|}
name|long
name|latencyRecord
init|=
name|Duration
operator|.
name|between
argument_list|(
name|startRecord
argument_list|,
name|Instant
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Spent {} ms in recording latency."
argument_list|,
name|latencyRecord
argument_list|)
expr_stmt|;
return|return
name|latencyRecord
return|;
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Long
argument_list|>
name|fr
range|:
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
control|)
block|{
name|aggregateLatency
operator|+=
name|fr
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|double
name|averageRecordLatency
init|=
name|aggregateLatency
operator|/
name|numTasks
decl_stmt|;
name|assertThat
argument_list|(
name|averageRecordLatency
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Average time for recording aggregate latencies is bounded"
argument_list|)
operator|.
name|isBetween
argument_list|(
name|minLatencyWhenDisabledMs
argument_list|,
name|maxLatencyWhenDisabledMs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyGettingLatencyRecordsIsCheapWhenEnabled ()
specifier|public
name|void
name|verifyGettingLatencyRecordsIsCheapWhenEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|double
name|maxLatencyWhenDisabledMs
init|=
literal|5000
decl_stmt|;
specifier|final
name|double
name|minLatencyWhenDisabledMs
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|numTasks
init|=
literal|1000
decl_stmt|;
name|long
name|aggregateLatency
init|=
literal|0
decl_stmt|;
name|AbfsPerfTracker
name|abfsPerfTracker
init|=
operator|new
name|AbfsPerfTracker
argument_list|(
name|accountName
argument_list|,
name|filesystemName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
block|{
name|Instant
name|startRecord
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
name|abfsPerfTracker
operator|.
name|getClientLatency
argument_list|()
expr_stmt|;
name|long
name|latencyRecord
init|=
name|Duration
operator|.
name|between
argument_list|(
name|startRecord
argument_list|,
name|Instant
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Spent {} ms in recording latency."
argument_list|,
name|latencyRecord
argument_list|)
expr_stmt|;
return|return
name|latencyRecord
return|;
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Long
argument_list|>
name|fr
range|:
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
control|)
block|{
name|aggregateLatency
operator|+=
name|fr
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|double
name|averageRecordLatency
init|=
name|aggregateLatency
operator|/
name|numTasks
decl_stmt|;
name|assertThat
argument_list|(
name|averageRecordLatency
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"Average time for getting latency records should be bounded"
argument_list|)
operator|.
name|isBetween
argument_list|(
name|minLatencyWhenDisabledMs
argument_list|,
name|maxLatencyWhenDisabledMs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyNoExceptionOnInvalidInput ()
specifier|public
name|void
name|verifyNoExceptionOnInvalidInput
parameter_list|()
throws|throws
name|Exception
block|{
name|Instant
name|testInstant
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
name|AbfsPerfTracker
name|abfsPerfTrackerDisabled
init|=
operator|new
name|AbfsPerfTracker
argument_list|(
name|accountName
argument_list|,
name|filesystemName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AbfsPerfTracker
name|abfsPerfTrackerEnabled
init|=
operator|new
name|AbfsPerfTracker
argument_list|(
name|accountName
argument_list|,
name|filesystemName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|AbfsHttpOperation
name|httpOperation
init|=
operator|new
name|AbfsHttpOperation
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AbfsHttpHeader
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|verifyNoException
argument_list|(
name|abfsPerfTrackerDisabled
argument_list|)
expr_stmt|;
name|verifyNoException
argument_list|(
name|abfsPerfTrackerEnabled
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNoException (AbfsPerfTracker abfsPerfTracker)
specifier|private
name|void
name|verifyNoException
parameter_list|(
name|AbfsPerfTracker
name|abfsPerfTracker
parameter_list|)
throws|throws
name|Exception
block|{
name|Instant
name|testInstant
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
specifier|final
name|AbfsHttpOperation
name|httpOperation
init|=
operator|new
name|AbfsHttpOperation
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AbfsHttpHeader
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|AbfsPerfInfo
name|tracker01
init|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker02
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker03
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker04
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker05
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker06
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker07
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker08
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker09
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker10
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker11
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker12
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
init|;
name|AbfsPerfInfo
name|tracker13
operator|=
operator|new
name|AbfsPerfInfo
argument_list|(
name|abfsPerfTracker
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
init|;
init|)
block|{
name|tracker01
operator|.
name|registerResult
argument_list|(
literal|null
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tracker02
operator|.
name|registerResult
argument_list|(
literal|null
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tracker03
operator|.
name|registerResult
argument_list|(
literal|null
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tracker04
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tracker05
operator|.
name|registerResult
argument_list|(
literal|null
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
operator|.
name|registerAggregates
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tracker06
operator|.
name|registerResult
argument_list|(
literal|null
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
operator|.
name|registerAggregates
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tracker07
operator|.
name|registerResult
argument_list|(
literal|null
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
operator|.
name|registerAggregates
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tracker08
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
operator|.
name|registerAggregates
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tracker09
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
operator|.
name|registerAggregates
argument_list|(
name|Instant
operator|.
name|now
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tracker10
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
operator|.
name|registerAggregates
argument_list|(
name|Instant
operator|.
name|now
argument_list|()
argument_list|,
name|TEST_AGGREGATE_COUNT
argument_list|)
expr_stmt|;
name|tracker11
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
operator|.
name|registerAggregates
argument_list|(
name|testInstant
argument_list|,
name|TEST_AGGREGATE_COUNT
argument_list|)
expr_stmt|;
name|tracker12
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
operator|.
name|registerAggregates
argument_list|(
name|Instant
operator|.
name|MAX
argument_list|,
name|TEST_AGGREGATE_COUNT
argument_list|)
expr_stmt|;
name|tracker13
operator|.
name|registerResult
argument_list|(
name|httpOperation
argument_list|)
operator|.
name|registerSuccess
argument_list|(
literal|false
argument_list|)
operator|.
name|registerAggregates
argument_list|(
name|Instant
operator|.
name|MIN
argument_list|,
name|TEST_AGGREGATE_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

