begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|FixMethodOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|MethodSorters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSExceptionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|NanoTimer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test semantics and performance of the original block blob input stream  * (KEY_INPUT_STREAM_VERSION=1) and the new  *<code>BlockBlobInputStream</code> (KEY_INPUT_STREAM_VERSION=2).  */
end_comment

begin_class
annotation|@
name|FixMethodOrder
argument_list|(
name|MethodSorters
operator|.
name|NAME_ASCENDING
argument_list|)
DECL|class|TestBlockBlobInputStream
specifier|public
class|class
name|TestBlockBlobInputStream
extends|extends
name|AbstractWasbTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBlockBlobInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|KILOBYTE
specifier|private
specifier|static
specifier|final
name|int
name|KILOBYTE
init|=
literal|1024
decl_stmt|;
DECL|field|MEGABYTE
specifier|private
specifier|static
specifier|final
name|int
name|MEGABYTE
init|=
name|KILOBYTE
operator|*
name|KILOBYTE
decl_stmt|;
DECL|field|TEST_FILE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|TEST_FILE_SIZE
init|=
literal|6
operator|*
name|MEGABYTE
decl_stmt|;
DECL|field|TEST_FILE_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_FILE_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"TestBlockBlobInputStream.txt"
argument_list|)
decl_stmt|;
DECL|field|accountUsingInputStreamV1
specifier|private
name|AzureBlobStorageTestAccount
name|accountUsingInputStreamV1
decl_stmt|;
DECL|field|accountUsingInputStreamV2
specifier|private
name|AzureBlobStorageTestAccount
name|accountUsingInputStreamV2
decl_stmt|;
DECL|field|testFileLength
specifier|private
name|long
name|testFileLength
decl_stmt|;
comment|/**    * Long test timeout.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10
operator|*
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
DECL|field|testFileStatus
specifier|private
name|FileStatus
name|testFileStatus
decl_stmt|;
DECL|field|hugefile
specifier|private
name|Path
name|hugefile
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_INPUT_STREAM_VERSION
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|accountUsingInputStreamV1
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|"testblockblobinputstream"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|accountUsingInputStreamV2
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|"testblockblobinputstream"
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|accountUsingInputStreamV1
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|accountUsingInputStreamV2
argument_list|)
expr_stmt|;
name|hugefile
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
try|try
block|{
name|testFileStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
name|testFileLength
operator|=
name|testFileStatus
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// file doesn't exist
name|testFileLength
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_INPUT_STREAM_VERSION
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|accountUsingInputStreamV1
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|"testblockblobinputstream"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|accountUsingInputStreamV2
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|"testblockblobinputstream"
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|accountUsingInputStreamV1
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|accountUsingInputStreamV2
argument_list|)
expr_stmt|;
return|return
name|accountUsingInputStreamV1
return|;
block|}
comment|/**    * Create a test file by repeating the characters in the alphabet.    * @throws IOException    */
DECL|method|createTestFileAndSetLength ()
specifier|private
name|void
name|createTestFileAndSetLength
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// To reduce test run time, the test file can be reused.
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_FILE_PATH
argument_list|)
condition|)
block|{
name|testFileStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
name|testFileLength
operator|=
name|testFileStatus
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reusing test file: {}"
argument_list|,
name|testFileStatus
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|sizeOfAlphabet
init|=
operator|(
literal|'z'
operator|-
literal|'a'
operator|+
literal|1
operator|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|26
operator|*
name|KILOBYTE
index|]
decl_stmt|;
name|char
name|character
init|=
literal|'a'
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|character
expr_stmt|;
name|character
operator|=
operator|(
name|character
operator|==
literal|'z'
operator|)
condition|?
literal|'a'
else|:
call|(
name|char
call|)
argument_list|(
operator|(
name|int
operator|)
name|character
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating test file {} of size: {}"
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|TEST_FILE_SIZE
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|int
name|bytesWritten
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bytesWritten
operator|<
name|TEST_FILE_SIZE
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|bytesWritten
operator|+=
name|buffer
operator|.
name|length
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing stream {}"
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|closeTimer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|closeTimer
operator|.
name|end
argument_list|(
literal|"time to close() output stream"
argument_list|)
expr_stmt|;
block|}
name|timer
operator|.
name|end
argument_list|(
literal|"time to write %d KB"
argument_list|,
name|TEST_FILE_SIZE
operator|/
literal|1024
argument_list|)
expr_stmt|;
name|testFileLength
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|TEST_FILE_PATH
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
DECL|method|assumeHugeFileExists ()
name|void
name|assumeHugeFileExists
parameter_list|()
throws|throws
name|IOException
block|{
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"huge file not created"
argument_list|,
name|hugefile
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hugefile
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|assertIsFile
argument_list|(
name|hugefile
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File "
operator|+
name|hugefile
operator|+
literal|" is empty"
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calculate megabits per second from the specified values for bytes and    * milliseconds.    * @param bytes The number of bytes.    * @param milliseconds The number of milliseconds.    * @return The number of megabits per second.    */
DECL|method|toMbps (long bytes, long milliseconds)
specifier|private
specifier|static
name|double
name|toMbps
parameter_list|(
name|long
name|bytes
parameter_list|,
name|long
name|milliseconds
parameter_list|)
block|{
return|return
name|bytes
operator|/
literal|1000.0
operator|*
literal|8
operator|/
name|milliseconds
return|;
block|}
annotation|@
name|Test
DECL|method|test_0100_CreateHugeFile ()
specifier|public
name|void
name|test_0100_CreateHugeFile
parameter_list|()
throws|throws
name|IOException
block|{
name|createTestFileAndSetLength
argument_list|()
expr_stmt|;
block|}
comment|/**    * Validates the implementation of InputStream.markSupported.    * @throws IOException    */
annotation|@
name|Test
DECL|method|test_0301_MarkSupportedV1 ()
specifier|public
name|void
name|test_0301_MarkSupportedV1
parameter_list|()
throws|throws
name|IOException
block|{
name|validateMarkSupported
argument_list|(
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates the implementation of InputStream.markSupported.    * @throws IOException    */
annotation|@
name|Test
DECL|method|test_0302_MarkSupportedV2 ()
specifier|public
name|void
name|test_0302_MarkSupportedV2
parameter_list|()
throws|throws
name|IOException
block|{
name|validateMarkSupported
argument_list|(
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateMarkSupported (FileSystem fs)
specifier|private
name|void
name|validateMarkSupported
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
literal|"mark is not supported"
argument_list|,
name|inputStream
operator|.
name|markSupported
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of InputStream.mark and reset    * for version 1 of the block blob input stream.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0303_MarkAndResetV1 ()
specifier|public
name|void
name|test_0303_MarkAndResetV1
parameter_list|()
throws|throws
name|Exception
block|{
name|validateMarkAndReset
argument_list|(
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates the implementation of InputStream.mark and reset    * for version 2 of the block blob input stream.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0304_MarkAndResetV2 ()
specifier|public
name|void
name|test_0304_MarkAndResetV2
parameter_list|()
throws|throws
name|Exception
block|{
name|validateMarkAndReset
argument_list|(
name|accountUsingInputStreamV2
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateMarkAndReset (FileSystem fs)
specifier|private
name|void
name|validateMarkAndReset
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|inputStream
operator|.
name|mark
argument_list|(
name|KILOBYTE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|KILOBYTE
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rest -> pos 0"
argument_list|,
literal|0
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|mark
argument_list|(
literal|8
operator|*
name|KILOBYTE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|buffer
operator|=
operator|new
name|byte
index|[
literal|8
operator|*
name|KILOBYTE
index|]
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"Resetting to invalid mark"
argument_list|,
operator|new
name|Callable
argument_list|<
name|FSDataInputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FSDataInputStream
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|inputStream
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|inputStream
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of Seekable.seekToNewSource, which should    * return false for version 1 of the block blob input stream.    * @throws IOException    */
annotation|@
name|Test
DECL|method|test_0305_SeekToNewSourceV1 ()
specifier|public
name|void
name|test_0305_SeekToNewSourceV1
parameter_list|()
throws|throws
name|IOException
block|{
name|validateSeekToNewSource
argument_list|(
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates the implementation of Seekable.seekToNewSource, which should    * return false for version 2 of the block blob input stream.    * @throws IOException    */
annotation|@
name|Test
DECL|method|test_0306_SeekToNewSourceV2 ()
specifier|public
name|void
name|test_0306_SeekToNewSourceV2
parameter_list|()
throws|throws
name|IOException
block|{
name|validateSeekToNewSource
argument_list|(
name|accountUsingInputStreamV2
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateSeekToNewSource (FileSystem fs)
specifier|private
name|void
name|validateSeekToNewSource
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|assertFalse
argument_list|(
name|inputStream
operator|.
name|seekToNewSource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of InputStream.skip and ensures there is no    * network I/O for version 1 of the block blob input stream.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0307_SkipBoundsV1 ()
specifier|public
name|void
name|test_0307_SkipBoundsV1
parameter_list|()
throws|throws
name|Exception
block|{
name|validateSkipBounds
argument_list|(
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates the implementation of InputStream.skip and ensures there is no    * network I/O for version 2 of the block blob input stream.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0308_SkipBoundsV2 ()
specifier|public
name|void
name|test_0308_SkipBoundsV2
parameter_list|()
throws|throws
name|Exception
block|{
name|validateSkipBounds
argument_list|(
name|accountUsingInputStreamV2
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateSkipBounds (FileSystem fs)
specifier|private
name|void
name|validateSkipBounds
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|NanoTimer
name|timer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|long
name|skipped
init|=
name|inputStream
operator|.
name|skip
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|skipped
operator|=
name|inputStream
operator|.
name|skip
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testFileLength
operator|>
literal|0
argument_list|)
expr_stmt|;
name|skipped
operator|=
name|inputStream
operator|.
name|skip
argument_list|(
name|testFileLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|inputStream
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|long
name|elapsedTimeMs
init|=
name|timer
operator|.
name|elapsedTimeMs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"There should not be any network I/O (elapsedTimeMs=%1$d)."
argument_list|,
name|elapsedTimeMs
argument_list|)
argument_list|,
name|elapsedTimeMs
operator|<
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of Seekable.seek and ensures there is no    * network I/O for forward seek.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0309_SeekBoundsV1 ()
specifier|public
name|void
name|test_0309_SeekBoundsV1
parameter_list|()
throws|throws
name|Exception
block|{
name|validateSeekBounds
argument_list|(
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates the implementation of Seekable.seek and ensures there is no    * network I/O for forward seek.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0310_SeekBoundsV2 ()
specifier|public
name|void
name|test_0310_SeekBoundsV2
parameter_list|()
throws|throws
name|Exception
block|{
name|validateSeekBounds
argument_list|(
name|accountUsingInputStreamV2
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateSeekBounds (FileSystem fs)
specifier|private
name|void
name|validateSeekBounds
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|;
init|)
block|{
name|NanoTimer
name|timer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
name|FSExceptionMessages
operator|.
name|NEGATIVE_SEEK
argument_list|,
operator|new
name|Callable
argument_list|<
name|FSDataInputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FSDataInputStream
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|inputStream
operator|.
name|seek
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|inputStream
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test file length only "
operator|+
name|testFileLength
argument_list|,
name|testFileLength
operator|>
literal|0
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|testFileLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
name|FSExceptionMessages
operator|.
name|CANNOT_SEEK_PAST_EOF
argument_list|,
operator|new
name|Callable
argument_list|<
name|FSDataInputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FSDataInputStream
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|inputStream
operator|.
name|seek
argument_list|(
name|testFileLength
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|inputStream
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|long
name|elapsedTimeMs
init|=
name|timer
operator|.
name|elapsedTimeMs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"There should not be any network I/O (elapsedTimeMs=%1$d)."
argument_list|,
name|elapsedTimeMs
argument_list|)
argument_list|,
name|elapsedTimeMs
operator|<
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of Seekable.seek, Seekable.getPos,    * and InputStream.available.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0311_SeekAndAvailableAndPositionV1 ()
specifier|public
name|void
name|test_0311_SeekAndAvailableAndPositionV1
parameter_list|()
throws|throws
name|Exception
block|{
name|validateSeekAndAvailableAndPosition
argument_list|(
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates the implementation of Seekable.seek, Seekable.getPos,    * and InputStream.available.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0312_SeekAndAvailableAndPositionV2 ()
specifier|public
name|void
name|test_0312_SeekAndAvailableAndPositionV2
parameter_list|()
throws|throws
name|Exception
block|{
name|validateSeekAndAvailableAndPosition
argument_list|(
name|accountUsingInputStreamV2
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateSeekAndAvailableAndPosition (FileSystem fs)
specifier|private
name|void
name|validateSeekAndAvailableAndPosition
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|byte
index|[]
name|expected1
init|=
block|{
operator|(
name|byte
operator|)
literal|'a'
block|,
operator|(
name|byte
operator|)
literal|'b'
block|,
operator|(
name|byte
operator|)
literal|'c'
block|}
decl_stmt|;
name|byte
index|[]
name|expected2
init|=
block|{
operator|(
name|byte
operator|)
literal|'d'
block|,
operator|(
name|byte
operator|)
literal|'e'
block|,
operator|(
name|byte
operator|)
literal|'f'
block|}
decl_stmt|;
name|byte
index|[]
name|expected3
init|=
block|{
operator|(
name|byte
operator|)
literal|'b'
block|,
operator|(
name|byte
operator|)
literal|'c'
block|,
operator|(
name|byte
operator|)
literal|'d'
block|}
decl_stmt|;
name|byte
index|[]
name|expected4
init|=
block|{
operator|(
name|byte
operator|)
literal|'g'
block|,
operator|(
name|byte
operator|)
literal|'h'
block|,
operator|(
name|byte
operator|)
literal|'i'
block|}
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected1
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected2
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|buffer
operator|.
name|length
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// reverse seek
name|int
name|seekPos
init|=
literal|0
decl_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected1
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|seekPos
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// reverse seek
name|seekPos
operator|=
literal|1
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected3
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|seekPos
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// forward seek
name|seekPos
operator|=
literal|6
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected4
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|seekPos
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of InputStream.skip, Seekable.getPos,    * and InputStream.available.    * @throws IOException    */
annotation|@
name|Test
DECL|method|test_0313_SkipAndAvailableAndPositionV1 ()
specifier|public
name|void
name|test_0313_SkipAndAvailableAndPositionV1
parameter_list|()
throws|throws
name|IOException
block|{
name|validateSkipAndAvailableAndPosition
argument_list|(
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates the implementation of InputStream.skip, Seekable.getPos,    * and InputStream.available.    * @throws IOException    */
annotation|@
name|Test
DECL|method|test_0314_SkipAndAvailableAndPositionV2 ()
specifier|public
name|void
name|test_0314_SkipAndAvailableAndPositionV2
parameter_list|()
throws|throws
name|IOException
block|{
name|validateSkipAndAvailableAndPosition
argument_list|(
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateSkipAndAvailableAndPosition (FileSystem fs)
specifier|private
name|void
name|validateSkipAndAvailableAndPosition
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|;
init|)
block|{
name|byte
index|[]
name|expected1
init|=
block|{
operator|(
name|byte
operator|)
literal|'a'
block|,
operator|(
name|byte
operator|)
literal|'b'
block|,
operator|(
name|byte
operator|)
literal|'c'
block|}
decl_stmt|;
name|byte
index|[]
name|expected2
init|=
block|{
operator|(
name|byte
operator|)
literal|'d'
block|,
operator|(
name|byte
operator|)
literal|'e'
block|,
operator|(
name|byte
operator|)
literal|'f'
block|}
decl_stmt|;
name|byte
index|[]
name|expected3
init|=
block|{
operator|(
name|byte
operator|)
literal|'b'
block|,
operator|(
name|byte
operator|)
literal|'c'
block|,
operator|(
name|byte
operator|)
literal|'d'
block|}
decl_stmt|;
name|byte
index|[]
name|expected4
init|=
block|{
operator|(
name|byte
operator|)
literal|'g'
block|,
operator|(
name|byte
operator|)
literal|'h'
block|,
operator|(
name|byte
operator|)
literal|'i'
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|3
decl_stmt|;
name|long
name|skipped
init|=
name|inputStream
operator|.
name|skip
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|skipped
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|skipped
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected2
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|skipped
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// does skip still work after seek?
name|int
name|seekPos
init|=
literal|1
decl_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected3
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|seekPos
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|currentPosition
init|=
name|inputStream
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|n
operator|=
literal|2
expr_stmt|;
name|skipped
operator|=
name|inputStream
operator|.
name|skip
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentPosition
operator|+
name|skipped
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|skipped
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected4
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|skipped
operator|+
name|currentPosition
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensures parity in the performance of sequential read for    * version 1 and version 2 of the block blob input stream.    * @throws IOException    */
annotation|@
name|Test
DECL|method|test_0315_SequentialReadPerformance ()
specifier|public
name|void
name|test_0315_SequentialReadPerformance
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
specifier|final
name|int
name|maxAttempts
init|=
literal|10
decl_stmt|;
specifier|final
name|double
name|maxAcceptableRatio
init|=
literal|1.01
decl_stmt|;
name|double
name|v1ElapsedMs
init|=
literal|0
decl_stmt|,
name|v2ElapsedMs
init|=
literal|0
decl_stmt|;
name|double
name|ratio
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxAttempts
operator|&&
name|ratio
operator|>=
name|maxAcceptableRatio
condition|;
name|i
operator|++
control|)
block|{
name|v1ElapsedMs
operator|=
name|sequentialRead
argument_list|(
literal|1
argument_list|,
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|v2ElapsedMs
operator|=
name|sequentialRead
argument_list|(
literal|2
argument_list|,
name|accountUsingInputStreamV2
operator|.
name|getFileSystem
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ratio
operator|=
name|v2ElapsedMs
operator|/
name|v1ElapsedMs
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"v1ElapsedMs=%1$d, v2ElapsedMs=%2$d, ratio=%3$.2f"
argument_list|,
operator|(
name|long
operator|)
name|v1ElapsedMs
argument_list|,
operator|(
name|long
operator|)
name|v2ElapsedMs
argument_list|,
name|ratio
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Performance of version 2 is not acceptable: v1ElapsedMs=%1$d,"
operator|+
literal|" v2ElapsedMs=%2$d, ratio=%3$.2f"
argument_list|,
operator|(
name|long
operator|)
name|v1ElapsedMs
argument_list|,
operator|(
name|long
operator|)
name|v2ElapsedMs
argument_list|,
name|ratio
argument_list|)
argument_list|,
name|ratio
operator|<
name|maxAcceptableRatio
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensures parity in the performance of sequential read after reverse seek for    * version 2 of the block blob input stream.    * @throws IOException    */
annotation|@
name|Test
DECL|method|test_0316_SequentialReadAfterReverseSeekPerformanceV2 ()
specifier|public
name|void
name|test_0316_SequentialReadAfterReverseSeekPerformanceV2
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
specifier|final
name|int
name|maxAttempts
init|=
literal|10
decl_stmt|;
specifier|final
name|double
name|maxAcceptableRatio
init|=
literal|1.01
decl_stmt|;
name|double
name|beforeSeekElapsedMs
init|=
literal|0
decl_stmt|,
name|afterSeekElapsedMs
init|=
literal|0
decl_stmt|;
name|double
name|ratio
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxAttempts
operator|&&
name|ratio
operator|>=
name|maxAcceptableRatio
condition|;
name|i
operator|++
control|)
block|{
name|beforeSeekElapsedMs
operator|=
name|sequentialRead
argument_list|(
literal|2
argument_list|,
name|accountUsingInputStreamV2
operator|.
name|getFileSystem
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|afterSeekElapsedMs
operator|=
name|sequentialRead
argument_list|(
literal|2
argument_list|,
name|accountUsingInputStreamV2
operator|.
name|getFileSystem
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ratio
operator|=
name|afterSeekElapsedMs
operator|/
name|beforeSeekElapsedMs
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"beforeSeekElapsedMs=%1$d, afterSeekElapsedMs=%2$d, ratio=%3$.2f"
argument_list|,
operator|(
name|long
operator|)
name|beforeSeekElapsedMs
argument_list|,
operator|(
name|long
operator|)
name|afterSeekElapsedMs
argument_list|,
name|ratio
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Performance of version 2 after reverse seek is not acceptable:"
operator|+
literal|" beforeSeekElapsedMs=%1$d, afterSeekElapsedMs=%2$d,"
operator|+
literal|" ratio=%3$.2f"
argument_list|,
operator|(
name|long
operator|)
name|beforeSeekElapsedMs
argument_list|,
operator|(
name|long
operator|)
name|afterSeekElapsedMs
argument_list|,
name|ratio
argument_list|)
argument_list|,
name|ratio
operator|<
name|maxAcceptableRatio
argument_list|)
expr_stmt|;
block|}
DECL|method|sequentialRead (int version, FileSystem fs, boolean afterReverseSeek)
specifier|private
name|long
name|sequentialRead
parameter_list|(
name|int
name|version
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|boolean
name|afterReverseSeek
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|16
operator|*
name|KILOBYTE
index|]
decl_stmt|;
name|long
name|totalBytesRead
init|=
literal|0
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
if|if
condition|(
name|afterReverseSeek
condition|)
block|{
while|while
condition|(
name|bytesRead
operator|>
literal|0
operator|&&
name|totalBytesRead
operator|<
literal|4
operator|*
name|MEGABYTE
condition|)
block|{
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|totalBytesRead
operator|+=
name|bytesRead
expr_stmt|;
block|}
name|totalBytesRead
operator|=
literal|0
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|NanoTimer
name|timer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|totalBytesRead
operator|+=
name|bytesRead
expr_stmt|;
block|}
name|long
name|elapsedTimeMs
init|=
name|timer
operator|.
name|elapsedTimeMs
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"v%1$d: bytesRead=%2$d, elapsedMs=%3$d, Mbps=%4$.2f,"
operator|+
literal|" afterReverseSeek=%5$s"
argument_list|,
name|version
argument_list|,
name|totalBytesRead
argument_list|,
name|elapsedTimeMs
argument_list|,
name|toMbps
argument_list|(
name|totalBytesRead
argument_list|,
name|elapsedTimeMs
argument_list|)
argument_list|,
name|afterReverseSeek
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
argument_list|,
name|totalBytesRead
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|elapsedTimeMs
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|test_0317_RandomReadPerformance ()
specifier|public
name|void
name|test_0317_RandomReadPerformance
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
specifier|final
name|int
name|maxAttempts
init|=
literal|10
decl_stmt|;
specifier|final
name|double
name|maxAcceptableRatio
init|=
literal|0.10
decl_stmt|;
name|double
name|v1ElapsedMs
init|=
literal|0
decl_stmt|,
name|v2ElapsedMs
init|=
literal|0
decl_stmt|;
name|double
name|ratio
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxAttempts
operator|&&
name|ratio
operator|>=
name|maxAcceptableRatio
condition|;
name|i
operator|++
control|)
block|{
name|v1ElapsedMs
operator|=
name|randomRead
argument_list|(
literal|1
argument_list|,
name|accountUsingInputStreamV1
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|v2ElapsedMs
operator|=
name|randomRead
argument_list|(
literal|2
argument_list|,
name|accountUsingInputStreamV2
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|ratio
operator|=
name|v2ElapsedMs
operator|/
name|v1ElapsedMs
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"v1ElapsedMs=%1$d, v2ElapsedMs=%2$d, ratio=%3$.2f"
argument_list|,
operator|(
name|long
operator|)
name|v1ElapsedMs
argument_list|,
operator|(
name|long
operator|)
name|v2ElapsedMs
argument_list|,
name|ratio
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Performance of version 2 is not acceptable: v1ElapsedMs=%1$d,"
operator|+
literal|" v2ElapsedMs=%2$d, ratio=%3$.2f"
argument_list|,
operator|(
name|long
operator|)
name|v1ElapsedMs
argument_list|,
operator|(
name|long
operator|)
name|v2ElapsedMs
argument_list|,
name|ratio
argument_list|)
argument_list|,
name|ratio
operator|<
name|maxAcceptableRatio
argument_list|)
expr_stmt|;
block|}
DECL|method|randomRead (int version, FileSystem fs)
specifier|private
name|long
name|randomRead
parameter_list|(
name|int
name|version
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
specifier|final
name|int
name|minBytesToRead
init|=
literal|2
operator|*
name|MEGABYTE
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8
operator|*
name|KILOBYTE
index|]
decl_stmt|;
name|long
name|totalBytesRead
init|=
literal|0
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|NanoTimer
name|timer
init|=
operator|new
name|NanoTimer
argument_list|()
decl_stmt|;
do|do
block|{
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|totalBytesRead
operator|+=
name|bytesRead
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|testFileLength
operator|-
name|buffer
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|bytesRead
operator|>
literal|0
operator|&&
name|totalBytesRead
operator|<
name|minBytesToRead
condition|)
do|;
name|long
name|elapsedTimeMs
init|=
name|timer
operator|.
name|elapsedTimeMs
argument_list|()
decl_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"v%1$d: totalBytesRead=%2$d, elapsedTimeMs=%3$d, Mbps=%4$.2f"
argument_list|,
name|version
argument_list|,
name|totalBytesRead
argument_list|,
name|elapsedTimeMs
argument_list|,
name|toMbps
argument_list|(
name|totalBytesRead
argument_list|,
name|elapsedTimeMs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minBytesToRead
operator|<=
name|totalBytesRead
argument_list|)
expr_stmt|;
return|return
name|elapsedTimeMs
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|test_999_DeleteHugeFiles ()
specifier|public
name|void
name|test_999_DeleteHugeFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|TEST_FILE_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|timer
operator|.
name|end
argument_list|(
literal|"time to delete %s"
argument_list|,
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

