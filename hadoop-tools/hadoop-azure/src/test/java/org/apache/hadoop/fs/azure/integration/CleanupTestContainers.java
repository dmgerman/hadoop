begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure.integration
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|CloudStorageAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AbstractWasbTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureBlobStorageTestAccount
import|;
end_import

begin_comment
comment|/**  * This looks like a test, but it is really a command to invoke to  * clean up containers created in other test runs.  *  */
end_comment

begin_class
DECL|class|CleanupTestContainers
specifier|public
class|class
name|CleanupTestContainers
extends|extends
name|AbstractWasbTestBase
block|{
DECL|field|CONTAINER_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_PREFIX
init|=
literal|"wasbtests-"
decl_stmt|;
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|"CleanupTestContainers"
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
operator|.
name|class
argument_list|)
argument_list|,
name|createConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testEnumContainers ()
specifier|public
name|void
name|testEnumContainers
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Enumerating all the WASB test containers"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|CloudStorageAccount
name|storageAccount
init|=
name|getTestAccount
argument_list|()
operator|.
name|getRealAccount
argument_list|()
decl_stmt|;
name|CloudBlobClient
name|blobClient
init|=
name|storageAccount
operator|.
name|createCloudBlobClient
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|CloudBlobContainer
argument_list|>
name|containers
init|=
name|blobClient
operator|.
name|listContainers
argument_list|(
name|CONTAINER_PREFIX
argument_list|)
decl_stmt|;
for|for
control|(
name|CloudBlobContainer
name|container
range|:
name|containers
control|)
block|{
name|count
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} URI {}"
argument_list|,
name|container
operator|.
name|getName
argument_list|()
argument_list|,
name|container
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} test containers"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteContainers ()
specifier|public
name|void
name|testDeleteContainers
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Delete all the WASB test containers"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|CloudStorageAccount
name|storageAccount
init|=
name|getTestAccount
argument_list|()
operator|.
name|getRealAccount
argument_list|()
decl_stmt|;
name|CloudBlobClient
name|blobClient
init|=
name|storageAccount
operator|.
name|createCloudBlobClient
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|CloudBlobContainer
argument_list|>
name|containers
init|=
name|blobClient
operator|.
name|listContainers
argument_list|(
name|CONTAINER_PREFIX
argument_list|)
decl_stmt|;
for|for
control|(
name|CloudBlobContainer
name|container
range|:
name|containers
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} URI {}"
argument_list|,
name|container
operator|.
name|getName
argument_list|()
argument_list|,
name|container
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|deleteIfExists
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted {} test containers"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

