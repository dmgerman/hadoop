begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure.integration
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|AssumptionViolatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureBlobStorageTestAccount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|NativeAzureFileSystem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureBlobStorageTestAccount
operator|.
name|WASB_ACCOUNT_NAME_DOMAIN_SUFFIX_REGEX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureBlobStorageTestAccount
operator|.
name|WASB_TEST_ACCOUNT_NAME_WITH_DOMAIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|integration
operator|.
name|AzureTestConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getLongCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getLongGauge
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_comment
comment|/**  * Utilities for the Azure tests. Based on {@code S3ATestUtils}, so  * (initially) has unused method.  */
end_comment

begin_class
DECL|class|AzureTestUtils
specifier|public
specifier|final
class|class
name|AzureTestUtils
extends|extends
name|Assert
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AzureTestUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Value to set a system property to (in maven) to declare that    * a property has been unset.    */
DECL|field|UNSET_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|UNSET_PROPERTY
init|=
literal|"unset"
decl_stmt|;
comment|/**    * Create the test filesystem.    *    * If the test.fs.wasb.name property is not set, this will    * raise a JUnit assumption exception    *    * @param conf configuration    * @return the FS    * @throws IOException IO Problems    * @throws AssumptionViolatedException if the FS is not named    */
DECL|method|createTestFileSystem (Configuration conf)
specifier|public
specifier|static
name|NativeAzureFileSystem
name|createTestFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fsname
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|TEST_FS_WASB_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|boolean
name|liveTest
init|=
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fsname
argument_list|)
decl_stmt|;
name|URI
name|testURI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|liveTest
condition|)
block|{
name|testURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|fsname
argument_list|)
expr_stmt|;
name|liveTest
operator|=
name|testURI
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|WASB_SCHEME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|liveTest
condition|)
block|{
comment|// Skip the test
throw|throw
operator|new
name|AssumptionViolatedException
argument_list|(
literal|"No test filesystem in "
operator|+
name|TEST_FS_WASB_NAME
argument_list|)
throw|;
block|}
name|NativeAzureFileSystem
name|fs1
init|=
operator|new
name|NativeAzureFileSystem
argument_list|()
decl_stmt|;
name|fs1
operator|.
name|initialize
argument_list|(
name|testURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|fs1
return|;
block|}
comment|/**    * Create a file context for tests.    *    * If the test.fs.wasb.name property is not set, this will    * trigger a JUnit failure.    *    * Multipart purging is enabled.    * @param conf configuration    * @return the FS    * @throws IOException IO Problems    * @throws AssumptionViolatedException if the FS is not named    */
DECL|method|createTestFileContext (Configuration conf)
specifier|public
specifier|static
name|FileContext
name|createTestFileContext
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fsname
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|TEST_FS_WASB_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|boolean
name|liveTest
init|=
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fsname
argument_list|)
decl_stmt|;
name|URI
name|testURI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|liveTest
condition|)
block|{
name|testURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|fsname
argument_list|)
expr_stmt|;
name|liveTest
operator|=
name|testURI
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|WASB_SCHEME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|liveTest
condition|)
block|{
comment|// This doesn't work with our JUnit 3 style test cases, so instead we'll
comment|// make this whole class not run by default
throw|throw
operator|new
name|AssumptionViolatedException
argument_list|(
literal|"No test filesystem in "
operator|+
name|TEST_FS_WASB_NAME
argument_list|)
throw|;
block|}
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|testURI
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|fc
return|;
block|}
comment|/**    * Get a long test property.    *<ol>    *<li>Look up configuration value (which can pick up core-default.xml),    *       using {@code defVal} as the default value (if conf != null).    *</li>    *<li>Fetch the system property.</li>    *<li>If the system property is not empty or "(unset)":    *   it overrides the conf value.    *</li>    *</ol>    * This puts the build properties in charge of everything. It's not a    * perfect design; having maven set properties based on a file, as ant let    * you do, is better for customization.    *    * As to why there's a special (unset) value, see    * {@link http://stackoverflow.com/questions/7773134/null-versus-empty-arguments-in-maven}    * @param conf config: may be null    * @param key key to look up    * @param defVal default value    * @return the evaluated test property.    */
DECL|method|getTestPropertyLong (Configuration conf, String key, long defVal)
specifier|public
specifier|static
name|long
name|getTestPropertyLong
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|long
name|defVal
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTestProperty
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|defVal
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get a test property value in bytes, using k, m, g, t, p, e suffixes.    * {@link org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix#string2long(String)}    *<ol>    *<li>Look up configuration value (which can pick up core-default.xml),    *       using {@code defVal} as the default value (if conf != null).    *</li>    *<li>Fetch the system property.</li>    *<li>If the system property is not empty or "(unset)":    *   it overrides the conf value.    *</li>    *</ol>    * This puts the build properties in charge of everything. It's not a    * perfect design; having maven set properties based on a file, as ant let    * you do, is better for customization.    *    * As to why there's a special (unset) value, see    * {@link http://stackoverflow.com/questions/7773134/null-versus-empty-arguments-in-maven}    * @param conf config: may be null    * @param key key to look up    * @param defVal default value    * @return the evaluated test property.    */
DECL|method|getTestPropertyBytes (Configuration conf, String key, String defVal)
specifier|public
specifier|static
name|long
name|getTestPropertyBytes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|defVal
parameter_list|)
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|getTestProperty
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|defVal
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get an integer test property; algorithm described in    * {@link #getTestPropertyLong(Configuration, String, long)}.    * @param key key to look up    * @param defVal default value    * @return the evaluated test property.    */
DECL|method|getTestPropertyInt (Configuration conf, String key, int defVal)
specifier|public
specifier|static
name|int
name|getTestPropertyInt
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|defVal
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|getTestPropertyLong
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|defVal
argument_list|)
return|;
block|}
comment|/**    * Get a boolean test property; algorithm described in    * {@link #getTestPropertyLong(Configuration, String, long)}.    * @param key key to look up    * @param defVal default value    * @return the evaluated test property.    */
DECL|method|getTestPropertyBool (Configuration conf, String key, boolean defVal)
specifier|public
specifier|static
name|boolean
name|getTestPropertyBool
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|defVal
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|getTestProperty
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|defVal
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get a string test property.    *<ol>    *<li>Look up configuration value (which can pick up core-default.xml),    *       using {@code defVal} as the default value (if conf != null).    *</li>    *<li>Fetch the system property.</li>    *<li>If the system property is not empty or "(unset)":    *   it overrides the conf value.    *</li>    *</ol>    * This puts the build properties in charge of everything. It's not a    * perfect design; having maven set properties based on a file, as ant let    * you do, is better for customization.    *    * As to why there's a special (unset) value, see    * @see<a href="http://stackoverflow.com/questions/7773134/null-versus-empty-arguments-in-maven">    *   Stack Overflow</a>    * @param conf config: may be null    * @param key key to look up    * @param defVal default value    * @return the evaluated test property.    */
DECL|method|getTestProperty (Configuration conf, String key, String defVal)
specifier|public
specifier|static
name|String
name|getTestProperty
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|defVal
parameter_list|)
block|{
name|String
name|confVal
init|=
name|conf
operator|!=
literal|null
condition|?
name|conf
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|,
name|defVal
argument_list|)
else|:
name|defVal
decl_stmt|;
name|String
name|propval
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|propval
argument_list|)
operator|&&
operator|!
name|UNSET_PROPERTY
operator|.
name|equals
argument_list|(
name|propval
argument_list|)
condition|?
name|propval
else|:
name|confVal
return|;
block|}
comment|/**    * Verify the class of an exception. If it is not as expected, rethrow it.    * Comparison is on the exact class, not subclass-of inference as    * offered by {@code instanceof}.    * @param clazz the expected exception class    * @param ex the exception caught    * @return the exception, if it is of the expected class    * @throws Exception the exception passed in.    */
DECL|method|verifyExceptionClass (Class clazz, Exception ex)
specifier|public
specifier|static
name|Exception
name|verifyExceptionClass
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|Exception
name|ex
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
return|return
name|ex
return|;
block|}
comment|/**    * Turn off FS Caching: use if a filesystem with different options from    * the default is required.    * @param conf configuration to patch    */
DECL|method|disableFilesystemCaching (Configuration conf)
specifier|public
specifier|static
name|void
name|disableFilesystemCaching
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.wasb.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a test path, using the value of    * {@link AzureTestUtils#TEST_UNIQUE_FORK_ID} if it is set.    * @param defVal default value    * @return a path    */
DECL|method|createTestPath (Path defVal)
specifier|public
specifier|static
name|Path
name|createTestPath
parameter_list|(
name|Path
name|defVal
parameter_list|)
block|{
name|String
name|testUniqueForkId
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|AzureTestConstants
operator|.
name|TEST_UNIQUE_FORK_ID
argument_list|)
decl_stmt|;
return|return
name|testUniqueForkId
operator|==
literal|null
condition|?
name|defVal
else|:
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|testUniqueForkId
argument_list|,
literal|"test"
argument_list|)
return|;
block|}
comment|/**    * Create a test page blob path using the value of    * {@link AzureTestConstants#TEST_UNIQUE_FORK_ID} if it is set.    * @param filename filename at the end of the path    * @return an absolute path    */
DECL|method|blobPathForTests (FileSystem fs, String filename)
specifier|public
specifier|static
name|Path
name|blobPathForTests
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|String
name|testUniqueForkId
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|AzureTestConstants
operator|.
name|TEST_UNIQUE_FORK_ID
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|PAGE_BLOB_DIR
argument_list|,
name|testUniqueForkId
operator|==
literal|null
condition|?
name|filename
else|:
operator|(
name|testUniqueForkId
operator|+
literal|"/"
operator|+
name|filename
operator|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a test path using the value of    * {@link AzureTestConstants#TEST_UNIQUE_FORK_ID} if it is set.    * @param filename filename at the end of the path    * @return an absolute path    */
DECL|method|pathForTests (FileSystem fs, String filename)
specifier|public
specifier|static
name|Path
name|pathForTests
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|String
name|testUniqueForkId
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|AzureTestConstants
operator|.
name|TEST_UNIQUE_FORK_ID
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|testUniqueForkId
operator|==
literal|null
condition|?
operator|(
literal|"/test/"
operator|+
name|filename
operator|)
else|:
operator|(
name|testUniqueForkId
operator|+
literal|"/"
operator|+
name|filename
operator|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get a unique fork ID.    * Returns a default value for non-parallel tests.    * @return a string unique for all test VMs running in this maven build.    */
DECL|method|getForkID ()
specifier|public
specifier|static
name|String
name|getForkID
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|AzureTestConstants
operator|.
name|TEST_UNIQUE_FORK_ID
argument_list|,
literal|"fork-1"
argument_list|)
return|;
block|}
comment|/**    * Flag to indicate that this test is being executed in parallel.    * This is used by some of the scale tests to validate test time expectations.    * @return true if the build indicates this test is being run in parallel.    */
DECL|method|isParallelExecution ()
specifier|public
specifier|static
name|boolean
name|isParallelExecution
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|KEY_PARALLEL_TEST_EXECUTION
argument_list|)
return|;
block|}
comment|/**    * Asserts that {@code obj} is an instance of {@code expectedClass} using a    * descriptive assertion message.    * @param expectedClass class    * @param obj object to check    */
DECL|method|assertInstanceOf (Class<?> expectedClass, Object obj)
specifier|public
specifier|static
name|void
name|assertInstanceOf
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|expectedClass
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected instance of class %s, but is %s."
argument_list|,
name|expectedClass
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|expectedClass
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Builds a comma-separated list of class names.    * @param classes list of classes    * @return comma-separated list of class names    */
DECL|method|buildClassListString ( List<T> classes)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Class
argument_list|<
name|?
argument_list|>
parameter_list|>
name|String
name|buildClassListString
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|classes
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|classes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * This class should not be instantiated.    */
DECL|method|AzureTestUtils ()
specifier|private
name|AzureTestUtils
parameter_list|()
block|{   }
comment|/**    * Assert that a configuration option matches the expected value.    * @param conf configuration    * @param key option key    * @param expected expected value    */
DECL|method|assertOptionEquals (Configuration conf, String key, String expected)
specifier|public
specifier|static
name|void
name|assertOptionEquals
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Value of "
operator|+
name|key
argument_list|,
name|expected
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assume that a condition is met. If not: log at WARN and    * then throw an {@link AssumptionViolatedException}.    * @param message message in an assumption    * @param condition condition to probe    */
DECL|method|assume (String message, boolean condition)
specifier|public
specifier|static
name|void
name|assume
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|condition
parameter_list|)
block|{
if|if
condition|(
operator|!
name|condition
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|message
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the current value of the given gauge.    * @param fs filesystem    * @param gaugeName gauge name    * @return the gauge value    */
DECL|method|getLongGaugeValue (NativeAzureFileSystem fs, String gaugeName)
specifier|public
specifier|static
name|long
name|getLongGaugeValue
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
name|String
name|gaugeName
parameter_list|)
block|{
return|return
name|getLongGauge
argument_list|(
name|gaugeName
argument_list|,
name|getMetrics
argument_list|(
name|fs
operator|.
name|getInstrumentation
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Gets the current value of the given counter.    * @param fs filesystem    * @param counterName counter name    * @return the counter value    */
DECL|method|getLongCounterValue (NativeAzureFileSystem fs, String counterName)
specifier|public
specifier|static
name|long
name|getLongCounterValue
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
return|return
name|getLongCounter
argument_list|(
name|counterName
argument_list|,
name|getMetrics
argument_list|(
name|fs
operator|.
name|getInstrumentation
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Delete a path, catching any exception and downgrading to a log message.    * @param fs filesystem    * @param path path to delete    * @param recursive recursive delete?    * @throws IOException IO failure.    */
DECL|method|deleteQuietly (FileSystem fs, Path path, boolean recursive)
specifier|public
specifier|static
name|void
name|deleteQuietly
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
operator|&&
name|path
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"When deleting {}"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Clean up the test account if non-null; return null to put in the    * field.    * @param testAccount test account to clean up    * @return null    * @throws Execption cleanup problems    */
DECL|method|cleanup ( AzureBlobStorageTestAccount testAccount)
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|cleanup
parameter_list|(
name|AzureBlobStorageTestAccount
name|testAccount
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|testAccount
operator|!=
literal|null
condition|)
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|testAccount
operator|=
literal|null
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Clean up the test account; any thrown exceptions are caught and    * logged.    * @param testAccount test account    * @return null, so that any fields can be reset.    */
DECL|method|cleanupTestAccount ( AzureBlobStorageTestAccount testAccount)
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|cleanupTestAccount
parameter_list|(
name|AzureBlobStorageTestAccount
name|testAccount
parameter_list|)
block|{
if|if
condition|(
name|testAccount
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"While cleaning up test account: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Assume that the scale tests are enabled by the relevant system property.    */
DECL|method|assumeScaleTestsEnabled (Configuration conf)
specifier|public
specifier|static
name|void
name|assumeScaleTestsEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|enabled
init|=
name|getTestPropertyBool
argument_list|(
name|conf
argument_list|,
name|KEY_SCALE_TESTS_ENABLED
argument_list|,
name|DEFAULT_SCALE_TESTS_ENABLED
argument_list|)
decl_stmt|;
name|assume
argument_list|(
literal|"Scale test disabled: to enable set property "
operator|+
name|KEY_SCALE_TESTS_ENABLED
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check the account name for WASB tests is set correctly and return.    */
DECL|method|verifyWasbAccountNameInConfig (Configuration conf)
specifier|public
specifier|static
name|String
name|verifyWasbAccountNameInConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|accountName
init|=
name|conf
operator|.
name|get
argument_list|(
name|ACCOUNT_NAME_PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|accountName
operator|==
literal|null
condition|)
block|{
name|accountName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|WASB_TEST_ACCOUNT_NAME_WITH_DOMAIN
argument_list|)
expr_stmt|;
block|}
name|assumeTrue
argument_list|(
literal|"Account for WASB is missing or it is not in correct format"
argument_list|,
name|accountName
operator|!=
literal|null
operator|&&
operator|!
name|accountName
operator|.
name|endsWith
argument_list|(
name|WASB_ACCOUNT_NAME_DOMAIN_SUFFIX_REGEX
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|accountName
return|;
block|}
block|}
end_class

end_unit

