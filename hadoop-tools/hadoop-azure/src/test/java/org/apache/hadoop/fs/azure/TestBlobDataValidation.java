begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureNativeFileSystemStore
operator|.
name|KEY_CHECK_BLOCK_MD5
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureNativeFileSystemStore
operator|.
name|KEY_STORE_BLOB_MD5
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureNativeFileSystemStore
operator|.
name|TestHookOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|OperationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|ResponseReceivedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageErrorCodeStrings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlockEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlockSearchMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|core
operator|.
name|Base64
import|;
end_import

begin_comment
comment|/**  * Test that we do proper data integrity validation with MD5 checks as  * configured.  */
end_comment

begin_class
DECL|class|TestBlobDataValidation
specifier|public
class|class
name|TestBlobDataValidation
block|{
DECL|field|testAccount
specifier|private
name|AzureBlobStorageTestAccount
name|testAccount
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testAccount
operator|!=
literal|null
condition|)
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|testAccount
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Test that by default we don't store the blob-level MD5.    */
annotation|@
name|Test
DECL|method|testBlobMd5StoreOffByDefault ()
specifier|public
name|void
name|testBlobMd5StoreOffByDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
expr_stmt|;
name|testStoreBlobMd5
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we get blob-level MD5 storage and validation if we specify that    * in the configuration.    */
annotation|@
name|Test
DECL|method|testStoreBlobMd5 ()
specifier|public
name|void
name|testStoreBlobMd5
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|KEY_STORE_BLOB_MD5
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testStoreBlobMd5
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testStoreBlobMd5 (boolean expectMd5Stored)
specifier|private
name|void
name|testStoreBlobMd5
parameter_list|(
name|boolean
name|expectMd5Stored
parameter_list|)
throws|throws
name|Exception
block|{
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
comment|// Write a test file.
name|String
name|testFileKey
init|=
literal|"testFile"
decl_stmt|;
name|Path
name|testFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|testFileKey
argument_list|)
decl_stmt|;
name|OutputStream
name|outStream
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|testFilePath
argument_list|)
decl_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Check that we stored/didn't store the MD5 field as configured.
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|testFileKey
argument_list|)
decl_stmt|;
name|blob
operator|.
name|downloadAttributes
argument_list|()
expr_stmt|;
name|String
name|obtainedMd5
init|=
name|blob
operator|.
name|getProperties
argument_list|()
operator|.
name|getContentMD5
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectMd5Stored
condition|)
block|{
name|assertNotNull
argument_list|(
name|obtainedMd5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
literal|"Expected no MD5, found: "
operator|+
name|obtainedMd5
argument_list|,
name|obtainedMd5
argument_list|)
expr_stmt|;
block|}
comment|// Mess with the content so it doesn't match the MD5.
name|String
name|newBlockId
init|=
name|Base64
operator|.
name|encode
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|55
block|,
literal|44
block|,
literal|33
block|,
literal|22
block|}
argument_list|)
decl_stmt|;
name|blob
operator|.
name|uploadBlock
argument_list|(
name|newBlockId
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|45
block|}
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|blob
operator|.
name|commitBlockList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|BlockEntry
index|[]
block|{
operator|new
name|BlockEntry
argument_list|(
name|newBlockId
argument_list|,
name|BlockSearchMode
operator|.
name|UNCOMMITTED
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now read back the content. If we stored the MD5 for the blob content
comment|// we should get a data corruption error.
name|InputStream
name|inStream
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|testFilePath
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|inBuf
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
while|while
condition|(
name|inStream
operator|.
name|read
argument_list|(
name|inBuf
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|//nothing;
block|}
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|expectMd5Stored
condition|)
block|{
name|fail
argument_list|(
literal|"Should've thrown because of data corruption."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expectMd5Stored
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
name|StorageException
name|cause
init|=
operator|(
name|StorageException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected cause: "
operator|+
name|cause
argument_list|,
name|StorageErrorCodeStrings
operator|.
name|INVALID_MD5
argument_list|,
name|cause
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that by default we check block-level MD5.    */
annotation|@
name|Test
DECL|method|testCheckBlockMd5 ()
specifier|public
name|void
name|testCheckBlockMd5
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
expr_stmt|;
name|testCheckBlockMd5
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we don't check block-level MD5 if we specify that in the    * configuration.    */
annotation|@
name|Test
DECL|method|testDontCheckBlockMd5 ()
specifier|public
name|void
name|testDontCheckBlockMd5
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|KEY_CHECK_BLOCK_MD5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testCheckBlockMd5
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Connection inspector to check that MD5 fields for content is set/not set as    * expected.    */
DECL|class|ContentMD5Checker
specifier|private
specifier|static
class|class
name|ContentMD5Checker
extends|extends
name|StorageEvent
argument_list|<
name|ResponseReceivedEvent
argument_list|>
block|{
DECL|field|expectMd5
specifier|private
specifier|final
name|boolean
name|expectMd5
decl_stmt|;
DECL|method|ContentMD5Checker (boolean expectMd5)
specifier|public
name|ContentMD5Checker
parameter_list|(
name|boolean
name|expectMd5
parameter_list|)
block|{
name|this
operator|.
name|expectMd5
operator|=
name|expectMd5
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|eventOccurred (ResponseReceivedEvent eventArg)
specifier|public
name|void
name|eventOccurred
parameter_list|(
name|ResponseReceivedEvent
name|eventArg
parameter_list|)
block|{
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|eventArg
operator|.
name|getConnectionObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|isGetRange
argument_list|(
name|connection
argument_list|)
condition|)
block|{
name|checkObtainedMd5
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|Constants
operator|.
name|HeaderConstants
operator|.
name|CONTENT_MD5
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isPutBlock
argument_list|(
name|connection
argument_list|)
condition|)
block|{
name|checkObtainedMd5
argument_list|(
name|connection
operator|.
name|getRequestProperty
argument_list|(
name|Constants
operator|.
name|HeaderConstants
operator|.
name|CONTENT_MD5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkObtainedMd5 (String obtainedMd5)
specifier|private
name|void
name|checkObtainedMd5
parameter_list|(
name|String
name|obtainedMd5
parameter_list|)
block|{
if|if
condition|(
name|expectMd5
condition|)
block|{
name|assertNotNull
argument_list|(
name|obtainedMd5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
literal|"Expected no MD5, found: "
operator|+
name|obtainedMd5
argument_list|,
name|obtainedMd5
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isPutBlock (HttpURLConnection connection)
specifier|private
specifier|static
name|boolean
name|isPutBlock
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
return|return
name|connection
operator|.
name|getRequestMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"PUT"
argument_list|)
operator|&&
name|connection
operator|.
name|getURL
argument_list|()
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
operator|&&
name|connection
operator|.
name|getURL
argument_list|()
operator|.
name|getQuery
argument_list|()
operator|.
name|contains
argument_list|(
literal|"blockid"
argument_list|)
return|;
block|}
DECL|method|isGetRange (HttpURLConnection connection)
specifier|private
specifier|static
name|boolean
name|isGetRange
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
return|return
name|connection
operator|.
name|getRequestMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"GET"
argument_list|)
operator|&&
name|connection
operator|.
name|getHeaderField
argument_list|(
name|Constants
operator|.
name|HeaderConstants
operator|.
name|STORAGE_RANGE_HEADER
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
DECL|method|testCheckBlockMd5 (final boolean expectMd5Checked)
specifier|private
name|void
name|testCheckBlockMd5
parameter_list|(
specifier|final
name|boolean
name|expectMd5Checked
parameter_list|)
throws|throws
name|Exception
block|{
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
name|Path
name|testFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/testFile"
argument_list|)
decl_stmt|;
comment|// Add a hook to check that for GET/PUT requests we set/don't set
comment|// the block-level MD5 field as configured. I tried to do clever
comment|// testing by also messing with the raw data to see if we actually
comment|// validate the data as expected, but the HttpURLConnection wasn't
comment|// pluggable enough for me to do that.
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getStore
argument_list|()
operator|.
name|addTestHookToOperationContext
argument_list|(
operator|new
name|TestHookOperationContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OperationContext
name|modifyOperationContext
parameter_list|(
name|OperationContext
name|original
parameter_list|)
block|{
name|original
operator|.
name|getResponseReceivedEventHandler
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ContentMD5Checker
argument_list|(
name|expectMd5Checked
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|original
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|OutputStream
name|outStream
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|testFilePath
argument_list|)
decl_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|InputStream
name|inStream
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|testFilePath
argument_list|)
decl_stmt|;
name|byte
index|[]
name|inBuf
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
while|while
condition|(
name|inStream
operator|.
name|read
argument_list|(
name|inBuf
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|//nothing;
block|}
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

