begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests which look at fsck recovery.  */
end_comment

begin_class
DECL|class|TestWasbFsck
specifier|public
class|class
name|TestWasbFsck
extends|extends
name|AbstractWasbTestWithTimeout
block|{
DECL|field|testAccount
specifier|private
name|AzureBlobStorageTestAccount
name|testAccount
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|backingStore
specifier|private
name|InMemoryBlockBlobStore
name|backingStore
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createMock
argument_list|()
expr_stmt|;
name|fs
operator|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|backingStore
operator|=
name|testAccount
operator|.
name|getMockStorage
argument_list|()
operator|.
name|getBackingStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
name|backingStore
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Counts the number of temporary blobs in the backing store.    */
DECL|method|getNumTempBlobs ()
specifier|private
name|int
name|getNumTempBlobs
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|backingStore
operator|.
name|getKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|contains
argument_list|(
name|NativeAzureFileSystem
operator|.
name|AZURE_TEMP_FOLDER
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
comment|/**    * Tests that we recover files properly    */
annotation|@
name|Test
annotation|@
name|Ignore
comment|/* flush() no longer does anything  @@TODO: reinstate an appropriate test of fsck recovery*/
DECL|method|testRecover ()
specifier|public
name|void
name|testRecover
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|danglingFile
init|=
operator|new
name|Path
argument_list|(
literal|"/crashedInTheMiddle"
argument_list|)
decl_stmt|;
comment|// Create a file and leave it dangling and try to recover it.
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|danglingFile
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Now we should still only see a zero-byte file in this place
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|danglingFile
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getNumTempBlobs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run WasbFsck -move to recover the file.
name|runFsck
argument_list|(
literal|"-move"
argument_list|)
expr_stmt|;
comment|// Now we should the see the file in lost+found with the data there.
name|fileStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/lost+found"
argument_list|,
name|danglingFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getNumTempBlobs
argument_list|()
argument_list|)
expr_stmt|;
comment|// But not in its original location
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|danglingFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runFsck (String command)
specifier|private
name|void
name|runFsck
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// Set the dangling cutoff to zero, so every temp blob is considered
comment|// dangling.
name|conf
operator|.
name|setInt
argument_list|(
name|NativeAzureFileSystem
operator|.
name|AZURE_TEMP_EXPIRY_PROPERTY_NAME
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|WasbFsck
name|fsck
init|=
operator|new
name|WasbFsck
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fsck
operator|.
name|setMockFileSystemForTesting
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
name|AzureBlobStorageTestAccount
operator|.
name|MOCK_WASB_URI
block|,
name|command
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that we delete dangling files properly    */
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|danglingFile
init|=
operator|new
name|Path
argument_list|(
literal|"/crashedInTheMiddle"
argument_list|)
decl_stmt|;
comment|// Create a file and leave it dangling and try to delete it.
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|danglingFile
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Now we should still only see a zero-byte file in this place
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|danglingFile
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getNumTempBlobs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run WasbFsck -delete to delete the file.
name|runFsck
argument_list|(
literal|"-delete"
argument_list|)
expr_stmt|;
comment|// Now we should see no trace of the file.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getNumTempBlobs
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|danglingFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

