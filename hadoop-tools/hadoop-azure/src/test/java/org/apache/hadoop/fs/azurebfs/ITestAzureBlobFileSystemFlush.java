begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlockEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlockListingFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureBlobStorageTestAccount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AuthType
import|;
end_import

begin_comment
comment|/**  * Test flush operation.  */
end_comment

begin_class
DECL|class|ITestAzureBlobFileSystemFlush
specifier|public
class|class
name|ITestAzureBlobFileSystemFlush
extends|extends
name|AbstractAbfsScaleTest
block|{
DECL|field|BASE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BASE_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|ONE_THOUSAND
specifier|private
specifier|static
specifier|final
name|int
name|ONE_THOUSAND
init|=
literal|1000
decl_stmt|;
DECL|field|TEST_BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|TEST_BUFFER_SIZE
init|=
literal|5
operator|*
name|ONE_THOUSAND
operator|*
name|BASE_SIZE
decl_stmt|;
DECL|field|ONE_MB
specifier|private
specifier|static
specifier|final
name|int
name|ONE_MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|FLUSH_TIMES
specifier|private
specifier|static
specifier|final
name|int
name|FLUSH_TIMES
init|=
literal|200
decl_stmt|;
DECL|field|THREAD_SLEEP_TIME
specifier|private
specifier|static
specifier|final
name|int
name|THREAD_SLEEP_TIME
init|=
literal|6000
decl_stmt|;
DECL|field|TEST_FILE_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_FILE_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
DECL|field|TEST_FILE_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|TEST_FILE_LENGTH
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|8
decl_stmt|;
DECL|field|WAITING_TIME
specifier|private
specifier|static
specifier|final
name|int
name|WAITING_TIME
init|=
literal|4000
decl_stmt|;
DECL|method|ITestAzureBlobFileSystemFlush ()
specifier|public
name|ITestAzureBlobFileSystemFlush
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAbfsOutputStreamAsyncFlushWithRetainUncommittedData ()
specifier|public
name|void
name|testAbfsOutputStreamAsyncFlushWithRetainUncommittedData
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|b
operator|=
operator|new
name|byte
index|[
name|TEST_BUFFER_SIZE
index|]
expr_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|FLUSH_TIMES
condition|;
name|j
operator|++
control|)
block|{
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|byte
index|[]
name|r
init|=
operator|new
name|byte
index|[
name|TEST_BUFFER_SIZE
index|]
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|,
literal|4
operator|*
name|ONE_MB
argument_list|)
init|)
block|{
while|while
condition|(
name|inputStream
operator|.
name|available
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|int
name|result
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"read returned -1"
argument_list|,
operator|-
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"buffer read from stream"
argument_list|,
name|r
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAbfsOutputStreamSyncFlush ()
specifier|public
name|void
name|testAbfsOutputStreamSyncFlush
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|b
operator|=
operator|new
name|byte
index|[
name|TEST_BUFFER_SIZE
index|]
expr_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FLUSH_TIMES
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|stream
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|byte
index|[]
name|r
init|=
operator|new
name|byte
index|[
name|TEST_BUFFER_SIZE
index|]
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|,
literal|4
operator|*
name|ONE_MB
argument_list|)
init|)
block|{
name|int
name|result
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|r
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWriteHeavyBytesToFileSyncFlush ()
specifier|public
name|void
name|testWriteHeavyBytesToFileSyncFlush
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
operator|.
name|Statistics
name|abfsStatistics
decl_stmt|;
name|ExecutorService
name|es
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|abfsStatistics
operator|=
name|fs
operator|.
name|getFsStatistics
argument_list|()
expr_stmt|;
name|abfsStatistics
operator|.
name|reset
argument_list|()
expr_stmt|;
name|es
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|TEST_BUFFER_SIZE
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FLUSH_TIMES
condition|;
name|i
operator|++
control|)
block|{
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|stream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|es
operator|.
name|submit
argument_list|(
name|callable
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|shouldStop
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|shouldStop
condition|)
block|{
name|shouldStop
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
if|if
condition|(
operator|!
name|task
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|stream
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|shouldStop
operator|=
literal|false
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|THREAD_SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|tasks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|es
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|TEST_FILE_PATH
argument_list|)
decl_stmt|;
name|long
name|expectedWrites
init|=
operator|(
name|long
operator|)
name|TEST_BUFFER_SIZE
operator|*
name|FLUSH_TIMES
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong file length in "
operator|+
name|fileStatus
argument_list|,
name|expectedWrites
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong bytes Written count in "
operator|+
name|abfsStatistics
argument_list|,
name|expectedWrites
argument_list|,
name|abfsStatistics
operator|.
name|getBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteHeavyBytesToFileAsyncFlush ()
specifier|public
name|void
name|testWriteHeavyBytesToFileAsyncFlush
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|ExecutorService
name|es
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|TEST_BUFFER_SIZE
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FLUSH_TIMES
condition|;
name|i
operator|++
control|)
block|{
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|stream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|es
operator|.
name|submit
argument_list|(
name|callable
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|shouldStop
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|shouldStop
condition|)
block|{
name|shouldStop
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
if|if
condition|(
operator|!
name|task
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|shouldStop
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|THREAD_SLEEP_TIME
argument_list|)
expr_stmt|;
name|tasks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|es
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|TEST_FILE_PATH
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|TEST_BUFFER_SIZE
operator|*
name|FLUSH_TIMES
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFlushWithFlushEnabled ()
specifier|public
name|void
name|testFlushWithFlushEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|this
operator|.
name|getAuthType
argument_list|()
operator|==
name|AuthType
operator|.
name|SharedKey
argument_list|)
expr_stmt|;
name|AzureBlobStorageTestAccount
name|testAccount
init|=
name|createWasbTestAccount
argument_list|()
decl_stmt|;
name|String
name|wasbUrl
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|abfsUrl
init|=
name|wasbUrlToAbfsUrl
argument_list|(
name|wasbUrl
argument_list|)
decl_stmt|;
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|(
name|abfsUrl
argument_list|)
decl_stmt|;
comment|// test only valid for non-namespace enabled account
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|fs
operator|.
name|getIsNamespaceEnabeld
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytesArray
argument_list|()
decl_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|TEST_FILE_PATH
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|getStreamAfterWrite
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
init|)
block|{
comment|// Wait for write request to be executed
name|Thread
operator|.
name|sleep
argument_list|(
name|WAITING_TIME
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|BlockEntry
argument_list|>
name|blockList
init|=
name|blob
operator|.
name|downloadBlockList
argument_list|(
name|BlockListingFilter
operator|.
name|COMMITTED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// verify block has been committed
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blockList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFlushWithFlushDisabled ()
specifier|public
name|void
name|testFlushWithFlushDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|this
operator|.
name|getAuthType
argument_list|()
operator|==
name|AuthType
operator|.
name|SharedKey
argument_list|)
expr_stmt|;
name|AzureBlobStorageTestAccount
name|testAccount
init|=
name|createWasbTestAccount
argument_list|()
decl_stmt|;
name|String
name|wasbUrl
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|abfsUrl
init|=
name|wasbUrlToAbfsUrl
argument_list|(
name|wasbUrl
argument_list|)
decl_stmt|;
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|(
name|abfsUrl
argument_list|)
decl_stmt|;
comment|// test only valid for non-namespace enabled account
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|fs
operator|.
name|getIsNamespaceEnabeld
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytesArray
argument_list|()
decl_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|TEST_FILE_PATH
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|getStreamAfterWrite
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|buffer
argument_list|,
literal|false
argument_list|)
init|)
block|{
comment|// Wait for write request to be executed
name|Thread
operator|.
name|sleep
argument_list|(
name|WAITING_TIME
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|BlockEntry
argument_list|>
name|blockList
init|=
name|blob
operator|.
name|downloadBlockList
argument_list|(
name|BlockListingFilter
operator|.
name|COMMITTED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// verify block has not been committed
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHflushWithFlushEnabled ()
specifier|public
name|void
name|testHflushWithFlushEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytesArray
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|getStreamAfterWrite
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|stream
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHflushWithFlushDisabled ()
specifier|public
name|void
name|testHflushWithFlushDisabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytesArray
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|getStreamAfterWrite
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|buffer
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|stream
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|buffer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHsyncWithFlushEnabled ()
specifier|public
name|void
name|testHsyncWithFlushEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytesArray
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|getStreamAfterWrite
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|stream
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHsyncWithFlushDisabled ()
specifier|public
name|void
name|testHsyncWithFlushDisabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytesArray
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|getStreamAfterWrite
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|buffer
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|stream
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|buffer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRandomBytesArray ()
specifier|private
name|byte
index|[]
name|getRandomBytesArray
parameter_list|()
block|{
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|TEST_FILE_LENGTH
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
DECL|method|getStreamAfterWrite (AzureBlobFileSystem fs, Path path, byte[] buffer, boolean enableFlush)
specifier|private
name|FSDataOutputStream
name|getStreamAfterWrite
parameter_list|(
name|AzureBlobFileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|boolean
name|enableFlush
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|getAbfsStore
argument_list|()
operator|.
name|getAbfsConfiguration
argument_list|()
operator|.
name|setEnableFlush
argument_list|(
name|enableFlush
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return
name|stream
return|;
block|}
DECL|method|createWasbTestAccount ()
specifier|private
name|AzureBlobStorageTestAccount
name|createWasbTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|""
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
argument_list|,
name|this
operator|.
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
DECL|method|validate (FileSystem fs, Path path, byte[] writeBuffer, boolean isEqual)
specifier|private
name|void
name|validate
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|byte
index|[]
name|writeBuffer
parameter_list|,
name|boolean
name|isEqual
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|filePath
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
init|)
block|{
name|byte
index|[]
name|readBuffer
init|=
operator|new
name|byte
index|[
name|TEST_FILE_LENGTH
index|]
decl_stmt|;
name|int
name|numBytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|readBuffer
argument_list|,
literal|0
argument_list|,
name|readBuffer
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEqual
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Bytes read do not match bytes written to %1$s"
argument_list|,
name|filePath
argument_list|)
argument_list|,
name|writeBuffer
argument_list|,
name|readBuffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Bytes read unexpectedly match bytes written to %1$s"
argument_list|,
name|filePath
argument_list|)
argument_list|,
name|readBuffer
argument_list|,
name|IsNot
operator|.
name|not
argument_list|(
name|IsEqual
operator|.
name|equalTo
argument_list|(
name|writeBuffer
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

