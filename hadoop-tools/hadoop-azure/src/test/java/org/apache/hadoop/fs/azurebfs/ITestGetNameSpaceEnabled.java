begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|contracts
operator|.
name|exceptions
operator|.
name|AbfsRestOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AuthType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|AZURE_CREATE_REMOTE_FILESYSTEM_DURING_INITIALIZATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_ACCOUNT_KEY_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
operator|.
name|FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test getIsNamespaceEnabled call.  */
end_comment

begin_class
DECL|class|ITestGetNameSpaceEnabled
specifier|public
class|class
name|ITestGetNameSpaceEnabled
extends|extends
name|AbstractAbfsIntegrationTest
block|{
DECL|field|isUsingXNSAccount
specifier|private
name|boolean
name|isUsingXNSAccount
decl_stmt|;
DECL|method|ITestGetNameSpaceEnabled ()
specifier|public
name|ITestGetNameSpaceEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|isUsingXNSAccount
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXNSAccount ()
specifier|public
name|void
name|testXNSAccount
parameter_list|()
throws|throws
name|IOException
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Skip this test because the account being used for test is a non XNS account"
argument_list|,
name|isUsingXNSAccount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting getIsNamespaceEnabled() return true"
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getIsNamespaceEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonXNSAccount ()
specifier|public
name|void
name|testNonXNSAccount
parameter_list|()
throws|throws
name|IOException
block|{
name|Assume
operator|.
name|assumeFalse
argument_list|(
literal|"Skip this test because the account being used for test is a XNS account"
argument_list|,
name|isUsingXNSAccount
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Expecting getIsNamespaceEnabled() return false"
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getIsNamespaceEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailedRequestWhenFSNotExist ()
specifier|public
name|void
name|testFailedRequestWhenFSNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|AbfsConfiguration
name|config
init|=
name|this
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|AZURE_CREATE_REMOTE_FILESYSTEM_DURING_INITIALIZATION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|testUri
init|=
name|this
operator|.
name|getTestUrl
argument_list|()
decl_stmt|;
name|String
name|nonExistingFsUrl
init|=
name|getAbfsScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|+
name|testUri
operator|.
name|substring
argument_list|(
name|testUri
operator|.
name|indexOf
argument_list|(
literal|"@"
argument_list|)
argument_list|)
decl_stmt|;
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|(
name|nonExistingFsUrl
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
literal|"\"The specified filesystem does not exist.\", 404"
argument_list|,
parameter_list|()
lambda|->
block|{
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run a dummy FS call
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailedRequestWhenCredentialsNotCorrect ()
specifier|public
name|void
name|testFailedRequestWhenCredentialsNotCorrect
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|this
operator|.
name|getAuthType
argument_list|()
operator|==
name|AuthType
operator|.
name|SharedKey
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|this
operator|.
name|getRawConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|AZURE_CREATE_REMOTE_FILESYSTEM_DURING_INITIALIZATION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|accountName
init|=
name|this
operator|.
name|getAccountName
argument_list|()
decl_stmt|;
name|String
name|configkKey
init|=
name|FS_AZURE_ACCOUNT_KEY_PROPERTY_NAME
operator|+
literal|"."
operator|+
name|accountName
decl_stmt|;
comment|// Provide a wrong sharedKey
name|String
name|secret
init|=
name|config
operator|.
name|get
argument_list|(
name|configkKey
argument_list|)
decl_stmt|;
name|secret
operator|=
call|(
name|char
call|)
argument_list|(
name|secret
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
name|secret
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|configkKey
argument_list|,
name|secret
argument_list|)
expr_stmt|;
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|AbfsRestOperationException
operator|.
name|class
argument_list|,
literal|"\"Server failed to authenticate the request. Make sure the value of Authorization header is formed correctly including the signature.\", 403"
argument_list|,
parameter_list|()
lambda|->
block|{
name|fs
operator|.
name|getIsNamespaceEnabled
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

