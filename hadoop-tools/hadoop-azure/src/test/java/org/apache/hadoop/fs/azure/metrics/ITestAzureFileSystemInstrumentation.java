begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
operator|.
name|WASB_CLIENT_ERRORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
operator|.
name|WASB_DIRECTORIES_CREATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
operator|.
name|WASB_DOWNLOAD_LATENCY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
operator|.
name|WASB_DOWNLOAD_RATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
operator|.
name|WASB_FILES_CREATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
operator|.
name|WASB_FILES_DELETED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
operator|.
name|WASB_SERVER_ERRORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
operator|.
name|WASB_UPLOAD_LATENCY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
operator|.
name|WASB_UPLOAD_RATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
operator|.
name|WASB_WEB_RESPONSES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AbstractWasbTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureBlobStorageTestAccount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureNativeFileSystemStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|NativeAzureFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Instrumentation test, changing state of time and verifying metrics are  * consistent.  */
end_comment

begin_class
DECL|class|ITestAzureFileSystemInstrumentation
specifier|public
class|class
name|ITestAzureFileSystemInstrumentation
extends|extends
name|AbstractWasbTestBase
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestAzureFileSystemInstrumentation
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testMetricTags ()
specifier|public
name|void
name|testMetricTags
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|accountName
init|=
name|getTestAccount
argument_list|()
operator|.
name|getRealAccount
argument_list|()
operator|.
name|getBlobEndpoint
argument_list|()
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|String
name|containerName
init|=
name|getTestAccount
argument_list|()
operator|.
name|getRealContainer
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|MetricsRecordBuilder
name|myMetrics
init|=
name|getMyMetrics
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|myMetrics
argument_list|)
operator|.
name|add
argument_list|(
name|argThat
argument_list|(
operator|new
name|TagMatcher
argument_list|(
literal|"accountName"
argument_list|,
name|accountName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|myMetrics
argument_list|)
operator|.
name|add
argument_list|(
name|argThat
argument_list|(
operator|new
name|TagMatcher
argument_list|(
literal|"containerName"
argument_list|,
name|containerName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|myMetrics
argument_list|)
operator|.
name|add
argument_list|(
name|argThat
argument_list|(
operator|new
name|TagMatcher
argument_list|(
literal|"Context"
argument_list|,
literal|"azureFileSystem"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|myMetrics
argument_list|)
operator|.
name|add
argument_list|(
name|argThat
argument_list|(
operator|new
name|TagExistsMatcher
argument_list|(
literal|"wasbFileSystemId"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetricsOnMkdirList ()
specifier|public
name|void
name|testMetricsOnMkdirList
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|base
init|=
name|getBaseWebResponses
argument_list|()
decl_stmt|;
comment|// Create a directory
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// At the time of writing
comment|// getAncestor uses 2 calls for each folder level /user/<name>/a
comment|// plus 1 call made by checkContainer
comment|// mkdir checks the hierarchy with 2 calls per level
comment|// mkdirs calls storeEmptyDir to create the empty folder, which makes 5 calls
comment|// For a total of 7 + 6 + 5 = 18 web responses
name|base
operator|=
name|assertWebResponsesInRange
argument_list|(
name|base
argument_list|,
literal|1
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AzureMetricsTestUtil
operator|.
name|getLongCounterValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_DIRECTORIES_CREATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// List the root contents
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|base
operator|=
name|assertWebResponsesEquals
argument_list|(
name|base
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|()
expr_stmt|;
block|}
DECL|method|getBandwidthGaugeUpdater ()
specifier|private
name|BandwidthGaugeUpdater
name|getBandwidthGaugeUpdater
parameter_list|()
block|{
name|NativeAzureFileSystem
name|azureFs
init|=
operator|(
name|NativeAzureFileSystem
operator|)
name|getFileSystem
argument_list|()
decl_stmt|;
name|AzureNativeFileSystemStore
name|azureStore
init|=
name|azureFs
operator|.
name|getStore
argument_list|()
decl_stmt|;
return|return
name|azureStore
operator|.
name|getBandwidthGaugeUpdater
argument_list|()
return|;
block|}
DECL|method|nonZeroByteArray (int size)
specifier|private
specifier|static
name|byte
index|[]
name|nonZeroByteArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|data
argument_list|,
operator|(
name|byte
operator|)
literal|5
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
annotation|@
name|Test
DECL|method|testMetricsOnFileCreateRead ()
specifier|public
name|void
name|testMetricsOnFileCreateRead
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|base
init|=
name|getBaseWebResponses
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AzureMetricsTestUtil
operator|.
name|getCurrentBytesWritten
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/metricsTest_webResponses"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|FILE_SIZE
init|=
literal|1000
decl_stmt|;
comment|// Suppress auto-update of bandwidth metrics so we get
comment|// to update them exactly when we want to.
name|getBandwidthGaugeUpdater
argument_list|()
operator|.
name|suppressAutoUpdate
argument_list|()
expr_stmt|;
comment|// Create a file
name|Date
name|start
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|nonZeroByteArray
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|uploadDurationMs
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// The exact number of requests/responses that happen to create a file
comment|// can vary  - at the time of writing this code it takes 10
comment|// requests/responses for the 1000 byte file (33 for 100 MB),
comment|// plus the initial container-check request but that
comment|// can very easily change in the future. Just assert that we do roughly
comment|// more than 2 but less than 15.
name|logOpResponseCount
argument_list|(
literal|"Creating a 1K file"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|base
operator|=
name|assertWebResponsesInRange
argument_list|(
name|base
argument_list|,
literal|2
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|getBandwidthGaugeUpdater
argument_list|()
operator|.
name|triggerUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|bytesWritten
init|=
name|AzureMetricsTestUtil
operator|.
name|getCurrentBytesWritten
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The bytes written in the last second "
operator|+
name|bytesWritten
operator|+
literal|" is pretty far from the expected range of around "
operator|+
name|FILE_SIZE
operator|+
literal|" bytes plus a little overhead."
argument_list|,
name|bytesWritten
operator|>
operator|(
name|FILE_SIZE
operator|/
literal|2
operator|)
operator|&&
name|bytesWritten
operator|<
operator|(
name|FILE_SIZE
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
name|long
name|totalBytesWritten
init|=
name|AzureMetricsTestUtil
operator|.
name|getCurrentTotalBytesWritten
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The total bytes written  "
operator|+
name|totalBytesWritten
operator|+
literal|" is pretty far from the expected range of around "
operator|+
name|FILE_SIZE
operator|+
literal|" bytes plus a little overhead."
argument_list|,
name|totalBytesWritten
operator|>=
name|FILE_SIZE
operator|&&
name|totalBytesWritten
operator|<
operator|(
name|FILE_SIZE
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
name|long
name|uploadRate
init|=
name|AzureMetricsTestUtil
operator|.
name|getLongGaugeValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_UPLOAD_RATE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Upload rate: "
operator|+
name|uploadRate
operator|+
literal|" bytes/second."
argument_list|)
expr_stmt|;
name|long
name|expectedRate
init|=
operator|(
name|FILE_SIZE
operator|*
literal|1000L
operator|)
operator|/
name|uploadDurationMs
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The upload rate "
operator|+
name|uploadRate
operator|+
literal|" is below the expected range of around "
operator|+
name|expectedRate
operator|+
literal|" bytes/second that the unit test observed. This should never be"
operator|+
literal|" the case since the test underestimates the rate by looking at "
operator|+
literal|" end-to-end time instead of just block upload time."
argument_list|,
name|uploadRate
operator|>=
name|expectedRate
argument_list|)
expr_stmt|;
name|long
name|uploadLatency
init|=
name|AzureMetricsTestUtil
operator|.
name|getLongGaugeValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_UPLOAD_LATENCY
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Upload latency: {}"
argument_list|,
name|uploadLatency
argument_list|)
expr_stmt|;
name|long
name|expectedLatency
init|=
name|uploadDurationMs
decl_stmt|;
comment|// We're uploading less than a block.
name|assertTrue
argument_list|(
literal|"The upload latency "
operator|+
name|uploadLatency
operator|+
literal|" should be greater than zero now that I've just uploaded a file."
argument_list|,
name|uploadLatency
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The upload latency "
operator|+
name|uploadLatency
operator|+
literal|" is more than the expected range of around "
operator|+
name|expectedLatency
operator|+
literal|" milliseconds that the unit test observed. This should never be"
operator|+
literal|" the case since the test overestimates the latency by looking at "
operator|+
literal|" end-to-end time instead of just block upload time."
argument_list|,
name|uploadLatency
operator|<=
name|expectedLatency
argument_list|)
expr_stmt|;
comment|// Read the file
name|start
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|InputStream
name|inputStream
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|inputStream
operator|.
name|read
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|downloadDurationMs
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|FILE_SIZE
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Again, exact number varies. At the time of writing this code
comment|// it takes 4 request/responses, so just assert a rough range between
comment|// 1 and 10.
name|logOpResponseCount
argument_list|(
literal|"Reading a 1K file"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|base
operator|=
name|assertWebResponsesInRange
argument_list|(
name|base
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|getBandwidthGaugeUpdater
argument_list|()
operator|.
name|triggerUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|long
name|totalBytesRead
init|=
name|AzureMetricsTestUtil
operator|.
name|getCurrentTotalBytesRead
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FILE_SIZE
argument_list|,
name|totalBytesRead
argument_list|)
expr_stmt|;
name|long
name|bytesRead
init|=
name|AzureMetricsTestUtil
operator|.
name|getCurrentBytesRead
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The bytes read in the last second "
operator|+
name|bytesRead
operator|+
literal|" is pretty far from the expected range of around "
operator|+
name|FILE_SIZE
operator|+
literal|" bytes plus a little overhead."
argument_list|,
name|bytesRead
operator|>
operator|(
name|FILE_SIZE
operator|/
literal|2
operator|)
operator|&&
name|bytesRead
operator|<
operator|(
name|FILE_SIZE
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
name|long
name|downloadRate
init|=
name|AzureMetricsTestUtil
operator|.
name|getLongGaugeValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_DOWNLOAD_RATE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Download rate: "
operator|+
name|downloadRate
operator|+
literal|" bytes/second."
argument_list|)
expr_stmt|;
name|expectedRate
operator|=
operator|(
name|FILE_SIZE
operator|*
literal|1000L
operator|)
operator|/
name|downloadDurationMs
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The download rate "
operator|+
name|downloadRate
operator|+
literal|" is below the expected range of around "
operator|+
name|expectedRate
operator|+
literal|" bytes/second that the unit test observed. This should never be"
operator|+
literal|" the case since the test underestimates the rate by looking at "
operator|+
literal|" end-to-end time instead of just block download time."
argument_list|,
name|downloadRate
operator|>=
name|expectedRate
argument_list|)
expr_stmt|;
name|long
name|downloadLatency
init|=
name|AzureMetricsTestUtil
operator|.
name|getLongGaugeValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_DOWNLOAD_LATENCY
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Download latency: "
operator|+
name|downloadLatency
argument_list|)
expr_stmt|;
name|expectedLatency
operator|=
name|downloadDurationMs
expr_stmt|;
comment|// We're downloading less than a block.
name|assertTrue
argument_list|(
literal|"The download latency "
operator|+
name|downloadLatency
operator|+
literal|" should be greater than zero now that I've just downloaded a file."
argument_list|,
name|downloadLatency
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The download latency "
operator|+
name|downloadLatency
operator|+
literal|" is more than the expected range of around "
operator|+
name|expectedLatency
operator|+
literal|" milliseconds that the unit test observed. This should never be"
operator|+
literal|" the case since the test overestimates the latency by looking at "
operator|+
literal|" end-to-end time instead of just block download time."
argument_list|,
name|downloadLatency
operator|<=
name|expectedLatency
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetricsOnBigFileCreateRead ()
specifier|public
name|void
name|testMetricsOnBigFileCreateRead
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|base
init|=
name|getBaseWebResponses
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AzureMetricsTestUtil
operator|.
name|getCurrentBytesWritten
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/metricsTest_webResponses"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|FILE_SIZE
init|=
literal|100
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// Suppress auto-update of bandwidth metrics so we get
comment|// to update them exactly when we want to.
name|getBandwidthGaugeUpdater
argument_list|()
operator|.
name|suppressAutoUpdate
argument_list|()
expr_stmt|;
comment|// Create a file
name|OutputStream
name|outputStream
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The exact number of requests/responses that happen to create a file
comment|// can vary  - at the time of writing this code it takes 34
comment|// requests/responses for the 100 MB file,
comment|// plus the initial container check request, but that
comment|// can very easily change in the future. Just assert that we do roughly
comment|// more than 20 but less than 50.
name|logOpResponseCount
argument_list|(
literal|"Creating a 100 MB file"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|base
operator|=
name|assertWebResponsesInRange
argument_list|(
name|base
argument_list|,
literal|20
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|getBandwidthGaugeUpdater
argument_list|()
operator|.
name|triggerUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|totalBytesWritten
init|=
name|AzureMetricsTestUtil
operator|.
name|getCurrentTotalBytesWritten
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The total bytes written  "
operator|+
name|totalBytesWritten
operator|+
literal|" is pretty far from the expected range of around "
operator|+
name|FILE_SIZE
operator|+
literal|" bytes plus a little overhead."
argument_list|,
name|totalBytesWritten
operator|>=
name|FILE_SIZE
operator|&&
name|totalBytesWritten
operator|<
operator|(
name|FILE_SIZE
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
name|long
name|uploadRate
init|=
name|AzureMetricsTestUtil
operator|.
name|getLongGaugeValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_UPLOAD_RATE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Upload rate: "
operator|+
name|uploadRate
operator|+
literal|" bytes/second."
argument_list|)
expr_stmt|;
name|long
name|uploadLatency
init|=
name|AzureMetricsTestUtil
operator|.
name|getLongGaugeValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_UPLOAD_LATENCY
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Upload latency: "
operator|+
name|uploadLatency
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The upload latency "
operator|+
name|uploadLatency
operator|+
literal|" should be greater than zero now that I've just uploaded a file."
argument_list|,
name|uploadLatency
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Read the file
name|InputStream
name|inputStream
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|inputStream
operator|.
name|read
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|FILE_SIZE
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Again, exact number varies. At the time of writing this code
comment|// it takes 27 request/responses, so just assert a rough range between
comment|// 20 and 40.
name|logOpResponseCount
argument_list|(
literal|"Reading a 100 MB file"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|base
operator|=
name|assertWebResponsesInRange
argument_list|(
name|base
argument_list|,
literal|20
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|getBandwidthGaugeUpdater
argument_list|()
operator|.
name|triggerUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|long
name|totalBytesRead
init|=
name|AzureMetricsTestUtil
operator|.
name|getCurrentTotalBytesRead
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FILE_SIZE
argument_list|,
name|totalBytesRead
argument_list|)
expr_stmt|;
name|long
name|downloadRate
init|=
name|AzureMetricsTestUtil
operator|.
name|getLongGaugeValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_DOWNLOAD_RATE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Download rate: "
operator|+
name|downloadRate
operator|+
literal|" bytes/second."
argument_list|)
expr_stmt|;
name|long
name|downloadLatency
init|=
name|AzureMetricsTestUtil
operator|.
name|getLongGaugeValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_DOWNLOAD_LATENCY
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Download latency: "
operator|+
name|downloadLatency
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The download latency "
operator|+
name|downloadLatency
operator|+
literal|" should be greater than zero now that I've just downloaded a file."
argument_list|,
name|downloadLatency
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetricsOnFileRename ()
specifier|public
name|void
name|testMetricsOnFileRename
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|base
init|=
name|getBaseWebResponses
argument_list|()
decl_stmt|;
name|Path
name|originalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/metricsTest_RenameStart"
argument_list|)
decl_stmt|;
name|Path
name|destinationPath
init|=
operator|new
name|Path
argument_list|(
literal|"/metricsTest_RenameFinal"
argument_list|)
decl_stmt|;
comment|// Create an empty file
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AzureMetricsTestUtil
operator|.
name|getLongCounterValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_FILES_CREATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|createNewFile
argument_list|(
name|originalPath
argument_list|)
argument_list|)
expr_stmt|;
name|logOpResponseCount
argument_list|(
literal|"Creating an empty file"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|base
operator|=
name|assertWebResponsesInRange
argument_list|(
name|base
argument_list|,
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AzureMetricsTestUtil
operator|.
name|getLongCounterValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_FILES_CREATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Rename the file
name|assertTrue
argument_list|(
operator|(
operator|(
name|FileSystem
operator|)
name|getFileSystem
argument_list|()
operator|)
operator|.
name|rename
argument_list|(
name|originalPath
argument_list|,
name|destinationPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Varies: at the time of writing this code it takes 7 requests/responses.
name|logOpResponseCount
argument_list|(
literal|"Renaming a file"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|base
operator|=
name|assertWebResponsesInRange
argument_list|(
name|base
argument_list|,
literal|2
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetricsOnFileExistsDelete ()
specifier|public
name|void
name|testMetricsOnFileExistsDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|base
init|=
name|getBaseWebResponses
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/metricsTest_delete"
argument_list|)
decl_stmt|;
comment|// Check existence
name|assertFalse
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// At the time of writing this code it takes 2 requests/responses to
comment|// check existence, which seems excessive, plus initial request for
comment|// container check, plus 2 ancestor checks only in the secure case.
name|logOpResponseCount
argument_list|(
literal|"Checking file existence for non-existent file"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|base
operator|=
name|assertWebResponsesInRange
argument_list|(
name|base
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Create an empty file
name|assertTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|createNewFile
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|base
operator|=
name|getCurrentWebResponses
argument_list|()
expr_stmt|;
comment|// Check existence again
name|assertTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|logOpResponseCount
argument_list|(
literal|"Checking file existence for existent file"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|base
operator|=
name|assertWebResponsesInRange
argument_list|(
name|base
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Delete the file
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AzureMetricsTestUtil
operator|.
name|getLongCounterValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_FILES_DELETED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// At the time of writing this code it takes 4 requests/responses to
comment|// delete, which seems excessive. Check for range 1-4 for now.
name|logOpResponseCount
argument_list|(
literal|"Deleting a file"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|base
operator|=
name|assertWebResponsesInRange
argument_list|(
name|base
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AzureMetricsTestUtil
operator|.
name|getLongCounterValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_FILES_DELETED
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetricsOnDirRename ()
specifier|public
name|void
name|testMetricsOnDirRename
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|base
init|=
name|getBaseWebResponses
argument_list|()
decl_stmt|;
name|Path
name|originalDirName
init|=
operator|new
name|Path
argument_list|(
literal|"/metricsTestDirectory_RenameStart"
argument_list|)
decl_stmt|;
name|Path
name|innerFileName
init|=
operator|new
name|Path
argument_list|(
name|originalDirName
argument_list|,
literal|"innerFile"
argument_list|)
decl_stmt|;
name|Path
name|destDirName
init|=
operator|new
name|Path
argument_list|(
literal|"/metricsTestDirectory_RenameFinal"
argument_list|)
decl_stmt|;
comment|// Create an empty directory
name|assertTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|originalDirName
argument_list|)
argument_list|)
expr_stmt|;
name|base
operator|=
name|getCurrentWebResponses
argument_list|()
expr_stmt|;
comment|// Create an inner file
name|assertTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|createNewFile
argument_list|(
name|innerFileName
argument_list|)
argument_list|)
expr_stmt|;
name|base
operator|=
name|getCurrentWebResponses
argument_list|()
expr_stmt|;
comment|// Rename the directory
name|assertTrue
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|rename
argument_list|(
name|originalDirName
argument_list|,
name|destDirName
argument_list|)
argument_list|)
expr_stmt|;
comment|// At the time of writing this code it takes 11 requests/responses
comment|// to rename the directory with one file. Check for range 1-20 for now.
name|logOpResponseCount
argument_list|(
literal|"Renaming a directory"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|base
operator|=
name|assertWebResponsesInRange
argument_list|(
name|base
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|()
expr_stmt|;
block|}
comment|/**    * Recursive discovery of path depth    * @param path path to measure.    * @return depth, where "/" == 0.    */
DECL|method|depth (Path path)
name|int
name|depth
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
literal|1
operator|+
name|depth
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testClientErrorMetrics ()
specifier|public
name|void
name|testClientErrorMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
literal|"metricsTestFile_ClientError"
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|int
name|FILE_SIZE
init|=
literal|100
decl_stmt|;
name|OutputStream
name|outputStream
init|=
literal|null
decl_stmt|;
name|String
name|leaseID
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Create a file
name|outputStream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|leaseID
operator|=
name|getTestAccount
argument_list|()
operator|.
name|acquireShortLease
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
try|try
block|{
name|outputStream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should've thrown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AzureException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|ex
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"lease"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AzureMetricsTestUtil
operator|.
name|getLongCounterValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_CLIENT_ERRORS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AzureMetricsTestUtil
operator|.
name|getLongCounterValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_SERVER_ERRORS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|leaseID
operator|!=
literal|null
condition|)
block|{
name|getTestAccount
argument_list|()
operator|.
name|releaseLease
argument_list|(
name|leaseID
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logOpResponseCount (String opName, long base)
specifier|private
name|void
name|logOpResponseCount
parameter_list|(
name|String
name|opName
parameter_list|,
name|long
name|base
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{}  took {} web responses to complete."
argument_list|,
name|opName
argument_list|,
name|getCurrentWebResponses
argument_list|()
operator|-
name|base
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets (and asserts) the value of the wasb_web_responses counter just    * after the creation of the file system object.    */
DECL|method|getBaseWebResponses ()
specifier|private
name|long
name|getBaseWebResponses
parameter_list|()
block|{
comment|// The number of requests should start at 0
return|return
name|assertWebResponsesEquals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Gets the current value of the wasb_web_responses counter.    */
DECL|method|getCurrentWebResponses ()
specifier|private
name|long
name|getCurrentWebResponses
parameter_list|()
block|{
return|return
name|AzureMetricsTestUtil
operator|.
name|getCurrentWebResponses
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Checks that the wasb_web_responses counter is at the given value.    * @param base The base value (before the operation of interest).    * @param expected The expected value for the operation of interest.    * @return The new base value now.    */
DECL|method|assertWebResponsesEquals (long base, long expected)
specifier|private
name|long
name|assertWebResponsesEquals
parameter_list|(
name|long
name|base
parameter_list|,
name|long
name|expected
parameter_list|)
block|{
name|assertCounter
argument_list|(
name|WASB_WEB_RESPONSES
argument_list|,
name|base
operator|+
name|expected
argument_list|,
name|getMyMetrics
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|base
operator|+
name|expected
return|;
block|}
DECL|method|assertNoErrors ()
specifier|private
name|void
name|assertNoErrors
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AzureMetricsTestUtil
operator|.
name|getLongCounterValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_CLIENT_ERRORS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AzureMetricsTestUtil
operator|.
name|getLongCounterValue
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|,
name|WASB_SERVER_ERRORS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that the wasb_web_responses counter is in the given range.    * @param base The base value (before the operation of interest).    * @param inclusiveLowerLimit The lower limit for what it should increase by.    * @param inclusiveUpperLimit The upper limit for what it should increase by.    * @return The new base value now.    */
DECL|method|assertWebResponsesInRange (long base, long inclusiveLowerLimit, long inclusiveUpperLimit)
specifier|private
name|long
name|assertWebResponsesInRange
parameter_list|(
name|long
name|base
parameter_list|,
name|long
name|inclusiveLowerLimit
parameter_list|,
name|long
name|inclusiveUpperLimit
parameter_list|)
block|{
name|long
name|currentResponses
init|=
name|getCurrentWebResponses
argument_list|()
decl_stmt|;
name|long
name|justOperation
init|=
name|currentResponses
operator|-
name|base
decl_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Web responses expected in range [%d, %d], but was %d."
argument_list|,
name|inclusiveLowerLimit
argument_list|,
name|inclusiveUpperLimit
argument_list|,
name|justOperation
argument_list|)
argument_list|,
name|justOperation
operator|>=
name|inclusiveLowerLimit
operator|&&
name|justOperation
operator|<=
name|inclusiveUpperLimit
argument_list|)
expr_stmt|;
return|return
name|currentResponses
return|;
block|}
comment|/**    * Gets the metrics for the file system object.    * @return The metrics record.    */
DECL|method|getMyMetrics ()
specifier|private
name|MetricsRecordBuilder
name|getMyMetrics
parameter_list|()
block|{
return|return
name|getMetrics
argument_list|(
name|getInstrumentation
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getInstrumentation ()
specifier|private
name|AzureFileSystemInstrumentation
name|getInstrumentation
parameter_list|()
block|{
return|return
name|getFileSystem
argument_list|()
operator|.
name|getInstrumentation
argument_list|()
return|;
block|}
comment|/**    * A matcher class for asserting that we got a tag with a given    * value.    */
DECL|class|TagMatcher
specifier|private
specifier|static
class|class
name|TagMatcher
extends|extends
name|TagExistsMatcher
block|{
DECL|field|tagValue
specifier|private
specifier|final
name|String
name|tagValue
decl_stmt|;
DECL|method|TagMatcher (String tagName, String tagValue)
specifier|public
name|TagMatcher
parameter_list|(
name|String
name|tagName
parameter_list|,
name|String
name|tagValue
parameter_list|)
block|{
name|super
argument_list|(
name|tagName
argument_list|)
expr_stmt|;
name|this
operator|.
name|tagValue
operator|=
name|tagValue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (MetricsTag toMatch)
specifier|public
name|boolean
name|matches
parameter_list|(
name|MetricsTag
name|toMatch
parameter_list|)
block|{
return|return
name|toMatch
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
name|tagValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" with value "
operator|+
name|tagValue
return|;
block|}
block|}
comment|/**    * A matcher class for asserting that we got a tag with any value.    */
DECL|class|TagExistsMatcher
specifier|private
specifier|static
class|class
name|TagExistsMatcher
implements|implements
name|ArgumentMatcher
argument_list|<
name|MetricsTag
argument_list|>
block|{
DECL|field|tagName
specifier|private
specifier|final
name|String
name|tagName
decl_stmt|;
DECL|method|TagExistsMatcher (String tagName)
specifier|public
name|TagExistsMatcher
parameter_list|(
name|String
name|tagName
parameter_list|)
block|{
name|this
operator|.
name|tagName
operator|=
name|tagName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (MetricsTag asTag)
specifier|public
name|boolean
name|matches
parameter_list|(
name|MetricsTag
name|asTag
parameter_list|)
block|{
return|return
name|asTag
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|tagName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Has tag "
operator|+
name|tagName
return|;
block|}
block|}
block|}
end_class

end_unit

