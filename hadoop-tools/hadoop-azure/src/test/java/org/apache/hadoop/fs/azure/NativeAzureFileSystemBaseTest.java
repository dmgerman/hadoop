begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/*  * Tests the Native Azure file system (WASB) against an actual blob store if  * provided in the environment.  * Subclasses implement createTestAccount() to hit local&mock storage with the same test code.  *   * For hand-testing: remove "abstract" keyword and copy in an implementation of createTestAccount  * from one of the subclasses  */
end_comment

begin_class
DECL|class|NativeAzureFileSystemBaseTest
specifier|public
specifier|abstract
class|class
name|NativeAzureFileSystemBaseTest
block|{
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|testAccount
specifier|private
name|AzureBlobStorageTestAccount
name|testAccount
decl_stmt|;
DECL|field|modifiedTimeErrorMargin
specifier|private
specifier|final
name|long
name|modifiedTimeErrorMargin
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
comment|// Give it +/-5 seconds
DECL|method|createTestAccount ()
specifier|protected
specifier|abstract
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
function_decl|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|createTestAccount
argument_list|()
expr_stmt|;
if|if
condition|(
name|testAccount
operator|!=
literal|null
condition|)
block|{
name|fs
operator|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testAccount
operator|!=
literal|null
condition|)
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|testAccount
operator|=
literal|null
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCheckingNonExistentOneLetterFile ()
specifier|public
name|void
name|testCheckingNonExistentOneLetterFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStoreRetrieveFile ()
specifier|public
name|void
name|testStoreRetrieveFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"unit-test-file"
argument_list|)
decl_stmt|;
name|writeString
argument_list|(
name|testFile
argument_list|,
literal|"Testing"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// By default, files should be have masked permissions
comment|// that grant RW to user, and R to group/other
name|assertEquals
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0644
argument_list|)
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Testing"
argument_list|,
name|readString
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStoreDeleteFolder ()
specifier|public
name|void
name|testStoreDeleteFolder
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFolder
init|=
operator|new
name|Path
argument_list|(
literal|"storeDeleteFolder"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testFolder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|testFolder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testFolder
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// By default, directories should be have masked permissions
comment|// that grant RWX to user, and RX to group/other
name|assertEquals
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|innerFile
init|=
operator|new
name|Path
argument_list|(
name|testFolder
argument_list|,
literal|"innerFile"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
name|innerFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|innerFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|testFolder
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|innerFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testFolder
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileOwnership ()
specifier|public
name|void
name|testFileOwnership
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"ownershipTestFile"
argument_list|)
decl_stmt|;
name|writeString
argument_list|(
name|testFile
argument_list|,
literal|"Testing"
argument_list|)
expr_stmt|;
name|testOwnership
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFolderOwnership ()
specifier|public
name|void
name|testFolderOwnership
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFolder
init|=
operator|new
name|Path
argument_list|(
literal|"ownershipTestFolder"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testFolder
argument_list|)
expr_stmt|;
name|testOwnership
argument_list|(
name|testFolder
argument_list|)
expr_stmt|;
block|}
DECL|method|testOwnership (Path pathUnderTest)
specifier|private
name|void
name|testOwnership
parameter_list|(
name|Path
name|pathUnderTest
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|ret
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|pathUnderTest
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getOwner
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|pathUnderTest
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|ignoreStickyBit (FsPermission original)
specifier|private
specifier|static
name|FsPermission
name|ignoreStickyBit
parameter_list|(
name|FsPermission
name|original
parameter_list|)
block|{
return|return
operator|new
name|FsPermission
argument_list|(
name|original
operator|.
name|getUserAction
argument_list|()
argument_list|,
name|original
operator|.
name|getGroupAction
argument_list|()
argument_list|,
name|original
operator|.
name|getOtherAction
argument_list|()
argument_list|)
return|;
block|}
comment|// When FsPermission applies a UMask, it loses sticky bit information.
comment|// And since we always apply UMask, we should ignore whether the sticky
comment|// bit is equal or not.
DECL|method|assertEqualsIgnoreStickyBit (FsPermission expected, FsPermission actual)
specifier|private
specifier|static
name|void
name|assertEqualsIgnoreStickyBit
parameter_list|(
name|FsPermission
name|expected
parameter_list|,
name|FsPermission
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ignoreStickyBit
argument_list|(
name|expected
argument_list|)
argument_list|,
name|ignoreStickyBit
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilePermissions ()
specifier|public
name|void
name|testFilePermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"permissionTestFile"
argument_list|)
decl_stmt|;
name|FsPermission
name|permission
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|644
argument_list|)
decl_stmt|;
name|createEmptyFile
argument_list|(
name|testFile
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|FileStatus
name|ret
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|assertEqualsIgnoreStickyBit
argument_list|(
name|permission
argument_list|,
name|ret
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFolderPermissions ()
specifier|public
name|void
name|testFolderPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFolder
init|=
operator|new
name|Path
argument_list|(
literal|"permissionTestFolder"
argument_list|)
decl_stmt|;
name|FsPermission
name|permission
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|644
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testFolder
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|FileStatus
name|ret
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|assertEqualsIgnoreStickyBit
argument_list|(
name|permission
argument_list|,
name|ret
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFolder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeepFileCreation ()
specifier|public
name|void
name|testDeepFileCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"deep/file/creation/test"
argument_list|)
decl_stmt|;
name|FsPermission
name|permission
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|644
argument_list|)
decl_stmt|;
name|createEmptyFile
argument_list|(
name|testFile
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"deep"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"deep/file/creation"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|ret
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"deep/file"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualsIgnoreStickyBit
argument_list|(
name|permission
argument_list|,
name|ret
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"deep"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// An alternative test scenario would've been to delete the file first,
comment|// and then check for the existence of the upper folders still. But that
comment|// doesn't actually work as expected right now.
block|}
DECL|enum|RenameVariation
specifier|private
specifier|static
enum|enum
name|RenameVariation
block|{
DECL|enumConstant|NormalFileName
DECL|enumConstant|SourceInAFolder
DECL|enumConstant|SourceWithSpace
DECL|enumConstant|SourceWithPlusAndPercent
name|NormalFileName
block|,
name|SourceInAFolder
block|,
name|SourceWithSpace
block|,
name|SourceWithPlusAndPercent
block|}
annotation|@
name|Test
DECL|method|testRename ()
specifier|public
name|void
name|testRename
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|RenameVariation
name|variation
range|:
name|RenameVariation
operator|.
name|values
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Rename variation: %s\n"
argument_list|,
name|variation
argument_list|)
expr_stmt|;
name|Path
name|originalFile
decl_stmt|;
switch|switch
condition|(
name|variation
condition|)
block|{
case|case
name|NormalFileName
case|:
name|originalFile
operator|=
operator|new
name|Path
argument_list|(
literal|"fileToRename"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SourceInAFolder
case|:
name|originalFile
operator|=
operator|new
name|Path
argument_list|(
literal|"file/to/rename"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SourceWithSpace
case|:
name|originalFile
operator|=
operator|new
name|Path
argument_list|(
literal|"file to rename"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SourceWithPlusAndPercent
case|:
name|originalFile
operator|=
operator|new
name|Path
argument_list|(
literal|"file+to%rename"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown variation"
argument_list|)
throw|;
block|}
name|Path
name|destinationFile
init|=
operator|new
name|Path
argument_list|(
literal|"file/resting/destination"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
name|originalFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|originalFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|originalFile
argument_list|,
name|destinationFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Parent directory
comment|// doesn't exist
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|destinationFile
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|originalFile
argument_list|,
name|destinationFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|destinationFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|originalFile
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|destinationFile
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameImplicitFolder ()
specifier|public
name|void
name|testRenameImplicitFolder
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"deep/file/rename/test"
argument_list|)
decl_stmt|;
name|FsPermission
name|permission
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|644
argument_list|)
decl_stmt|;
name|createEmptyFile
argument_list|(
name|testFile
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"deep/file"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"deep/renamed"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|newStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"deep/renamed/rename/test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|assertEqualsIgnoreStickyBit
argument_list|(
name|permission
argument_list|,
name|newStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"deep"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|enum|RenameFolderVariation
specifier|private
specifier|static
enum|enum
name|RenameFolderVariation
block|{
DECL|enumConstant|CreateFolderAndInnerFile
DECL|enumConstant|CreateJustInnerFile
DECL|enumConstant|CreateJustFolder
name|CreateFolderAndInnerFile
block|,
name|CreateJustInnerFile
block|,
name|CreateJustFolder
block|}
annotation|@
name|Test
DECL|method|testRenameFolder ()
specifier|public
name|void
name|testRenameFolder
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|RenameFolderVariation
name|variation
range|:
name|RenameFolderVariation
operator|.
name|values
argument_list|()
control|)
block|{
name|Path
name|originalFolder
init|=
operator|new
name|Path
argument_list|(
literal|"folderToRename"
argument_list|)
decl_stmt|;
if|if
condition|(
name|variation
operator|!=
name|RenameFolderVariation
operator|.
name|CreateJustInnerFile
condition|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|originalFolder
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
name|innerFile
init|=
operator|new
name|Path
argument_list|(
name|originalFolder
argument_list|,
literal|"innerFile"
argument_list|)
decl_stmt|;
if|if
condition|(
name|variation
operator|!=
name|RenameFolderVariation
operator|.
name|CreateJustFolder
condition|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
name|innerFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
name|destination
init|=
operator|new
name|Path
argument_list|(
literal|"renamedFolder"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|originalFolder
argument_list|,
name|destination
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|variation
operator|!=
name|RenameFolderVariation
operator|.
name|CreateJustFolder
condition|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|destination
argument_list|,
name|innerFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|originalFolder
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|innerFile
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|destination
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCopyFromLocalFileSystem ()
specifier|public
name|void
name|testCopyFromLocalFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|localFilePath
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"azure_test"
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|localFilePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|writeString
argument_list|(
name|localFs
argument_list|,
name|localFilePath
argument_list|,
literal|"Testing"
argument_list|)
expr_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
literal|"copiedFromLocal"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|copy
argument_list|(
name|localFs
argument_list|,
name|localFilePath
argument_list|,
name|fs
argument_list|,
name|dstPath
argument_list|,
literal|false
argument_list|,
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|dstPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Testing"
argument_list|,
name|readString
argument_list|(
name|fs
argument_list|,
name|dstPath
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dstPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|localFs
operator|.
name|delete
argument_list|(
name|localFilePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListDirectory ()
specifier|public
name|void
name|testListDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|rootFolder
init|=
operator|new
name|Path
argument_list|(
literal|"testingList"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootFolder
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|listed
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootFolder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listed
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|innerFolder
init|=
operator|new
name|Path
argument_list|(
name|rootFolder
argument_list|,
literal|"inner"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|innerFolder
argument_list|)
argument_list|)
expr_stmt|;
name|listed
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootFolder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listed
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listed
index|[
literal|0
index|]
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|innerFile
init|=
operator|new
name|Path
argument_list|(
name|innerFolder
argument_list|,
literal|"innerFile"
argument_list|)
decl_stmt|;
name|writeString
argument_list|(
name|innerFile
argument_list|,
literal|"testing"
argument_list|)
expr_stmt|;
name|listed
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootFolder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listed
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listed
index|[
literal|0
index|]
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|listed
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|innerFolder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listed
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listed
index|[
literal|0
index|]
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|rootFolder
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStatistics ()
specifier|public
name|void
name|testStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
operator|.
name|clearStatistics
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|Statistics
name|stats
init|=
name|FileSystem
operator|.
name|getStatistics
argument_list|(
literal|"wasb"
argument_list|,
name|NativeAzureFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
literal|"testStats"
argument_list|)
decl_stmt|;
name|writeString
argument_list|(
name|newFile
argument_list|,
literal|"12345678"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|stats
operator|.
name|getBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|readBack
init|=
name|readString
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"12345678"
argument_list|,
name|readBack
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|stats
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|stats
operator|.
name|getBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|newFile
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|stats
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|stats
operator|.
name|getBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUriEncoding ()
specifier|public
name|void
name|testUriEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p/t%5Fe"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|listing
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listing
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t%5Fe"
argument_list|,
name|listing
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"q"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"q"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUriEncodingMoreComplexCharacters ()
specifier|public
name|void
name|testUriEncodingMoreComplexCharacters
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a file name with URI reserved characters, plus the percent
name|String
name|fileName
init|=
literal|"!#$'()*;=[]%"
decl_stmt|;
name|String
name|directoryName
init|=
literal|"*;=[]%!#$'()"
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|directoryName
argument_list|,
name|fileName
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|listing
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|directoryName
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listing
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileName
argument_list|,
name|listing
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|directoryName
argument_list|,
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fileName
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|stream
init|=
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|directoryName
argument_list|,
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|directoryName
argument_list|,
name|fileName
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|directoryName
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadingDirectoryAsFile ()
specifier|public
name|void
name|testReadingDirectoryAsFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/x"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|open
argument_list|(
name|dir
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should've thrown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"/x is a directory not a file."
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreatingFileOverDirectory ()
specifier|public
name|void
name|testCreatingFileOverDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/x"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|dir
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should've thrown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Cannot create file /x; already exists as a directory."
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetPermissionOnFile ()
specifier|public
name|void
name|testSetPermissionOnFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
literal|"testPermission"
argument_list|)
decl_stmt|;
name|OutputStream
name|output
init|=
name|fs
operator|.
name|create
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|FsPermission
name|newPermission
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|newFile
argument_list|,
name|newPermission
argument_list|)
expr_stmt|;
name|FileStatus
name|newStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newPermission
argument_list|,
name|newStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"supergroup"
argument_list|,
name|newStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|newStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|newStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetPermissionOnFolder ()
specifier|public
name|void
name|testSetPermissionOnFolder
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|newFolder
init|=
operator|new
name|Path
argument_list|(
literal|"testPermission"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|newFolder
argument_list|)
argument_list|)
expr_stmt|;
name|FsPermission
name|newPermission
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|newFolder
argument_list|,
name|newPermission
argument_list|)
expr_stmt|;
name|FileStatus
name|newStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|newFolder
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newPermission
argument_list|,
name|newStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newStatus
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetOwnerOnFile ()
specifier|public
name|void
name|testSetOwnerOnFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
literal|"testOwner"
argument_list|)
decl_stmt|;
name|OutputStream
name|output
init|=
name|fs
operator|.
name|create
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|newFile
argument_list|,
literal|"newUser"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileStatus
name|newStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"newUser"
argument_list|,
name|newStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"supergroup"
argument_list|,
name|newStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|newStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|newFile
argument_list|,
literal|null
argument_list|,
literal|"newGroup"
argument_list|)
expr_stmt|;
name|newStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"newUser"
argument_list|,
name|newStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"newGroup"
argument_list|,
name|newStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetOwnerOnFolder ()
specifier|public
name|void
name|testSetOwnerOnFolder
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|newFolder
init|=
operator|new
name|Path
argument_list|(
literal|"testOwner"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|newFolder
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|newFolder
argument_list|,
literal|"newUser"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileStatus
name|newStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|newFolder
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"newUser"
argument_list|,
name|newStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newStatus
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifiedTimeForFile ()
specifier|public
name|void
name|testModifiedTimeForFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"testFile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|testModifiedTime
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifiedTimeForFolder ()
specifier|public
name|void
name|testModifiedTimeForFolder
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFolder
init|=
operator|new
name|Path
argument_list|(
literal|"testFolder"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|testFolder
argument_list|)
argument_list|)
expr_stmt|;
name|testModifiedTime
argument_list|(
name|testFolder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFolderLastModifiedTime ()
specifier|public
name|void
name|testFolderLastModifiedTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|parentFolder
init|=
operator|new
name|Path
argument_list|(
literal|"testFolder"
argument_list|)
decl_stmt|;
name|Path
name|innerFile
init|=
operator|new
name|Path
argument_list|(
name|parentFolder
argument_list|,
literal|"innerfile"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|parentFolder
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create file
name|long
name|lastModifiedTime
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|parentFolder
argument_list|)
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
comment|// Wait at least the error margin
name|Thread
operator|.
name|sleep
argument_list|(
name|modifiedTimeErrorMargin
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
name|innerFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// The parent folder last modified time should have changed because we
comment|// create an inner file.
name|assertFalse
argument_list|(
name|testModifiedTime
argument_list|(
name|parentFolder
argument_list|,
name|lastModifiedTime
argument_list|)
argument_list|)
expr_stmt|;
name|testModifiedTime
argument_list|(
name|parentFolder
argument_list|)
expr_stmt|;
comment|// Rename file
name|lastModifiedTime
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|parentFolder
argument_list|)
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
name|Path
name|destFolder
init|=
operator|new
name|Path
argument_list|(
literal|"testDestFolder"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|destFolder
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|destLastModifiedTime
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|destFolder
argument_list|)
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|modifiedTimeErrorMargin
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Path
name|destFile
init|=
operator|new
name|Path
argument_list|(
name|destFolder
argument_list|,
literal|"innerfile"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|innerFile
argument_list|,
name|destFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Both source and destination folder last modified time should have changed
comment|// because of renaming.
name|assertFalse
argument_list|(
name|testModifiedTime
argument_list|(
name|parentFolder
argument_list|,
name|lastModifiedTime
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testModifiedTime
argument_list|(
name|destFolder
argument_list|,
name|destLastModifiedTime
argument_list|)
argument_list|)
expr_stmt|;
name|testModifiedTime
argument_list|(
name|parentFolder
argument_list|)
expr_stmt|;
name|testModifiedTime
argument_list|(
name|destFolder
argument_list|)
expr_stmt|;
comment|// Delete file
name|destLastModifiedTime
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|destFolder
argument_list|)
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
comment|// Wait at least the error margin
name|Thread
operator|.
name|sleep
argument_list|(
name|modifiedTimeErrorMargin
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|destFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// The parent folder last modified time should have changed because we
comment|// delete an inner file.
name|assertFalse
argument_list|(
name|testModifiedTime
argument_list|(
name|destFolder
argument_list|,
name|destLastModifiedTime
argument_list|)
argument_list|)
expr_stmt|;
name|testModifiedTime
argument_list|(
name|destFolder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListSlash ()
specifier|public
name|void
name|testListSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFolder
init|=
operator|new
name|Path
argument_list|(
literal|"/testFolder"
argument_list|)
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|testFolder
argument_list|,
literal|"testFile"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|testFolder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testFolder/."
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|testModifiedTime (Path testPath, long time)
specifier|private
name|boolean
name|testModifiedTime
parameter_list|(
name|Path
name|testPath
parameter_list|,
name|long
name|time
parameter_list|)
throws|throws
name|Exception
block|{
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
specifier|final
name|long
name|errorMargin
init|=
name|modifiedTimeErrorMargin
decl_stmt|;
name|long
name|lastModified
init|=
name|fileStatus
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
return|return
operator|(
name|lastModified
operator|>
operator|(
name|time
operator|-
name|errorMargin
operator|)
operator|&&
name|lastModified
operator|<
operator|(
name|time
operator|+
name|errorMargin
operator|)
operator|)
return|;
block|}
DECL|method|testModifiedTime (Path testPath)
specifier|private
name|void
name|testModifiedTime
parameter_list|(
name|Path
name|testPath
parameter_list|)
throws|throws
name|Exception
block|{
name|Calendar
name|utc
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|currentUtcTime
init|=
name|utc
operator|.
name|getTime
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Modification time "
operator|+
operator|new
name|Date
argument_list|(
name|fileStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|+
literal|" is not close to now: "
operator|+
name|utc
operator|.
name|getTime
argument_list|()
argument_list|,
name|testModifiedTime
argument_list|(
name|testPath
argument_list|,
name|currentUtcTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createEmptyFile (Path testFile, FsPermission permission)
specifier|private
name|void
name|createEmptyFile
parameter_list|(
name|Path
name|testFile
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|,
name|permission
argument_list|,
literal|true
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1024
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|readString (Path testFile)
specifier|private
name|String
name|readString
parameter_list|(
name|Path
name|testFile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readString
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|)
return|;
block|}
DECL|method|readString (FileSystem fs, Path testFile)
specifier|private
name|String
name|readString
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|testFile
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|String
name|ret
init|=
name|readString
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|readString (FSDataInputStream inputStream)
specifier|private
name|String
name|readString
parameter_list|(
name|FSDataInputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|1024
decl_stmt|;
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|int
name|count
init|=
name|reader
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|BUFFER_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>=
name|BUFFER_SIZE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exceeded buffer size"
argument_list|)
throw|;
block|}
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
return|;
block|}
DECL|method|writeString (Path path, String value)
specifier|private
name|void
name|writeString
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writeString
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|writeString (FileSystem fs, Path path, String value)
specifier|private
name|void
name|writeString
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|writeString
argument_list|(
name|outputStream
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|writeString (FSDataOutputStream outputStream, String value)
specifier|private
name|void
name|writeString
parameter_list|(
name|FSDataOutputStream
name|outputStream
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

