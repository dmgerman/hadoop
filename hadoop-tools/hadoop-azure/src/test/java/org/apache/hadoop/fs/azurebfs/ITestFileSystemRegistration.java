begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|FileSystemUriSchemes
import|;
end_import

begin_comment
comment|/**  * Test AzureBlobFileSystem registration.  * Use casts to have interesting stack traces on failures.  */
end_comment

begin_class
DECL|class|ITestFileSystemRegistration
specifier|public
class|class
name|ITestFileSystemRegistration
extends|extends
name|AbstractAbfsIntegrationTest
block|{
DECL|field|ABFS
specifier|protected
specifier|static
specifier|final
name|String
name|ABFS
init|=
literal|"org.apache.hadoop.fs.azurebfs.Abfs"
decl_stmt|;
DECL|field|ABFSS
specifier|protected
specifier|static
specifier|final
name|String
name|ABFSS
init|=
literal|"org.apache.hadoop.fs.azurebfs.Abfss"
decl_stmt|;
DECL|method|ITestFileSystemRegistration ()
specifier|public
name|ITestFileSystemRegistration
parameter_list|()
throws|throws
name|Exception
block|{   }
DECL|method|assertConfigMatches (Configuration conf, String key, String expected)
specifier|private
name|void
name|assertConfigMatches
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|String
name|v
init|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No value for key "
operator|+
name|key
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value for key "
operator|+
name|key
argument_list|,
name|expected
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAbfsFileSystemRegistered ()
specifier|public
name|void
name|testAbfsFileSystemRegistered
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertConfigMatches
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|"fs.abfs.impl"
argument_list|,
literal|"org.apache.hadoop.fs.azurebfs.AzureBlobFileSystem"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureAbfsFileSystemRegistered ()
specifier|public
name|void
name|testSecureAbfsFileSystemRegistered
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertConfigMatches
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|"fs.abfss.impl"
argument_list|,
literal|"org.apache.hadoop.fs.azurebfs.SecureAzureBlobFileSystem"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAbfsFileContextRegistered ()
specifier|public
name|void
name|testAbfsFileContextRegistered
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertConfigMatches
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|"fs.AbstractFileSystem.abfs.impl"
argument_list|,
name|ABFS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureAbfsFileContextRegistered ()
specifier|public
name|void
name|testSecureAbfsFileContextRegistered
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertConfigMatches
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|"fs.AbstractFileSystem.abfss.impl"
argument_list|,
name|ABFSS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ensureAzureBlobFileSystemIsDefaultFileSystem ()
specifier|public
name|void
name|ensureAzureBlobFileSystemIsDefaultFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|AzureBlobFileSystem
name|fs
init|=
operator|(
name|AzureBlobFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"filesystem"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|Abfs
name|afs
init|=
operator|(
name|Abfs
operator|)
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|getDefaultFileSystem
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"filecontext"
argument_list|,
name|afs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ensureSecureAzureBlobFileSystemIsDefaultFileSystem ()
specifier|public
name|void
name|ensureSecureAzureBlobFileSystemIsDefaultFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|accountName
init|=
name|getAccountName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fileSystemName
init|=
name|getFileSystemName
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|defaultUri
init|=
operator|new
name|URI
argument_list|(
name|FileSystemUriSchemes
operator|.
name|ABFS_SECURE_SCHEME
argument_list|,
name|fileSystemName
operator|+
literal|"@"
operator|+
name|accountName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|defaultUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SecureAzureBlobFileSystem
name|fs
init|=
operator|(
name|SecureAzureBlobFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"filesystem"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|Abfss
name|afs
init|=
operator|(
name|Abfss
operator|)
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|getDefaultFileSystem
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"filecontext"
argument_list|,
name|afs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

