begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.extensions
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|AbstractAbfsTestWithTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|security
operator|.
name|AbfsDelegationTokenManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|KerberizedAbfsCluster
operator|.
name|newURI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|StubDelegationTokenManager
operator|.
name|createToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|StubAbfsTokenIdentifier
operator|.
name|decodeIdentifier
import|;
end_import

begin_comment
comment|/**  * Test the lifecycle of custom DT managers.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"IOResourceOpenedButNotSafelyClosed"
argument_list|)
DECL|class|TestDTManagerLifecycle
specifier|public
class|class
name|TestDTManagerLifecycle
extends|extends
name|AbstractAbfsTestWithTimeout
block|{
DECL|field|RENEWER
specifier|public
specifier|static
specifier|final
name|String
name|RENEWER
init|=
literal|"resourcemanager"
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|ABFS
specifier|public
specifier|static
specifier|final
name|String
name|ABFS
init|=
literal|"abfs://testing@account.dfs.core.windows.net"
decl_stmt|;
DECL|field|FSURI
specifier|public
specifier|static
specifier|final
name|URI
name|FSURI
init|=
name|newURI
argument_list|(
name|ABFS
argument_list|)
decl_stmt|;
DECL|field|OWNER
specifier|public
specifier|static
specifier|final
name|Text
name|OWNER
init|=
operator|new
name|Text
argument_list|(
literal|"owner"
argument_list|)
decl_stmt|;
DECL|field|KIND2
specifier|public
specifier|static
specifier|final
name|Text
name|KIND2
init|=
operator|new
name|Text
argument_list|(
literal|"kind2"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|StubDelegationTokenManager
operator|.
name|useStubDTManager
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{   }
comment|/**    * Assert that a token is of a specific kind    * @param kind expected kind    * @param dt token.    */
DECL|method|assertTokenKind (final Text kind, final Token<DelegationTokenIdentifier> dt)
specifier|protected
name|void
name|assertTokenKind
parameter_list|(
specifier|final
name|Text
name|kind
parameter_list|,
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|dt
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Token Kind"
argument_list|,
name|kind
argument_list|,
name|dt
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the classic lifecycle, that is: don't call bind() on the manager,    * so that it does not attempt to bind the custom DT manager it has created.    *    * There'll be no canonical service name from the token manager, which    * will trigger falling back to the default value.    */
annotation|@
name|Test
DECL|method|testClassicLifecycle ()
specifier|public
name|void
name|testClassicLifecycle
parameter_list|()
throws|throws
name|Throwable
block|{
name|AbfsDelegationTokenManager
name|manager
init|=
operator|new
name|AbfsDelegationTokenManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|StubDelegationTokenManager
name|stub
init|=
name|getTokenManager
argument_list|(
name|manager
argument_list|)
decl_stmt|;
comment|// this is automatically inited
name|assertTrue
argument_list|(
literal|"Not initialized: "
operator|+
name|stub
argument_list|,
name|stub
operator|.
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|dt
init|=
name|stub
operator|.
name|getDelegationToken
argument_list|(
name|RENEWER
argument_list|)
decl_stmt|;
name|assertTokenKind
argument_list|(
name|StubAbfsTokenIdentifier
operator|.
name|TOKEN_KIND
argument_list|,
name|dt
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"canonicalServiceName in "
operator|+
name|stub
argument_list|,
name|manager
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Issued count number in "
operator|+
name|stub
argument_list|,
literal|1
argument_list|,
name|stub
operator|.
name|getIssued
argument_list|()
argument_list|)
expr_stmt|;
name|StubAbfsTokenIdentifier
name|id
init|=
name|decodeIdentifier
argument_list|(
name|dt
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Sequence number in "
operator|+
name|id
argument_list|,
literal|1
argument_list|,
name|id
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|stub
operator|.
name|renewDelegationToken
argument_list|(
name|dt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Renewal count in "
operator|+
name|stub
argument_list|,
literal|1
argument_list|,
name|stub
operator|.
name|getRenewals
argument_list|()
argument_list|)
expr_stmt|;
name|stub
operator|.
name|cancelDelegationToken
argument_list|(
name|dt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cancel count in "
operator|+
name|stub
argument_list|,
literal|1
argument_list|,
name|stub
operator|.
name|getCancellations
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getTokenManager (final AbfsDelegationTokenManager manager)
specifier|protected
name|StubDelegationTokenManager
name|getTokenManager
parameter_list|(
specifier|final
name|AbfsDelegationTokenManager
name|manager
parameter_list|)
block|{
return|return
operator|(
name|StubDelegationTokenManager
operator|)
name|manager
operator|.
name|getTokenManager
argument_list|()
return|;
block|}
comment|/**    * Instantiate through the manager, but then call direct.    */
annotation|@
name|Test
DECL|method|testBindingLifecycle ()
specifier|public
name|void
name|testBindingLifecycle
parameter_list|()
throws|throws
name|Throwable
block|{
name|AbfsDelegationTokenManager
name|manager
init|=
operator|new
name|AbfsDelegationTokenManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|StubDelegationTokenManager
name|stub
init|=
name|getTokenManager
argument_list|(
name|manager
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not initialized: "
operator|+
name|stub
argument_list|,
name|stub
operator|.
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|stub
operator|.
name|bind
argument_list|(
name|FSURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"URI in "
operator|+
name|stub
argument_list|,
name|FSURI
argument_list|,
name|stub
operator|.
name|getFsURI
argument_list|()
argument_list|)
expr_stmt|;
name|decodeIdentifier
argument_list|(
name|stub
operator|.
name|getDelegationToken
argument_list|(
name|RENEWER
argument_list|)
argument_list|)
expr_stmt|;
name|stub
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not closed: "
operator|+
name|stub
argument_list|,
name|stub
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|// and for resilience
name|stub
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not closed: "
operator|+
name|stub
argument_list|,
name|stub
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBindingThroughManager ()
specifier|public
name|void
name|testBindingThroughManager
parameter_list|()
throws|throws
name|Throwable
block|{
name|AbfsDelegationTokenManager
name|manager
init|=
operator|new
name|AbfsDelegationTokenManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|manager
operator|.
name|bind
argument_list|(
name|FSURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|StubDelegationTokenManager
name|stub
init|=
name|getTokenManager
argument_list|(
name|manager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Service in "
operator|+
name|manager
argument_list|,
name|ABFS
argument_list|,
name|stub
operator|.
name|createServiceText
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Binding URI of "
operator|+
name|stub
argument_list|,
name|FSURI
argument_list|,
name|stub
operator|.
name|getFsURI
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|manager
operator|.
name|getDelegationToken
argument_list|(
name|RENEWER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Service in "
operator|+
name|token
argument_list|,
name|ABFS
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|decodeIdentifier
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|assertTokenKind
argument_list|(
name|StubAbfsTokenIdentifier
operator|.
name|TOKEN_KIND
argument_list|,
name|token
argument_list|)
expr_stmt|;
comment|// now change the token kind on the stub, verify propagation
name|stub
operator|.
name|setKind
argument_list|(
name|KIND2
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|dt2
init|=
name|manager
operator|.
name|getDelegationToken
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertTokenKind
argument_list|(
name|KIND2
argument_list|,
name|dt2
argument_list|)
expr_stmt|;
comment|// change the token kind and, unless it is registered, it will not decode.
name|assertNull
argument_list|(
literal|"Token is of unknown kind, must not decode"
argument_list|,
name|dt2
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// closing the manager will close the stub too.
name|manager
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not closed: "
operator|+
name|stub
argument_list|,
name|stub
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Instantiate a DT manager in the renewal workflow: the manager is    * unbound; tokens must still be issued and cancelled.    */
annotation|@
name|Test
DECL|method|testRenewalThroughManager ()
specifier|public
name|void
name|testRenewalThroughManager
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create without going through the DT manager, which is of course unbound.
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|dt
init|=
name|createToken
argument_list|(
literal|0
argument_list|,
name|FSURI
argument_list|,
name|OWNER
argument_list|,
operator|new
name|Text
argument_list|(
name|RENEWER
argument_list|)
argument_list|)
decl_stmt|;
comment|// create a DT manager in the renewer codepath.
name|AbfsDelegationTokenManager
name|manager
init|=
operator|new
name|AbfsDelegationTokenManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|StubDelegationTokenManager
name|stub
init|=
name|getTokenManager
argument_list|(
name|manager
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Stub should not bebound "
operator|+
name|stub
argument_list|,
name|stub
operator|.
name|getFsURI
argument_list|()
argument_list|)
expr_stmt|;
name|StubAbfsTokenIdentifier
name|dtId
init|=
operator|(
name|StubAbfsTokenIdentifier
operator|)
name|dt
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|String
name|idStr
init|=
name|dtId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"URI in "
operator|+
name|idStr
argument_list|,
name|FSURI
argument_list|,
name|dtId
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"renewer in "
operator|+
name|idStr
argument_list|,
name|RENEWER
argument_list|,
name|dtId
operator|.
name|getRenewer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|renewDelegationToken
argument_list|(
name|dt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Renewal count in "
operator|+
name|stub
argument_list|,
literal|1
argument_list|,
name|stub
operator|.
name|getRenewals
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|cancelDelegationToken
argument_list|(
name|dt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cancel count in "
operator|+
name|stub
argument_list|,
literal|1
argument_list|,
name|stub
operator|.
name|getCancellations
argument_list|()
argument_list|)
expr_stmt|;
comment|// closing the manager will close the stub too.
name|manager
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not closed: "
operator|+
name|stub
argument_list|,
name|stub
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

