begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  **/
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureNativeFileSystemStore
operator|.
name|DEFAULT_STORAGE_EMULATOR_ACCOUNT_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration
operator|.
name|SubsetConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemInstrumentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
operator|.
name|AzureFileSystemMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|AccessCondition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|CloudStorageAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|StorageCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|StorageCredentialsAccountAndKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|StorageCredentialsAnonymous
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobContainerPermissions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobContainerPublicAccessType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobOutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|SharedAccessBlobPermissions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|SharedAccessBlobPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|core
operator|.
name|Base64
import|;
end_import

begin_comment
comment|/**  * Helper class to create WASB file systems backed by either a mock in-memory  * implementation or a real Azure Storage account. See RunningLiveWasbTests.txt  * for instructions on how to connect to a real Azure Storage account.  */
end_comment

begin_class
DECL|class|AzureBlobStorageTestAccount
specifier|public
specifier|final
class|class
name|AzureBlobStorageTestAccount
block|{
DECL|field|ACCOUNT_KEY_PROPERTY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ACCOUNT_KEY_PROPERTY_NAME
init|=
literal|"fs.azure.account.key."
decl_stmt|;
DECL|field|SAS_PROPERTY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SAS_PROPERTY_NAME
init|=
literal|"fs.azure.sas."
decl_stmt|;
DECL|field|TEST_CONFIGURATION_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CONFIGURATION_FILE_NAME
init|=
literal|"azure-test.xml"
decl_stmt|;
DECL|field|TEST_ACCOUNT_NAME_PROPERTY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ACCOUNT_NAME_PROPERTY_NAME
init|=
literal|"fs.azure.test.account.name"
decl_stmt|;
DECL|field|MOCK_ACCOUNT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|MOCK_ACCOUNT_NAME
init|=
literal|"mockAccount.blob.core.windows.net"
decl_stmt|;
DECL|field|MOCK_CONTAINER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|MOCK_CONTAINER_NAME
init|=
literal|"mockContainer"
decl_stmt|;
DECL|field|WASB_AUTHORITY_DELIMITER
specifier|public
specifier|static
specifier|final
name|String
name|WASB_AUTHORITY_DELIMITER
init|=
literal|"@"
decl_stmt|;
DECL|field|WASB_SCHEME
specifier|public
specifier|static
specifier|final
name|String
name|WASB_SCHEME
init|=
literal|"wasb"
decl_stmt|;
DECL|field|PATH_DELIMITER
specifier|public
specifier|static
specifier|final
name|String
name|PATH_DELIMITER
init|=
literal|"/"
decl_stmt|;
DECL|field|AZURE_ROOT_CONTAINER
specifier|public
specifier|static
specifier|final
name|String
name|AZURE_ROOT_CONTAINER
init|=
literal|"$root"
decl_stmt|;
DECL|field|MOCK_WASB_URI
specifier|public
specifier|static
specifier|final
name|String
name|MOCK_WASB_URI
init|=
literal|"wasb://"
operator|+
name|MOCK_CONTAINER_NAME
operator|+
name|WASB_AUTHORITY_DELIMITER
operator|+
name|MOCK_ACCOUNT_NAME
operator|+
literal|"/"
decl_stmt|;
DECL|field|USE_EMULATOR_PROPERTY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|USE_EMULATOR_PROPERTY_NAME
init|=
literal|"fs.azure.test.emulator"
decl_stmt|;
DECL|field|KEY_DISABLE_THROTTLING
specifier|private
specifier|static
specifier|final
name|String
name|KEY_DISABLE_THROTTLING
init|=
literal|"fs.azure.disable.bandwidth.throttling"
decl_stmt|;
DECL|field|KEY_READ_TOLERATE_CONCURRENT_APPEND
specifier|private
specifier|static
specifier|final
name|String
name|KEY_READ_TOLERATE_CONCURRENT_APPEND
init|=
literal|"fs.azure.io.read.tolerate.concurrent.append"
decl_stmt|;
DECL|field|account
specifier|private
name|CloudStorageAccount
name|account
decl_stmt|;
DECL|field|container
specifier|private
name|CloudBlobContainer
name|container
decl_stmt|;
DECL|field|blob
specifier|private
name|CloudBlockBlob
name|blob
decl_stmt|;
DECL|field|fs
specifier|private
name|NativeAzureFileSystem
name|fs
decl_stmt|;
DECL|field|storage
specifier|private
name|AzureNativeFileSystemStore
name|storage
decl_stmt|;
DECL|field|mockStorage
specifier|private
name|MockStorageInterface
name|mockStorage
decl_stmt|;
DECL|field|allMetrics
specifier|private
specifier|static
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|MetricsRecord
argument_list|>
name|allMetrics
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|MetricsRecord
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|AzureBlobStorageTestAccount (NativeAzureFileSystem fs, CloudStorageAccount account, CloudBlobContainer container)
specifier|private
name|AzureBlobStorageTestAccount
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
name|CloudStorageAccount
name|account
parameter_list|,
name|CloudBlobContainer
name|container
parameter_list|)
block|{
name|this
operator|.
name|account
operator|=
name|account
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
comment|/**    * Create a test account with an initialized storage reference.    *     * @param storage    *          -- store to be accessed by the account    * @param account    *          -- Windows Azure account object    * @param container    *          -- Windows Azure container object    */
DECL|method|AzureBlobStorageTestAccount (AzureNativeFileSystemStore storage, CloudStorageAccount account, CloudBlobContainer container)
specifier|private
name|AzureBlobStorageTestAccount
parameter_list|(
name|AzureNativeFileSystemStore
name|storage
parameter_list|,
name|CloudStorageAccount
name|account
parameter_list|,
name|CloudBlobContainer
name|container
parameter_list|)
block|{
name|this
operator|.
name|account
operator|=
name|account
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|storage
operator|=
name|storage
expr_stmt|;
block|}
comment|/**    * Create a test account sessions with the default root container.    *     * @param fs    *          - file system, namely WASB file system    * @param account    *          - Windows Azure account object    * @param blob    *          - block blob reference    */
DECL|method|AzureBlobStorageTestAccount (NativeAzureFileSystem fs, CloudStorageAccount account, CloudBlockBlob blob)
specifier|private
name|AzureBlobStorageTestAccount
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
name|CloudStorageAccount
name|account
parameter_list|,
name|CloudBlockBlob
name|blob
parameter_list|)
block|{
name|this
operator|.
name|account
operator|=
name|account
expr_stmt|;
name|this
operator|.
name|blob
operator|=
name|blob
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
DECL|method|AzureBlobStorageTestAccount (NativeAzureFileSystem fs, MockStorageInterface mockStorage)
specifier|private
name|AzureBlobStorageTestAccount
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
name|MockStorageInterface
name|mockStorage
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|mockStorage
operator|=
name|mockStorage
expr_stmt|;
block|}
DECL|method|addRecord (MetricsRecord record)
specifier|private
specifier|static
name|void
name|addRecord
parameter_list|(
name|MetricsRecord
name|record
parameter_list|)
block|{
name|allMetrics
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
DECL|method|getMockContainerUri ()
specifier|public
specifier|static
name|String
name|getMockContainerUri
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"http://%s/%s"
argument_list|,
name|AzureBlobStorageTestAccount
operator|.
name|MOCK_ACCOUNT_NAME
argument_list|,
name|AzureBlobStorageTestAccount
operator|.
name|MOCK_CONTAINER_NAME
argument_list|)
return|;
block|}
DECL|method|toMockUri (String path)
specifier|public
specifier|static
name|String
name|toMockUri
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"http://%s/%s/%s"
argument_list|,
name|AzureBlobStorageTestAccount
operator|.
name|MOCK_ACCOUNT_NAME
argument_list|,
name|AzureBlobStorageTestAccount
operator|.
name|MOCK_CONTAINER_NAME
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|method|toMockUri (Path path)
specifier|public
specifier|static
name|String
name|toMockUri
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// Remove the first SEPARATOR
return|return
name|toMockUri
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLatestMetricValue (String metricName, Number defaultValue)
specifier|public
name|Number
name|getLatestMetricValue
parameter_list|(
name|String
name|metricName
parameter_list|,
name|Number
name|defaultValue
parameter_list|)
throws|throws
name|IndexOutOfBoundsException
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Number
name|ret
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MetricsRecord
name|currentRecord
range|:
name|allMetrics
control|)
block|{
comment|// First check if this record is coming for my file system.
if|if
condition|(
name|wasGeneratedByMe
argument_list|(
name|currentRecord
argument_list|)
condition|)
block|{
for|for
control|(
name|AbstractMetric
name|currentMetric
range|:
name|currentRecord
operator|.
name|metrics
argument_list|()
control|)
block|{
if|if
condition|(
name|currentMetric
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|metricName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|ret
operator|=
name|currentMetric
operator|.
name|value
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|metricName
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Checks if the given record was generated by my WASB file system instance.    * @param currentRecord The metrics record to check.    * @return    */
DECL|method|wasGeneratedByMe (MetricsRecord currentRecord)
specifier|private
name|boolean
name|wasGeneratedByMe
parameter_list|(
name|MetricsRecord
name|currentRecord
parameter_list|)
block|{
name|String
name|myFsId
init|=
name|fs
operator|.
name|getInstrumentation
argument_list|()
operator|.
name|getFileSystemInstanceId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|MetricsTag
name|currentTag
range|:
name|currentRecord
operator|.
name|tags
argument_list|()
control|)
block|{
if|if
condition|(
name|currentTag
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"wasbFileSystemId"
argument_list|)
condition|)
block|{
return|return
name|currentTag
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
name|myFsId
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Gets the blob reference to the given blob key.    *     * @param blobKey    *          The blob key (no initial slash).    * @return The blob reference.    */
DECL|method|getBlobReference (String blobKey)
specifier|public
name|CloudBlockBlob
name|getBlobReference
parameter_list|(
name|String
name|blobKey
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|container
operator|.
name|getBlockBlobReference
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|blobKey
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Acquires a short lease on the given blob in this test account.    *     * @param blobKey    *          The key to the blob (no initial slash).    * @return The lease ID.    */
DECL|method|acquireShortLease (String blobKey)
specifier|public
name|String
name|acquireShortLease
parameter_list|(
name|String
name|blobKey
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getBlobReference
argument_list|(
name|blobKey
argument_list|)
operator|.
name|acquireLease
argument_list|(
literal|60
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Releases the lease on the container.    *     * @param leaseID    *          The lease ID.    */
DECL|method|releaseLease (String leaseID, String blobKey)
specifier|public
name|void
name|releaseLease
parameter_list|(
name|String
name|leaseID
parameter_list|,
name|String
name|blobKey
parameter_list|)
throws|throws
name|Exception
block|{
name|AccessCondition
name|accessCondition
init|=
operator|new
name|AccessCondition
argument_list|()
decl_stmt|;
name|accessCondition
operator|.
name|setLeaseID
argument_list|(
name|leaseID
argument_list|)
expr_stmt|;
name|getBlobReference
argument_list|(
name|blobKey
argument_list|)
operator|.
name|releaseLease
argument_list|(
name|accessCondition
argument_list|)
expr_stmt|;
block|}
DECL|method|createMock ()
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|createMock
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createMock
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createMock (Configuration conf)
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|createMock
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|AzureNativeFileSystemStore
name|store
init|=
operator|new
name|AzureNativeFileSystemStore
argument_list|()
decl_stmt|;
name|MockStorageInterface
name|mockStorage
init|=
operator|new
name|MockStorageInterface
argument_list|()
decl_stmt|;
name|store
operator|.
name|setAzureStorageInteractionLayer
argument_list|(
name|mockStorage
argument_list|)
expr_stmt|;
name|NativeAzureFileSystem
name|fs
init|=
operator|new
name|NativeAzureFileSystem
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|addWasbToConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setMockAccountKey
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// register the fs provider.
name|fs
operator|.
name|initialize
argument_list|(
operator|new
name|URI
argument_list|(
name|MOCK_WASB_URI
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|AzureBlobStorageTestAccount
name|testAcct
init|=
operator|new
name|AzureBlobStorageTestAccount
argument_list|(
name|fs
argument_list|,
name|mockStorage
argument_list|)
decl_stmt|;
return|return
name|testAcct
return|;
block|}
comment|/**    * Creates a test account that goes against the storage emulator.    *     * @return The test account, or null if the emulator isn't setup.    */
DECL|method|createForEmulator ()
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|createForEmulator
parameter_list|()
throws|throws
name|Exception
block|{
name|NativeAzureFileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|CloudBlobContainer
name|container
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|createTestConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|USE_EMULATOR_PROPERTY_NAME
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// Not configured to test against the storage emulator.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipping emulator Azure test because configuration "
operator|+
literal|"doesn't indicate that it's running."
operator|+
literal|" Please see README.txt for guidance."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|CloudStorageAccount
name|account
init|=
name|CloudStorageAccount
operator|.
name|getDevelopmentStorageAccount
argument_list|()
decl_stmt|;
name|fs
operator|=
operator|new
name|NativeAzureFileSystem
argument_list|()
expr_stmt|;
name|String
name|containerName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"wasbtests-%s-%tQ"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|container
operator|=
name|account
operator|.
name|createCloudBlobClient
argument_list|()
operator|.
name|getContainerReference
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|container
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// Set account URI and initialize Azure file system.
name|URI
name|accountUri
init|=
name|createAccountUri
argument_list|(
name|DEFAULT_STORAGE_EMULATOR_ACCOUNT_NAME
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|accountUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Create test account initializing the appropriate member variables.
name|AzureBlobStorageTestAccount
name|testAcct
init|=
operator|new
name|AzureBlobStorageTestAccount
argument_list|(
name|fs
argument_list|,
name|account
argument_list|,
name|container
argument_list|)
decl_stmt|;
return|return
name|testAcct
return|;
block|}
DECL|method|createOutOfBandStore ( int uploadBlockSize, int downloadBlockSize)
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|createOutOfBandStore
parameter_list|(
name|int
name|uploadBlockSize
parameter_list|,
name|int
name|downloadBlockSize
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudBlobContainer
name|container
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|createTestConfiguration
argument_list|()
decl_stmt|;
name|CloudStorageAccount
name|account
init|=
name|createTestAccount
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|account
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|containerName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"wasbtests-%s-%tQ"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the container.
name|container
operator|=
name|account
operator|.
name|createCloudBlobClient
argument_list|()
operator|.
name|getContainerReference
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|container
operator|.
name|create
argument_list|()
expr_stmt|;
name|String
name|accountName
init|=
name|conf
operator|.
name|get
argument_list|(
name|TEST_ACCOUNT_NAME_PROPERTY_NAME
argument_list|)
decl_stmt|;
comment|// Ensure that custom throttling is disabled and tolerate concurrent
comment|// out-of-band appends.
name|conf
operator|.
name|setBoolean
argument_list|(
name|KEY_DISABLE_THROTTLING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|KEY_READ_TOLERATE_CONCURRENT_APPEND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Set account URI and initialize Azure file system.
name|URI
name|accountUri
init|=
name|createAccountUri
argument_list|(
name|accountName
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
comment|// Set up instrumentation.
comment|//
name|AzureFileSystemMetricsSystem
operator|.
name|fileSystemStarted
argument_list|()
expr_stmt|;
name|String
name|sourceName
init|=
name|NativeAzureFileSystem
operator|.
name|newMetricsSourceName
argument_list|()
decl_stmt|;
name|String
name|sourceDesc
init|=
literal|"Azure Storage Volume File System metrics"
decl_stmt|;
name|AzureFileSystemInstrumentation
name|instrumentation
init|=
operator|new
name|AzureFileSystemInstrumentation
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|AzureFileSystemMetricsSystem
operator|.
name|registerSource
argument_list|(
name|sourceName
argument_list|,
name|sourceDesc
argument_list|,
name|instrumentation
argument_list|)
expr_stmt|;
comment|// Create a new AzureNativeFileSystemStore object.
name|AzureNativeFileSystemStore
name|testStorage
init|=
operator|new
name|AzureNativeFileSystemStore
argument_list|()
decl_stmt|;
comment|// Initialize the store with the throttling feedback interfaces.
name|testStorage
operator|.
name|initialize
argument_list|(
name|accountUri
argument_list|,
name|conf
argument_list|,
name|instrumentation
argument_list|)
expr_stmt|;
comment|// Create test account initializing the appropriate member variables.
name|AzureBlobStorageTestAccount
name|testAcct
init|=
operator|new
name|AzureBlobStorageTestAccount
argument_list|(
name|testStorage
argument_list|,
name|account
argument_list|,
name|container
argument_list|)
decl_stmt|;
return|return
name|testAcct
return|;
block|}
comment|/**    * Sets the mock account key in the given configuration.    *     * @param conf    *          The configuration.    */
DECL|method|setMockAccountKey (Configuration conf)
specifier|public
specifier|static
name|void
name|setMockAccountKey
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setMockAccountKey
argument_list|(
name|conf
argument_list|,
name|MOCK_ACCOUNT_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the mock account key in the given configuration.    *     * @param conf    *          The configuration.    */
DECL|method|setMockAccountKey (Configuration conf, String accountName)
specifier|public
specifier|static
name|void
name|setMockAccountKey
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|accountName
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|ACCOUNT_KEY_PROPERTY_NAME
operator|+
name|accountName
argument_list|,
name|Base64
operator|.
name|encode
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createAccountUri (String accountName)
specifier|private
specifier|static
name|URI
name|createAccountUri
parameter_list|(
name|String
name|accountName
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|URI
argument_list|(
name|WASB_SCHEME
operator|+
literal|":"
operator|+
name|PATH_DELIMITER
operator|+
name|PATH_DELIMITER
operator|+
name|accountName
argument_list|)
return|;
block|}
DECL|method|createAccountUri (String accountName, String containerName)
specifier|private
specifier|static
name|URI
name|createAccountUri
parameter_list|(
name|String
name|accountName
parameter_list|,
name|String
name|containerName
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|URI
argument_list|(
name|WASB_SCHEME
operator|+
literal|":"
operator|+
name|PATH_DELIMITER
operator|+
name|PATH_DELIMITER
operator|+
name|containerName
operator|+
name|WASB_AUTHORITY_DELIMITER
operator|+
name|accountName
argument_list|)
return|;
block|}
DECL|method|create ()
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|create
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|create
argument_list|(
literal|""
argument_list|)
return|;
block|}
DECL|method|create (String containerNameSuffix)
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|create
parameter_list|(
name|String
name|containerNameSuffix
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|create
argument_list|(
name|containerNameSuffix
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
argument_list|)
return|;
block|}
comment|// Create a test account which uses throttling.
DECL|method|createThrottled ()
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|createThrottled
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|create
argument_list|(
literal|""
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateOptions
operator|.
name|useThrottling
argument_list|,
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
argument_list|)
return|;
block|}
DECL|method|create (Configuration conf)
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|create
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|create
argument_list|(
literal|""
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|createStorageAccount (String accountName, Configuration conf, boolean allowAnonymous)
specifier|static
name|CloudStorageAccount
name|createStorageAccount
parameter_list|(
name|String
name|accountName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|allowAnonymous
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|KeyProviderException
block|{
name|String
name|accountKey
init|=
name|AzureNativeFileSystemStore
operator|.
name|getAccountKeyFromConfiguration
argument_list|(
name|accountName
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|StorageCredentials
name|credentials
decl_stmt|;
if|if
condition|(
name|accountKey
operator|==
literal|null
operator|&&
name|allowAnonymous
condition|)
block|{
name|credentials
operator|=
name|StorageCredentialsAnonymous
operator|.
name|ANONYMOUS
expr_stmt|;
block|}
else|else
block|{
name|credentials
operator|=
operator|new
name|StorageCredentialsAccountAndKey
argument_list|(
name|accountName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|accountKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|credentials
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|CloudStorageAccount
argument_list|(
name|credentials
argument_list|)
return|;
block|}
block|}
DECL|method|createTestConfiguration ()
specifier|private
specifier|static
name|Configuration
name|createTestConfiguration
parameter_list|()
block|{
return|return
name|createTestConfiguration
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|createTestConfiguration (Configuration conf)
specifier|protected
specifier|static
name|Configuration
name|createTestConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|addResource
argument_list|(
name|TEST_CONFIGURATION_FILE_NAME
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|// for programmatic setting of the wasb configuration.
comment|// note that tests can also get the
DECL|method|addWasbToConfiguration (Configuration conf)
specifier|public
specifier|static
name|void
name|addWasbToConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"fs.wasb.impl"
argument_list|,
literal|"org.apache.hadoop.fs.azure.NativeAzureFileSystem"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.wasbs.impl"
argument_list|,
literal|"org.apache.hadoop.fs.azure.NativeAzureFileSystem"
argument_list|)
expr_stmt|;
block|}
DECL|method|createTestAccount ()
specifier|static
name|CloudStorageAccount
name|createTestAccount
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|KeyProviderException
block|{
return|return
name|createTestAccount
argument_list|(
name|createTestConfiguration
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createTestAccount (Configuration conf)
specifier|static
name|CloudStorageAccount
name|createTestAccount
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|KeyProviderException
block|{
name|String
name|testAccountName
init|=
name|conf
operator|.
name|get
argument_list|(
name|TEST_ACCOUNT_NAME_PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|testAccountName
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipping live Azure test because of missing test account."
operator|+
literal|" Please see README.txt for guidance."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|createStorageAccount
argument_list|(
name|testAccountName
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|enum|CreateOptions
specifier|public
specifier|static
enum|enum
name|CreateOptions
block|{
DECL|enumConstant|UseSas
DECL|enumConstant|Readonly
DECL|enumConstant|CreateContainer
DECL|enumConstant|useThrottling
name|UseSas
block|,
name|Readonly
block|,
name|CreateContainer
block|,
name|useThrottling
block|}
DECL|method|create (String containerNameSuffix, EnumSet<CreateOptions> createOptions)
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|create
parameter_list|(
name|String
name|containerNameSuffix
parameter_list|,
name|EnumSet
argument_list|<
name|CreateOptions
argument_list|>
name|createOptions
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|create
argument_list|(
name|containerNameSuffix
argument_list|,
name|createOptions
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|create (String containerNameSuffix, EnumSet<CreateOptions> createOptions, Configuration initialConfiguration)
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|create
parameter_list|(
name|String
name|containerNameSuffix
parameter_list|,
name|EnumSet
argument_list|<
name|CreateOptions
argument_list|>
name|createOptions
parameter_list|,
name|Configuration
name|initialConfiguration
parameter_list|)
throws|throws
name|Exception
block|{
name|NativeAzureFileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|CloudBlobContainer
name|container
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|createTestConfiguration
argument_list|(
name|initialConfiguration
argument_list|)
decl_stmt|;
name|CloudStorageAccount
name|account
init|=
name|createTestAccount
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|fs
operator|=
operator|new
name|NativeAzureFileSystem
argument_list|()
expr_stmt|;
name|String
name|containerName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"wasbtests-%s-%tQ%s"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
name|containerNameSuffix
argument_list|)
decl_stmt|;
name|container
operator|=
name|account
operator|.
name|createCloudBlobClient
argument_list|()
operator|.
name|getContainerReference
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|createOptions
operator|.
name|contains
argument_list|(
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
condition|)
block|{
name|container
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|String
name|accountName
init|=
name|conf
operator|.
name|get
argument_list|(
name|TEST_ACCOUNT_NAME_PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|createOptions
operator|.
name|contains
argument_list|(
name|CreateOptions
operator|.
name|UseSas
argument_list|)
condition|)
block|{
name|String
name|sas
init|=
name|generateSAS
argument_list|(
name|container
argument_list|,
name|createOptions
operator|.
name|contains
argument_list|(
name|CreateOptions
operator|.
name|Readonly
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|createOptions
operator|.
name|contains
argument_list|(
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
condition|)
block|{
comment|// The caller doesn't want the container to be pre-created,
comment|// so delete it now that we have generated the SAS.
name|container
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|// Remove the account key from the configuration to make sure we don't
comment|// cheat and use that.
name|conf
operator|.
name|set
argument_list|(
name|ACCOUNT_KEY_PROPERTY_NAME
operator|+
name|accountName
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Set the SAS key.
name|conf
operator|.
name|set
argument_list|(
name|SAS_PROPERTY_NAME
operator|+
name|containerName
operator|+
literal|"."
operator|+
name|accountName
argument_list|,
name|sas
argument_list|)
expr_stmt|;
block|}
comment|// Check if throttling is turned on and set throttling parameters
comment|// appropriately.
if|if
condition|(
name|createOptions
operator|.
name|contains
argument_list|(
name|CreateOptions
operator|.
name|useThrottling
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|KEY_DISABLE_THROTTLING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|KEY_DISABLE_THROTTLING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Set account URI and initialize Azure file system.
name|URI
name|accountUri
init|=
name|createAccountUri
argument_list|(
name|accountName
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|accountUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Create test account initializing the appropriate member variables.
name|AzureBlobStorageTestAccount
name|testAcct
init|=
operator|new
name|AzureBlobStorageTestAccount
argument_list|(
name|fs
argument_list|,
name|account
argument_list|,
name|container
argument_list|)
decl_stmt|;
return|return
name|testAcct
return|;
block|}
DECL|method|generateContainerName ()
specifier|private
specifier|static
name|String
name|generateContainerName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|containerName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"wasbtests-%s-%tQ"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|containerName
return|;
block|}
DECL|method|generateSAS (CloudBlobContainer container, boolean readonly)
specifier|private
specifier|static
name|String
name|generateSAS
parameter_list|(
name|CloudBlobContainer
name|container
parameter_list|,
name|boolean
name|readonly
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create a container if it does not exist.
name|container
operator|.
name|createIfNotExists
argument_list|()
expr_stmt|;
comment|// Create a new shared access policy.
name|SharedAccessBlobPolicy
name|sasPolicy
init|=
operator|new
name|SharedAccessBlobPolicy
argument_list|()
decl_stmt|;
comment|// Create a UTC Gregorian calendar value.
name|GregorianCalendar
name|calendar
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Specify the current time as the start time for the shared access
comment|// signature.
comment|//
name|calendar
operator|.
name|setTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|sasPolicy
operator|.
name|setSharedAccessStartTime
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Use the start time delta one hour as the end time for the shared
comment|// access signature.
name|calendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sasPolicy
operator|.
name|setSharedAccessExpiryTime
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|readonly
condition|)
block|{
comment|// Set READ permissions
name|sasPolicy
operator|.
name|setPermissions
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SharedAccessBlobPermissions
operator|.
name|READ
argument_list|,
name|SharedAccessBlobPermissions
operator|.
name|LIST
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Set READ and WRITE permissions.
name|sasPolicy
operator|.
name|setPermissions
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SharedAccessBlobPermissions
operator|.
name|READ
argument_list|,
name|SharedAccessBlobPermissions
operator|.
name|WRITE
argument_list|,
name|SharedAccessBlobPermissions
operator|.
name|LIST
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create the container permissions.
name|BlobContainerPermissions
name|containerPermissions
init|=
operator|new
name|BlobContainerPermissions
argument_list|()
decl_stmt|;
comment|// Turn public access to the container off.
name|containerPermissions
operator|.
name|setPublicAccess
argument_list|(
name|BlobContainerPublicAccessType
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|container
operator|.
name|uploadPermissions
argument_list|(
name|containerPermissions
argument_list|)
expr_stmt|;
comment|// Create a shared access signature for the container.
name|String
name|sas
init|=
name|container
operator|.
name|generateSharedAccessSignature
argument_list|(
name|sasPolicy
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// HACK: when the just generated SAS is used straight away, we get an
comment|// authorization error intermittently. Sleeping for 1.5 seconds fixes that
comment|// on my box.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
comment|// Return to caller with the shared access signature.
return|return
name|sas
return|;
block|}
DECL|method|primePublicContainer (CloudBlobClient blobClient, String accountName, String containerName, String blobName, int fileSize)
specifier|public
specifier|static
name|void
name|primePublicContainer
parameter_list|(
name|CloudBlobClient
name|blobClient
parameter_list|,
name|String
name|accountName
parameter_list|,
name|String
name|containerName
parameter_list|,
name|String
name|blobName
parameter_list|,
name|int
name|fileSize
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create a container if it does not exist. The container name
comment|// must be lower case.
name|CloudBlobContainer
name|container
init|=
name|blobClient
operator|.
name|getContainerReference
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|container
operator|.
name|createIfNotExists
argument_list|()
expr_stmt|;
comment|// Create a new shared access policy.
name|SharedAccessBlobPolicy
name|sasPolicy
init|=
operator|new
name|SharedAccessBlobPolicy
argument_list|()
decl_stmt|;
comment|// Set READ and WRITE permissions.
name|sasPolicy
operator|.
name|setPermissions
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SharedAccessBlobPermissions
operator|.
name|READ
argument_list|,
name|SharedAccessBlobPermissions
operator|.
name|WRITE
argument_list|,
name|SharedAccessBlobPermissions
operator|.
name|LIST
argument_list|,
name|SharedAccessBlobPermissions
operator|.
name|DELETE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the container permissions.
name|BlobContainerPermissions
name|containerPermissions
init|=
operator|new
name|BlobContainerPermissions
argument_list|()
decl_stmt|;
comment|// Turn public access to the container off.
name|containerPermissions
operator|.
name|setPublicAccess
argument_list|(
name|BlobContainerPublicAccessType
operator|.
name|CONTAINER
argument_list|)
expr_stmt|;
comment|// Set the policy using the values set above.
name|containerPermissions
operator|.
name|getSharedAccessPolicies
argument_list|()
operator|.
name|put
argument_list|(
literal|"testwasbpolicy"
argument_list|,
name|sasPolicy
argument_list|)
expr_stmt|;
name|container
operator|.
name|uploadPermissions
argument_list|(
name|containerPermissions
argument_list|)
expr_stmt|;
comment|// Create a blob output stream.
name|CloudBlockBlob
name|blob
init|=
name|container
operator|.
name|getBlockBlobReference
argument_list|(
name|blobName
argument_list|)
decl_stmt|;
name|BlobOutputStream
name|outputStream
init|=
name|blob
operator|.
name|openOutputStream
argument_list|()
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|fileSize
index|]
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createAnonymous ( final String blobName, final int fileSize)
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|createAnonymous
parameter_list|(
specifier|final
name|String
name|blobName
parameter_list|,
specifier|final
name|int
name|fileSize
parameter_list|)
throws|throws
name|Exception
block|{
name|NativeAzureFileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|CloudBlobContainer
name|container
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|createTestConfiguration
argument_list|()
decl_stmt|,
name|noTestAccountConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Set up a session with the cloud blob client to generate SAS and check the
comment|// existence of a container and capture the container object.
name|CloudStorageAccount
name|account
init|=
name|createTestAccount
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CloudBlobClient
name|blobClient
init|=
name|account
operator|.
name|createCloudBlobClient
argument_list|()
decl_stmt|;
comment|// Capture the account URL and the account name.
name|String
name|accountName
init|=
name|conf
operator|.
name|get
argument_list|(
name|TEST_ACCOUNT_NAME_PROPERTY_NAME
argument_list|)
decl_stmt|;
comment|// Generate a container name and create a shared access signature string for
comment|// it.
comment|//
name|String
name|containerName
init|=
name|generateContainerName
argument_list|()
decl_stmt|;
comment|// Set up public container with the specified blob name.
name|primePublicContainer
argument_list|(
name|blobClient
argument_list|,
name|accountName
argument_list|,
name|containerName
argument_list|,
name|blobName
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
comment|// Capture the blob container object. It should exist after generating the
comment|// shared access signature.
name|container
operator|=
name|blobClient
operator|.
name|getContainerReference
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|container
operator|||
operator|!
name|container
operator|.
name|exists
argument_list|()
condition|)
block|{
specifier|final
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Container '%s' expected but not found while creating SAS account."
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|// Set the account URI.
name|URI
name|accountUri
init|=
name|createAccountUri
argument_list|(
name|accountName
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
comment|// Initialize the Native Azure file system with anonymous credentials.
name|fs
operator|=
operator|new
name|NativeAzureFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|accountUri
argument_list|,
name|noTestAccountConf
argument_list|)
expr_stmt|;
comment|// Create test account initializing the appropriate member variables.
name|AzureBlobStorageTestAccount
name|testAcct
init|=
operator|new
name|AzureBlobStorageTestAccount
argument_list|(
name|fs
argument_list|,
name|account
argument_list|,
name|container
argument_list|)
decl_stmt|;
comment|// Return to caller with test account.
return|return
name|testAcct
return|;
block|}
DECL|method|primeRootContainer (CloudBlobClient blobClient, String accountName, String blobName, int fileSize)
specifier|private
specifier|static
name|CloudBlockBlob
name|primeRootContainer
parameter_list|(
name|CloudBlobClient
name|blobClient
parameter_list|,
name|String
name|accountName
parameter_list|,
name|String
name|blobName
parameter_list|,
name|int
name|fileSize
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create a container if it does not exist. The container name
comment|// must be lower case.
name|CloudBlobContainer
name|container
init|=
name|blobClient
operator|.
name|getContainerReference
argument_list|(
literal|"https://"
operator|+
name|accountName
operator|+
literal|"/"
operator|+
literal|"$root"
argument_list|)
decl_stmt|;
name|container
operator|.
name|createIfNotExists
argument_list|()
expr_stmt|;
comment|// Create a blob output stream.
name|CloudBlockBlob
name|blob
init|=
name|container
operator|.
name|getBlockBlobReference
argument_list|(
name|blobName
argument_list|)
decl_stmt|;
name|BlobOutputStream
name|outputStream
init|=
name|blob
operator|.
name|openOutputStream
argument_list|()
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|fileSize
index|]
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Return a reference to the block blob object.
return|return
name|blob
return|;
block|}
DECL|method|createRoot (final String blobName, final int fileSize)
specifier|public
specifier|static
name|AzureBlobStorageTestAccount
name|createRoot
parameter_list|(
specifier|final
name|String
name|blobName
parameter_list|,
specifier|final
name|int
name|fileSize
parameter_list|)
throws|throws
name|Exception
block|{
name|NativeAzureFileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|CloudBlobContainer
name|container
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|createTestConfiguration
argument_list|()
decl_stmt|;
comment|// Set up a session with the cloud blob client to generate SAS and check the
comment|// existence of a container and capture the container object.
name|CloudStorageAccount
name|account
init|=
name|createTestAccount
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CloudBlobClient
name|blobClient
init|=
name|account
operator|.
name|createCloudBlobClient
argument_list|()
decl_stmt|;
comment|// Capture the account URL and the account name.
name|String
name|accountName
init|=
name|conf
operator|.
name|get
argument_list|(
name|TEST_ACCOUNT_NAME_PROPERTY_NAME
argument_list|)
decl_stmt|;
comment|// Set up public container with the specified blob name.
name|CloudBlockBlob
name|blobRoot
init|=
name|primeRootContainer
argument_list|(
name|blobClient
argument_list|,
name|accountName
argument_list|,
name|blobName
argument_list|,
name|fileSize
argument_list|)
decl_stmt|;
comment|// Capture the blob container object. It should exist after generating the
comment|// shared access signature.
name|container
operator|=
name|blobClient
operator|.
name|getContainerReference
argument_list|(
name|AZURE_ROOT_CONTAINER
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|container
operator|||
operator|!
name|container
operator|.
name|exists
argument_list|()
condition|)
block|{
specifier|final
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Container '%s' expected but not found while creating SAS account."
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|// Set the account URI without a container name.
name|URI
name|accountUri
init|=
name|createAccountUri
argument_list|(
name|accountName
argument_list|)
decl_stmt|;
comment|// Initialize the Native Azure file system with anonymous credentials.
name|fs
operator|=
operator|new
name|NativeAzureFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|accountUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Create test account initializing the appropriate member variables.
comment|// Set the container value to null for the default root container.
name|AzureBlobStorageTestAccount
name|testAcct
init|=
operator|new
name|AzureBlobStorageTestAccount
argument_list|(
name|fs
argument_list|,
name|account
argument_list|,
name|blobRoot
argument_list|)
decl_stmt|;
comment|// Return to caller with test account.
return|return
name|testAcct
return|;
block|}
DECL|method|closeFileSystem ()
specifier|public
name|void
name|closeFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|deleteIfExists
argument_list|()
expr_stmt|;
name|container
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|blob
operator|!=
literal|null
condition|)
block|{
comment|// The blob member variable is set for blobs under root containers.
comment|// Delete blob objects created for root container tests when cleaning
comment|// up the test account.
name|blob
operator|.
name|delete
argument_list|()
expr_stmt|;
name|blob
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getFileSystem ()
specifier|public
name|NativeAzureFileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
DECL|method|getStore ()
specifier|public
name|AzureNativeFileSystemStore
name|getStore
parameter_list|()
block|{
return|return
name|this
operator|.
name|storage
return|;
block|}
comment|/**    * Gets the real blob container backing this account if it's not a mock.    *     * @return A container, or null if it's a mock.    */
DECL|method|getRealContainer ()
specifier|public
name|CloudBlobContainer
name|getRealContainer
parameter_list|()
block|{
return|return
name|container
return|;
block|}
comment|/**    * Gets the real blob account backing this account if it's not a mock.    *     * @return An account, or null if it's a mock.    */
DECL|method|getRealAccount ()
specifier|public
name|CloudStorageAccount
name|getRealAccount
parameter_list|()
block|{
return|return
name|account
return|;
block|}
comment|/**    * Gets the mock storage interface if this account is backed by a mock.    *     * @return The mock storage, or null if it's backed by a real account.    */
DECL|method|getMockStorage ()
specifier|public
name|MockStorageInterface
name|getMockStorage
parameter_list|()
block|{
return|return
name|mockStorage
return|;
block|}
DECL|class|StandardCollector
specifier|public
specifier|static
class|class
name|StandardCollector
implements|implements
name|MetricsSink
block|{
annotation|@
name|Override
DECL|method|init (SubsetConfiguration conf)
specifier|public
name|void
name|init
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|putMetrics (MetricsRecord record)
specifier|public
name|void
name|putMetrics
parameter_list|(
name|MetricsRecord
name|record
parameter_list|)
block|{
name|addRecord
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{     }
block|}
block|}
end_class

end_unit

