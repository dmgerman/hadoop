begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_class
DECL|class|TestWasbUriAndConfiguration
specifier|public
class|class
name|TestWasbUriAndConfiguration
block|{
DECL|field|FILE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|FILE_SIZE
init|=
literal|4096
decl_stmt|;
DECL|field|PATH_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|PATH_DELIMITER
init|=
literal|"/"
decl_stmt|;
DECL|field|accountName
specifier|protected
name|String
name|accountName
decl_stmt|;
DECL|field|accountKey
specifier|protected
name|String
name|accountKey
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|static
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|runningInSASMode
specifier|private
name|boolean
name|runningInSASMode
init|=
literal|false
decl_stmt|;
annotation|@
name|Rule
DECL|field|tempDir
specifier|public
specifier|final
name|TemporaryFolder
name|tempDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|testAccount
specifier|private
name|AzureBlobStorageTestAccount
name|testAccount
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testAccount
operator|!=
literal|null
condition|)
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|testAccount
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setMode ()
specifier|public
name|void
name|setMode
parameter_list|()
block|{
name|runningInSASMode
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createTestConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_USE_SECURE_MODE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|validateIOStreams (Path filePath)
specifier|private
name|boolean
name|validateIOStreams
parameter_list|(
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Capture the file system from the test account.
name|FileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
return|return
name|validateIOStreams
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
return|;
block|}
DECL|method|validateIOStreams (FileSystem fs, Path filePath)
specifier|private
name|boolean
name|validateIOStreams
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create and write a file
name|OutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Return true if the the count is equivalent to the file size.
return|return
operator|(
name|FILE_SIZE
operator|==
name|readInputStream
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
operator|)
return|;
block|}
DECL|method|readInputStream (Path filePath)
specifier|private
name|int
name|readInputStream
parameter_list|(
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Capture the file system from the test account.
name|FileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
return|return
name|readInputStream
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
return|;
block|}
DECL|method|readInputStream (FileSystem fs, Path filePath)
specifier|private
name|int
name|readInputStream
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Read the file
name|InputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|inputStream
operator|.
name|read
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Return true if the the count is equivalent to the file size.
return|return
name|count
return|;
block|}
comment|// Positive tests to exercise making a connection with to Azure account using
comment|// account key.
annotation|@
name|Test
DECL|method|testConnectUsingKey ()
specifier|public
name|void
name|testConnectUsingKey
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
expr_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
comment|// Validate input and output on the connection.
name|assertTrue
argument_list|(
name|validateIOStreams
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/wasb_scheme"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConnectUsingSAS ()
specifier|public
name|void
name|testConnectUsingSAS
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|runningInSASMode
argument_list|)
expr_stmt|;
comment|// Create the test account with SAS credentials.
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|""
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateOptions
operator|.
name|UseSas
argument_list|,
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
comment|// Validate input and output on the connection.
comment|// NOTE: As of 4/15/2013, Azure Storage has a deficiency that prevents the
comment|// full scenario from working (CopyFromBlob doesn't work with SAS), so
comment|// just do a minor check until that is corrected.
name|assertFalse
argument_list|(
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/IDontExist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//assertTrue(validateIOStreams(new Path("/sastest.txt")));
block|}
annotation|@
name|Test
DECL|method|testConnectUsingSASReadonly ()
specifier|public
name|void
name|testConnectUsingSASReadonly
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|runningInSASMode
argument_list|)
expr_stmt|;
comment|// Create the test account with SAS credentials.
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|""
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateOptions
operator|.
name|UseSas
argument_list|,
name|CreateOptions
operator|.
name|CreateContainer
argument_list|,
name|CreateOptions
operator|.
name|Readonly
argument_list|)
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
comment|// Create a blob in there
specifier|final
name|String
name|blobKey
init|=
literal|"blobForReadonly"
decl_stmt|;
name|CloudBlobContainer
name|container
init|=
name|testAccount
operator|.
name|getRealContainer
argument_list|()
decl_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|container
operator|.
name|getBlockBlobReference
argument_list|(
name|blobKey
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|inputStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
decl_stmt|;
name|blob
operator|.
name|upload
argument_list|(
name|inputStream
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make sure we can read it from the file system
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|blobKey
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|obtained
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|DataInputStream
name|obtainedInputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|obtainedInputStream
operator|.
name|readFully
argument_list|(
name|obtained
argument_list|)
expr_stmt|;
name|obtainedInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|obtained
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConnectUsingAnonymous ()
specifier|public
name|void
name|testConnectUsingAnonymous
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create test account with anonymous credentials
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createAnonymous
argument_list|(
literal|"testWasb.txt"
argument_list|,
name|FILE_SIZE
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
comment|// Read the file from the public folder using anonymous credentials.
name|assertEquals
argument_list|(
name|FILE_SIZE
argument_list|,
name|readInputStream
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testWasb.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConnectToEmulator ()
specifier|public
name|void
name|testConnectToEmulator
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createForEmulator
argument_list|()
expr_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|validateIOStreams
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testFile"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that we can connect to fully qualified accounts outside of    * blob.core.windows.net    */
annotation|@
name|Test
DECL|method|testConnectToFullyQualifiedAccountMock ()
specifier|public
name|void
name|testConnectToFullyQualifiedAccountMock
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|AzureBlobStorageTestAccount
operator|.
name|setMockAccountKey
argument_list|(
name|conf
argument_list|,
literal|"mockAccount.mock.authority.net"
argument_list|)
expr_stmt|;
name|AzureNativeFileSystemStore
name|store
init|=
operator|new
name|AzureNativeFileSystemStore
argument_list|()
decl_stmt|;
name|MockStorageInterface
name|mockStorage
init|=
operator|new
name|MockStorageInterface
argument_list|()
decl_stmt|;
name|store
operator|.
name|setAzureStorageInteractionLayer
argument_list|(
name|mockStorage
argument_list|)
expr_stmt|;
name|NativeAzureFileSystem
name|fs
init|=
operator|new
name|NativeAzureFileSystem
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
operator|new
name|URI
argument_list|(
literal|"wasb://mockContainer@mockAccount.mock.authority.net"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockStorage
operator|.
name|getBackingStore
argument_list|()
operator|.
name|exists
argument_list|(
literal|"http://mockAccount.mock.authority.net/mockContainer/x"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testConnectToRoot ()
specifier|public
name|void
name|testConnectToRoot
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up blob names.
specifier|final
name|String
name|blobPrefix
init|=
name|String
operator|.
name|format
argument_list|(
literal|"wasbtests-%s-%tQ-blob"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|inblobName
init|=
name|blobPrefix
operator|+
literal|"_In"
operator|+
literal|".txt"
decl_stmt|;
specifier|final
name|String
name|outblobName
init|=
name|blobPrefix
operator|+
literal|"_Out"
operator|+
literal|".txt"
decl_stmt|;
comment|// Create test account with default root access.
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createRoot
argument_list|(
name|inblobName
argument_list|,
name|FILE_SIZE
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
comment|// Read the file from the default container.
name|assertEquals
argument_list|(
name|FILE_SIZE
argument_list|,
name|readInputStream
argument_list|(
operator|new
name|Path
argument_list|(
name|PATH_DELIMITER
operator|+
name|inblobName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Capture file system.
name|FileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Create output path and open an output stream to the root folder.
name|Path
name|outputPath
init|=
operator|new
name|Path
argument_list|(
name|PATH_DELIMITER
operator|+
name|outblobName
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|outputPath
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected an AzureException when writing to root folder."
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AzureException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Expected AzureException but got %s instead."
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|errMsg
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Positive tests to exercise throttling I/O path. Connections are made to an
comment|// Azure account using account key.
comment|//
DECL|method|testConnectWithThrottling ()
specifier|public
name|void
name|testConnectWithThrottling
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createThrottled
argument_list|()
expr_stmt|;
comment|// Validate input and output on the connection.
name|assertTrue
argument_list|(
name|validateIOStreams
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/wasb_scheme"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a file and writes a single byte with the given value in it.    */
DECL|method|writeSingleByte (FileSystem fs, Path testFile, int toWrite)
specifier|private
specifier|static
name|void
name|writeSingleByte
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|testFile
parameter_list|,
name|int
name|toWrite
parameter_list|)
throws|throws
name|Exception
block|{
name|OutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Reads the file given and makes sure that it's a single-byte file with the    * given value in it.    */
DECL|method|assertSingleByteValue (FileSystem fs, Path testFile, int expectedValue)
specifier|private
specifier|static
name|void
name|assertSingleByteValue
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|testFile
parameter_list|,
name|int
name|expectedValue
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|int
name|byteRead
init|=
name|inputStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File unexpectedly empty: "
operator|+
name|testFile
argument_list|,
name|byteRead
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File has more than a single byte: "
operator|+
name|testFile
argument_list|,
name|inputStream
operator|.
name|read
argument_list|()
operator|<
literal|0
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unxpected content in: "
operator|+
name|testFile
argument_list|,
name|expectedValue
argument_list|,
name|byteRead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleContainers ()
specifier|public
name|void
name|testMultipleContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|AzureBlobStorageTestAccount
name|firstAccount
init|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|"first"
argument_list|)
decl_stmt|,
name|secondAccount
init|=
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|"second"
argument_list|)
decl_stmt|;
name|assumeNotNull
argument_list|(
name|firstAccount
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|secondAccount
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
name|firstFs
init|=
name|firstAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|,
name|secondFs
init|=
name|secondAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testWasb"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|validateIOStreams
argument_list|(
name|firstFs
argument_list|,
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|validateIOStreams
argument_list|(
name|secondFs
argument_list|,
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that we're really dealing with two file systems here.
name|writeSingleByte
argument_list|(
name|firstFs
argument_list|,
name|testFile
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|writeSingleByte
argument_list|(
name|secondFs
argument_list|,
name|testFile
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertSingleByteValue
argument_list|(
name|firstFs
argument_list|,
name|testFile
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertSingleByteValue
argument_list|(
name|secondFs
argument_list|,
name|testFile
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|firstAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|secondAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultKeyProvider ()
specifier|public
name|void
name|testDefaultKeyProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|account
init|=
literal|"testacct"
decl_stmt|;
name|String
name|key
init|=
literal|"testkey"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SimpleKeyProvider
operator|.
name|KEY_ACCOUNT_KEY_PREFIX
operator|+
name|account
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|AzureNativeFileSystemStore
operator|.
name|getAccountKeyFromConfiguration
argument_list|(
name|account
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCredsFromCredentialProvider ()
specifier|public
name|void
name|testCredsFromCredentialProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|runningInSASMode
argument_list|)
expr_stmt|;
name|String
name|account
init|=
literal|"testacct"
decl_stmt|;
name|String
name|key
init|=
literal|"testkey"
decl_stmt|;
comment|// set up conf to have a cred provider
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|File
name|file
init|=
name|tempDir
operator|.
name|newFile
argument_list|(
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|jks
init|=
name|ProviderUtils
operator|.
name|nestURIForLocalJavaKeyStoreProvider
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|jks
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|provisionAccountKey
argument_list|(
name|conf
argument_list|,
name|account
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// also add to configuration as clear text that should be overridden
name|conf
operator|.
name|set
argument_list|(
name|SimpleKeyProvider
operator|.
name|KEY_ACCOUNT_KEY_PREFIX
operator|+
name|account
argument_list|,
name|key
operator|+
literal|"cleartext"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|AzureNativeFileSystemStore
operator|.
name|getAccountKeyFromConfiguration
argument_list|(
name|account
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// result should contain the credential provider key not the config key
name|assertEquals
argument_list|(
literal|"AccountKey incorrect."
argument_list|,
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|provisionAccountKey ( final Configuration conf, String account, String key)
name|void
name|provisionAccountKey
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|String
name|account
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
comment|// add our creds to the provider
specifier|final
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|SimpleKeyProvider
operator|.
name|KEY_ACCOUNT_KEY_PREFIX
operator|+
name|account
argument_list|,
name|key
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidKeyProvider ()
specifier|public
name|void
name|testValidKeyProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|account
init|=
literal|"testacct"
decl_stmt|;
name|String
name|key
init|=
literal|"testkey"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SimpleKeyProvider
operator|.
name|KEY_ACCOUNT_KEY_PREFIX
operator|+
name|account
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.azure.account.keyprovider."
operator|+
name|account
argument_list|,
name|SimpleKeyProvider
operator|.
name|class
argument_list|,
name|KeyProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|AzureNativeFileSystemStore
operator|.
name|getAccountKeyFromConfiguration
argument_list|(
name|account
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidKeyProviderNonexistantClass ()
specifier|public
name|void
name|testInvalidKeyProviderNonexistantClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|account
init|=
literal|"testacct"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.azure.account.keyprovider."
operator|+
name|account
argument_list|,
literal|"org.apache.Nonexistant.Class"
argument_list|)
expr_stmt|;
try|try
block|{
name|AzureNativeFileSystemStore
operator|.
name|getAccountKeyFromConfiguration
argument_list|(
name|account
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Nonexistant key provider class should have thrown a "
operator|+
literal|"KeyProviderException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyProviderException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testInvalidKeyProviderWrongClass ()
specifier|public
name|void
name|testInvalidKeyProviderWrongClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|account
init|=
literal|"testacct"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.azure.account.keyprovider."
operator|+
name|account
argument_list|,
literal|"java.lang.String"
argument_list|)
expr_stmt|;
try|try
block|{
name|AzureNativeFileSystemStore
operator|.
name|getAccountKeyFromConfiguration
argument_list|(
name|account
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Key provider class that doesn't implement KeyProvider "
operator|+
literal|"should have thrown a KeyProviderException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyProviderException
name|e
parameter_list|)
block|{     }
block|}
comment|/**    * Tests the cases when the URI is specified with no authority, i.e.    * wasb:///path/to/file.    */
annotation|@
name|Test
DECL|method|testNoUriAuthority ()
specifier|public
name|void
name|testNoUriAuthority
parameter_list|()
throws|throws
name|Exception
block|{
comment|// For any combination of default FS being asv(s)/wasb(s)://c@a/ and
comment|// the actual URI being asv(s)/wasb(s):///, it should work.
name|String
index|[]
name|wasbAliases
init|=
operator|new
name|String
index|[]
block|{
literal|"wasb"
block|,
literal|"wasbs"
block|}
decl_stmt|;
for|for
control|(
name|String
name|defaultScheme
range|:
name|wasbAliases
control|)
block|{
for|for
control|(
name|String
name|wantedScheme
range|:
name|wasbAliases
control|)
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createMock
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|URI
name|defaultUri
init|=
operator|new
name|URI
argument_list|(
name|defaultScheme
argument_list|,
name|authority
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|defaultUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add references to file system implementations for wasb and wasbs.
name|conf
operator|.
name|addResource
argument_list|(
literal|"azure-test.xml"
argument_list|)
expr_stmt|;
name|URI
name|wantedUri
init|=
operator|new
name|URI
argument_list|(
name|wantedScheme
operator|+
literal|":///random/path"
argument_list|)
decl_stmt|;
name|NativeAzureFileSystem
name|obtained
init|=
operator|(
name|NativeAzureFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|wantedUri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|obtained
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
name|wantedScheme
argument_list|,
name|authority
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|obtained
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure makeQualified works as expected
name|Path
name|qualified
init|=
name|obtained
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|wantedUri
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
name|wantedScheme
argument_list|,
name|authority
argument_list|,
name|wantedUri
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|qualified
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cleanup for the next iteration to not cache anything in FS
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|// If the default FS is not a WASB FS, then specifying a URI without
comment|// authority for the Azure file system should throw.
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createMock
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"wasb:///random/path"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should've thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testWasbAsDefaultFileSystemHasNoPort ()
specifier|public
name|void
name|testWasbAsDefaultFileSystemHasNoPort
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createMock
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|URI
name|defaultUri
init|=
operator|new
name|URI
argument_list|(
literal|"wasb"
argument_list|,
name|authority
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|defaultUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"azure-test.xml"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|instanceof
name|NativeAzureFileSystem
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractFileSystem
name|afs
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|getDefaultFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|afs
operator|instanceof
name|Wasb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|afs
operator|.
name|getUri
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests the cases when the scheme specified is 'wasbs'.    */
annotation|@
name|Test
DECL|method|testAbstractFileSystemImplementationForWasbsScheme ()
specifier|public
name|void
name|testAbstractFileSystemImplementationForWasbsScheme
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createMock
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|URI
name|defaultUri
init|=
operator|new
name|URI
argument_list|(
literal|"wasbs"
argument_list|,
name|authority
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|defaultUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.AbstractFileSystem.wasbs.impl"
argument_list|,
literal|"org.apache.hadoop.fs.azure.Wasbs"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"azure-test.xml"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|instanceof
name|NativeAzureFileSystem
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wasbs"
argument_list|,
name|fs
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractFileSystem
name|afs
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|getDefaultFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|afs
operator|instanceof
name|Wasbs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|afs
operator|.
name|getUri
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wasbs"
argument_list|,
name|afs
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoAbstractFileSystemImplementationSpecifiedForWasbsScheme ()
specifier|public
name|void
name|testNoAbstractFileSystemImplementationSpecifiedForWasbsScheme
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createMock
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|URI
name|defaultUri
init|=
operator|new
name|URI
argument_list|(
literal|"wasbs"
argument_list|,
name|authority
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|defaultUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|instanceof
name|NativeAzureFileSystem
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wasbs"
argument_list|,
name|fs
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
comment|// should throw if 'fs.AbstractFileSystem.wasbs.impl'' is not specified
try|try
block|{
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|getDefaultFileSystem
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should've thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFileSystemException
name|e
parameter_list|)
block|{       }
block|}
finally|finally
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCredentialProviderPathExclusions ()
specifier|public
name|void
name|testCredentialProviderPathExclusions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|providerPath
init|=
literal|"user:///,jceks://wasb/user/hrt_qa/sqoopdbpasswd.jceks,"
operator|+
literal|"jceks://hdfs@nn1.example.com/my/path/test.jceks"
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|providerPath
argument_list|)
expr_stmt|;
name|String
name|newPath
init|=
literal|"user:///,jceks://hdfs@nn1.example.com/my/path/test.jceks"
decl_stmt|;
name|excludeAndTestExpectations
argument_list|(
name|config
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExcludeAllProviderTypesFromConfig ()
specifier|public
name|void
name|testExcludeAllProviderTypesFromConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|providerPath
init|=
literal|"jceks://wasb/tmp/test.jceks,"
operator|+
literal|"jceks://wasb@/my/path/test.jceks"
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|providerPath
argument_list|)
expr_stmt|;
name|String
name|newPath
init|=
literal|null
decl_stmt|;
name|excludeAndTestExpectations
argument_list|(
name|config
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
DECL|method|excludeAndTestExpectations (Configuration config, String newPath)
name|void
name|excludeAndTestExpectations
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|String
name|newPath
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|ProviderUtils
operator|.
name|excludeIncompatibleCredentialProviders
argument_list|(
name|config
argument_list|,
name|NativeAzureFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|effectivePath
init|=
name|conf
operator|.
name|get
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newPath
argument_list|,
name|effectivePath
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

