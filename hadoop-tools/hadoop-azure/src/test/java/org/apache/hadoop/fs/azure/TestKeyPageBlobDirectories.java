begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test config property KEY_PAGE_BLOB_DIRECTORIES.  */
end_comment

begin_class
DECL|class|TestKeyPageBlobDirectories
specifier|public
class|class
name|TestKeyPageBlobDirectories
extends|extends
name|AbstractWasbTestBase
block|{
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
return|;
block|}
DECL|method|expectPageBlobKey (boolean expectedOutcome, AzureNativeFileSystemStore store, String path)
specifier|public
name|void
name|expectPageBlobKey
parameter_list|(
name|boolean
name|expectedOutcome
parameter_list|,
name|AzureNativeFileSystemStore
name|store
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected result for isPageBlobKey("
operator|+
name|path
operator|+
literal|")"
argument_list|,
name|expectedOutcome
argument_list|,
name|store
operator|.
name|isPageBlobKey
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeySetWithoutAsterisk ()
specifier|public
name|void
name|testKeySetWithoutAsterisk
parameter_list|()
throws|throws
name|Exception
block|{
name|NativeAzureFileSystem
name|azureFs
init|=
name|fs
decl_stmt|;
name|AzureNativeFileSystemStore
name|store
init|=
name|azureFs
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|dirList
init|=
literal|"/service/WALs,/data/mypageblobfiles"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_PAGE_BLOB_DIRECTORIES
argument_list|,
name|dirList
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"service"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"service/dir/recovered.edits"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"service/WALs/recovered.edits"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"data/dir/recovered.txt"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"data/mypageblobfiles/recovered.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeySetWithAsterisk ()
specifier|public
name|void
name|testKeySetWithAsterisk
parameter_list|()
throws|throws
name|Exception
block|{
name|NativeAzureFileSystem
name|azureFs
init|=
name|fs
decl_stmt|;
name|AzureNativeFileSystemStore
name|store
init|=
name|azureFs
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|dirList
init|=
literal|"/service/*/*/*/recovered.edits,/*/recovered.edits,/*/*/*/WALs, /*/*/oldWALs/*/*"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_PAGE_BLOB_DIRECTORIES
argument_list|,
name|dirList
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"service"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"service/dir/recovered.edits"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"service/dir1/dir2/dir3/recovered.edits"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"data/dir/recovered.edits"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"data/recovered.edits"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"dir1/dir2/WALs/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"dir1/dir2/dir3/WALs/data1"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"dir1/dir2/dir3/WALs/data2"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"dir1/oldWALs/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"dir1/dir2/oldWALs/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"dir1/dir2/oldWALs/dir3/dir4/data"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeySetUsingFullName ()
specifier|public
name|void
name|testKeySetUsingFullName
parameter_list|()
throws|throws
name|Exception
block|{
name|NativeAzureFileSystem
name|azureFs
init|=
name|fs
decl_stmt|;
name|AzureNativeFileSystemStore
name|store
init|=
name|azureFs
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|dirList
init|=
literal|"/service/WALs,/data/mypageblobfiles,/*/*/WALs,/*/*/recover.edits"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_PAGE_BLOB_DIRECTORIES
argument_list|,
name|dirList
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|String
name|defaultFS
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
name|defaultFS
operator|+
literal|"service/recover.edits"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
name|defaultFS
operator|+
literal|"service/WALs/recover.edits"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
name|defaultFS
operator|+
literal|"data/mismatch/mypageblobfiles/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
name|defaultFS
operator|+
literal|"data/mypageblobfiles/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
name|defaultFS
operator|+
literal|"dir1/dir2/dir3/WALs/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
name|defaultFS
operator|+
literal|"dir1/dir2/WALs/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
name|defaultFS
operator|+
literal|"dir1/dir2/dir3/recover.edits"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
name|defaultFS
operator|+
literal|"dir1/dir2/recover.edits"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyContainsAsterisk ()
specifier|public
name|void
name|testKeyContainsAsterisk
parameter_list|()
throws|throws
name|IOException
block|{
name|NativeAzureFileSystem
name|azureFs
init|=
name|fs
decl_stmt|;
name|AzureNativeFileSystemStore
name|store
init|=
name|azureFs
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// Test dir name which contains *
name|String
name|dirList
init|=
literal|"/service/*/*/*/d*ir,/*/fi**le.data,/*/*/*/WALs*, /*/*/oldWALs"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_PAGE_BLOB_DIRECTORIES
argument_list|,
name|dirList
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"service"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"service/d*ir/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"service/dir1/dir2/dir3/d*ir/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"dir/fi*le.data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"dir/fi**le.data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"dir1/dir2/WALs/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"dir1/dir2/dir3/WALs/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"dir1/dir2/dir3/WALs*/data1"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"dir1/dir2/dir3/WALs*/data2"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"dir1/oldWALs/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"dir1/dir2/oldWALs/data1"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"dir1/dir2/oldWALs/data2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyWithCommonPrefix ()
specifier|public
name|void
name|testKeyWithCommonPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|NativeAzureFileSystem
name|azureFs
init|=
name|fs
decl_stmt|;
name|AzureNativeFileSystemStore
name|store
init|=
name|azureFs
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// Test dir name which contains *
name|String
name|dirList
init|=
literal|"/service/WALs,/*/*/WALs"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_PAGE_BLOB_DIRECTORIES
argument_list|,
name|dirList
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"service"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"service/WALsssssss/dir"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"service/WALs/dir"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|false
argument_list|,
name|store
argument_list|,
literal|"service/dir/WALsss/data"
argument_list|)
expr_stmt|;
name|expectPageBlobKey
argument_list|(
literal|true
argument_list|,
name|store
argument_list|,
literal|"service/dir/WALs/data"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

