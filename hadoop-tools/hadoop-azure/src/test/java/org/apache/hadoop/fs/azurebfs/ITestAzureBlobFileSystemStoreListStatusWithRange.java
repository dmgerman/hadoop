begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Test AzureBlobFileSystemStore listStatus with startFrom.  * */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|ITestAzureBlobFileSystemStoreListStatusWithRange
specifier|public
class|class
name|ITestAzureBlobFileSystemStoreListStatusWithRange
extends|extends
name|AbstractAbfsIntegrationTest
block|{
DECL|field|SUCCEED
specifier|private
specifier|static
specifier|final
name|boolean
name|SUCCEED
init|=
literal|true
decl_stmt|;
DECL|field|FAIL
specifier|private
specifier|static
specifier|final
name|boolean
name|FAIL
init|=
literal|false
decl_stmt|;
DECL|field|SORTED_ENTRY_NAMES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SORTED_ENTRY_NAMES
init|=
block|{
literal|"1_folder"
block|,
literal|"A0"
block|,
literal|"D01"
block|,
literal|"a+"
block|,
literal|"c0"
block|,
literal|"name5"
block|}
decl_stmt|;
DECL|field|store
specifier|private
name|AzureBlobFileSystemStore
name|store
decl_stmt|;
DECL|field|fs
specifier|private
name|AzureBlobFileSystem
name|fs
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
DECL|field|path
specifier|public
name|String
name|path
decl_stmt|;
comment|/**    * A valid startFrom for listFileStatus with range is a non-fully qualified dir/file name    * */
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|1
argument_list|)
DECL|field|startFrom
specifier|public
name|String
name|startFrom
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|2
argument_list|)
DECL|field|expectedStartIndexInArray
specifier|public
name|int
name|expectedStartIndexInArray
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|3
argument_list|)
DECL|field|expectedResult
specifier|public
name|boolean
name|expectedResult
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"Testing path \"{0}\", startFrom: \"{1}\",  Expecting result : {3}"
argument_list|)
comment|// Test path
DECL|method|params ()
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
comment|// case 0: list in root,  without range
block|{
literal|"/"
block|,
literal|null
block|,
literal|0
block|,
name|SUCCEED
block|}
block|,
comment|// case 1: list in the root, start from the second file
block|{
literal|"/"
block|,
name|SORTED_ENTRY_NAMES
index|[
literal|1
index|]
block|,
literal|1
block|,
name|SUCCEED
block|}
block|,
comment|// case 2: list in the root, invalid startFrom
block|{
literal|"/"
block|,
literal|"/"
block|,
operator|-
literal|1
block|,
name|FAIL
block|}
block|,
comment|// case 3: list in non-root level, valid startFrom : dir name
block|{
literal|"/"
operator|+
name|SORTED_ENTRY_NAMES
index|[
literal|2
index|]
block|,
name|SORTED_ENTRY_NAMES
index|[
literal|1
index|]
block|,
literal|1
block|,
name|SUCCEED
block|}
block|,
comment|// case 4: list in non-root level, valid startFrom : file name
block|{
literal|"/"
operator|+
name|SORTED_ENTRY_NAMES
index|[
literal|2
index|]
block|,
name|SORTED_ENTRY_NAMES
index|[
literal|2
index|]
block|,
literal|2
block|,
name|SUCCEED
block|}
block|,
comment|// case 5: list in non root level, invalid startFrom
block|{
literal|"/"
operator|+
name|SORTED_ENTRY_NAMES
index|[
literal|2
index|]
block|,
literal|"/"
operator|+
name|SORTED_ENTRY_NAMES
index|[
literal|3
index|]
block|,
operator|-
literal|1
block|,
name|FAIL
block|}
block|,
comment|// case 6: list using non existent startFrom, startFrom is smaller than the entries in lexical order
comment|//          expecting return all entries
block|{
literal|"/"
operator|+
name|SORTED_ENTRY_NAMES
index|[
literal|2
index|]
block|,
literal|"0-non-existent"
block|,
literal|0
block|,
name|SUCCEED
block|}
block|,
comment|// case 7: list using non existent startFrom, startFrom is larger than the entries in lexical order
comment|//         expecting return 0 entries
block|{
literal|"/"
operator|+
name|SORTED_ENTRY_NAMES
index|[
literal|2
index|]
block|,
literal|"z-non-existent"
block|,
operator|-
literal|1
block|,
name|SUCCEED
block|}
block|,
comment|// case 8: list using non existent startFrom, startFrom is in the range
block|{
literal|"/"
operator|+
name|SORTED_ENTRY_NAMES
index|[
literal|2
index|]
block|,
literal|"A1"
block|,
literal|2
block|,
name|SUCCEED
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|ITestAzureBlobFileSystemStoreListStatusWithRange ()
specifier|public
name|ITestAzureBlobFileSystemStoreListStatusWithRange
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|getFileSystem
argument_list|()
operator|==
literal|null
condition|)
block|{
name|super
operator|.
name|createFileSystem
argument_list|()
expr_stmt|;
block|}
name|fs
operator|=
name|this
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|store
operator|=
name|fs
operator|.
name|getAbfsStore
argument_list|()
expr_stmt|;
name|prepareTestFiles
argument_list|()
expr_stmt|;
comment|// Sort the names for verification, ABFS service should return the results in order.
name|Arrays
operator|.
name|sort
argument_list|(
name|SORTED_ENTRY_NAMES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListWithRange ()
specifier|public
name|void
name|testListWithRange
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|FileStatus
index|[]
name|listResult
init|=
name|store
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|,
name|startFrom
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expectedResult
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Excepting failure with IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
name|verifyFileStatus
argument_list|(
name|listResult
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|,
name|expectedStartIndexInArray
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|expectedResult
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Excepting success"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// compare the file status
DECL|method|verifyFileStatus (FileStatus[] listResult, Path parentPath, int startIndexInSortedName)
specifier|private
name|void
name|verifyFileStatus
parameter_list|(
name|FileStatus
index|[]
name|listResult
parameter_list|,
name|Path
name|parentPath
parameter_list|,
name|int
name|startIndexInSortedName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|startIndexInSortedName
operator|==
operator|-
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected empty FileStatus array"
argument_list|,
literal|0
argument_list|,
name|listResult
operator|.
name|length
argument_list|)
expr_stmt|;
return|return;
block|}
name|FileStatus
index|[]
name|allFileStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"number of dir/file doesn't match"
argument_list|,
name|SORTED_ENTRY_NAMES
operator|.
name|length
argument_list|,
name|allFileStatuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|indexInResult
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
name|startIndexInSortedName
init|;
name|index
operator|<
name|SORTED_ENTRY_NAMES
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"fileStatus doesn't match"
argument_list|,
name|allFileStatuses
index|[
name|index
index|]
argument_list|,
name|listResult
index|[
name|indexInResult
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareTestFiles ()
specifier|private
name|void
name|prepareTestFiles
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// created 2 level file structures
for|for
control|(
name|String
name|levelOneFolder
range|:
name|SORTED_ENTRY_NAMES
control|)
block|{
name|Path
name|levelOnePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|levelOneFolder
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|levelOnePath
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|SORTED_ENTRY_NAMES
control|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|levelOnePath
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertIsFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

