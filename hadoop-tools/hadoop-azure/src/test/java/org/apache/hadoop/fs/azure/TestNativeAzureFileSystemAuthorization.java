begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|AzureNativeFileSystemStore
operator|.
name|KEY_USE_SECURE_MODE
import|;
end_import

begin_comment
comment|/**  * Test class to hold all WASB authorization tests.  */
end_comment

begin_class
DECL|class|TestNativeAzureFileSystemAuthorization
specifier|public
class|class
name|TestNativeAzureFileSystemAuthorization
extends|extends
name|AbstractWasbTestBase
block|{
annotation|@
name|VisibleForTesting
DECL|field|authorizer
specifier|protected
name|MockWasbAuthorizerImpl
name|authorizer
decl_stmt|;
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NativeAzureFileSystem
operator|.
name|KEY_AZURE_AUTHORIZATION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RemoteWasbAuthorizerImpl
operator|.
name|KEY_REMOTE_AUTH_SERVICE_URL
argument_list|,
literal|"http://localhost/"
argument_list|)
expr_stmt|;
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|beforeMethod ()
specifier|public
name|void
name|beforeMethod
parameter_list|()
block|{
name|boolean
name|useSecureMode
init|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|KEY_USE_SECURE_MODE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|useAuthorization
init|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|NativeAzureFileSystem
operator|.
name|KEY_AZURE_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"Test valid when both SecureMode and Authorization are enabled .. skipping"
argument_list|,
name|useSecureMode
operator|&&
name|useAuthorization
argument_list|)
expr_stmt|;
name|authorizer
operator|=
operator|new
name|MockWasbAuthorizerImpl
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|expectedEx
specifier|public
name|ExpectedException
name|expectedEx
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * Setup up permissions to allow a recursive delete for cleanup purposes.    */
DECL|method|allowRecursiveDelete (NativeAzureFileSystem fs, String path)
specifier|protected
name|void
name|allowRecursiveDelete
parameter_list|(
name|NativeAzureFileSystem
name|fs
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|int
name|index
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|parent
init|=
operator|(
name|index
operator|==
literal|0
operator|)
condition|?
literal|"/"
else|:
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|deleteAllAuthRules
argument_list|()
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|parent
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
operator|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
condition|?
name|path
else|:
name|path
operator|+
literal|"*"
operator|)
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup the expected exception class, and exception message that the test is supposed to fail with    */
DECL|method|setExpectedFailureMessage (String operation, Path path)
specifier|protected
name|void
name|setExpectedFailureMessage
parameter_list|(
name|String
name|operation
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|expectedEx
operator|.
name|expect
argument_list|(
name|WasbAuthorizationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedEx
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s operation for Path : %s not allowed"
argument_list|,
name|operation
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Positive test to verify Create access check    * The file is created directly under an existing folder.    * No intermediate folders need to be created.    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testCreateAccessWithoutCreateIntermediateFoldersCheckPositive ()
specifier|public
name|void
name|testCreateAccessWithoutCreateIntermediateFoldersCheckPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test.dat"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"testPath was not created"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Positive test to verify Create access check    * The test tries to create a file whose parent is non-existent to ensure that    * the intermediate folders between ancestor and direct parent are being created    * when proper ranger policies are configured.    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testCreateAccessWithCreateIntermediateFoldersCheckPositive ()
specifier|public
name|void
name|testCreateAccessWithCreateIntermediateFoldersCheckPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testCreateAccessCheckPositive/1/2/3"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test.dat"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"testPath was not created"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
literal|"/testCreateAccessCheckPositive"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testCreateAccessCheckPositive"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Negative test to verify that create fails when trying to overwrite an existing file    * without proper write permissions on the file being overwritten.    * @throws Throwable    */
annotation|@
name|Test
comment|// (expected=WasbAuthorizationException.class)
DECL|method|testCreateAccessWithOverwriteCheckNegative ()
specifier|public
name|void
name|testCreateAccessWithOverwriteCheckNegative
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test.dat"
argument_list|)
decl_stmt|;
name|setExpectedFailureMessage
argument_list|(
literal|"create"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
name|boolean
name|initialCreateSucceeded
init|=
literal|false
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"testPath was not created"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|initialCreateSucceeded
operator|=
literal|true
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ContractTestUtils
operator|.
name|assertTrue
argument_list|(
name|initialCreateSucceeded
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Positive test to verify that create succeeds when trying to overwrite an existing file    * when proper write permissions on the file being overwritten are provided.    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testCreateAccessWithOverwriteCheckPositive ()
specifier|public
name|void
name|testCreateAccessWithOverwriteCheckPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test.dat"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
name|boolean
name|initialCreateSucceeded
init|=
literal|false
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"testPath was not created"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|initialCreateSucceeded
operator|=
literal|true
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ContractTestUtils
operator|.
name|assertTrue
argument_list|(
name|initialCreateSucceeded
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Negative test to verify that Create fails when appropriate permissions are not provided.    * @throws Throwable    */
annotation|@
name|Test
comment|// (expected=WasbAuthorizationException.class)
DECL|method|testCreateAccessCheckNegative ()
specifier|public
name|void
name|testCreateAccessCheckNegative
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testCreateAccessCheckNegative"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test.dat"
argument_list|)
decl_stmt|;
name|setExpectedFailureMessage
argument_list|(
literal|"create"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|/* Provide permissions to cleanup in case the file got created */
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Positive test to verify listStatus access check    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testListAccessCheckPositive ()
specifier|public
name|void
name|testListAccessCheckPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testListAccessCheckPositive"
argument_list|)
decl_stmt|;
name|Path
name|intermediateFolders
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"1/2/3/"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|intermediateFolders
argument_list|,
literal|"test.dat"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|listStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Negative test to verify listStatus access check    * @throws Throwable    */
annotation|@
name|Test
comment|//(expected=WasbAuthorizationException.class)
DECL|method|testListAccessCheckNegative ()
specifier|public
name|void
name|testListAccessCheckNegative
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testListAccessCheckNegative"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test.dat"
argument_list|)
decl_stmt|;
name|setExpectedFailureMessage
argument_list|(
literal|"liststatus"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|listStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Positive test to verify rename access check.    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testRenameAccessCheckPositive ()
specifier|public
name|void
name|testRenameAccessCheckPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testRenameAccessCheckPositive"
argument_list|)
decl_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test1.dat"
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test2.dat"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* to create parentDir */
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* for rename */
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|srcPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* for exists */
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|dstPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* for exists */
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"sourcePath does not exist"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"destPath does not exist"
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"sourcePath exists after rename!"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Negative test to verify rename access check.    * @throws Throwable    */
annotation|@
name|Test
comment|//(expected=WasbAuthorizationException.class)
DECL|method|testRenameAccessCheckNegative ()
specifier|public
name|void
name|testRenameAccessCheckNegative
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testRenameAccessCheckNegative"
argument_list|)
decl_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test1.dat"
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test2.dat"
argument_list|)
decl_stmt|;
name|setExpectedFailureMessage
argument_list|(
literal|"rename"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* to create parent dir */
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|srcPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|dstPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"sourcePath does not exist"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"destPath does not exist"
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"sourcePath does not exist after rename failure!"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Negative test to verify rename access check - the dstFolder disallows rename    * @throws Throwable    */
annotation|@
name|Test
comment|//(expected=WasbAuthorizationException.class)
DECL|method|testRenameAccessCheckNegativeOnDstFolder ()
specifier|public
name|void
name|testRenameAccessCheckNegativeOnDstFolder
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentSrcDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testRenameAccessCheckNegativeSrc"
argument_list|)
decl_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|parentSrcDir
argument_list|,
literal|"test1.dat"
argument_list|)
decl_stmt|;
name|Path
name|parentDstDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testRenameAccessCheckNegativeDst"
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|parentDstDir
argument_list|,
literal|"test2.dat"
argument_list|)
decl_stmt|;
name|setExpectedFailureMessage
argument_list|(
literal|"rename"
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* to create parent dir */
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|parentSrcDir
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|parentDstDir
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|srcPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|dstPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"sourcePath does not exist"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"destPath does not exist"
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"sourcePath does not exist after rename !"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentSrcDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentSrcDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Positive test to verify rename access check - the dstFolder allows rename    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testRenameAccessCheckPositiveOnDstFolder ()
specifier|public
name|void
name|testRenameAccessCheckPositiveOnDstFolder
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentSrcDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testRenameAccessCheckPositiveSrc"
argument_list|)
decl_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|parentSrcDir
argument_list|,
literal|"test1.dat"
argument_list|)
decl_stmt|;
name|Path
name|parentDstDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testRenameAccessCheckPositiveDst"
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|parentDstDir
argument_list|,
literal|"test2.dat"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* to create parent dirs */
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|parentSrcDir
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|parentDstDir
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|srcPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|dstPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"sourcePath does not exist"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parentDstDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"sourcePath does not exist"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"destPath does not exist"
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentSrcDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentSrcDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentDstDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDstDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Positive test for read access check.    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testReadAccessCheckPositive ()
specifier|public
name|void
name|testReadAccessCheckPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testReadAccessCheckPositive"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test.dat"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|inputStream
init|=
literal|null
decl_stmt|;
name|FSDataOutputStream
name|fso
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fso
operator|=
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|String
name|data
init|=
literal|"Hello World"
decl_stmt|;
name|fso
operator|.
name|writeBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|fso
operator|.
name|close
argument_list|()
expr_stmt|;
name|inputStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|verifyRead
argument_list|(
name|inputStream
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fso
operator|!=
literal|null
condition|)
block|{
name|fso
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Negative test to verify read access check.    * @throws Throwable    */
annotation|@
name|Test
comment|//(expected=WasbAuthorizationException.class)
DECL|method|testReadAccessCheckNegative ()
specifier|public
name|void
name|testReadAccessCheckNegative
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testReadAccessCheckNegative"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test.dat"
argument_list|)
decl_stmt|;
name|setExpectedFailureMessage
argument_list|(
literal|"read"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|inputStream
init|=
literal|null
decl_stmt|;
name|FSDataOutputStream
name|fso
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fso
operator|=
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|String
name|data
init|=
literal|"Hello World"
decl_stmt|;
name|fso
operator|.
name|writeBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|fso
operator|.
name|close
argument_list|()
expr_stmt|;
name|inputStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|verifyRead
argument_list|(
name|inputStream
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fso
operator|!=
literal|null
condition|)
block|{
name|fso
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Positive test to verify file delete access check    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testFileDeleteAccessCheckPositive ()
specifier|public
name|void
name|testFileDeleteAccessCheckPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test.dat"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"testPath was not created"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"testPath exists after deletion!"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Negative test to verify file delete access check    * @throws Throwable    */
annotation|@
name|Test
comment|//(expected=WasbAuthorizationException.class)
DECL|method|testFileDeleteAccessCheckNegative ()
specifier|public
name|void
name|testFileDeleteAccessCheckNegative
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"test.dat"
argument_list|)
decl_stmt|;
name|setExpectedFailureMessage
argument_list|(
literal|"delete"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"testPath was not created"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
comment|/* Remove permissions for delete to force failure */
name|authorizer
operator|.
name|deleteAllAuthRules
argument_list|()
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|/* Restore permissions to force a successful delete */
name|authorizer
operator|.
name|deleteAllAuthRules
argument_list|()
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"testPath exists after deletion!"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Positive test to verify file delete access check, with intermediate folders    * Uses wildcard recursive permissions    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testFileDeleteAccessWithIntermediateFoldersCheckPositive ()
specifier|public
name|void
name|testFileDeleteAccessWithIntermediateFoldersCheckPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testDeleteIntermediateFolder"
argument_list|)
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"1/2/test.dat"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// for create and delete
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/testDeleteIntermediateFolder*"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// for recursive delete
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/*"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"testPath was not created"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"testPath exists after deletion!"
argument_list|,
name|parentDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Positive test for getFileStatus    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testGetFileStatusPositive ()
specifier|public
name|void
name|testGetFileStatusPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertIsDirectory
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Negative test for getFileStatus    * @throws Throwable    */
annotation|@
name|Test
comment|//(expected=WasbAuthorizationException.class)
DECL|method|testGetFileStatusNegative ()
specifier|public
name|void
name|testGetFileStatusNegative
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|setExpectedFailureMessage
argument_list|(
literal|"getFileStatus"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertIsDirectory
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Positive test for mkdirs access check    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testMkdirsCheckPositive ()
specifier|public
name|void
name|testMkdirsCheckPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/testMkdirsAccessCheckPositive/1/2/3"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertIsDirectory
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
literal|"/testMkdirsAccessCheckPositive"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testMkdirsAccessCheckPositive"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Negative test for mkdirs access check    * @throws Throwable    */
annotation|@
name|Test
comment|//(expected=WasbAuthorizationException.class)
DECL|method|testMkdirsCheckNegative ()
specifier|public
name|void
name|testMkdirsCheckNegative
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/testMkdirsAccessCheckNegative/1/2/3"
argument_list|)
decl_stmt|;
name|setExpectedFailureMessage
argument_list|(
literal|"mkdirs"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
literal|"/"
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|WRITE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"testPath was not created"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allowRecursiveDelete
argument_list|(
name|fs
argument_list|,
literal|"/testMkdirsAccessCheckNegative"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testMkdirsAccessCheckNegative"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Positive test triple slash format (wasb:///) access check    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testListStatusWithTripleSlashCheckPositive ()
specifier|public
name|void
name|testListStatusWithTripleSlashCheckPositive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|authorizer
operator|.
name|addAuthRule
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
name|WasbAuthorizationOperations
operator|.
name|READ
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|updateWasbAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
name|Path
name|testPathWithTripleSlash
init|=
operator|new
name|Path
argument_list|(
literal|"wasb:///"
operator|+
name|testPath
argument_list|)
decl_stmt|;
name|fs
operator|.
name|listStatus
argument_list|(
name|testPathWithTripleSlash
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

