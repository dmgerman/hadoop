begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for<code>AbfsClientThrottlingAnalyzer</code>.  */
end_comment

begin_class
DECL|class|TestAbfsClientThrottlingAnalyzer
specifier|public
class|class
name|TestAbfsClientThrottlingAnalyzer
block|{
DECL|field|ANALYSIS_PERIOD
specifier|private
specifier|static
specifier|final
name|int
name|ANALYSIS_PERIOD
init|=
literal|1000
decl_stmt|;
DECL|field|ANALYSIS_PERIOD_PLUS_10_PERCENT
specifier|private
specifier|static
specifier|final
name|int
name|ANALYSIS_PERIOD_PLUS_10_PERCENT
init|=
name|ANALYSIS_PERIOD
operator|+
name|ANALYSIS_PERIOD
operator|/
literal|10
decl_stmt|;
DECL|field|MEGABYTE
specifier|private
specifier|static
specifier|final
name|long
name|MEGABYTE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|MAX_ACCEPTABLE_PERCENT_DIFFERENCE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ACCEPTABLE_PERCENT_DIFFERENCE
init|=
literal|20
decl_stmt|;
DECL|method|sleep (long milliseconds)
specifier|private
name|void
name|sleep
parameter_list|(
name|long
name|milliseconds
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|milliseconds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|fuzzyValidate (long expected, long actual, double percentage)
specifier|private
name|void
name|fuzzyValidate
parameter_list|(
name|long
name|expected
parameter_list|,
name|long
name|actual
parameter_list|,
name|double
name|percentage
parameter_list|)
block|{
specifier|final
name|double
name|lowerBound
init|=
name|Math
operator|.
name|max
argument_list|(
name|expected
operator|-
name|percentage
operator|/
literal|100
operator|*
name|expected
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|double
name|upperBound
init|=
name|expected
operator|+
name|percentage
operator|/
literal|100
operator|*
name|expected
decl_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The actual value %1$d is not within the expected range: "
operator|+
literal|"[%2$.2f, %3$.2f]."
argument_list|,
name|actual
argument_list|,
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
argument_list|,
name|actual
operator|>=
name|lowerBound
operator|&&
name|actual
operator|<=
name|upperBound
argument_list|)
expr_stmt|;
block|}
DECL|method|validate (long expected, long actual)
specifier|private
name|void
name|validate
parameter_list|(
name|long
name|expected
parameter_list|,
name|long
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The actual value %1$d is not the expected value %2$d."
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|)
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|validateLessThanOrEqual (long maxExpected, long actual)
specifier|private
name|void
name|validateLessThanOrEqual
parameter_list|(
name|long
name|maxExpected
parameter_list|,
name|long
name|actual
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The actual value %1$d is not less than or equal to the maximum"
operator|+
literal|" expected value %2$d."
argument_list|,
name|actual
argument_list|,
name|maxExpected
argument_list|)
argument_list|,
name|actual
operator|<
name|maxExpected
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that there is no waiting (sleepDuration = 0) if the metrics have    * never been updated.  This validates proper initialization of    * ClientThrottlingAnalyzer.    */
annotation|@
name|Test
DECL|method|testNoMetricUpdatesThenNoWaiting ()
specifier|public
name|void
name|testNoMetricUpdatesThenNoWaiting
parameter_list|()
block|{
name|AbfsClientThrottlingAnalyzer
name|analyzer
init|=
operator|new
name|AbfsClientThrottlingAnalyzer
argument_list|(
literal|"test"
argument_list|,
name|ANALYSIS_PERIOD
argument_list|)
decl_stmt|;
name|validate
argument_list|(
literal|0
argument_list|,
name|analyzer
operator|.
name|getSleepDuration
argument_list|()
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|ANALYSIS_PERIOD_PLUS_10_PERCENT
argument_list|)
expr_stmt|;
name|validate
argument_list|(
literal|0
argument_list|,
name|analyzer
operator|.
name|getSleepDuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that there is no waiting (sleepDuration = 0) if the metrics have    * only been updated with successful requests.    */
annotation|@
name|Test
DECL|method|testOnlySuccessThenNoWaiting ()
specifier|public
name|void
name|testOnlySuccessThenNoWaiting
parameter_list|()
block|{
name|AbfsClientThrottlingAnalyzer
name|analyzer
init|=
operator|new
name|AbfsClientThrottlingAnalyzer
argument_list|(
literal|"test"
argument_list|,
name|ANALYSIS_PERIOD
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|addBytesTransferred
argument_list|(
literal|8
operator|*
name|MEGABYTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validate
argument_list|(
literal|0
argument_list|,
name|analyzer
operator|.
name|getSleepDuration
argument_list|()
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|ANALYSIS_PERIOD_PLUS_10_PERCENT
argument_list|)
expr_stmt|;
name|validate
argument_list|(
literal|0
argument_list|,
name|analyzer
operator|.
name|getSleepDuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that there is waiting (sleepDuration != 0) if the metrics have    * only been updated with failed requests.  Also ensure that the    * sleepDuration decreases over time.    */
annotation|@
name|Test
DECL|method|testOnlyErrorsAndWaiting ()
specifier|public
name|void
name|testOnlyErrorsAndWaiting
parameter_list|()
block|{
name|AbfsClientThrottlingAnalyzer
name|analyzer
init|=
operator|new
name|AbfsClientThrottlingAnalyzer
argument_list|(
literal|"test"
argument_list|,
name|ANALYSIS_PERIOD
argument_list|)
decl_stmt|;
name|validate
argument_list|(
literal|0
argument_list|,
name|analyzer
operator|.
name|getSleepDuration
argument_list|()
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addBytesTransferred
argument_list|(
literal|4
operator|*
name|MEGABYTE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|ANALYSIS_PERIOD_PLUS_10_PERCENT
argument_list|)
expr_stmt|;
specifier|final
name|int
name|expectedSleepDuration1
init|=
literal|1100
decl_stmt|;
name|validateLessThanOrEqual
argument_list|(
name|expectedSleepDuration1
argument_list|,
name|analyzer
operator|.
name|getSleepDuration
argument_list|()
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|10
operator|*
name|ANALYSIS_PERIOD
argument_list|)
expr_stmt|;
specifier|final
name|int
name|expectedSleepDuration2
init|=
literal|900
decl_stmt|;
name|validateLessThanOrEqual
argument_list|(
name|expectedSleepDuration2
argument_list|,
name|analyzer
operator|.
name|getSleepDuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that there is waiting (sleepDuration != 0) if the metrics have    * only been updated with both successful and failed requests.  Also ensure    * that the sleepDuration decreases over time.    */
annotation|@
name|Test
DECL|method|testSuccessAndErrorsAndWaiting ()
specifier|public
name|void
name|testSuccessAndErrorsAndWaiting
parameter_list|()
block|{
name|AbfsClientThrottlingAnalyzer
name|analyzer
init|=
operator|new
name|AbfsClientThrottlingAnalyzer
argument_list|(
literal|"test"
argument_list|,
name|ANALYSIS_PERIOD
argument_list|)
decl_stmt|;
name|validate
argument_list|(
literal|0
argument_list|,
name|analyzer
operator|.
name|getSleepDuration
argument_list|()
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addBytesTransferred
argument_list|(
literal|8
operator|*
name|MEGABYTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addBytesTransferred
argument_list|(
literal|2
operator|*
name|MEGABYTE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|ANALYSIS_PERIOD_PLUS_10_PERCENT
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|analyzer
operator|.
name|suspendIfNecessary
argument_list|()
expr_stmt|;
specifier|final
name|int
name|expectedElapsedTime
init|=
literal|126
decl_stmt|;
name|fuzzyValidate
argument_list|(
name|expectedElapsedTime
argument_list|,
name|timer
operator|.
name|elapsedTimeMs
argument_list|()
argument_list|,
name|MAX_ACCEPTABLE_PERCENT_DIFFERENCE
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|10
operator|*
name|ANALYSIS_PERIOD
argument_list|)
expr_stmt|;
specifier|final
name|int
name|expectedSleepDuration
init|=
literal|110
decl_stmt|;
name|validateLessThanOrEqual
argument_list|(
name|expectedSleepDuration
argument_list|,
name|analyzer
operator|.
name|getSleepDuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that there is waiting (sleepDuration != 0) if the metrics have    * only been updated with many successful and failed requests.  Also ensure    * that the sleepDuration decreases to zero over time.    */
annotation|@
name|Test
DECL|method|testManySuccessAndErrorsAndWaiting ()
specifier|public
name|void
name|testManySuccessAndErrorsAndWaiting
parameter_list|()
block|{
name|AbfsClientThrottlingAnalyzer
name|analyzer
init|=
operator|new
name|AbfsClientThrottlingAnalyzer
argument_list|(
literal|"test"
argument_list|,
name|ANALYSIS_PERIOD
argument_list|)
decl_stmt|;
name|validate
argument_list|(
literal|0
argument_list|,
name|analyzer
operator|.
name|getSleepDuration
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfRequests
init|=
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRequests
condition|;
name|i
operator|++
control|)
block|{
name|analyzer
operator|.
name|addBytesTransferred
argument_list|(
literal|8
operator|*
name|MEGABYTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addBytesTransferred
argument_list|(
literal|2
operator|*
name|MEGABYTE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|sleep
argument_list|(
name|ANALYSIS_PERIOD_PLUS_10_PERCENT
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|analyzer
operator|.
name|suspendIfNecessary
argument_list|()
expr_stmt|;
name|fuzzyValidate
argument_list|(
literal|7
argument_list|,
name|timer
operator|.
name|elapsedTimeMs
argument_list|()
argument_list|,
name|MAX_ACCEPTABLE_PERCENT_DIFFERENCE
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|10
operator|*
name|ANALYSIS_PERIOD
argument_list|)
expr_stmt|;
name|validate
argument_list|(
literal|0
argument_list|,
name|analyzer
operator|.
name|getSleepDuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

