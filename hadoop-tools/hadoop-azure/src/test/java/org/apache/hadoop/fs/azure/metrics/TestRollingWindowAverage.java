begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestRollingWindowAverage
specifier|public
class|class
name|TestRollingWindowAverage
block|{
comment|/**    * Tests the basic functionality of the class.    */
annotation|@
name|Test
DECL|method|testBasicFunctionality ()
specifier|public
name|void
name|testBasicFunctionality
parameter_list|()
throws|throws
name|Exception
block|{
name|RollingWindowAverage
name|average
init|=
operator|new
name|RollingWindowAverage
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|average
operator|.
name|getCurrentAverage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Nothing there yet.
name|average
operator|.
name|addPoint
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|average
operator|.
name|getCurrentAverage
argument_list|()
argument_list|)
expr_stmt|;
comment|// One point in there.
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|average
operator|.
name|addPoint
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|average
operator|.
name|getCurrentAverage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Two points in there.
name|Thread
operator|.
name|sleep
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|average
operator|.
name|getCurrentAverage
argument_list|()
argument_list|)
expr_stmt|;
comment|// One point retired.
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|average
operator|.
name|getCurrentAverage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both points retired.
block|}
block|}
end_class

end_unit

