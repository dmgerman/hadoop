begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.extensions
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_DELEGATION_TOKEN_PROVIDER_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_ENABLE_DELEGATION_TOKEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|KerberizedAbfsCluster
operator|.
name|newURI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|StubAbfsTokenIdentifier
operator|.
name|decodeIdentifier
import|;
end_import

begin_comment
comment|/**  * This is a Stub DT manager for testing, one which  * implements the the {@link CustomDelegationTokenManager} API, but  * not the extended one.  *  * Member variables are updated as operations are performed, so  * test cases can make assertions about the state of the plugin.  */
end_comment

begin_class
DECL|class|ClassicDelegationTokenManager
specifier|public
class|class
name|ClassicDelegationTokenManager
implements|implements
name|CustomDelegationTokenManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClassicDelegationTokenManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Classname.    */
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"org.apache.hadoop.fs.azurebfs.extensions.ClassicDelegationTokenManager"
decl_stmt|;
comment|/**    * If this the DT is unbound, this is used for the service kind.    */
DECL|field|UNSET
specifier|public
specifier|static
specifier|final
name|String
name|UNSET
init|=
literal|"abfs://user@unset.dfs.core.windows.net/"
decl_stmt|;
comment|/**    * The URI used when creating a token for an unset binding.    */
DECL|field|UNSET_URI
specifier|public
specifier|static
specifier|final
name|URI
name|UNSET_URI
init|=
name|newURI
argument_list|(
name|UNSET
argument_list|)
decl_stmt|;
DECL|field|fsURI
specifier|private
name|URI
name|fsURI
decl_stmt|;
DECL|field|initialized
specifier|private
name|boolean
name|initialized
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|field|renewals
specifier|private
name|int
name|renewals
decl_stmt|;
DECL|field|cancellations
specifier|private
name|int
name|cancellations
decl_stmt|;
DECL|field|issued
specifier|private
name|int
name|issued
decl_stmt|;
DECL|field|kind
specifier|private
name|Text
name|kind
decl_stmt|;
DECL|field|owner
specifier|private
name|UserGroupInformation
name|owner
decl_stmt|;
DECL|field|canonicalServiceName
specifier|private
name|String
name|canonicalServiceName
decl_stmt|;
comment|/**    * Instantiate.    */
DECL|method|ClassicDelegationTokenManager ()
specifier|public
name|ClassicDelegationTokenManager
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|initialize (final Configuration configuration)
specifier|public
name|void
name|initialize
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|initialized
operator|=
literal|true
expr_stmt|;
name|owner
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Stub DT manager for {}"
argument_list|,
name|owner
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken (final String renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
specifier|final
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// guarantees issued
name|issued
operator|++
expr_stmt|;
name|URI
name|uri
init|=
name|fsURI
operator|!=
literal|null
condition|?
name|fsURI
else|:
name|UNSET_URI
decl_stmt|;
name|Text
name|renewerT
init|=
operator|new
name|Text
argument_list|(
name|renewer
operator|!=
literal|null
condition|?
name|renewer
else|:
literal|""
argument_list|)
decl_stmt|;
name|Token
name|t
init|=
name|createToken
argument_list|(
name|issued
argument_list|,
name|uri
argument_list|,
operator|new
name|Text
argument_list|(
name|owner
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
name|renewerT
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|setKind
argument_list|(
name|kind
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|setService
argument_list|(
name|createServiceText
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created token {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|method|createServiceText ()
specifier|public
name|Text
name|createServiceText
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|(
name|fsURI
operator|!=
literal|null
condition|?
name|fsURI
operator|.
name|toString
argument_list|()
else|:
name|UNSET
argument_list|)
return|;
block|}
comment|/**    * Create a token.    *    * @param sequenceNumber sequence number.    * @param uri FS URI    * @param owner FS owner    * @param renewer renewer    * @return a token.    */
DECL|method|createToken ( final int sequenceNumber, final URI uri, final Text owner, final Text renewer)
specifier|public
specifier|static
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|createToken
parameter_list|(
specifier|final
name|int
name|sequenceNumber
parameter_list|,
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|Text
name|owner
parameter_list|,
specifier|final
name|Text
name|renewer
parameter_list|)
block|{
name|StubAbfsTokenIdentifier
name|id
init|=
operator|new
name|StubAbfsTokenIdentifier
argument_list|(
name|uri
argument_list|,
name|owner
argument_list|,
name|renewer
argument_list|)
decl_stmt|;
name|id
operator|.
name|setSequenceNumber
argument_list|(
name|sequenceNumber
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|(
name|id
argument_list|,
operator|new
name|TokenSecretManager
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|token
return|;
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken (final Token<?> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|renewals
operator|++
expr_stmt|;
name|decodeIdentifier
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken (final Token<?> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|cancellations
operator|++
expr_stmt|;
name|decodeIdentifier
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
DECL|method|innerBind (final URI uri, final Configuration conf)
specifier|protected
name|void
name|innerBind
parameter_list|(
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|initialized
argument_list|,
literal|"Not initialized"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|fsURI
operator|==
literal|null
argument_list|,
literal|"already bound"
argument_list|)
expr_stmt|;
name|fsURI
operator|=
name|uri
expr_stmt|;
name|canonicalServiceName
operator|=
name|uri
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bound to {}"
argument_list|,
name|fsURI
argument_list|)
expr_stmt|;
block|}
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
return|return
name|canonicalServiceName
return|;
block|}
DECL|method|setCanonicalServiceName (final String canonicalServiceName)
specifier|public
name|void
name|setCanonicalServiceName
parameter_list|(
specifier|final
name|String
name|canonicalServiceName
parameter_list|)
block|{
name|this
operator|.
name|canonicalServiceName
operator|=
name|canonicalServiceName
expr_stmt|;
block|}
DECL|method|getFsURI ()
specifier|public
name|URI
name|getFsURI
parameter_list|()
block|{
return|return
name|fsURI
return|;
block|}
DECL|method|isInitialized ()
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|initialized
return|;
block|}
DECL|method|isBound ()
specifier|public
name|boolean
name|isBound
parameter_list|()
block|{
return|return
name|fsURI
operator|!=
literal|null
return|;
block|}
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
DECL|method|getRenewals ()
specifier|public
name|int
name|getRenewals
parameter_list|()
block|{
return|return
name|renewals
return|;
block|}
DECL|method|getCancellations ()
specifier|public
name|int
name|getCancellations
parameter_list|()
block|{
return|return
name|cancellations
return|;
block|}
DECL|method|getIssued ()
specifier|public
name|int
name|getIssued
parameter_list|()
block|{
return|return
name|issued
return|;
block|}
DECL|method|getKind ()
specifier|public
name|Text
name|getKind
parameter_list|()
block|{
return|return
name|kind
return|;
block|}
DECL|method|setKind (final Text kind)
specifier|public
name|void
name|setKind
parameter_list|(
specifier|final
name|Text
name|kind
parameter_list|)
block|{
name|this
operator|.
name|kind
operator|=
name|kind
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"StubDelegationTokenManager{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"fsURI="
argument_list|)
operator|.
name|append
argument_list|(
name|fsURI
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", initialized="
argument_list|)
operator|.
name|append
argument_list|(
name|initialized
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", closed="
argument_list|)
operator|.
name|append
argument_list|(
name|closed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", renewals="
argument_list|)
operator|.
name|append
argument_list|(
name|renewals
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", cancellations="
argument_list|)
operator|.
name|append
argument_list|(
name|cancellations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", issued="
argument_list|)
operator|.
name|append
argument_list|(
name|issued
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Patch a configuration to declare this the DT provider for a filesystem    * built off the given configuration.    * The ABFS Filesystem still needs to come up with security enabled.    * @param conf configuration.    * @return the patched configuration.    */
DECL|method|useClassicDTManager (Configuration conf)
specifier|public
specifier|static
name|Configuration
name|useClassicDTManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FS_AZURE_ENABLE_DELEGATION_TOKEN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_AZURE_DELEGATION_TOKEN_PROVIDER_TYPE
argument_list|,
name|ClassicDelegationTokenManager
operator|.
name|NAME
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Get the password to use in secret managers.    * This is a constant; its just recalculated every time to stop findbugs    * highlighting security risks of shared mutable byte arrays.    * @return a password.    */
DECL|method|getSecretManagerPasssword ()
specifier|private
specifier|static
name|byte
index|[]
name|getSecretManagerPasssword
parameter_list|()
block|{
return|return
literal|"non-password"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * The secret manager always uses the same secret; the    * factory for new identifiers is that of the token manager.    */
DECL|class|TokenSecretManager
specifier|protected
specifier|static
class|class
name|TokenSecretManager
extends|extends
name|SecretManager
argument_list|<
name|StubAbfsTokenIdentifier
argument_list|>
block|{
DECL|method|TokenSecretManager ()
specifier|public
name|TokenSecretManager
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|createPassword (StubAbfsTokenIdentifier identifier)
specifier|protected
name|byte
index|[]
name|createPassword
parameter_list|(
name|StubAbfsTokenIdentifier
name|identifier
parameter_list|)
block|{
return|return
name|getSecretManagerPasssword
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|retrievePassword (StubAbfsTokenIdentifier identifier)
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|StubAbfsTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|InvalidToken
block|{
return|return
name|getSecretManagerPasssword
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|StubAbfsTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|StubAbfsTokenIdentifier
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

