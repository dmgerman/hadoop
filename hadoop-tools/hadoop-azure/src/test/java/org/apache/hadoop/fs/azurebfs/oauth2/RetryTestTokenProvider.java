begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.oauth2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|oauth2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|extensions
operator|.
name|CustomTokenProviderAdaptee
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test Token provider which should throw exception and trigger retries  */
end_comment

begin_class
DECL|class|RetryTestTokenProvider
specifier|public
class|class
name|RetryTestTokenProvider
implements|implements
name|CustomTokenProviderAdaptee
block|{
comment|// Need to track first token fetch otherwise will get counted as a retry too.
DECL|field|isThisFirstTokenFetch
specifier|private
specifier|static
name|boolean
name|isThisFirstTokenFetch
init|=
literal|true
decl_stmt|;
DECL|field|reTryCount
specifier|public
specifier|static
name|int
name|reTryCount
init|=
literal|0
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RetryTestTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (Configuration configuration, String accountName)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|String
name|accountName
parameter_list|)
throws|throws
name|IOException
block|{    }
DECL|method|ResetStatusToFirstTokenFetch ()
specifier|public
specifier|static
name|void
name|ResetStatusToFirstTokenFetch
parameter_list|()
block|{
name|isThisFirstTokenFetch
operator|=
literal|true
expr_stmt|;
name|reTryCount
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAccessToken ()
specifier|public
name|String
name|getAccessToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isThisFirstTokenFetch
condition|)
block|{
name|isThisFirstTokenFetch
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|reTryCount
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"RetryTestTokenProvider: Throw an exception in fetching tokens"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"test exception"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getExpiryTime ()
specifier|public
name|Date
name|getExpiryTime
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|()
return|;
block|}
block|}
end_class

end_unit

