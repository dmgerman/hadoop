begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|URIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|util
operator|.
name|URIUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|CloudStorageAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|OperationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|RetryPolicyFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|StorageCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|StorageUri
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobListingDetails
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobRequestOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CopyState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|storage
operator|.
name|blob
operator|.
name|ListBlobItem
import|;
end_import

begin_comment
comment|/**  * A mock implementation of the Azure Storage interaction layer for unit tests.  * Just does in-memory storage.  */
end_comment

begin_class
DECL|class|MockStorageInterface
specifier|public
class|class
name|MockStorageInterface
extends|extends
name|StorageInterface
block|{
DECL|field|backingStore
specifier|private
name|InMemoryBlockBlobStore
name|backingStore
decl_stmt|;
DECL|field|preExistingContainers
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|PreExistingContainer
argument_list|>
name|preExistingContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|MockStorageInterface
operator|.
name|PreExistingContainer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|baseUriString
specifier|private
name|String
name|baseUriString
decl_stmt|;
DECL|method|getBackingStore ()
specifier|public
name|InMemoryBlockBlobStore
name|getBackingStore
parameter_list|()
block|{
return|return
name|backingStore
return|;
block|}
comment|/**    * Mocks the situation where a container already exists before WASB comes in,    * i.e. the situation where a user creates a container then mounts WASB on the    * pre-existing container.    *     * @param uri    *          The URI of the container.    * @param metadata    *          The metadata on the container.    */
DECL|method|addPreExistingContainer (String uri, HashMap<String, String> metadata)
specifier|public
name|void
name|addPreExistingContainer
parameter_list|(
name|String
name|uri
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
name|preExistingContainers
operator|.
name|add
argument_list|(
operator|new
name|PreExistingContainer
argument_list|(
name|uri
argument_list|,
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setRetryPolicyFactory (final RetryPolicyFactory retryPolicyFactory)
specifier|public
name|void
name|setRetryPolicyFactory
parameter_list|(
specifier|final
name|RetryPolicyFactory
name|retryPolicyFactory
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|setTimeoutInMs (int timeoutInMs)
specifier|public
name|void
name|setTimeoutInMs
parameter_list|(
name|int
name|timeoutInMs
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|createBlobClient (CloudStorageAccount account)
specifier|public
name|void
name|createBlobClient
parameter_list|(
name|CloudStorageAccount
name|account
parameter_list|)
block|{
name|backingStore
operator|=
operator|new
name|InMemoryBlockBlobStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createBlobClient (URI baseUri)
specifier|public
name|void
name|createBlobClient
parameter_list|(
name|URI
name|baseUri
parameter_list|)
block|{
name|backingStore
operator|=
operator|new
name|InMemoryBlockBlobStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createBlobClient (URI baseUri, StorageCredentials credentials)
specifier|public
name|void
name|createBlobClient
parameter_list|(
name|URI
name|baseUri
parameter_list|,
name|StorageCredentials
name|credentials
parameter_list|)
block|{
name|this
operator|.
name|baseUriString
operator|=
name|baseUri
operator|.
name|toString
argument_list|()
expr_stmt|;
name|backingStore
operator|=
operator|new
name|InMemoryBlockBlobStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|StorageCredentials
name|getCredentials
parameter_list|()
block|{
comment|// Not implemented for mock interface.
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerReference (String name)
specifier|public
name|CloudBlobContainerWrapper
name|getContainerReference
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
name|String
name|fullUri
decl_stmt|;
try|try
block|{
name|fullUri
operator|=
name|baseUriString
operator|+
literal|"/"
operator|+
name|URIUtil
operator|.
name|encodePath
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem encoding fullUri"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|MockCloudBlobContainerWrapper
name|container
init|=
operator|new
name|MockCloudBlobContainerWrapper
argument_list|(
name|fullUri
argument_list|,
name|name
argument_list|)
decl_stmt|;
comment|// Check if we have a pre-existing container with that name, and prime
comment|// the wrapper with that knowledge if it's found.
for|for
control|(
name|PreExistingContainer
name|existing
range|:
name|preExistingContainers
control|)
block|{
if|if
condition|(
name|fullUri
operator|.
name|equalsIgnoreCase
argument_list|(
name|existing
operator|.
name|containerUri
argument_list|)
condition|)
block|{
comment|// We have a pre-existing container. Mark the wrapper as created and
comment|// make sure we use the metadata for it.
name|container
operator|.
name|created
operator|=
literal|true
expr_stmt|;
name|backingStore
operator|.
name|setContainerMetadata
argument_list|(
name|existing
operator|.
name|containerMetadata
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|container
return|;
block|}
DECL|class|MockCloudBlobContainerWrapper
class|class
name|MockCloudBlobContainerWrapper
extends|extends
name|CloudBlobContainerWrapper
block|{
DECL|field|created
specifier|private
name|boolean
name|created
init|=
literal|false
decl_stmt|;
DECL|field|metadata
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
decl_stmt|;
DECL|field|baseUri
specifier|private
specifier|final
name|String
name|baseUri
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|MockCloudBlobContainerWrapper (String baseUri, String name)
specifier|public
name|MockCloudBlobContainerWrapper
parameter_list|(
name|String
name|baseUri
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|baseUri
operator|=
name|baseUri
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|exists (OperationContext opContext)
specifier|public
name|boolean
name|exists
parameter_list|(
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
block|{
return|return
name|created
return|;
block|}
annotation|@
name|Override
DECL|method|create (OperationContext opContext)
specifier|public
name|void
name|create
parameter_list|(
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
block|{
name|created
operator|=
literal|true
expr_stmt|;
name|backingStore
operator|.
name|setContainerMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetadata ()
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
annotation|@
name|Override
DECL|method|setMetadata (HashMap<String, String> metadata)
specifier|public
name|void
name|setMetadata
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|downloadAttributes (OperationContext opContext)
specifier|public
name|void
name|downloadAttributes
parameter_list|(
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
block|{
name|metadata
operator|=
name|backingStore
operator|.
name|getContainerMetadata
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uploadMetadata (OperationContext opContext)
specifier|public
name|void
name|uploadMetadata
parameter_list|(
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
block|{
name|backingStore
operator|.
name|setContainerMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDirectoryReference (String relativePath)
specifier|public
name|CloudBlobDirectoryWrapper
name|getDirectoryReference
parameter_list|(
name|String
name|relativePath
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
return|return
operator|new
name|MockCloudBlobDirectoryWrapper
argument_list|(
operator|new
name|URI
argument_list|(
name|fullUriString
argument_list|(
name|relativePath
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBlockBlobReference (String relativePath)
specifier|public
name|CloudBlockBlobWrapper
name|getBlockBlobReference
parameter_list|(
name|String
name|relativePath
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
return|return
operator|new
name|MockCloudBlockBlobWrapper
argument_list|(
operator|new
name|URI
argument_list|(
name|fullUriString
argument_list|(
name|relativePath
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|// helper to create full URIs for directory and blob.
comment|// use withTrailingSlash=true to get a good path for a directory.
DECL|method|fullUriString (String relativePath, boolean withTrailingSlash)
specifier|private
name|String
name|fullUriString
parameter_list|(
name|String
name|relativePath
parameter_list|,
name|boolean
name|withTrailingSlash
parameter_list|)
block|{
name|String
name|fullUri
decl_stmt|;
name|String
name|baseUri
init|=
name|this
operator|.
name|baseUri
decl_stmt|;
if|if
condition|(
operator|!
name|baseUri
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|baseUri
operator|+=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|withTrailingSlash
operator|&&
operator|!
name|relativePath
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|relativePath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|relativePath
operator|+=
literal|"/"
expr_stmt|;
block|}
try|try
block|{
name|fullUri
operator|=
name|baseUri
operator|+
name|URIUtil
operator|.
name|encodePath
argument_list|(
name|relativePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem encoding fullUri"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|fullUri
return|;
block|}
block|}
DECL|class|PreExistingContainer
specifier|private
specifier|static
class|class
name|PreExistingContainer
block|{
DECL|field|containerUri
specifier|final
name|String
name|containerUri
decl_stmt|;
DECL|field|containerMetadata
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|containerMetadata
decl_stmt|;
DECL|method|PreExistingContainer (String uri, HashMap<String, String> metadata)
specifier|public
name|PreExistingContainer
parameter_list|(
name|String
name|uri
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|containerUri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|containerMetadata
operator|=
name|metadata
expr_stmt|;
block|}
block|}
DECL|class|MockCloudBlobDirectoryWrapper
class|class
name|MockCloudBlobDirectoryWrapper
extends|extends
name|CloudBlobDirectoryWrapper
block|{
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|method|MockCloudBlobDirectoryWrapper (URI uri)
specifier|public
name|MockCloudBlobDirectoryWrapper
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContainer ()
specifier|public
name|CloudBlobContainer
name|getContainer
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getParent ()
specifier|public
name|CloudBlobDirectory
name|getParent
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|listBlobs (String prefix, boolean useFlatBlobListing, EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext)
specifier|public
name|Iterable
argument_list|<
name|ListBlobItem
argument_list|>
name|listBlobs
parameter_list|(
name|String
name|prefix
parameter_list|,
name|boolean
name|useFlatBlobListing
parameter_list|,
name|EnumSet
argument_list|<
name|BlobListingDetails
argument_list|>
name|listingDetails
parameter_list|,
name|BlobRequestOptions
name|options
parameter_list|,
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
name|ArrayList
argument_list|<
name|ListBlobItem
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ListBlobItem
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|fullPrefix
init|=
name|prefix
operator|==
literal|null
condition|?
name|uri
operator|.
name|toString
argument_list|()
else|:
operator|new
name|URI
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
operator|+
name|prefix
argument_list|,
name|uri
operator|.
name|getQuery
argument_list|()
argument_list|,
name|uri
operator|.
name|getFragment
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|includeMetadata
init|=
name|listingDetails
operator|.
name|contains
argument_list|(
name|BlobListingDetails
operator|.
name|METADATA
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|addedDirectories
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InMemoryBlockBlobStore
operator|.
name|ListBlobEntry
name|current
range|:
name|backingStore
operator|.
name|listBlobs
argument_list|(
name|fullPrefix
argument_list|,
name|includeMetadata
argument_list|)
control|)
block|{
name|int
name|indexOfSlash
init|=
name|current
operator|.
name|getKey
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|fullPrefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|useFlatBlobListing
operator|||
name|indexOfSlash
operator|<
literal|0
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|MockCloudBlockBlobWrapper
argument_list|(
operator|new
name|URI
argument_list|(
name|current
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|current
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|current
operator|.
name|getContentLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|directoryName
init|=
name|current
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfSlash
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|addedDirectories
operator|.
name|contains
argument_list|(
name|directoryName
argument_list|)
condition|)
block|{
name|addedDirectories
operator|.
name|add
argument_list|(
name|current
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|MockCloudBlobDirectoryWrapper
argument_list|(
operator|new
name|URI
argument_list|(
name|directoryName
operator|+
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|getStorageUri ()
specifier|public
name|StorageUri
name|getStorageUri
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|MockCloudBlockBlobWrapper
class|class
name|MockCloudBlockBlobWrapper
extends|extends
name|CloudBlockBlobWrapper
block|{
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|metadata
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|properties
specifier|private
name|BlobProperties
name|properties
decl_stmt|;
DECL|method|MockCloudBlockBlobWrapper (URI uri, HashMap<String, String> metadata, int length)
specifier|public
name|MockCloudBlockBlobWrapper
parameter_list|(
name|URI
name|uri
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|properties
operator|=
operator|new
name|BlobProperties
argument_list|()
expr_stmt|;
name|this
operator|.
name|properties
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|properties
operator|.
name|setLastModified
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshProperties (boolean getMetadata)
specifier|private
name|void
name|refreshProperties
parameter_list|(
name|boolean
name|getMetadata
parameter_list|)
block|{
if|if
condition|(
name|backingStore
operator|.
name|exists
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|byte
index|[]
name|content
init|=
name|backingStore
operator|.
name|getContent
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|properties
operator|=
operator|new
name|BlobProperties
argument_list|()
expr_stmt|;
name|properties
operator|.
name|setLength
argument_list|(
name|content
operator|.
name|length
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setLastModified
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getMetadata
condition|)
block|{
name|metadata
operator|=
name|backingStore
operator|.
name|getMetadata
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getContainer ()
specifier|public
name|CloudBlobContainer
name|getContainer
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getParent ()
specifier|public
name|CloudBlobDirectory
name|getParent
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|getMetadata ()
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
annotation|@
name|Override
DECL|method|setMetadata (HashMap<String, String> metadata)
specifier|public
name|void
name|setMetadata
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startCopyFromBlob (CloudBlockBlobWrapper sourceBlob, OperationContext opContext)
specifier|public
name|void
name|startCopyFromBlob
parameter_list|(
name|CloudBlockBlobWrapper
name|sourceBlob
parameter_list|,
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
throws|,
name|URISyntaxException
block|{
name|backingStore
operator|.
name|copy
argument_list|(
name|sourceBlob
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// it would be best if backingStore.properties.CopyState were tracked
comment|// If implemented, update azureNativeFileSystemStore.waitForCopyToComplete
block|}
annotation|@
name|Override
DECL|method|getCopyState ()
specifier|public
name|CopyState
name|getCopyState
parameter_list|()
block|{
return|return
name|this
operator|.
name|properties
operator|.
name|getCopyState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|delete (OperationContext opContext)
specifier|public
name|void
name|delete
parameter_list|(
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
block|{
name|backingStore
operator|.
name|delete
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exists (OperationContext opContext)
specifier|public
name|boolean
name|exists
parameter_list|(
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
block|{
return|return
name|backingStore
operator|.
name|exists
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|downloadAttributes (OperationContext opContext)
specifier|public
name|void
name|downloadAttributes
parameter_list|(
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
block|{
name|refreshProperties
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProperties ()
specifier|public
name|BlobProperties
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
annotation|@
name|Override
DECL|method|openInputStream (BlobRequestOptions options, OperationContext opContext)
specifier|public
name|InputStream
name|openInputStream
parameter_list|(
name|BlobRequestOptions
name|options
parameter_list|,
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|backingStore
operator|.
name|getContent
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|openOutputStream (BlobRequestOptions options, OperationContext opContext)
specifier|public
name|OutputStream
name|openOutputStream
parameter_list|(
name|BlobRequestOptions
name|options
parameter_list|,
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
block|{
return|return
name|backingStore
operator|.
name|upload
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|metadata
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|upload (InputStream sourceStream, OperationContext opContext)
specifier|public
name|void
name|upload
parameter_list|(
name|InputStream
name|sourceStream
parameter_list|,
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
throws|,
name|IOException
block|{
name|ByteArrayOutputStream
name|allContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|allContent
operator|.
name|write
argument_list|(
name|sourceStream
argument_list|)
expr_stmt|;
name|backingStore
operator|.
name|setContent
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|allContent
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|refreshProperties
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|allContent
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uploadMetadata (OperationContext opContext)
specifier|public
name|void
name|uploadMetadata
parameter_list|(
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
block|{
name|backingStore
operator|.
name|setContent
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|backingStore
operator|.
name|getContent
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uploadProperties (OperationContext opContext)
specifier|public
name|void
name|uploadProperties
parameter_list|(
name|OperationContext
name|opContext
parameter_list|)
throws|throws
name|StorageException
block|{
name|refreshProperties
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setStreamMinimumReadSizeInBytes (int minimumReadSize)
specifier|public
name|void
name|setStreamMinimumReadSizeInBytes
parameter_list|(
name|int
name|minimumReadSize
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|setWriteBlockSizeInBytes (int writeBlockSizeInBytes)
specifier|public
name|void
name|setWriteBlockSizeInBytes
parameter_list|(
name|int
name|writeBlockSizeInBytes
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getStorageUri ()
specifier|public
name|StorageUri
name|getStorageUri
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

