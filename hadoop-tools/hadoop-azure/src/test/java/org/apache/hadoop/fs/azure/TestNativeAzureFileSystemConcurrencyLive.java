begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/***  * Test class to hold all Live Azure storage concurrency tests.  */
end_comment

begin_class
DECL|class|TestNativeAzureFileSystemConcurrencyLive
specifier|public
class|class
name|TestNativeAzureFileSystemConcurrencyLive
extends|extends
name|AbstractWasbTestBase
block|{
DECL|field|TEST_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|TEST_COUNT
init|=
literal|102
decl_stmt|;
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
return|;
block|}
comment|/**    * Test multi-threaded deletes in WASB. Expected behavior is one of the thread    * should be to successfully delete the file and return true and all other    * threads need to return false.    */
annotation|@
name|Test
DECL|method|testMultiThreadedDeletes ()
specifier|public
name|void
name|testMultiThreadedDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"test.dat"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|threadCount
init|=
name|TEST_COUNT
decl_stmt|;
name|DeleteHelperThread
index|[]
name|helperThreads
init|=
operator|new
name|DeleteHelperThread
index|[
name|threadCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|helperThreads
index|[
name|i
index|]
operator|=
operator|new
name|DeleteHelperThread
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|helperThreads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|boolean
name|deleteSuccess
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"child thread has exception : "
operator|+
name|helperThreads
index|[
name|i
index|]
operator|.
name|getException
argument_list|()
argument_list|,
name|helperThreads
index|[
name|i
index|]
operator|.
name|getExceptionEncounteredFlag
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteSuccess
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"More than one thread delete() retuhelperThreads[i].getDeleteSuccess()"
argument_list|,
name|helperThreads
index|[
name|i
index|]
operator|.
name|getExceptionEncounteredFlag
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deleteSuccess
operator|=
name|helperThreads
index|[
name|i
index|]
operator|.
name|getDeleteSuccess
argument_list|()
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No successfull delete found"
argument_list|,
name|deleteSuccess
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|DeleteHelperThread
class|class
name|DeleteHelperThread
implements|implements
name|Runnable
block|{
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|p
specifier|private
name|Path
name|p
decl_stmt|;
DECL|field|deleteSuccess
specifier|private
name|boolean
name|deleteSuccess
decl_stmt|;
DECL|field|exceptionEncountered
specifier|private
name|boolean
name|exceptionEncountered
decl_stmt|;
DECL|field|ex
specifier|private
name|Exception
name|ex
decl_stmt|;
DECL|method|DeleteHelperThread (FileSystem fs, Path p)
specifier|public
name|DeleteHelperThread
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|deleteSuccess
operator|=
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioEx
parameter_list|)
block|{
name|exceptionEncountered
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|ex
operator|=
name|ioEx
expr_stmt|;
block|}
block|}
DECL|method|getDeleteSuccess ()
specifier|public
name|boolean
name|getDeleteSuccess
parameter_list|()
block|{
return|return
name|deleteSuccess
return|;
block|}
DECL|method|getExceptionEncounteredFlag ()
specifier|public
name|boolean
name|getExceptionEncounteredFlag
parameter_list|()
block|{
return|return
name|exceptionEncountered
return|;
block|}
DECL|method|getException ()
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|ex
return|;
block|}
block|}
end_class

end_unit

