begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlockEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlockListingFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNotNull
import|;
end_import

begin_comment
comment|/**  * Test semantics of functions flush, hflush, hsync, and close for block blobs,  * block blobs with compaction, and page blobs.  */
end_comment

begin_class
DECL|class|ITestOutputStreamSemantics
specifier|public
class|class
name|ITestOutputStreamSemantics
extends|extends
name|AbstractWasbTestBase
block|{
DECL|field|PAGE_BLOB_DIR
specifier|private
specifier|static
specifier|final
name|String
name|PAGE_BLOB_DIR
init|=
literal|"/pageblob"
decl_stmt|;
DECL|field|BLOCK_BLOB_DIR
specifier|private
specifier|static
specifier|final
name|String
name|BLOCK_BLOB_DIR
init|=
literal|"/blockblob"
decl_stmt|;
DECL|field|BLOCK_BLOB_COMPACTION_DIR
specifier|private
specifier|static
specifier|final
name|String
name|BLOCK_BLOB_COMPACTION_DIR
init|=
literal|"/compaction"
decl_stmt|;
DECL|method|getRandomBytes ()
specifier|private
name|byte
index|[]
name|getRandomBytes
parameter_list|()
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|PageBlobFormatHelpers
operator|.
name|PAGE_SIZE
operator|-
name|PageBlobFormatHelpers
operator|.
name|PAGE_HEADER_SIZE
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
DECL|method|getBlobPathWithTestName (String parentDir)
specifier|private
name|Path
name|getBlobPathWithTestName
parameter_list|(
name|String
name|parentDir
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|parentDir
operator|+
literal|"/"
operator|+
name|methodName
operator|.
name|getMethodName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|validate (Path path, byte[] writeBuffer, boolean isEqual)
specifier|private
name|void
name|validate
parameter_list|(
name|Path
name|path
parameter_list|,
name|byte
index|[]
name|writeBuffer
parameter_list|,
name|boolean
name|isEqual
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|blobPath
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
init|)
block|{
name|byte
index|[]
name|readBuffer
init|=
operator|new
name|byte
index|[
name|PageBlobFormatHelpers
operator|.
name|PAGE_SIZE
operator|-
name|PageBlobFormatHelpers
operator|.
name|PAGE_HEADER_SIZE
index|]
decl_stmt|;
name|int
name|numBytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|readBuffer
argument_list|,
literal|0
argument_list|,
name|readBuffer
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEqual
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Bytes read do not match bytes written to %1$s"
argument_list|,
name|blobPath
argument_list|)
argument_list|,
name|writeBuffer
argument_list|,
name|readBuffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Bytes read unexpectedly match bytes written to %1$s"
argument_list|,
name|blobPath
argument_list|)
argument_list|,
name|readBuffer
argument_list|,
name|IsNot
operator|.
name|not
argument_list|(
name|IsEqual
operator|.
name|equalTo
argument_list|(
name|writeBuffer
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isBlockBlobAppendStreamWrapper (FSDataOutputStream stream)
specifier|private
name|boolean
name|isBlockBlobAppendStreamWrapper
parameter_list|(
name|FSDataOutputStream
name|stream
parameter_list|)
block|{
return|return
operator|(
call|(
name|SyncableDataOutputStream
call|)
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|.
name|NativeAzureFsOutputStream
operator|)
name|stream
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
operator|.
name|getOutStream
argument_list|()
operator|)
operator|.
name|getOutStream
argument_list|()
operator|instanceof
name|BlockBlobAppendStream
return|;
block|}
DECL|method|isPageBlobStreamWrapper (FSDataOutputStream stream)
specifier|private
name|boolean
name|isPageBlobStreamWrapper
parameter_list|(
name|FSDataOutputStream
name|stream
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SyncableDataOutputStream
operator|)
name|stream
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|getOutStream
argument_list|()
operator|instanceof
name|PageBlobOutputStream
return|;
block|}
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Configure the page blob directories
name|conf
operator|.
name|set
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_PAGE_BLOB_DIRECTORIES
argument_list|,
name|PAGE_BLOB_DIR
argument_list|)
expr_stmt|;
comment|// Configure the block blob with compaction directories
name|conf
operator|.
name|set
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_BLOCK_BLOB_WITH_COMPACTION_DIRECTORIES
argument_list|,
name|BLOCK_BLOB_COMPACTION_DIR
argument_list|)
expr_stmt|;
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|""
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|// Verify flush writes data to storage for Page Blobs
annotation|@
name|Test
DECL|method|testPageBlobFlush ()
specifier|public
name|void
name|testPageBlobFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|PAGE_BLOB_DIR
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// flush is asynchronous for Page Blob, so we need to
comment|// wait for it to complete
name|SyncableDataOutputStream
name|syncStream
init|=
operator|(
name|SyncableDataOutputStream
operator|)
name|stream
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
name|PageBlobOutputStream
name|pageBlobStream
init|=
operator|(
name|PageBlobOutputStream
operator|)
name|syncStream
operator|.
name|getOutStream
argument_list|()
decl_stmt|;
name|pageBlobStream
operator|.
name|waitForLastFlushCompletion
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|path
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Verify hflush writes data to storage for Page Blobs
annotation|@
name|Test
DECL|method|testPageBlobHFlush ()
specifier|public
name|void
name|testPageBlobHFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|PAGE_BLOB_DIR
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|isPageBlobStreamWrapper
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|path
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// HSync must write data to storage for Page Blobs
annotation|@
name|Test
DECL|method|testPageBlobHSync ()
specifier|public
name|void
name|testPageBlobHSync
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|PAGE_BLOB_DIR
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|isPageBlobStreamWrapper
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|path
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Close must write data to storage for Page Blobs
annotation|@
name|Test
DECL|method|testPageBlobClose ()
specifier|public
name|void
name|testPageBlobClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|PAGE_BLOB_DIR
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|isPageBlobStreamWrapper
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|path
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Verify flush does not write data to storage for Block Blobs
annotation|@
name|Test
DECL|method|testBlockBlobFlush ()
specifier|public
name|void
name|testBlockBlobFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|BLOCK_BLOB_DIR
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|blobPath
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Create a blob reference to read and validate the block list
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|blobPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// after the stream is closed, the block list should be non-empty
name|ArrayList
argument_list|<
name|BlockEntry
argument_list|>
name|blockList
init|=
name|blob
operator|.
name|downloadBlockList
argument_list|(
name|BlockListingFilter
operator|.
name|COMMITTED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blockList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify hflush does not write data to storage for Block Blobs
annotation|@
name|Test
DECL|method|testBlockBlobHFlush ()
specifier|public
name|void
name|testBlockBlobHFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|BLOCK_BLOB_DIR
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|blobPath
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Create a blob reference to read and validate the block list
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|blobPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// after the stream is closed, the block list should be non-empty
name|ArrayList
argument_list|<
name|BlockEntry
argument_list|>
name|blockList
init|=
name|blob
operator|.
name|downloadBlockList
argument_list|(
name|BlockListingFilter
operator|.
name|COMMITTED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blockList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify hsync does not write data to storage for Block Blobs
annotation|@
name|Test
DECL|method|testBlockBlobHSync ()
specifier|public
name|void
name|testBlockBlobHSync
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|BLOCK_BLOB_DIR
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|blobPath
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Create a blob reference to read and validate the block list
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|blobPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// after the stream is closed, the block list should be non-empty
name|ArrayList
argument_list|<
name|BlockEntry
argument_list|>
name|blockList
init|=
name|blob
operator|.
name|downloadBlockList
argument_list|(
name|BlockListingFilter
operator|.
name|COMMITTED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blockList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Close must write data to storage for Block Blobs
annotation|@
name|Test
DECL|method|testBlockBlobClose ()
specifier|public
name|void
name|testBlockBlobClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|BLOCK_BLOB_DIR
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|path
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Verify flush writes data to storage for Block Blobs with compaction
annotation|@
name|Test
DECL|method|testBlockBlobCompactionFlush ()
specifier|public
name|void
name|testBlockBlobCompactionFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|BLOCK_BLOB_COMPACTION_DIR
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|isBlockBlobAppendStreamWrapper
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|blobPath
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Create a blob reference to read and validate the block list
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|blobPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// after the stream is closed, the block list should be non-empty
name|ArrayList
argument_list|<
name|BlockEntry
argument_list|>
name|blockList
init|=
name|blob
operator|.
name|downloadBlockList
argument_list|(
name|BlockListingFilter
operator|.
name|COMMITTED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blockList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify hflush writes data to storage for Block Blobs with Compaction
annotation|@
name|Test
DECL|method|testBlockBlobCompactionHFlush ()
specifier|public
name|void
name|testBlockBlobCompactionHFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|BLOCK_BLOB_COMPACTION_DIR
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|isBlockBlobAppendStreamWrapper
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|blobPath
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Create a blob reference to read and validate the block list
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|blobPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// after the stream is closed, the block list should be non-empty
name|ArrayList
argument_list|<
name|BlockEntry
argument_list|>
name|blockList
init|=
name|blob
operator|.
name|downloadBlockList
argument_list|(
name|BlockListingFilter
operator|.
name|COMMITTED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|blockList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify hsync writes data to storage for Block Blobs with compaction
annotation|@
name|Test
DECL|method|testBlockBlobCompactionHSync ()
specifier|public
name|void
name|testBlockBlobCompactionHSync
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|BLOCK_BLOB_COMPACTION_DIR
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|isBlockBlobAppendStreamWrapper
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|blobPath
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Create a blob reference to read and validate the block list
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|blobPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// after the stream is closed, the block list should be non-empty
name|ArrayList
argument_list|<
name|BlockEntry
argument_list|>
name|blockList
init|=
name|blob
operator|.
name|downloadBlockList
argument_list|(
name|BlockListingFilter
operator|.
name|COMMITTED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|blockList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Close must write data to storage for Block Blobs with compaction
annotation|@
name|Test
DECL|method|testBlockBlobCompactionClose ()
specifier|public
name|void
name|testBlockBlobCompactionClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|BLOCK_BLOB_COMPACTION_DIR
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|isBlockBlobAppendStreamWrapper
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|validate
argument_list|(
name|path
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// A small write does not write data to storage for Page Blobs
annotation|@
name|Test
DECL|method|testPageBlobSmallWrite ()
specifier|public
name|void
name|testPageBlobSmallWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|PAGE_BLOB_DIR
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|isPageBlobStreamWrapper
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|path
argument_list|,
name|buffer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// A small write does not write data to storage for Block Blobs
annotation|@
name|Test
DECL|method|testBlockBlobSmallWrite ()
specifier|public
name|void
name|testBlockBlobSmallWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|BLOCK_BLOB_DIR
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|path
argument_list|,
name|buffer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// A small write does not write data to storage for Block Blobs
comment|// with Compaction
annotation|@
name|Test
DECL|method|testBlockBlobCompactionSmallWrite ()
specifier|public
name|void
name|testBlockBlobCompactionSmallWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getBlobPathWithTestName
argument_list|(
name|BLOCK_BLOB_COMPACTION_DIR
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|isBlockBlobAppendStreamWrapper
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|getRandomBytes
argument_list|()
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|path
argument_list|,
name|buffer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

