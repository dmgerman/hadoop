begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobOutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_comment
comment|/**  * Live blob operations.  */
end_comment

begin_class
DECL|class|ITestOutOfBandAzureBlobOperationsLive
specifier|public
class|class
name|ITestOutOfBandAzureBlobOperationsLive
extends|extends
name|AbstractWasbTestBase
block|{
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
return|;
block|}
comment|// scenario for this particular test described at MONARCH-HADOOP-764
comment|// creating a file out-of-band would confuse mkdirs("<oobfilesUncleFolder>")
comment|// eg oob creation of "user/<name>/testFolder/a/input/file"
comment|// Then wasb creation of "user/<name>/testFolder/a/output" fails
annotation|@
name|Test
DECL|method|outOfBandFolder_uncleMkdirs ()
specifier|public
name|void
name|outOfBandFolder_uncleMkdirs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// NOTE: manual use of CloubBlockBlob targets working directory explicitly.
comment|// WASB driver methods prepend working directory implicitly.
name|String
name|workingDir
init|=
literal|"user/"
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|workingDir
operator|+
literal|"testFolder1/a/input/file"
argument_list|)
decl_stmt|;
name|BlobOutputStream
name|s
init|=
name|blob
operator|.
name|openOutputStream
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testFolder1/a/input/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|targetFolder
init|=
operator|new
name|Path
argument_list|(
literal|"testFolder1/a/output"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|targetFolder
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// scenario for this particular test described at MONARCH-HADOOP-764
annotation|@
name|Test
DECL|method|outOfBandFolder_parentDelete ()
specifier|public
name|void
name|outOfBandFolder_parentDelete
parameter_list|()
throws|throws
name|Exception
block|{
comment|// NOTE: manual use of CloubBlockBlob targets working directory explicitly.
comment|// WASB driver methods prepend working directory implicitly.
name|String
name|workingDir
init|=
literal|"user/"
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|workingDir
operator|+
literal|"testFolder2/a/input/file"
argument_list|)
decl_stmt|;
name|BlobOutputStream
name|s
init|=
name|blob
operator|.
name|openOutputStream
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testFolder2/a/input/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|targetFolder
init|=
operator|new
name|Path
argument_list|(
literal|"testFolder2/a/input"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|targetFolder
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|outOfBandFolder_rootFileDelete ()
specifier|public
name|void
name|outOfBandFolder_rootFileDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
literal|"fileY"
argument_list|)
decl_stmt|;
name|BlobOutputStream
name|s
init|=
name|blob
operator|.
name|openOutputStream
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/fileY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/fileY"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|outOfBandFolder_firstLevelFolderDelete ()
specifier|public
name|void
name|outOfBandFolder_firstLevelFolderDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
literal|"folderW/file"
argument_list|)
decl_stmt|;
name|BlobOutputStream
name|s
init|=
name|blob
operator|.
name|openOutputStream
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/folderW"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/folderW/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/folderW"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// scenario for this particular test described at MONARCH-HADOOP-764
annotation|@
name|Test
DECL|method|outOfBandFolder_siblingCreate ()
specifier|public
name|void
name|outOfBandFolder_siblingCreate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// NOTE: manual use of CloubBlockBlob targets working directory explicitly.
comment|// WASB driver methods prepend working directory implicitly.
name|String
name|workingDir
init|=
literal|"user/"
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|workingDir
operator|+
literal|"testFolder3/a/input/file"
argument_list|)
decl_stmt|;
name|BlobOutputStream
name|s
init|=
name|blob
operator|.
name|openOutputStream
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testFolder3/a/input/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|targetFile
init|=
operator|new
name|Path
argument_list|(
literal|"testFolder3/a/input/file2"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|s2
init|=
name|fs
operator|.
name|create
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|s2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// scenario for this particular test described at MONARCH-HADOOP-764
comment|// creating a new file in the root folder
annotation|@
name|Test
DECL|method|outOfBandFolder_create_rootDir ()
specifier|public
name|void
name|outOfBandFolder_create_rootDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|targetFile
init|=
operator|new
name|Path
argument_list|(
literal|"/newInRoot"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|s2
init|=
name|fs
operator|.
name|create
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|s2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// scenario for this particular test described at MONARCH-HADOOP-764
annotation|@
name|Test
DECL|method|outOfBandFolder_rename ()
specifier|public
name|void
name|outOfBandFolder_rename
parameter_list|()
throws|throws
name|Exception
block|{
comment|// NOTE: manual use of CloubBlockBlob targets working directory explicitly.
comment|// WASB driver methods prepend working directory implicitly.
name|String
name|workingDir
init|=
literal|"user/"
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|workingDir
operator|+
literal|"testFolder4/a/input/file"
argument_list|)
decl_stmt|;
name|BlobOutputStream
name|s
init|=
name|blob
operator|.
name|openOutputStream
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|srcFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"testFolder4/a/input/file"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|srcFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|destFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"testFolder4/a/input/file2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcFilePath
argument_list|,
name|destFilePath
argument_list|)
expr_stmt|;
block|}
comment|// Verify that you can rename a file which is the only file in an implicit folder in the
comment|// WASB file system.
comment|// scenario for this particular test described at MONARCH-HADOOP-892
annotation|@
name|Test
DECL|method|outOfBandSingleFile_rename ()
specifier|public
name|void
name|outOfBandSingleFile_rename
parameter_list|()
throws|throws
name|Exception
block|{
comment|//NOTE: manual use of CloubBlockBlob targets working directory explicitly.
comment|//       WASB driver methods prepend working directory implicitly.
name|String
name|workingDir
init|=
literal|"user/"
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
name|workingDir
operator|+
literal|"testFolder5/a/input/file"
argument_list|)
decl_stmt|;
name|BlobOutputStream
name|s
init|=
name|blob
operator|.
name|openOutputStream
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|srcFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"testFolder5/a/input/file"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|srcFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|destFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"testFolder5/file2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcFilePath
argument_list|,
name|destFilePath
argument_list|)
expr_stmt|;
block|}
comment|// WASB must force explicit parent directories in create, delete, mkdirs, rename.
comment|// scenario for this particular test described at MONARCH-HADOOP-764
annotation|@
name|Test
DECL|method|outOfBandFolder_rename_rootLevelFiles ()
specifier|public
name|void
name|outOfBandFolder_rename_rootLevelFiles
parameter_list|()
throws|throws
name|Exception
block|{
comment|// NOTE: manual use of CloubBlockBlob targets working directory explicitly.
comment|// WASB driver methods prepend working directory implicitly.
name|CloudBlockBlob
name|blob
init|=
name|testAccount
operator|.
name|getBlobReference
argument_list|(
literal|"fileX"
argument_list|)
decl_stmt|;
name|BlobOutputStream
name|s
init|=
name|blob
operator|.
name|openOutputStream
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|srcFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/fileX"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|srcFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|destFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/fileXrename"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcFilePath
argument_list|,
name|destFilePath
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

