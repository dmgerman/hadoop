begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Test rename operation.  */
end_comment

begin_class
DECL|class|ITestAzureBlobFileSystemRename
specifier|public
class|class
name|ITestAzureBlobFileSystemRename
extends|extends
name|DependencyInjectedTest
block|{
DECL|method|ITestAzureBlobFileSystemRename ()
specifier|public
name|ITestAzureBlobFileSystemRename
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testEnsureFileIsRenamed ()
specifier|public
name|void
name|testEnsureFileIsRenamed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testfile"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testfile"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"testfile2"
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testfile2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testfile"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameFile ()
specifier|public
name|void
name|testRenameFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testSrc"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testSrc/file1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testSrc"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/testDst"
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|fileStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testDst"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameFileUsingUnicode ()
specifier|public
name|void
name|testRenameFileUsingUnicode
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|//known issue: ListStatus operation to folders/files whose name contains '?' will fail
comment|//This is because Auto rest client didn't encode '?' in the uri query parameters
name|String
index|[]
name|folders1
init|=
operator|new
name|String
index|[]
block|{
literal|"/%2c%26"
block|,
literal|"/ÃÃ¡Î â"
block|,
literal|"/A +B"
block|,
literal|"/A~`!@#$%^&*()-_+={};:'>,<B"
block|}
decl_stmt|;
name|String
index|[]
name|folders2
init|=
operator|new
name|String
index|[]
block|{
literal|"/abcÃâ123"
block|,
literal|"/abcÃÃ¡Î â123"
block|,
literal|"/B+ C"
block|,
literal|"/B~`!@#$%^&*()-_+={};:'>,<C"
block|}
decl_stmt|;
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
literal|"/%2c%27"
block|,
literal|"/ä¸­æ"
block|,
literal|"/C +D"
block|,
literal|"/C~`!@#$%^&*()-_+={};:'>,<D"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|folderPath1
init|=
operator|new
name|Path
argument_list|(
name|folders1
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|folderPath1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|folderPath1
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|folders1
index|[
name|i
index|]
operator|+
name|files
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|folderPath2
init|=
operator|new
name|Path
argument_list|(
name|folders2
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|folderPath1
argument_list|,
name|folderPath2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|folderPath1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|folderPath2
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|fileStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|folderPath2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|fileStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testRenameDirectory ()
specifier|public
name|void
name|testRenameDirectory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testDir"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testDir/test1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testDir/test1/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testDir/test1/test2/test3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testDir/test1"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"testDir/test10"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testDir/test1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testRenameFirstLevelDirectory ()
specifier|public
name|void
name|testRenameFirstLevelDirectory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ExecutorService
name|es
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|fileName
init|=
operator|new
name|Path
argument_list|(
literal|"/test/"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|create
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|es
operator|.
name|submit
argument_list|(
name|callable
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
name|task
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|es
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/renamedDir"
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/renamedDir"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|files
operator|.
name|length
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameRoot ()
specifier|public
name|void
name|testRenameRoot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AzureBlobFileSystem
name|fs
init|=
name|this
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|boolean
name|renamed
init|=
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/ddd"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|renamed
argument_list|)
expr_stmt|;
name|renamed
operator|=
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|renamed
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

