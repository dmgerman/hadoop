begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|integration
operator|.
name|AzureTestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|integration
operator|.
name|AzureTestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Abstract test class that provides basic setup and teardown of testing Azure  * Storage account.  Each subclass defines a different set of test cases to run  * and overrides {@link #createTestAccount()} to set up the testing account used  * to run those tests.  The returned account might integrate with Azure Storage  * directly or it might be a mock implementation.  */
end_comment

begin_class
DECL|class|AbstractWasbTestBase
specifier|public
specifier|abstract
class|class
name|AbstractWasbTestBase
extends|extends
name|AbstractWasbTestWithTimeout
implements|implements
name|AzureTestConstants
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractWasbTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|protected
name|NativeAzureFileSystem
name|fs
decl_stmt|;
DECL|field|testAccount
specifier|protected
name|AzureBlobStorageTestAccount
name|testAccount
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|AzureBlobStorageTestAccount
name|account
init|=
name|createTestAccount
argument_list|()
decl_stmt|;
name|assumeNotNull
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|bindToTestAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"closing test account and filesystem"
argument_list|)
expr_stmt|;
name|testAccount
operator|=
name|cleanupTestAccount
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Create the configuration to use when creating a test account.    * Subclasses can override this to tune the test account configuration.    * @return a configuration.    */
DECL|method|createConfiguration ()
specifier|public
name|Configuration
name|createConfiguration
parameter_list|()
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|createTestConfiguration
argument_list|()
return|;
block|}
comment|/**    * Create the test account.    * Subclasses must implement this.    * @return the test account.    * @throws Exception    */
DECL|method|createTestAccount ()
specifier|protected
specifier|abstract
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**    * Get the test account.    * @return the current test account.    */
DECL|method|getTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|getTestAccount
parameter_list|()
block|{
return|return
name|testAccount
return|;
block|}
comment|/**    * Get the filesystem    * @return the current filesystem.    */
DECL|method|getFileSystem ()
specifier|protected
name|NativeAzureFileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
comment|/**    * Get the configuration used to create the filesystem    * @return the configuration of the test FS    */
DECL|method|getConfiguration ()
specifier|protected
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|getFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
return|;
block|}
comment|/**    * Bind to a new test account; closing any existing one.    * This updates the test account returned in {@link #getTestAccount()}    * and the filesystem in {@link #getFileSystem()}.    * @param account new test account    */
DECL|method|bindToTestAccount (AzureBlobStorageTestAccount account)
specifier|protected
name|void
name|bindToTestAccount
parameter_list|(
name|AzureBlobStorageTestAccount
name|account
parameter_list|)
block|{
comment|// clean any existing test account
name|cleanupTestAccount
argument_list|(
name|testAccount
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|testAccount
operator|=
name|account
expr_stmt|;
if|if
condition|(
name|testAccount
operator|!=
literal|null
condition|)
block|{
name|fs
operator|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return a path to a blob which will be unique for this fork.    * @param filepath filepath    * @return a path under the default blob directory    * @throws IOException    */
DECL|method|blobPath (String filepath)
specifier|protected
name|Path
name|blobPath
parameter_list|(
name|String
name|filepath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|blobPathForTests
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|filepath
argument_list|)
return|;
block|}
comment|/**    * Create a path under the test path provided by    * the FS contract.    * @param filepath path string in    * @return a path qualified by the test filesystem    * @throws IOException IO problems    */
DECL|method|path (String filepath)
specifier|protected
name|Path
name|path
parameter_list|(
name|String
name|filepath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|pathForTests
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|filepath
argument_list|)
return|;
block|}
comment|/**    * Return a path bonded to this method name, unique to this fork during    * parallel execution.    * @return a method name unique to (fork, method).    * @throws IOException IO problems    */
DECL|method|methodPath ()
specifier|protected
name|Path
name|methodPath
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|path
argument_list|(
name|methodName
operator|.
name|getMethodName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return a blob path bonded to this method name, unique to this fork during    * parallel execution.    * @return a method name unique to (fork, method).    * @throws IOException IO problems    */
DECL|method|methodBlobPath ()
specifier|protected
name|Path
name|methodBlobPath
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|blobPath
argument_list|(
name|methodName
operator|.
name|getMethodName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Describe a test in the logs.    * @param text text to print    * @param args arguments to format in the printing    */
DECL|method|describe (String text, Object... args)
specifier|protected
name|void
name|describe
parameter_list|(
name|String
name|text
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n{}: {}\n"
argument_list|,
name|methodName
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|text
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

