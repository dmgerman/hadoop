begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|utils
operator|.
name|AclTestHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|AZURE_CREATE_REMOTE_FILESYSTEM_DURING_INITIALIZATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|ConfigurationKeys
operator|.
name|FS_AZURE_ENABLE_CHECK_ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_FS_CHECKACCESS_TEST_CLIENT_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_FS_CHECKACCESS_TEST_CLIENT_SECRET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_FS_CHECKACCESS_TEST_USER_GUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_FS_CLIENT_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
operator|.
name|FS_AZURE_BLOB_FS_CLIENT_SECRET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|constants
operator|.
name|TestConfigurationKeys
operator|.
name|FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT
import|;
end_import

begin_comment
comment|/**  * Test cases for AzureBlobFileSystem.access()  */
end_comment

begin_class
DECL|class|ITestAzureBlobFileSystemCheckAccess
specifier|public
class|class
name|ITestAzureBlobFileSystemCheckAccess
extends|extends
name|AbstractAbfsIntegrationTest
block|{
DECL|field|TEST_FOLDER_PATH
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FOLDER_PATH
init|=
literal|"CheckAccessTestFolder"
decl_stmt|;
DECL|field|superUserFs
specifier|private
specifier|final
name|FileSystem
name|superUserFs
decl_stmt|;
DECL|field|testUserFs
specifier|private
specifier|final
name|FileSystem
name|testUserFs
decl_stmt|;
DECL|field|testUserGuid
specifier|private
specifier|final
name|String
name|testUserGuid
decl_stmt|;
DECL|field|isCheckAccessEnabled
specifier|private
specifier|final
name|boolean
name|isCheckAccessEnabled
decl_stmt|;
DECL|field|isHNSEnabled
specifier|private
specifier|final
name|boolean
name|isHNSEnabled
decl_stmt|;
DECL|method|ITestAzureBlobFileSystemCheckAccess ()
specifier|public
name|ITestAzureBlobFileSystemCheckAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|this
operator|.
name|superUserFs
operator|=
name|getFileSystem
argument_list|()
expr_stmt|;
name|testUserGuid
operator|=
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|FS_AZURE_BLOB_FS_CHECKACCESS_TEST_USER_GUID
argument_list|)
expr_stmt|;
name|this
operator|.
name|testUserFs
operator|=
name|getTestUserFs
argument_list|()
expr_stmt|;
name|this
operator|.
name|isCheckAccessEnabled
operator|=
name|getConfiguration
argument_list|()
operator|.
name|isCheckAccessEnabled
argument_list|()
expr_stmt|;
name|this
operator|.
name|isHNSEnabled
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestUserFs ()
specifier|private
name|FileSystem
name|getTestUserFs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|orgClientId
init|=
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|FS_AZURE_BLOB_FS_CLIENT_ID
argument_list|)
decl_stmt|;
name|String
name|orgClientSecret
init|=
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|FS_AZURE_BLOB_FS_CLIENT_SECRET
argument_list|)
decl_stmt|;
name|Boolean
name|orgCreateFileSystemDurungInit
init|=
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|AZURE_CREATE_REMOTE_FILESYSTEM_DURING_INITIALIZATION
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|getRawConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_AZURE_BLOB_FS_CLIENT_ID
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|FS_AZURE_BLOB_FS_CHECKACCESS_TEST_CLIENT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|getRawConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_AZURE_BLOB_FS_CLIENT_SECRET
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|FS_AZURE_BLOB_FS_CHECKACCESS_TEST_CLIENT_SECRET
argument_list|)
argument_list|)
expr_stmt|;
name|getRawConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|AZURE_CREATE_REMOTE_FILESYSTEM_DURING_INITIALIZATION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|getRawConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|getRawConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_AZURE_BLOB_FS_CLIENT_ID
argument_list|,
name|orgClientId
argument_list|)
expr_stmt|;
name|getRawConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FS_AZURE_BLOB_FS_CLIENT_SECRET
argument_list|,
name|orgClientSecret
argument_list|)
expr_stmt|;
name|getRawConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|AZURE_CREATE_REMOTE_FILESYSTEM_DURING_INITIALIZATION
argument_list|,
name|orgCreateFileSystemDurungInit
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testCheckAccessWithNullPath ()
specifier|public
name|void
name|testCheckAccessWithNullPath
parameter_list|()
throws|throws
name|IOException
block|{
name|superUserFs
operator|.
name|access
argument_list|(
literal|null
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testCheckAccessForFileWithNullFsAction ()
specifier|public
name|void
name|testCheckAccessForFileWithNullFsAction
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHNSAndCheckAccessEnabled
argument_list|()
expr_stmt|;
comment|//  NPE when trying to convert null FsAction enum
name|superUserFs
operator|.
name|access
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test.txt"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testCheckAccessForNonExistentFile ()
specifier|public
name|void
name|testCheckAccessForNonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHNSAndCheckAccessEnabled
argument_list|()
expr_stmt|;
name|Path
name|nonExistentFile
init|=
name|setupTestDirectoryAndUserAccess
argument_list|(
literal|"/nonExistentFile1.txt"
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|superUserFs
operator|.
name|delete
argument_list|(
name|nonExistentFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testUserFs
operator|.
name|access
argument_list|(
name|nonExistentFile
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWhenCheckAccessConfigIsOff ()
specifier|public
name|void
name|testWhenCheckAccessConfigIsOff
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT
operator|+
literal|" is false"
argument_list|,
name|isHNSEnabled
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getRawConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FS_AZURE_ENABLE_CHECK_ACCESS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|testFilePath
init|=
name|setupTestDirectoryAndUserAccess
argument_list|(
literal|"/test1.txt"
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
name|setupTestDirectoryAndUserAccess
argument_list|(
literal|"/test1.txt"
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|testFilePath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|nonExistentFile
init|=
name|setupTestDirectoryAndUserAccess
argument_list|(
literal|"/nonExistentFile2"
operator|+
literal|".txt"
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|superUserFs
operator|.
name|delete
argument_list|(
name|nonExistentFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|access
argument_list|(
name|nonExistentFile
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckAccessForAccountWithoutNS ()
specifier|public
name|void
name|testCheckAccessForAccountWithoutNS
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT
operator|+
literal|" is true"
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|testUserFs
operator|.
name|access
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsActionNONE ()
specifier|public
name|void
name|testFsActionNONE
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHNSAndCheckAccessEnabled
argument_list|()
expr_stmt|;
name|Path
name|testFilePath
init|=
name|setupTestDirectoryAndUserAccess
argument_list|(
literal|"/test2.txt"
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsActionEXECUTE ()
specifier|public
name|void
name|testFsActionEXECUTE
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHNSAndCheckAccessEnabled
argument_list|()
expr_stmt|;
name|Path
name|testFilePath
init|=
name|setupTestDirectoryAndUserAccess
argument_list|(
literal|"/test3.txt"
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
decl_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsActionREAD ()
specifier|public
name|void
name|testFsActionREAD
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHNSAndCheckAccessEnabled
argument_list|()
expr_stmt|;
name|Path
name|testFilePath
init|=
name|setupTestDirectoryAndUserAccess
argument_list|(
literal|"/test4.txt"
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
decl_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsActionWRITE ()
specifier|public
name|void
name|testFsActionWRITE
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHNSAndCheckAccessEnabled
argument_list|()
expr_stmt|;
name|Path
name|testFilePath
init|=
name|setupTestDirectoryAndUserAccess
argument_list|(
literal|"/test5.txt"
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsActionREADEXECUTE ()
specifier|public
name|void
name|testFsActionREADEXECUTE
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHNSAndCheckAccessEnabled
argument_list|()
expr_stmt|;
name|Path
name|testFilePath
init|=
name|setupTestDirectoryAndUserAccess
argument_list|(
literal|"/test6.txt"
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
decl_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsActionWRITEEXECUTE ()
specifier|public
name|void
name|testFsActionWRITEEXECUTE
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHNSAndCheckAccessEnabled
argument_list|()
expr_stmt|;
name|Path
name|testFilePath
init|=
name|setupTestDirectoryAndUserAccess
argument_list|(
literal|"/test7.txt"
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
decl_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|assertInaccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsActionALL ()
specifier|public
name|void
name|testFsActionALL
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHNSAndCheckAccessEnabled
argument_list|()
expr_stmt|;
name|Path
name|testFilePath
init|=
name|setupTestDirectoryAndUserAccess
argument_list|(
literal|"/test8.txt"
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
expr_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
expr_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|assertAccessible
argument_list|(
name|testFilePath
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|method|assumeHNSAndCheckAccessEnabled ()
specifier|private
name|void
name|assumeHNSAndCheckAccessEnabled
parameter_list|()
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|FS_AZURE_TEST_NAMESPACE_ENABLED_ACCOUNT
operator|+
literal|" is false"
argument_list|,
name|isHNSEnabled
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|FS_AZURE_ENABLE_CHECK_ACCESS
operator|+
literal|" is false"
argument_list|,
name|isCheckAccessEnabled
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAccessible (Path testFilePath, FsAction fsAction)
specifier|private
name|void
name|assertAccessible
parameter_list|(
name|Path
name|testFilePath
parameter_list|,
name|FsAction
name|fsAction
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"Should have been given access  "
operator|+
name|fsAction
operator|+
literal|" on "
operator|+
name|testFilePath
argument_list|,
name|isAccessible
argument_list|(
name|testUserFs
argument_list|,
name|testFilePath
argument_list|,
name|fsAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInaccessible (Path testFilePath, FsAction fsAction)
specifier|private
name|void
name|assertInaccessible
parameter_list|(
name|Path
name|testFilePath
parameter_list|,
name|FsAction
name|fsAction
parameter_list|)
throws|throws
name|IOException
block|{
name|assertFalse
argument_list|(
literal|"Should have been denied access  "
operator|+
name|fsAction
operator|+
literal|" on "
operator|+
name|testFilePath
argument_list|,
name|isAccessible
argument_list|(
name|testUserFs
argument_list|,
name|testFilePath
argument_list|,
name|fsAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setExecuteAccessForParentDirs (Path dir)
specifier|private
name|void
name|setExecuteAccessForParentDirs
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|dir
operator|=
name|dir
operator|.
name|getParent
argument_list|()
expr_stmt|;
while|while
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|modifyAcl
argument_list|(
name|dir
argument_list|,
name|testUserGuid
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
name|dir
operator|=
name|dir
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|modifyAcl (Path file, String uid, FsAction fsAction)
specifier|private
name|void
name|modifyAcl
parameter_list|(
name|Path
name|file
parameter_list|,
name|String
name|uid
parameter_list|,
name|FsAction
name|fsAction
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|AclTestHelpers
operator|.
name|aclEntry
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|,
name|AclEntryType
operator|.
name|USER
argument_list|,
name|uid
argument_list|,
name|fsAction
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|superUserFs
operator|.
name|modifyAclEntries
argument_list|(
name|file
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
DECL|method|setupTestDirectoryAndUserAccess (String testFileName, FsAction fsAction)
specifier|private
name|Path
name|setupTestDirectoryAndUserAccess
parameter_list|(
name|String
name|testFileName
parameter_list|,
name|FsAction
name|fsAction
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|TEST_FOLDER_PATH
operator|+
name|testFileName
argument_list|)
decl_stmt|;
name|file
operator|=
name|this
operator|.
name|superUserFs
operator|.
name|makeQualified
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|this
operator|.
name|superUserFs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|superUserFs
operator|.
name|create
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|modifyAcl
argument_list|(
name|file
argument_list|,
name|testUserGuid
argument_list|,
name|fsAction
argument_list|)
expr_stmt|;
name|setExecuteAccessForParentDirs
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
DECL|method|isAccessible (FileSystem fs, Path path, FsAction fsAction)
specifier|private
name|boolean
name|isAccessible
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|FsAction
name|fsAction
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fs
operator|.
name|access
argument_list|(
name|path
argument_list|,
name|fsAction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

