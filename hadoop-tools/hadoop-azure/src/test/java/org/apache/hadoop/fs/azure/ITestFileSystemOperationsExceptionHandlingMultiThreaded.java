begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|ExceptionHandlingTestHelper
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Multithreaded operations on FS, verify failures are as expected.  */
end_comment

begin_class
DECL|class|ITestFileSystemOperationsExceptionHandlingMultiThreaded
specifier|public
class|class
name|ITestFileSystemOperationsExceptionHandlingMultiThreaded
extends|extends
name|AbstractWasbTestBase
block|{
DECL|field|inputStream
name|FSDataInputStream
name|inputStream
init|=
literal|null
decl_stmt|;
DECL|field|testPath
specifier|private
name|Path
name|testPath
decl_stmt|;
DECL|field|testFolderPath
specifier|private
name|Path
name|testFolderPath
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|testPath
operator|=
name|path
argument_list|(
literal|"testfile.dat"
argument_list|)
expr_stmt|;
name|testFolderPath
operator|=
name|path
argument_list|(
literal|"testfolder"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|rm
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|rm
argument_list|(
name|fs
argument_list|,
name|testFolderPath
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Helper method to creates an input stream to test various scenarios.    */
DECL|method|getInputStreamToTest (FileSystem fs, Path testPath)
specifier|private
name|void
name|getInputStreamToTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|testPath
parameter_list|)
throws|throws
name|Throwable
block|{
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|String
name|testString
init|=
literal|"This is a test string"
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|testString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|inputStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to validate correct exception is thrown for Multithreaded read    * scenario for block blobs.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadedBlockBlobReadScenario ()
specifier|public
name|void
name|testMultiThreadedBlockBlobReadScenario
parameter_list|()
throws|throws
name|Throwable
block|{
name|AzureBlobStorageTestAccount
name|testAccount
init|=
name|createTestAccount
argument_list|()
decl_stmt|;
name|NativeAzureFileSystem
name|fs
init|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|base
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|Path
name|testFilePath1
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test1.dat"
argument_list|)
decl_stmt|;
name|Path
name|renamePath
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test2.dat"
argument_list|)
decl_stmt|;
name|getInputStreamToTest
argument_list|(
name|fs
argument_list|,
name|testFilePath1
argument_list|)
expr_stmt|;
name|Thread
name|renameThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|RenameThread
argument_list|(
name|fs
argument_list|,
name|testFilePath1
argument_list|,
name|renamePath
argument_list|)
argument_list|)
decl_stmt|;
name|renameThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|renameThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|byte
index|[]
name|readBuffer
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|inputStream
operator|.
name|read
argument_list|(
name|readBuffer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to validate correct exception is thrown for Multithreaded seek    * scenario for block blobs.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadBlockBlobSeekScenario ()
specifier|public
name|void
name|testMultiThreadBlockBlobSeekScenario
parameter_list|()
throws|throws
name|Throwable
block|{
comment|/*     AzureBlobStorageTestAccount testAccount = createTestAccount();     fs = testAccount.getFileSystem(); */
name|Path
name|base
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|Path
name|testFilePath1
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test1.dat"
argument_list|)
decl_stmt|;
name|Path
name|renamePath
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test2.dat"
argument_list|)
decl_stmt|;
name|getInputStreamToTest
argument_list|(
name|fs
argument_list|,
name|testFilePath1
argument_list|)
expr_stmt|;
name|Thread
name|renameThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|RenameThread
argument_list|(
name|fs
argument_list|,
name|testFilePath1
argument_list|,
name|renamePath
argument_list|)
argument_list|)
decl_stmt|;
name|renameThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|renameThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests basic multi threaded setPermission scenario.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadedPageBlobSetPermissionScenario ()
specifier|public
name|void
name|testMultiThreadedPageBlobSetPermissionScenario
parameter_list|()
throws|throws
name|Throwable
block|{
name|createEmptyFile
argument_list|(
name|getPageBlobTestStorageAccount
argument_list|()
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|DeleteThread
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|testPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|setPermission
argument_list|(
name|testPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests basic multi threaded setPermission scenario.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadedBlockBlobSetPermissionScenario ()
specifier|public
name|void
name|testMultiThreadedBlockBlobSetPermissionScenario
parameter_list|()
throws|throws
name|Throwable
block|{
name|createEmptyFile
argument_list|(
name|createTestAccount
argument_list|()
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|DeleteThread
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|testPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|setPermission
argument_list|(
name|testPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests basic multi threaded setPermission scenario.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadedPageBlobOpenScenario ()
specifier|public
name|void
name|testMultiThreadedPageBlobOpenScenario
parameter_list|()
throws|throws
name|Throwable
block|{
name|createEmptyFile
argument_list|(
name|createTestAccount
argument_list|()
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|DeleteThread
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|inputStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|inputStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests basic multi threaded setPermission scenario.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadedBlockBlobOpenScenario ()
specifier|public
name|void
name|testMultiThreadedBlockBlobOpenScenario
parameter_list|()
throws|throws
name|Throwable
block|{
name|createEmptyFile
argument_list|(
name|getPageBlobTestStorageAccount
argument_list|()
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|DeleteThread
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|inputStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|inputStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests basic multi threaded setOwner scenario.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadedBlockBlobSetOwnerScenario ()
specifier|public
name|void
name|testMultiThreadedBlockBlobSetOwnerScenario
parameter_list|()
throws|throws
name|Throwable
block|{
name|createEmptyFile
argument_list|(
name|createTestAccount
argument_list|()
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|DeleteThread
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|testPath
argument_list|,
literal|"testowner"
argument_list|,
literal|"testgroup"
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|setOwner
argument_list|(
name|testPath
argument_list|,
literal|"testowner"
argument_list|,
literal|"testgroup"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests basic multi threaded setOwner scenario.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadedPageBlobSetOwnerScenario ()
specifier|public
name|void
name|testMultiThreadedPageBlobSetOwnerScenario
parameter_list|()
throws|throws
name|Throwable
block|{
name|createEmptyFile
argument_list|(
name|getPageBlobTestStorageAccount
argument_list|()
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|DeleteThread
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|testPath
argument_list|,
literal|"testowner"
argument_list|,
literal|"testgroup"
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|setOwner
argument_list|(
name|testPath
argument_list|,
literal|"testowner"
argument_list|,
literal|"testgroup"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests basic multi threaded listStatus scenario.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadedBlockBlobListStatusScenario ()
specifier|public
name|void
name|testMultiThreadedBlockBlobListStatusScenario
parameter_list|()
throws|throws
name|Throwable
block|{
name|createTestFolder
argument_list|(
name|createTestAccount
argument_list|()
argument_list|,
name|testFolderPath
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|DeleteThread
argument_list|(
name|fs
argument_list|,
name|testFolderPath
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|fs
operator|.
name|listStatus
argument_list|(
name|testFolderPath
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|listStatus
argument_list|(
name|testFolderPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests basic multi threaded listStatus scenario.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadedPageBlobListStatusScenario ()
specifier|public
name|void
name|testMultiThreadedPageBlobListStatusScenario
parameter_list|()
throws|throws
name|Throwable
block|{
name|createTestFolder
argument_list|(
name|getPageBlobTestStorageAccount
argument_list|()
argument_list|,
name|testFolderPath
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|DeleteThread
argument_list|(
name|fs
argument_list|,
name|testFolderPath
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|fs
operator|.
name|listStatus
argument_list|(
name|testFolderPath
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|listStatus
argument_list|(
name|testFolderPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to validate correct exception is thrown for Multithreaded read    * scenario for page blobs.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadedPageBlobReadScenario ()
specifier|public
name|void
name|testMultiThreadedPageBlobReadScenario
parameter_list|()
throws|throws
name|Throwable
block|{
name|bindToTestAccount
argument_list|(
name|getPageBlobTestStorageAccount
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|base
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|Path
name|testFilePath1
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test1.dat"
argument_list|)
decl_stmt|;
name|Path
name|renamePath
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test2.dat"
argument_list|)
decl_stmt|;
name|getInputStreamToTest
argument_list|(
name|fs
argument_list|,
name|testFilePath1
argument_list|)
expr_stmt|;
name|Thread
name|renameThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|RenameThread
argument_list|(
name|fs
argument_list|,
name|testFilePath1
argument_list|,
name|renamePath
argument_list|)
argument_list|)
decl_stmt|;
name|renameThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|renameThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|byte
index|[]
name|readBuffer
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|inputStream
operator|.
name|read
argument_list|(
name|readBuffer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to validate correct exception is thrown for Multithreaded seek    * scenario for page blobs.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMultiThreadedPageBlobSeekScenario ()
specifier|public
name|void
name|testMultiThreadedPageBlobSeekScenario
parameter_list|()
throws|throws
name|Throwable
block|{
name|bindToTestAccount
argument_list|(
name|getPageBlobTestStorageAccount
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|base
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|Path
name|testFilePath1
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test1.dat"
argument_list|)
decl_stmt|;
name|Path
name|renamePath
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test2.dat"
argument_list|)
decl_stmt|;
name|getInputStreamToTest
argument_list|(
name|fs
argument_list|,
name|testFilePath1
argument_list|)
expr_stmt|;
name|Thread
name|renameThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|RenameThread
argument_list|(
name|fs
argument_list|,
name|testFilePath1
argument_list|,
name|renamePath
argument_list|)
argument_list|)
decl_stmt|;
name|renameThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|renameThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper thread that just renames the test file.    */
DECL|class|RenameThread
specifier|private
specifier|static
class|class
name|RenameThread
implements|implements
name|Runnable
block|{
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|testPath
specifier|private
specifier|final
name|Path
name|testPath
decl_stmt|;
DECL|field|renamePath
specifier|private
specifier|final
name|Path
name|renamePath
decl_stmt|;
DECL|method|RenameThread (FileSystem fs, Path testPath, Path renamePath)
name|RenameThread
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|testPath
parameter_list|,
name|Path
name|renamePath
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|testPath
operator|=
name|testPath
expr_stmt|;
name|this
operator|.
name|renamePath
operator|=
name|renamePath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|fs
operator|.
name|rename
argument_list|(
name|testPath
argument_list|,
name|renamePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Swallowing the exception as the
comment|// correctness of the test is controlled
comment|// by the other thread
block|}
block|}
block|}
DECL|class|DeleteThread
specifier|private
specifier|static
class|class
name|DeleteThread
implements|implements
name|Runnable
block|{
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|testPath
specifier|private
specifier|final
name|Path
name|testPath
decl_stmt|;
DECL|method|DeleteThread (FileSystem fs, Path testPath)
name|DeleteThread
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|testPath
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|testPath
operator|=
name|testPath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Swallowing the exception as the
comment|// correctness of the test is controlled
comment|// by the other thread
block|}
block|}
block|}
block|}
end_class

end_unit

