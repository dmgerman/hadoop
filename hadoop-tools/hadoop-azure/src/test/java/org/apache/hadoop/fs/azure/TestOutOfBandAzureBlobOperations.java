begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests that WASB handles things gracefully when users add blobs to the Azure  * Storage container from outside WASB's control.  */
end_comment

begin_class
DECL|class|TestOutOfBandAzureBlobOperations
specifier|public
class|class
name|TestOutOfBandAzureBlobOperations
block|{
DECL|field|testAccount
specifier|private
name|AzureBlobStorageTestAccount
name|testAccount
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|backingStore
specifier|private
name|InMemoryBlockBlobStore
name|backingStore
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|=
name|AzureBlobStorageTestAccount
operator|.
name|createMock
argument_list|()
expr_stmt|;
name|fs
operator|=
name|testAccount
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|backingStore
operator|=
name|testAccount
operator|.
name|getMockStorage
argument_list|()
operator|.
name|getBackingStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|testAccount
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
name|backingStore
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|createEmptyBlobOutOfBand (String path)
specifier|private
name|void
name|createEmptyBlobOutOfBand
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|backingStore
operator|.
name|setContent
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|toMockUri
argument_list|(
name|path
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testImplicitFolderListed ()
specifier|public
name|void
name|testImplicitFolderListed
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyBlobOutOfBand
argument_list|(
literal|"root/b"
argument_list|)
expr_stmt|;
comment|// List the blob itself.
name|FileStatus
index|[]
name|obtained
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|obtained
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|obtained
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|obtained
index|[
literal|0
index|]
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/root/b"
argument_list|,
name|obtained
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// List the directory
name|obtained
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|obtained
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|obtained
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|obtained
index|[
literal|0
index|]
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/root/b"
argument_list|,
name|obtained
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the directory's file status
name|FileStatus
name|dirStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dirStatus
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dirStatus
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/root"
argument_list|,
name|dirStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testImplicitFolderDeleted ()
specifier|public
name|void
name|testImplicitFolderDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyBlobOutOfBand
argument_list|(
literal|"root/b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileInImplicitFolderDeleted ()
specifier|public
name|void
name|testFileInImplicitFolderDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyBlobOutOfBand
argument_list|(
literal|"root/b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/b"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileAndImplicitFolderSameName ()
specifier|public
name|void
name|testFileAndImplicitFolderSameName
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyBlobOutOfBand
argument_list|(
literal|"root/b"
argument_list|)
expr_stmt|;
name|createEmptyBlobOutOfBand
argument_list|(
literal|"root/b/c"
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|listResult
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/b"
argument_list|)
argument_list|)
decl_stmt|;
comment|// File should win.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listResult
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listResult
index|[
literal|0
index|]
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Trying to delete root/b/c would cause a dilemma for WASB, so
comment|// it should throw.
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root/b/c"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should've thrown."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AzureException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"File /root/b/c has a parent directory /root/b"
operator|+
literal|" which is also a file. Can't resolve."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|enum|DeepCreateTestVariation
specifier|private
specifier|static
enum|enum
name|DeepCreateTestVariation
block|{
DECL|enumConstant|File
DECL|enumConstant|Folder
name|File
block|,
name|Folder
block|}
empty_stmt|;
comment|/**    * Tests that when we create the file (or folder) x/y/z, we also create    * explicit folder blobs for x and x/y    */
annotation|@
name|Test
DECL|method|testCreatingDeepFileCreatesExplicitFolder ()
specifier|public
name|void
name|testCreatingDeepFileCreatesExplicitFolder
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|DeepCreateTestVariation
name|variation
range|:
name|DeepCreateTestVariation
operator|.
name|values
argument_list|()
control|)
block|{
switch|switch
condition|(
name|variation
condition|)
block|{
case|case
name|File
case|:
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/x/y/z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Folder
case|:
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/x/y/z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|assertTrue
argument_list|(
name|backingStore
operator|.
name|exists
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|toMockUri
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|backingStore
operator|.
name|exists
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|toMockUri
argument_list|(
literal|"x/y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/x"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetPermissionOnImplicitFolder ()
specifier|public
name|void
name|testSetPermissionOnImplicitFolder
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyBlobOutOfBand
argument_list|(
literal|"root/b"
argument_list|)
expr_stmt|;
name|FsPermission
name|newPermission
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|,
name|newPermission
argument_list|)
expr_stmt|;
name|FileStatus
name|newStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newPermission
argument_list|,
name|newStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetOwnerOnImplicitFolder ()
specifier|public
name|void
name|testSetOwnerOnImplicitFolder
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyBlobOutOfBand
argument_list|(
literal|"root/b"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|,
literal|"newOwner"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileStatus
name|newStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/root"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"newOwner"
argument_list|,
name|newStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

