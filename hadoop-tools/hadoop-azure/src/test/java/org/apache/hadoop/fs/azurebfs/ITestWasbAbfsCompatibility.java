begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|NativeAzureFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
operator|.
name|AuthType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertDeleted
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertIsDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertMkdirs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertPathExists
import|;
end_import

begin_comment
comment|/**  * Test compatibility between ABFS client and WASB client.  */
end_comment

begin_class
DECL|class|ITestWasbAbfsCompatibility
specifier|public
class|class
name|ITestWasbAbfsCompatibility
extends|extends
name|AbstractAbfsIntegrationTest
block|{
DECL|field|WASB_TEST_CONTEXT
specifier|private
specifier|static
specifier|final
name|String
name|WASB_TEST_CONTEXT
init|=
literal|"wasb test file"
decl_stmt|;
DECL|field|ABFS_TEST_CONTEXT
specifier|private
specifier|static
specifier|final
name|String
name|ABFS_TEST_CONTEXT
init|=
literal|"abfs test file"
decl_stmt|;
DECL|field|TEST_CONTEXT
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CONTEXT
init|=
literal|"THIS IS FOR TEST"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestWasbAbfsCompatibility
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ITestWasbAbfsCompatibility ()
specifier|public
name|ITestWasbAbfsCompatibility
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeFalse
argument_list|(
literal|"Emulator is not supported"
argument_list|,
name|isIPAddress
argument_list|()
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|this
operator|.
name|getAuthType
argument_list|()
operator|==
name|AuthType
operator|.
name|SharedKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListFileStatus ()
specifier|public
name|void
name|testListFileStatus
parameter_list|()
throws|throws
name|Exception
block|{
comment|// crate file using abfs
name|AzureBlobFileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// test only valid for non-namespace enabled account
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|fs
operator|.
name|getIsNamespaceEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|NativeAzureFileSystem
name|wasb
init|=
name|getWasbFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/testfiles/~12/!008/3/abFsTestfile"
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|abfsStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path1
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|abfsStream
operator|.
name|write
argument_list|(
name|ABFS_TEST_CONTEXT
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|abfsStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|abfsStream
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
comment|// create file using wasb
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"/testfiles/~12/!008/3/nativeFsTestfile"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|wasb
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataOutputStream
name|nativeFsStream
init|=
name|wasb
operator|.
name|create
argument_list|(
name|path2
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|nativeFsStream
operator|.
name|write
argument_list|(
name|WASB_TEST_CONTEXT
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|nativeFsStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|nativeFsStream
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
comment|// list file using abfs and wasb
name|FileStatus
index|[]
name|abfsFileStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testfiles/~12/!008/3/"
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|nativeFsFileStatus
init|=
name|wasb
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testfiles/~12/!008/3/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|abfsFileStatus
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nativeFsFileStatus
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadFile ()
specifier|public
name|void
name|testReadFile
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
index|[]
name|createFileWithAbfs
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|}
decl_stmt|;
name|boolean
index|[]
name|readFileWithAbfs
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|}
decl_stmt|;
name|AzureBlobFileSystem
name|abfs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// test only valid for non-namespace enabled account
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|abfs
operator|.
name|getIsNamespaceEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|NativeAzureFileSystem
name|wasb
init|=
name|getWasbFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/testReadFile/~12/!008/testfile"
operator|+
name|i
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|createFs
init|=
name|createFileWithAbfs
index|[
name|i
index|]
condition|?
name|abfs
else|:
name|wasb
decl_stmt|;
comment|// Write
try|try
init|(
name|FSDataOutputStream
name|nativeFsStream
init|=
name|createFs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|nativeFsStream
operator|.
name|write
argument_list|(
name|TEST_CONTEXT
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|nativeFsStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|nativeFsStream
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
comment|// Check file status
name|ContractTestUtils
operator|.
name|assertIsFile
argument_list|(
name|createFs
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// Read
specifier|final
name|FileSystem
name|readFs
init|=
name|readFileWithAbfs
index|[
name|i
index|]
condition|?
name|abfs
else|:
name|wasb
decl_stmt|;
try|try
init|(
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|readFs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong text from "
operator|+
name|readFs
argument_list|,
name|TEST_CONTEXT
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
comment|// Remove file
name|assertDeleted
argument_list|(
name|readFs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDir ()
specifier|public
name|void
name|testDir
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
index|[]
name|createDirWithAbfs
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|}
decl_stmt|;
name|boolean
index|[]
name|readDirWithAbfs
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|}
decl_stmt|;
name|AzureBlobFileSystem
name|abfs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// test only valid for non-namespace enabled account
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|abfs
operator|.
name|getIsNamespaceEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|NativeAzureFileSystem
name|wasb
init|=
name|getWasbFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/testDir/t"
operator|+
name|i
argument_list|)
decl_stmt|;
comment|//create
specifier|final
name|FileSystem
name|createFs
init|=
name|createDirWithAbfs
index|[
name|i
index|]
condition|?
name|abfs
else|:
name|wasb
decl_stmt|;
name|assertTrue
argument_list|(
name|createFs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|//check
name|assertPathExists
argument_list|(
name|createFs
argument_list|,
literal|"Created dir not found with "
operator|+
name|createFs
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|//read
specifier|final
name|FileSystem
name|readFs
init|=
name|readDirWithAbfs
index|[
name|i
index|]
condition|?
name|abfs
else|:
name|wasb
decl_stmt|;
name|assertPathExists
argument_list|(
name|readFs
argument_list|,
literal|"Created dir not found with "
operator|+
name|readFs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertIsDirectory
argument_list|(
name|readFs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|readFs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUrlConversion ()
specifier|public
name|void
name|testUrlConversion
parameter_list|()
block|{
name|String
name|abfsUrl
init|=
literal|"abfs://abcde-1111-1111-1111-1111@xxxx.dfs.xxx.xxx.xxxx.xxxx"
decl_stmt|;
name|String
name|wabsUrl
init|=
literal|"wasb://abcde-1111-1111-1111-1111@xxxx.blob.xxx.xxx.xxxx.xxxx"
decl_stmt|;
name|assertEquals
argument_list|(
name|abfsUrl
argument_list|,
name|wasbUrlToAbfsUrl
argument_list|(
name|wabsUrl
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|wabsUrl
argument_list|,
name|abfsUrlToWasbUrl
argument_list|(
name|abfsUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetWorkingDirectory ()
specifier|public
name|void
name|testSetWorkingDirectory
parameter_list|()
throws|throws
name|Exception
block|{
comment|//create folders
name|AzureBlobFileSystem
name|abfs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// test only valid for non-namespace enabled account
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|abfs
operator|.
name|getIsNamespaceEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|NativeAzureFileSystem
name|wasb
init|=
name|getWasbFileSystem
argument_list|()
decl_stmt|;
name|Path
name|d1d4
init|=
operator|new
name|Path
argument_list|(
literal|"/d1/d2/d3/d4"
argument_list|)
decl_stmt|;
name|assertMkdirs
argument_list|(
name|abfs
argument_list|,
name|d1d4
argument_list|)
expr_stmt|;
comment|//set working directory to path1
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/d1/d2"
argument_list|)
decl_stmt|;
name|wasb
operator|.
name|setWorkingDirectory
argument_list|(
name|path1
argument_list|)
expr_stmt|;
name|abfs
operator|.
name|setWorkingDirectory
argument_list|(
name|path1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
argument_list|,
name|wasb
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
argument_list|,
name|abfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|//set working directory to path2
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"d3/d4"
argument_list|)
decl_stmt|;
name|wasb
operator|.
name|setWorkingDirectory
argument_list|(
name|path2
argument_list|)
expr_stmt|;
name|abfs
operator|.
name|setWorkingDirectory
argument_list|(
name|path2
argument_list|)
expr_stmt|;
name|Path
name|path3
init|=
name|d1d4
decl_stmt|;
name|assertEquals
argument_list|(
name|path3
argument_list|,
name|wasb
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path3
argument_list|,
name|abfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

