begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
operator|.
name|NativeAzureFileSystem
operator|.
name|FolderRenamePending
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|LogCapturer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Tests the Native Azure file system (WASB) using parallel threads for rename and delete operations.  */
end_comment

begin_class
DECL|class|TestFileSystemOperationsWithThreads
specifier|public
class|class
name|TestFileSystemOperationsWithThreads
extends|extends
name|AbstractWasbTestBase
block|{
DECL|field|renameThreads
specifier|private
specifier|final
name|int
name|renameThreads
init|=
literal|10
decl_stmt|;
DECL|field|deleteThreads
specifier|private
specifier|final
name|int
name|deleteThreads
init|=
literal|20
decl_stmt|;
DECL|field|iterations
specifier|private
name|int
name|iterations
init|=
literal|1
decl_stmt|;
DECL|field|logs
specifier|private
name|LogCapturer
name|logs
init|=
literal|null
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// By default enable parallel threads for rename and delete operations.
comment|// Also enable flat listing of blobs for these operations.
name|conf
operator|.
name|setInt
argument_list|(
name|NativeAzureFileSystem
operator|.
name|AZURE_RENAME_THREADS
argument_list|,
name|renameThreads
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|NativeAzureFileSystem
operator|.
name|AZURE_DELETE_THREADS
argument_list|,
name|deleteThreads
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_ENABLE_FLAT_LISTING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Capture logs
name|logs
operator|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
operator|new
name|Log4JLogger
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getRootLogger
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Helper method to create sub directory and different types of files    * for multiple iterations.    */
DECL|method|createFolder (FileSystem fs, String root)
specifier|private
name|void
name|createFolder
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|root
operator|+
literal|"/"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
name|root
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/fileToRename"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
name|root
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/file/to/rename"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
name|root
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/file+to%rename"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
name|root
operator|+
literal|"/fileToRename"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Helper method to do rename operation and validate all files in source folder    * doesn't exists and similar files exists in new folder.    */
DECL|method|validateRenameFolder (FileSystem fs, String source, String dest)
specifier|private
name|void
name|validateRenameFolder
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|source
parameter_list|,
name|String
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create source folder with files.
name|createFolder
argument_list|(
name|fs
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|Path
name|sourceFolder
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|Path
name|destFolder
init|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|)
decl_stmt|;
comment|// rename operation
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|sourceFolder
argument_list|,
name|destFolder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|destFolder
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|iterations
condition|;
name|i
operator|++
control|)
block|{
comment|// Check destination folder and files exists.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dest
operator|+
literal|"/"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dest
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/fileToRename"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dest
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/file/to/rename"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dest
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/file+to%rename"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dest
operator|+
literal|"/fileToRename"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check source folder and files doesn't exists.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|source
operator|+
literal|"/"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|source
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/fileToRename"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|source
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/file/to/rename"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|source
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/file+to%rename"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|source
operator|+
literal|"/fileToRename"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test case for rename operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testRenameSmallFolderWithThreads ()
specifier|public
name|void
name|testRenameSmallFolderWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|validateRenameFolder
argument_list|(
name|fs
argument_list|,
literal|"root"
argument_list|,
literal|"rootnew"
argument_list|)
expr_stmt|;
comment|// With single iteration, we would have created 7 blobs.
name|int
name|expectedThreadsCreated
init|=
name|Math
operator|.
name|min
argument_list|(
literal|7
argument_list|,
name|renameThreads
argument_list|)
decl_stmt|;
comment|// Validate from logs that threads are created.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"ms with threads: "
operator|+
name|expectedThreadsCreated
argument_list|)
expr_stmt|;
comment|// Validate thread executions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedThreadsCreated
condition|;
name|i
operator|++
control|)
block|{
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"AzureBlobRenameThread-"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// Also ensure that we haven't spawned extra threads.
if|if
condition|(
name|expectedThreadsCreated
operator|<
name|renameThreads
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|expectedThreadsCreated
init|;
name|i
operator|<
name|renameThreads
condition|;
name|i
operator|++
control|)
block|{
name|assertNotInLog
argument_list|(
name|content
argument_list|,
literal|"AzureBlobRenameThread-"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Test case for rename operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testRenameLargeFolderWithThreads ()
specifier|public
name|void
name|testRenameLargeFolderWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Populate source folder with large number of files and directories.
name|this
operator|.
name|iterations
operator|=
literal|10
expr_stmt|;
name|validateRenameFolder
argument_list|(
name|fs
argument_list|,
literal|"root"
argument_list|,
literal|"rootnew"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are created.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"ms with threads: "
operator|+
name|renameThreads
argument_list|)
expr_stmt|;
comment|// Validate thread executions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|renameThreads
condition|;
name|i
operator|++
control|)
block|{
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"AzureBlobRenameThread-"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test case for rename operation with threads disabled and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testRenameLargeFolderDisableThreads ()
specifier|public
name|void
name|testRenameLargeFolderDisableThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// Number of threads set to 0 or 1 disables threads.
name|conf
operator|.
name|setInt
argument_list|(
name|NativeAzureFileSystem
operator|.
name|AZURE_RENAME_THREADS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Populate source folder with large number of files and directories.
name|this
operator|.
name|iterations
operator|=
literal|10
expr_stmt|;
name|validateRenameFolder
argument_list|(
name|fs
argument_list|,
literal|"root"
argument_list|,
literal|"rootnew"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are disabled.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Disabling threads for Rename operation as thread count 0"
argument_list|)
expr_stmt|;
comment|// Validate no thread executions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|renameThreads
condition|;
name|i
operator|++
control|)
block|{
name|String
name|term
init|=
literal|"AzureBlobRenameThread-"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
name|assertNotInLog
argument_list|(
name|content
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assert that a log contains the given term.    * @param content log output    * @param term search term    */
DECL|method|assertInLog (String content, String term)
specifier|protected
name|void
name|assertInLog
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|term
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Empty log"
argument_list|,
operator|!
name|content
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|content
operator|.
name|contains
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"No "
operator|+
name|term
operator|+
literal|" found in logs"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assert that a log does not contain the given term.    * @param content log output    * @param term search term    */
DECL|method|assertNotInLog (String content, String term)
specifier|protected
name|void
name|assertNotInLog
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|term
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Empty log"
argument_list|,
operator|!
name|content
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|.
name|contains
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|term
operator|+
literal|" found in logs"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test case for rename operation with threads and flat listing disabled.    */
annotation|@
name|Test
DECL|method|testRenameSmallFolderDisableThreadsDisableFlatListing ()
specifier|public
name|void
name|testRenameSmallFolderDisableThreadsDisableFlatListing
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|=
name|fs
operator|.
name|getConf
argument_list|()
expr_stmt|;
comment|// Number of threads set to 0 or 1 disables threads.
name|conf
operator|.
name|setInt
argument_list|(
name|NativeAzureFileSystem
operator|.
name|AZURE_RENAME_THREADS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_ENABLE_FLAT_LISTING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|validateRenameFolder
argument_list|(
name|fs
argument_list|,
literal|"root"
argument_list|,
literal|"rootnew"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are disabled.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Disabling threads for Rename operation as thread count 1"
argument_list|)
expr_stmt|;
comment|// Validate no thread executions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|renameThreads
condition|;
name|i
operator|++
control|)
block|{
name|assertNotInLog
argument_list|(
name|content
argument_list|,
literal|"AzureBlobRenameThread-"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Helper method to do delete operation and validate all files in source folder    * doesn't exists after delete operation.    */
DECL|method|validateDeleteFolder (FileSystem fs, String source)
specifier|private
name|void
name|validateDeleteFolder
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|source
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create folder with files.
name|createFolder
argument_list|(
name|fs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|Path
name|sourceFolder
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|)
decl_stmt|;
comment|// Delete operation
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|sourceFolder
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|sourceFolder
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|iterations
condition|;
name|i
operator|++
control|)
block|{
comment|// check that source folder and files doesn't exists
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|source
operator|+
literal|"/"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|source
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/fileToRename"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|source
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/file/to/rename"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|source
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/file+to%rename"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|source
operator|+
literal|"/fileToRename"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test case for delete operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testDeleteSmallFolderWithThreads ()
specifier|public
name|void
name|testDeleteSmallFolderWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|validateDeleteFolder
argument_list|(
name|fs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
comment|// With single iteration, we would have created 7 blobs.
name|int
name|expectedThreadsCreated
init|=
name|Math
operator|.
name|min
argument_list|(
literal|7
argument_list|,
name|deleteThreads
argument_list|)
decl_stmt|;
comment|// Validate from logs that threads are enabled.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"ms with threads: "
operator|+
name|expectedThreadsCreated
argument_list|)
expr_stmt|;
comment|// Validate thread executions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedThreadsCreated
condition|;
name|i
operator|++
control|)
block|{
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"AzureBlobDeleteThread-"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// Also ensure that we haven't spawned extra threads.
if|if
condition|(
name|expectedThreadsCreated
operator|<
name|deleteThreads
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|expectedThreadsCreated
init|;
name|i
operator|<
name|deleteThreads
condition|;
name|i
operator|++
control|)
block|{
name|assertNotInLog
argument_list|(
name|content
argument_list|,
literal|"AzureBlobDeleteThread-"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Test case for delete operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testDeleteLargeFolderWithThreads ()
specifier|public
name|void
name|testDeleteLargeFolderWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Populate source folder with large number of files and directories.
name|this
operator|.
name|iterations
operator|=
literal|10
expr_stmt|;
name|validateDeleteFolder
argument_list|(
name|fs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are enabled.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"ms with threads: "
operator|+
name|deleteThreads
argument_list|)
expr_stmt|;
comment|// Validate thread executions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleteThreads
condition|;
name|i
operator|++
control|)
block|{
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"AzureBlobDeleteThread-"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test case for delete operation with threads disabled and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testDeleteLargeFolderDisableThreads ()
specifier|public
name|void
name|testDeleteLargeFolderDisableThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|NativeAzureFileSystem
operator|.
name|AZURE_DELETE_THREADS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Populate source folder with large number of files and directories.
name|this
operator|.
name|iterations
operator|=
literal|10
expr_stmt|;
name|validateDeleteFolder
argument_list|(
name|fs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are disabled.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Disabling threads for Delete operation as thread count 0"
argument_list|)
expr_stmt|;
comment|// Validate no thread executions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleteThreads
condition|;
name|i
operator|++
control|)
block|{
name|assertNotInLog
argument_list|(
name|content
argument_list|,
literal|"AzureBlobDeleteThread-"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test case for rename operation with threads and flat listing disabled.    */
annotation|@
name|Test
DECL|method|testDeleteSmallFolderDisableThreadsDisableFlatListing ()
specifier|public
name|void
name|testDeleteSmallFolderDisableThreadsDisableFlatListing
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|fs
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// Number of threads set to 0 or 1 disables threads.
name|conf
operator|.
name|setInt
argument_list|(
name|NativeAzureFileSystem
operator|.
name|AZURE_DELETE_THREADS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_ENABLE_FLAT_LISTING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|validateDeleteFolder
argument_list|(
name|fs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are disabled.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Disabling threads for Delete operation as thread count 1"
argument_list|)
expr_stmt|;
comment|// Validate no thread executions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleteThreads
condition|;
name|i
operator|++
control|)
block|{
name|assertNotInLog
argument_list|(
name|content
argument_list|,
literal|"AzureBlobDeleteThread-"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test case for delete operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testDeleteThreadPoolExceptionFailure ()
specifier|public
name|void
name|testDeleteThreadPoolExceptionFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Spy azure file system object and raise exception for new thread pool
name|NativeAzureFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AzureFileSystemThreadPoolExecutor
name|mockThreadPoolExecutor
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|deleteThreads
argument_list|,
literal|"AzureBlobDeleteThread"
argument_list|,
literal|"Delete"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_DELETE_THREADS
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockThreadPoolExecutor
operator|.
name|getThreadPool
argument_list|(
literal|7
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
comment|// With single iteration, we would have created 7 blobs resulting 7 threads.
name|Mockito
operator|.
name|when
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|deleteThreads
argument_list|,
literal|"AzureBlobDeleteThread"
argument_list|,
literal|"Delete"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_DELETE_THREADS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadPoolExecutor
argument_list|)
expr_stmt|;
name|validateDeleteFolder
argument_list|(
name|mockFs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are disabled.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Failed to create thread pool with threads"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Serializing the Delete operation"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test case for delete operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testDeleteThreadPoolExecuteFailure ()
specifier|public
name|void
name|testDeleteThreadPoolExecuteFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Mock thread pool executor to throw exception for all requests.
name|ThreadPoolExecutor
name|mockThreadExecutor
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ThreadPoolExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockThreadExecutor
argument_list|)
operator|.
name|execute
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Spy azure file system object and return mocked thread pool
name|NativeAzureFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AzureFileSystemThreadPoolExecutor
name|mockThreadPoolExecutor
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|deleteThreads
argument_list|,
literal|"AzureBlobDeleteThread"
argument_list|,
literal|"Delete"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_DELETE_THREADS
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockThreadPoolExecutor
operator|.
name|getThreadPool
argument_list|(
literal|7
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadExecutor
argument_list|)
expr_stmt|;
comment|// With single iteration, we would have created 7 blobs resulting 7 threads.
name|Mockito
operator|.
name|when
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|deleteThreads
argument_list|,
literal|"AzureBlobDeleteThread"
argument_list|,
literal|"Delete"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_DELETE_THREADS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadPoolExecutor
argument_list|)
expr_stmt|;
name|validateDeleteFolder
argument_list|(
name|mockFs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are disabled.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Rejected execution of thread for Delete operation on blob"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Serializing the Delete operation"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test case for delete operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testDeleteThreadPoolExecuteSingleThreadFailure ()
specifier|public
name|void
name|testDeleteThreadPoolExecuteSingleThreadFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Spy azure file system object and return mocked thread pool
name|NativeAzureFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
comment|// Spy a thread pool executor and link it to azure file system object.
name|String
name|path
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AzureFileSystemThreadPoolExecutor
name|mockThreadPoolExecutor
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|deleteThreads
argument_list|,
literal|"AzureBlobDeleteThread"
argument_list|,
literal|"Delete"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_DELETE_THREADS
argument_list|)
argument_list|)
decl_stmt|;
comment|// With single iteration, we would have created 7 blobs resulting 7 threads.
name|Mockito
operator|.
name|when
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|deleteThreads
argument_list|,
literal|"AzureBlobDeleteThread"
argument_list|,
literal|"Delete"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_DELETE_THREADS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadPoolExecutor
argument_list|)
expr_stmt|;
comment|// Create a thread executor and link it to mocked thread pool executor object.
name|ThreadPoolExecutor
name|mockThreadExecutor
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mockThreadPoolExecutor
operator|.
name|getThreadPool
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockThreadPoolExecutor
operator|.
name|getThreadPool
argument_list|(
literal|7
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadExecutor
argument_list|)
expr_stmt|;
comment|// Mock thread executor to throw exception for all requests.
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|doThrow
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockThreadExecutor
argument_list|)
operator|.
name|execute
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|validateDeleteFolder
argument_list|(
name|mockFs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are enabled and unused threads.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Using thread pool for Delete operation with threads 7"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"6 threads not used for Delete operation on blob"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test case for delete operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testDeleteThreadPoolTerminationFailure ()
specifier|public
name|void
name|testDeleteThreadPoolTerminationFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Spy azure file system object and return mocked thread pool
name|NativeAzureFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
comment|// Spy a thread pool executor and link it to azure file system object.
name|String
name|path
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AzureFileSystemThreadPoolExecutor
name|mockThreadPoolExecutor
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
operator|)
operator|.
name|getThreadPoolExecutor
argument_list|(
name|deleteThreads
argument_list|,
literal|"AzureBlobDeleteThread"
argument_list|,
literal|"Delete"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_DELETE_THREADS
argument_list|)
argument_list|)
decl_stmt|;
comment|// Create a thread executor and link it to mocked thread pool executor object.
comment|// Mock thread executor to throw exception for terminating threads.
name|ThreadPoolExecutor
name|mockThreadExecutor
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ThreadPoolExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mockThreadExecutor
argument_list|)
operator|.
name|execute
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockThreadExecutor
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|InterruptedException
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockThreadPoolExecutor
operator|.
name|getThreadPool
argument_list|(
literal|7
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadExecutor
argument_list|)
expr_stmt|;
comment|// With single iteration, we would have created 7 blobs resulting 7 threads.
name|Mockito
operator|.
name|when
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|deleteThreads
argument_list|,
literal|"AzureBlobDeleteThread"
argument_list|,
literal|"Delete"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_DELETE_THREADS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadPoolExecutor
argument_list|)
expr_stmt|;
name|createFolder
argument_list|(
name|mockFs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|Path
name|sourceFolder
init|=
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
try|try
block|{
name|mockFs
operator|.
name|delete
argument_list|(
name|sourceFolder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFs
operator|.
name|exists
argument_list|(
name|sourceFolder
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are enabled and delete operation is failed.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Using thread pool for Delete operation with threads"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Threads got interrupted Delete blob operation"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Delete failed as operation on subfolders and files failed."
argument_list|)
expr_stmt|;
block|}
comment|/*    * Validate that when a directory is deleted recursively, the operation succeeds    * even if a child directory delete fails because the directory does not exist.    * This can happen if a child directory is deleted by an external agent while    * the parent is in progress of being deleted recursively.    */
annotation|@
name|Test
DECL|method|testRecursiveDirectoryDeleteWhenChildDirectoryDeleted ()
specifier|public
name|void
name|testRecursiveDirectoryDeleteWhenChildDirectoryDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|testRecusiveDirectoryDelete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*    * Validate that when a directory is deleted recursively, the operation succeeds    * even if a file delete fails because it does not exist.    * This can happen if a file is deleted by an external agent while    * the parent directory is in progress of being deleted.    */
annotation|@
name|Test
DECL|method|testRecursiveDirectoryDeleteWhenDeletingChildFileReturnsFalse ()
specifier|public
name|void
name|testRecursiveDirectoryDeleteWhenDeletingChildFileReturnsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|testRecusiveDirectoryDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecusiveDirectoryDelete (boolean useDir)
specifier|private
name|void
name|testRecusiveDirectoryDelete
parameter_list|(
name|boolean
name|useDir
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|childPathToBeDeletedByExternalAgent
init|=
operator|(
name|useDir
operator|)
condition|?
literal|"root/0"
else|:
literal|"root/0/fileToRename"
decl_stmt|;
comment|// Spy azure file system object and return false for deleting one file
name|NativeAzureFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
name|childPathToBeDeletedByExternalAgent
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Answer
argument_list|<
name|Boolean
argument_list|>
name|answer
init|=
operator|new
name|Answer
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|boolean
name|isDir
init|=
operator|(
name|boolean
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|boolean
name|realResult
init|=
name|fs
operator|.
name|deleteFile
argument_list|(
name|path
argument_list|,
name|isDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|realResult
argument_list|)
expr_stmt|;
name|boolean
name|fakeResult
init|=
literal|false
decl_stmt|;
return|return
name|fakeResult
return|;
block|}
block|}
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockFs
operator|.
name|deleteFile
argument_list|(
name|path
argument_list|,
name|useDir
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|createFolder
argument_list|(
name|mockFs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|Path
name|sourceFolder
init|=
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mockFs
operator|.
name|delete
argument_list|(
name|sourceFolder
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mockFs
operator|.
name|exists
argument_list|(
name|sourceFolder
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are enabled, that a child directory was
comment|// deleted by an external caller, and the parent delete operation still
comment|// succeeds.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Using thread pool for Delete operation with threads"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Attempt to delete non-existent %s %s"
argument_list|,
name|useDir
condition|?
literal|"directory"
else|:
literal|"file"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test case for delete operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testDeleteSingleDeleteException ()
specifier|public
name|void
name|testDeleteSingleDeleteException
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Spy azure file system object and raise exception for deleting one file
name|NativeAzureFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
literal|"root/0"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockFs
argument_list|)
operator|.
name|deleteFile
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createFolder
argument_list|(
name|mockFs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|Path
name|sourceFolder
init|=
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
try|try
block|{
name|mockFs
operator|.
name|delete
argument_list|(
name|sourceFolder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFs
operator|.
name|exists
argument_list|(
name|sourceFolder
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are enabled and delete operation failed.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Using thread pool for Delete operation with threads"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Encountered Exception for Delete operation for file "
operator|+
name|path
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Terminating execution of Delete operation now as some other thread already got exception or operation failed"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test case for rename operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testRenameThreadPoolExceptionFailure ()
specifier|public
name|void
name|testRenameThreadPoolExceptionFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Spy azure file system object and raise exception for new thread pool
name|NativeAzureFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AzureFileSystemThreadPoolExecutor
name|mockThreadPoolExecutor
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
operator|)
operator|.
name|getThreadPoolExecutor
argument_list|(
name|renameThreads
argument_list|,
literal|"AzureBlobRenameThread"
argument_list|,
literal|"Rename"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_RENAME_THREADS
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockThreadPoolExecutor
operator|.
name|getThreadPool
argument_list|(
literal|7
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
comment|// With single iteration, we would have created 7 blobs resulting 7 threads.
name|Mockito
operator|.
name|doReturn
argument_list|(
name|mockThreadPoolExecutor
argument_list|)
operator|.
name|when
argument_list|(
name|mockFs
argument_list|)
operator|.
name|getThreadPoolExecutor
argument_list|(
name|renameThreads
argument_list|,
literal|"AzureBlobRenameThread"
argument_list|,
literal|"Rename"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_RENAME_THREADS
argument_list|)
expr_stmt|;
name|validateRenameFolder
argument_list|(
name|mockFs
argument_list|,
literal|"root"
argument_list|,
literal|"rootnew"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are disabled.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Failed to create thread pool with threads"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Serializing the Rename operation"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test case for rename operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testRenameThreadPoolExecuteFailure ()
specifier|public
name|void
name|testRenameThreadPoolExecuteFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Mock thread pool executor to throw exception for all requests.
name|ThreadPoolExecutor
name|mockThreadExecutor
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ThreadPoolExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockThreadExecutor
argument_list|)
operator|.
name|execute
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Spy azure file system object and return mocked thread pool
name|NativeAzureFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AzureFileSystemThreadPoolExecutor
name|mockThreadPoolExecutor
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|renameThreads
argument_list|,
literal|"AzureBlobRenameThread"
argument_list|,
literal|"Rename"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_RENAME_THREADS
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockThreadPoolExecutor
operator|.
name|getThreadPool
argument_list|(
literal|7
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadExecutor
argument_list|)
expr_stmt|;
comment|// With single iteration, we would have created 7 blobs resulting 7 threads.
name|Mockito
operator|.
name|when
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|renameThreads
argument_list|,
literal|"AzureBlobRenameThread"
argument_list|,
literal|"Rename"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_RENAME_THREADS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadPoolExecutor
argument_list|)
expr_stmt|;
name|validateRenameFolder
argument_list|(
name|mockFs
argument_list|,
literal|"root"
argument_list|,
literal|"rootnew"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are disabled.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Rejected execution of thread for Rename operation on blob"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Serializing the Rename operation"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test case for rename operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testRenameThreadPoolExecuteSingleThreadFailure ()
specifier|public
name|void
name|testRenameThreadPoolExecuteSingleThreadFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Spy azure file system object and return mocked thread pool
name|NativeAzureFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
comment|// Spy a thread pool executor and link it to azure file system object.
name|String
name|path
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AzureFileSystemThreadPoolExecutor
name|mockThreadPoolExecutor
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|renameThreads
argument_list|,
literal|"AzureBlobRenameThread"
argument_list|,
literal|"Rename"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_RENAME_THREADS
argument_list|)
argument_list|)
decl_stmt|;
comment|// With single iteration, we would have created 7 blobs resulting 7 threads.
name|Mockito
operator|.
name|when
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|renameThreads
argument_list|,
literal|"AzureBlobRenameThread"
argument_list|,
literal|"Rename"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_RENAME_THREADS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadPoolExecutor
argument_list|)
expr_stmt|;
comment|// Create a thread executor and link it to mocked thread pool executor object.
name|ThreadPoolExecutor
name|mockThreadExecutor
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mockThreadPoolExecutor
operator|.
name|getThreadPool
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockThreadPoolExecutor
operator|.
name|getThreadPool
argument_list|(
literal|7
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadExecutor
argument_list|)
expr_stmt|;
comment|// Mock thread executor to throw exception for all requests.
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|doThrow
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockThreadExecutor
argument_list|)
operator|.
name|execute
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|validateRenameFolder
argument_list|(
name|mockFs
argument_list|,
literal|"root"
argument_list|,
literal|"rootnew"
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are enabled and unused threads exists.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Using thread pool for Rename operation with threads 7"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"6 threads not used for Rename operation on blob"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test case for rename operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testRenameThreadPoolTerminationFailure ()
specifier|public
name|void
name|testRenameThreadPoolTerminationFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Spy azure file system object and return mocked thread pool
name|NativeAzureFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
comment|// Spy a thread pool executor and link it to azure file system object.
name|String
name|path
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AzureFileSystemThreadPoolExecutor
name|mockThreadPoolExecutor
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|renameThreads
argument_list|,
literal|"AzureBlobRenameThread"
argument_list|,
literal|"Rename"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_RENAME_THREADS
argument_list|)
argument_list|)
decl_stmt|;
comment|// With single iteration, we would have created 7 blobs resulting 7 threads.
name|Mockito
operator|.
name|when
argument_list|(
name|mockFs
operator|.
name|getThreadPoolExecutor
argument_list|(
name|renameThreads
argument_list|,
literal|"AzureBlobRenameThread"
argument_list|,
literal|"Rename"
argument_list|,
name|path
argument_list|,
name|NativeAzureFileSystem
operator|.
name|AZURE_RENAME_THREADS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadPoolExecutor
argument_list|)
expr_stmt|;
comment|// Mock thread executor to throw exception for all requests.
name|ThreadPoolExecutor
name|mockThreadExecutor
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ThreadPoolExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mockThreadExecutor
argument_list|)
operator|.
name|execute
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockThreadExecutor
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|InterruptedException
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockThreadPoolExecutor
operator|.
name|getThreadPool
argument_list|(
literal|7
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockThreadExecutor
argument_list|)
expr_stmt|;
name|createFolder
argument_list|(
name|mockFs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|Path
name|sourceFolder
init|=
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|Path
name|destFolder
init|=
operator|new
name|Path
argument_list|(
literal|"rootnew"
argument_list|)
decl_stmt|;
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
try|try
block|{
name|mockFs
operator|.
name|rename
argument_list|(
name|sourceFolder
argument_list|,
name|destFolder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFs
operator|.
name|exists
argument_list|(
name|sourceFolder
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are enabled and rename operation is failed.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Using thread pool for Rename operation with threads"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Threads got interrupted Rename blob operation"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Rename failed as operation on subfolders and files failed."
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test case for rename operation with multiple threads and flat listing enabled.    */
annotation|@
name|Test
DECL|method|testRenameSingleRenameException ()
specifier|public
name|void
name|testRenameSingleRenameException
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Spy azure file system object and raise exception for deleting one file
name|Path
name|sourceFolder
init|=
operator|new
name|Path
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|Path
name|destFolder
init|=
operator|new
name|Path
argument_list|(
literal|"rootnew"
argument_list|)
decl_stmt|;
comment|// Spy azure file system object and populate rename pending spy object.
name|NativeAzureFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|NativeAzureFileSystem
operator|)
name|fs
argument_list|)
decl_stmt|;
comment|// Populate data now only such that rename pending spy object would see this data.
name|createFolder
argument_list|(
name|mockFs
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|String
name|srcKey
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
name|sourceFolder
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|dstKey
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
name|destFolder
argument_list|)
argument_list|)
decl_stmt|;
name|FolderRenamePending
name|mockRenameFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mockFs
operator|.
name|prepareAtomicFolderRename
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockFs
operator|.
name|prepareAtomicFolderRename
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRenameFs
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|mockFs
operator|.
name|pathToKey
argument_list|(
name|mockFs
operator|.
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
literal|"root/0"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockRenameFs
argument_list|)
operator|.
name|renameFile
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|FileMetadata
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
try|try
block|{
name|mockFs
operator|.
name|rename
argument_list|(
name|sourceFolder
argument_list|,
name|destFolder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFs
operator|.
name|exists
argument_list|(
name|sourceFolder
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate from logs that threads are enabled and delete operation failed.
name|String
name|content
init|=
name|logs
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Using thread pool for Rename operation with threads"
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Encountered Exception for Rename operation for file "
operator|+
name|path
argument_list|)
expr_stmt|;
name|assertInLog
argument_list|(
name|content
argument_list|,
literal|"Terminating execution of Rename operation now as some other thread already got exception or operation failed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|()
return|;
block|}
block|}
end_class

end_unit

