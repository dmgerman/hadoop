begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|FixMethodOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|MethodSorters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSExceptionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test semantics of the page blob input stream  */
end_comment

begin_class
annotation|@
name|FixMethodOrder
argument_list|(
name|MethodSorters
operator|.
name|NAME_ASCENDING
argument_list|)
DECL|class|ITestPageBlobInputStream
specifier|public
class|class
name|ITestPageBlobInputStream
extends|extends
name|AbstractWasbTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestPageBlobInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|KILOBYTE
specifier|private
specifier|static
specifier|final
name|int
name|KILOBYTE
init|=
literal|1024
decl_stmt|;
DECL|field|MEGABYTE
specifier|private
specifier|static
specifier|final
name|int
name|MEGABYTE
init|=
name|KILOBYTE
operator|*
name|KILOBYTE
decl_stmt|;
DECL|field|TEST_FILE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|TEST_FILE_SIZE
init|=
literal|6
operator|*
name|MEGABYTE
decl_stmt|;
DECL|field|TEST_FILE_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_FILE_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"TestPageBlobInputStream.txt"
argument_list|)
decl_stmt|;
DECL|field|testFileLength
specifier|private
name|long
name|testFileLength
decl_stmt|;
comment|/**    * Long test timeout.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10
operator|*
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
DECL|field|testFileStatus
specifier|private
name|FileStatus
name|testFileStatus
decl_stmt|;
DECL|field|hugefile
specifier|private
name|Path
name|hugefile
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|createTestAccount
argument_list|()
expr_stmt|;
name|hugefile
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
try|try
block|{
name|testFileStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
name|testFileLength
operator|=
name|testFileStatus
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// file doesn't exist
name|testFileLength
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createTestAccount ()
specifier|protected
name|AzureBlobStorageTestAccount
name|createTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Configure the page blob directories key so every file created is a page blob.
name|conf
operator|.
name|set
argument_list|(
name|AzureNativeFileSystemStore
operator|.
name|KEY_PAGE_BLOB_DIRECTORIES
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
return|return
name|AzureBlobStorageTestAccount
operator|.
name|create
argument_list|(
literal|"testpageblobinputstream"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|AzureBlobStorageTestAccount
operator|.
name|CreateOptions
operator|.
name|CreateContainer
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Create a test file by repeating the characters in the alphabet.    * @throws IOException    */
DECL|method|createTestFileAndSetLength ()
specifier|private
name|void
name|createTestFileAndSetLength
parameter_list|()
throws|throws
name|IOException
block|{
comment|// To reduce test run time, the test file can be reused.
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_FILE_PATH
argument_list|)
condition|)
block|{
name|testFileStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
name|testFileLength
operator|=
name|testFileStatus
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reusing test file: {}"
argument_list|,
name|testFileStatus
argument_list|)
expr_stmt|;
return|return;
block|}
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating test file {} of size: {}"
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|TEST_FILE_SIZE
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|int
name|bytesWritten
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bytesWritten
operator|<
name|TEST_FILE_SIZE
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|bytesWritten
operator|+=
name|buffer
operator|.
name|length
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing stream {}"
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|testFileLength
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|TEST_FILE_PATH
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
DECL|method|assumeHugeFileExists ()
name|void
name|assumeHugeFileExists
parameter_list|()
throws|throws
name|IOException
block|{
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"huge file not created"
argument_list|,
name|hugefile
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hugefile
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|assertIsFile
argument_list|(
name|hugefile
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File "
operator|+
name|hugefile
operator|+
literal|" is empty"
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_0100_CreateHugeFile ()
specifier|public
name|void
name|test_0100_CreateHugeFile
parameter_list|()
throws|throws
name|IOException
block|{
name|createTestFileAndSetLength
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test_0200_BasicReadTest ()
specifier|public
name|void
name|test_0200_BasicReadTest
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|;
init|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|3
operator|*
name|MEGABYTE
index|]
decl_stmt|;
comment|// v1 forward seek and read a kilobyte into first kilobyte of buffer
name|long
name|position
init|=
literal|5
operator|*
name|MEGABYTE
decl_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|int
name|numBytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|KILOBYTE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KILOBYTE
argument_list|,
name|numBytesRead
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
literal|3
operator|*
name|MEGABYTE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|KILOBYTE
condition|;
name|i
operator|++
control|)
block|{
name|expected
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|+
name|position
operator|)
operator|%
literal|256
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|MEGABYTE
decl_stmt|;
name|int
name|offset
init|=
name|buffer
operator|.
name|length
operator|-
name|len
decl_stmt|;
comment|// v1 reverse seek and read a megabyte into last megabyte of buffer
name|position
operator|=
literal|3
operator|*
name|MEGABYTE
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|numBytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|numBytesRead
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|offset
operator|+
name|len
condition|;
name|i
operator|++
control|)
block|{
name|expected
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|+
name|position
operator|)
operator|%
literal|256
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|test_0201_RandomReadTest ()
specifier|public
name|void
name|test_0201_RandomReadTest
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|;
init|)
block|{
specifier|final
name|int
name|bufferSize
init|=
literal|4
operator|*
name|KILOBYTE
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|long
name|position
init|=
literal|0
decl_stmt|;
name|verifyConsistentReads
argument_list|(
name|inputStream
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verifyConsistentReads
argument_list|(
name|inputStream
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|int
name|seekPosition
init|=
literal|2
operator|*
name|KILOBYTE
decl_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPosition
argument_list|)
expr_stmt|;
name|position
operator|=
name|seekPosition
expr_stmt|;
name|verifyConsistentReads
argument_list|(
name|inputStream
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|verifyConsistentReads
argument_list|(
name|inputStream
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|seekPosition
operator|=
literal|5
operator|*
name|KILOBYTE
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPosition
argument_list|)
expr_stmt|;
name|position
operator|=
name|seekPosition
expr_stmt|;
name|verifyConsistentReads
argument_list|(
name|inputStream
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|seekPosition
operator|=
literal|10
operator|*
name|KILOBYTE
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPosition
argument_list|)
expr_stmt|;
name|position
operator|=
name|seekPosition
expr_stmt|;
name|verifyConsistentReads
argument_list|(
name|inputStream
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|seekPosition
operator|=
literal|4100
operator|*
name|KILOBYTE
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPosition
argument_list|)
expr_stmt|;
name|position
operator|=
name|seekPosition
expr_stmt|;
name|verifyConsistentReads
argument_list|(
name|inputStream
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|4
operator|*
literal|1024
operator|*
literal|1023
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
block|{
name|seekPosition
operator|=
name|i
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPosition
argument_list|)
expr_stmt|;
name|position
operator|=
name|seekPosition
expr_stmt|;
name|verifyConsistentReads
argument_list|(
name|inputStream
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
name|inputStream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|buffer
operator|=
operator|new
name|byte
index|[
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|inputStream
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|++
expr_stmt|;
name|verifyConsistentReads
argument_list|(
name|inputStream
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|position
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyConsistentReads (FSDataInputStream inputStream, byte[] buffer, long position)
specifier|private
name|void
name|verifyConsistentReads
parameter_list|(
name|FSDataInputStream
name|inputStream
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|buffer
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|numBytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bytes read from stream"
argument_list|,
name|size
argument_list|,
name|numBytesRead
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expected
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|position
operator|+
name|i
operator|)
operator|%
literal|256
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
literal|"Mismatch"
argument_list|,
name|expected
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates the implementation of InputStream.markSupported.    * @throws IOException    */
annotation|@
name|Test
DECL|method|test_0301_MarkSupported ()
specifier|public
name|void
name|test_0301_MarkSupported
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
literal|"mark is not supported"
argument_list|,
name|inputStream
operator|.
name|markSupported
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of InputStream.mark and reset    * for version 1 of the block blob input stream.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0303_MarkAndResetV1 ()
specifier|public
name|void
name|test_0303_MarkAndResetV1
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|inputStream
operator|.
name|mark
argument_list|(
name|KILOBYTE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|KILOBYTE
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rest -> pos 0"
argument_list|,
literal|0
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|mark
argument_list|(
literal|8
operator|*
name|KILOBYTE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|buffer
operator|=
operator|new
name|byte
index|[
literal|8
operator|*
name|KILOBYTE
index|]
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"Resetting to invalid mark"
argument_list|,
operator|new
name|Callable
argument_list|<
name|FSDataInputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FSDataInputStream
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|inputStream
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|inputStream
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of Seekable.seekToNewSource, which should    * return false for version 1 of the block blob input stream.    * @throws IOException    */
annotation|@
name|Test
DECL|method|test_0305_SeekToNewSourceV1 ()
specifier|public
name|void
name|test_0305_SeekToNewSourceV1
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|assertFalse
argument_list|(
name|inputStream
operator|.
name|seekToNewSource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of InputStream.skip and ensures there is no    * network I/O for version 1 of the block blob input stream.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0307_SkipBounds ()
specifier|public
name|void
name|test_0307_SkipBounds
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|long
name|skipped
init|=
name|inputStream
operator|.
name|skip
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|skipped
operator|=
name|inputStream
operator|.
name|skip
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testFileLength
operator|>
literal|0
argument_list|)
expr_stmt|;
name|skipped
operator|=
name|inputStream
operator|.
name|skip
argument_list|(
name|testFileLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|inputStream
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of Seekable.seek and ensures there is no    * network I/O for forward seek.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0309_SeekBounds ()
specifier|public
name|void
name|test_0309_SeekBounds
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|;
init|)
block|{
name|inputStream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
name|FSExceptionMessages
operator|.
name|NEGATIVE_SEEK
argument_list|,
operator|new
name|Callable
argument_list|<
name|FSDataInputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FSDataInputStream
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|inputStream
operator|.
name|seek
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|inputStream
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test file length only "
operator|+
name|testFileLength
argument_list|,
name|testFileLength
operator|>
literal|0
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|testFileLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
name|FSExceptionMessages
operator|.
name|CANNOT_SEEK_PAST_EOF
argument_list|,
operator|new
name|Callable
argument_list|<
name|FSDataInputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FSDataInputStream
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|inputStream
operator|.
name|seek
argument_list|(
name|testFileLength
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|inputStream
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of Seekable.seek, Seekable.getPos,    * and InputStream.available.    * @throws Exception    */
annotation|@
name|Test
DECL|method|test_0311_SeekAndAvailableAndPosition ()
specifier|public
name|void
name|test_0311_SeekAndAvailableAndPosition
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|)
block|{
name|byte
index|[]
name|expected1
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|byte
index|[]
name|expected2
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|}
decl_stmt|;
name|byte
index|[]
name|expected3
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|byte
index|[]
name|expected4
init|=
block|{
literal|6
block|,
literal|7
block|,
literal|8
block|}
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected1
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected2
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|buffer
operator|.
name|length
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// reverse seek
name|int
name|seekPos
init|=
literal|0
decl_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected1
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|seekPos
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// reverse seek
name|seekPos
operator|=
literal|1
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected3
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|seekPos
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// forward seek
name|seekPos
operator|=
literal|6
expr_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected4
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|seekPos
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the implementation of InputStream.skip, Seekable.getPos,    * and InputStream.available.    * @throws IOException    */
annotation|@
name|Test
DECL|method|test_0313_SkipAndAvailableAndPosition ()
specifier|public
name|void
name|test_0313_SkipAndAvailableAndPosition
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeHugeFileExists
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_FILE_PATH
argument_list|)
init|;
init|)
block|{
name|byte
index|[]
name|expected1
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|byte
index|[]
name|expected2
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|}
decl_stmt|;
name|byte
index|[]
name|expected3
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|byte
index|[]
name|expected4
init|=
block|{
literal|6
block|,
literal|7
block|,
literal|8
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|3
decl_stmt|;
name|long
name|skipped
init|=
name|inputStream
operator|.
name|skip
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|skipped
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|skipped
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected2
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|skipped
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// does skip still work after seek?
name|int
name|seekPos
init|=
literal|1
decl_stmt|;
name|inputStream
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected3
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|seekPos
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|currentPosition
init|=
name|inputStream
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|n
operator|=
literal|2
expr_stmt|;
name|skipped
operator|=
name|inputStream
operator|.
name|skip
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentPosition
operator|+
name|skipped
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|skipped
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected4
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|skipped
operator|+
name|currentPosition
argument_list|,
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFileLength
operator|-
name|inputStream
operator|.
name|getPos
argument_list|()
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|test_999_DeleteHugeFiles ()
specifier|public
name|void
name|test_999_DeleteHugeFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|TEST_FILE_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

