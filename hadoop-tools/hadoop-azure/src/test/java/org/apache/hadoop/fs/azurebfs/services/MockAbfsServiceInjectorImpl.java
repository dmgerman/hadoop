begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.azurebfs.services
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|azurebfs
operator|.
name|services
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Mock AbfsServiceInjectorImpl.  */
end_comment

begin_class
DECL|class|MockAbfsServiceInjectorImpl
specifier|public
class|class
name|MockAbfsServiceInjectorImpl
extends|extends
name|AbfsServiceInjectorImpl
block|{
DECL|method|MockAbfsServiceInjectorImpl (Configuration configuration)
specifier|public
name|MockAbfsServiceInjectorImpl
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|replaceInstance (Class<T> tInterface, Object object)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|replaceInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tInterface
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|this
operator|.
name|removeInstance
argument_list|(
name|tInterface
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeProvider
argument_list|(
name|tInterface
argument_list|)
expr_stmt|;
name|this
operator|.
name|getInstances
argument_list|()
operator|.
name|put
argument_list|(
name|tInterface
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
DECL|method|removeInstance (Class<T> tInterface)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|removeInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tInterface
parameter_list|)
block|{
name|this
operator|.
name|getInstances
argument_list|()
operator|.
name|remove
argument_list|(
name|tInterface
argument_list|)
expr_stmt|;
block|}
DECL|method|replaceProvider (Class<T> tInterface, Class<? extends T> tClazz)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|replaceProvider
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tInterface
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|tClazz
parameter_list|)
block|{
name|this
operator|.
name|removeInstance
argument_list|(
name|tInterface
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeProvider
argument_list|(
name|tInterface
argument_list|)
expr_stmt|;
name|this
operator|.
name|getProviders
argument_list|()
operator|.
name|put
argument_list|(
name|tInterface
argument_list|,
name|tClazz
argument_list|)
expr_stmt|;
block|}
DECL|method|removeProvider (Class<T> tInterface)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|removeProvider
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tInterface
parameter_list|)
block|{
name|this
operator|.
name|getProviders
argument_list|()
operator|.
name|remove
argument_list|(
name|tInterface
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

