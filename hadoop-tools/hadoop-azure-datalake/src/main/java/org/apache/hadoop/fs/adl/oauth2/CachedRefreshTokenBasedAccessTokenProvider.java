begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.adl.oauth2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|oauth2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|AccessTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|ConfRefreshTokenBasedAccessTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|PrivateCachedRefreshTokenBasedAccessTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|OAUTH_CLIENT_ID_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|OAUTH_REFRESH_URL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|ConfRefreshTokenBasedAccessTokenProvider
operator|.
name|OAUTH_REFRESH_TOKEN_KEY
import|;
end_import

begin_comment
comment|/**  * Share refresh tokens across all ADLS instances with a common client ID. The  * {@link AccessTokenProvider} can be shared across multiple instances,  * amortizing the cost of refreshing tokens.  */
end_comment

begin_class
DECL|class|CachedRefreshTokenBasedAccessTokenProvider
specifier|public
class|class
name|CachedRefreshTokenBasedAccessTokenProvider
extends|extends
name|PrivateCachedRefreshTokenBasedAccessTokenProvider
block|{
DECL|field|FORCE_REFRESH
specifier|public
specifier|static
specifier|final
name|String
name|FORCE_REFRESH
init|=
literal|"adl.force.token.refresh"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CachedRefreshTokenBasedAccessTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Limit size of provider cache. */
DECL|field|MAX_PROVIDERS
specifier|static
specifier|final
name|int
name|MAX_PROVIDERS
init|=
literal|10
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|field|CACHE
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AccessTokenProvider
argument_list|>
name|CACHE
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|AccessTokenProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AccessTokenProvider
argument_list|>
name|e
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|MAX_PROVIDERS
return|;
block|}
block|}
decl_stmt|;
DECL|field|instance
specifier|private
name|AccessTokenProvider
name|instance
init|=
literal|null
decl_stmt|;
comment|/**    * Create handle for cached instance.    */
DECL|method|CachedRefreshTokenBasedAccessTokenProvider ()
specifier|public
name|CachedRefreshTokenBasedAccessTokenProvider
parameter_list|()
block|{   }
comment|/**    * Gets the access token from internally cached    * ConfRefreshTokenBasedAccessTokenProvider instance.    *    * @return Valid OAuth2 access token for the user.    * @throws IOException when system error, internal server error or user error    */
annotation|@
name|Override
DECL|method|getAccessToken ()
specifier|public
specifier|synchronized
name|String
name|getAccessToken
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|instance
operator|.
name|getAccessToken
argument_list|()
return|;
block|}
comment|/**    * @return A cached Configuration consistent with the parameters of this    * instance.    */
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
specifier|synchronized
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|instance
operator|.
name|getConf
argument_list|()
return|;
block|}
comment|/**    * Configure cached instance. Note that the Configuration instance returned    * from subsequent calls to {@link #getConf() getConf} may be from a    * previous, cached entry.    * @param conf Configuration instance    */
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|id
init|=
name|conf
operator|.
name|get
argument_list|(
name|OAUTH_CLIENT_ID_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|id
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing client ID"
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|CACHE
init|)
block|{
name|instance
operator|=
name|CACHE
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|instance
operator|||
name|conf
operator|.
name|getBoolean
argument_list|(
name|FORCE_REFRESH
argument_list|,
literal|false
argument_list|)
operator|||
name|replace
argument_list|(
name|instance
argument_list|,
name|conf
argument_list|)
condition|)
block|{
name|instance
operator|=
name|newInstance
argument_list|()
expr_stmt|;
comment|// clone configuration
name|instance
operator|.
name|setConf
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|CACHE
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new client {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|newInstance ()
name|AccessTokenProvider
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ConfRefreshTokenBasedAccessTokenProvider
argument_list|()
return|;
block|}
DECL|method|replace (AccessTokenProvider cached, Configuration c2)
specifier|private
specifier|static
name|boolean
name|replace
parameter_list|(
name|AccessTokenProvider
name|cached
parameter_list|,
name|Configuration
name|c2
parameter_list|)
block|{
comment|// ConfRefreshTokenBasedAccessTokenProvider::setConf asserts !null
specifier|final
name|Configuration
name|c1
init|=
name|cached
operator|.
name|getConf
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
operator|new
name|String
index|[]
block|{
name|OAUTH_REFRESH_TOKEN_KEY
block|,
name|OAUTH_REFRESH_URL_KEY
block|}
control|)
block|{
if|if
condition|(
operator|!
name|c1
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
comment|// replace cached instance for this clientID
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

