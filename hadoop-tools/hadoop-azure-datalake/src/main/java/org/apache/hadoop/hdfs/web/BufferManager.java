begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_comment
comment|/**  * Responsible for holding buffered data in the process. Hold only 1 and only  * 1 buffer block in the memory. Buffer block  * information is for the given file and the offset from the which the block  * is fetched. Across the webhdfs instances if  * same buffer block has been used then backend trip is avoided. Buffer block  * is certainly important since ADL fetches  * large amount of data (Default is 4MB however can be configured through  * core-site.xml) from the backend.  * Observation is in case of ORC/Avro kind of compressed file, buffer block  * does not avoid few backend calls across  * webhdfs  * instances.  */
end_comment

begin_class
DECL|class|BufferManager
specifier|final
class|class
name|BufferManager
block|{
DECL|field|BUFFER_MANAGER_INSTANCE
specifier|private
specifier|static
specifier|final
name|BufferManager
name|BUFFER_MANAGER_INSTANCE
init|=
operator|new
name|BufferManager
argument_list|()
decl_stmt|;
DECL|field|lock
specifier|private
specifier|static
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|buffer
specifier|private
name|Buffer
name|buffer
init|=
literal|null
decl_stmt|;
DECL|field|fileName
specifier|private
name|String
name|fileName
decl_stmt|;
comment|/**    * Constructor.    */
DECL|method|BufferManager ()
specifier|private
name|BufferManager
parameter_list|()
block|{   }
DECL|method|getLock ()
specifier|public
specifier|static
name|Object
name|getLock
parameter_list|()
block|{
return|return
name|lock
return|;
block|}
DECL|method|getInstance ()
specifier|public
specifier|static
name|BufferManager
name|getInstance
parameter_list|()
block|{
return|return
name|BUFFER_MANAGER_INSTANCE
return|;
block|}
comment|/**    * Validate if the current buffer block is of given stream.    *    * @param path   ADL stream path    * @param offset Stream offset that caller is interested in    * @return True if the buffer block is available otherwise false    */
DECL|method|hasValidDataForOffset (String path, long offset)
name|boolean
name|hasValidDataForOffset
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|fileName
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|fileName
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|offset
operator|<
name|buffer
operator|.
name|offset
operator|)
operator|||
operator|(
name|offset
operator|>=
operator|(
name|buffer
operator|.
name|offset
operator|+
name|buffer
operator|.
name|data
operator|.
name|length
operator|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Clean buffer block.    */
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
name|buffer
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Validate if the current buffer block is of given stream. For now partial    * data available is not supported.    * Data must be available exactly or within the range of offset and size    * passed as parameter.    *    * @param path   Stream path    * @param offset Offset of the stream    * @param size   Size of the data from the offset of the stream caller    *               interested in    * @return True if the data is available from the given offset and of the    * size caller is interested in.    */
DECL|method|hasData (String path, long offset, int size)
name|boolean
name|hasData
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasValidDataForOffset
argument_list|(
name|path
argument_list|,
name|offset
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|size
operator|+
name|offset
operator|)
operator|>
operator|(
name|buffer
operator|.
name|data
operator|.
name|length
operator|+
name|buffer
operator|.
name|offset
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Return the buffer block from the requested offset. It is caller    * responsibility to check if the buffer block is    * of there interest and offset is valid.    *    * @param data   Byte array to be filed from the buffer block    * @param offset Data to be fetched from the offset.    */
DECL|method|get (byte[] data, long offset)
name|void
name|get
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
operator|.
name|data
argument_list|,
call|(
name|int
call|)
argument_list|(
name|offset
operator|-
name|buffer
operator|.
name|offset
argument_list|)
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create new empty buffer block of the given size.    *    * @param len Size of the buffer block.    * @return Empty byte array.    */
DECL|method|getEmpty (int len)
name|byte
index|[]
name|getEmpty
parameter_list|(
name|int
name|len
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[
name|len
index|]
return|;
block|}
comment|/**    * This function allows caller to specify new buffer block for the stream    * which is pulled from the backend.    *    * @param data   Buffer    * @param path   Stream path to which buffer belongs to    * @param offset Stream offset where buffer start with    */
DECL|method|add (byte[] data, String path, long offset)
name|void
name|add
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|String
name|path
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|buffer
operator|=
operator|new
name|Buffer
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|buffer
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|path
expr_stmt|;
block|}
comment|/**    * @return Size of the buffer.    */
DECL|method|getBufferSize ()
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|data
operator|.
name|length
return|;
block|}
comment|/**    * @return Stream offset where buffer start with    */
DECL|method|getBufferOffset ()
name|long
name|getBufferOffset
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|offset
return|;
block|}
comment|/**    * Buffer container.    */
DECL|class|Buffer
specifier|static
class|class
name|Buffer
block|{
DECL|field|data
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
DECL|field|offset
specifier|private
name|long
name|offset
decl_stmt|;
block|}
block|}
end_class

end_unit

