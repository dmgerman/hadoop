begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.adl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|ADLStoreClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|ADLStoreOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|DirectoryEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|DirectoryEntryType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|IfExists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|LatencyTracker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|UserGroupRepresentation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|oauth2
operator|.
name|AccessTokenProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|oauth2
operator|.
name|ClientCredsTokenProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|oauth2
operator|.
name|RefreshTokenBasedTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|oauth2
operator|.
name|AzureADTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|AdlConfKeys
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A FileSystem to access Azure Data Lake Store.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|AdlFileSystem
specifier|public
class|class
name|AdlFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|SCHEME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME
init|=
literal|"adl"
decl_stmt|;
DECL|field|DEFAULT_PORT
specifier|static
specifier|final
name|int
name|DEFAULT_PORT
init|=
literal|443
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|field|overrideOwner
specifier|private
name|boolean
name|overrideOwner
decl_stmt|;
DECL|field|adlClient
specifier|private
name|ADLStoreClient
name|adlClient
decl_stmt|;
DECL|field|workingDirectory
specifier|private
name|Path
name|workingDirectory
decl_stmt|;
DECL|field|aclBitStatus
specifier|private
name|boolean
name|aclBitStatus
decl_stmt|;
DECL|field|oidOrUpn
specifier|private
name|UserGroupRepresentation
name|oidOrUpn
decl_stmt|;
comment|// retained for tests
DECL|field|tokenProvider
specifier|private
name|AccessTokenProvider
name|tokenProvider
decl_stmt|;
DECL|field|azureTokenProvider
specifier|private
name|AzureADTokenProvider
name|azureTokenProvider
decl_stmt|;
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|SCHEME
return|;
block|}
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultPort ()
specifier|public
name|int
name|getDefaultPort
parameter_list|()
block|{
return|return
name|DEFAULT_PORT
return|;
block|}
annotation|@
name|Override
DECL|method|supportsSymlinks ()
specifier|public
name|boolean
name|supportsSymlinks
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Called after a new FileSystem instance is constructed.    *    * @param storeUri a uri whose authority section names the host, port, etc.    *                 for this FileSystem    * @param conf     the configuration    */
annotation|@
name|Override
DECL|method|initialize (URI storeUri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|storeUri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|storeUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|storeUri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|storeUri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|userName
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|userName
operator|=
literal|"hadoop"
expr_stmt|;
block|}
name|this
operator|.
name|setWorkingDirectory
argument_list|(
name|getHomeDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|overrideOwner
operator|=
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|ADL_DEBUG_OVERRIDE_LOCAL_USER_AS_OWNER
argument_list|,
name|ADL_DEBUG_SET_LOCAL_USER_AS_OWNER_DEFAULT
argument_list|)
expr_stmt|;
name|aclBitStatus
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|ADL_SUPPORT_ACL_BIT_IN_FSPERMISSION
argument_list|,
name|ADL_SUPPORT_ACL_BIT_IN_FSPERMISSION_DEFAULT
argument_list|)
expr_stmt|;
name|String
name|accountFQDN
init|=
literal|null
decl_stmt|;
name|String
name|mountPoint
init|=
literal|null
decl_stmt|;
name|String
name|hostname
init|=
name|storeUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hostname
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
operator|&&
operator|!
name|hostname
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"localhost"
argument_list|)
condition|)
block|{
comment|// this is a symbolic name. Resolve it.
name|String
name|hostNameProperty
init|=
literal|"dfs.adls."
operator|+
name|hostname
operator|+
literal|".hostname"
decl_stmt|;
name|String
name|mountPointProperty
init|=
literal|"dfs.adls."
operator|+
name|hostname
operator|+
literal|".mountpoint"
decl_stmt|;
name|accountFQDN
operator|=
name|getNonEmptyVal
argument_list|(
name|conf
argument_list|,
name|hostNameProperty
argument_list|)
expr_stmt|;
name|mountPoint
operator|=
name|getNonEmptyVal
argument_list|(
name|conf
argument_list|,
name|mountPointProperty
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accountFQDN
operator|=
name|hostname
expr_stmt|;
block|}
if|if
condition|(
name|storeUri
operator|.
name|getPort
argument_list|()
operator|>
literal|0
condition|)
block|{
name|accountFQDN
operator|=
name|accountFQDN
operator|+
literal|":"
operator|+
name|storeUri
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
name|adlClient
operator|=
name|ADLStoreClient
operator|.
name|createClient
argument_list|(
name|accountFQDN
argument_list|,
name|getAccessTokenProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|ADLStoreOptions
name|options
init|=
operator|new
name|ADLStoreOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|enableThrowingRemoteExceptions
argument_list|()
expr_stmt|;
if|if
condition|(
name|getTransportScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|INSECURE_TRANSPORT_SCHEME
argument_list|)
condition|)
block|{
name|options
operator|.
name|setInsecureTransport
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mountPoint
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setFilePathPrefix
argument_list|(
name|mountPoint
argument_list|)
expr_stmt|;
block|}
name|String
name|clusterName
init|=
name|conf
operator|.
name|get
argument_list|(
name|ADL_EVENTS_TRACKING_CLUSTERNAME
argument_list|,
literal|"UNKNOWN"
argument_list|)
decl_stmt|;
name|String
name|clusterType
init|=
name|conf
operator|.
name|get
argument_list|(
name|ADL_EVENTS_TRACKING_CLUSTERTYPE
argument_list|,
literal|"UNKNOWN"
argument_list|)
decl_stmt|;
name|String
name|clientVersion
init|=
name|ADL_HADOOP_CLIENT_NAME
operator|+
operator|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|?
name|ADL_HADOOP_CLIENT_VERSION
operator|.
name|trim
argument_list|()
else|:
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|.
name|trim
argument_list|()
operator|)
decl_stmt|;
name|options
operator|.
name|setUserAgentSuffix
argument_list|(
name|clientVersion
operator|+
literal|"/"
operator|+
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|"/"
operator|+
name|clusterName
operator|+
literal|"/"
operator|+
name|clusterType
argument_list|)
expr_stmt|;
name|adlClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|boolean
name|trackLatency
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|LATENCY_TRACKER_KEY
argument_list|,
name|LATENCY_TRACKER_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|trackLatency
condition|)
block|{
name|LatencyTracker
operator|.
name|disable
argument_list|()
expr_stmt|;
block|}
name|boolean
name|enableUPN
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|ADL_ENABLEUPN_FOR_OWNERGROUP_KEY
argument_list|,
name|ADL_ENABLEUPN_FOR_OWNERGROUP_DEFAULT
argument_list|)
decl_stmt|;
name|oidOrUpn
operator|=
name|enableUPN
condition|?
name|UserGroupRepresentation
operator|.
name|UPN
else|:
name|UserGroupRepresentation
operator|.
name|OID
expr_stmt|;
block|}
comment|/**    * This method is provided for convenience for derived classes to define    * custom {@link AzureADTokenProvider} instance.    *    * In order to ensure secure hadoop infrastructure and user context for which    * respective {@link AdlFileSystem} instance is initialized,    * Loading {@link AzureADTokenProvider} is not sufficient.    *    * The order of loading {@link AzureADTokenProvider} is to first invoke    * {@link #getCustomAccessTokenProvider(Configuration)}, If method return null    * which means no implementation provided by derived classes, then    * configuration object is loaded to retrieve token configuration as specified    * is documentation.    *    * Custom token management takes the higher precedence during initialization.    *    * @param conf Configuration object    * @return null if the no custom {@link AzureADTokenProvider} token management    * is specified.    * @throws IOException if failed to initialize token provider.    */
DECL|method|getCustomAccessTokenProvider ( Configuration conf)
specifier|protected
specifier|synchronized
name|AzureADTokenProvider
name|getCustomAccessTokenProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|getNonEmptyVal
argument_list|(
name|conf
argument_list|,
name|AZURE_AD_TOKEN_PROVIDER_CLASS_KEY
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|AzureADTokenProvider
argument_list|>
name|azureADTokenProviderClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|AZURE_AD_TOKEN_PROVIDER_CLASS_KEY
argument_list|,
literal|null
argument_list|,
name|AzureADTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|azureADTokenProviderClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configuration  "
operator|+
name|className
operator|+
literal|" "
operator|+
literal|"not defined/accessible."
argument_list|)
throw|;
block|}
name|azureTokenProvider
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|azureADTokenProviderClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|azureTokenProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to initialize "
operator|+
name|className
argument_list|)
throw|;
block|}
name|azureTokenProvider
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|azureTokenProvider
return|;
block|}
DECL|method|getAccessTokenProvider (Configuration config)
specifier|private
name|AccessTokenProvider
name|getAccessTokenProvider
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|ProviderUtils
operator|.
name|excludeIncompatibleCredentialProviders
argument_list|(
name|config
argument_list|,
name|AdlFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|TokenProviderType
name|type
init|=
name|conf
operator|.
name|getEnum
argument_list|(
name|AdlConfKeys
operator|.
name|AZURE_AD_TOKEN_PROVIDER_TYPE_KEY
argument_list|,
name|TokenProviderType
operator|.
name|Custom
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|RefreshToken
case|:
name|tokenProvider
operator|=
name|getConfRefreshTokenBasedTokenProvider
argument_list|(
name|conf
argument_list|)
expr_stmt|;
break|break;
case|case
name|ClientCredential
case|:
name|tokenProvider
operator|=
name|getConfCredentialBasedTokenProvider
argument_list|(
name|conf
argument_list|)
expr_stmt|;
break|break;
case|case
name|Custom
case|:
default|default:
name|AzureADTokenProvider
name|azureADTokenProvider
init|=
name|getCustomAccessTokenProvider
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|tokenProvider
operator|=
operator|new
name|SdkTokenProviderAdapter
argument_list|(
name|azureADTokenProvider
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|tokenProvider
return|;
block|}
DECL|method|getConfCredentialBasedTokenProvider ( Configuration conf)
specifier|private
name|AccessTokenProvider
name|getConfCredentialBasedTokenProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|clientId
init|=
name|getPasswordString
argument_list|(
name|conf
argument_list|,
name|AZURE_AD_CLIENT_ID_KEY
argument_list|)
decl_stmt|;
name|String
name|refreshUrl
init|=
name|getPasswordString
argument_list|(
name|conf
argument_list|,
name|AZURE_AD_REFRESH_URL_KEY
argument_list|)
decl_stmt|;
name|String
name|clientSecret
init|=
name|getPasswordString
argument_list|(
name|conf
argument_list|,
name|AZURE_AD_CLIENT_SECRET_KEY
argument_list|)
decl_stmt|;
return|return
operator|new
name|ClientCredsTokenProvider
argument_list|(
name|refreshUrl
argument_list|,
name|clientId
argument_list|,
name|clientSecret
argument_list|)
return|;
block|}
DECL|method|getConfRefreshTokenBasedTokenProvider ( Configuration conf)
specifier|private
name|AccessTokenProvider
name|getConfRefreshTokenBasedTokenProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|clientId
init|=
name|getPasswordString
argument_list|(
name|conf
argument_list|,
name|AZURE_AD_CLIENT_ID_KEY
argument_list|)
decl_stmt|;
name|String
name|refreshToken
init|=
name|getPasswordString
argument_list|(
name|conf
argument_list|,
name|AZURE_AD_REFRESH_TOKEN_KEY
argument_list|)
decl_stmt|;
return|return
operator|new
name|RefreshTokenBasedTokenProvider
argument_list|(
name|clientId
argument_list|,
name|refreshToken
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getTokenProvider ()
name|AccessTokenProvider
name|getTokenProvider
parameter_list|()
block|{
return|return
name|tokenProvider
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAzureTokenProvider ()
name|AzureADTokenProvider
name|getAzureTokenProvider
parameter_list|()
block|{
return|return
name|azureTokenProvider
return|;
block|}
comment|/**    * Constructing home directory locally is fine as long as Hadoop    * local user name and ADL user name relationship story is not fully baked    * yet.    *    * @return Hadoop local user home directory.    */
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|userName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create call semantic is handled differently in case of ADL. Create    * semantics is translated to Create/Append    * semantics.    * 1. No dedicated connection to server.    * 2. Buffering is locally done, Once buffer is full or flush is invoked on    * the by the caller. All the pending    * data is pushed to ADL as APPEND operation code.    * 3. On close - Additional call is send to server to close the stream, and    * release lock from the stream.    *    * Necessity of Create/Append semantics is    * 1. ADL backend server does not allow idle connection for longer duration    * . In case of slow writer scenario,    * observed connection timeout/Connection reset causing occasional job    * failures.    * 2. Performance boost to jobs which are slow writer, avoided network latency    * 3. ADL equally better performing with multiple of 4MB chunk as append    * calls.    *    * @param f           File path    * @param permission  Access permission for the newly created file    * @param overwrite   Remove existing file and recreate new one if true    *                    otherwise throw error if file exist    * @param bufferSize  Buffer size, ADL backend does not honour    * @param replication Replication count, ADL backend does not honour    * @param blockSize   Block size, ADL backend does not honour    * @param progress    Progress indicator    * @return FSDataOutputStream OutputStream on which application can push    * stream of bytes    * @throws IOException when system error, internal server error or user error    */
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IfExists
name|overwriteRule
init|=
name|overwrite
condition|?
name|IfExists
operator|.
name|OVERWRITE
else|:
name|IfExists
operator|.
name|FAIL
decl_stmt|;
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|AdlFsOutputStream
argument_list|(
name|adlClient
operator|.
name|createFile
argument_list|(
name|toRelativeFilePath
argument_list|(
name|f
argument_list|)
argument_list|,
name|overwriteRule
argument_list|,
name|Integer
operator|.
name|toOctalString
argument_list|(
name|applyUMask
argument_list|(
name|permission
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|this
operator|.
name|statistics
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path with write-progress    * reporting. Same as create(), except fails if parent directory doesn't    * already exist.    *    * @param f           the file name to open    * @param permission  Access permission for the newly created file    * @param flags       {@link CreateFlag}s to use for this stream.    * @param bufferSize  the size of the buffer to be used. ADL backend does    *                    not honour    * @param replication required block replication for the file. ADL backend    *                    does not honour    * @param blockSize   Block size, ADL backend does not honour    * @param progress    Progress indicator    * @throws IOException when system error, internal server error or user error    * @see #setPermission(Path, FsPermission)    * @deprecated API only for 0.20-append    */
annotation|@
name|Override
DECL|method|createNonRecursive (Path f, FsPermission permission, EnumSet<CreateFlag> flags, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flags
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IfExists
name|overwriteRule
init|=
name|IfExists
operator|.
name|FAIL
decl_stmt|;
for|for
control|(
name|CreateFlag
name|flag
range|:
name|flags
control|)
block|{
if|if
condition|(
name|flag
operator|==
name|CreateFlag
operator|.
name|OVERWRITE
condition|)
block|{
name|overwriteRule
operator|=
name|IfExists
operator|.
name|OVERWRITE
expr_stmt|;
break|break;
block|}
block|}
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|AdlFsOutputStream
argument_list|(
name|adlClient
operator|.
name|createFile
argument_list|(
name|toRelativeFilePath
argument_list|(
name|f
argument_list|)
argument_list|,
name|overwriteRule
argument_list|,
name|Integer
operator|.
name|toOctalString
argument_list|(
name|applyUMask
argument_list|(
name|permission
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|this
operator|.
name|statistics
argument_list|)
return|;
block|}
comment|/**    * Append to an existing file (optional operation).    *    * @param f          the existing file to be appended.    * @param bufferSize the size of the buffer to be used. ADL backend does    *                   not honour    * @param progress   Progress indicator    * @throws IOException when system error, internal server error or user error    */
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|AdlFsOutputStream
argument_list|(
name|adlClient
operator|.
name|getAppendStream
argument_list|(
name|toRelativeFilePath
argument_list|(
name|f
argument_list|)
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|this
operator|.
name|statistics
argument_list|)
return|;
block|}
comment|/**    * Azure data lake does not support user configuration for data replication    * hence not leaving system to query on    * azure data lake.    *    * Stub implementation    *    * @param p           Not honoured    * @param replication Not honoured    * @return True hard coded since ADL file system does not support    * replication configuration    * @throws IOException No exception would not thrown in this case however    *                     aligning with parent api definition.    */
annotation|@
name|Override
DECL|method|setReplication (final Path p, final short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Open call semantic is handled differently in case of ADL. Instead of    * network stream is returned to the user,    * Overridden FsInputStream is returned.    *    * @param f          File path    * @param buffersize Buffer size, Not honoured    * @return FSDataInputStream InputStream on which application can read    * stream of bytes    * @throws IOException when system error, internal server error or user error    */
annotation|@
name|Override
DECL|method|open (final Path f, final int buffersize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|buffersize
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|AdlFsInputStream
argument_list|(
name|adlClient
operator|.
name|getReadStream
argument_list|(
name|toRelativeFilePath
argument_list|(
name|f
argument_list|)
argument_list|)
argument_list|,
name|statistics
argument_list|,
name|getConf
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Return a file status object that represents the path.    *    * @param f The path we want information from    * @return a FileStatus object    * @throws IOException when the path does not exist or any other error;    *                     IOException see specific implementation    */
annotation|@
name|Override
DECL|method|getFileStatus (final Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryEntry
name|entry
init|=
name|adlClient
operator|.
name|getDirectoryEntry
argument_list|(
name|toRelativeFilePath
argument_list|(
name|f
argument_list|)
argument_list|,
name|oidOrUpn
argument_list|)
decl_stmt|;
return|return
name|toFileStatus
argument_list|(
name|entry
argument_list|,
name|f
argument_list|)
return|;
block|}
comment|/**    * List the statuses of the files/directories in the given path if the path is    * a directory.    *    * @param f given path    * @return the statuses of the files/directories in the given patch    * @throws IOException when the path does not exist or any other error;    *                     IOException see specific implementation    */
annotation|@
name|Override
DECL|method|listStatus (final Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DirectoryEntry
argument_list|>
name|entries
init|=
name|adlClient
operator|.
name|enumerateDirectory
argument_list|(
name|toRelativeFilePath
argument_list|(
name|f
argument_list|)
argument_list|,
name|oidOrUpn
argument_list|)
decl_stmt|;
return|return
name|toFileStatuses
argument_list|(
name|entries
argument_list|,
name|f
argument_list|)
return|;
block|}
comment|/**    * Renames Path src to Path dst.  Can take place on local fs    * or remote DFS.    *    * ADLS support POSIX standard for rename operation.    *    * @param src path to be renamed    * @param dst new path after rename    * @return true if rename is successful    * @throws IOException on failure    */
annotation|@
name|Override
DECL|method|rename (final Path src, final Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRelativeFilePath
argument_list|(
name|src
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|adlClient
operator|.
name|rename
argument_list|(
name|toRelativeFilePath
argument_list|(
name|src
argument_list|)
argument_list|,
name|toRelativeFilePath
argument_list|(
name|dst
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|rename (final Path src, final Path dst, final Options.Rename... options)
specifier|public
name|void
name|rename
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|,
specifier|final
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|overwrite
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Rename
name|renameOption
range|:
name|options
control|)
block|{
if|if
condition|(
name|renameOption
operator|==
name|Rename
operator|.
name|OVERWRITE
condition|)
block|{
name|overwrite
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|adlClient
operator|.
name|rename
argument_list|(
name|toRelativeFilePath
argument_list|(
name|src
argument_list|)
argument_list|,
name|toRelativeFilePath
argument_list|(
name|dst
argument_list|)
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concat existing files together.    *    * @param trg  the path to the target destination.    * @param srcs the paths to the sources to use for the concatenation.    * @throws IOException when system error, internal server error or user error    */
annotation|@
name|Override
DECL|method|concat (final Path trg, final Path[] srcs)
specifier|public
name|void
name|concat
parameter_list|(
specifier|final
name|Path
name|trg
parameter_list|,
specifier|final
name|Path
index|[]
name|srcs
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sourcesList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|entry
range|:
name|srcs
control|)
block|{
name|sourcesList
operator|.
name|add
argument_list|(
name|toRelativeFilePath
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|adlClient
operator|.
name|concatenateFiles
argument_list|(
name|toRelativeFilePath
argument_list|(
name|trg
argument_list|)
argument_list|,
name|sourcesList
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete a file.    *    * @param path      the path to delete.    * @param recursive if path is a directory and set to    *                  true, the directory is deleted else throws an exception.    *                  In case of a file the recursive can be set to either    *                  true or false.    * @return true if delete is successful else false.    * @throws IOException when system error, internal server error or user error    */
annotation|@
name|Override
DECL|method|delete (final Path path, final boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|relativePath
init|=
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// Delete on root directory not supported.
if|if
condition|(
name|relativePath
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// This is important check after recent commit
comment|// HADOOP-12977 and HADOOP-13716 validates on root for
comment|// 1. if root is empty and non recursive delete then return false.
comment|// 2. if root is non empty and non recursive delete then throw exception.
if|if
condition|(
operator|!
name|recursive
operator|&&
name|adlClient
operator|.
name|enumerateDirectory
argument_list|(
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delete on root is not supported."
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
return|return
name|recursive
condition|?
name|adlClient
operator|.
name|deleteRecursive
argument_list|(
name|relativePath
argument_list|)
else|:
name|adlClient
operator|.
name|delete
argument_list|(
name|relativePath
argument_list|)
return|;
block|}
comment|/**    * Make the given file and all non-existent parents into    * directories. Has the semantics of Unix 'mkdir -p'.    * Existence of the directory hierarchy is not an error.    *    * @param path       path to create    * @param permission to apply to path    */
annotation|@
name|Override
DECL|method|mkdirs (final Path path, final FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|adlClient
operator|.
name|createDirectory
argument_list|(
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|Integer
operator|.
name|toOctalString
argument_list|(
name|applyUMask
argument_list|(
name|permission
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toFileStatuses (final List<DirectoryEntry> entries, final Path parent)
specifier|private
name|FileStatus
index|[]
name|toFileStatuses
parameter_list|(
specifier|final
name|List
argument_list|<
name|DirectoryEntry
argument_list|>
name|entries
parameter_list|,
specifier|final
name|Path
name|parent
parameter_list|)
block|{
name|FileStatus
index|[]
name|fileStatuses
init|=
operator|new
name|FileStatus
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DirectoryEntry
name|entry
range|:
name|entries
control|)
block|{
name|FileStatus
name|status
init|=
name|toFileStatus
argument_list|(
name|entry
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|entry
operator|.
name|name
operator|==
literal|null
operator|||
name|entry
operator|.
name|name
operator|==
literal|""
operator|)
condition|)
block|{
name|status
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|parent
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDirectory
argument_list|)
argument_list|,
name|entry
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fileStatuses
index|[
name|index
operator|++
index|]
operator|=
name|status
expr_stmt|;
block|}
return|return
name|fileStatuses
return|;
block|}
DECL|method|applyUMask (FsPermission permission)
specifier|private
name|FsPermission
name|applyUMask
parameter_list|(
name|FsPermission
name|permission
parameter_list|)
block|{
if|if
condition|(
name|permission
operator|==
literal|null
condition|)
block|{
name|permission
operator|=
name|FsPermission
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
return|return
name|permission
operator|.
name|applyUMask
argument_list|(
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toFileStatus (final DirectoryEntry entry, final Path f)
specifier|private
name|FileStatus
name|toFileStatus
parameter_list|(
specifier|final
name|DirectoryEntry
name|entry
parameter_list|,
specifier|final
name|Path
name|f
parameter_list|)
block|{
name|boolean
name|isDirectory
init|=
name|entry
operator|.
name|type
operator|==
name|DirectoryEntryType
operator|.
name|DIRECTORY
decl_stmt|;
name|long
name|lastModificationData
init|=
name|entry
operator|.
name|lastModifiedTime
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|lastAccessTime
init|=
name|entry
operator|.
name|lastAccessTime
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// set aclBit from ADLS backend response if
comment|// ADL_SUPPORT_ACL_BIT_IN_FSPERMISSION is true.
specifier|final
name|boolean
name|aclBit
init|=
name|aclBitStatus
condition|?
name|entry
operator|.
name|aclBit
else|:
literal|false
decl_stmt|;
name|FsPermission
name|permission
init|=
operator|new
name|AdlPermission
argument_list|(
name|aclBit
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|permission
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|entry
operator|.
name|user
decl_stmt|;
name|String
name|group
init|=
name|entry
operator|.
name|group
decl_stmt|;
name|FileStatus
name|status
decl_stmt|;
if|if
condition|(
name|overrideOwner
condition|)
block|{
name|status
operator|=
operator|new
name|FileStatus
argument_list|(
name|entry
operator|.
name|length
argument_list|,
name|isDirectory
argument_list|,
name|ADL_REPLICATION_FACTOR
argument_list|,
name|ADL_BLOCK_SIZE
argument_list|,
name|lastModificationData
argument_list|,
name|lastAccessTime
argument_list|,
name|permission
argument_list|,
name|userName
argument_list|,
literal|"hdfs"
argument_list|,
name|this
operator|.
name|makeQualified
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
operator|new
name|FileStatus
argument_list|(
name|entry
operator|.
name|length
argument_list|,
name|isDirectory
argument_list|,
name|ADL_REPLICATION_FACTOR
argument_list|,
name|ADL_BLOCK_SIZE
argument_list|,
name|lastModificationData
argument_list|,
name|lastAccessTime
argument_list|,
name|permission
argument_list|,
name|user
argument_list|,
name|group
argument_list|,
name|this
operator|.
name|makeQualified
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
comment|/**    * Set owner of a path (i.e. a file or a directory).    * The parameters owner and group cannot both be null.    *    * @param path  The path    * @param owner If it is null, the original username remains unchanged.    * @param group If it is null, the original groupname remains unchanged.    */
annotation|@
name|Override
DECL|method|setOwner (final Path path, final String owner, final String group)
specifier|public
name|void
name|setOwner
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|adlClient
operator|.
name|setOwner
argument_list|(
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set permission of a path.    *    * @param path       The path    * @param permission Access permission    */
annotation|@
name|Override
DECL|method|setPermission (final Path path, final FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|adlClient
operator|.
name|setPermission
argument_list|(
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|Integer
operator|.
name|toOctalString
argument_list|(
name|permission
operator|.
name|toShort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modifies ACL entries of files and directories.  This method can add new ACL    * entries or modify the permissions on existing ACL entries.  All existing    * ACL entries that are not specified in this call are retained without    * changes.  (Modifications are merged into the current ACL.)    *    * @param path    Path to modify    * @param aclSpec List of AclEntry describing modifications    * @throws IOException if an ACL could not be modified    */
annotation|@
name|Override
DECL|method|modifyAclEntries (final Path path, final List<AclEntry> aclSpec)
specifier|public
name|void
name|modifyAclEntries
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|acl
operator|.
name|AclEntry
argument_list|>
name|msAclEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|acl
operator|.
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AclEntry
name|aclEntry
range|:
name|aclSpec
control|)
block|{
name|msAclEntries
operator|.
name|add
argument_list|(
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|acl
operator|.
name|AclEntry
operator|.
name|parseAclEntry
argument_list|(
name|aclEntry
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|adlClient
operator|.
name|modifyAclEntries
argument_list|(
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|msAclEntries
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes ACL entries from files and directories.  Other ACL entries are    * retained.    *    * @param path    Path to modify    * @param aclSpec List of AclEntry describing entries to remove    * @throws IOException if an ACL could not be modified    */
annotation|@
name|Override
DECL|method|removeAclEntries (final Path path, final List<AclEntry> aclSpec)
specifier|public
name|void
name|removeAclEntries
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|acl
operator|.
name|AclEntry
argument_list|>
name|msAclEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|acl
operator|.
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AclEntry
name|aclEntry
range|:
name|aclSpec
control|)
block|{
name|msAclEntries
operator|.
name|add
argument_list|(
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|acl
operator|.
name|AclEntry
operator|.
name|parseAclEntry
argument_list|(
name|aclEntry
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|adlClient
operator|.
name|removeAclEntries
argument_list|(
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|msAclEntries
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes all default ACL entries from files and directories.    *    * @param path Path to modify    * @throws IOException if an ACL could not be modified    */
annotation|@
name|Override
DECL|method|removeDefaultAcl (final Path path)
specifier|public
name|void
name|removeDefaultAcl
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|adlClient
operator|.
name|removeDefaultAcls
argument_list|(
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes all but the base ACL entries of files and directories.  The entries    * for user, group, and others are retained for compatibility with permission    * bits.    *    * @param path Path to modify    * @throws IOException if an ACL could not be removed    */
annotation|@
name|Override
DECL|method|removeAcl (final Path path)
specifier|public
name|void
name|removeAcl
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|adlClient
operator|.
name|removeAllAcls
argument_list|(
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fully replaces ACL of files and directories, discarding all existing    * entries.    *    * @param path    Path to modify    * @param aclSpec List of AclEntry describing modifications, must include    *                entries for user, group, and others for compatibility with    *                permission bits.    * @throws IOException if an ACL could not be modified    */
annotation|@
name|Override
DECL|method|setAcl (final Path path, final List<AclEntry> aclSpec)
specifier|public
name|void
name|setAcl
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|acl
operator|.
name|AclEntry
argument_list|>
name|msAclEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|acl
operator|.
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AclEntry
name|aclEntry
range|:
name|aclSpec
control|)
block|{
name|msAclEntries
operator|.
name|add
argument_list|(
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|acl
operator|.
name|AclEntry
operator|.
name|parseAclEntry
argument_list|(
name|aclEntry
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|adlClient
operator|.
name|setAcl
argument_list|(
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|msAclEntries
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the ACL of a file or directory.    *    * @param path Path to get    * @return AclStatus describing the ACL of the file or directory    * @throws IOException if an ACL could not be read    */
annotation|@
name|Override
DECL|method|getAclStatus (final Path path)
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|acl
operator|.
name|AclStatus
name|adlStatus
init|=
name|adlClient
operator|.
name|getAclStatus
argument_list|(
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|oidOrUpn
argument_list|)
decl_stmt|;
name|AclStatus
operator|.
name|Builder
name|aclStatusBuilder
init|=
operator|new
name|AclStatus
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|aclStatusBuilder
operator|.
name|owner
argument_list|(
name|adlStatus
operator|.
name|owner
argument_list|)
expr_stmt|;
name|aclStatusBuilder
operator|.
name|group
argument_list|(
name|adlStatus
operator|.
name|group
argument_list|)
expr_stmt|;
name|aclStatusBuilder
operator|.
name|setPermission
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
name|adlStatus
operator|.
name|octalPermissions
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|aclStatusBuilder
operator|.
name|stickyBit
argument_list|(
name|adlStatus
operator|.
name|stickyBit
argument_list|)
expr_stmt|;
name|String
name|aclListString
init|=
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|acl
operator|.
name|AclEntry
operator|.
name|aclListToString
argument_list|(
name|adlStatus
operator|.
name|aclSpec
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
init|=
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
name|aclListString
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aclStatusBuilder
operator|.
name|addEntries
argument_list|(
name|aclEntries
argument_list|)
expr_stmt|;
return|return
name|aclStatusBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Checks if the user can access a path.  The mode specifies which access    * checks to perform.  If the requested permissions are granted, then the    * method returns normally.  If access is denied, then the method throws an    * {@link AccessControlException}.    *    * @param path Path to check    * @param mode type of access to check    * @throws AccessControlException        if access is denied    * @throws java.io.FileNotFoundException if the path does not exist    * @throws IOException                   see specific implementation    */
annotation|@
name|Override
DECL|method|access (final Path path, FsAction mode)
specifier|public
name|void
name|access
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
name|FsAction
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|adlClient
operator|.
name|checkAccess
argument_list|(
name|toRelativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|mode
operator|.
name|SYMBOL
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Access Denied : "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return the {@link ContentSummary} of a given {@link Path}.    *    * @param f path to use    */
annotation|@
name|Override
DECL|method|getContentSummary (Path f)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|ContentSummary
name|msSummary
init|=
name|adlClient
operator|.
name|getContentSummary
argument_list|(
name|toRelativeFilePath
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Builder
argument_list|()
operator|.
name|length
argument_list|(
name|msSummary
operator|.
name|length
argument_list|)
operator|.
name|directoryCount
argument_list|(
name|msSummary
operator|.
name|directoryCount
argument_list|)
operator|.
name|fileCount
argument_list|(
name|msSummary
operator|.
name|fileCount
argument_list|)
operator|.
name|spaceConsumed
argument_list|(
name|msSummary
operator|.
name|spaceConsumed
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getTransportScheme ()
specifier|protected
name|String
name|getTransportScheme
parameter_list|()
block|{
return|return
name|SECURE_TRANSPORT_SCHEME
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|toRelativeFilePath (Path path)
name|String
name|toRelativeFilePath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDirectory
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
comment|/**    * Get the current working directory for the given file system.    *    * @return the directory pathname    */
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDirectory
return|;
block|}
comment|/**    * Set the current working directory for the given file system. All relative    * paths will be resolved relative to it.    *    * @param dir Working directory path.    */
annotation|@
name|Override
DECL|method|setWorkingDirectory (final Path dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidPathException
argument_list|(
literal|"Working directory cannot be set to NULL"
argument_list|)
throw|;
block|}
comment|/**      * Do not validate the scheme and URI of the passsed parameter. When Adls      * runs as additional file system, working directory set has the default      * file system scheme and uri.      *      * Found a problem during PIG execution in      * https://github.com/apache/pig/blob/branch-0      * .15/src/org/apache/pig/backend/hadoop/executionengine/mapReduceLayer      * /PigInputFormat.java#L235      * However similar problem would be present in other application so      * defaulting to build working directory using relative path only.      */
name|this
operator|.
name|workingDirectory
operator|=
name|this
operator|.
name|makeAbsolute
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the number of bytes that large input files should be optimally    * be split into to minimize i/o time.    *    * @deprecated use {@link #getDefaultBlockSize(Path)} instead    */
annotation|@
name|Deprecated
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
name|ADL_BLOCK_SIZE
return|;
block|}
comment|/**    * Return the number of bytes that large input files should be optimally    * be split into to minimize i/o time.  The given path will be used to    * locate the actual filesystem.  The full path does not have to exist.    *    * @param f path of file    * @return the default block size for the path's filesystem    */
DECL|method|getDefaultBlockSize (Path f)
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
return|return
name|getDefaultBlockSize
argument_list|()
return|;
block|}
comment|/**    * Get the block size.    * @param f the filename    * @return the number of bytes in a block    */
comment|/**    * @deprecated Use getFileStatus() instead    */
annotation|@
name|Deprecated
DECL|method|getBlockSize (Path f)
specifier|public
name|long
name|getBlockSize
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ADL_BLOCK_SIZE
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (final FileStatus status, final long offset, final long length)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
specifier|final
name|FileStatus
name|status
parameter_list|,
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|(
name|offset
operator|<
literal|0
operator|)
operator|||
operator|(
name|length
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid start or len parameter"
argument_list|)
throw|;
block|}
if|if
condition|(
name|status
operator|.
name|getLen
argument_list|()
operator|<
name|offset
condition|)
block|{
return|return
operator|new
name|BlockLocation
index|[
literal|0
index|]
return|;
block|}
specifier|final
name|String
index|[]
name|name
init|=
block|{
literal|"localhost"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|host
init|=
block|{
literal|"localhost"
block|}
decl_stmt|;
name|long
name|blockSize
init|=
name|ADL_BLOCK_SIZE
decl_stmt|;
name|int
name|numberOfLocations
init|=
call|(
name|int
call|)
argument_list|(
name|length
operator|/
name|blockSize
argument_list|)
operator|+
operator|(
operator|(
name|length
operator|%
name|blockSize
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
operator|new
name|BlockLocation
index|[
name|numberOfLocations
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|currentOffset
init|=
name|offset
operator|+
operator|(
name|i
operator|*
name|blockSize
operator|)
decl_stmt|;
name|long
name|currentLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|blockSize
argument_list|,
name|offset
operator|+
name|length
operator|-
name|currentOffset
argument_list|)
decl_stmt|;
name|locations
index|[
name|i
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|name
argument_list|,
name|host
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
block|}
return|return
name|locations
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (final Path p, final long offset, final long length)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read ops incremented in getFileStatus
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
return|return
name|getFileBlockLocations
argument_list|(
name|fileStatus
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**    * Get replication.    *    * @param src file name    * @return file replication    * @deprecated Use getFileStatus() instead    */
annotation|@
name|Deprecated
DECL|method|getReplication (Path src)
specifier|public
name|short
name|getReplication
parameter_list|(
name|Path
name|src
parameter_list|)
block|{
return|return
name|ADL_REPLICATION_FACTOR
return|;
block|}
DECL|method|makeAbsolute (Path path)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|isAbsolute
argument_list|()
condition|?
name|path
else|:
operator|new
name|Path
argument_list|(
name|this
operator|.
name|workingDirectory
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|method|getNonEmptyVal (Configuration conf, String key)
specifier|private
specifier|static
name|String
name|getNonEmptyVal
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No value for "
operator|+
name|key
operator|+
literal|" found in conf file."
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|/**    * A wrapper of {@link Configuration#getPassword(String)}. It returns    *<code>String</code> instead of<code>char[]</code>.    *    * @param conf the configuration    * @param key the property key    * @return the password string    * @throws IOException if the password was not found    */
DECL|method|getPasswordString (Configuration conf, String key)
specifier|private
specifier|static
name|String
name|getPasswordString
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|passchars
init|=
name|conf
operator|.
name|getPassword
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|passchars
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Password "
operator|+
name|key
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|String
argument_list|(
name|passchars
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setUserGroupRepresentationAsUPN (boolean enableUPN)
specifier|public
name|void
name|setUserGroupRepresentationAsUPN
parameter_list|(
name|boolean
name|enableUPN
parameter_list|)
block|{
name|oidOrUpn
operator|=
name|enableUPN
condition|?
name|UserGroupRepresentation
operator|.
name|UPN
else|:
name|UserGroupRepresentation
operator|.
name|OID
expr_stmt|;
block|}
block|}
end_class

end_unit

