begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.adl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|datalake
operator|.
name|store
operator|.
name|ADLFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|AdlConfKeys
operator|.
name|ADL_EXPERIMENT_POSITIONAL_READ_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|AdlConfKeys
operator|.
name|ADL_EXPERIMENT_POSITIONAL_READ_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|AdlConfKeys
operator|.
name|DEFAULT_READ_AHEAD_BUFFER_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|AdlConfKeys
operator|.
name|READ_AHEAD_BUFFER_SIZE_KEY
import|;
end_import

begin_comment
comment|/**  * Wraps {@link ADLFileInputStream} implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|AdlFsInputStream
specifier|public
specifier|final
class|class
name|AdlFsInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|in
specifier|private
specifier|final
name|ADLFileInputStream
name|in
decl_stmt|;
DECL|field|stat
specifier|private
specifier|final
name|Statistics
name|stat
decl_stmt|;
DECL|field|enablePositionalReadExperiment
specifier|private
specifier|final
name|boolean
name|enablePositionalReadExperiment
decl_stmt|;
DECL|method|AdlFsInputStream (ADLFileInputStream inputStream, Statistics statistics, Configuration conf)
specifier|public
name|AdlFsInputStream
parameter_list|(
name|ADLFileInputStream
name|inputStream
parameter_list|,
name|Statistics
name|statistics
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
name|inputStream
expr_stmt|;
name|this
operator|.
name|in
operator|.
name|setBufferSize
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|READ_AHEAD_BUFFER_SIZE_KEY
argument_list|,
name|DEFAULT_READ_AHEAD_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|enablePositionalReadExperiment
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|ADL_EXPERIMENT_POSITIONAL_READ_KEY
argument_list|,
name|ADL_EXPERIMENT_POSITIONAL_READ_DEFAULT
argument_list|)
expr_stmt|;
name|stat
operator|=
name|statistics
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the current offset from the start of the file.    */
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getPos
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long l)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|l
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ch
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
operator|&&
name|ch
operator|!=
operator|-
literal|1
condition|)
block|{
name|stat
operator|.
name|incrementBytesRead
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|ch
return|;
block|}
annotation|@
name|Override
DECL|method|read (long position, byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numberOfByteRead
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|enablePositionalReadExperiment
condition|)
block|{
name|numberOfByteRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numberOfByteRead
operator|=
name|super
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stat
operator|!=
literal|null
operator|&&
name|numberOfByteRead
operator|>
literal|0
condition|)
block|{
name|stat
operator|.
name|incrementBytesRead
argument_list|(
name|numberOfByteRead
argument_list|)
expr_stmt|;
block|}
return|return
name|numberOfByteRead
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] buffer, int offset, int length)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numberOfByteRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
operator|&&
name|numberOfByteRead
operator|>
literal|0
condition|)
block|{
name|stat
operator|.
name|incrementBytesRead
argument_list|(
name|numberOfByteRead
argument_list|)
expr_stmt|;
block|}
return|return
name|numberOfByteRead
return|;
block|}
comment|/**    * This method returns the remaining bytes in the stream, rather than the    * expected Java    * interpretation of {@link java.io.InputStream#available()}, which expects    * the    * number of remaining    * bytes in the local buffer. Moreover, it caps the value returned to a    * maximum of Integer.MAX_VALUE.    * These changed behaviors are to ensure compatibility with the    * expectations of HBase WAL reader,    * which depends on available() returning the number of bytes in stream.    *    * Given all other FileSystems in the hadoop ecosystem (especially HDFS) do    * this, it is possible other    * apps other than HBase would also pick up expectation of this behavior    * based on HDFS implementation.    * Therefore keeping this quirky behavior here, to ensure compatibility.    *    * @return remaining bytes in the stream, with maximum of Integer.MAX_VALUE.    * @throws IOException If fails to get the position or file length from SDK.    */
annotation|@
name|Override
DECL|method|available ()
specifier|public
specifier|synchronized
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|in
operator|.
name|length
argument_list|()
operator|-
name|in
operator|.
name|getPos
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|skip (long pos)
specifier|public
specifier|synchronized
name|long
name|skip
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|skip
argument_list|(
name|pos
argument_list|)
return|;
block|}
block|}
end_class

end_unit

