begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.adl.live
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|live
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|common
operator|.
name|Parallelized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test supported ASCII, UTF-8 character set supported by Adl storage file  * system on file/folder operation.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parallelized
operator|.
name|class
argument_list|)
DECL|class|TestAdlSupportedCharsetInPath
specifier|public
class|class
name|TestAdlSupportedCharsetInPath
block|{
DECL|field|TEST_ROOT
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ROOT
init|=
literal|"/test/"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAdlSupportedCharsetInPath
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|method|TestAdlSupportedCharsetInPath (String filePath)
specifier|public
name|TestAdlSupportedCharsetInPath
parameter_list|(
name|String
name|filePath
parameter_list|)
block|{
name|path
operator|=
name|filePath
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
DECL|method|adlCharTestData ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|adlCharTestData
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|filePathList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|32
init|;
name|i
operator|<
literal|127
condition|;
operator|++
name|i
control|)
block|{
name|String
name|specialChar
init|=
operator|(
name|char
operator|)
name|i
operator|+
literal|""
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|48
operator|&&
name|i
operator|<=
literal|57
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|i
operator|>=
literal|65
operator|&&
name|i
operator|<=
literal|90
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|i
operator|>=
literal|97
operator|&&
name|i
operator|<=
literal|122
condition|)
block|{
continue|continue;
block|}
comment|// Special char at start of the path
if|if
condition|(
name|i
operator|!=
literal|92
operator|&&
name|i
operator|!=
literal|58
operator|&&
name|i
operator|!=
literal|46
operator|&&
name|i
operator|!=
literal|47
condition|)
block|{
name|filePathList
operator|.
name|add
argument_list|(
name|specialChar
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// Special char at end of string
if|if
condition|(
name|i
operator|!=
literal|92
operator|&&
name|i
operator|!=
literal|47
operator|&&
name|i
operator|!=
literal|58
condition|)
block|{
name|filePathList
operator|.
name|add
argument_list|(
literal|"file "
operator|+
name|i
operator|+
literal|" "
operator|+
name|specialChar
argument_list|)
expr_stmt|;
block|}
comment|// Special char in between string
if|if
condition|(
name|i
operator|!=
literal|47
operator|&&
name|i
operator|!=
literal|58
operator|&&
name|i
operator|!=
literal|92
condition|)
block|{
name|filePathList
operator|.
name|add
argument_list|(
literal|"file "
operator|+
name|i
operator|+
literal|" "
operator|+
name|specialChar
operator|+
literal|"_name"
argument_list|)
expr_stmt|;
block|}
block|}
name|filePathList
operator|.
name|add
argument_list|(
literal|"a  "
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"a..b"
argument_list|)
expr_stmt|;
name|fillUnicodes
argument_list|(
name|filePathList
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|item
range|:
name|filePathList
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|item
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|fillUnicodes (ArrayList<String> filePathList)
specifier|private
specifier|static
name|void
name|fillUnicodes
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|filePathList
parameter_list|)
block|{
comment|// Unicode characters
name|filePathList
operator|.
name|add
argument_list|(
literal|"Ø§ÙØ¨ÙØ§ÙØ§Øª Ø§ÙÙØ¨ÙØ±Ø©"
argument_list|)
expr_stmt|;
comment|// Arabic
name|filePathList
operator|.
name|add
argument_list|(
literal|"TÃ« dhÃ«nat i madh"
argument_list|)
expr_stmt|;
comment|// Albanian
name|filePathList
operator|.
name|add
argument_list|(
literal|"Õ´Õ¥Õ® Õ¿Õ¾ÕµÕ¡Õ¬Õ¶Õ¥ÖÕ¨"
argument_list|)
expr_stmt|;
comment|// Armenian
name|filePathList
operator|.
name|add
argument_list|(
literal|"bÃ¶yÃ¼k data"
argument_list|)
expr_stmt|;
comment|// Azerbaijani
name|filePathList
operator|.
name|add
argument_list|(
literal|"Ð²ÑÐ»ÑÐºÑÑ Ð´Ð°Ð´Ð·ÐµÐ½ÑÑ"
argument_list|)
expr_stmt|;
comment|// Belarusian,
name|filePathList
operator|.
name|add
argument_list|(
literal|"à¦¬à¦¿à¦ à¦¡à§à¦à¦¾"
argument_list|)
expr_stmt|;
comment|// Bengali
name|filePathList
operator|.
name|add
argument_list|(
literal|"veliki podataka"
argument_list|)
expr_stmt|;
comment|// Bosnian
name|filePathList
operator|.
name|add
argument_list|(
literal|"Ð³Ð¾Ð»ÑÐ¼Ð° Ð´Ð°Ð½Ð½Ð¸"
argument_list|)
expr_stmt|;
comment|// Bulgarian
name|filePathList
operator|.
name|add
argument_list|(
literal|"å¤§æ°æ®"
argument_list|)
expr_stmt|;
comment|// Chinese - Simplified
name|filePathList
operator|.
name|add
argument_list|(
literal|"å¤§æ¸æ"
argument_list|)
expr_stmt|;
comment|// Chinese - Traditional
name|filePathList
operator|.
name|add
argument_list|(
literal|"áááá áááááªáááá"
argument_list|)
expr_stmt|;
comment|// Georgian,
name|filePathList
operator|.
name|add
argument_list|(
literal|"groÃe Daten"
argument_list|)
expr_stmt|;
comment|// German
name|filePathList
operator|.
name|add
argument_list|(
literal|"Î¼ÎµÎ³Î¬Î»Î¿ Î´ÎµÎ´Î¿Î¼Î­Î½Î±"
argument_list|)
expr_stmt|;
comment|// Greek
name|filePathList
operator|.
name|add
argument_list|(
literal|"àª®à«àªàª¾ àª®àª¾àª¹àª¿àª¤à«"
argument_list|)
expr_stmt|;
comment|// Gujarati
name|filePathList
operator|.
name|add
argument_list|(
literal|"× ×ª×× ×× ××××××"
argument_list|)
expr_stmt|;
comment|// Hebrew
name|filePathList
operator|.
name|add
argument_list|(
literal|"à¤¬à¤¡à¤¼à¤¾ à¤¡à¥à¤à¤¾"
argument_list|)
expr_stmt|;
comment|// Hindi
name|filePathList
operator|.
name|add
argument_list|(
literal|"stÃ³r gÃ¶gn"
argument_list|)
expr_stmt|;
comment|// Icelandic
name|filePathList
operator|.
name|add
argument_list|(
literal|"sonraÃ­ mÃ³r"
argument_list|)
expr_stmt|;
comment|// Irish
name|filePathList
operator|.
name|add
argument_list|(
literal|"ããã°ãã¼ã¿"
argument_list|)
expr_stmt|;
comment|// Japanese
name|filePathList
operator|.
name|add
argument_list|(
literal|"Ò¯Ð»ÐºÐµÐ½ Ð´ÐµÑÐµÐºÑÐµÑ"
argument_list|)
expr_stmt|;
comment|// Kazakh
name|filePathList
operator|.
name|add
argument_list|(
literal|"áá·áááááááá"
argument_list|)
expr_stmt|;
comment|// Khmer
name|filePathList
operator|.
name|add
argument_list|(
literal|"ë¹ ë°ì´í°"
argument_list|)
expr_stmt|;
comment|// Korean
name|filePathList
operator|.
name|add
argument_list|(
literal|"àºà»à»àº¡àº¹àº àºàº°àº«àºàº²àºà»àº«àºà»"
argument_list|)
expr_stmt|;
comment|// Lao
name|filePathList
operator|.
name|add
argument_list|(
literal|"Ð³Ð¾Ð»ÐµÐ¼Ð¸ Ð¿Ð¾Ð´Ð°ÑÐ¾ÑÐ¸"
argument_list|)
expr_stmt|;
comment|// Macedonian
name|filePathList
operator|.
name|add
argument_list|(
literal|"à¤ à¥à¤²à¥ à¤¡à¤¾à¤à¤¾"
argument_list|)
expr_stmt|;
comment|// Nepali
name|filePathList
operator|.
name|add
argument_list|(
literal|"à´µà´²à´¿à´¯ à´¡à´¾à´±àµà´±"
argument_list|)
expr_stmt|;
comment|// Malayalam
name|filePathList
operator|.
name|add
argument_list|(
literal|"à¤®à¥à¤ à¥ à¤¡à¥à¤à¤¾"
argument_list|)
expr_stmt|;
comment|// Marathi
name|filePathList
operator|.
name|add
argument_list|(
literal|"ÑÐ¾Ð¼ Ð¼ÑÐ´ÑÑÐ»ÑÐ»"
argument_list|)
expr_stmt|;
comment|// Mangolian
name|filePathList
operator|.
name|add
argument_list|(
literal|"Ø§Ø·ÙØ§Ø¹Ø§Øª Ø¨Ø²Ø±Ú¯"
argument_list|)
expr_stmt|;
comment|// Persian
name|filePathList
operator|.
name|add
argument_list|(
literal|"à¨µà©±à¨¡à© à¨¡à¨¾à¨à© à¨¨à©à©°"
argument_list|)
expr_stmt|;
comment|// Punjabi
name|filePathList
operator|.
name|add
argument_list|(
literal|"Ð±Ð¾Ð»ÑÑÐ¸Ðµ Ð´Ð°Ð½Ð½ÑÐµ"
argument_list|)
expr_stmt|;
comment|// Russian
name|filePathList
operator|.
name|add
argument_list|(
literal|"ÐÐµÐ»Ð¸ÐºÐ¸ Ð¿Ð¾Ð´Ð°ÑÐ°ÐºÐ°"
argument_list|)
expr_stmt|;
comment|// Serbian
name|filePathList
operator|.
name|add
argument_list|(
literal|"à·à·à·à·à¶½ à¶¯à¶­à·à¶­"
argument_list|)
expr_stmt|;
comment|// Sinhala
name|filePathList
operator|.
name|add
argument_list|(
literal|"big dÃ¡t"
argument_list|)
expr_stmt|;
comment|// Slovak
name|filePathList
operator|.
name|add
argument_list|(
literal|"Ð¼Ð°ÑÐ»ÑÐ¼Ð¾ÑÐ¸ ÐºÐ°Ð»Ð¾Ð½"
argument_list|)
expr_stmt|;
comment|// Tajik
name|filePathList
operator|.
name|add
argument_list|(
literal|"à®ªà¯à®°à®¿à®¯ à®¤à®°à®µà¯"
argument_list|)
expr_stmt|;
comment|// Tamil
name|filePathList
operator|.
name|add
argument_list|(
literal|"à°ªà±à°¦à±à°¦ à°¡à±à°à°¾"
argument_list|)
expr_stmt|;
comment|// Telugu
name|filePathList
operator|.
name|add
argument_list|(
literal|"à¸à¹à¸­à¸¡à¸¹à¸¥à¹à¸«à¸à¹"
argument_list|)
expr_stmt|;
comment|// Thai
name|filePathList
operator|.
name|add
argument_list|(
literal|"bÃ¼yÃ¼k veri"
argument_list|)
expr_stmt|;
comment|// Turkish
name|filePathList
operator|.
name|add
argument_list|(
literal|"Ð²ÐµÐ»Ð¸ÐºÑ Ð´Ð°Ð½Ñ"
argument_list|)
expr_stmt|;
comment|// Ukranian
name|filePathList
operator|.
name|add
argument_list|(
literal|"Ø¨ÚÛ Ø§Ø¹Ø¯Ø§Ø¯ Ù Ø´ÙØ§Ø±"
argument_list|)
expr_stmt|;
comment|// Urdu
name|filePathList
operator|.
name|add
argument_list|(
literal|"katta ma'lumotlar"
argument_list|)
expr_stmt|;
comment|// Uzbek
name|filePathList
operator|.
name|add
argument_list|(
literal|"dá»¯ liá»u lá»n"
argument_list|)
expr_stmt|;
comment|// Vietanamese
name|filePathList
operator|.
name|add
argument_list|(
literal|"××¨×××¡ ××Ö·××"
argument_list|)
expr_stmt|;
comment|// Yiddish
name|filePathList
operator|.
name|add
argument_list|(
literal|"big idatha"
argument_list|)
expr_stmt|;
comment|// Zulu
name|filePathList
operator|.
name|add
argument_list|(
literal|"rachelÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"jessicaÎ¿"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"sarahÎ´"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"katieÎ½"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"wendyÎ¾"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"davidÎ¼"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"priscillaÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"oscarÎ¸"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"xavierÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"gabriellaÎ¸"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"davidÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ireneÎ¼"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"fredÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"davidÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ulyssesÎ½"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"gabriellaÎ¼"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"zachÎ¶"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"gabriellaÎ»"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ulyssesÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"davidÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"sarahÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"hollyÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"nickÎ±"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ulyssesÎ¹"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"mikeÎ²"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"priscillaÎº"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"wendyÎ¸"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"jessicaÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"fredÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"fredÎ¶"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"sarahÎº"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"calvinÎ·"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"xavierÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"yuriÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ethanÎ»"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"hollyÎµ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"xavierÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"victorÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"wendyÎ²"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"jessicaÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"quinnÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"xavierÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"nickÎ¹"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"rachelÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"oscarÎ¾"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"zachÎ´"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"zachÎ»"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"rachelÎ±"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"jessicaÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"lukeÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"tomÎ¶"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"nickÎ¾"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"nickÎº"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ethanÎ´"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"fredÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"priscillaÎ¸"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"zachÎ¾"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"xavierÎ¾"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"zachÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ethanÎ±"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"oscarÎ¹"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ireneÎ´"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ireneÎ¶"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"victorÎ¿"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"wendyÎ²"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"mikeÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"fredÎ¿"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"mikeÎ·"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"sarahÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"quinnÎ²"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"mikeÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"nickÎ¶"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"nickÎ¿"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"tomÎº"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"bobÎ»"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"yuriÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"davidÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"quinnÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"mikeÎ»"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"davidÎ·"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ethanÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"nickÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"yuriÎ¿"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ethanÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"bobÎ¸"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"davidÎ»"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"priscillaÎ¾"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"nickÎ³"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"lukeÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ireneÎ»"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"xavierÎ¿"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"fredÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"ulyssesÎ¼"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"wendyÎ³"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"zachÎ»"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"rachelÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"sarahÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"aliceÏ"
argument_list|)
expr_stmt|;
name|filePathList
operator|.
name|add
argument_list|(
literal|"bobÏ"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|testReport ()
specifier|public
specifier|static
name|void
name|testReport
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
if|if
condition|(
operator|!
name|AdlStorageConfiguration
operator|.
name|isContractTestEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|FileSystem
name|fs
init|=
name|AdlStorageConfiguration
operator|.
name|createStorageConnector
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllowedSpecialCharactersMkdir ()
specifier|public
name|void
name|testAllowedSpecialCharactersMkdir
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|Path
name|parentPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
argument_list|)
decl_stmt|;
name|Path
name|specialFile
init|=
operator|new
name|Path
argument_list|(
name|parentPath
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|AdlStorageConfiguration
operator|.
name|createStorageConnector
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Mkdir failed : "
operator|+
name|specialFile
argument_list|,
name|fs
operator|.
name|mkdirs
argument_list|(
name|specialFile
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File not Found after Mkdir success"
operator|+
name|specialFile
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|specialFile
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Not listed under parent "
operator|+
name|parentPath
argument_list|,
name|contains
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|parentPath
argument_list|)
argument_list|,
name|fs
operator|.
name|makeQualified
argument_list|(
name|specialFile
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete failed : "
operator|+
name|specialFile
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|specialFile
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File still exist after delete "
operator|+
name|specialFile
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|specialFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|contains (FileStatus[] statuses, String remotePath)
specifier|private
name|boolean
name|contains
parameter_list|(
name|FileStatus
index|[]
name|statuses
parameter_list|,
name|String
name|remotePath
parameter_list|)
block|{
for|for
control|(
name|FileStatus
name|status
range|:
name|statuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|remotePath
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|Arrays
operator|.
name|stream
argument_list|(
name|statuses
argument_list|)
operator|.
name|forEach
argument_list|(
name|s
lambda|->
name|LOG
operator|.
name|info
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|AdlStorageConfiguration
operator|.
name|isContractTestEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllowedSpecialCharactersRename ()
specifier|public
name|void
name|testAllowedSpecialCharactersRename
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|String
name|parentPath
init|=
name|TEST_ROOT
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|Path
name|specialFile
init|=
operator|new
name|Path
argument_list|(
name|parentPath
operator|+
name|path
argument_list|)
decl_stmt|;
name|Path
name|anotherLocation
init|=
operator|new
name|Path
argument_list|(
name|parentPath
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|AdlStorageConfiguration
operator|.
name|createStorageConnector
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Could not create "
operator|+
name|specialFile
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|createNewFile
argument_list|(
name|specialFile
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Failed to rename "
operator|+
name|specialFile
operator|.
name|toString
argument_list|()
operator|+
literal|" --> "
operator|+
name|anotherLocation
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|rename
argument_list|(
name|specialFile
argument_list|,
name|anotherLocation
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File should not be present after successful rename : "
operator|+
name|specialFile
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|specialFile
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File should be present after successful rename : "
operator|+
name|anotherLocation
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|anotherLocation
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Listed under parent whereas expected not listed : "
operator|+
name|parentPath
argument_list|,
name|contains
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|parentPath
argument_list|)
argument_list|)
argument_list|,
name|fs
operator|.
name|makeQualified
argument_list|(
name|specialFile
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Failed to rename "
operator|+
name|anotherLocation
operator|.
name|toString
argument_list|()
operator|+
literal|" --> "
operator|+
name|specialFile
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|rename
argument_list|(
name|anotherLocation
argument_list|,
name|specialFile
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File should be present after successful rename : "
operator|+
literal|""
operator|+
name|specialFile
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|specialFile
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File should not be present after successful rename : "
operator|+
name|anotherLocation
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|anotherLocation
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Not listed under parent "
operator|+
name|parentPath
argument_list|,
name|contains
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|parentPath
argument_list|)
argument_list|)
argument_list|,
name|fs
operator|.
name|makeQualified
argument_list|(
name|specialFile
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Failed to delete "
operator|+
name|parentPath
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|parentPath
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

