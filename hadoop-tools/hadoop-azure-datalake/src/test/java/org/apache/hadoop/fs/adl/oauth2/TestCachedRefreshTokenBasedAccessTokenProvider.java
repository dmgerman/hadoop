begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.adl.oauth2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|oauth2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|AccessTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|OAUTH_CLIENT_ID_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|OAUTH_REFRESH_URL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|ConfRefreshTokenBasedAccessTokenProvider
operator|.
name|OAUTH_REFRESH_TOKEN_KEY
import|;
end_import

begin_comment
comment|/**  * Verify cache behavior of ConfRefreshTokenBasedAccessTokenProvider instances.  */
end_comment

begin_class
DECL|class|TestCachedRefreshTokenBasedAccessTokenProvider
specifier|public
class|class
name|TestCachedRefreshTokenBasedAccessTokenProvider
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|name
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|method|clientId (int id)
name|String
name|clientId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_clientID"
operator|+
name|id
return|;
block|}
annotation|@
name|Before
DECL|method|initConfig ()
specifier|public
name|void
name|initConfig
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OAUTH_CLIENT_ID_KEY
argument_list|,
name|clientId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OAUTH_REFRESH_TOKEN_KEY
argument_list|,
literal|"01234567890abcdef"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OAUTH_REFRESH_URL_KEY
argument_list|,
literal|"http://dingo.invalid:80"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCacheInstance ()
specifier|public
name|void
name|testCacheInstance
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AccessTokenProvider
name|inst0
init|=
name|mock
argument_list|(
name|AccessTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|inst0
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// verify config
name|CachedRefreshTokenBasedAccessTokenProvider
name|t1
init|=
operator|new
name|MockProvider
argument_list|(
name|inst0
argument_list|)
decl_stmt|;
name|t1
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|inst0
argument_list|)
operator|.
name|setConf
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// cloned, not exact match
comment|// verify cache hit
name|CachedRefreshTokenBasedAccessTokenProvider
name|t2
init|=
operator|new
name|CachedRefreshTokenBasedAccessTokenProvider
argument_list|()
block|{
annotation|@
name|Override
name|AccessTokenProvider
name|newInstance
parameter_list|()
block|{
name|fail
argument_list|(
literal|"Failed to return cached instance"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|t2
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// verify force refresh
name|conf
operator|.
name|setBoolean
argument_list|(
name|CachedRefreshTokenBasedAccessTokenProvider
operator|.
name|FORCE_REFRESH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|AccessTokenProvider
name|inst1
init|=
name|mock
argument_list|(
name|AccessTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|inst1
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedRefreshTokenBasedAccessTokenProvider
name|t3
init|=
operator|new
name|MockProvider
argument_list|(
name|inst1
argument_list|)
decl_stmt|;
name|t3
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|inst1
argument_list|)
operator|.
name|setConf
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify cache miss
name|conf
operator|.
name|set
argument_list|(
name|OAUTH_REFRESH_URL_KEY
argument_list|,
literal|"http://yak.invalid:80"
argument_list|)
expr_stmt|;
specifier|final
name|AccessTokenProvider
name|inst2
init|=
name|mock
argument_list|(
name|AccessTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|inst2
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedRefreshTokenBasedAccessTokenProvider
name|t4
init|=
operator|new
name|MockProvider
argument_list|(
name|inst2
argument_list|)
decl_stmt|;
name|t4
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|inst2
argument_list|)
operator|.
name|setConf
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCacheLimit ()
specifier|public
name|void
name|testCacheLimit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|iter
init|=
name|CachedRefreshTokenBasedAccessTokenProvider
operator|.
name|MAX_PROVIDERS
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iter
condition|;
operator|++
name|i
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|OAUTH_CLIENT_ID_KEY
argument_list|,
name|clientId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|AccessTokenProvider
name|inst
init|=
name|mock
argument_list|(
name|AccessTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|inst
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedRefreshTokenBasedAccessTokenProvider
name|t
init|=
operator|new
name|MockProvider
argument_list|(
name|inst
argument_list|)
decl_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|inst
argument_list|)
operator|.
name|setConf
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify cache hit
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iter
condition|;
operator|++
name|i
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|OAUTH_CLIENT_ID_KEY
argument_list|,
name|clientId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|CachedRefreshTokenBasedAccessTokenProvider
name|t
init|=
operator|new
name|CachedRefreshTokenBasedAccessTokenProvider
argument_list|()
block|{
annotation|@
name|Override
name|AccessTokenProvider
name|newInstance
parameter_list|()
block|{
name|fail
argument_list|(
literal|"Failed to return cached instance"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// verify miss, evict 0
name|conf
operator|.
name|set
argument_list|(
name|OAUTH_CLIENT_ID_KEY
argument_list|,
name|clientId
argument_list|(
name|iter
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AccessTokenProvider
name|inst
init|=
name|mock
argument_list|(
name|AccessTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|inst
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedRefreshTokenBasedAccessTokenProvider
name|t
init|=
operator|new
name|MockProvider
argument_list|(
name|inst
argument_list|)
decl_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|inst
argument_list|)
operator|.
name|setConf
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify miss
name|conf
operator|.
name|set
argument_list|(
name|OAUTH_CLIENT_ID_KEY
argument_list|,
name|clientId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AccessTokenProvider
name|inst0
init|=
name|mock
argument_list|(
name|AccessTokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|inst0
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedRefreshTokenBasedAccessTokenProvider
name|t0
init|=
operator|new
name|MockProvider
argument_list|(
name|inst0
argument_list|)
decl_stmt|;
name|t0
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|inst0
argument_list|)
operator|.
name|setConf
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MockProvider
specifier|static
class|class
name|MockProvider
extends|extends
name|CachedRefreshTokenBasedAccessTokenProvider
block|{
DECL|field|inst
specifier|private
specifier|final
name|AccessTokenProvider
name|inst
decl_stmt|;
DECL|method|MockProvider (AccessTokenProvider inst)
name|MockProvider
parameter_list|(
name|AccessTokenProvider
name|inst
parameter_list|)
block|{
name|this
operator|.
name|inst
operator|=
name|inst
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newInstance ()
name|AccessTokenProvider
name|newInstance
parameter_list|()
block|{
return|return
name|inst
return|;
block|}
block|}
block|}
end_class

end_unit

