begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.adl.live
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|live
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Verify different data segment size writes ensure the integrity and  * order of the data.  */
end_comment

begin_class
DECL|class|TestAdlDifferentSizeWritesLive
specifier|public
class|class
name|TestAdlDifferentSizeWritesLive
block|{
DECL|method|getRandomByteArrayData (int size)
specifier|public
specifier|static
name|byte
index|[]
name|getRandomByteArrayData
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|AdlStorageConfiguration
operator|.
name|isContractTestEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSmallDataWrites ()
specifier|public
name|void
name|testSmallDataWrites
parameter_list|()
throws|throws
name|IOException
block|{
name|testDataIntegrity
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|testDataIntegrity
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|7
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|testDataIntegrity
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|testDataIntegrity
argument_list|(
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|testDataIntegrity
argument_list|(
literal|1
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|testDataIntegrity
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMediumDataWrites ()
specifier|public
name|void
name|testMediumDataWrites
parameter_list|()
throws|throws
name|IOException
block|{
name|testDataIntegrity
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|1
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|testDataIntegrity
argument_list|(
literal|7
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|testDataIntegrity
argument_list|(
literal|9
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|testDataIntegrity
argument_list|(
literal|10
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|3
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
DECL|method|testDataIntegrity (int totalSize, int chunkSize)
specifier|private
name|void
name|testDataIntegrity
parameter_list|(
name|int
name|totalSize
parameter_list|,
name|int
name|chunkSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test/dataIntegrityCheck"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|AdlStorageConfiguration
operator|.
name|createAdlStorageConnector
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can not initialize ADL FileSystem. "
operator|+
literal|"Please check fs.defaultFS property."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|byte
index|[]
name|expectedData
init|=
name|getRandomByteArrayData
argument_list|(
name|totalSize
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|iteration
init|=
name|totalSize
operator|/
name|chunkSize
decl_stmt|;
name|int
name|reminderIteration
init|=
name|totalSize
operator|%
name|chunkSize
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iteration
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|expectedData
argument_list|,
name|offset
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|chunkSize
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|expectedData
argument_list|,
name|offset
argument_list|,
name|reminderIteration
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|actualData
init|=
operator|new
name|byte
index|[
name|totalSize
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|actualData
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|actualData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

