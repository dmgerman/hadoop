begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|TestADLResponseData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|common
operator|.
name|AdlMockWebServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|common
operator|.
name|TestDataForRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * This class is responsible for stress positional reads vs number of network  * calls required by to fetch the amount of data. Test does ensure the data  * integrity and order of the data is maintained. This tests are meant to test  * BufferManager.java and BatchByteArrayInputStream implementation.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestAdlRead
specifier|public
class|class
name|TestAdlRead
extends|extends
name|AdlMockWebServer
block|{
comment|// Keeping timeout of 1 hour to ensure the test does complete and should
comment|// not terminate due to high backend latency.
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|60
operator|*
literal|60000
argument_list|)
decl_stmt|;
DECL|field|testData
specifier|private
name|TestDataForRead
name|testData
decl_stmt|;
DECL|method|TestAdlRead (TestDataForRead testData)
specifier|public
name|TestAdlRead
parameter_list|(
name|TestDataForRead
name|testData
parameter_list|)
block|{
name|this
operator|.
name|testData
operator|=
name|testData
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"adl.feature.override.readahead.max.buffersize"
argument_list|,
literal|"8192"
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"adl.feature.override.readahead.max.concurrent.connection"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}"
argument_list|)
DECL|method|testDataForReadOperation ()
specifier|public
specifier|static
name|Collection
name|testDataForReadOperation
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
comment|//--------------------------
comment|// Test Data
comment|//--------------------------
block|{
operator|new
name|TestDataForRead
argument_list|(
literal|"Hello World"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|,
literal|true
argument_list|)
block|}
block|,
block|{
operator|new
name|TestDataForRead
argument_list|(
operator|(
literal|"the problem you appear to be wrestling with is that this doesn't "
operator|+
literal|"display very well. "
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|,
literal|true
argument_list|)
block|}
block|,
block|{
operator|new
name|TestDataForRead
argument_list|(
operator|(
literal|"Chinese Indonesians (Indonesian: Orang Tionghoa-Indonesia; "
operator|+
literal|"Chinese: "
operator|+
literal|"trad ???????, simp ???????, pin Yï¿½ndï¿½nï¿½x?yï¿½ Huï¿½rï¿½n), are "
operator|+
literal|"Indonesians descended from various Chinese ethnic groups, "
operator|+
literal|"particularly Han."
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|,
literal|true
argument_list|)
block|}
block|,
block|{
operator|new
name|TestDataForRead
argument_list|(
name|TestADLResponseData
operator|.
name|getRandomByteArrayData
argument_list|(
literal|5
operator|*
literal|1024
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|,
literal|true
argument_list|)
block|}
block|,
block|{
operator|new
name|TestDataForRead
argument_list|(
name|TestADLResponseData
operator|.
name|getRandomByteArrayData
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|50
argument_list|,
literal|true
argument_list|)
block|}
block|,
block|{
operator|new
name|TestDataForRead
argument_list|(
name|TestADLResponseData
operator|.
name|getRandomByteArrayData
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
block|}
block|,
block|{
operator|new
name|TestDataForRead
argument_list|(
name|TestADLResponseData
operator|.
name|getRandomByteArrayData
argument_list|(
literal|32
operator|*
literal|1024
argument_list|)
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
block|}
block|,
block|{
operator|new
name|TestDataForRead
argument_list|(
name|TestADLResponseData
operator|.
name|getRandomByteArrayData
argument_list|(
literal|48
operator|*
literal|1024
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|After
annotation|@
name|Before
DECL|method|cleanReadBuffer ()
specifier|public
name|void
name|cleanReadBuffer
parameter_list|()
block|{
name|BufferManager
operator|.
name|getInstance
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEntireBytes ()
specifier|public
name|void
name|testEntireBytes
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getMockServer
argument_list|()
operator|.
name|setDispatcher
argument_list|(
name|testData
operator|.
name|getDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|getMockAdlFileSystem
argument_list|()
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|getActualData
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|expectedData
argument_list|)
argument_list|,
name|expectedData
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|testData
operator|.
name|getActualData
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|testData
operator|.
name|isCheckOfNoOfCalls
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testData
operator|.
name|getExpectedNoNetworkCall
argument_list|()
argument_list|,
name|getMockServer
argument_list|()
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSeekOperation ()
specifier|public
name|void
name|testSeekOperation
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getMockServer
argument_list|()
operator|.
name|setDispatcher
argument_list|(
name|testData
operator|.
name|getDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|getMockAdlFileSystem
argument_list|()
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|int
name|position
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|testData
operator|.
name|getActualData
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|in
operator|.
name|getPos
argument_list|()
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|in
operator|.
name|read
argument_list|()
argument_list|,
name|testData
operator|.
name|getActualData
argument_list|()
index|[
name|position
index|]
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|testData
operator|.
name|isCheckOfNoOfCalls
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testData
operator|.
name|getExpectedNoNetworkCall
argument_list|()
argument_list|,
name|getMockServer
argument_list|()
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReadServerCalls ()
specifier|public
name|void
name|testReadServerCalls
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getMockServer
argument_list|()
operator|.
name|setDispatcher
argument_list|(
name|testData
operator|.
name|getDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|getMockAdlFileSystem
argument_list|()
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|getActualData
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|testData
operator|.
name|getActualData
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testData
operator|.
name|getExpectedNoNetworkCall
argument_list|()
argument_list|,
name|getMockServer
argument_list|()
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadFully ()
specifier|public
name|void
name|testReadFully
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getMockServer
argument_list|()
operator|.
name|setDispatcher
argument_list|(
name|testData
operator|.
name|getDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|getMockAdlFileSystem
argument_list|()
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|getActualData
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|testData
operator|.
name|getActualData
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|testData
operator|.
name|getActualData
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|expectedData
argument_list|,
literal|0
argument_list|,
name|expectedData
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|testData
operator|.
name|getActualData
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|testData
operator|.
name|isCheckOfNoOfCalls
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testData
operator|.
name|getExpectedNoNetworkCall
argument_list|()
argument_list|,
name|getMockServer
argument_list|()
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRandomPositionalReadUsingReadFully ()
specifier|public
name|void
name|testRandomPositionalReadUsingReadFully
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getMockServer
argument_list|()
operator|.
name|setDispatcher
argument_list|(
name|testData
operator|.
name|getDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|getMockAdlFileSystem
argument_list|()
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|actualData
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
operator|.
name|getActualData
argument_list|()
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testData
operator|.
name|getIntensityOfTest
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|offset
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|testData
operator|.
name|getActualData
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|testData
operator|.
name|getActualData
argument_list|()
operator|.
name|length
operator|-
name|offset
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|byte
index|[]
name|actualDataSubset
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|actualData
operator|.
name|reset
argument_list|()
expr_stmt|;
name|actualData
operator|.
name|skip
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|actualData
operator|.
name|read
argument_list|(
name|actualDataSubset
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|offset
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|actualDataSubset
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testData
operator|.
name|getIntensityOfTest
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|offset
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|testData
operator|.
name|getActualData
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|testData
operator|.
name|getActualData
argument_list|()
operator|.
name|length
operator|-
name|offset
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|byte
index|[]
name|actualDataSubset
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|actualData
operator|.
name|reset
argument_list|()
expr_stmt|;
name|actualData
operator|.
name|skip
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|actualData
operator|.
name|read
argument_list|(
name|actualDataSubset
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|offset
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|actualDataSubset
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|testData
operator|.
name|isCheckOfNoOfCalls
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testData
operator|.
name|getExpectedNoNetworkCall
argument_list|()
argument_list|,
name|getMockServer
argument_list|()
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

