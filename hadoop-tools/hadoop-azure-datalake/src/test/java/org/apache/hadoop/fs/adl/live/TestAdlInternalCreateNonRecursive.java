begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.adl.live
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|live
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|common
operator|.
name|Parallelized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Test createNonRecursive API.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parallelized
operator|.
name|class
argument_list|)
DECL|class|TestAdlInternalCreateNonRecursive
specifier|public
class|class
name|TestAdlInternalCreateNonRecursive
block|{
DECL|field|inputFileName
specifier|private
name|Path
name|inputFileName
decl_stmt|;
DECL|field|inputPermission
specifier|private
name|FsPermission
name|inputPermission
decl_stmt|;
DECL|field|inputOverride
specifier|private
name|boolean
name|inputOverride
decl_stmt|;
DECL|field|inputFileAlreadyExist
specifier|private
name|boolean
name|inputFileAlreadyExist
decl_stmt|;
DECL|field|inputParentAlreadyExist
specifier|private
name|boolean
name|inputParentAlreadyExist
decl_stmt|;
DECL|field|expectedExceptionType
specifier|private
name|Class
argument_list|<
name|IOException
argument_list|>
name|expectedExceptionType
decl_stmt|;
DECL|field|adlStore
specifier|private
name|FileSystem
name|adlStore
decl_stmt|;
DECL|method|TestAdlInternalCreateNonRecursive (String testScenario, String fileName, FsPermission permission, boolean override, boolean fileAlreadyExist, boolean parentAlreadyExist, Class<IOException> exceptionType)
specifier|public
name|TestAdlInternalCreateNonRecursive
parameter_list|(
name|String
name|testScenario
parameter_list|,
name|String
name|fileName
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|override
parameter_list|,
name|boolean
name|fileAlreadyExist
parameter_list|,
name|boolean
name|parentAlreadyExist
parameter_list|,
name|Class
argument_list|<
name|IOException
argument_list|>
name|exceptionType
parameter_list|)
block|{
comment|// Random parent path for each test so that parallel execution does not fail
comment|// other running test.
name|inputFileName
operator|=
operator|new
name|Path
argument_list|(
literal|"/test/createNonRecursive/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|inputPermission
operator|=
name|permission
expr_stmt|;
name|inputFileAlreadyExist
operator|=
name|fileAlreadyExist
expr_stmt|;
name|inputOverride
operator|=
name|override
expr_stmt|;
name|inputParentAlreadyExist
operator|=
name|parentAlreadyExist
expr_stmt|;
name|expectedExceptionType
operator|=
name|exceptionType
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
DECL|method|adlCreateNonRecursiveTestData ()
specifier|public
specifier|static
name|Collection
name|adlCreateNonRecursiveTestData
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
comment|/*       Test Data       File name, Permission, Override flag, File already exist, Parent       already exist       shouldCreateSucceed, expectedExceptionIfFileCreateFails        File already exist and Parent already exist are mutually exclusive.     */
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"CNR - When file do not exist."
block|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|null
block|}
block|,
block|{
literal|"CNR - When file exist. Override false"
block|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
name|FileAlreadyExistsException
operator|.
name|class
block|}
block|,
block|{
literal|"CNR - When file exist. Override true"
block|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|null
block|}
block|,
comment|//TODO: This test is skipped till the fixes are not made it to prod.
comment|/*{ "CNR - When parent do no exist.", UUID.randomUUID().toString(),             FsPermission.getFileDefault(), false, false, true, false,             IOException.class }*/
block|}
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|AdlStorageConfiguration
operator|.
name|isContractTestEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|adlStore
operator|=
name|AdlStorageConfiguration
operator|.
name|createStorageConnector
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateNonRecursiveFunctionality ()
specifier|public
name|void
name|testCreateNonRecursiveFunctionality
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputFileAlreadyExist
condition|)
block|{
name|FileSystem
operator|.
name|create
argument_list|(
name|adlStore
argument_list|,
name|inputFileName
argument_list|,
name|inputPermission
argument_list|)
expr_stmt|;
block|}
comment|// Mutually exclusive to inputFileAlreadyExist
if|if
condition|(
name|inputParentAlreadyExist
condition|)
block|{
name|adlStore
operator|.
name|mkdirs
argument_list|(
name|inputFileName
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adlStore
operator|.
name|delete
argument_list|(
name|inputFileName
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|adlStore
operator|.
name|createNonRecursive
argument_list|(
name|inputFileName
argument_list|,
name|inputPermission
argument_list|,
name|inputOverride
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|,
name|adlStore
operator|.
name|getDefaultReplication
argument_list|(
name|inputFileName
argument_list|)
argument_list|,
name|adlStore
operator|.
name|getDefaultBlockSize
argument_list|(
name|inputFileName
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectedExceptionType
operator|==
literal|null
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedExceptionType
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|expectedExceptionType
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"CreateNonRecursive should have failed with exception "
operator|+
name|expectedExceptionType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

