begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.adl.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|mockwebserver
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|mockwebserver
operator|.
name|MockResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|mockwebserver
operator|.
name|RecordedRequest
import|;
end_import

begin_import
import|import
name|okio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
operator|.
name|TestADLResponseData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Supporting class for mock test to validate Adls read operation.  */
end_comment

begin_class
DECL|class|TestDataForRead
specifier|public
class|class
name|TestDataForRead
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDataForRead
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|actualData
specifier|private
name|byte
index|[]
name|actualData
decl_stmt|;
DECL|field|responses
specifier|private
name|ArrayList
argument_list|<
name|ExpectedResponse
argument_list|>
name|responses
decl_stmt|;
DECL|field|dispatcher
specifier|private
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|intensityOfTest
specifier|private
name|int
name|intensityOfTest
decl_stmt|;
DECL|field|checkOfNoOfCalls
specifier|private
name|boolean
name|checkOfNoOfCalls
decl_stmt|;
DECL|field|expectedNoNetworkCall
specifier|private
name|int
name|expectedNoNetworkCall
decl_stmt|;
DECL|method|TestDataForRead (final byte[] actualData, int expectedNoNetworkCall, int intensityOfTest, boolean checkOfNoOfCalls)
specifier|public
name|TestDataForRead
parameter_list|(
specifier|final
name|byte
index|[]
name|actualData
parameter_list|,
name|int
name|expectedNoNetworkCall
parameter_list|,
name|int
name|intensityOfTest
parameter_list|,
name|boolean
name|checkOfNoOfCalls
parameter_list|)
block|{
name|this
operator|.
name|checkOfNoOfCalls
operator|=
name|checkOfNoOfCalls
expr_stmt|;
name|this
operator|.
name|actualData
operator|=
name|actualData
expr_stmt|;
name|responses
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExpectedResponse
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|expectedNoNetworkCall
operator|=
name|expectedNoNetworkCall
expr_stmt|;
name|this
operator|.
name|intensityOfTest
operator|=
name|intensityOfTest
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|Dispatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MockResponse
name|dispatch
parameter_list|(
name|RecordedRequest
name|recordedRequest
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|recordedRequest
operator|.
name|getRequestLine
argument_list|()
operator|.
name|contains
argument_list|(
literal|"op=GETFILESTATUS"
argument_list|)
condition|)
block|{
return|return
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getGetFileStatusJSONResponse
argument_list|(
name|actualData
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|recordedRequest
operator|.
name|getRequestLine
argument_list|()
operator|.
name|contains
argument_list|(
literal|"op=OPEN"
argument_list|)
condition|)
block|{
name|String
name|request
init|=
name|recordedRequest
operator|.
name|getRequestLine
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|byteCount
init|=
literal|0
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"offset=([0-9]+)"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"length=([0-9]+)"
argument_list|)
expr_stmt|;
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|byteCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Buffer
name|buf
init|=
operator|new
name|Buffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|write
argument_list|(
name|actualData
argument_list|,
name|offset
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|actualData
operator|.
name|length
operator|-
name|offset
argument_list|,
name|byteCount
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
operator|.
name|setChunkedBody
argument_list|(
name|buf
argument_list|,
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
return|;
block|}
return|return
operator|new
name|MockResponse
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"NOT SUPPORTED"
argument_list|)
operator|.
name|setResponseCode
argument_list|(
literal|501
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|isCheckOfNoOfCalls ()
specifier|public
name|boolean
name|isCheckOfNoOfCalls
parameter_list|()
block|{
return|return
name|checkOfNoOfCalls
return|;
block|}
DECL|method|getExpectedNoNetworkCall ()
specifier|public
name|int
name|getExpectedNoNetworkCall
parameter_list|()
block|{
return|return
name|expectedNoNetworkCall
return|;
block|}
DECL|method|getIntensityOfTest ()
specifier|public
name|int
name|getIntensityOfTest
parameter_list|()
block|{
return|return
name|intensityOfTest
return|;
block|}
DECL|method|getActualData ()
specifier|public
name|byte
index|[]
name|getActualData
parameter_list|()
block|{
return|return
name|actualData
return|;
block|}
DECL|method|getResponses ()
specifier|public
name|ArrayList
argument_list|<
name|ExpectedResponse
argument_list|>
name|getResponses
parameter_list|()
block|{
return|return
name|responses
return|;
block|}
DECL|method|getDispatcher ()
specifier|public
name|Dispatcher
name|getDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
end_class

end_unit

