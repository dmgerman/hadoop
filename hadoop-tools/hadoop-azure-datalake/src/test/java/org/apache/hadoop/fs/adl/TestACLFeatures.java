begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.adl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|mockwebserver
operator|.
name|MockResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Stub adl server and test acl data conversion within SDK and Hadoop adl  * client.  */
end_comment

begin_class
DECL|class|TestACLFeatures
specifier|public
class|class
name|TestACLFeatures
extends|extends
name|AdlMockWebServer
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testModifyAclEntries ()
specifier|public
name|void
name|testModifyAclEntries
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
name|AclEntry
operator|.
name|Builder
name|aclEntryBuilder
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|aclEntryBuilder
operator|.
name|setName
argument_list|(
literal|"hadoop"
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|aclEntryBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setName
argument_list|(
literal|"hdfs"
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|aclEntryBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|modifyAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|403
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getAccessControlException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|modifyAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testRemoveAclEntriesWithOnlyUsers ()
specifier|public
name|void
name|testRemoveAclEntriesWithOnlyUsers
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
name|AclEntry
operator|.
name|Builder
name|aclEntryBuilder
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|aclEntryBuilder
operator|.
name|setName
argument_list|(
literal|"hadoop"
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|aclEntryBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|removeAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|403
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getAccessControlException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|removeAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testRemoveAclEntries ()
specifier|public
name|void
name|testRemoveAclEntries
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
name|AclEntry
operator|.
name|Builder
name|aclEntryBuilder
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|aclEntryBuilder
operator|.
name|setName
argument_list|(
literal|"hadoop"
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|aclEntryBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setName
argument_list|(
literal|"hdfs"
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|aclEntryBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|removeAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|403
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getAccessControlException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|removeAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testRemoveDefaultAclEntries ()
specifier|public
name|void
name|testRemoveDefaultAclEntries
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|removeDefaultAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|403
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getAccessControlException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|removeDefaultAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testRemoveAcl ()
specifier|public
name|void
name|testRemoveAcl
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|removeAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|403
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getAccessControlException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|removeAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testSetAcl ()
specifier|public
name|void
name|testSetAcl
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
name|AclEntry
operator|.
name|Builder
name|aclEntryBuilder
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|aclEntryBuilder
operator|.
name|setName
argument_list|(
literal|"hadoop"
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|aclEntryBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setName
argument_list|(
literal|"hdfs"
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|aclEntryBuilder
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|aclEntryBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|setAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|403
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getAccessControlException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|setAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testCheckAccess ()
specifier|public
name|void
name|testCheckAccess
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|access
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|access
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|access
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|access
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|access
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|access
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|access
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|access
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|403
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getAccessControlException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|access
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testSetPermission ()
specifier|public
name|void
name|testSetPermission
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|403
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getAccessControlException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testSetOwner ()
specifier|public
name|void
name|testSetOwner
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|setOwner
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
literal|"hadoop"
argument_list|,
literal|"hdfs"
argument_list|)
expr_stmt|;
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|403
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getAccessControlException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|setOwner
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|,
literal|"hadoop"
argument_list|,
literal|"hdfs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getAclStatusAsExpected ()
specifier|public
name|void
name|getAclStatusAsExpected
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getGetAclStatusJSONResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AclStatus
name|aclStatus
init|=
name|getMockAdlFileSystem
argument_list|()
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aclStatus
operator|.
name|getGroup
argument_list|()
argument_list|,
literal|"supergroup"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aclStatus
operator|.
name|getOwner
argument_list|()
argument_list|,
literal|"hadoop"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|Short
operator|)
name|aclStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
literal|"775"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AclEntry
name|entry
range|:
name|aclStatus
operator|.
name|getEntries
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|entry
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"user:carla:rw-"
argument_list|)
operator|||
name|entry
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"group::r-x"
argument_list|)
operator|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected entry : "
operator|+
name|entry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|getAclStatusNotExists ()
specifier|public
name|void
name|getAclStatusNotExists
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|404
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getFileNotFoundException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testAclStatusDenied ()
specifier|public
name|void
name|testAclStatusDenied
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|getMockServer
argument_list|()
operator|.
name|enqueue
argument_list|(
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|403
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getAccessControlException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMockAdlFileSystem
argument_list|()
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1/test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

