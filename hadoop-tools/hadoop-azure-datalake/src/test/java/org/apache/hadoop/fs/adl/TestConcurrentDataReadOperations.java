begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.adl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|adl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|mockwebserver
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|mockwebserver
operator|.
name|MockResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|mockwebserver
operator|.
name|RecordedRequest
import|;
end_import

begin_import
import|import
name|okio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * This class is responsible for testing multiple threads trying to access same  * or multiple files from the offset.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestConcurrentDataReadOperations
specifier|public
class|class
name|TestConcurrentDataReadOperations
extends|extends
name|AdlMockWebServer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestConcurrentDataReadOperations
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|LOCK
specifier|private
specifier|static
specifier|final
name|Object
name|LOCK
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|commonHandle
specifier|private
specifier|static
name|FSDataInputStream
name|commonHandle
init|=
literal|null
decl_stmt|;
DECL|field|concurrencyLevel
specifier|private
name|int
name|concurrencyLevel
decl_stmt|;
DECL|method|TestConcurrentDataReadOperations (int concurrencyLevel)
specifier|public
name|TestConcurrentDataReadOperations
parameter_list|(
name|int
name|concurrencyLevel
parameter_list|)
block|{
name|this
operator|.
name|concurrencyLevel
operator|=
name|concurrencyLevel
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}"
argument_list|)
DECL|method|testDataNumberOfConcurrentRun ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|?
argument_list|>
name|testDataNumberOfConcurrentRun
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|1
block|}
block|,
block|{
literal|2
block|}
block|,
block|{
literal|3
block|}
block|,
block|{
literal|4
block|}
block|,
block|{
literal|5
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getRandomByteArrayData (int size)
specifier|public
specifier|static
name|byte
index|[]
name|getRandomByteArrayData
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
DECL|method|setDispatcher (final ArrayList<CreateTestData> testData)
specifier|private
name|void
name|setDispatcher
parameter_list|(
specifier|final
name|ArrayList
argument_list|<
name|CreateTestData
argument_list|>
name|testData
parameter_list|)
block|{
name|getMockServer
argument_list|()
operator|.
name|setDispatcher
argument_list|(
operator|new
name|Dispatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MockResponse
name|dispatch
parameter_list|(
name|RecordedRequest
name|recordedRequest
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|CreateTestData
name|currentRequest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CreateTestData
name|local
range|:
name|testData
control|)
block|{
if|if
condition|(
name|recordedRequest
operator|.
name|getPath
argument_list|()
operator|.
name|contains
argument_list|(
name|local
operator|.
name|path
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|currentRequest
operator|=
name|local
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|currentRequest
operator|==
literal|null
condition|)
block|{
operator|new
name|MockResponse
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Request data not found"
argument_list|)
operator|.
name|setResponseCode
argument_list|(
literal|501
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recordedRequest
operator|.
name|getRequestLine
argument_list|()
operator|.
name|contains
argument_list|(
literal|"op=GETFILESTATUS"
argument_list|)
condition|)
block|{
return|return
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
operator|.
name|setBody
argument_list|(
name|TestADLResponseData
operator|.
name|getGetFileStatusJSONResponse
argument_list|(
name|currentRequest
operator|.
name|data
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|recordedRequest
operator|.
name|getRequestLine
argument_list|()
operator|.
name|contains
argument_list|(
literal|"op=OPEN"
argument_list|)
condition|)
block|{
name|String
name|request
init|=
name|recordedRequest
operator|.
name|getRequestLine
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|byteCount
init|=
literal|0
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"offset=([0-9]+)"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"length=([0-9]+)"
argument_list|)
expr_stmt|;
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|byteCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Buffer
name|buf
init|=
operator|new
name|Buffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|write
argument_list|(
name|currentRequest
operator|.
name|data
argument_list|,
name|offset
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|currentRequest
operator|.
name|data
operator|.
name|length
operator|-
name|offset
argument_list|,
name|byteCount
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|MockResponse
argument_list|()
operator|.
name|setResponseCode
argument_list|(
literal|200
argument_list|)
operator|.
name|setChunkedBody
argument_list|(
name|buf
argument_list|,
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
return|;
block|}
return|return
operator|new
name|MockResponse
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"NOT SUPPORTED"
argument_list|)
operator|.
name|setResponseCode
argument_list|(
literal|501
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|resetHandle ()
specifier|public
name|void
name|resetHandle
parameter_list|()
block|{
name|commonHandle
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelReadOnDifferentStreams ()
specifier|public
name|void
name|testParallelReadOnDifferentStreams
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ArrayList
argument_list|<
name|CreateTestData
argument_list|>
name|createTestData
init|=
operator|new
name|ArrayList
argument_list|<
name|CreateTestData
argument_list|>
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|concurrencyLevel
condition|;
name|i
operator|++
control|)
block|{
name|CreateTestData
name|testData
init|=
operator|new
name|CreateTestData
argument_list|()
decl_stmt|;
name|testData
operator|.
name|set
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/concurrentRead/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|getRandomByteArrayData
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|1
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createTestData
operator|.
name|add
argument_list|(
name|testData
argument_list|)
expr_stmt|;
block|}
name|setDispatcher
argument_list|(
name|createTestData
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ReadTestData
argument_list|>
name|readTestData
init|=
operator|new
name|ArrayList
argument_list|<
name|ReadTestData
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CreateTestData
name|local
range|:
name|createTestData
control|)
block|{
name|ReadTestData
name|localReadData
init|=
operator|new
name|ReadTestData
argument_list|()
decl_stmt|;
name|localReadData
operator|.
name|set
argument_list|(
name|local
operator|.
name|path
argument_list|,
name|local
operator|.
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|readTestData
operator|.
name|add
argument_list|(
name|localReadData
argument_list|)
expr_stmt|;
block|}
name|runReadTest
argument_list|(
name|readTestData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelReadOnSameStreams ()
specifier|public
name|void
name|testParallelReadOnSameStreams
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ArrayList
argument_list|<
name|CreateTestData
argument_list|>
name|createTestData
init|=
operator|new
name|ArrayList
argument_list|<
name|CreateTestData
argument_list|>
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|CreateTestData
name|testData
init|=
operator|new
name|CreateTestData
argument_list|()
decl_stmt|;
name|testData
operator|.
name|set
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/concurrentRead/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|getRandomByteArrayData
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|createTestData
operator|.
name|add
argument_list|(
name|testData
argument_list|)
expr_stmt|;
block|}
name|setDispatcher
argument_list|(
name|createTestData
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ReadTestData
argument_list|>
name|readTestData
init|=
operator|new
name|ArrayList
argument_list|<
name|ReadTestData
argument_list|>
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|buffered
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|createTestData
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|data
argument_list|)
decl_stmt|;
name|ReadTestData
name|readInitially
init|=
operator|new
name|ReadTestData
argument_list|()
decl_stmt|;
name|byte
index|[]
name|initialData
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
name|buffered
operator|.
name|read
argument_list|(
name|initialData
argument_list|)
expr_stmt|;
name|readInitially
operator|.
name|set
argument_list|(
name|createTestData
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|path
argument_list|,
name|initialData
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|readTestData
operator|.
name|add
argument_list|(
name|readInitially
argument_list|)
expr_stmt|;
name|runReadTest
argument_list|(
name|readTestData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|readTestData
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|concurrencyLevel
operator|*
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|ReadTestData
name|localReadData
init|=
operator|new
name|ReadTestData
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|random
operator|.
name|nextInt
argument_list|(
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|length
init|=
literal|1024
operator|*
literal|1024
operator|-
name|offset
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|buffered
operator|.
name|reset
argument_list|()
expr_stmt|;
name|buffered
operator|.
name|skip
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|buffered
operator|.
name|read
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
name|localReadData
operator|.
name|set
argument_list|(
name|createTestData
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|path
argument_list|,
name|expectedData
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|readTestData
operator|.
name|add
argument_list|(
name|localReadData
argument_list|)
expr_stmt|;
block|}
name|runReadTest
argument_list|(
name|readTestData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|runReadTest (ArrayList<ReadTestData> testData, boolean useSameStream)
name|void
name|runReadTest
parameter_list|(
name|ArrayList
argument_list|<
name|ReadTestData
argument_list|>
name|testData
parameter_list|,
name|boolean
name|useSameStream
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|testData
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Future
index|[]
name|subtasks
init|=
operator|new
name|Future
index|[
name|testData
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testData
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|subtasks
index|[
name|i
index|]
operator|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|ReadConcurrentRunnable
argument_list|(
name|testData
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|data
argument_list|,
name|testData
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|path
argument_list|,
name|testData
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|offset
argument_list|,
name|useSameStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// wait until all tasks are finished
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|120
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testData
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|subtasks
index|[
name|i
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ReadTestData
class|class
name|ReadTestData
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|data
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|method|set (Path filePath, byte[] dataToBeRead, int fromOffset)
specifier|public
name|void
name|set
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|byte
index|[]
name|dataToBeRead
parameter_list|,
name|int
name|fromOffset
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|filePath
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|dataToBeRead
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|fromOffset
expr_stmt|;
block|}
block|}
DECL|class|CreateTestData
class|class
name|CreateTestData
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|data
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
DECL|method|set (Path filePath, byte[] dataToBeWritten)
specifier|public
name|void
name|set
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|byte
index|[]
name|dataToBeWritten
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|filePath
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|dataToBeWritten
expr_stmt|;
block|}
block|}
DECL|class|ReadConcurrentRunnable
class|class
name|ReadConcurrentRunnable
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|field|expectedData
specifier|private
name|byte
index|[]
name|expectedData
decl_stmt|;
DECL|field|useSameStream
specifier|private
name|boolean
name|useSameStream
decl_stmt|;
DECL|method|ReadConcurrentRunnable (byte[] expectedData, Path path, int offset, boolean useSameStream)
specifier|public
name|ReadConcurrentRunnable
parameter_list|(
name|byte
index|[]
name|expectedData
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|offset
parameter_list|,
name|boolean
name|useSameStream
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|expectedData
operator|=
name|expectedData
expr_stmt|;
name|this
operator|.
name|useSameStream
operator|=
name|useSameStream
expr_stmt|;
block|}
DECL|method|call ()
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|FSDataInputStream
name|in
decl_stmt|;
if|if
condition|(
name|useSameStream
condition|)
block|{
synchronized|synchronized
init|(
name|LOCK
init|)
block|{
if|if
condition|(
name|commonHandle
operator|==
literal|null
condition|)
block|{
name|commonHandle
operator|=
name|getMockAdlFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|in
operator|=
name|commonHandle
expr_stmt|;
block|}
block|}
else|else
block|{
name|in
operator|=
name|getMockAdlFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|actualData
init|=
operator|new
name|byte
index|[
name|expectedData
operator|.
name|length
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|offset
argument_list|,
name|actualData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Path :"
operator|+
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|" did not match."
argument_list|,
name|expectedData
argument_list|,
name|actualData
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useSameStream
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

