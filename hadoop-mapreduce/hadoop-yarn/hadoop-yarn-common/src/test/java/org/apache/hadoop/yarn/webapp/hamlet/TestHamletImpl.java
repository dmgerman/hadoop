begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp.hamlet
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|HamletImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|HamletSpec
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestHamletImpl
specifier|public
class|class
name|TestHamletImpl
block|{
comment|/**    * Test the generic implementation methods    * @see TestHamlet for Hamlet syntax    */
DECL|method|testGeneric ()
annotation|@
name|Test
specifier|public
name|void
name|testGeneric
parameter_list|()
block|{
name|PrintWriter
name|out
init|=
name|spy
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
decl_stmt|;
name|HamletImpl
name|hi
init|=
operator|new
name|HamletImpl
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|hi
operator|.
name|root
argument_list|(
literal|"start"
argument_list|)
operator|.
name|_attr
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|_
argument_list|(
literal|"start text"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"sub"
argument_list|)
operator|.
name|_attr
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|_
argument_list|(
literal|"sub text"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|elem
argument_list|(
literal|"sub1"
argument_list|)
operator|.
name|_noEndTag
argument_list|()
operator|.
name|_attr
argument_list|(
literal|"boolean"
argument_list|,
literal|null
argument_list|)
operator|.
name|_
argument_list|(
literal|"sub1text"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|(
literal|"start text2"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"pre"
argument_list|)
operator|.
name|_pre
argument_list|()
operator|.
name|_
argument_list|(
literal|"pre text"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"i"
argument_list|)
operator|.
name|_inline
argument_list|()
operator|.
name|_
argument_list|(
literal|"inline"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|elem
argument_list|(
literal|"i"
argument_list|)
operator|.
name|_inline
argument_list|()
operator|.
name|_
argument_list|(
literal|"inline after pre"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|(
literal|"start text3"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"sub2"
argument_list|)
operator|.
name|_
argument_list|(
literal|"sub2text"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|elem
argument_list|(
literal|"sub3"
argument_list|)
operator|.
name|_noEndTag
argument_list|()
operator|.
name|_
argument_list|(
literal|"sub3text"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|elem
argument_list|(
literal|"sub4"
argument_list|)
operator|.
name|_noEndTag
argument_list|()
operator|.
name|elem
argument_list|(
literal|"i"
argument_list|)
operator|.
name|_inline
argument_list|()
operator|.
name|_
argument_list|(
literal|"inline"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|(
literal|"sub4text"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hi
operator|.
name|nestLevel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|hi
operator|.
name|indents
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"<start"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|print
argument_list|(
literal|" name=\"value\""
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|" boolean"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"</start>"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|print
argument_list|(
literal|"</sub1>"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|print
argument_list|(
literal|"</sub3>"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|print
argument_list|(
literal|"</sub4>"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetSelector ()
annotation|@
name|Test
specifier|public
name|void
name|testSetSelector
parameter_list|()
block|{
name|CoreAttrs
name|e
init|=
name|mock
argument_list|(
name|CoreAttrs
operator|.
name|class
argument_list|)
decl_stmt|;
name|HamletImpl
operator|.
name|setSelector
argument_list|(
name|e
argument_list|,
literal|"#id.class"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|e
argument_list|)
operator|.
name|$id
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|e
argument_list|)
operator|.
name|$class
argument_list|(
literal|"class"
argument_list|)
expr_stmt|;
name|H1
name|t
init|=
name|mock
argument_list|(
name|H1
operator|.
name|class
argument_list|)
decl_stmt|;
name|HamletImpl
operator|.
name|setSelector
argument_list|(
name|t
argument_list|,
literal|"#id.class"
argument_list|)
operator|.
name|_
argument_list|(
literal|"heading"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|t
argument_list|)
operator|.
name|$id
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|t
argument_list|)
operator|.
name|$class
argument_list|(
literal|"class"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|t
argument_list|)
operator|.
name|_
argument_list|(
literal|"heading"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetLinkHref ()
annotation|@
name|Test
specifier|public
name|void
name|testSetLinkHref
parameter_list|()
block|{
name|LINK
name|link
init|=
name|mock
argument_list|(
name|LINK
operator|.
name|class
argument_list|)
decl_stmt|;
name|HamletImpl
operator|.
name|setLinkHref
argument_list|(
name|link
argument_list|,
literal|"uri"
argument_list|)
expr_stmt|;
name|HamletImpl
operator|.
name|setLinkHref
argument_list|(
name|link
argument_list|,
literal|"style.css"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|link
argument_list|)
operator|.
name|$href
argument_list|(
literal|"uri"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|link
argument_list|)
operator|.
name|$rel
argument_list|(
literal|"stylesheet"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|link
argument_list|)
operator|.
name|$href
argument_list|(
literal|"style.css"
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|link
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetScriptSrc ()
annotation|@
name|Test
specifier|public
name|void
name|testSetScriptSrc
parameter_list|()
block|{
name|SCRIPT
name|script
init|=
name|mock
argument_list|(
name|SCRIPT
operator|.
name|class
argument_list|)
decl_stmt|;
name|HamletImpl
operator|.
name|setScriptSrc
argument_list|(
name|script
argument_list|,
literal|"uri"
argument_list|)
expr_stmt|;
name|HamletImpl
operator|.
name|setScriptSrc
argument_list|(
name|script
argument_list|,
literal|"script.js"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|script
argument_list|)
operator|.
name|$src
argument_list|(
literal|"uri"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|script
argument_list|)
operator|.
name|$type
argument_list|(
literal|"text/javascript"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|script
argument_list|)
operator|.
name|$src
argument_list|(
literal|"script.js"
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

