begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp.view
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|JQueryUI
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * JSON helpers  */
end_comment

begin_class
DECL|class|Jsons
specifier|public
class|class
name|Jsons
block|{
DECL|field|_SEP
specifier|public
specifier|static
specifier|final
name|String
name|_SEP
init|=
literal|"\",\""
decl_stmt|;
DECL|method|appendProgressBar (PrintWriter out, String pct)
specifier|public
specifier|static
name|PrintWriter
name|appendProgressBar
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|pct
parameter_list|)
block|{
return|return
name|out
operator|.
name|append
argument_list|(
literal|"<br title='"
argument_list|)
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"<div class='"
argument_list|)
operator|.
name|append
argument_list|(
name|C_PROGRESSBAR
argument_list|)
operator|.
name|append
argument_list|(
literal|"' title='"
argument_list|)
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
operator|.
name|append
argument_list|(
literal|"'><div class='"
argument_list|)
operator|.
name|append
argument_list|(
name|C_PROGRESSBAR_VALUE
argument_list|)
operator|.
name|append
argument_list|(
literal|"' style='width: "
argument_list|)
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"%'>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"<\\/div><\\/div>"
argument_list|)
return|;
block|}
DECL|method|appendProgressBar (PrintWriter out, float progress)
specifier|public
specifier|static
name|PrintWriter
name|appendProgressBar
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|float
name|progress
parameter_list|)
block|{
return|return
name|appendProgressBar
argument_list|(
name|out
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
name|progress
operator|*
literal|100
argument_list|)
argument_list|)
return|;
block|}
DECL|method|appendSortable (PrintWriter out, Object value)
specifier|public
specifier|static
name|PrintWriter
name|appendSortable
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|out
operator|.
name|append
argument_list|(
literal|"<br title='"
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
return|;
block|}
DECL|method|appendLink (PrintWriter out, Object anchor, String prefix, String... parts)
specifier|public
specifier|static
name|PrintWriter
name|appendLink
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|Object
name|anchor
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
modifier|...
name|parts
parameter_list|)
block|{
name|String
name|anchorText
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|anchor
argument_list|)
decl_stmt|;
return|return
name|out
operator|.
name|append
argument_list|(
literal|"<a href='"
argument_list|)
operator|.
name|append
argument_list|(
name|anchor
operator|==
literal|null
condition|?
literal|"#"
else|:
name|ujoin
argument_list|(
name|prefix
argument_list|,
name|parts
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|anchorText
argument_list|)
operator|.
name|append
argument_list|(
literal|"<\\/a>"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

