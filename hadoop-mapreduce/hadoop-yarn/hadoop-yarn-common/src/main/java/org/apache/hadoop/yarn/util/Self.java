begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Some utilities for introspection  */
end_comment

begin_class
DECL|class|Self
specifier|public
class|class
name|Self
block|{
DECL|field|firstTime
specifier|private
specifier|static
name|boolean
name|firstTime
init|=
literal|true
decl_stmt|;
DECL|field|isUnitTest
specifier|private
specifier|static
name|boolean
name|isUnitTest
init|=
literal|false
decl_stmt|;
DECL|field|isJUnitTest
specifier|private
specifier|static
name|boolean
name|isJUnitTest
init|=
literal|false
decl_stmt|;
DECL|method|isUnitTest ()
specifier|public
specifier|synchronized
specifier|static
name|boolean
name|isUnitTest
parameter_list|()
block|{
name|detect
argument_list|()
expr_stmt|;
return|return
name|isUnitTest
return|;
block|}
DECL|method|isJUnitTest ()
specifier|public
specifier|synchronized
specifier|static
name|boolean
name|isJUnitTest
parameter_list|()
block|{
name|detect
argument_list|()
expr_stmt|;
return|return
name|isJUnitTest
return|;
block|}
DECL|method|detect ()
specifier|private
specifier|synchronized
specifier|static
name|void
name|detect
parameter_list|()
block|{
if|if
condition|(
operator|!
name|firstTime
condition|)
block|{
return|return;
block|}
name|firstTime
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|StackTraceElement
name|e
range|:
operator|new
name|Throwable
argument_list|()
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
name|String
name|className
init|=
name|e
operator|.
name|getClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|startsWith
argument_list|(
literal|"org.junit"
argument_list|)
condition|)
block|{
name|isUnitTest
operator|=
name|isJUnitTest
operator|=
literal|true
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|className
operator|.
name|startsWith
argument_list|(
literal|"org.apache.maven.surefire"
argument_list|)
condition|)
block|{
name|isUnitTest
operator|=
literal|true
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
end_class

end_unit

