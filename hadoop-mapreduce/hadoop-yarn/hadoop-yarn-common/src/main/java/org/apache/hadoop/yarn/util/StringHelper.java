begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Common string manipulation helpers  */
end_comment

begin_class
DECL|class|StringHelper
specifier|public
specifier|final
class|class
name|StringHelper
block|{
comment|// Common joiners to avoid per join creation of joiners
DECL|field|SSV_JOINER
specifier|public
specifier|static
specifier|final
name|Joiner
name|SSV_JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
DECL|field|CSV_JOINER
specifier|public
specifier|static
specifier|final
name|Joiner
name|CSV_JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
decl_stmt|;
DECL|field|JOINER
specifier|public
specifier|static
specifier|final
name|Joiner
name|JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|_JOINER
specifier|public
specifier|static
specifier|final
name|Joiner
name|_JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
DECL|field|PATH_JOINER
specifier|public
specifier|static
specifier|final
name|Joiner
name|PATH_JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
DECL|field|PATH_ARG_JOINER
specifier|public
specifier|static
specifier|final
name|Joiner
name|PATH_ARG_JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"/:"
argument_list|)
decl_stmt|;
DECL|field|DOT_JOINER
specifier|public
specifier|static
specifier|final
name|Joiner
name|DOT_JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
DECL|field|SSV_SPLITTER
specifier|public
specifier|static
specifier|final
name|Splitter
name|SSV_SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|' '
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
decl_stmt|;
DECL|field|_SPLITTER
specifier|public
specifier|static
specifier|final
name|Splitter
name|_SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'_'
argument_list|)
operator|.
name|trimResults
argument_list|()
decl_stmt|;
DECL|field|ABS_URL_RE
specifier|private
specifier|static
specifier|final
name|Pattern
name|ABS_URL_RE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(?:\\w+:)?//"
argument_list|)
decl_stmt|;
comment|/**    * Join on space.    * @param args to join    * @return args joined by space    */
DECL|method|sjoin (Object... args)
specifier|public
specifier|static
name|String
name|sjoin
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|SSV_JOINER
operator|.
name|join
argument_list|(
name|args
argument_list|)
return|;
block|}
comment|/**    * Join on comma.    * @param args to join    * @return args joined by comma    */
DECL|method|cjoin (Object... args)
specifier|public
specifier|static
name|String
name|cjoin
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|CSV_JOINER
operator|.
name|join
argument_list|(
name|args
argument_list|)
return|;
block|}
comment|/**    * Join on dot    * @param args to join    * @return args joined by dot    */
DECL|method|djoin (Object... args)
specifier|public
specifier|static
name|String
name|djoin
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|DOT_JOINER
operator|.
name|join
argument_list|(
name|args
argument_list|)
return|;
block|}
comment|/**    * Join on underscore    * @param args to join    * @return args joined underscore    */
DECL|method|_join (Object... args)
specifier|public
specifier|static
name|String
name|_join
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|_JOINER
operator|.
name|join
argument_list|(
name|args
argument_list|)
return|;
block|}
comment|/**    * Join on slash    * @param args to join    * @return args joined with slash    */
DECL|method|pjoin (Object... args)
specifier|public
specifier|static
name|String
name|pjoin
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|PATH_JOINER
operator|.
name|join
argument_list|(
name|args
argument_list|)
return|;
block|}
comment|/**    * Join on slash& colon (e.g., path args in routing spec)    * @param args to join    * @return args joined with /:    */
DECL|method|pajoin (Object... args)
specifier|public
specifier|static
name|String
name|pajoin
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|PATH_ARG_JOINER
operator|.
name|join
argument_list|(
name|args
argument_list|)
return|;
block|}
comment|/**    * Join without separator    * @param args    * @return joined args with no separator    */
DECL|method|join (Object... args)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|JOINER
operator|.
name|join
argument_list|(
name|args
argument_list|)
return|;
block|}
comment|/**    * Join with a separator    * @param sep the separator    * @param args to join    * @return args joined with a separator    */
DECL|method|joins (String sep, Object...args)
specifier|public
specifier|static
name|String
name|joins
parameter_list|(
name|String
name|sep
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
name|sep
argument_list|)
operator|.
name|join
argument_list|(
name|args
argument_list|)
return|;
block|}
comment|/**    * Split on space& trim results.    * @param s the string to split    * @return an iterable of strings    */
DECL|method|split (CharSequence s)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|split
parameter_list|(
name|CharSequence
name|s
parameter_list|)
block|{
return|return
name|SSV_SPLITTER
operator|.
name|split
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**    * Split on _& trim results    * @param s the string to split    * @return an iterable of strings    */
DECL|method|_split (CharSequence s)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|_split
parameter_list|(
name|CharSequence
name|s
parameter_list|)
block|{
return|return
name|_SPLITTER
operator|.
name|split
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**    * Check whether a url is absolute or note    * @param url to check    * @return true if url starts with scheme:// or //    */
DECL|method|isAbsUrl (CharSequence url)
specifier|public
specifier|static
name|boolean
name|isAbsUrl
parameter_list|(
name|CharSequence
name|url
parameter_list|)
block|{
return|return
name|ABS_URL_RE
operator|.
name|matcher
argument_list|(
name|url
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
comment|/**    * Join url components    * @param pathPrefix for relative urls    * @param args url components to join    * @return an url string    */
DECL|method|ujoin (String pathPrefix, String... args)
specifier|public
specifier|static
name|String
name|ujoin
parameter_list|(
name|String
name|pathPrefix
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|args
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|||
name|isAbsUrl
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|pathPrefix
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|percent (double value)
specifier|public
specifier|static
name|String
name|percent
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%.2f"
argument_list|,
name|value
operator|*
literal|100
argument_list|)
return|;
block|}
block|}
end_class

end_unit

