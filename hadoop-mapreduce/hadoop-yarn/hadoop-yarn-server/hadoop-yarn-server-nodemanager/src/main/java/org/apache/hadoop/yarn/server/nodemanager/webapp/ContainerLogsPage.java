begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMConfig
operator|.
name|DEFAULT_NM_LOG_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMConfig
operator|.
name|NM_LOG_DIR
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|SubView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|DIV
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
DECL|class|ContainerLogsPage
specifier|public
class|class
name|ContainerLogsPage
extends|extends
name|NMView
block|{
annotation|@
name|Override
DECL|method|content ()
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|SubView
argument_list|>
name|content
parameter_list|()
block|{
return|return
name|ContainersLogsBlock
operator|.
name|class
return|;
block|}
DECL|class|ContainersLogsBlock
specifier|public
specifier|static
class|class
name|ContainersLogsBlock
extends|extends
name|HtmlBlock
implements|implements
name|NMWebParams
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|logsSelector
specifier|private
specifier|final
name|LocalDirAllocator
name|logsSelector
decl_stmt|;
DECL|field|nmContext
specifier|private
specifier|final
name|Context
name|nmContext
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|ContainersLogsBlock (Configuration conf, Context context)
specifier|public
name|ContainersLogsBlock
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|logsSelector
operator|=
operator|new
name|LocalDirAllocator
argument_list|(
name|NMConfig
operator|.
name|NM_LOG_DIR
argument_list|)
expr_stmt|;
name|this
operator|.
name|nmContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|recordFactory
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|DIV
argument_list|<
name|Hamlet
argument_list|>
name|div
init|=
name|html
operator|.
name|div
argument_list|(
literal|"#content"
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|this
operator|.
name|recordFactory
argument_list|,
name|$
argument_list|(
name|CONTAINER_ID
argument_list|)
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|this
operator|.
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
name|div
operator|.
name|h1
argument_list|(
literal|"Unknown container. Container is either not yet running or "
operator|+
literal|"has already completed or "
operator|+
literal|"doesn't belong to this node at all."
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|LOCALIZING
argument_list|)
operator|.
name|contains
argument_list|(
name|container
operator|.
name|getContainerState
argument_list|()
argument_list|)
condition|)
block|{
name|div
operator|.
name|h1
argument_list|(
literal|"Container is not yet running. Current state is "
operator|+
name|container
operator|.
name|getContainerState
argument_list|()
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|)
operator|.
name|contains
argument_list|(
name|container
operator|.
name|getContainerState
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|$
argument_list|(
name|CONTAINER_LOG_TYPE
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|logFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|logFile
operator|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|logsSelector
operator|.
name|getLocalPathToRead
argument_list|(
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|containerId
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|$
argument_list|(
name|CONTAINER_ID
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|$
argument_list|(
name|CONTAINER_LOG_TYPE
argument_list|)
argument_list|,
name|this
operator|.
name|conf
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|div
operator|.
name|h1
argument_list|(
literal|"Cannot find this log on the local disk."
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|div
operator|.
name|h1
argument_list|(
name|logFile
operator|==
literal|null
condition|?
literal|"Unknown LogFile"
else|:
name|logFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|$
argument_list|(
literal|"start"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|4
operator|*
literal|1024
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|$
argument_list|(
literal|"start"
argument_list|)
argument_list|)
decl_stmt|;
name|start
operator|=
name|start
operator|<
literal|0
condition|?
name|logFile
operator|.
name|length
argument_list|()
operator|+
name|start
else|:
name|start
expr_stmt|;
name|start
operator|=
name|start
operator|<
literal|0
condition|?
literal|0
else|:
name|start
expr_stmt|;
name|long
name|end
init|=
name|$
argument_list|(
literal|"end"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
name|logFile
operator|.
name|length
argument_list|()
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|$
argument_list|(
literal|"end"
argument_list|)
argument_list|)
decl_stmt|;
name|end
operator|=
name|end
operator|<
literal|0
condition|?
name|logFile
operator|.
name|length
argument_list|()
operator|+
name|end
else|:
name|end
expr_stmt|;
name|end
operator|=
name|end
operator|<
literal|0
condition|?
name|logFile
operator|.
name|length
argument_list|()
else|:
name|end
expr_stmt|;
if|if
condition|(
name|start
operator|>
name|end
condition|)
block|{
name|writer
argument_list|()
operator|.
name|write
argument_list|(
literal|"Invalid start and end values!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|long
name|toRead
init|=
name|end
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|toRead
operator|<
name|logFile
operator|.
name|length
argument_list|()
condition|)
block|{
name|div
operator|.
name|_
argument_list|(
literal|"Showing "
operator|+
name|toRead
operator|+
literal|" bytes. Click "
argument_list|)
operator|.
name|a
argument_list|(
name|url
argument_list|(
literal|"containerlogs"
argument_list|,
name|$
argument_list|(
name|CONTAINER_ID
argument_list|)
argument_list|,
name|logFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|"here"
argument_list|)
operator|.
name|_
argument_list|(
literal|" for full log"
argument_list|)
operator|.
name|br
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
comment|// TODO: Use secure IO Utils to avoid symlink attacks.
comment|//TODO Fix findBugs close warning along with IOUtils change
name|FileReader
name|reader
init|=
operator|new
name|FileReader
argument_list|(
name|logFile
argument_list|)
decl_stmt|;
name|char
index|[]
name|cbuf
init|=
operator|new
name|char
index|[
literal|65536
index|]
decl_stmt|;
name|reader
operator|.
name|skip
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
name|int
name|totalRead
init|=
literal|0
decl_stmt|;
name|writer
argument_list|()
operator|.
name|write
argument_list|(
literal|"<pre>"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|reader
operator|.
name|read
argument_list|(
name|cbuf
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|toRead
argument_list|)
operator|)
operator|>
literal|0
operator|&&
name|totalRead
operator|<
operator|(
name|end
operator|-
name|start
operator|)
condition|)
block|{
name|writer
argument_list|()
operator|.
name|write
argument_list|(
name|cbuf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// TODO: HTMl Quoting?
name|totalRead
operator|+=
name|len
expr_stmt|;
name|toRead
operator|=
name|toRead
operator|-
name|totalRead
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
argument_list|()
operator|.
name|write
argument_list|(
literal|"</pre>"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|writer
argument_list|()
operator|.
name|write
argument_list|(
literal|"Exception reading log-file "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|div
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Just print out the log-types
name|List
argument_list|<
name|File
argument_list|>
name|containerLogsDirs
init|=
name|getContainerLogDirs
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|containerLogsDir
range|:
name|containerLogsDirs
control|)
block|{
for|for
control|(
name|File
name|logFile
range|:
name|containerLogsDir
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|div
operator|.
name|p
argument_list|()
operator|.
name|a
argument_list|(
name|url
argument_list|(
literal|"containerlogs"
argument_list|,
name|$
argument_list|(
name|CONTAINER_ID
argument_list|)
argument_list|,
name|logFile
operator|.
name|getName
argument_list|()
argument_list|,
literal|"?start=-4076"
argument_list|)
argument_list|,
name|logFile
operator|.
name|getName
argument_list|()
operator|+
literal|" : Total file length is "
operator|+
name|logFile
operator|.
name|length
argument_list|()
operator|+
literal|" bytes."
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
name|div
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|div
operator|.
name|h1
argument_list|(
literal|"Container is no longer running.."
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|List
argument_list|<
name|File
argument_list|>
DECL|method|getContainerLogDirs (Configuration conf, ContainerId containerId)
name|getContainerLogDirs
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|String
index|[]
name|logDirs
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|NM_LOG_DIR
argument_list|,
name|DEFAULT_NM_LOG_DIR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|containerLogDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|(
name|logDirs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|logDir
range|:
name|logDirs
control|)
block|{
name|String
name|appIdStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|containerId
operator|.
name|getAppId
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|appLogDir
init|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|appIdStr
argument_list|)
decl_stmt|;
name|String
name|containerIdStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|containerLogDirs
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|appLogDir
argument_list|,
name|containerIdStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|containerLogDirs
return|;
block|}
block|}
block|}
end_class

end_unit

