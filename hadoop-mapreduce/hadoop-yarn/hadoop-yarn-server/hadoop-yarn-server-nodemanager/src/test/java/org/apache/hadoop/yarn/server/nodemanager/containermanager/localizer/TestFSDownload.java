begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|FSDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestFSDownload
specifier|public
class|class
name|TestFSDownload
block|{
annotation|@
name|AfterClass
DECL|method|deleteTestDir ()
specifier|public
specifier|static
name|void
name|deleteTestDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FileContext
name|fs
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestFSDownload
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|field|recordFactory
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|createFile (FileContext files, Path p, int len, Random r)
specifier|static
name|LocalResource
name|createFile
parameter_list|(
name|FileContext
name|files
parameter_list|,
name|Path
name|p
parameter_list|,
name|int
name|len
parameter_list|,
name|Random
name|r
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|out
operator|=
name|files
operator|.
name|create
argument_list|(
name|p
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|OVERWRITE
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LocalResource
name|ret
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setResource
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSize
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setTimestamp
argument_list|(
name|files
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Test
DECL|method|testDownload ()
specifier|public
name|void
name|testDownload
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileContext
name|files
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
name|files
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestFSDownload
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|files
operator|.
name|mkdir
argument_list|(
name|basedir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|TestFSDownload
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|basedir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|sharedSeed
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|rand
operator|.
name|setSeed
argument_list|(
name|sharedSeed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|sharedSeed
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|LocalResource
argument_list|,
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|>
name|pending
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResource
argument_list|,
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ExecutorService
name|exec
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|LocalDirAllocator
name|dirs
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|TestFSDownload
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
index|[]
name|sizes
init|=
operator|new
name|int
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|sizes
index|[
name|i
index|]
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|512
argument_list|)
operator|+
literal|512
expr_stmt|;
name|LocalResource
name|rsrc
init|=
name|createFile
argument_list|(
name|files
argument_list|,
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|sizes
index|[
name|i
index|]
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|FSDownload
name|fsd
init|=
operator|new
name|FSDownload
argument_list|(
name|files
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|dirs
argument_list|,
name|rsrc
argument_list|,
operator|new
name|Random
argument_list|(
name|sharedSeed
argument_list|)
argument_list|)
decl_stmt|;
name|pending
operator|.
name|put
argument_list|(
name|rsrc
argument_list|,
name|exec
operator|.
name|submit
argument_list|(
name|fsd
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|LocalResource
argument_list|,
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|>
name|p
range|:
name|pending
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Path
name|localized
init|=
name|p
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sizes
index|[
name|Integer
operator|.
name|valueOf
argument_list|(
name|localized
operator|.
name|getName
argument_list|()
argument_list|)
index|]
argument_list|,
name|p
operator|.
name|getKey
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed exec"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|exec
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

