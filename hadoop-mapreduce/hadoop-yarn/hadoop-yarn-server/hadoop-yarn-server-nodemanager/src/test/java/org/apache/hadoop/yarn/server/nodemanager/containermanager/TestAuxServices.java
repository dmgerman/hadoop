begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestAuxServices
specifier|public
class|class
name|TestAuxServices
block|{
DECL|class|LightService
specifier|static
class|class
name|LightService
extends|extends
name|AbstractService
implements|implements
name|AuxServices
operator|.
name|AuxiliaryService
block|{
DECL|field|idef
specifier|private
specifier|final
name|char
name|idef
decl_stmt|;
DECL|field|expected_appId
specifier|private
specifier|final
name|int
name|expected_appId
decl_stmt|;
DECL|field|remaining_init
specifier|private
name|int
name|remaining_init
decl_stmt|;
DECL|field|remaining_stop
specifier|private
name|int
name|remaining_stop
decl_stmt|;
DECL|method|LightService (String name, char idef, int expected_appId)
name|LightService
parameter_list|(
name|String
name|name
parameter_list|,
name|char
name|idef
parameter_list|,
name|int
name|expected_appId
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|idef
operator|=
name|idef
expr_stmt|;
name|this
operator|.
name|expected_appId
operator|=
name|expected_appId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|remaining_init
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|idef
operator|+
literal|".expected.init"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|remaining_stop
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|idef
operator|+
literal|".expected.stop"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remaining_init
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remaining_stop
argument_list|)
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initApp (String user, ApplicationId appId, ByteBuffer data)
specifier|public
name|void
name|initApp
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|ByteBuffer
name|data
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|idef
argument_list|,
name|data
operator|.
name|getChar
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected_appId
argument_list|,
name|data
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected_appId
argument_list|,
name|appId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stopApp (ApplicationId appId)
specifier|public
name|void
name|stopApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected_appId
argument_list|,
name|appId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ServiceA
specifier|static
class|class
name|ServiceA
extends|extends
name|LightService
block|{
DECL|method|ServiceA ()
specifier|public
name|ServiceA
parameter_list|()
block|{
name|super
argument_list|(
literal|"A"
argument_list|,
literal|'A'
argument_list|,
literal|65
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ServiceB
specifier|static
class|class
name|ServiceB
extends|extends
name|LightService
block|{
DECL|method|ServiceB ()
specifier|public
name|ServiceB
parameter_list|()
block|{
name|super
argument_list|(
literal|"B"
argument_list|,
literal|'B'
argument_list|,
literal|66
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAuxEventDispatch ()
specifier|public
name|void
name|testAuxEventDispatch
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|AuxServices
operator|.
name|AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Asrv"
block|,
literal|"Bsrv"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AuxServices
operator|.
name|AUX_SERVICE_CLASS_FMT
argument_list|,
literal|"Asrv"
argument_list|)
argument_list|,
name|ServiceA
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AuxServices
operator|.
name|AUX_SERVICE_CLASS_FMT
argument_list|,
literal|"Bsrv"
argument_list|)
argument_list|,
name|ServiceB
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"A.expected.init"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"B.expected.stop"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|AuxServices
name|aux
init|=
operator|new
name|AuxServices
argument_list|()
decl_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|appId
operator|.
name|setId
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|buf
operator|.
name|putChar
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putInt
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|AuxServicesEvent
name|event
init|=
operator|new
name|AuxServicesEvent
argument_list|(
name|AuxServicesEventType
operator|.
name|APPLICATION_INIT
argument_list|,
literal|"user0"
argument_list|,
name|appId
argument_list|,
literal|"Asrv"
argument_list|,
name|buf
argument_list|)
decl_stmt|;
name|aux
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|appId
operator|.
name|setId
argument_list|(
literal|66
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|AuxServicesEvent
argument_list|(
name|AuxServicesEventType
operator|.
name|APPLICATION_STOP
argument_list|,
literal|"user0"
argument_list|,
name|appId
argument_list|,
literal|"Bsrv"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuxServices ()
specifier|public
name|void
name|testAuxServices
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|AuxServices
operator|.
name|AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Asrv"
block|,
literal|"Bsrv"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AuxServices
operator|.
name|AUX_SERVICE_CLASS_FMT
argument_list|,
literal|"Asrv"
argument_list|)
argument_list|,
name|ServiceA
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AuxServices
operator|.
name|AUX_SERVICE_CLASS_FMT
argument_list|,
literal|"Bsrv"
argument_list|)
argument_list|,
name|ServiceB
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|AuxServices
name|aux
init|=
operator|new
name|AuxServices
argument_list|()
decl_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|latch
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Service
name|s
range|:
name|aux
operator|.
name|getServices
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|INITED
argument_list|,
name|s
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|instanceof
name|ServiceA
condition|)
block|{
name|latch
operator|*=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|instanceof
name|ServiceB
condition|)
block|{
name|latch
operator|*=
literal|3
expr_stmt|;
block|}
else|else
name|fail
argument_list|(
literal|"Unexpected service type "
operator|+
name|s
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Invalid mix of services"
argument_list|,
literal|6
argument_list|,
name|latch
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|Service
name|s
range|:
name|aux
operator|.
name|getServices
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|STARTED
argument_list|,
name|s
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|aux
operator|.
name|stop
argument_list|()
expr_stmt|;
for|for
control|(
name|Service
name|s
range|:
name|aux
operator|.
name|getServices
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|STOPPED
argument_list|,
name|s
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAuxUnexpectedStop ()
specifier|public
name|void
name|testAuxUnexpectedStop
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|AuxServices
operator|.
name|AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Asrv"
block|,
literal|"Bsrv"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AuxServices
operator|.
name|AUX_SERVICE_CLASS_FMT
argument_list|,
literal|"Asrv"
argument_list|)
argument_list|,
name|ServiceA
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AuxServices
operator|.
name|AUX_SERVICE_CLASS_FMT
argument_list|,
literal|"Bsrv"
argument_list|)
argument_list|,
name|ServiceB
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|AuxServices
name|aux
init|=
operator|new
name|AuxServices
argument_list|()
decl_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
name|Service
name|s
init|=
name|aux
operator|.
name|getServices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|s
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Auxiliary service stopped, but AuxService unaffected."
argument_list|,
name|STOPPED
argument_list|,
name|aux
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aux
operator|.
name|getServices
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

