begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
operator|.
name|SimpleEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|LocalResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestContainer
specifier|public
class|class
name|TestContainer
block|{
DECL|field|metrics
specifier|final
name|NodeManagerMetrics
name|metrics
init|=
name|NodeManagerMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
comment|/**    * Verify correct container request events sent to localizer.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testLocalizationRequest ()
specifier|public
name|void
name|testLocalizationRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|EventHandler
argument_list|<
name|LocalizationEvent
argument_list|>
name|localizerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizationEventType
operator|.
name|class
argument_list|,
name|localizerBus
argument_list|)
expr_stmt|;
comment|// null serviceData; no registered AuxServicesEventType handler
name|ContainerLaunchContext
name|ctxt
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|getMockContainerId
argument_list|(
literal|7
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctxt
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"yak"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ctxt
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLocalizationRequest seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
name|createLocalResources
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctxt
operator|.
name|getAllLocalResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
specifier|final
name|Container
name|c
init|=
name|newContainer
argument_list|(
name|dispatcher
argument_list|,
name|ctxt
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify request for public/private resources to localizer
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|cId
argument_list|,
name|ContainerEventType
operator|.
name|INIT_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ContainerReqMatcher
name|matchesPublicReq
init|=
operator|new
name|ContainerReqMatcher
argument_list|(
name|localResources
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerReqMatcher
name|matchesPrivateReq
init|=
operator|new
name|ContainerReqMatcher
argument_list|(
name|localResources
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerReqMatcher
name|matchesAppReq
init|=
operator|new
name|ContainerReqMatcher
argument_list|(
name|localResources
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesPublicReq
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesPrivateReq
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesAppReq
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Verify container launch when all resources already cached.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testLocalizationLaunch ()
specifier|public
name|void
name|testLocalizationLaunch
parameter_list|()
throws|throws
name|Exception
block|{
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|EventHandler
argument_list|<
name|LocalizationEvent
argument_list|>
name|localizerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizationEventType
operator|.
name|class
argument_list|,
name|localizerBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainersLauncherEvent
argument_list|>
name|launcherBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersLauncherEventType
operator|.
name|class
argument_list|,
name|launcherBus
argument_list|)
expr_stmt|;
comment|// null serviceData; no registered AuxServicesEventType handler
name|ContainerLaunchContext
name|ctxt
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|getMockContainerId
argument_list|(
literal|8
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctxt
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"yak"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ctxt
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLocalizationLaunch seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
name|createLocalResources
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctxt
operator|.
name|getAllLocalResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
specifier|final
name|Container
name|c
init|=
name|newContainer
argument_list|(
name|dispatcher
argument_list|,
name|ctxt
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|cId
argument_list|,
name|ContainerEventType
operator|.
name|INIT_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Container prepared for localization events
name|Path
name|cache
init|=
operator|new
name|Path
argument_list|(
literal|"file:///cache"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
name|localPaths
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|rsrc
range|:
name|localResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|cache
argument_list|,
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|localPaths
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// rsrc copied to p
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResourceLocalizedEvent
argument_list|(
name|c
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|req
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// all resources should be localized
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZED
argument_list|,
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
name|loc
range|:
name|c
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|localPaths
operator|.
name|remove
argument_list|(
name|loc
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|loc
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|localPaths
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify container launch
name|ArgumentMatcher
argument_list|<
name|ContainersLauncherEvent
argument_list|>
name|matchesContainerLaunch
init|=
operator|new
name|ArgumentMatcher
argument_list|<
name|ContainersLauncherEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ContainersLauncherEvent
name|launchEvent
init|=
operator|(
name|ContainersLauncherEvent
operator|)
name|o
decl_stmt|;
return|return
name|c
operator|==
name|launchEvent
operator|.
name|getContainer
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|verify
argument_list|(
name|launcherBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesContainerLaunch
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Verify serviceData correctly sent.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testServiceData ()
specifier|public
name|void
name|testServiceData
parameter_list|()
throws|throws
name|Exception
block|{
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|EventHandler
argument_list|<
name|LocalizationEvent
argument_list|>
name|localizerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizationEventType
operator|.
name|class
argument_list|,
name|localizerBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|AuxServicesEvent
argument_list|>
name|auxBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|AuxServicesEventType
operator|.
name|class
argument_list|,
name|auxBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainersLauncherEvent
argument_list|>
name|launchBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersLauncherEventType
operator|.
name|class
argument_list|,
name|launchBus
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|ctxt
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ContainerId
name|cId
init|=
name|getMockContainerId
argument_list|(
literal|9
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctxt
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"yak"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ctxt
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ctxt
operator|.
name|getAllLocalResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|LocalResource
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testServiceData seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
name|createServiceData
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctxt
operator|.
name|getAllServiceData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|serviceData
argument_list|)
expr_stmt|;
specifier|final
name|Container
name|c
init|=
name|newContainer
argument_list|(
name|dispatcher
argument_list|,
name|ctxt
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify propagation of service data to AuxServices
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|cId
argument_list|,
name|ContainerEventType
operator|.
name|INIT_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|e
range|:
name|serviceData
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ArgumentMatcher
argument_list|<
name|AuxServicesEvent
argument_list|>
name|matchesServiceReq
init|=
operator|new
name|ArgumentMatcher
argument_list|<
name|AuxServicesEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|AuxServicesEvent
name|evt
init|=
operator|(
name|AuxServicesEvent
operator|)
name|o
decl_stmt|;
return|return
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|evt
operator|.
name|getServiceID
argument_list|()
argument_list|)
operator|&&
literal|0
operator|==
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|evt
operator|.
name|getServiceData
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|verify
argument_list|(
name|auxBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesServiceReq
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify launch on empty resource request
name|ArgumentMatcher
argument_list|<
name|ContainersLauncherEvent
argument_list|>
name|matchesLaunchReq
init|=
operator|new
name|ArgumentMatcher
argument_list|<
name|ContainersLauncherEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ContainersLauncherEvent
name|evt
init|=
operator|(
name|ContainersLauncherEvent
operator|)
name|o
decl_stmt|;
return|return
name|evt
operator|.
name|getType
argument_list|()
operator|==
name|ContainersLauncherEventType
operator|.
name|LAUNCH_CONTAINER
operator|&&
name|cId
operator|==
name|evt
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|verify
argument_list|(
name|launchBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesLaunchReq
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Accept iff the resource request payload matches.
DECL|class|ContainerReqMatcher
specifier|static
class|class
name|ContainerReqMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|LocalizationEvent
argument_list|>
block|{
DECL|field|resources
specifier|final
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
name|resources
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ContainerReqMatcher (Map<String,LocalResource> allResources, EnumSet<LocalResourceVisibility> vis)
name|ContainerReqMatcher
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|allResources
parameter_list|,
name|EnumSet
argument_list|<
name|LocalResourceVisibility
argument_list|>
name|vis
parameter_list|)
throws|throws
name|URISyntaxException
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|e
range|:
name|allResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|vis
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getVisibility
argument_list|()
argument_list|)
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
operator|new
name|LocalResourceRequest
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|matches (Object o)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ContainerLocalizationRequestEvent
name|evt
init|=
operator|(
name|ContainerLocalizationRequestEvent
operator|)
name|o
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|(
name|resources
argument_list|)
decl_stmt|;
for|for
control|(
name|LocalResourceRequest
name|rsrc
range|:
name|evt
operator|.
name|getRequestedResources
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|expected
operator|.
name|remove
argument_list|(
name|rsrc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|expected
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
DECL|method|getMockRsrc (Random r, LocalResourceVisibility vis)
specifier|static
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|getMockRsrc
parameter_list|(
name|Random
name|r
parameter_list|,
name|LocalResourceVisibility
name|vis
parameter_list|)
block|{
name|LocalResource
name|rsrc
init|=
name|mock
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|uri
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|uri
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/local/"
operator|+
name|vis
operator|+
literal|"/"
operator|+
name|name
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1024L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|2048L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc
operator|.
name|getVisibility
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|vis
argument_list|)
expr_stmt|;
return|return
operator|new
name|SimpleEntry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|(
name|name
argument_list|,
name|rsrc
argument_list|)
return|;
block|}
DECL|method|createLocalResources (Random r)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|createLocalResources
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|5
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|rsrc
init|=
name|getMockRsrc
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|5
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|rsrc
init|=
name|getMockRsrc
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|+
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|rsrc
init|=
name|getMockRsrc
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|localResources
return|;
block|}
DECL|method|getMockContainerId (int appId, long timestamp, int id)
specifier|static
name|ContainerId
name|getMockContainerId
parameter_list|(
name|int
name|appId
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|ApplicationId
name|aId
init|=
name|mock
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|aId
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|aId
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|ContainerId
name|cId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|aId
argument_list|)
expr_stmt|;
return|return
name|cId
return|;
block|}
DECL|method|createServiceData (Random r)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|createServiceData
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|5
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|String
name|service
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1024
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|serviceData
operator|.
name|put
argument_list|(
name|service
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|serviceData
return|;
block|}
DECL|method|newContainer (Dispatcher disp, ContainerLaunchContext ctx)
name|Container
name|newContainer
parameter_list|(
name|Dispatcher
name|disp
parameter_list|,
name|ContainerLaunchContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|ContainerImpl
argument_list|(
name|disp
argument_list|,
name|ctx
argument_list|,
literal|null
argument_list|,
name|metrics
argument_list|)
return|;
block|}
block|}
end_class

end_unit

