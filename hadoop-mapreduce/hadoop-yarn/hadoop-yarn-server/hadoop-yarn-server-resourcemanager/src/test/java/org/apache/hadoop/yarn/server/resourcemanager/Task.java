begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_comment
comment|/**  *   */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_class
DECL|class|Task
specifier|public
class|class
name|Task
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|State
DECL|enumConstant|PENDING
DECL|enumConstant|ALLOCATED
DECL|enumConstant|RUNNING
DECL|enumConstant|COMPLETE
specifier|public
enum|enum
name|State
block|{
name|PENDING
block|,
name|ALLOCATED
block|,
name|RUNNING
block|,
name|COMPLETE
block|}
empty_stmt|;
DECL|field|applicationId
specifier|final
specifier|private
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|taskId
specifier|final
specifier|private
name|int
name|taskId
decl_stmt|;
DECL|field|priority
specifier|final
specifier|private
name|Priority
name|priority
decl_stmt|;
DECL|field|hosts
specifier|final
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|hosts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|racks
specifier|final
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|racks
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|containerId
specifier|private
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|nodeManager
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
DECL|method|Task (Application application, Priority priority, String[] hosts)
specifier|public
name|Task
parameter_list|(
name|Application
name|application
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
block|{
name|this
operator|.
name|applicationId
operator|=
name|application
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|taskId
operator|=
name|application
operator|.
name|getNextTaskId
argument_list|()
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|PENDING
expr_stmt|;
comment|// Special case: Don't care about locality
if|if
condition|(
operator|!
operator|(
name|hosts
operator|.
name|length
operator|==
literal|1
operator|&&
name|hosts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
operator|.
name|ANY
argument_list|)
operator|)
condition|)
block|{
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
name|this
operator|.
name|hosts
operator|.
name|add
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|this
operator|.
name|racks
operator|.
name|add
argument_list|(
name|Application
operator|.
name|resolve
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Task "
operator|+
name|taskId
operator|+
literal|" added to application "
operator|+
name|this
operator|.
name|applicationId
operator|+
literal|" with "
operator|+
name|this
operator|.
name|hosts
operator|.
name|size
argument_list|()
operator|+
literal|" hosts, "
operator|+
name|racks
operator|.
name|size
argument_list|()
operator|+
literal|" racks"
argument_list|)
expr_stmt|;
block|}
DECL|method|getTaskId ()
specifier|public
name|int
name|getTaskId
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
DECL|method|getPriority ()
specifier|public
name|Priority
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
DECL|method|getNodeManager ()
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodeManager
name|getNodeManager
parameter_list|()
block|{
return|return
name|nodeManager
return|;
block|}
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
DECL|method|getApplicationID ()
specifier|public
name|ApplicationId
name|getApplicationID
parameter_list|()
block|{
return|return
name|applicationId
return|;
block|}
DECL|method|getHosts ()
specifier|public
name|String
index|[]
name|getHosts
parameter_list|()
block|{
return|return
name|hosts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|hosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getRacks ()
specifier|public
name|String
index|[]
name|getRacks
parameter_list|()
block|{
return|return
name|racks
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|racks
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|canSchedule (NodeType type, String hostName)
specifier|public
name|boolean
name|canSchedule
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|String
name|hostName
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
return|return
name|hosts
operator|.
name|contains
argument_list|(
name|hostName
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|RACK_LOCAL
condition|)
block|{
return|return
name|racks
operator|.
name|contains
argument_list|(
name|Application
operator|.
name|resolve
argument_list|(
name|hostName
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|start (NodeManager nodeManager, ContainerId containerId)
specifier|public
name|void
name|start
parameter_list|(
name|NodeManager
name|nodeManager
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|setState
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RUNNING
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Trying to stop a non-running task: "
operator|+
name|getTaskId
argument_list|()
operator|+
literal|" of application "
operator|+
name|getApplicationID
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|nodeManager
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
literal|null
expr_stmt|;
name|setState
argument_list|(
name|State
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
block|}
DECL|method|getState ()
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|setState (State state)
specifier|private
name|void
name|setState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Task
condition|)
block|{
return|return
operator|(
operator|(
name|Task
operator|)
name|obj
operator|)
operator|.
name|taskId
operator|==
name|this
operator|.
name|taskId
return|;
block|}
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
block|}
end_class

end_unit

