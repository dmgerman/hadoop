begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|AdminOperationsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|RefreshUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|RefreshAuthorizationPolicyProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * Administrative access to Hadoop Map-Reduce.  *   * Currently it only provides the ability to connect to the {@link JobTracker}  * and 1) refresh the service-level authorization policy, 2) refresh queue acl  * properties.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|MRAdmin
specifier|public
class|class
name|MRAdmin
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|method|MRAdmin ()
specifier|public
name|MRAdmin
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|MRAdmin (Configuration conf)
specifier|public
name|MRAdmin
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|printHelp (String cmd)
specifier|private
specifier|static
name|void
name|printHelp
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|summary
init|=
literal|"hadoop mradmin is the command to execute Map-Reduce administrative commands.\n"
operator|+
literal|"The full syntax is: \n\n"
operator|+
literal|"hadoop mradmin [-refreshServiceAcl] [-refreshQueues] "
operator|+
literal|"[-refreshNodes] [-refreshUserToGroupsMappings] "
operator|+
literal|"[-refreshSuperUserGroupsConfiguration] [-help [cmd]]\n"
decl_stmt|;
name|String
name|refreshServiceAcl
init|=
literal|"-refreshServiceAcl: Reload the service-level authorization policy file\n"
operator|+
literal|"\t\tJobtracker will reload the authorization policy file.\n"
decl_stmt|;
name|String
name|refreshQueues
init|=
literal|"-refreshQueues: Reload the queues' acls, states and "
operator|+
literal|"scheduler specific properties.\n"
operator|+
literal|"\t\tJobTracker will reload the mapred-queues configuration file.\n"
decl_stmt|;
name|String
name|refreshUserToGroupsMappings
init|=
literal|"-refreshUserToGroupsMappings: Refresh user-to-groups mappings\n"
decl_stmt|;
name|String
name|refreshSuperUserGroupsConfiguration
init|=
literal|"-refreshSuperUserGroupsConfiguration: Refresh superuser proxy groups mappings\n"
decl_stmt|;
name|String
name|refreshNodes
init|=
literal|"-refreshNodes: Refresh the hosts information at the jobtracker.\n"
decl_stmt|;
name|String
name|help
init|=
literal|"-help [cmd]: \tDisplays help for the given command or all commands if none\n"
operator|+
literal|"\t\tis specified.\n"
decl_stmt|;
if|if
condition|(
literal|"refreshServiceAcl"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshServiceAcl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshQueues"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshQueues
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshUserToGroupsMappings
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshNodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshNodes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshSuperUserGroupsConfiguration
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|summary
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshServiceAcl
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshQueues
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshUserToGroupsMappings
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshSuperUserGroupsConfiguration
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshNodes
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Displays format of commands.    * @param cmd The command that is being executed.    */
DECL|method|printUsage (String cmd)
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
if|if
condition|(
literal|"-refreshServiceAcl"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java MRAdmin"
operator|+
literal|" [-refreshServiceAcl]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshQueues"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java MRAdmin"
operator|+
literal|" [-refreshQueues]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java MRAdmin"
operator|+
literal|" [-refreshUserToGroupsMappings]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-refreshSuperUserGroupsConfiguration]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshNodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java MRAdmin"
operator|+
literal|" [-refreshNodes]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java MRAdmin"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshServiceAcl]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshQueues]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshUserToGroupsMappings]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshSuperUserGroupsConfiguration]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshNodes]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-help [cmd]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getUGI (Configuration conf )
specifier|private
specifier|static
name|UserGroupInformation
name|getUGI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
DECL|method|refreshAuthorizationPolicy ()
specifier|private
name|int
name|refreshAuthorizationPolicy
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// for security authorization
comment|// server principal for this call
comment|// should be JT's one.
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|jConf
operator|.
name|get
argument_list|(
name|JobTracker
operator|.
name|JT_USER_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the client
name|RefreshAuthorizationPolicyProtocol
name|refreshProtocol
init|=
operator|(
name|RefreshAuthorizationPolicyProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|RefreshAuthorizationPolicyProtocol
operator|.
name|class
argument_list|,
name|RefreshAuthorizationPolicyProtocol
operator|.
name|versionID
argument_list|,
name|JobTracker
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getUGI
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getSocketFactory
argument_list|(
name|conf
argument_list|,
name|RefreshAuthorizationPolicyProtocol
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// Refresh the authorization policy in-effect
name|refreshProtocol
operator|.
name|refreshServiceAcl
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * refreshSuperUserGroupsConfiguration {@link JobTracker}.    * @return exitcode 0 on success, non-zero on failure    * @throws IOException    */
DECL|method|refreshSuperUserGroupsConfiguration ()
specifier|public
name|int
name|refreshSuperUserGroupsConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// for security authorization
comment|// server principal for this call
comment|// should be JT's one.
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|jConf
operator|.
name|get
argument_list|(
name|JobTracker
operator|.
name|JT_USER_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the client
name|RefreshUserMappingsProtocol
name|refreshProtocol
init|=
operator|(
name|RefreshUserMappingsProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|versionID
argument_list|,
name|JobTracker
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getUGI
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getSocketFactory
argument_list|(
name|conf
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// Refresh the user-to-groups mappings
name|refreshProtocol
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Refresh the user-to-groups mappings on the {@link JobTracker}.    * @return exitcode 0 on success, non-zero on failure    * @throws IOException    */
DECL|method|refreshUserToGroupsMappings ()
specifier|private
name|int
name|refreshUserToGroupsMappings
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// for security authorization
comment|// server principal for this call
comment|// should be JT's one.
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|jConf
operator|.
name|get
argument_list|(
name|JobTracker
operator|.
name|JT_USER_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the client
name|RefreshUserMappingsProtocol
name|refreshProtocol
init|=
operator|(
name|RefreshUserMappingsProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|versionID
argument_list|,
name|JobTracker
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getUGI
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getSocketFactory
argument_list|(
name|conf
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// Refresh the user-to-groups mappings
name|refreshProtocol
operator|.
name|refreshUserToGroupsMappings
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|refreshQueues ()
specifier|private
name|int
name|refreshQueues
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// Create the client
name|AdminOperationsProtocol
name|adminOperationsProtocol
init|=
operator|(
name|AdminOperationsProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|AdminOperationsProtocol
operator|.
name|class
argument_list|,
name|AdminOperationsProtocol
operator|.
name|versionID
argument_list|,
name|JobTracker
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getUGI
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getSocketFactory
argument_list|(
name|conf
argument_list|,
name|AdminOperationsProtocol
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// Refresh the queue properties
name|adminOperationsProtocol
operator|.
name|refreshQueues
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Command to ask the jobtracker to reread the hosts and excluded hosts     * file.    * Usage: java MRAdmin -refreshNodes    * @exception IOException     */
DECL|method|refreshNodes ()
specifier|private
name|int
name|refreshNodes
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// Create the client
name|AdminOperationsProtocol
name|adminOperationsProtocol
init|=
operator|(
name|AdminOperationsProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|AdminOperationsProtocol
operator|.
name|class
argument_list|,
name|AdminOperationsProtocol
operator|.
name|versionID
argument_list|,
name|JobTracker
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getUGI
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getSocketFactory
argument_list|(
name|conf
argument_list|,
name|AdminOperationsProtocol
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// Refresh the queue properties
name|adminOperationsProtocol
operator|.
name|refreshNodes
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|args
index|[
name|i
operator|++
index|]
decl_stmt|;
comment|//
comment|// verify that we have enough command line parameters
comment|//
if|if
condition|(
literal|"-refreshServiceAcl"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-refreshQueues"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-refreshNodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
name|exitCode
operator|=
literal|0
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|"-refreshServiceAcl"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshAuthorizationPolicy
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshQueues"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshQueues
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshUserToGroupsMappings
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshNodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshNodes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|printUsage
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printHelp
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": Unknown command"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|arge
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|arge
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
comment|//
comment|// This is a error returned by hadoop server. Print
comment|// out the first line of the error mesage, ignore the stack trace.
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|MRAdmin
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

