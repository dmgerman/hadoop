begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.dancing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|dancing
package|;
end_package

begin_comment
comment|/**  * Of the "normal" 12 pentominos, 6 of them have distinct shapes when flipped.  * This class includes both variants of the "flippable" shapes and the  * unflippable shapes for a total of 18 pieces. Clearly, the boards must have  * 18*5=90 boxes to hold all of the solutions.  */
end_comment

begin_class
DECL|class|OneSidedPentomino
specifier|public
class|class
name|OneSidedPentomino
extends|extends
name|Pentomino
block|{
DECL|method|OneSidedPentomino ()
specifier|public
name|OneSidedPentomino
parameter_list|()
block|{}
DECL|method|OneSidedPentomino (int width, int height)
specifier|public
name|OneSidedPentomino
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|super
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
comment|/**    * Define the one sided pieces. The flipped pieces have the same name with    * a capital letter.    */
DECL|method|initializePieces ()
specifier|protected
name|void
name|initializePieces
parameter_list|()
block|{
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"x"
argument_list|,
literal|" x /xxx/ x "
argument_list|,
literal|false
argument_list|,
name|oneRotation
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"v"
argument_list|,
literal|"x  /x  /xxx"
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"t"
argument_list|,
literal|"xxx/ x / x "
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"w"
argument_list|,
literal|"  x/ xx/xx "
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"u"
argument_list|,
literal|"x x/xxx"
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"i"
argument_list|,
literal|"xxxxx"
argument_list|,
literal|false
argument_list|,
name|twoRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"f"
argument_list|,
literal|" xx/xx / x "
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"p"
argument_list|,
literal|"xx/xx/x "
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"z"
argument_list|,
literal|"xx / x / xx"
argument_list|,
literal|false
argument_list|,
name|twoRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"n"
argument_list|,
literal|"xx  / xxx"
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"y"
argument_list|,
literal|"  x /xxxx"
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"l"
argument_list|,
literal|"   x/xxxx"
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"F"
argument_list|,
literal|"xx / xx/ x "
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"P"
argument_list|,
literal|"xx/xx/ x"
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"Z"
argument_list|,
literal|" xx/ x /xx "
argument_list|,
literal|false
argument_list|,
name|twoRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"N"
argument_list|,
literal|"  xx/xxx "
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"Y"
argument_list|,
literal|" x  /xxxx"
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
operator|new
name|Piece
argument_list|(
literal|"L"
argument_list|,
literal|"x   /xxxx"
argument_list|,
literal|false
argument_list|,
name|fourRotations
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Solve the 3x30 puzzle.    * @param args    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Pentomino
name|model
init|=
operator|new
name|OneSidedPentomino
argument_list|(
literal|3
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|int
name|solutions
init|=
name|model
operator|.
name|solve
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|solutions
operator|+
literal|" solutions found."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

