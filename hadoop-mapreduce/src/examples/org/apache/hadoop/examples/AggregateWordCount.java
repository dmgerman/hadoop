begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorBaseDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorJob
import|;
end_import

begin_comment
comment|/**  * This is an example Aggregated Hadoop Map/Reduce application. It reads the  * text input files, breaks each line into words and counts them. The output is  * a locally sorted list of words and the count of how often they occurred.  *   * To run: bin/hadoop jar hadoop-*-examples.jar aggregatewordcount   *<i>in-dir</i><i>out-dir</i><i>numOfReducers</i> textinputformat  *   */
end_comment

begin_class
DECL|class|AggregateWordCount
specifier|public
class|class
name|AggregateWordCount
block|{
DECL|class|WordCountPlugInClass
specifier|public
specifier|static
class|class
name|WordCountPlugInClass
extends|extends
name|ValueAggregatorBaseDescriptor
block|{
annotation|@
name|Override
DECL|method|generateKeyValPairs (Object key, Object val)
specifier|public
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|generateKeyValPairs
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|String
name|countType
init|=
name|LONG_VALUE_SUM
decl_stmt|;
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|retv
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|val
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StringTokenizer
name|itr
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|e
init|=
name|generateEntry
argument_list|(
name|countType
argument_list|,
name|itr
operator|.
name|nextToken
argument_list|()
argument_list|,
name|ONE
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|retv
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retv
return|;
block|}
block|}
comment|/**    * The main driver for word count map/reduce program. Invoke this method to    * submit the map/reduce job.    *     * @throws IOException    *           When there is communication problems with the job tracker.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Job
name|job
init|=
name|ValueAggregatorJob
operator|.
name|createValueAggregatorJob
argument_list|(
name|args
argument_list|,
operator|new
name|Class
index|[]
block|{
name|WordCountPlugInClass
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|AggregateWordCount
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

