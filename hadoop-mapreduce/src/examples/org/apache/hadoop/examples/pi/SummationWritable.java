begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.pi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
operator|.
name|ArithmeticProgression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
operator|.
name|Summation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_comment
comment|/** A Writable class for Summation */
end_comment

begin_class
DECL|class|SummationWritable
specifier|public
specifier|final
class|class
name|SummationWritable
implements|implements
name|WritableComparable
argument_list|<
name|SummationWritable
argument_list|>
implements|,
name|Container
argument_list|<
name|Summation
argument_list|>
block|{
DECL|field|sigma
specifier|private
name|Summation
name|sigma
decl_stmt|;
DECL|method|SummationWritable ()
specifier|public
name|SummationWritable
parameter_list|()
block|{}
DECL|method|SummationWritable (Summation sigma)
name|SummationWritable
parameter_list|(
name|Summation
name|sigma
parameter_list|)
block|{
name|this
operator|.
name|sigma
operator|=
name|sigma
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
name|sigma
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getElement ()
specifier|public
name|Summation
name|getElement
parameter_list|()
block|{
return|return
name|sigma
return|;
block|}
comment|/** Read sigma from conf */
DECL|method|read (Class<?> clazz, Configuration conf)
specifier|public
specifier|static
name|Summation
name|read
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|Summation
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".sigma"
argument_list|)
argument_list|)
return|;
block|}
comment|/** Write sigma to conf */
DECL|method|write (Summation sigma, Class<?> clazz, Configuration conf)
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|Summation
name|sigma
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".sigma"
argument_list|,
name|sigma
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Read Summation from DataInput */
DECL|method|read (DataInput in)
specifier|static
name|Summation
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SummationWritable
name|s
init|=
operator|new
name|SummationWritable
argument_list|()
decl_stmt|;
name|s
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|getElement
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ArithmeticProgression
name|N
init|=
name|ArithmeticProgressionWritable
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
specifier|final
name|ArithmeticProgression
name|E
init|=
name|ArithmeticProgressionWritable
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|sigma
operator|=
operator|new
name|Summation
argument_list|(
name|N
argument_list|,
name|E
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|sigma
operator|.
name|setValue
argument_list|(
name|in
operator|.
name|readDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Write sigma to DataOutput */
DECL|method|write (Summation sigma, DataOutput out)
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|Summation
name|sigma
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|ArithmeticProgressionWritable
operator|.
name|write
argument_list|(
name|sigma
operator|.
name|N
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|ArithmeticProgressionWritable
operator|.
name|write
argument_list|(
name|sigma
operator|.
name|E
argument_list|,
name|out
argument_list|)
expr_stmt|;
specifier|final
name|Double
name|v
init|=
name|sigma
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|sigma
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|compareTo (SummationWritable that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|SummationWritable
name|that
parameter_list|)
block|{
return|return
name|this
operator|.
name|sigma
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|sigma
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|SummationWritable
condition|)
block|{
specifier|final
name|SummationWritable
name|that
init|=
operator|(
name|SummationWritable
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|compareTo
argument_list|(
name|that
argument_list|)
operator|==
literal|0
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|obj
operator|==
literal|null
condition|?
literal|"obj == null"
else|:
literal|"obj.getClass()="
operator|+
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
comment|/** Not supported */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/** A writable class for ArithmeticProgression */
DECL|class|ArithmeticProgressionWritable
specifier|private
specifier|static
class|class
name|ArithmeticProgressionWritable
block|{
comment|/** Read ArithmeticProgression from DataInput */
DECL|method|read (DataInput in)
specifier|private
specifier|static
name|ArithmeticProgression
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ArithmeticProgression
argument_list|(
name|in
operator|.
name|readChar
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
return|;
block|}
comment|/** Write ArithmeticProgression to DataOutput */
DECL|method|write (ArithmeticProgression ap, DataOutput out )
specifier|private
specifier|static
name|void
name|write
parameter_list|(
name|ArithmeticProgression
name|ap
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeChar
argument_list|(
name|ap
operator|.
name|symbol
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|ap
operator|.
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|ap
operator|.
name|delta
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|ap
operator|.
name|limit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

