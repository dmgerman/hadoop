begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.terasort
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|terasort
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * An unsigned 16 byte integer class that supports addition, multiplication,  * and left shifts.  */
end_comment

begin_class
DECL|class|Unsigned16
class|class
name|Unsigned16
implements|implements
name|Writable
block|{
DECL|field|hi8
specifier|private
name|long
name|hi8
decl_stmt|;
DECL|field|lo8
specifier|private
name|long
name|lo8
decl_stmt|;
DECL|method|Unsigned16 ()
specifier|public
name|Unsigned16
parameter_list|()
block|{
name|hi8
operator|=
literal|0
expr_stmt|;
name|lo8
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|Unsigned16 (long l)
specifier|public
name|Unsigned16
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|hi8
operator|=
literal|0
expr_stmt|;
name|lo8
operator|=
name|l
expr_stmt|;
block|}
DECL|method|Unsigned16 (Unsigned16 other)
specifier|public
name|Unsigned16
parameter_list|(
name|Unsigned16
name|other
parameter_list|)
block|{
name|hi8
operator|=
name|other
operator|.
name|hi8
expr_stmt|;
name|lo8
operator|=
name|other
operator|.
name|lo8
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Unsigned16
condition|)
block|{
name|Unsigned16
name|other
init|=
operator|(
name|Unsigned16
operator|)
name|o
decl_stmt|;
return|return
name|other
operator|.
name|hi8
operator|==
name|hi8
operator|&&
name|other
operator|.
name|lo8
operator|==
name|lo8
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|lo8
return|;
block|}
comment|/**    * Parse a hex string    * @param s the hex string    */
DECL|method|Unsigned16 (String s)
specifier|public
name|Unsigned16
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|NumberFormatException
block|{
name|set
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the number from a hex string    * @param s the number in hexadecimal    * @throws NumberFormatException if the number is invalid    */
DECL|method|set (String s)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|NumberFormatException
block|{
name|hi8
operator|=
literal|0
expr_stmt|;
name|lo8
operator|=
literal|0
expr_stmt|;
specifier|final
name|long
name|lastDigit
init|=
literal|0xfl
operator|<<
literal|60
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|digit
init|=
name|getHexDigit
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|lastDigit
operator|&
name|hi8
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
name|s
operator|+
literal|" overflowed 16 bytes"
argument_list|)
throw|;
block|}
name|hi8
operator|<<=
literal|4
expr_stmt|;
name|hi8
operator||=
operator|(
name|lo8
operator|&
name|lastDigit
operator|)
operator|>>>
literal|60
expr_stmt|;
name|lo8
operator|<<=
literal|4
expr_stmt|;
name|lo8
operator||=
name|digit
expr_stmt|;
block|}
block|}
comment|/**    * Set the number to a given long.    * @param l the new value, which is treated as an unsigned number    */
DECL|method|set (long l)
specifier|public
name|void
name|set
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|lo8
operator|=
name|l
expr_stmt|;
name|hi8
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Map a hexadecimal character into a digit.    * @param ch the character    * @return the digit from 0 to 15    * @throws NumberFormatException    */
DECL|method|getHexDigit (char ch)
specifier|private
specifier|static
name|int
name|getHexDigit
parameter_list|(
name|char
name|ch
parameter_list|)
throws|throws
name|NumberFormatException
block|{
if|if
condition|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
condition|)
block|{
return|return
name|ch
operator|-
literal|'0'
return|;
block|}
if|if
condition|(
name|ch
operator|>=
literal|'a'
operator|&&
name|ch
operator|<=
literal|'f'
condition|)
block|{
return|return
name|ch
operator|-
literal|'a'
operator|+
literal|10
return|;
block|}
if|if
condition|(
name|ch
operator|>=
literal|'A'
operator|&&
name|ch
operator|<=
literal|'F'
condition|)
block|{
return|return
name|ch
operator|-
literal|'A'
operator|+
literal|10
return|;
block|}
throw|throw
operator|new
name|NumberFormatException
argument_list|(
name|ch
operator|+
literal|" is not a valid hex digit"
argument_list|)
throw|;
block|}
DECL|field|TEN
specifier|private
specifier|static
specifier|final
name|Unsigned16
name|TEN
init|=
operator|new
name|Unsigned16
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|method|fromDecimal (String s)
specifier|public
specifier|static
name|Unsigned16
name|fromDecimal
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|NumberFormatException
block|{
name|Unsigned16
name|result
init|=
operator|new
name|Unsigned16
argument_list|()
decl_stmt|;
name|Unsigned16
name|tmp
init|=
operator|new
name|Unsigned16
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
argument_list|<
literal|'0'
operator|||
name|ch
argument_list|>
literal|'9'
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
name|ch
operator|+
literal|" not a valid decimal digit"
argument_list|)
throw|;
block|}
name|int
name|digit
init|=
name|ch
operator|-
literal|'0'
decl_stmt|;
name|result
operator|.
name|multiply
argument_list|(
name|TEN
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|set
argument_list|(
name|digit
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Return the number as a hex string.    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|hi8
operator|==
literal|0
condition|)
block|{
return|return
name|Long
operator|.
name|toHexString
argument_list|(
name|lo8
argument_list|)
return|;
block|}
else|else
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|hi8
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|loString
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|lo8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|loString
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|loString
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Get a given byte from the number.    * @param b the byte to get with 0 meaning the most significant byte    * @return the byte or 0 if b is outside of 0..15    */
DECL|method|getByte (int b)
specifier|public
name|byte
name|getByte
parameter_list|(
name|int
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|>=
literal|0
operator|&&
name|b
operator|<
literal|16
condition|)
block|{
if|if
condition|(
name|b
operator|<
literal|8
condition|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|hi8
operator|>>
operator|(
literal|56
operator|-
literal|8
operator|*
name|b
operator|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|lo8
operator|>>
operator|(
literal|120
operator|-
literal|8
operator|*
name|b
operator|)
argument_list|)
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Get the hexadecimal digit at the given position.    * @param p the digit position to get with 0 meaning the most significant    * @return the character or '0' if p is outside of 0..31    */
DECL|method|getHexDigit (int p)
specifier|public
name|char
name|getHexDigit
parameter_list|(
name|int
name|p
parameter_list|)
block|{
name|byte
name|digit
init|=
name|getByte
argument_list|(
name|p
operator|/
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|digit
operator|>>>=
literal|4
expr_stmt|;
block|}
name|digit
operator|&=
literal|0xf
expr_stmt|;
if|if
condition|(
name|digit
operator|<
literal|10
condition|)
block|{
return|return
call|(
name|char
call|)
argument_list|(
literal|'0'
operator|+
name|digit
argument_list|)
return|;
block|}
else|else
block|{
return|return
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
name|digit
operator|-
literal|10
argument_list|)
return|;
block|}
block|}
comment|/**    * Get the high 8 bytes as a long.    */
DECL|method|getHigh8 ()
specifier|public
name|long
name|getHigh8
parameter_list|()
block|{
return|return
name|hi8
return|;
block|}
comment|/**    * Get the low 8 bytes as a long.    */
DECL|method|getLow8 ()
specifier|public
name|long
name|getLow8
parameter_list|()
block|{
return|return
name|lo8
return|;
block|}
comment|/**    * Multiple the current number by a 16 byte unsigned integer. Overflow is not    * detected and the result is the low 16 bytes of the result. The numbers     * are divided into 32 and 31 bit chunks so that the product of two chucks    * fits in the unsigned 63 bits of a long.    * @param b the other number    */
DECL|method|multiply (Unsigned16 b)
name|void
name|multiply
parameter_list|(
name|Unsigned16
name|b
parameter_list|)
block|{
comment|// divide the left into 4 32 bit chunks
name|long
index|[]
name|left
init|=
operator|new
name|long
index|[
literal|4
index|]
decl_stmt|;
name|left
index|[
literal|0
index|]
operator|=
name|lo8
operator|&
literal|0xffffffffl
expr_stmt|;
name|left
index|[
literal|1
index|]
operator|=
name|lo8
operator|>>>
literal|32
expr_stmt|;
name|left
index|[
literal|2
index|]
operator|=
name|hi8
operator|&
literal|0xffffffffl
expr_stmt|;
name|left
index|[
literal|3
index|]
operator|=
name|hi8
operator|>>>
literal|32
expr_stmt|;
comment|// divide the right into 5 31 bit chunks
name|long
index|[]
name|right
init|=
operator|new
name|long
index|[
literal|5
index|]
decl_stmt|;
name|right
index|[
literal|0
index|]
operator|=
name|b
operator|.
name|lo8
operator|&
literal|0x7fffffffl
expr_stmt|;
name|right
index|[
literal|1
index|]
operator|=
operator|(
name|b
operator|.
name|lo8
operator|>>>
literal|31
operator|)
operator|&
literal|0x7fffffffl
expr_stmt|;
name|right
index|[
literal|2
index|]
operator|=
operator|(
name|b
operator|.
name|lo8
operator|>>>
literal|62
operator|)
operator|+
operator|(
operator|(
name|b
operator|.
name|hi8
operator|&
literal|0x1fffffffl
operator|)
operator|<<
literal|2
operator|)
expr_stmt|;
name|right
index|[
literal|3
index|]
operator|=
operator|(
name|b
operator|.
name|hi8
operator|>>>
literal|29
operator|)
operator|&
literal|0x7fffffffl
expr_stmt|;
name|right
index|[
literal|4
index|]
operator|=
operator|(
name|b
operator|.
name|hi8
operator|>>>
literal|60
operator|)
expr_stmt|;
comment|// clear the cur value
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Unsigned16
name|tmp
init|=
operator|new
name|Unsigned16
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|4
condition|;
operator|++
name|l
control|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|5
condition|;
operator|++
name|r
control|)
block|{
name|long
name|prod
init|=
name|left
index|[
name|l
index|]
operator|*
name|right
index|[
name|r
index|]
decl_stmt|;
if|if
condition|(
name|prod
operator|!=
literal|0
condition|)
block|{
name|int
name|off
init|=
name|l
operator|*
literal|32
operator|+
name|r
operator|*
literal|31
decl_stmt|;
name|tmp
operator|.
name|set
argument_list|(
name|prod
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|shiftLeft
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Add the given number into the current number.    * @param b the other number    */
DECL|method|add (Unsigned16 b)
specifier|public
name|void
name|add
parameter_list|(
name|Unsigned16
name|b
parameter_list|)
block|{
name|long
name|sumHi
decl_stmt|;
name|long
name|sumLo
decl_stmt|;
name|long
name|reshibit
decl_stmt|,
name|hibit0
decl_stmt|,
name|hibit1
decl_stmt|;
name|sumHi
operator|=
name|hi8
operator|+
name|b
operator|.
name|hi8
expr_stmt|;
name|hibit0
operator|=
operator|(
name|lo8
operator|&
literal|0x8000000000000000L
operator|)
expr_stmt|;
name|hibit1
operator|=
operator|(
name|b
operator|.
name|lo8
operator|&
literal|0x8000000000000000L
operator|)
expr_stmt|;
name|sumLo
operator|=
name|lo8
operator|+
name|b
operator|.
name|lo8
expr_stmt|;
name|reshibit
operator|=
operator|(
name|sumLo
operator|&
literal|0x8000000000000000L
operator|)
expr_stmt|;
if|if
condition|(
operator|(
name|hibit0
operator|&
name|hibit1
operator|)
operator|!=
literal|0
operator||
operator|(
operator|(
name|hibit0
operator|^
name|hibit1
operator|)
operator|!=
literal|0
operator|&&
name|reshibit
operator|==
literal|0
operator|)
condition|)
name|sumHi
operator|++
expr_stmt|;
comment|/* add carry bit */
name|hi8
operator|=
name|sumHi
expr_stmt|;
name|lo8
operator|=
name|sumLo
expr_stmt|;
block|}
comment|/**    * Shift the number a given number of bit positions. The number is the low    * order bits of the result.    * @param bits the bit positions to shift by    */
DECL|method|shiftLeft (int bits)
specifier|public
name|void
name|shiftLeft
parameter_list|(
name|int
name|bits
parameter_list|)
block|{
if|if
condition|(
name|bits
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|bits
operator|<
literal|64
condition|)
block|{
name|hi8
operator|<<=
name|bits
expr_stmt|;
name|hi8
operator||=
operator|(
name|lo8
operator|>>>
operator|(
literal|64
operator|-
name|bits
operator|)
operator|)
expr_stmt|;
name|lo8
operator|<<=
name|bits
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bits
operator|<
literal|128
condition|)
block|{
name|hi8
operator|=
name|lo8
operator|<<
operator|(
name|bits
operator|-
literal|64
operator|)
expr_stmt|;
name|lo8
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|hi8
operator|=
literal|0
expr_stmt|;
name|lo8
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|hi8
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|lo8
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|hi8
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|lo8
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

