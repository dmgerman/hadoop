begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
DECL|class|LogRecordType
class|class
name|LogRecordType
block|{
DECL|field|internees
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|LogRecordType
argument_list|>
name|internees
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LogRecordType
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|index
specifier|final
name|int
name|index
decl_stmt|;
DECL|method|LogRecordType (String name)
specifier|private
name|LogRecordType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|index
operator|=
name|internees
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
DECL|method|intern (String typeName)
specifier|static
name|LogRecordType
name|intern
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|LogRecordType
name|result
init|=
name|internees
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LogRecordType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|internees
operator|.
name|put
argument_list|(
name|typeName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|internSoft (String typeName)
specifier|static
name|LogRecordType
name|internSoft
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
return|return
name|internees
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|lineTypes ()
specifier|static
name|String
index|[]
name|lineTypes
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LogRecordType
argument_list|>
argument_list|>
name|iter
init|=
name|internees
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|internees
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|internees
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

