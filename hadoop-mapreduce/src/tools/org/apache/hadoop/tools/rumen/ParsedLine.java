begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|ParsedLine
class|class
name|ParsedLine
block|{
DECL|field|content
name|Properties
name|content
decl_stmt|;
DECL|field|type
name|LogRecordType
name|type
decl_stmt|;
DECL|field|KEY
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"(\\w+)"
decl_stmt|;
comment|/**    * The value string is enclosed in double quotation marks ('"') and    * occurrences of '"' and '\' are escaped with a '\'. So the escaped value    * string is essentially a string of escaped sequence ('\' followed by any    * character) or any character other than '"' and '\'.    *     * The straightforward REGEX to capture the above is "((?:[^\"\\\\]|\\\\.)*)".    * Unfortunately Java's REGEX implementation is "broken" that it does not    * perform the NFA-to-DFA conversion and such expressions would lead to    * backtracking and stack overflow when matching with long strings. The    * following is a manual "unfolding" of the REGEX to get rid of backtracking.    */
DECL|field|VALUE
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"([^\"\\\\]*+(?:\\\\.[^\"\\\\]*+)*+)"
decl_stmt|;
comment|/**    * REGEX to match the Key-Value pairs in an input line. Capture group 1    * matches the key and capture group 2 matches the value (without quotation    * marks).    */
DECL|field|keyValPair
specifier|static
specifier|final
name|Pattern
name|keyValPair
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|KEY
operator|+
literal|"="
operator|+
literal|"\""
operator|+
name|VALUE
operator|+
literal|"\""
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|ParsedLine (String fullLine, int version)
name|ParsedLine
parameter_list|(
name|String
name|fullLine
parameter_list|,
name|int
name|version
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|content
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|int
name|firstSpace
init|=
name|fullLine
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstSpace
operator|<
literal|0
condition|)
block|{
name|firstSpace
operator|=
name|fullLine
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|firstSpace
operator|==
literal|0
condition|)
block|{
return|return;
comment|// This is a junk line of some sort
block|}
name|type
operator|=
name|LogRecordType
operator|.
name|intern
argument_list|(
name|fullLine
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|firstSpace
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|propValPairs
init|=
name|fullLine
operator|.
name|substring
argument_list|(
name|firstSpace
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|keyValPair
operator|.
name|matcher
argument_list|(
name|propValPairs
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|content
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getType ()
specifier|protected
name|LogRecordType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|get (String key)
specifier|protected
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|content
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getLong (String key)
specifier|protected
name|long
name|getLong
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|val
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|val
argument_list|)
return|;
block|}
block|}
end_class

end_unit

