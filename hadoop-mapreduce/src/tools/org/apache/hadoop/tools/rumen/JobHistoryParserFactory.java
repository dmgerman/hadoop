begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * {@link JobHistoryParserFactory} is a singleton class that attempts to  * determine the version of job history and return a proper parser.  */
end_comment

begin_class
DECL|class|JobHistoryParserFactory
specifier|public
class|class
name|JobHistoryParserFactory
block|{
DECL|method|getParser (RewindableInputStream ris)
specifier|public
specifier|static
name|JobHistoryParser
name|getParser
parameter_list|(
name|RewindableInputStream
name|ris
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|VersionDetector
name|vd
range|:
name|VersionDetector
operator|.
name|values
argument_list|()
control|)
block|{
name|boolean
name|canParse
init|=
name|vd
operator|.
name|canParse
argument_list|(
name|ris
argument_list|)
decl_stmt|;
name|ris
operator|.
name|rewind
argument_list|()
expr_stmt|;
if|if
condition|(
name|canParse
condition|)
block|{
return|return
name|vd
operator|.
name|newInstance
argument_list|(
name|ris
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No suitable parser."
argument_list|)
throw|;
block|}
DECL|enum|VersionDetector
specifier|public
enum|enum
name|VersionDetector
block|{
DECL|enumConstant|Hadoop20
DECL|method|Hadoop20 ()
name|Hadoop20
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|canParse
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Hadoop20JHParser
operator|.
name|canParse
argument_list|(
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|JobHistoryParser
name|newInstance
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Hadoop20JHParser
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|Current
DECL|method|Current ()
name|Current
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|canParse
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|CurrentJHParser
operator|.
name|canParse
argument_list|(
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|JobHistoryParser
name|newInstance
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CurrentJHParser
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|newInstance (InputStream input)
specifier|abstract
name|JobHistoryParser
name|newInstance
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|canParse (InputStream input)
specifier|abstract
name|boolean
name|canParse
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class

end_unit

