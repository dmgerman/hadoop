begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_class
DECL|class|ParsedHost
class|class
name|ParsedHost
block|{
DECL|field|rackName
specifier|private
specifier|final
name|String
name|rackName
decl_stmt|;
DECL|field|nodeName
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
comment|/**    * TODO the following only works for /rack/host format. Change to support    * arbitrary level of network names.    */
DECL|field|splitPattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|splitPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/([^/]+)/([^/]+)"
argument_list|)
decl_stmt|;
comment|/**    * TODO handle arbitrary level of network names.    */
DECL|method|numberOfDistances ()
specifier|static
name|int
name|numberOfDistances
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
DECL|method|nameComponent (int i)
name|String
name|nameComponent
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
return|return
name|rackName
return|;
case|case
literal|1
case|:
return|return
name|nodeName
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Host location component index out of range."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|rackName
operator|.
name|hashCode
argument_list|()
operator|*
literal|17
operator|+
name|nodeName
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|parse (String name)
specifier|public
specifier|static
name|ParsedHost
name|parse
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// separate out the node name
name|Matcher
name|matcher
init|=
name|splitPattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|ParsedHost
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
block|}
DECL|method|ParsedHost (LoggedLocation loc)
specifier|public
name|ParsedHost
parameter_list|(
name|LoggedLocation
name|loc
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|coordinates
init|=
name|loc
operator|.
name|getLayers
argument_list|()
decl_stmt|;
name|rackName
operator|=
name|coordinates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nodeName
operator|=
name|coordinates
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|makeLoggedLocation ()
name|LoggedLocation
name|makeLoggedLocation
parameter_list|()
block|{
name|LoggedLocation
name|result
init|=
operator|new
name|LoggedLocation
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|coordinates
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|coordinates
operator|.
name|add
argument_list|(
name|rackName
argument_list|)
expr_stmt|;
name|coordinates
operator|.
name|add
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|result
operator|.
name|setLayers
argument_list|(
name|coordinates
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getNodeName ()
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|nodeName
return|;
block|}
DECL|method|getRackName ()
name|String
name|getRackName
parameter_list|()
block|{
return|return
name|rackName
return|;
block|}
comment|// expects the broadest name first
DECL|method|ParsedHost (String rackName, String nodeName)
name|ParsedHost
parameter_list|(
name|String
name|rackName
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
name|this
operator|.
name|rackName
operator|=
name|rackName
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|ParsedHost
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ParsedHost
name|host
init|=
operator|(
name|ParsedHost
operator|)
name|other
decl_stmt|;
return|return
operator|(
name|nodeName
operator|.
name|equals
argument_list|(
name|host
operator|.
name|nodeName
argument_list|)
operator|&&
name|rackName
operator|.
name|equals
argument_list|(
name|host
operator|.
name|rackName
argument_list|)
operator|)
return|;
block|}
DECL|method|distance (ParsedHost other)
name|int
name|distance
parameter_list|(
name|ParsedHost
name|other
parameter_list|)
block|{
if|if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|nodeName
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|rackName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|rackName
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|2
return|;
block|}
block|}
end_class

end_unit

