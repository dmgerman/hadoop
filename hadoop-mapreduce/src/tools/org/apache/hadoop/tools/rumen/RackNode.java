begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * {@link RackNode} represents a rack node in the cluster topology.  */
end_comment

begin_class
DECL|class|RackNode
specifier|public
specifier|final
class|class
name|RackNode
extends|extends
name|Node
block|{
DECL|method|RackNode (String name, int level)
specifier|public
name|RackNode
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|level
parameter_list|)
block|{
comment|// Hack: ensuring rack name starts with "/".
name|super
argument_list|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|name
else|:
literal|"/"
operator|+
name|name
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addChild (Node child)
specifier|public
specifier|synchronized
name|boolean
name|addChild
parameter_list|(
name|Node
name|child
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|child
operator|instanceof
name|MachineNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only MachineNode can be added to RackNode"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
return|;
block|}
comment|/**    * Get the machine nodes that belong to the rack.    * @return The machine nodes that belong to the rack.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|getMachinesInRack ()
specifier|public
name|Set
argument_list|<
name|MachineNode
argument_list|>
name|getMachinesInRack
parameter_list|()
block|{
return|return
call|(
name|Set
argument_list|<
name|MachineNode
argument_list|>
call|)
argument_list|(
name|Set
argument_list|)
name|getChildren
argument_list|()
return|;
block|}
block|}
end_class

end_unit

