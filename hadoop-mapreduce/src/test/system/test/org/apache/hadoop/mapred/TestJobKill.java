begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|MRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|testjar
operator|.
name|JobKillCommitter
import|;
end_import

begin_class
DECL|class|TestJobKill
specifier|public
class|class
name|TestJobKill
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJobKill
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|wovenClient
specifier|private
name|JTProtocol
name|wovenClient
init|=
literal|null
decl_stmt|;
DECL|field|outDir
specifier|private
specifier|static
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"output"
argument_list|)
decl_stmt|;
DECL|field|inDir
specifier|private
specifier|static
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"input"
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MRCluster
name|cluster
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|MRCluster
operator|.
name|createCluster
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|fs
operator|=
name|inDir
operator|.
name|getFileSystem
argument_list|(
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|create
argument_list|(
name|inDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|inDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/*    * The test case intention is to test the job failure due to system    * exceptions, so the exceptions are thrown intentionally and the job is    * verified for failure. At the end of the test, the verification is made    * that the success file is not present in the hdfs location. This is because    * the success file only should exist if the actual job had succeeded.     *     * @throws Exception in a case of test errors    */
annotation|@
name|Test
DECL|method|testSystemJobKill ()
specifier|public
name|void
name|testSystemJobKill
parameter_list|()
throws|throws
name|Exception
block|{
name|wovenClient
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MAX_ATTEMPTS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// fail the mapper job
name|failJob
argument_list|(
name|conf
argument_list|,
name|JobKillCommitter
operator|.
name|CommitterWithNoError
operator|.
name|class
argument_list|,
literal|"JobMapperFail"
argument_list|,
name|JobKillCommitter
operator|.
name|MapperFail
operator|.
name|class
argument_list|,
name|JobKillCommitter
operator|.
name|ReducerPass
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// fail the reducer job
name|failJob
argument_list|(
name|conf
argument_list|,
name|JobKillCommitter
operator|.
name|CommitterWithNoError
operator|.
name|class
argument_list|,
literal|"JobReducerFail"
argument_list|,
name|JobKillCommitter
operator|.
name|MapperPass
operator|.
name|class
argument_list|,
name|JobKillCommitter
operator|.
name|ReducerFail
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// fail the set up job
name|failJob
argument_list|(
name|conf
argument_list|,
name|JobKillCommitter
operator|.
name|CommitterWithFailSetup
operator|.
name|class
argument_list|,
literal|"JobSetupFail"
argument_list|,
name|JobKillCommitter
operator|.
name|MapperPass
operator|.
name|class
argument_list|,
name|JobKillCommitter
operator|.
name|ReducerPass
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// fail the clean up job
name|failJob
argument_list|(
name|conf
argument_list|,
name|JobKillCommitter
operator|.
name|CommitterWithFailCleanup
operator|.
name|class
argument_list|,
literal|"JobCleanupFail"
argument_list|,
name|JobKillCommitter
operator|.
name|MapperPass
operator|.
name|class
argument_list|,
name|JobKillCommitter
operator|.
name|ReducerPass
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|failJob (Configuration conf, Class<? extends OutputCommitter> theClass, String confName, Class<? extends Mapper> mapClass, Class<? extends Reducer> redClass, boolean isUserKill)
specifier|private
name|void
name|failJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputCommitter
argument_list|>
name|theClass
parameter_list|,
name|String
name|confName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
name|mapClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Reducer
argument_list|>
name|redClass
parameter_list|,
name|boolean
name|isUserKill
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
name|confName
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|JobKillCommitter
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|mapClass
argument_list|)
expr_stmt|;
name|job
operator|.
name|setCombinerClass
argument_list|(
name|redClass
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|redClass
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|JobConf
name|jconf
init|=
operator|new
name|JobConf
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|JobKillCommitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|jconf
operator|.
name|setOutputCommitter
argument_list|(
name|theClass
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isUserKill
condition|)
block|{
name|RunningJob
name|rJob
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|submitJob
argument_list|(
name|jconf
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|rJob
operator|.
name|getID
argument_list|()
decl_stmt|;
name|JobInfo
name|jInfo
init|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job is not in PREP state"
argument_list|,
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|PREP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//user kill job
name|RunningJob
name|rJob
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|submitJob
argument_list|(
name|jconf
argument_list|)
decl_stmt|;
name|JobInfo
name|info
init|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Job Info is null"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|JobID
name|id
init|=
name|rJob
operator|.
name|getID
argument_list|()
decl_stmt|;
while|while
condition|(
name|info
operator|.
name|runningMaps
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|info
operator|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|rJob
operator|.
name|killJob
argument_list|()
expr_stmt|;
block|}
name|checkCleanup
argument_list|(
name|jconf
argument_list|)
expr_stmt|;
name|deleteOutputDir
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test is used to kill the job by explicity calling the kill api    * and making sure the clean up happens    * @throws Exception    */
annotation|@
name|Test
DECL|method|testUserJobKill ()
specifier|public
name|void
name|testUserJobKill
parameter_list|()
throws|throws
name|Exception
block|{
name|wovenClient
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MAX_ATTEMPTS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// fail the mapper job
name|failJob
argument_list|(
name|conf
argument_list|,
name|JobKillCommitter
operator|.
name|CommitterWithNoError
operator|.
name|class
argument_list|,
literal|"JobUserKill"
argument_list|,
name|JobKillCommitter
operator|.
name|MapperPassSleep
operator|.
name|class
argument_list|,
name|JobKillCommitter
operator|.
name|ReducerPass
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|checkCleanup (JobConf conf)
specifier|private
name|void
name|checkCleanup
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|outDir
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|outDir
argument_list|)
condition|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|outDir
argument_list|,
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
argument_list|)
decl_stmt|;
comment|// check to make sure the success file is not there since the job
comment|// failed.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The success file is present when the job failed"
argument_list|,
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|deleteOutputDir ()
specifier|private
name|void
name|deleteOutputDir
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

