begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.test.system
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|AbstractDaemonClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|AbstractDaemonCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|ClusterProcessManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|HadoopDaemonRemoteCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|MultiUserHadoopDaemonRemoteCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|RemoteProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|HadoopDaemonRemoteCluster
operator|.
name|HadoopDaemonInfo
import|;
end_import

begin_comment
comment|/**  * Concrete AbstractDaemonCluster representing a Map-Reduce cluster.  *   */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|MRCluster
specifier|public
class|class
name|MRCluster
extends|extends
name|AbstractDaemonCluster
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MRCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CLUSTER_PROCESS_MGR_IMPL
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_PROCESS_MGR_IMPL
init|=
literal|"test.system.mr.clusterprocess.impl.class"
decl_stmt|;
comment|/**    * Key is used to to point to the file containing hostnames of tasktrackers    */
DECL|field|CONF_HADOOP_TT_HOSTFILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CONF_HADOOP_TT_HOSTFILE_NAME
init|=
literal|"test.system.hdrc.tt.hostfile"
decl_stmt|;
DECL|field|mrDaemonInfos
specifier|private
specifier|static
name|List
argument_list|<
name|HadoopDaemonInfo
argument_list|>
name|mrDaemonInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|HadoopDaemonInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|TT_hostFileName
specifier|private
specifier|static
name|String
name|TT_hostFileName
decl_stmt|;
DECL|field|jtHostName
specifier|private
specifier|static
name|String
name|jtHostName
decl_stmt|;
DECL|field|SYSTEM_TEST_FILE
specifier|private
specifier|static
specifier|final
name|String
name|SYSTEM_TEST_FILE
init|=
literal|"system-test.xml"
decl_stmt|;
DECL|enum|Role
DECL|enumConstant|JT
DECL|enumConstant|TT
specifier|protected
enum|enum
name|Role
block|{
name|JT
block|,
name|TT
block|}
empty_stmt|;
static|static
block|{
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"mapred-default.xml"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"mapred-site.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|MRCluster (Configuration conf, ClusterProcessManager rCluster)
specifier|private
name|MRCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ClusterProcessManager
name|rCluster
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|rCluster
argument_list|)
expr_stmt|;
block|}
comment|/**    * Factory method to create an instance of the Map-Reduce cluster.<br/>    *     * @param conf    *          contains all required parameter to create cluster.    * @return a cluster instance to be managed.    * @throws Exception    */
DECL|method|createCluster (Configuration conf)
specifier|public
specifier|static
name|MRCluster
name|createCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|addResource
argument_list|(
name|SYSTEM_TEST_FILE
argument_list|)
expr_stmt|;
name|TT_hostFileName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|CONF_HADOOP_TT_HOSTFILE_NAME
argument_list|,
literal|"slaves"
argument_list|)
expr_stmt|;
name|String
name|jtHostPort
init|=
name|conf
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|)
decl_stmt|;
if|if
condition|(
name|jtHostPort
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
operator|+
literal|"is not set or "
operator|+
name|SYSTEM_TEST_FILE
operator|+
literal|" hasn't been found."
argument_list|)
throw|;
block|}
name|jtHostName
operator|=
name|jtHostPort
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|mrDaemonInfos
operator|.
name|add
argument_list|(
operator|new
name|HadoopDaemonInfo
argument_list|(
literal|"jobtracker"
argument_list|,
name|Role
operator|.
name|JT
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|jtHostName
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mrDaemonInfos
operator|.
name|add
argument_list|(
operator|new
name|HadoopDaemonInfo
argument_list|(
literal|"tasktracker"
argument_list|,
name|Role
operator|.
name|TT
argument_list|,
name|TT_hostFileName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|implKlass
init|=
name|conf
operator|.
name|get
argument_list|(
name|CLUSTER_PROCESS_MGR_IMPL
argument_list|)
decl_stmt|;
if|if
condition|(
name|implKlass
operator|==
literal|null
operator|||
name|implKlass
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|implKlass
operator|=
name|MRProcessManager
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Class
argument_list|<
name|ClusterProcessManager
argument_list|>
name|klass
init|=
operator|(
name|Class
argument_list|<
name|ClusterProcessManager
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|implKlass
argument_list|)
decl_stmt|;
name|ClusterProcessManager
name|clusterProcessMgr
init|=
name|klass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created ClusterProcessManager as "
operator|+
name|implKlass
argument_list|)
expr_stmt|;
name|clusterProcessMgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|MRCluster
argument_list|(
name|conf
argument_list|,
name|clusterProcessMgr
argument_list|)
return|;
block|}
DECL|method|createJTClient (RemoteProcess jtDaemon)
specifier|protected
name|JTClient
name|createJTClient
parameter_list|(
name|RemoteProcess
name|jtDaemon
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JTClient
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|jtDaemon
argument_list|)
return|;
block|}
DECL|method|createTTClient (RemoteProcess ttDaemon)
specifier|protected
name|TTClient
name|createTTClient
parameter_list|(
name|RemoteProcess
name|ttDaemon
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TTClient
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ttDaemon
argument_list|)
return|;
block|}
DECL|method|getJTClient ()
specifier|public
name|JTClient
name|getJTClient
parameter_list|()
block|{
name|Iterator
argument_list|<
name|AbstractDaemonClient
argument_list|>
name|it
init|=
name|getDaemons
argument_list|()
operator|.
name|get
argument_list|(
name|Role
operator|.
name|JT
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|(
name|JTClient
operator|)
name|it
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|getTTClients ()
specifier|public
name|List
argument_list|<
name|TTClient
argument_list|>
name|getTTClients
parameter_list|()
block|{
return|return
operator|(
name|List
operator|)
name|getDaemons
argument_list|()
operator|.
name|get
argument_list|(
name|Role
operator|.
name|TT
argument_list|)
return|;
block|}
DECL|method|getTTClient (String hostname)
specifier|public
name|TTClient
name|getTTClient
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
for|for
control|(
name|TTClient
name|c
range|:
name|getTTClients
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getHostName
argument_list|()
operator|.
name|equals
argument_list|(
name|hostname
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|ensureClean ()
specifier|public
name|void
name|ensureClean
parameter_list|()
throws|throws
name|IOException
block|{
comment|//TODO: ensure that no jobs/tasks are running
comment|//restart the cluster if cleanup fails
name|JTClient
name|jtClient
init|=
name|getJTClient
argument_list|()
decl_stmt|;
name|JobInfo
index|[]
name|jobs
init|=
name|jtClient
operator|.
name|getProxy
argument_list|()
operator|.
name|getAllJobInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|JobInfo
name|job
range|:
name|jobs
control|)
block|{
name|jtClient
operator|.
name|killJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createClient ( RemoteProcess process)
specifier|protected
name|AbstractDaemonClient
name|createClient
parameter_list|(
name|RemoteProcess
name|process
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Role
operator|.
name|JT
operator|.
name|equals
argument_list|(
name|process
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|createJTClient
argument_list|(
name|process
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Role
operator|.
name|TT
operator|.
name|equals
argument_list|(
name|process
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|createTTClient
argument_list|(
name|process
argument_list|)
return|;
block|}
else|else
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Role: "
operator|+
name|process
operator|.
name|getRole
argument_list|()
operator|+
literal|"  is not "
operator|+
literal|"applicable to MRCluster"
argument_list|)
throw|;
block|}
DECL|class|MRProcessManager
specifier|public
specifier|static
class|class
name|MRProcessManager
extends|extends
name|HadoopDaemonRemoteCluster
block|{
DECL|method|MRProcessManager ()
specifier|public
name|MRProcessManager
parameter_list|()
block|{
name|super
argument_list|(
name|mrDaemonInfos
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MultiMRProcessManager
specifier|public
specifier|static
class|class
name|MultiMRProcessManager
extends|extends
name|MultiUserHadoopDaemonRemoteCluster
block|{
DECL|method|MultiMRProcessManager ()
specifier|public
name|MultiMRProcessManager
parameter_list|()
block|{
name|super
argument_list|(
name|mrDaemonInfos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

