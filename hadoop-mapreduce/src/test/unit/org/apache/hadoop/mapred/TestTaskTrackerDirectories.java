begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * Tests for the correct behavior of the TaskTracker starting up with  * respect to its local-disk directories.  */
end_comment

begin_class
DECL|class|TestTaskTrackerDirectories
specifier|public
class|class
name|TestTaskTrackerDirectories
block|{
DECL|field|TEST_DIR
specifier|private
specifier|final
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
literal|"build/test/testmapredlocaldir"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|deleteTestDir ()
specifier|public
name|void
name|deleteTestDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Could not delete "
operator|+
name|TEST_DIR
argument_list|,
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatesLocalDirs ()
specifier|public
name|void
name|testCreatesLocalDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
index|[]
name|dirs
init|=
operator|new
name|String
index|[]
block|{
name|TEST_DIR
operator|+
literal|"/local1"
block|,
name|TEST_DIR
operator|+
literal|"/local2"
block|}
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
name|setupTaskController
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|checkDir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFixesLocalDirPermissions ()
specifier|public
name|void
name|testFixesLocalDirPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
index|[]
name|dirs
init|=
operator|new
name|String
index|[]
block|{
name|TEST_DIR
operator|+
literal|"/badperms"
block|}
decl_stmt|;
operator|new
name|File
argument_list|(
name|dirs
index|[
literal|0
index|]
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|chmod
argument_list|(
name|dirs
index|[
literal|0
index|]
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
name|setupTaskController
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|checkDir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreatesLogDir ()
specifier|public
name|void
name|testCreatesLogDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dir
init|=
name|TaskLog
operator|.
name|getUserLogDir
argument_list|()
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|setupTaskController
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|checkDir
argument_list|(
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the log dir can't be created, the TT should fail to start since    * it will be unable to localize or run tasks.    */
annotation|@
name|Test
DECL|method|testCantCreateLogDir ()
specifier|public
name|void
name|testCantCreateLogDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dir
init|=
name|TaskLog
operator|.
name|getUserLogDir
argument_list|()
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Making file in place of log dir"
argument_list|,
name|dir
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|setupTaskController
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Got expected exception"
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFixesLogDirPermissions ()
specifier|public
name|void
name|testFixesLogDirPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dir
init|=
name|TaskLog
operator|.
name|getUserLogDir
argument_list|()
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|chmod
argument_list|(
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|setupTaskController
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|checkDir
argument_list|(
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupTaskController (Configuration conf)
specifier|private
name|void
name|setupTaskController
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskController
name|tc
init|=
operator|new
name|DefaultTaskController
argument_list|()
decl_stmt|;
name|tc
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|tc
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
DECL|method|checkDir (String dir)
specifier|private
name|void
name|checkDir
parameter_list|(
name|String
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|RawLocalFileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|+
literal|"should exist"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dir
operator|+
literal|" has correct permissions"
argument_list|,
literal|0755
argument_list|,
name|stat
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

