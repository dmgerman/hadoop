begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|RandomWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_class
DECL|class|TestMapredHeartbeat
specifier|public
class|class
name|TestMapredHeartbeat
extends|extends
name|TestCase
block|{
DECL|method|testJobDirCleanup ()
specifier|public
name|void
name|testJobDirCleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// test the default heartbeat interval
name|int
name|taskTrackers
init|=
literal|2
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
literal|"file:///"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|jc
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getTaskTrackers
argument_list|()
operator|!=
name|taskTrackers
condition|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|JTConfig
operator|.
name|JT_HEARTBEAT_INTERVAL_MIN_DEFAULT
argument_list|,
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getNextHeartbeatInterval
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// test configured heartbeat interval
name|taskTrackers
operator|=
literal|5
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JTConfig
operator|.
name|JT_HEARTBEATS_IN_SECOND
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
literal|"file:///"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|jc
operator|=
operator|new
name|JobClient
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|jc
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getTaskTrackers
argument_list|()
operator|!=
name|taskTrackers
condition|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|taskTrackers
operator|*
literal|1000
argument_list|,
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getNextHeartbeatInterval
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// test configured heartbeat interval is capped with min value
name|taskTrackers
operator|=
literal|5
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JTConfig
operator|.
name|JT_HEARTBEATS_IN_SECOND
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
literal|"file:///"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|jc
operator|=
operator|new
name|JobClient
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|jc
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getTaskTrackers
argument_list|()
operator|!=
name|taskTrackers
condition|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|JTConfig
operator|.
name|JT_HEARTBEAT_INTERVAL_MIN_DEFAULT
argument_list|,
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getNextHeartbeatInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testOutOfBandHeartbeats ()
specifier|public
name|void
name|testOutOfBandHeartbeats
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|taskTrackers
init|=
literal|1
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setFloat
argument_list|(
name|JTConfig
operator|.
name|JT_HEARTBEATS_SCALING_FACTOR
argument_list|,
literal|30.0f
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setBoolean
argument_list|(
name|TTConfig
operator|.
name|TT_OUTOFBAND_HEARBEAT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
name|dfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TestMiniMRDFSSort
operator|.
name|runRandomWriter
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
literal|"rw"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|int
name|expectedRuntimeSecs
init|=
literal|120
decl_stmt|;
specifier|final
name|int
name|runTimeSecs
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Runtime is "
operator|+
name|runTimeSecs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Actual runtime "
operator|+
name|runTimeSecs
operator|+
literal|"s not less than expected "
operator|+
literal|"runtime of "
operator|+
name|expectedRuntimeSecs
operator|+
literal|"s!"
argument_list|,
literal|true
argument_list|,
operator|(
name|runTimeSecs
operator|<=
literal|120
operator|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

