begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Regression test for MAPREDUCE-913  */
end_comment

begin_class
DECL|class|TestTaskTrackerSlotManagement
specifier|public
class|class
name|TestTaskTrackerSlotManagement
block|{
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"tt_slots"
argument_list|)
decl_stmt|;
DECL|field|CACHE_FILE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|CACHE_FILE_PATH
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test.txt"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|/**    * Test-setup. Create the cache-file.    *     * @throws Exception    */
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|TEST_DIR
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|myFile
init|=
operator|new
name|File
argument_list|(
name|CACHE_FILE_PATH
argument_list|)
decl_stmt|;
name|myFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test-cleanup. Remove the cache-file.    *     * @throws Exception    */
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|myFile
init|=
operator|new
name|File
argument_list|(
name|CACHE_FILE_PATH
argument_list|)
decl_stmt|;
name|myFile
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|TEST_DIR
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test case to test addition of free slot when the job fails localization due    * to cache file being modified after the job has started running.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testFreeingOfTaskSlots ()
specifier|public
name|void
name|testFreeingOfTaskSlots
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a cluster with no task tracker.
name|MiniMRCluster
name|mrCluster
init|=
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// set the debug script so that TT tries to launch the debug
comment|// script for failed tasks.
name|conf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|MAP_DEBUG_SCRIPT
argument_list|,
literal|"/bin/echo"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|REDUCE_DEBUG_SCRIPT
argument_list|,
literal|"/bin/echo"
argument_list|)
expr_stmt|;
name|Job
name|j
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"in"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"out"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Add the local filed created to the cache files of the job
name|j
operator|.
name|addCacheFile
argument_list|(
operator|new
name|URI
argument_list|(
name|CACHE_FILE_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|j
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|j
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Submit the job and return immediately.
comment|// Job submit now takes care setting the last
comment|// modified time of the cache file.
name|j
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Look up the file and modify the modification time.
name|File
name|myFile
init|=
operator|new
name|File
argument_list|(
name|CACHE_FILE_PATH
argument_list|)
decl_stmt|;
name|myFile
operator|.
name|setLastModified
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
comment|// Start up the task tracker after the time has been changed.
name|mrCluster
operator|.
name|startTaskTracker
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Now wait for the job to fail.
name|j
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Job successfully completed."
argument_list|,
name|j
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|cluster
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
comment|// validate number of slots in JobTracker
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getOccupiedMapSlots
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getOccupiedReduceSlots
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate number of slots in TaskTracker
name|TaskTracker
name|tt
init|=
name|mrCluster
operator|.
name|getTaskTrackerRunner
argument_list|(
literal|0
argument_list|)
operator|.
name|getTaskTracker
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metrics
operator|.
name|getMapSlotCapacity
argument_list|()
argument_list|,
name|tt
operator|.
name|getFreeSlots
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metrics
operator|.
name|getReduceSlotCapacity
argument_list|()
argument_list|,
name|tt
operator|.
name|getFreeSlots
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

