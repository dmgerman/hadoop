begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterWithLinuxTaskController
operator|.
name|MyLinuxTaskController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|TestTrackerDistributedCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Test the DistributedCacheManager when LinuxTaskController is used.  *   */
end_comment

begin_class
DECL|class|TestTrackerDistributedCacheManagerWithLinuxTaskController
specifier|public
class|class
name|TestTrackerDistributedCacheManagerWithLinuxTaskController
extends|extends
name|TestTrackerDistributedCacheManager
block|{
DECL|field|configFile
specifier|private
name|File
name|configFile
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTrackerDistributedCacheManagerWithLinuxTaskController
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|ClusterWithLinuxTaskController
operator|.
name|shouldRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|TEST_ROOT_DIR
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
name|TestTrackerDistributedCacheManagerWithLinuxTaskController
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|taskController
operator|=
operator|new
name|MyLinuxTaskController
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ClusterWithLinuxTaskController
operator|.
name|TASKCONTROLLER_PATH
argument_list|)
decl_stmt|;
name|String
name|execPath
init|=
name|path
operator|+
literal|"/task-controller"
decl_stmt|;
operator|(
operator|(
name|MyLinuxTaskController
operator|)
name|taskController
operator|)
operator|.
name|setTaskControllerExe
argument_list|(
name|execPath
argument_list|)
expr_stmt|;
name|taskController
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|taskController
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|refreshConf (Configuration conf)
specifier|protected
name|void
name|refreshConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|refreshConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ClusterWithLinuxTaskController
operator|.
name|TASKCONTROLLER_PATH
argument_list|)
decl_stmt|;
name|configFile
operator|=
name|ClusterWithLinuxTaskController
operator|.
name|createTaskControllerConf
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|ClusterWithLinuxTaskController
operator|.
name|shouldRun
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|configFile
operator|!=
literal|null
condition|)
block|{
name|configFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|canRun ()
specifier|protected
name|boolean
name|canRun
parameter_list|()
block|{
return|return
name|ClusterWithLinuxTaskController
operator|.
name|shouldRun
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getJobOwnerName ()
specifier|protected
name|String
name|getJobOwnerName
parameter_list|()
block|{
name|String
name|ugi
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ClusterWithLinuxTaskController
operator|.
name|TASKCONTROLLER_UGI
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|ugi
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
return|return
name|userName
return|;
block|}
annotation|@
name|Override
DECL|method|checkFilePermissions (Path[] localCacheFiles)
specifier|protected
name|void
name|checkFilePermissions
parameter_list|(
name|Path
index|[]
name|localCacheFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|userName
init|=
name|getJobOwnerName
argument_list|()
decl_stmt|;
name|String
name|filePermissions
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
condition|?
literal|"-rwxrwx---"
else|:
literal|"-r-xrwx---"
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|localCacheFiles
control|)
block|{
comment|// First make sure that the cache file has proper permissions.
name|TestTaskTrackerLocalization
operator|.
name|checkFilePermissions
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|filePermissions
argument_list|,
name|userName
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
comment|// Now. make sure that all the path components also have proper
comment|// permissions.
name|checkPermissionOnPathComponents
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param cachedFilePath    * @param userName    * @throws IOException    */
DECL|method|checkPermissionOnPathComponents (String cachedFilePath, String userName)
specifier|private
name|void
name|checkPermissionOnPathComponents
parameter_list|(
name|String
name|cachedFilePath
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The trailing distcache/file/... string
name|String
name|trailingStringForFirstFile
init|=
name|cachedFilePath
operator|.
name|replaceFirst
argument_list|(
name|ROOT_MAPRED_LOCAL_DIR
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"0_[0-"
operator|+
operator|(
name|numLocalDirs
operator|-
literal|1
operator|)
operator|+
literal|"]"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|userName
argument_list|)
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Trailing path for cacheFirstFile is : "
operator|+
name|trailingStringForFirstFile
argument_list|)
expr_stmt|;
comment|// The leading mapreduce.cluster.local.dir/0_[0-n]/taskTracker/$user string.
name|String
name|leadingStringForFirstFile
init|=
name|cachedFilePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cachedFilePath
operator|.
name|lastIndexOf
argument_list|(
name|trailingStringForFirstFile
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Leading path for cacheFirstFile is : "
operator|+
name|leadingStringForFirstFile
argument_list|)
expr_stmt|;
name|String
name|dirPermissions
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
condition|?
literal|"drwxrws---"
else|:
literal|"dr-xrws---"
decl_stmt|;
comment|// Now check path permissions, starting with cache file's parent dir.
name|File
name|path
init|=
operator|new
name|File
argument_list|(
name|cachedFilePath
argument_list|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|path
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|equals
argument_list|(
name|leadingStringForFirstFile
argument_list|)
condition|)
block|{
name|TestTaskTrackerLocalization
operator|.
name|checkFilePermissions
argument_list|(
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dirPermissions
argument_list|,
name|userName
argument_list|,
name|ClusterWithLinuxTaskController
operator|.
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

