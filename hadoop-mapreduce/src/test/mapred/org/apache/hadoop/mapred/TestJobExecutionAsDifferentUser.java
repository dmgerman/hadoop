begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * Test a java-based mapred job with LinuxTaskController running the jobs as a  * user different from the user running the cluster. See  * {@link ClusterWithLinuxTaskController}  */
end_comment

begin_class
DECL|class|TestJobExecutionAsDifferentUser
specifier|public
class|class
name|TestJobExecutionAsDifferentUser
extends|extends
name|ClusterWithLinuxTaskController
block|{
DECL|method|testJobExecution ()
specifier|public
name|void
name|testJobExecution
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|startCluster
argument_list|()
expr_stmt|;
name|jobOwner
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"output"
argument_list|)
decl_stmt|;
name|RunningJob
name|job
decl_stmt|;
comment|// Run a job with zero maps/reduces
name|job
operator|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|getClusterConf
argument_list|()
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|assertOwnerShip
argument_list|(
name|outDir
argument_list|)
expr_stmt|;
comment|// Run a job with 1 map and zero reduces
name|job
operator|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|getClusterConf
argument_list|()
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|assertOwnerShip
argument_list|(
name|outDir
argument_list|)
expr_stmt|;
comment|// Run a normal job with maps/reduces
name|job
operator|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|getClusterConf
argument_list|()
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|assertOwnerShip
argument_list|(
name|outDir
argument_list|)
expr_stmt|;
comment|// Run a job with jvm reuse
name|JobConf
name|myConf
init|=
name|getClusterConf
argument_list|()
decl_stmt|;
name|myConf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|JVM_NUMTASKS_TORUN
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-m"
block|,
literal|"6"
block|,
literal|"-r"
block|,
literal|"3"
block|,
literal|"-mt"
block|,
literal|"1000"
block|,
literal|"-rt"
block|,
literal|"1000"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|myConf
argument_list|,
operator|new
name|SleepJob
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnvironment ()
specifier|public
name|void
name|testEnvironment
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|startCluster
argument_list|()
expr_stmt|;
name|jobOwner
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|TestMiniMRChildTask
name|childTask
init|=
operator|new
name|TestMiniMRChildTask
argument_list|()
decl_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"input1"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"output1"
argument_list|)
decl_stmt|;
try|try
block|{
name|childTask
operator|.
name|runTestTaskEnv
argument_list|(
name|getClusterConf
argument_list|()
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"IOException thrown while running enviroment test."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileSystem
name|outFs
init|=
name|outDir
operator|.
name|getFileSystem
argument_list|(
name|getClusterConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|outFs
operator|.
name|exists
argument_list|(
name|outDir
argument_list|)
condition|)
block|{
name|assertOwnerShip
argument_list|(
name|outDir
argument_list|)
expr_stmt|;
name|outFs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Output directory does not exist"
operator|+
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** Ensure that SIGQUIT can be properly sent by the LinuxTaskController    * if a task times out.    */
DECL|method|testTimeoutStackTrace ()
specifier|public
name|void
name|testTimeoutStackTrace
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRun
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Run a job that should timeout and trigger a SIGQUIT.
name|startCluster
argument_list|()
expr_stmt|;
name|jobOwner
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
name|getClusterConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|TASK_TIMEOUT
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Job
operator|.
name|COMPLETION_POLL_INTERVAL_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|30000
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|prevNumSigQuits
init|=
name|MyLinuxTaskController
operator|.
name|attemptedSigQuits
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not detect a new SIGQUIT!"
argument_list|,
name|prevNumSigQuits
operator|<
name|MyLinuxTaskController
operator|.
name|attemptedSigQuits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A SIGQUIT attempt failed!"
argument_list|,
literal|0
argument_list|,
name|MyLinuxTaskController
operator|.
name|failedSigQuits
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

