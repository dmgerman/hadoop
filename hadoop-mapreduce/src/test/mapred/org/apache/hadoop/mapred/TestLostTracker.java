begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
operator|.
name|FakeClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_comment
comment|/**  * A test to verify JobTracker's resilience to lost task trackers.   *   */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|TestLostTracker
specifier|public
class|class
name|TestLostTracker
extends|extends
name|TestCase
block|{
DECL|field|job
name|FakeJobInProgress
name|job
decl_stmt|;
DECL|field|jobTracker
specifier|static
name|FakeJobTracker
name|jobTracker
decl_stmt|;
DECL|field|clock
specifier|static
name|FakeClock
name|clock
decl_stmt|;
DECL|field|trackers
specifier|static
name|String
name|trackers
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"tracker_tracker1:1000"
block|,
literal|"tracker_tracker2:1000"
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_TRACKER_EXPIRY_INTERVAL
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_TRACKER_BLACKLISTS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|jobTracker
operator|=
operator|new
name|FakeJobTracker
argument_list|(
name|conf
argument_list|,
operator|(
name|clock
operator|=
operator|new
name|FakeClock
argument_list|()
operator|)
argument_list|,
name|trackers
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|startExpireTrackersThread
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|jobTracker
operator|.
name|stopExpireTrackersThread
argument_list|()
expr_stmt|;
block|}
DECL|method|testLostTracker ()
specifier|public
name|void
name|testLostTracker
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Tracker 0 contacts JT
name|FakeObjectUtilities
operator|.
name|establishFirstContact
argument_list|(
name|jobTracker
argument_list|,
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|TaskAttemptID
index|[]
name|tid
init|=
operator|new
name|TaskAttemptID
index|[
literal|2
index|]
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
comment|// Tracker 0 gets the map task
name|tid
index|[
literal|0
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|tid
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Advance clock. Tracker 0 would have got lost
name|clock
operator|.
name|advance
argument_list|(
literal|8
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|checkExpiredTrackers
argument_list|()
expr_stmt|;
comment|// Tracker 1 establishes contact with JT
name|FakeObjectUtilities
operator|.
name|establishFirstContact
argument_list|(
name|jobTracker
argument_list|,
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Tracker1 should get assigned the lost map task
name|tid
index|[
literal|1
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Map Task from Lost Tracker did not get reassigned"
argument_list|,
name|tid
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Task ID of reassigned map task does not match"
argument_list|,
name|tid
index|[
literal|0
index|]
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tid
index|[
literal|1
index|]
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|tid
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test whether the tracker gets blacklisted after its lost.    */
DECL|method|testLostTrackerBeforeBlacklisting ()
specifier|public
name|void
name|testLostTrackerBeforeBlacklisting
parameter_list|()
throws|throws
name|Exception
block|{
name|FakeObjectUtilities
operator|.
name|establishFirstContact
argument_list|(
name|jobTracker
argument_list|,
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|TaskAttemptID
index|[]
name|tid
init|=
operator|new
name|TaskAttemptID
index|[
literal|3
index|]
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAX_TASK_FAILURES_PER_TRACKER
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
name|job
operator|.
name|setClusterSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// Tracker 0 gets the map task
name|tid
index|[
literal|0
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|tid
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// validate the total tracker count
name|assertEquals
argument_list|(
literal|"Active tracker count mismatch"
argument_list|,
literal|1
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|(
literal|false
argument_list|)
operator|.
name|getTaskTrackers
argument_list|()
argument_list|)
expr_stmt|;
comment|// lose the tracker
name|clock
operator|.
name|advance
argument_list|(
literal|1100
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|checkExpiredTrackers
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Tracker 0 not lost"
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|(
literal|false
argument_list|)
operator|.
name|getActiveTrackerNames
argument_list|()
operator|.
name|contains
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate the total tracker count
name|assertEquals
argument_list|(
literal|"Active tracker count mismatch"
argument_list|,
literal|0
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|(
literal|false
argument_list|)
operator|.
name|getTaskTrackers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Tracker 1 establishes contact with JT
name|FakeObjectUtilities
operator|.
name|establishFirstContact
argument_list|(
name|jobTracker
argument_list|,
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Tracker1 should get assigned the lost map task
name|tid
index|[
literal|1
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Map Task from Lost Tracker did not get reassigned"
argument_list|,
name|tid
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Task ID of reassigned map task does not match"
argument_list|,
name|tid
index|[
literal|0
index|]
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tid
index|[
literal|1
index|]
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// finish the map task
name|job
operator|.
name|finishTask
argument_list|(
name|tid
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// finish the reduce task
name|tid
index|[
literal|2
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|tid
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// check if job is successful
name|assertEquals
argument_list|(
literal|"Job not successful"
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the tracker is lost
comment|// validate the total tracker count
name|assertEquals
argument_list|(
literal|"Active tracker count mismatch"
argument_list|,
literal|1
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|(
literal|false
argument_list|)
operator|.
name|getTaskTrackers
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate blacklisted count .. since we lost one blacklisted tracker
name|assertEquals
argument_list|(
literal|"Blacklisted tracker count mismatch"
argument_list|,
literal|0
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|(
literal|false
argument_list|)
operator|.
name|getBlacklistedTrackers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test whether the tracker gets lost after its blacklisted.    */
DECL|method|testLostTrackerAfterBlacklisting ()
specifier|public
name|void
name|testLostTrackerAfterBlacklisting
parameter_list|()
throws|throws
name|Exception
block|{
name|FakeObjectUtilities
operator|.
name|establishFirstContact
argument_list|(
name|jobTracker
argument_list|,
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|600
argument_list|)
expr_stmt|;
name|TaskAttemptID
index|[]
name|tid
init|=
operator|new
name|TaskAttemptID
index|[
literal|2
index|]
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAX_TASK_FAILURES_PER_TRACKER
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
name|job
operator|.
name|setClusterSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// check if the tracker count is correct
name|assertEquals
argument_list|(
literal|"Active tracker count mismatch"
argument_list|,
literal|1
argument_list|,
name|jobTracker
operator|.
name|taskTrackers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Tracker 0 gets the map task
name|tid
index|[
literal|0
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Fail the task
name|job
operator|.
name|failTask
argument_list|(
name|tid
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Tracker 1 establishes contact with JT
name|FakeObjectUtilities
operator|.
name|establishFirstContact
argument_list|(
name|jobTracker
argument_list|,
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// check if the tracker count is correct
name|assertEquals
argument_list|(
literal|"Active tracker count mismatch"
argument_list|,
literal|2
argument_list|,
name|jobTracker
operator|.
name|taskTrackers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Tracker 1 gets the map task
name|tid
index|[
literal|1
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Finish the task and also the job
name|job
operator|.
name|finishTask
argument_list|(
name|tid
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// check if job is successful
name|assertEquals
argument_list|(
literal|"Job not successful"
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the trackers 1 got blacklisted
name|assertTrue
argument_list|(
literal|"Tracker 0 not blacklisted"
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackers
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTaskTrackerName
argument_list|()
operator|.
name|equals
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the tracker count is correct
name|assertEquals
argument_list|(
literal|"Active tracker count mismatch"
argument_list|,
literal|2
argument_list|,
name|jobTracker
operator|.
name|taskTrackers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate blacklisted count
name|assertEquals
argument_list|(
literal|"Blacklisted tracker count mismatch"
argument_list|,
literal|1
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|(
literal|false
argument_list|)
operator|.
name|getBlacklistedTrackers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Advance clock. Tracker 0 should be lost
name|clock
operator|.
name|advance
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|checkExpiredTrackers
argument_list|()
expr_stmt|;
comment|// check if the task tracker is lost
name|assertFalse
argument_list|(
literal|"Tracker 0 not lost"
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|(
literal|false
argument_list|)
operator|.
name|getActiveTrackerNames
argument_list|()
operator|.
name|contains
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the lost tracker has removed from the jobtracker
name|assertEquals
argument_list|(
literal|"Active tracker count mismatch"
argument_list|,
literal|1
argument_list|,
name|jobTracker
operator|.
name|taskTrackers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate blacklisted count
name|assertEquals
argument_list|(
literal|"Blacklisted tracker count mismatch"
argument_list|,
literal|0
argument_list|,
name|jobTracker
operator|.
name|getClusterStatus
argument_list|(
literal|false
argument_list|)
operator|.
name|getBlacklistedTrackers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

