begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ShellBasedUnixGroupsMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDebugScript
specifier|public
class|class
name|TestDebugScript
block|{
comment|// base directory which is used by the debug script
DECL|field|BASE_DIR
specifier|private
specifier|static
specifier|final
name|String
name|BASE_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|// script directory which is passed as dummy input + where debugscript
comment|// is written.
DECL|field|SCRIPT_DIR
specifier|private
specifier|static
specifier|final
name|String
name|SCRIPT_DIR
init|=
operator|new
name|File
argument_list|(
name|BASE_DIR
argument_list|,
literal|"debugscript"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|// script which is used as debug script.
DECL|field|SCRIPT_FILE
specifier|private
specifier|static
specifier|final
name|String
name|SCRIPT_FILE
init|=
operator|new
name|File
argument_list|(
name|SCRIPT_DIR
argument_list|,
literal|"debugscript.sh"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|// making an assumption we have bash in path. Same as TaskLog.
comment|// The debug script just accesses the stderr file of the task
comment|// and does a 'cat' on it
DECL|field|SCRIPT_CONTENT
specifier|private
specifier|static
specifier|final
name|String
name|SCRIPT_CONTENT
init|=
literal|"cat $2"
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|setupDebugScriptDirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanupDebugScriptDirs
argument_list|()
expr_stmt|;
block|}
comment|/**    * Cleanup method which is used to delete the files folder which are generated    * by the testcase.    *     */
DECL|method|cleanupDebugScriptDirs ()
specifier|static
name|void
name|cleanupDebugScriptDirs
parameter_list|()
block|{
name|File
name|scriptFile
init|=
operator|new
name|File
argument_list|(
name|SCRIPT_FILE
argument_list|)
decl_stmt|;
name|scriptFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|File
name|scriptDir
init|=
operator|new
name|File
argument_list|(
name|SCRIPT_DIR
argument_list|)
decl_stmt|;
name|scriptDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**    * Setup method which is used to create necessary files and folder for the    * testcase.    *     * @throws Exception    */
DECL|method|setupDebugScriptDirs ()
specifier|static
name|void
name|setupDebugScriptDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|scriptDir
init|=
operator|new
name|File
argument_list|(
name|SCRIPT_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scriptDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|scriptDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|scriptDir
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scriptDir
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scriptDir
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|scriptFile
init|=
operator|new
name|File
argument_list|(
name|SCRIPT_FILE
argument_list|)
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|SCRIPT_CONTENT
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|scriptFile
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scriptFile
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Main test case which checks proper execution of the testcase.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testDebugScript ()
specifier|public
name|void
name|testDebugScript
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|TTConfig
operator|.
name|TT_SLEEP_TIME_BEFORE_SIG_KILL
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|MiniMRCluster
name|mrCluster
init|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|SCRIPT_DIR
argument_list|)
decl_stmt|;
name|Path
name|outputPath
init|=
operator|new
name|Path
argument_list|(
name|SCRIPT_DIR
argument_list|,
literal|"task_output"
argument_list|)
decl_stmt|;
comment|// Run a failing mapper so debug script is launched.
name|JobID
name|jobId
init|=
name|runFailingMapJob
argument_list|(
name|mrCluster
operator|.
name|createJobConf
argument_list|()
argument_list|,
name|inputPath
argument_list|,
name|outputPath
argument_list|)
decl_stmt|;
comment|// construct the task id of first map task of failmap
name|TaskAttemptID
name|taskId
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobId
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// verify if debug script was launched correctly and ran correctly.
name|verifyDebugScriptOutput
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Method which verifies if debug script ran and ran correctly.    *     * @param taskId    * @param expectedUser    *          expected user id from debug script    * @throws Exception    */
DECL|method|verifyDebugScriptOutput (TaskAttemptID taskId)
specifier|static
name|void
name|verifyDebugScriptOutput
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyDebugScriptOutput
argument_list|(
name|taskId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Method which verifies if debug script ran and ran correctly.    *     * @param taskId    * @param expectedUser    *          expected user id from debug script    * @param expectedPerms the expected permissions on the debugout file    * @throws Exception    */
DECL|method|verifyDebugScriptOutput (TaskAttemptID taskId, String expectedUser, String expectedGroup, String expectedPerms)
specifier|static
name|void
name|verifyDebugScriptOutput
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|String
name|expectedUser
parameter_list|,
name|String
name|expectedGroup
parameter_list|,
name|String
name|expectedPerms
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|output
init|=
name|TaskLog
operator|.
name|getRealTaskLogFileLocation
argument_list|(
name|taskId
argument_list|,
literal|false
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|DEBUGOUT
argument_list|)
decl_stmt|;
comment|// Check the presence of the output file if the script is to be run.
name|assertTrue
argument_list|(
literal|"Output file does not exists. DebugScript has not been run"
argument_list|,
name|output
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// slurp the output from file, which is one line
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|output
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|out
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
comment|// close the file.
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Check if there is any output
name|assertNotNull
argument_list|(
literal|"DebugScript didn't generate output."
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"failing map"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedPerms
operator|!=
literal|null
operator|&&
name|expectedUser
operator|!=
literal|null
condition|)
block|{
comment|//check whether the debugout file ownership/permissions are as expected
name|TestTaskTrackerLocalization
operator|.
name|checkFilePermissions
argument_list|(
name|output
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|expectedPerms
argument_list|,
name|expectedUser
argument_list|,
name|expectedGroup
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Method to run a failing mapper on a given Cluster.    *     * @param conf    *          the JobConf for the job    * @param inputPath    *          input path for the job.    * @param outputDir    *          output directory for job.    * @throws IOException    */
DECL|method|runFailingMapJob (JobConf conf, Path inputPath, Path outputDir)
specifier|static
name|JobID
name|runFailingMapJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|inputPath
parameter_list|,
name|Path
name|outputDir
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setMapDebugScript
argument_list|(
name|SCRIPT_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.committer.job.setup.cleanup.needed"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|RunningJob
name|rJob
init|=
name|UtilsForTests
operator|.
name|runJobFail
argument_list|(
name|conf
argument_list|,
name|inputPath
argument_list|,
name|outputDir
argument_list|)
decl_stmt|;
return|return
name|rJob
operator|.
name|getID
argument_list|()
return|;
block|}
block|}
end_class

end_unit

