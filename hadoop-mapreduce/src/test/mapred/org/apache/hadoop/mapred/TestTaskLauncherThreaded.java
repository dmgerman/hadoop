begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
operator|.
name|TaskInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
operator|.
name|TaskLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
operator|.
name|RunningJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests {@link TaskLauncherThreaded}  */
end_comment

begin_class
DECL|class|TestTaskLauncherThreaded
specifier|public
class|class
name|TestTaskLauncherThreaded
block|{
DECL|field|jobLocalizedCount
specifier|private
specifier|static
name|int
name|jobLocalizedCount
init|=
literal|0
decl_stmt|;
DECL|field|jobLaunchCount
specifier|private
specifier|static
name|int
name|jobLaunchCount
init|=
literal|0
decl_stmt|;
DECL|field|quitWaiting
specifier|private
specifier|static
name|boolean
name|quitWaiting
init|=
literal|false
decl_stmt|;
DECL|field|firstJobStarted
specifier|private
specifier|static
name|boolean
name|firstJobStarted
init|=
literal|false
decl_stmt|;
DECL|field|firstJobFinished
specifier|private
specifier|static
name|boolean
name|firstJobFinished
init|=
literal|false
decl_stmt|;
DECL|class|MyTaskTracker
specifier|private
specifier|static
class|class
name|MyTaskTracker
extends|extends
name|TaskTracker
block|{
comment|// stub out functions called from startNewTask
annotation|@
name|Override
DECL|method|localizeJob (TaskInProgress tip)
name|RunningJob
name|localizeJob
parameter_list|(
name|TaskInProgress
name|tip
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|firstJobStarted
operator|==
literal|false
condition|)
block|{
name|firstJobStarted
operator|=
literal|true
expr_stmt|;
while|while
condition|(
name|quitWaiting
operator|==
literal|false
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|firstJobFinished
operator|=
literal|true
expr_stmt|;
block|}
comment|// mock out a RunningJob
name|RunningJob
name|rjob
init|=
name|mock
argument_list|(
name|RunningJob
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rjob
operator|.
name|getJobConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
expr_stmt|;
name|jobLocalizedCount
operator|++
expr_stmt|;
return|return
name|rjob
return|;
block|}
annotation|@
name|Override
DECL|method|launchTaskForJob (TaskInProgress tip, JobConf jobConf, UserGroupInformation ugi)
specifier|protected
name|void
name|launchTaskForJob
parameter_list|(
name|TaskInProgress
name|tip
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
name|jobLaunchCount
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * Tests the case "task localizing doesn't block other tasks".    *    * Launches one task that simulates a task doing large localization,    * then starts a second task and verifies that second task is not    * blocked waiting behind the first task.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testLocalizationNotBlockingOtherTasks ()
specifier|public
name|void
name|testLocalizationNotBlockingOtherTasks
parameter_list|()
throws|throws
name|IOException
block|{
comment|// setup a TaskTracker
name|JobConf
name|ttConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|ttConf
operator|.
name|setInt
argument_list|(
literal|"mapred.tasktracker.map.tasks.maximum"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|TaskTracker
name|tt
init|=
operator|new
name|MyTaskTracker
argument_list|()
decl_stmt|;
name|tt
operator|.
name|runningJobs
operator|=
operator|new
name|TreeMap
argument_list|<
name|JobID
argument_list|,
name|TaskTracker
operator|.
name|RunningJob
argument_list|>
argument_list|()
expr_stmt|;
name|tt
operator|.
name|runningTasks
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskInProgress
argument_list|>
argument_list|()
expr_stmt|;
name|tt
operator|.
name|setIndexCache
argument_list|(
operator|new
name|IndexCache
argument_list|(
name|ttConf
argument_list|)
argument_list|)
expr_stmt|;
name|tt
operator|.
name|setTaskMemoryManagerEnabledFlag
argument_list|()
expr_stmt|;
comment|// start map-task launcher with four slots
name|TaskLauncher
name|mapLauncher
init|=
name|tt
operator|.
expr|new
name|TaskLauncher
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|mapLauncher
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// launch a task which simulates large localization
name|String
name|jtId
init|=
literal|"test"
decl_stmt|;
name|TaskAttemptID
name|attemptID
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|jtId
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
operator|new
name|MapTask
argument_list|(
literal|null
argument_list|,
name|attemptID
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|mapLauncher
operator|.
name|addToTaskQueue
argument_list|(
operator|new
name|LaunchTaskAction
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that task is added to runningTasks
name|TaskInProgress
name|runningTip
init|=
name|tt
operator|.
name|runningTasks
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|runningTip
argument_list|)
expr_stmt|;
comment|// wait for a while for the first task to start initializing
comment|// this loop waits at most for 30 seconds
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|firstJobStarted
operator|==
literal|true
condition|)
block|{
break|break;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// Now start a second task and make sure it doesn't wait while first one initializes
name|String
name|secondjtId
init|=
literal|"test2"
decl_stmt|;
name|TaskAttemptID
name|secondAttemptID
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|secondjtId
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Task
name|secondTask
init|=
operator|new
name|MapTask
argument_list|(
literal|null
argument_list|,
name|secondAttemptID
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|mapLauncher
operator|.
name|addToTaskQueue
argument_list|(
operator|new
name|LaunchTaskAction
argument_list|(
name|secondTask
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that task is added to runningTasks
name|TaskInProgress
name|secondRunningTip
init|=
name|tt
operator|.
name|runningTasks
operator|.
name|get
argument_list|(
name|secondAttemptID
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|secondRunningTip
argument_list|)
expr_stmt|;
comment|// wait for a while for the second task to be launched
comment|// this loop waits at most for 30 seconds
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jobLaunchCount
operator|>
literal|0
condition|)
block|{
break|break;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Second task didn't run or both ran"
argument_list|,
literal|1
argument_list|,
name|jobLocalizedCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second task didn't try to launch"
argument_list|,
literal|1
argument_list|,
name|jobLaunchCount
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Second task didn't finish first task initializing"
argument_list|,
name|firstJobFinished
argument_list|)
expr_stmt|;
comment|// tell first task to stop waiting
name|quitWaiting
operator|=
literal|true
expr_stmt|;
comment|// wait for a while for the first task finishes initializing
comment|// this loop waits at most for 30 seconds
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|firstJobFinished
operator|==
literal|true
condition|)
block|{
break|break;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"First task didn't finish initializing"
argument_list|,
name|firstJobFinished
argument_list|)
expr_stmt|;
comment|// wait for a while for the first task finishes
comment|// this loop waits at most for 30 seconds
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jobLaunchCount
operator|>
literal|1
condition|)
block|{
break|break;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Both tasks didn't run"
argument_list|,
literal|2
argument_list|,
name|jobLocalizedCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First task didn't try to launch"
argument_list|,
literal|2
argument_list|,
name|jobLaunchCount
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

