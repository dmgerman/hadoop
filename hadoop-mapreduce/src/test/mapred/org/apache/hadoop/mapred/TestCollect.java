begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
operator|.
name|RandomInputFormat
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**   * TestCollect checks if the collect can handle simultaneous invocations.  */
end_comment

begin_class
DECL|class|TestCollect
specifier|public
class|class
name|TestCollect
extends|extends
name|TestCase
block|{
DECL|field|OUTPUT_DIR
specifier|final
specifier|static
name|Path
name|OUTPUT_DIR
init|=
operator|new
name|Path
argument_list|(
literal|"build/test/test.collect.output"
argument_list|)
decl_stmt|;
DECL|field|NUM_FEEDERS
specifier|static
specifier|final
name|int
name|NUM_FEEDERS
init|=
literal|10
decl_stmt|;
DECL|field|NUM_COLLECTS_PER_THREAD
specifier|static
specifier|final
name|int
name|NUM_COLLECTS_PER_THREAD
init|=
literal|1000
decl_stmt|;
comment|/**     * Map is a Mapper that spawns threads which simultaneously call collect.     * Each thread has a specific range to write to the buffer and is unique to     * the thread. This is a synchronization test for the map's collect.    */
DECL|class|Map
specifier|static
class|class
name|Map
implements|implements
name|Mapper
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{     }
DECL|method|map (Text key, Text val, final OutputCollector<IntWritable, IntWritable> out, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|Text
name|key
parameter_list|,
name|Text
name|val
parameter_list|,
specifier|final
name|OutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Class for calling collect in separate threads
class|class
name|CollectFeeder
extends|extends
name|Thread
block|{
name|int
name|id
decl_stmt|;
comment|// id for the thread
specifier|public
name|CollectFeeder
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|NUM_COLLECTS_PER_THREAD
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|out
operator|.
name|collect
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|(
name|id
operator|*
name|NUM_COLLECTS_PER_THREAD
operator|)
operator|+
name|j
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{ }
block|}
block|}
block|}
name|CollectFeeder
index|[]
name|feeders
init|=
operator|new
name|CollectFeeder
index|[
name|NUM_FEEDERS
index|]
decl_stmt|;
comment|// start the feeders
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FEEDERS
condition|;
name|i
operator|++
control|)
block|{
name|feeders
index|[
name|i
index|]
operator|=
operator|new
name|CollectFeeder
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|feeders
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for them to finish
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FEEDERS
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|feeders
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ie
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
DECL|class|Reduce
specifier|static
class|class
name|Reduce
implements|implements
name|Reducer
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|numSeen
specifier|static
name|int
name|numSeen
decl_stmt|;
DECL|field|actualSum
specifier|static
name|int
name|actualSum
decl_stmt|;
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{ }
DECL|method|reduce (IntWritable key, Iterator<IntWritable> val, OutputCollector<IntWritable, IntWritable> out, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|IntWritable
argument_list|>
name|val
parameter_list|,
name|OutputCollector
argument_list|<
name|IntWritable
argument_list|,
name|IntWritable
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|actualSum
operator|+=
name|key
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// keep the running count of the seen values
name|numSeen
operator|++
expr_stmt|;
comment|// number of values seen so far
comment|// using '1+2+3+...n =  n*(n+1)/2' to validate
name|int
name|expectedSum
init|=
name|numSeen
operator|*
operator|(
name|numSeen
operator|+
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|expectedSum
operator|!=
name|actualSum
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Collect test failed!! Ordering mismatch."
argument_list|)
throw|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{ }
block|}
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setJobName
argument_list|(
literal|"TestCollect"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setJarByClass
argument_list|(
name|TestCollect
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|RandomInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// for self data generation
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|OUTPUT_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollect ()
specifier|public
name|void
name|testCollect
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|configure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|JobClient
operator|.
name|runJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// check if all the values were seen by the reducer
if|if
condition|(
name|Reduce
operator|.
name|numSeen
operator|!=
operator|(
name|NUM_COLLECTS_PER_THREAD
operator|*
name|NUM_FEEDERS
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Collect test failed!! Total does not match."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|OUTPUT_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|TestCollect
argument_list|()
operator|.
name|testCollect
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

