begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_class
DECL|class|TestTaskFail
specifier|public
class|class
name|TestTaskFail
extends|extends
name|TestCase
block|{
DECL|field|taskLog
specifier|private
specifier|static
name|String
name|taskLog
init|=
literal|"Task attempt log"
decl_stmt|;
DECL|field|cleanupLog
specifier|static
name|String
name|cleanupLog
init|=
literal|"cleanup attempt log"
decl_stmt|;
DECL|class|MapperClass
specifier|public
specifier|static
class|class
name|MapperClass
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|IntWritable
argument_list|>
block|{
DECL|field|taskid
name|String
name|taskid
decl_stmt|;
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|taskid
operator|=
name|job
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|TASK_ATTEMPT_ID
argument_list|)
expr_stmt|;
block|}
DECL|method|map (LongWritable key, Text value, OutputCollector<Text, IntWritable> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|IntWritable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|taskLog
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.tasklog.iscleanup"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskid
operator|.
name|endsWith
argument_list|(
literal|"_0"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|taskid
operator|.
name|endsWith
argument_list|(
literal|"_1"
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskid
operator|.
name|endsWith
argument_list|(
literal|"_2"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
block|}
block|}
DECL|class|CommitterWithLogs
specifier|static
class|class
name|CommitterWithLogs
extends|extends
name|FileOutputCommitter
block|{
DECL|method|abortTask (TaskAttemptContext context)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cleanupLog
argument_list|)
expr_stmt|;
name|String
name|attemptId
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.tasklog.taskid"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|attemptId
operator|.
name|endsWith
argument_list|(
literal|"_0"
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.tasklog.iscleanup"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.tasklog.iscleanup"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|abortTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CommitterWithFailTaskCleanup
specifier|static
class|class
name|CommitterWithFailTaskCleanup
extends|extends
name|FileOutputCommitter
block|{
DECL|method|abortTask (TaskAttemptContext context)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cleanupLog
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CommitterWithFailTaskCleanup2
specifier|static
class|class
name|CommitterWithFailTaskCleanup2
extends|extends
name|FileOutputCommitter
block|{
DECL|method|abortTask (TaskAttemptContext context)
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cleanupLog
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
DECL|method|launchJob (JobConf conf, Path inDir, Path outDir, String input)
specifier|public
name|RunningJob
name|launchJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|,
name|String
name|input
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set up the input file system and write input text.
name|FileSystem
name|inFs
init|=
name|inDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|outFs
init|=
name|outDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outFs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inFs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|inDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|{
comment|// write input into input file
name|DataOutputStream
name|file
init|=
name|inFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part-0"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// configure the mapred Job
name|conf
operator|.
name|setMapperClass
argument_list|(
name|MapperClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|IdentityReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"test.build.data"
argument_list|,
name|TEST_ROOT_DIR
argument_list|)
expr_stmt|;
comment|// return the RunningJob handle.
return|return
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|validateAttempt (TaskInProgress tip, TaskAttemptID attemptId, TaskStatus ts, boolean isCleanup, boolean containsCleanupLog, JobTracker jt)
specifier|private
name|void
name|validateAttempt
parameter_list|(
name|TaskInProgress
name|tip
parameter_list|,
name|TaskAttemptID
name|attemptId
parameter_list|,
name|TaskStatus
name|ts
parameter_list|,
name|boolean
name|isCleanup
parameter_list|,
name|boolean
name|containsCleanupLog
parameter_list|,
name|JobTracker
name|jt
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|isCleanup
argument_list|,
name|tip
operator|.
name|isCleanupAttempt
argument_list|(
name|attemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ts
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|ts
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate tasklogs for task attempt
name|String
name|log
init|=
name|MapReduceTestUtil
operator|.
name|readTaskLog
argument_list|(
name|TaskLog
operator|.
name|LogName
operator|.
name|STDERR
argument_list|,
name|attemptId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|log
operator|.
name|contains
argument_list|(
name|taskLog
argument_list|)
argument_list|)
expr_stmt|;
comment|// access the logs from web url
name|TaskTrackerStatus
name|ttStatus
init|=
name|jt
operator|.
name|getTaskTracker
argument_list|(
name|tip
operator|.
name|machineWhereTaskRan
argument_list|(
name|attemptId
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|String
name|tasklogUrl
init|=
name|TaskLogServlet
operator|.
name|getTaskLogUrl
argument_list|(
literal|"localhost"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|ttStatus
operator|.
name|getHttpPort
argument_list|()
argument_list|)
argument_list|,
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"&filter=STDERR"
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|TestWebUIAuthorization
operator|.
name|getHttpStatusCode
argument_list|(
name|tasklogUrl
argument_list|,
name|tip
operator|.
name|getUser
argument_list|()
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|containsCleanupLog
condition|)
block|{
comment|// validate task logs: tasklog should contain both task logs
comment|// and cleanup logs
name|assertTrue
argument_list|(
name|log
operator|.
name|contains
argument_list|(
name|cleanupLog
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isCleanup
condition|)
block|{
comment|// validate tasklogs for cleanup attempt
name|log
operator|=
name|MapReduceTestUtil
operator|.
name|readTaskLog
argument_list|(
name|TaskLog
operator|.
name|LogName
operator|.
name|STDERR
argument_list|,
name|attemptId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|log
operator|.
name|contains
argument_list|(
name|cleanupLog
argument_list|)
argument_list|)
expr_stmt|;
comment|// access the cleanup attempt's logs from web url
name|ttStatus
operator|=
name|jt
operator|.
name|getTaskTracker
argument_list|(
name|tip
operator|.
name|machineWhereCleanupRan
argument_list|(
name|attemptId
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|String
name|cleanupTasklogUrl
init|=
name|TaskLogServlet
operator|.
name|getTaskLogUrl
argument_list|(
literal|"localhost"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|ttStatus
operator|.
name|getHttpPort
argument_list|()
argument_list|)
argument_list|,
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"&filter=STDERR&cleanup=true"
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|TestWebUIAuthorization
operator|.
name|getHttpStatusCode
argument_list|(
name|cleanupTasklogUrl
argument_list|,
name|tip
operator|.
name|getUser
argument_list|()
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Task-cleanup task should not be scheduled on the node that the task just failed
if|if
condition|(
name|jt
operator|.
name|taskTrackers
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|String
name|trackerRanTask
init|=
name|tip
operator|.
name|machineWhereTaskRan
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|String
name|trackerRanCleanupTask
init|=
name|tip
operator|.
name|machineWhereCleanupRan
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|trackerRanTask
operator|.
name|equals
argument_list|(
name|trackerRanCleanupTask
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|validateJob (RunningJob job, JobTracker jt, boolean cleanupNeeded)
specifier|private
name|void
name|validateJob
parameter_list|(
name|RunningJob
name|job
parameter_list|,
name|JobTracker
name|jt
parameter_list|,
name|boolean
name|cleanupNeeded
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|JobID
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
comment|// construct the task id of first map task
comment|// this should not be cleanup attempt since the first attempt
comment|// fails with an exception
name|TaskAttemptID
name|attemptId
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobId
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskInProgress
name|tip
init|=
name|jt
operator|.
name|getTip
argument_list|(
name|attemptId
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskStatus
name|ts
init|=
name|jt
operator|.
name|getTaskStatus
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
comment|// task logs will contain cleanup message because the task is failed by
comment|// throwing IOException
name|validateAttempt
argument_list|(
name|tip
argument_list|,
name|attemptId
argument_list|,
name|ts
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|attemptId
operator|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobId
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// this should be cleanup attempt since the second attempt fails
comment|// with System.exit
name|ts
operator|=
name|jt
operator|.
name|getTaskStatus
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|validateAttempt
argument_list|(
name|tip
argument_list|,
name|attemptId
argument_list|,
name|ts
argument_list|,
name|cleanupNeeded
argument_list|,
literal|false
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|attemptId
operator|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobId
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// this should be cleanup attempt since the third attempt fails
comment|// with Error
name|ts
operator|=
name|jt
operator|.
name|getTaskStatus
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|validateAttempt
argument_list|(
name|tip
argument_list|,
name|attemptId
argument_list|,
name|ts
argument_list|,
name|cleanupNeeded
argument_list|,
literal|false
argument_list|,
name|jt
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithDFS ()
specifier|public
name|void
name|testWithDFS
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|taskTrackers
init|=
literal|4
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"./input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"./output"
argument_list|)
decl_stmt|;
name|String
name|input
init|=
literal|"The quick brown fox\nhas many silly\nred fox sox\n"
decl_stmt|;
comment|// launch job with fail tasks
name|JobConf
name|jobConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
comment|// turn down the completion poll interval from the 5 second default
comment|// for better test performance.
name|jobConf
operator|.
name|set
argument_list|(
name|Job
operator|.
name|COMPLETION_POLL_INTERVAL_KEY
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputCommitter
argument_list|(
name|CommitterWithLogs
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|rJob
init|=
name|launchJob
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|rJob
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|validateJob
argument_list|(
name|rJob
argument_list|,
name|jt
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// launch job with fail tasks and fail-cleanups
name|fileSys
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputCommitter
argument_list|(
name|CommitterWithFailTaskCleanup
operator|.
name|class
argument_list|)
expr_stmt|;
name|rJob
operator|=
name|launchJob
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|rJob
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|validateJob
argument_list|(
name|rJob
argument_list|,
name|jt
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputCommitter
argument_list|(
name|CommitterWithFailTaskCleanup2
operator|.
name|class
argument_list|)
expr_stmt|;
name|rJob
operator|=
name|launchJob
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|rJob
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|validateJob
argument_list|(
name|rJob
argument_list|,
name|jt
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// launch job with task-cleanup switched off
name|fileSys
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputCommitter
argument_list|(
name|CommitterWithFailTaskCleanup
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|TASK_CLEANUP_NEEDED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rJob
operator|=
name|launchJob
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|rJob
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|validateJob
argument_list|(
name|rJob
argument_list|,
name|jt
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|TestTaskFail
name|td
init|=
operator|new
name|TestTaskFail
argument_list|()
decl_stmt|;
name|td
operator|.
name|testWithDFS
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

