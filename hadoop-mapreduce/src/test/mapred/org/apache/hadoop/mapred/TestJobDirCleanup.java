begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_class
DECL|class|TestJobDirCleanup
specifier|public
class|class
name|TestJobDirCleanup
extends|extends
name|TestCase
block|{
comment|//The testcase brings up a cluster with many trackers, and
comment|//runs a job with a single map and many reduces. The check is
comment|//to see whether the job directories are cleaned up at the
comment|//end of the job (indirectly testing whether all tasktrackers
comment|//got a KillJobAction).
DECL|method|runSleepJob (JobConf conf)
specifier|private
name|JobID
name|runSleepJob
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|SleepJob
name|sleep
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleep
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|sleep
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|job
operator|.
name|getJobID
argument_list|()
return|;
block|}
DECL|method|testJobDirCleanup ()
specifier|public
name|void
name|testJobDirCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|namenode
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|taskTrackers
init|=
literal|10
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JobConf
name|mrConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|mrConf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_REDUCE_SLOTS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|namenode
operator|=
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|10
argument_list|,
name|namenode
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mrConf
argument_list|)
expr_stmt|;
comment|// make cleanup inline sothat validation of existence of these directories
comment|// can be done
name|mr
operator|.
name|setInlineCleanupThreads
argument_list|()
expr_stmt|;
comment|// run the sleep job
name|JobConf
name|jobConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|JobID
name|jobid
init|=
name|runSleepJob
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
comment|// verify the job directories are cleaned up.
name|verifyJobDirCleanup
argument_list|(
name|mr
argument_list|,
name|taskTrackers
argument_list|,
name|jobid
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyJobDirCleanup (MiniMRCluster mr, int numTT, JobID jobid)
specifier|static
name|void
name|verifyJobDirCleanup
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|,
name|int
name|numTT
parameter_list|,
name|JobID
name|jobid
parameter_list|)
throws|throws
name|IOException
block|{
comment|// wait till killJobAction is sent to all trackers.
comment|// this loops waits atmost for 10 seconds
name|boolean
name|sent
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|sent
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTT
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|mr
operator|.
name|getTaskTrackerRunner
argument_list|(
name|j
argument_list|)
operator|.
name|getTaskTracker
argument_list|()
operator|.
name|getRunningJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|jobid
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|sent
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|sent
condition|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"KillJobAction not sent for all trackers"
argument_list|,
name|sent
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|String
name|jobDirStr
init|=
name|TaskTracker
operator|.
name|getLocalJobDir
argument_list|(
name|user
argument_list|,
name|jobid
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTT
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|String
name|localDir
range|:
name|mr
operator|.
name|getTaskTrackerLocalDirs
argument_list|(
name|i
argument_list|)
control|)
block|{
name|File
name|jobDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|jobDirStr
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|jobDir
operator|+
literal|" is not cleaned up."
argument_list|,
name|jobDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

