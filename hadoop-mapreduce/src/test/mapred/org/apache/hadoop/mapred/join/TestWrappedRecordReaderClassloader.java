begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConfigurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
DECL|class|TestWrappedRecordReaderClassloader
specifier|public
class|class
name|TestWrappedRecordReaderClassloader
extends|extends
name|TestCase
block|{
comment|/**    * Tests the class loader set by {@link JobConf#setClassLoader(ClassLoader)}    * is inherited by any {@link WrappedRecordReader}s created by    * {@link CompositeRecordReader}    */
DECL|method|testClassLoader ()
specifier|public
name|void
name|testClassLoader
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Fake_ClassLoader
name|classLoader
init|=
operator|new
name|Fake_ClassLoader
argument_list|()
decl_stmt|;
name|job
operator|.
name|setClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|getClassLoader
argument_list|()
operator|instanceof
name|Fake_ClassLoader
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
name|testdir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|Path
name|base
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"/empty"
argument_list|)
decl_stmt|;
name|Path
index|[]
name|src
init|=
block|{
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"i0"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"i1"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"i2"
argument_list|)
block|}
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
literal|"mapreduce.join.expr"
argument_list|,
name|CompositeInputFormat
operator|.
name|compose
argument_list|(
literal|"outer"
argument_list|,
name|IF_ClassLoaderChecker
operator|.
name|class
argument_list|,
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|CompositeInputFormat
argument_list|<
name|NullWritable
argument_list|>
name|inputFormat
init|=
operator|new
name|CompositeInputFormat
argument_list|<
name|NullWritable
argument_list|>
argument_list|()
decl_stmt|;
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|inputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
literal|1
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|job
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
DECL|class|Fake_ClassLoader
specifier|public
specifier|static
class|class
name|Fake_ClassLoader
extends|extends
name|ClassLoader
block|{   }
DECL|class|IF_ClassLoaderChecker
specifier|public
specifier|static
class|class
name|IF_ClassLoaderChecker
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|InputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|JobConfigurable
block|{
DECL|class|FakeSplit
specifier|public
specifier|static
class|class
name|FakeSplit
implements|implements
name|InputSplit
block|{
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{       }
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{       }
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
DECL|method|setKeyClass (JobConf job, Class<?> k)
specifier|public
specifier|static
name|void
name|setKeyClass
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|k
parameter_list|)
block|{
name|job
operator|.
name|setClass
argument_list|(
literal|"test.fakeif.keyclass"
argument_list|,
name|k
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|setValClass (JobConf job, Class<?> v)
specifier|public
specifier|static
name|void
name|setValClass
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|v
parameter_list|)
block|{
name|job
operator|.
name|setClass
argument_list|(
literal|"test.fakeif.valclass"
argument_list|,
name|v
argument_list|,
name|Writable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|field|keyclass
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|keyclass
decl_stmt|;
DECL|field|valclass
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|valclass
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|keyclass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|K
argument_list|>
operator|)
name|job
operator|.
name|getClass
argument_list|(
literal|"test.fakeif.keyclass"
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
name|valclass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|V
argument_list|>
operator|)
name|job
operator|.
name|getClass
argument_list|(
literal|"test.fakeif.valclass"
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|IF_ClassLoaderChecker ()
specifier|public
name|IF_ClassLoaderChecker
parameter_list|()
block|{     }
DECL|method|getSplits (JobConf conf, int splits)
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|int
name|splits
parameter_list|)
block|{
return|return
operator|new
name|InputSplit
index|[]
block|{
operator|new
name|FakeSplit
argument_list|()
block|}
return|;
block|}
DECL|method|getRecordReader (InputSplit ignored, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
block|{
return|return
operator|new
name|RR_ClassLoaderChecker
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|job
argument_list|)
return|;
block|}
block|}
DECL|class|RR_ClassLoaderChecker
specifier|public
specifier|static
class|class
name|RR_ClassLoaderChecker
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|keyclass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|keyclass
decl_stmt|;
DECL|field|valclass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|valclass
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|RR_ClassLoaderChecker (JobConf job)
specifier|public
name|RR_ClassLoaderChecker
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"The class loader has not been inherited from "
operator|+
name|CompositeRecordReader
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|job
operator|.
name|getClassLoader
argument_list|()
operator|instanceof
name|Fake_ClassLoader
argument_list|)
expr_stmt|;
name|keyclass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|K
argument_list|>
operator|)
name|job
operator|.
name|getClass
argument_list|(
literal|"test.fakeif.keyclass"
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
name|valclass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|V
argument_list|>
operator|)
name|job
operator|.
name|getClass
argument_list|(
literal|"test.fakeif.valclass"
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|next (K key, V value)
specifier|public
name|boolean
name|next
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
DECL|method|createKey ()
specifier|public
name|K
name|createKey
parameter_list|()
block|{
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|keyclass
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createValue ()
specifier|public
name|V
name|createValue
parameter_list|()
block|{
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|valclass
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0L
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0.0f
return|;
block|}
block|}
block|}
end_class

end_unit

