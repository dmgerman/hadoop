begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|TestTrackerDistributedCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * The base class which starts up a cluster with LinuxTaskController as the task  * controller.  *   * In order to run test cases utilizing LinuxTaskController please follow the  * following steps:  *<ol>  *<li>Build LinuxTaskController by not passing any  *<code>-Dhadoop.conf.dir</code></li>  *<li>Change ownership of the built binary to root:group1, where group1 is  * a secondary group of the test runner.</li>  *<li>Change permissions on the binary so that<em>others</em> component does  * not have any permissions on binary</li>   *<li>Make the built binary to setuid and setgid executable</li>  *<li>Execute following targets:  *<code>ant test -Dcompile.c++=true -Dtaskcontroller-path=<em>path to built binary</em>   * -Dtaskcontroller-ugi=<em>user,group</em></code>  *<br/>(Note that "path to built binary" means the directory containing task-controller -  *  not the actual complete path of the binary itself. This path must end in ".../bin")  *</li>  *</ol>  *   */
end_comment

begin_class
DECL|class|ClusterWithLinuxTaskController
specifier|public
class|class
name|ClusterWithLinuxTaskController
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClusterWithLinuxTaskController
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The wrapper class around LinuxTaskController which allows modification of    * the custom path to task-controller which we can use for task management.    *     **/
DECL|class|MyLinuxTaskController
specifier|public
specifier|static
class|class
name|MyLinuxTaskController
extends|extends
name|LinuxTaskController
block|{
DECL|field|taskControllerExePath
name|String
name|taskControllerExePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TASKCONTROLLER_PATH
argument_list|)
operator|+
literal|"/task-controller"
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_GROUP
argument_list|,
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
comment|// write configuration file
name|configurationFile
operator|=
name|createTaskControllerConf
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|TASKCONTROLLER_PATH
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTaskControllerExecutablePath ()
specifier|protected
name|String
name|getTaskControllerExecutablePath
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|taskControllerExePath
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
DECL|method|setTaskControllerExe (String execPath)
name|void
name|setTaskControllerExe
parameter_list|(
name|String
name|execPath
parameter_list|)
block|{
name|this
operator|.
name|taskControllerExePath
operator|=
name|execPath
expr_stmt|;
block|}
DECL|field|attemptedSigQuits
specifier|volatile
specifier|static
name|int
name|attemptedSigQuits
init|=
literal|0
decl_stmt|;
DECL|field|failedSigQuits
specifier|volatile
specifier|static
name|int
name|failedSigQuits
init|=
literal|0
decl_stmt|;
comment|/** Work like LinuxTaskController, but also count the number of       * attempted and failed SIGQUIT sends via the task-controller       * executable.       */
annotation|@
name|Override
DECL|method|dumpTaskStack (TaskControllerContext context)
name|void
name|dumpTaskStack
parameter_list|(
name|TaskControllerContext
name|context
parameter_list|)
block|{
name|attemptedSigQuits
operator|++
expr_stmt|;
try|try
block|{
name|signalTask
argument_list|(
name|context
argument_list|,
name|TaskControllerCommands
operator|.
name|SIGQUIT_TASK_JVM
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Execution sending SIGQUIT: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|failedSigQuits
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// cluster instances which sub classes can use
DECL|field|mrCluster
specifier|protected
name|MiniMRCluster
name|mrCluster
init|=
literal|null
decl_stmt|;
DECL|field|dfsCluster
specifier|protected
name|MiniDFSCluster
name|dfsCluster
init|=
literal|null
decl_stmt|;
DECL|field|clusterConf
specifier|private
name|JobConf
name|clusterConf
init|=
literal|null
decl_stmt|;
DECL|field|homeDirectory
specifier|protected
name|Path
name|homeDirectory
decl_stmt|;
comment|/** changing this to a larger number needs more work for creating     *  taskcontroller.cfg.    *  see {@link #startCluster()} and    *  {@link #createTaskControllerConf(String, Configuration)}    */
DECL|field|NUMBER_OF_NODES
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_NODES
init|=
literal|1
decl_stmt|;
DECL|field|TASKCONTROLLER_PATH
specifier|static
specifier|final
name|String
name|TASKCONTROLLER_PATH
init|=
literal|"taskcontroller-path"
decl_stmt|;
DECL|field|TASKCONTROLLER_UGI
specifier|static
specifier|final
name|String
name|TASKCONTROLLER_UGI
init|=
literal|"taskcontroller-ugi"
decl_stmt|;
DECL|field|configurationFile
specifier|private
specifier|static
name|File
name|configurationFile
init|=
literal|null
decl_stmt|;
DECL|field|jobOwner
specifier|protected
name|UserGroupInformation
name|jobOwner
decl_stmt|;
DECL|field|taskTrackerSpecialGroup
specifier|protected
specifier|static
name|String
name|taskTrackerSpecialGroup
init|=
literal|null
decl_stmt|;
comment|/**    * Primary group of the tasktracker - i.e. the user running the    * test.    */
DECL|field|taskTrackerPrimaryGroup
specifier|protected
specifier|static
name|String
name|taskTrackerPrimaryGroup
init|=
literal|null
decl_stmt|;
static|static
block|{
if|if
condition|(
name|isTaskExecPathPassed
argument_list|()
condition|)
block|{
try|try
block|{
name|taskTrackerSpecialGroup
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|TASKCONTROLLER_PATH
argument_list|)
argument_list|,
literal|"task-controller"
argument_list|)
argument_list|)
operator|.
name|getGroup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not get group of the binary"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Could not get group of the binary"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|taskTrackerPrimaryGroup
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not get primary group of the current user"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Could not get primary group of the current user"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Utility method which subclasses use to start and configure the MR Cluster    * so they can directly submit a job.    */
DECL|method|startCluster ()
specifier|protected
name|void
name|startCluster
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
name|NUMBER_OF_NODES
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_TASK_CONTROLLER
argument_list|,
name|MyLinuxTaskController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mrCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|NUMBER_OF_NODES
argument_list|,
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|clusterConf
operator|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
expr_stmt|;
name|String
name|ugi
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TASKCONTROLLER_UGI
argument_list|)
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|ugi
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|jobOwner
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
name|splits
index|[
literal|1
index|]
block|}
argument_list|)
expr_stmt|;
name|createHomeAndStagingDirectory
argument_list|(
name|clusterConf
argument_list|)
expr_stmt|;
block|}
DECL|method|createHomeAndStagingDirectory (JobConf conf)
specifier|private
name|void
name|createHomeAndStagingDirectory
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"/user/"
operator|+
name|jobOwner
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|homeDirectory
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Home directory : "
operator|+
name|homeDirectory
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|homeDirectory
argument_list|)
expr_stmt|;
name|changePermission
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Path
name|stagingArea
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_STAGING_AREA_ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Staging root directory : "
operator|+
name|stagingArea
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|stagingArea
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|stagingArea
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|changePermission (FileSystem fs)
specifier|private
name|void
name|changePermission
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|homeDirectory
argument_list|,
name|jobOwner
operator|.
name|getUserName
argument_list|()
argument_list|,
name|jobOwner
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|getTaskControllerConfFile (String path)
specifier|static
name|File
name|getTaskControllerConfFile
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|File
name|confDirectory
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
literal|"../conf"
argument_list|)
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|confDirectory
argument_list|,
literal|"taskcontroller.cfg"
argument_list|)
return|;
block|}
comment|/**    * Create taskcontroller.cfg.    *     * @param path Path to the taskcontroller binary.    * @param conf TaskTracker's configuration    * @return the created conf file    * @throws IOException    */
DECL|method|createTaskControllerConf (String path, Configuration conf)
specifier|static
name|File
name|createTaskControllerConf
parameter_list|(
name|String
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|confDirectory
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
literal|"../conf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|confDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|File
name|configurationFile
init|=
operator|new
name|File
argument_list|(
name|confDirectory
argument_list|,
literal|"taskcontroller.cfg"
argument_list|)
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|configurationFile
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
operator|+
literal|"=%s"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"hadoop.log.dir=%s"
argument_list|,
name|TaskLog
operator|.
name|getBaseLogDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|TTConfig
operator|.
name|TT_GROUP
operator|+
literal|"=%s"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|TTConfig
operator|.
name|TT_GROUP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|configurationFile
return|;
block|}
comment|/**    * Can we run the tests with LinuxTaskController?    *     * @return boolean    */
DECL|method|shouldRun ()
specifier|protected
specifier|static
name|boolean
name|shouldRun
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isTaskExecPathPassed
argument_list|()
operator|||
operator|!
name|isUserPassed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not running test."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|isTaskExecPathPassed ()
specifier|static
name|boolean
name|isTaskExecPathPassed
parameter_list|()
block|{
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TASKCONTROLLER_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|isEmpty
argument_list|()
operator|||
name|path
operator|.
name|equals
argument_list|(
literal|"${"
operator|+
name|TASKCONTROLLER_PATH
operator|+
literal|"}"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Invalid taskcontroller-path : "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|isUserPassed ()
specifier|private
specifier|static
name|boolean
name|isUserPassed
parameter_list|()
block|{
name|String
name|ugi
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TASKCONTROLLER_UGI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ugi
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|ugi
operator|.
name|equals
argument_list|(
literal|"${"
operator|+
name|TASKCONTROLLER_UGI
operator|+
literal|"}"
argument_list|)
operator|)
operator|&&
operator|!
name|ugi
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|ugi
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
operator|>
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Invalid taskcontroller-ugi : "
operator|+
name|ugi
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Invalid taskcontroller-ugi : "
operator|+
name|ugi
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|getClusterConf ()
specifier|protected
name|JobConf
name|getClusterConf
parameter_list|()
block|{
return|return
operator|new
name|JobConf
argument_list|(
name|clusterConf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|configurationFile
operator|!=
literal|null
condition|)
block|{
name|configurationFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Assert that the job is actually run by the specified user by verifying the    * permissions of the output part-files.    *     * @param outDir    * @throws IOException    */
DECL|method|assertOwnerShip (Path outDir)
specifier|protected
name|void
name|assertOwnerShip
parameter_list|(
name|Path
name|outDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|outDir
operator|.
name|getFileSystem
argument_list|(
name|clusterConf
argument_list|)
decl_stmt|;
name|assertOwnerShip
argument_list|(
name|outDir
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that the job is actually run by the specified user by verifying the    * permissions of the output part-files.    *     * @param outDir    * @param fs    * @throws IOException    */
DECL|method|assertOwnerShip (Path outDir, FileSystem fs)
specifier|protected
name|void
name|assertOwnerShip
parameter_list|(
name|Path
name|outDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|FileStatus
name|status
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|outDir
argument_list|,
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
argument_list|)
control|)
block|{
name|String
name|owner
init|=
name|status
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|status
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ownership of the file is "
operator|+
name|status
operator|.
name|getPath
argument_list|()
operator|+
literal|" is "
operator|+
name|owner
operator|+
literal|","
operator|+
name|group
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Output part-file's owner is not correct. Expected : "
operator|+
name|jobOwner
operator|.
name|getUserName
argument_list|()
operator|+
literal|" Found : "
operator|+
name|owner
argument_list|,
name|owner
operator|.
name|equals
argument_list|(
name|jobOwner
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Output part-file's group is not correct. Expected : "
operator|+
name|jobOwner
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
operator|+
literal|" Found : "
operator|+
name|group
argument_list|,
name|group
operator|.
name|equals
argument_list|(
name|jobOwner
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates permissions of private distcache dir and its contents fully    */
DECL|method|checkPermissionsOnPrivateDistCache (String[] localDirs, String user, String taskTrackerUser, String groupOwner)
specifier|public
specifier|static
name|void
name|checkPermissionsOnPrivateDistCache
parameter_list|(
name|String
index|[]
name|localDirs
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|taskTrackerUser
parameter_list|,
name|String
name|groupOwner
parameter_list|)
throws|throws
name|IOException
block|{
comment|// user-dir, jobcache and distcache will have
comment|//     2770 permissions if jobOwner is same as tt_user
comment|//     2570 permissions for any other user
name|String
name|expectedDirPerms
init|=
name|taskTrackerUser
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|?
literal|"drwxrws---"
else|:
literal|"dr-xrws---"
decl_stmt|;
name|String
name|expectedFilePerms
init|=
name|taskTrackerUser
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|?
literal|"-rwxrwx---"
else|:
literal|"-r-xrwx---"
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|File
name|distCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|distCacheDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|checkPermissionsOnDir
argument_list|(
name|distCacheDir
argument_list|,
name|user
argument_list|,
name|groupOwner
argument_list|,
name|expectedDirPerms
argument_list|,
name|expectedFilePerms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check that files expected to be localized in distributed cache for a user    * are present.    * @param localDirs List of mapred local directories.    * @param user User against which localization is happening    * @param expectedFileNames List of files expected to be localized    * @throws IOException    */
DECL|method|checkPresenceOfPrivateDistCacheFiles (String[] localDirs, String user, String[] expectedFileNames)
specifier|public
specifier|static
name|void
name|checkPresenceOfPrivateDistCacheFiles
parameter_list|(
name|String
index|[]
name|localDirs
parameter_list|,
name|String
name|user
parameter_list|,
name|String
index|[]
name|expectedFileNames
parameter_list|)
throws|throws
name|IOException
block|{
name|FileGatherer
name|gatherer
init|=
operator|new
name|FileGatherer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|File
name|distCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|findExpectedFiles
argument_list|(
name|expectedFileNames
argument_list|,
name|distCacheDir
argument_list|,
name|gatherer
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Files expected in private distributed cache were not found"
argument_list|,
name|expectedFileNames
operator|.
name|length
argument_list|,
name|gatherer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates permissions and ownership of public distcache dir and its     * contents fully in all local dirs    */
DECL|method|checkPermissionsOnPublicDistCache (FileSystem localFS, String[] localDirs, String owner, String group)
specifier|public
specifier|static
name|void
name|checkPermissionsOnPublicDistCache
parameter_list|(
name|FileSystem
name|localFS
parameter_list|,
name|String
index|[]
name|localDirs
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|File
name|distCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getPublicDistributedCacheDir
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|distCacheDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|checkPublicFilePermissions
argument_list|(
name|localFS
argument_list|,
name|distCacheDir
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Checks that files expected to be localized in the public distributed    * cache are present    * @param localDirs List of mapred local directories    * @param expectedFileNames List of expected file names.    * @throws IOException    */
DECL|method|checkPresenceOfPublicDistCacheFiles (String[] localDirs, String[] expectedFileNames)
specifier|public
specifier|static
name|void
name|checkPresenceOfPublicDistCacheFiles
parameter_list|(
name|String
index|[]
name|localDirs
parameter_list|,
name|String
index|[]
name|expectedFileNames
parameter_list|)
throws|throws
name|IOException
block|{
name|FileGatherer
name|gatherer
init|=
operator|new
name|FileGatherer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|File
name|distCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getPublicDistributedCacheDir
argument_list|()
argument_list|)
decl_stmt|;
name|findExpectedFiles
argument_list|(
name|expectedFileNames
argument_list|,
name|distCacheDir
argument_list|,
name|gatherer
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Files expected in public distributed cache were not found"
argument_list|,
name|expectedFileNames
operator|.
name|length
argument_list|,
name|gatherer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates permissions and ownership on the public distributed cache files    */
DECL|method|checkPublicFilePermissions (FileSystem localFS, File dir, String owner, String group)
specifier|private
specifier|static
name|void
name|checkPublicFilePermissions
parameter_list|(
name|FileSystem
name|localFS
parameter_list|,
name|File
name|dir
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|TestTrackerDistributedCacheManager
operator|.
name|checkPublicFilePermissions
argument_list|(
name|localFS
argument_list|,
operator|new
name|Path
index|[]
block|{
name|dirPath
block|}
argument_list|)
expr_stmt|;
name|TestTrackerDistributedCacheManager
operator|.
name|checkPublicFileOwnership
argument_list|(
name|localFS
argument_list|,
operator|new
name|Path
index|[]
block|{
name|dirPath
block|}
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|checkPublicFilePermissions
argument_list|(
name|localFS
argument_list|,
name|file
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Validates permissions of given dir and its contents fully(i.e. recursively)    */
DECL|method|checkPermissionsOnDir (File dir, String user, String groupOwner, String expectedDirPermissions, String expectedFilePermissions)
specifier|private
specifier|static
name|void
name|checkPermissionsOnDir
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|groupOwner
parameter_list|,
name|String
name|expectedDirPermissions
parameter_list|,
name|String
name|expectedFilePermissions
parameter_list|)
throws|throws
name|IOException
block|{
name|TestTaskTrackerLocalization
operator|.
name|checkFilePermissions
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedDirPermissions
argument_list|,
name|user
argument_list|,
name|groupOwner
argument_list|)
expr_stmt|;
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|checkPermissionsOnDir
argument_list|(
name|file
argument_list|,
name|user
argument_list|,
name|groupOwner
argument_list|,
name|expectedDirPermissions
argument_list|,
name|expectedFilePermissions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TestTaskTrackerLocalization
operator|.
name|checkFilePermissions
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedFilePermissions
argument_list|,
name|user
argument_list|,
name|groupOwner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check which files among those expected are present in the rootDir
comment|// Add those present to the FileGatherer.
DECL|method|findExpectedFiles (String[] expectedFileNames, File rootDir, FileGatherer gatherer)
specifier|private
specifier|static
name|void
name|findExpectedFiles
parameter_list|(
name|String
index|[]
name|expectedFileNames
parameter_list|,
name|File
name|rootDir
parameter_list|,
name|FileGatherer
name|gatherer
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|rootDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|findExpectedFiles
argument_list|(
name|expectedFileNames
argument_list|,
name|file
argument_list|,
name|gatherer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isFilePresent
argument_list|(
name|expectedFileNames
argument_list|,
name|file
argument_list|)
condition|)
block|{
name|gatherer
operator|.
name|addFileName
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Test if the passed file is present in the expected list of files.
DECL|method|isFilePresent (String[] expectedFileNames, File file)
specifier|private
specifier|static
name|boolean
name|isFilePresent
parameter_list|(
name|String
index|[]
name|expectedFileNames
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|boolean
name|foundFileName
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|expectedFileNames
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundFileName
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|foundFileName
return|;
block|}
comment|// Helper class to collect a list of file names across multiple
comment|// method calls. Wrapper around a collection defined for clarity
DECL|class|FileGatherer
specifier|private
specifier|static
class|class
name|FileGatherer
block|{
DECL|field|foundFileNames
name|List
argument_list|<
name|String
argument_list|>
name|foundFileNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addFileName (String fileName)
name|void
name|addFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|foundFileNames
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
DECL|method|getCount ()
name|int
name|getCount
parameter_list|()
block|{
return|return
name|foundFileNames
operator|.
name|size
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

