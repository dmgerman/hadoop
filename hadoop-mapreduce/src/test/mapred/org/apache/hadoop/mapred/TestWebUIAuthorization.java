begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|TestHttpServer
operator|.
name|DummyFilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ShellBasedUnixGroupsMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
DECL|class|TestWebUIAuthorization
specifier|public
class|class
name|TestWebUIAuthorization
extends|extends
name|ClusterMapReduceTestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWebUIAuthorization
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// users who submit the jobs
DECL|field|jobSubmitter
specifier|private
specifier|static
specifier|final
name|String
name|jobSubmitter
init|=
literal|"user1"
decl_stmt|;
DECL|field|jobSubmitter1
specifier|private
specifier|static
specifier|final
name|String
name|jobSubmitter1
init|=
literal|"user11"
decl_stmt|;
DECL|field|jobSubmitter2
specifier|private
specifier|static
specifier|final
name|String
name|jobSubmitter2
init|=
literal|"user12"
decl_stmt|;
DECL|field|jobSubmitter3
specifier|private
specifier|static
specifier|final
name|String
name|jobSubmitter3
init|=
literal|"user13"
decl_stmt|;
comment|// mrOwner starts the cluster
DECL|field|mrOwner
specifier|private
specifier|static
name|String
name|mrOwner
init|=
literal|null
decl_stmt|;
comment|// member of supergroup
DECL|field|superGroupMember
specifier|private
specifier|static
specifier|final
name|String
name|superGroupMember
init|=
literal|"user2"
decl_stmt|;
comment|// mrAdmin
DECL|field|mrAdminUser
specifier|private
specifier|static
specifier|final
name|String
name|mrAdminUser
init|=
literal|"user4"
decl_stmt|;
comment|// Group for mrAdmins
DECL|field|mrAdminGroup
specifier|private
specifier|static
specifier|final
name|String
name|mrAdminGroup
init|=
literal|"admingroup"
decl_stmt|;
comment|// member of mrAdminGroup
DECL|field|mrAdminGroupMember
specifier|private
specifier|static
specifier|final
name|String
name|mrAdminGroupMember
init|=
literal|"user5"
decl_stmt|;
comment|// admin of "default" queue
DECL|field|qAdmin
specifier|private
specifier|static
specifier|final
name|String
name|qAdmin
init|=
literal|"user3"
decl_stmt|;
comment|// "colleague1" is there in job-view-acls config
DECL|field|viewColleague
specifier|private
specifier|static
specifier|final
name|String
name|viewColleague
init|=
literal|"colleague1"
decl_stmt|;
comment|// "colleague2" is there in job-modify-acls config
DECL|field|modifyColleague
specifier|private
specifier|static
specifier|final
name|String
name|modifyColleague
init|=
literal|"colleague2"
decl_stmt|;
comment|// "colleague3" is there in both job-view-acls and job-modify-acls
DECL|field|viewAndModifyColleague
specifier|private
specifier|static
specifier|final
name|String
name|viewAndModifyColleague
init|=
literal|"colleague3"
decl_stmt|;
comment|// "evilJohn" is not having view/modify access on the jobs
DECL|field|unauthorizedUser
specifier|private
specifier|static
specifier|final
name|String
name|unauthorizedUser
init|=
literal|"evilJohn"
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do not do anything
block|}
empty_stmt|;
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/** access a url, ignoring some IOException such as the page does not exist */
DECL|method|getHttpStatusCode (String urlstring, String userName, String method)
specifier|static
name|int
name|getHttpStatusCode
parameter_list|(
name|String
name|urlstring
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Accessing "
operator|+
name|urlstring
operator|+
literal|" as user "
operator|+
name|userName
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|urlstring
operator|+
literal|"&user.name="
operator|+
name|userName
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"POST"
argument_list|)
condition|)
block|{
name|String
name|encodedData
init|=
literal|"action=kill&user.name="
operator|+
name|userName
decl_stmt|;
name|connection
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/x-www-form-urlencoded"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Length"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|encodedData
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|connection
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|encodedData
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|connection
operator|.
name|getResponseCode
argument_list|()
return|;
block|}
DECL|class|MyGroupsProvider
specifier|public
specifier|static
class|class
name|MyGroupsProvider
extends|extends
name|ShellBasedUnixGroupsMapping
block|{
DECL|field|mapping
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mapping
operator|.
name|get
argument_list|(
name|user
argument_list|)
return|;
block|}
block|}
comment|/**    * Validates the given jsp/servlet against different user names who    * can(or cannot) view the job.    * (1) jobSubmitter can view the job    * (2) mrAdmin and deprecated superGroupMember can view any job    * (3) mrOwner can view any job    * (4) qAdmins of the queue to which job is submitted to can view any job in    *     that queue.    * (5) user mentioned in job-view-acl should be able to view the    *     job irrespective of job-modify-acl.    * (6) user mentioned in job-modify-acl but not in job-view-acl    *     cannot view the job    * (7) other unauthorized users cannot view the job    */
DECL|method|validateViewJob (String url, String method)
specifier|private
name|void
name|validateViewJob
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"Incorrect return code for job submitter "
operator|+
name|jobSubmitter
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|jobSubmitter
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code for supergroup-member "
operator|+
name|superGroupMember
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|superGroupMember
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code for admin user "
operator|+
name|mrAdminUser
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|mrAdminUser
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code for admingroup-member "
operator|+
name|mrAdminGroupMember
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|mrAdminGroupMember
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code for MR-owner "
operator|+
name|mrOwner
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|mrOwner
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code for queue admin "
operator|+
name|qAdmin
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|qAdmin
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code for user in job-view-acl "
operator|+
name|viewColleague
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|viewColleague
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code for user in job-view-acl and "
operator|+
literal|"job-modify-acl "
operator|+
name|viewAndModifyColleague
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|viewAndModifyColleague
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code for user in job-modify-acl "
operator|+
name|modifyColleague
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|modifyColleague
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code for unauthorizedUser "
operator|+
name|unauthorizedUser
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|unauthorizedUser
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates the given jsp/servlet against different user names who    * can(or cannot) modify the job.    * (1) jobSubmitter, mrOwner, qAdmin, mrAdmin and deprecated superGroupMember    *     can modify the job.    *     But we are not validating this in this method. Let the caller    *     explicitly validate this, if needed.    * (2) user mentioned in job-view-acl but not in job-modify-acl cannot    *     modify the job    * (3) user mentioned in job-modify-acl (irrespective of job-view-acl)    *     can modify the job    * (4) other unauthorized users cannot modify the job    */
DECL|method|validateModifyJob (String url, String method)
specifier|private
name|void
name|validateModifyJob
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|viewColleague
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|unauthorizedUser
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|modifyColleague
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// starts a sleep job with 1 map task that runs for a long time
DECL|method|startSleepJobAsUser (String user, JobConf conf)
specifier|private
name|Job
name|startSleepJobAsUser
parameter_list|(
name|String
name|user
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|jobSubmitterUGI
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|jobSubmitterUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Job
argument_list|>
argument_list|()
block|{
specifier|public
name|Job
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Very large sleep job.
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|900000
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
return|return
name|job
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|job
return|;
block|}
comment|// Waits till the map task gets started and gets its tipId from map reports
comment|// and returns the tipId
DECL|method|getTIPId (MiniMRCluster cluster, org.apache.hadoop.mapreduce.JobID jobid)
specifier|private
name|TaskID
name|getTIPId
parameter_list|(
name|MiniMRCluster
name|cluster
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|)
throws|throws
name|Exception
block|{
name|JobClient
name|client
init|=
operator|new
name|JobClient
argument_list|(
name|cluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|JobID
name|jobId
init|=
name|JobID
operator|.
name|downgrade
argument_list|(
name|jobid
argument_list|)
decl_stmt|;
name|TaskReport
index|[]
name|mapReports
init|=
literal|null
decl_stmt|;
name|TaskID
name|tipId
init|=
literal|null
decl_stmt|;
do|do
block|{
comment|// make sure that the map task is running
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|mapReports
operator|=
name|client
operator|.
name|getMapTaskReports
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|mapReports
operator|.
name|length
operator|==
literal|0
condition|)
do|;
for|for
control|(
name|TaskReport
name|r
range|:
name|mapReports
control|)
block|{
name|tipId
operator|=
name|r
operator|.
name|getTaskID
argument_list|()
expr_stmt|;
break|break;
comment|// because we have only one map
block|}
return|return
name|tipId
return|;
block|}
comment|/**    * Make sure that the given user can do killJob using jobdetails.jsp url    * @param cluster    * @param conf    * @param jtURL    * @param jobTrackerJSP    * @param user    * @throws Exception    */
DECL|method|confirmJobDetailsJSPKillJobAsUser (MiniMRCluster cluster, JobConf conf, String jtURL, String jobTrackerJSP, String user)
specifier|private
name|void
name|confirmJobDetailsJSPKillJobAsUser
parameter_list|(
name|MiniMRCluster
name|cluster
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|String
name|jtURL
parameter_list|,
name|String
name|jobTrackerJSP
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|startSleepJobAsUser
argument_list|(
name|jobSubmitter
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|getTIPId
argument_list|(
name|cluster
argument_list|,
name|jobid
argument_list|)
expr_stmt|;
comment|// wait till the map task is started
comment|// jobDetailsJSP killJob url
name|String
name|url
init|=
name|jtURL
operator|+
literal|"/jobdetails.jsp?"
operator|+
literal|"action=kill&jobid="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|user
argument_list|,
literal|"POST"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing job "
operator|+
name|jobid
operator|+
literal|" from finally block"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
operator|+
literal|"&killJobs=true&jobCheckBox="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
argument_list|,
name|jobSubmitter
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setupGroupsProvider ()
specifier|static
name|void
name|setupGroupsProvider
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|MyGroupsProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|jobSubmitter
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"group1"
argument_list|)
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|viewColleague
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"group2"
argument_list|)
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|modifyColleague
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"group1"
argument_list|)
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|unauthorizedUser
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"evilSociety"
argument_list|)
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|superGroupMember
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"superGroup"
argument_list|)
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|mrAdminGroupMember
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|mrAdminGroup
argument_list|)
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|viewAndModifyColleague
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"group3"
argument_list|)
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|qAdmin
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"group4"
argument_list|)
argument_list|)
expr_stmt|;
name|mrOwner
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|mrOwner
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"group5"
block|,
literal|"group6"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|jobSubmitter1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"group7"
argument_list|)
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|jobSubmitter2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"group7"
argument_list|)
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|jobSubmitter3
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"group7"
argument_list|)
argument_list|)
expr_stmt|;
name|MyGroupsProvider
operator|.
name|mapping
operator|.
name|put
argument_list|(
name|mrAdminUser
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"group8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAuthorizationForJobHistoryPages ()
specifier|public
name|void
name|testAuthorizationForJobHistoryPages
parameter_list|()
throws|throws
name|Exception
block|{
name|setupGroupsProvider
argument_list|()
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"hadoop.http.filter.initializers"
argument_list|,
name|DummyFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"dfs.permissions.enabled"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"mapred.job.tracker.history.completed.location"
argument_list|,
literal|"historyDoneFolderOnHDFS"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|MRJobConfig
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|MRConfig
operator|.
name|MR_SUPERGROUP
argument_list|,
literal|"superGroup"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|MRConfig
operator|.
name|MR_ADMINS
argument_list|,
name|mrAdminUser
operator|+
literal|" "
operator|+
name|mrAdminGroup
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|JTConfig
operator|.
name|JT_RETIREJOBS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|String
index|[]
name|queueNames
init|=
block|{
literal|"default"
block|}
decl_stmt|;
name|String
index|[]
name|submitAclStrings
init|=
operator|new
name|String
index|[]
block|{
name|jobSubmitter
block|}
decl_stmt|;
name|String
index|[]
name|adminsAclStrings
init|=
operator|new
name|String
index|[]
block|{
name|qAdmin
block|}
decl_stmt|;
name|startCluster
argument_list|(
name|props
argument_list|,
name|queueNames
argument_list|,
name|submitAclStrings
argument_list|,
name|adminsAclStrings
argument_list|)
expr_stmt|;
name|MiniMRCluster
name|cluster
init|=
name|getMRCluster
argument_list|()
decl_stmt|;
name|int
name|infoPort
init|=
name|cluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTrackerInfoPort
argument_list|()
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|cluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
name|viewColleague
operator|+
literal|" group3"
argument_list|)
expr_stmt|;
comment|// Let us add group1 and group3 to modify-job-acl. So modifyColleague and
comment|// viewAndModifyColleague will be able to modify the job
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_MODIFY_JOB
argument_list|,
literal|" group1,group3"
argument_list|)
expr_stmt|;
specifier|final
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|jobSubmitterUGI
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|jobSubmitter
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|jobSubmitterUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Job
argument_list|>
argument_list|()
block|{
specifier|public
name|Job
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Very large sleep job.
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
comment|// Wait till job retires.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|&&
operator|!
name|job
operator|.
name|isRetired
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for the job "
operator|+
name|jobid
operator|+
literal|" to retire"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Job did not retire"
argument_list|,
name|job
operator|.
name|isRetired
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|historyFileName
init|=
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getHistoryFile
argument_list|()
decl_stmt|;
name|String
name|jtURL
init|=
literal|"http://localhost:"
operator|+
name|infoPort
decl_stmt|;
comment|// validate access of jobdetails_history.jsp
name|String
name|jobDetailsJSP
init|=
name|jtURL
operator|+
literal|"/jobdetailshistory.jsp?logFile="
operator|+
name|historyFileName
decl_stmt|;
name|validateViewJob
argument_list|(
name|jobDetailsJSP
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
comment|// validate accesses of jobtaskshistory.jsp
name|String
name|jobTasksJSP
init|=
name|jtURL
operator|+
literal|"/jobtaskshistory.jsp?logFile="
operator|+
name|historyFileName
decl_stmt|;
name|String
index|[]
name|taskTypes
init|=
operator|new
name|String
index|[]
block|{
literal|"JOb_SETUP"
block|,
literal|"MAP"
block|,
literal|"REDUCE"
block|,
literal|"JOB_CLEANUP"
block|}
decl_stmt|;
name|String
index|[]
name|states
init|=
operator|new
name|String
index|[]
block|{
literal|"all"
block|,
literal|"SUCCEEDED"
block|,
literal|"FAILED"
block|,
literal|"KILLED"
block|}
decl_stmt|;
for|for
control|(
name|String
name|taskType
range|:
name|taskTypes
control|)
block|{
for|for
control|(
name|String
name|state
range|:
name|states
control|)
block|{
name|validateViewJob
argument_list|(
name|jobTasksJSP
operator|+
literal|"&taskType="
operator|+
name|taskType
operator|+
literal|"&status="
operator|+
name|state
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
block|}
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
operator|new
name|Path
argument_list|(
name|historyFileName
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|historyFileName
argument_list|)
decl_stmt|;
name|JobInfo
name|jobInfo
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|tipsMap
init|=
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskID
name|tip
range|:
name|tipsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// validate access of taskdetailshistory.jsp
name|validateViewJob
argument_list|(
name|jtURL
operator|+
literal|"/taskdetailshistory.jsp?logFile="
operator|+
name|historyFileName
operator|+
literal|"&tipid="
operator|+
name|tip
operator|.
name|toString
argument_list|()
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|attemptsMap
init|=
name|tipsMap
operator|.
name|get
argument_list|(
name|tip
argument_list|)
operator|.
name|getAllTaskAttempts
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskAttemptID
name|attempt
range|:
name|attemptsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// validate access to taskstatshistory.jsp
name|validateViewJob
argument_list|(
name|jtURL
operator|+
literal|"/taskstatshistory.jsp?attemptid="
operator|+
name|attempt
operator|.
name|toString
argument_list|()
operator|+
literal|"&logFile="
operator|+
name|historyFileName
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
comment|// validate access to tasklogs - STDOUT and STDERR. SYSLOGs are not
comment|// generated for the 1 map sleep job in the test case.
name|String
name|stdoutURL
init|=
name|TaskLogServlet
operator|.
name|getTaskLogUrl
argument_list|(
literal|"localhost"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|attemptsMap
operator|.
name|get
argument_list|(
name|attempt
argument_list|)
operator|.
name|getHttpPort
argument_list|()
argument_list|)
argument_list|,
name|attempt
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"&filter="
operator|+
name|TaskLog
operator|.
name|LogName
operator|.
name|STDOUT
decl_stmt|;
name|validateViewJob
argument_list|(
name|stdoutURL
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|String
name|stderrURL
init|=
name|TaskLogServlet
operator|.
name|getTaskLogUrl
argument_list|(
literal|"localhost"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|attemptsMap
operator|.
name|get
argument_list|(
name|attempt
argument_list|)
operator|.
name|getHttpPort
argument_list|()
argument_list|)
argument_list|,
name|attempt
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"&filter="
operator|+
name|TaskLog
operator|.
name|LogName
operator|.
name|STDERR
decl_stmt|;
name|validateViewJob
argument_list|(
name|stderrURL
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For each tip, let us test the effect of deletion of job-acls.xml file and
comment|// deletion of task log dir for each of the attempts of the tip.
comment|// delete job-acls.xml file from the job userlog dir and verify
comment|// if unauthorized users can view task logs of each attempt.
name|Path
name|jobACLsFilePath
init|=
operator|new
name|Path
argument_list|(
name|TaskLog
operator|.
name|getJobDir
argument_list|(
name|jobid
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|TaskTracker
operator|.
name|jobACLsFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not delete job-acls.xml file."
argument_list|,
operator|new
name|File
argument_list|(
name|jobACLsFilePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskID
name|tip
range|:
name|tipsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskAttemptInfo
argument_list|>
name|attemptsMap
init|=
name|tipsMap
operator|.
name|get
argument_list|(
name|tip
argument_list|)
operator|.
name|getAllTaskAttempts
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskAttemptID
name|attempt
range|:
name|attemptsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|stdoutURL
init|=
name|TaskLogServlet
operator|.
name|getTaskLogUrl
argument_list|(
literal|"localhost"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|attemptsMap
operator|.
name|get
argument_list|(
name|attempt
argument_list|)
operator|.
name|getHttpPort
argument_list|()
argument_list|)
argument_list|,
name|attempt
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"&filter="
operator|+
name|TaskLog
operator|.
name|LogName
operator|.
name|STDOUT
decl_stmt|;
empty_stmt|;
name|String
name|stderrURL
init|=
name|TaskLogServlet
operator|.
name|getTaskLogUrl
argument_list|(
literal|"localhost"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|attemptsMap
operator|.
name|get
argument_list|(
name|attempt
argument_list|)
operator|.
name|getHttpPort
argument_list|()
argument_list|)
argument_list|,
name|attempt
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"&filter="
operator|+
name|TaskLog
operator|.
name|LogName
operator|.
name|STDERR
decl_stmt|;
comment|// unauthorized users can view task logs of each attempt because
comment|// job-acls.xml file is deleted.
name|assertEquals
argument_list|(
literal|"Incorrect return code for "
operator|+
name|unauthorizedUser
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|stdoutURL
argument_list|,
name|unauthorizedUser
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code for "
operator|+
name|unauthorizedUser
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|stderrURL
argument_list|,
name|unauthorizedUser
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the whole task log dir of attempt and verify that we get
comment|// correct response code (i.e. HTTP_GONE) when task logs are accessed.
name|File
name|attemptLogDir
init|=
name|TaskLog
operator|.
name|getAttemptDir
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
operator|.
name|downgrade
argument_list|(
name|attempt
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|attemptLogDir
argument_list|)
expr_stmt|;
comment|// Try accessing tasklogs - STDOUT and STDERR now(after the whole
comment|// attempt log dir is deleted).
name|assertEquals
argument_list|(
literal|"Incorrect return code for "
operator|+
name|jobSubmitter
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_GONE
argument_list|,
name|getHttpStatusCode
argument_list|(
name|stdoutURL
argument_list|,
name|jobSubmitter
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return code for "
operator|+
name|jobSubmitter
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_GONE
argument_list|,
name|getHttpStatusCode
argument_list|(
name|stderrURL
argument_list|,
name|jobSubmitter
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// validate access to analysejobhistory.jsp
name|String
name|analyseJobHistoryJSP
init|=
name|jtURL
operator|+
literal|"/analysejobhistory.jsp?logFile="
operator|+
name|historyFileName
decl_stmt|;
name|validateViewJob
argument_list|(
name|analyseJobHistoryJSP
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
comment|// validate access of jobconf_history.jsp
name|String
name|jobConfJSP
init|=
name|jtURL
operator|+
literal|"/jobconf_history.jsp?logFile="
operator|+
name|historyFileName
decl_stmt|;
name|validateViewJob
argument_list|(
name|jobConfJSP
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates queues configuration file with the given queues and acls and starts    * cluster with that queues configuration file.    * @param props   configuration properties to inject to the mini cluster    * @param queueNames   the job queues on the cluster     * @param submitAclStrings acl-submit-job acls for all queues    * @param adminsAclStrings acl-administer-jobs acls for all queues    * @throws Exception    */
DECL|method|startCluster (Properties props, String[] queueNames, String[] submitAclStrings, String[] adminsAclStrings)
specifier|private
name|void
name|startCluster
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
index|[]
name|queueNames
parameter_list|,
name|String
index|[]
name|submitAclStrings
parameter_list|,
name|String
index|[]
name|adminsAclStrings
parameter_list|)
throws|throws
name|Exception
block|{
name|createQueuesConfigFile
argument_list|(
name|queueNames
argument_list|,
name|submitAclStrings
argument_list|,
name|adminsAclStrings
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|true
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts a sleep job and tries to kill the job using jobdetails.jsp as    * (1) viewColleague (2) unauthorizedUser (3) modifyColleague    * (4) viewAndModifyColleague (5) mrOwner (6) deprecated superGroupMember    * (7) mrAdmin and (8) jobSubmitter    *    * Validates the given jsp/servlet against different user names who    * can(or cannot) do both view and modify on the job.    * (1) jobSubmitter, mrOwner, mrAdmin and deprecated superGroupMember can do    *     both view and modify    *     on the job. But we are not validating this in this method. Let the    *     caller explicitly validate this, if needed.    * (2) user mentioned in job-view-acls and job-modify-acls can do this    * (3) user mentioned in job-view-acls but not in job-modify-acls cannot    *     do this    * (4) user mentioned in job-modify-acls but not in job-view-acls cannot    *     do this    * (5) qAdmin cannot do this because he doesn't have view access to the job    * (6) other unauthorized users cannot do this    *    * @throws Exception    */
DECL|method|validateJobDetailsJSPKillJob (MiniMRCluster cluster, JobConf clusterConf, String jtURL)
specifier|private
name|void
name|validateJobDetailsJSPKillJob
parameter_list|(
name|MiniMRCluster
name|cluster
parameter_list|,
name|JobConf
name|clusterConf
parameter_list|,
name|String
name|jtURL
parameter_list|)
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|cluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
name|viewColleague
operator|+
literal|" group3"
argument_list|)
expr_stmt|;
comment|// Let us add group1 and group3 to modify-job-acl. So modifyColleague and
comment|// viewAndModifyColleague will be able to modify the job
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_MODIFY_JOB
argument_list|,
literal|" group1,group3"
argument_list|)
expr_stmt|;
name|String
name|jobTrackerJSP
init|=
name|jtURL
operator|+
literal|"/jobtracker.jsp?a=b"
decl_stmt|;
name|Job
name|job
init|=
name|startSleepJobAsUser
argument_list|(
name|jobSubmitter
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|getTIPId
argument_list|(
name|cluster
argument_list|,
name|jobid
argument_list|)
expr_stmt|;
comment|// wait till the map task is started
comment|// jobDetailsJSPKillJobAction url
name|String
name|url
init|=
name|jtURL
operator|+
literal|"/jobdetails.jsp?"
operator|+
literal|"action=kill&jobid="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|viewColleague
argument_list|,
literal|"POST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|unauthorizedUser
argument_list|,
literal|"POST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|modifyColleague
argument_list|,
literal|"POST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|viewAndModifyColleague
argument_list|,
literal|"POST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"killJob using jobdetails.jsp failed for a job for which "
operator|+
literal|"user has job-view and job-modify permissions"
argument_list|,
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing job "
operator|+
name|jobid
operator|+
literal|" from finally block"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
operator|+
literal|"&killJobs=true&jobCheckBox="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
argument_list|,
name|jobSubmitter
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check if jobSubmitter, mrOwner, superGroupMember and queueAdmins
comment|// can do killJob using jobdetails.jsp url
name|confirmJobDetailsJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|jobTrackerJSP
argument_list|,
name|jobSubmitter
argument_list|)
expr_stmt|;
name|confirmJobDetailsJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|jobTrackerJSP
argument_list|,
name|mrOwner
argument_list|)
expr_stmt|;
name|confirmJobDetailsJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|jobTrackerJSP
argument_list|,
name|superGroupMember
argument_list|)
expr_stmt|;
name|confirmJobDetailsJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|jobTrackerJSP
argument_list|,
name|mrAdminGroupMember
argument_list|)
expr_stmt|;
name|confirmJobDetailsJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|jobTrackerJSP
argument_list|,
name|mrAdminUser
argument_list|)
expr_stmt|;
name|confirmJobDetailsJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|jobTrackerJSP
argument_list|,
name|qAdmin
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure that the given user can do killJob using jobtracker.jsp url    * @param cluster    * @param conf    * @param jtURL    * @param user    * @throws Exception    */
DECL|method|confirmJobTrackerJSPKillJobAsUser (MiniMRCluster cluster, JobConf conf, String jtURL, String user)
specifier|private
name|void
name|confirmJobTrackerJSPKillJobAsUser
parameter_list|(
name|MiniMRCluster
name|cluster
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|String
name|jtURL
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|jobTrackerJSP
init|=
name|jtURL
operator|+
literal|"/jobtracker.jsp?a=b"
decl_stmt|;
name|Job
name|job
init|=
name|startSleepJobAsUser
argument_list|(
name|jobSubmitter
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|getTIPId
argument_list|(
name|cluster
argument_list|,
name|jobid
argument_list|)
expr_stmt|;
comment|// wait till the map task is started
comment|// jobTrackerJSP killJob url
name|String
name|url
init|=
name|jobTrackerJSP
operator|+
literal|"&killJobs=true&jobCheckBox="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|user
argument_list|,
literal|"POST"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing job "
operator|+
name|jobid
operator|+
literal|" from finally block"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
operator|+
literal|"&killJobs=true&jobCheckBox="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
argument_list|,
name|jobSubmitter
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Make sure that multiple jobs get killed using jobtracker.jsp url when    * user has modify access on only some of those jobs.    * @param cluster    * @param conf    * @param jtURL    * @param user    * @throws Exception    */
DECL|method|validateKillMultipleJobs (MiniMRCluster cluster, JobConf conf, String jtURL)
specifier|private
name|void
name|validateKillMultipleJobs
parameter_list|(
name|MiniMRCluster
name|cluster
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|String
name|jtURL
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|jobTrackerJSP
init|=
name|jtURL
operator|+
literal|"/jobtracker.jsp?a=b"
decl_stmt|;
comment|// jobTrackerJSP killJob url
name|String
name|url
init|=
name|jobTrackerJSP
operator|+
literal|"&killJobs=true"
decl_stmt|;
comment|// view-job-acl doesn't matter for killJob from jobtracker jsp page
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Let us start 4 jobs as 4 different users(none of these 4 users is
comment|// mrOwner and none of these users is a member of mrAdmin/superGroup). Only
comment|// based on the config MRJobConfig.JOB_ACL_MODIFY_JOB being set here
comment|// and the jobSubmitter, killJob on each of the jobs will be succeeded.
comment|// start 1st job.
comment|// Out of these 4 users, only jobSubmitter can do killJob on 1st job
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_MODIFY_JOB
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|Job
name|job1
init|=
name|startSleepJobAsUser
argument_list|(
name|jobSubmitter
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
init|=
name|job1
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|getTIPId
argument_list|(
name|cluster
argument_list|,
name|jobid
argument_list|)
expr_stmt|;
comment|// wait till the map task is started
name|url
operator|=
name|url
operator|.
name|concat
argument_list|(
literal|"&jobCheckBox="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// start 2nd job.
comment|// Out of these 4 users, only jobSubmitter1 can do killJob on 2nd job
name|Job
name|job2
init|=
name|startSleepJobAsUser
argument_list|(
name|jobSubmitter1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|jobid
operator|=
name|job2
operator|.
name|getJobID
argument_list|()
expr_stmt|;
name|getTIPId
argument_list|(
name|cluster
argument_list|,
name|jobid
argument_list|)
expr_stmt|;
comment|// wait till the map task is started
name|url
operator|=
name|url
operator|.
name|concat
argument_list|(
literal|"&jobCheckBox="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// start 3rd job.
comment|// Out of these 4 users, only jobSubmitter2 can do killJob on 3rd job
name|Job
name|job3
init|=
name|startSleepJobAsUser
argument_list|(
name|jobSubmitter2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|jobid
operator|=
name|job3
operator|.
name|getJobID
argument_list|()
expr_stmt|;
name|getTIPId
argument_list|(
name|cluster
argument_list|,
name|jobid
argument_list|)
expr_stmt|;
comment|// wait till the map task is started
name|url
operator|=
name|url
operator|.
name|concat
argument_list|(
literal|"&jobCheckBox="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// start 4rd job.
comment|// Out of these 4 users, jobSubmitter1 and jobSubmitter3
comment|// can do killJob on 4th job
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_MODIFY_JOB
argument_list|,
name|jobSubmitter1
argument_list|)
expr_stmt|;
name|Job
name|job4
init|=
name|startSleepJobAsUser
argument_list|(
name|jobSubmitter3
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|jobid
operator|=
name|job4
operator|.
name|getJobID
argument_list|()
expr_stmt|;
name|getTIPId
argument_list|(
name|cluster
argument_list|,
name|jobid
argument_list|)
expr_stmt|;
comment|// wait till the map task is started
name|url
operator|=
name|url
operator|.
name|concat
argument_list|(
literal|"&jobCheckBox="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Try killing all the 4 jobs as user jobSubmitter1 who can kill only
comment|// 2nd and 4th jobs. Check if 1st and 3rd jobs are not killed and
comment|// 2nd and 4th jobs got killed
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|jobSubmitter1
argument_list|,
literal|"POST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"killJob succeeded for a job for which user doesnot "
operator|+
literal|" have job-modify permission"
argument_list|,
name|job1
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"killJob succeeded for a job for which user doesnot "
operator|+
literal|" have job-modify permission"
argument_list|,
name|job3
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"killJob failed for a job for which user has "
operator|+
literal|"job-modify permission"
argument_list|,
name|job2
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"killJob failed for a job for which user has "
operator|+
literal|"job-modify permission"
argument_list|,
name|job4
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Kill all 4 jobs as user mrOwner(even though some of them
comment|// were already killed)
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|mrOwner
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run a job and validate if JSPs/Servlets are going through authentication    * and authorization.    * @throws Exception     */
annotation|@
name|Test
DECL|method|testWebUIAuthorization ()
specifier|public
name|void
name|testWebUIAuthorization
parameter_list|()
throws|throws
name|Exception
block|{
name|setupGroupsProvider
argument_list|()
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"hadoop.http.filter.initializers"
argument_list|,
name|DummyFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"dfs.permissions.enabled"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|JTConfig
operator|.
name|PRIVATE_ACTIONS_KEY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|MRJobConfig
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|MRConfig
operator|.
name|MR_SUPERGROUP
argument_list|,
literal|"superGroup"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|MRConfig
operator|.
name|MR_ADMINS
argument_list|,
name|mrAdminUser
operator|+
literal|" "
operator|+
name|mrAdminGroup
argument_list|)
expr_stmt|;
name|String
index|[]
name|queueNames
init|=
block|{
literal|"default"
block|}
decl_stmt|;
name|String
index|[]
name|submitAclStrings
init|=
block|{
name|jobSubmitter
operator|+
literal|","
operator|+
name|jobSubmitter1
operator|+
literal|","
operator|+
name|jobSubmitter2
operator|+
literal|","
operator|+
name|jobSubmitter3
block|}
decl_stmt|;
name|String
index|[]
name|adminsAclStrings
init|=
operator|new
name|String
index|[]
block|{
name|qAdmin
block|}
decl_stmt|;
name|startCluster
argument_list|(
name|props
argument_list|,
name|queueNames
argument_list|,
name|submitAclStrings
argument_list|,
name|adminsAclStrings
argument_list|)
expr_stmt|;
name|MiniMRCluster
name|cluster
init|=
name|getMRCluster
argument_list|()
decl_stmt|;
name|int
name|infoPort
init|=
name|cluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTrackerInfoPort
argument_list|()
decl_stmt|;
name|JobConf
name|clusterConf
init|=
name|cluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|clusterConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
name|viewColleague
operator|+
literal|" group3"
argument_list|)
expr_stmt|;
comment|// Let us add group1 and group3 to modify-job-acl. So modifyColleague and
comment|// viewAndModifyColleague will be able to modify the job
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_MODIFY_JOB
argument_list|,
literal|" group1,group3"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|startSleepJobAsUser
argument_list|(
name|jobSubmitter
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|String
name|jtURL
init|=
literal|"http://localhost:"
operator|+
name|infoPort
decl_stmt|;
name|String
name|jobTrackerJSP
init|=
name|jtURL
operator|+
literal|"/jobtracker.jsp?a=b"
decl_stmt|;
try|try
block|{
comment|// Currently, authorization is not done for jobtracker page. So allow
comment|// everyone to view it.
name|validateJobTrackerJSPAccess
argument_list|(
name|jtURL
argument_list|)
expr_stmt|;
name|validateJobDetailsJSPAccess
argument_list|(
name|jobid
argument_list|,
name|jtURL
argument_list|)
expr_stmt|;
name|validateTaskGraphServletAccess
argument_list|(
name|jobid
argument_list|,
name|jtURL
argument_list|)
expr_stmt|;
name|validateJobTasksJSPAccess
argument_list|(
name|jobid
argument_list|,
name|jtURL
argument_list|)
expr_stmt|;
name|validateJobConfJSPAccess
argument_list|(
name|jobid
argument_list|,
name|jtURL
argument_list|)
expr_stmt|;
name|validateJobFailuresJSPAccess
argument_list|(
name|jobid
argument_list|,
name|jtURL
argument_list|)
expr_stmt|;
name|valiateJobBlacklistedTrackerJSPAccess
argument_list|(
name|jobid
argument_list|,
name|jtURL
argument_list|)
expr_stmt|;
name|validateJobTrackerJSPSetPriorityAction
argument_list|(
name|jobid
argument_list|,
name|jtURL
argument_list|)
expr_stmt|;
comment|// Wait for the tip to start so as to test task related JSP
name|TaskID
name|tipId
init|=
name|getTIPId
argument_list|(
name|cluster
argument_list|,
name|jobid
argument_list|)
decl_stmt|;
name|validateTaskStatsJSPAccess
argument_list|(
name|jobid
argument_list|,
name|jtURL
argument_list|,
name|tipId
argument_list|)
expr_stmt|;
name|validateTaskDetailsJSPAccess
argument_list|(
name|jobid
argument_list|,
name|jtURL
argument_list|,
name|tipId
argument_list|)
expr_stmt|;
name|validateJobTrackerJSPKillJobAction
argument_list|(
name|jobid
argument_list|,
name|jtURL
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
comment|// kill the job(as jobSubmitter) if needed
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing job "
operator|+
name|jobid
operator|+
literal|" from finally block"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
operator|+
literal|"&killJobs=true&jobCheckBox="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
argument_list|,
name|jobSubmitter
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// validate killJob of jobdetails.jsp
name|validateJobDetailsJSPKillJob
argument_list|(
name|cluster
argument_list|,
name|clusterConf
argument_list|,
name|jtURL
argument_list|)
expr_stmt|;
comment|// validate killJob of jobtracker.jsp as users viewAndModifyColleague,
comment|// jobSubmitter, mrOwner, mrAdmin and superGroupMember
name|confirmJobTrackerJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|viewAndModifyColleague
argument_list|)
expr_stmt|;
name|confirmJobTrackerJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|jobSubmitter
argument_list|)
expr_stmt|;
name|confirmJobTrackerJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|mrOwner
argument_list|)
expr_stmt|;
name|confirmJobTrackerJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|superGroupMember
argument_list|)
expr_stmt|;
name|confirmJobTrackerJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|mrAdminUser
argument_list|)
expr_stmt|;
name|confirmJobTrackerJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|mrAdminGroupMember
argument_list|)
expr_stmt|;
name|confirmJobTrackerJSPKillJobAsUser
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|,
name|qAdmin
argument_list|)
expr_stmt|;
comment|// validate killing of multiple jobs using jobtracker jsp and check
comment|// if all the jobs which can be killed by user are actually the ones that
comment|// got killed
name|validateKillMultipleJobs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
name|jtURL
argument_list|)
expr_stmt|;
block|}
DECL|method|testWebUIAuthorizationForCommonServlets ()
specifier|public
name|void
name|testWebUIAuthorizationForCommonServlets
parameter_list|()
throws|throws
name|Exception
block|{
name|setupGroupsProvider
argument_list|()
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"hadoop.http.filter.initializers"
argument_list|,
name|DummyFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|MRConfig
operator|.
name|MR_SUPERGROUP
argument_list|,
literal|"superGroup"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|MRConfig
operator|.
name|MR_ADMINS
argument_list|,
name|mrAdminUser
operator|+
literal|" "
operator|+
name|mrAdminGroup
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|true
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|validateCommonServlets
argument_list|(
name|getMRCluster
argument_list|()
argument_list|)
expr_stmt|;
name|stopCluster
argument_list|()
expr_stmt|;
block|}
DECL|method|validateCommonServlets (MiniMRCluster cluster)
specifier|private
name|void
name|validateCommonServlets
parameter_list|(
name|MiniMRCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|infoPort
init|=
name|cluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTrackerInfoPort
argument_list|()
decl_stmt|;
name|String
name|jtURL
init|=
literal|"http://localhost:"
operator|+
name|infoPort
decl_stmt|;
for|for
control|(
name|String
name|servlet
range|:
operator|new
name|String
index|[]
block|{
literal|"logs"
block|,
literal|"stacks"
block|,
literal|"logLevel"
block|}
control|)
block|{
name|String
name|url
init|=
name|jtURL
operator|+
literal|"/"
operator|+
name|servlet
decl_stmt|;
name|checkAccessToCommonServlet
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
comment|// validate access to common servlets for TaskTracker.
name|String
name|ttURL
init|=
literal|"http://localhost:"
operator|+
name|cluster
operator|.
name|getTaskTrackerRunner
argument_list|(
literal|0
argument_list|)
operator|.
name|getTaskTracker
argument_list|()
operator|.
name|getHttpPort
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|servlet
range|:
operator|new
name|String
index|[]
block|{
literal|"logs"
block|,
literal|"stacks"
block|,
literal|"logLevel"
block|}
control|)
block|{
name|String
name|url
init|=
name|ttURL
operator|+
literal|"/"
operator|+
name|servlet
decl_stmt|;
name|checkAccessToCommonServlet
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkAccessToCommonServlet (String url)
specifier|private
name|void
name|checkAccessToCommonServlet
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|url
operator|=
name|url
operator|+
literal|"?a=b"
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|mrAdminUser
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|mrAdminGroupMember
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|mrOwner
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|superGroupMember
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no access for any other user
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|getHttpStatusCode
argument_list|(
name|url
argument_list|,
name|jobSubmitter
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// validate killJob of jobtracker.jsp
DECL|method|validateJobTrackerJSPKillJobAction ( org.apache.hadoop.mapreduce.JobID jobid, String jtURL)
specifier|private
name|void
name|validateJobTrackerJSPKillJobAction
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|String
name|jtURL
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jobTrackerJSP
init|=
name|jtURL
operator|+
literal|"/jobtracker.jsp?a=b"
decl_stmt|;
name|String
name|jobTrackerJSPKillJobAction
init|=
name|jobTrackerJSP
operator|+
literal|"&killJobs=true&jobCheckBox="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
decl_stmt|;
name|validateModifyJob
argument_list|(
name|jobTrackerJSPKillJobAction
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|// validate viewing of job of taskdetails.jsp
DECL|method|validateTaskDetailsJSPAccess ( org.apache.hadoop.mapreduce.JobID jobid, String jtURL, TaskID tipId)
specifier|private
name|void
name|validateTaskDetailsJSPAccess
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|String
name|jtURL
parameter_list|,
name|TaskID
name|tipId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|taskDetailsJSP
init|=
name|jtURL
operator|+
literal|"/taskdetails.jsp?jobid="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
operator|+
literal|"&tipid="
operator|+
name|tipId
decl_stmt|;
name|validateViewJob
argument_list|(
name|taskDetailsJSP
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|// validate taskstats.jsp
DECL|method|validateTaskStatsJSPAccess ( org.apache.hadoop.mapreduce.JobID jobid, String jtURL, TaskID tipId)
specifier|private
name|void
name|validateTaskStatsJSPAccess
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|String
name|jtURL
parameter_list|,
name|TaskID
name|tipId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|taskStatsJSP
init|=
name|jtURL
operator|+
literal|"/taskstats.jsp?jobid="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
operator|+
literal|"&tipid="
operator|+
name|tipId
decl_stmt|;
name|validateViewJob
argument_list|(
name|taskStatsJSP
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|// validate setJobPriority
DECL|method|validateJobTrackerJSPSetPriorityAction ( org.apache.hadoop.mapreduce.JobID jobid, String jtURL)
specifier|private
name|void
name|validateJobTrackerJSPSetPriorityAction
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|String
name|jtURL
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jobTrackerJSP
init|=
name|jtURL
operator|+
literal|"/jobtracker.jsp?a=b"
decl_stmt|;
name|String
name|jobTrackerJSPSetJobPriorityAction
init|=
name|jobTrackerJSP
operator|+
literal|"&changeJobPriority=true&setJobPriority="
operator|+
literal|"HIGH"
operator|+
literal|"&jobCheckBox="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
decl_stmt|;
name|validateModifyJob
argument_list|(
name|jobTrackerJSPSetJobPriorityAction
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
comment|// jobSubmitter, mrOwner, qAdmin, mrAdmin and superGroupMember are not
comment|// validated for
comment|// job-modify permission in validateModifyJob(). So let us do it
comment|// explicitly here
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSPSetJobPriorityAction
argument_list|,
name|jobSubmitter
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSPSetJobPriorityAction
argument_list|,
name|superGroupMember
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSPSetJobPriorityAction
argument_list|,
name|mrAdminUser
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSPSetJobPriorityAction
argument_list|,
name|mrAdminGroupMember
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSPSetJobPriorityAction
argument_list|,
name|qAdmin
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSPSetJobPriorityAction
argument_list|,
name|mrOwner
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// validate access of jobblacklistedtrackers.jsp
DECL|method|valiateJobBlacklistedTrackerJSPAccess ( org.apache.hadoop.mapreduce.JobID jobid, String jtURL)
specifier|private
name|void
name|valiateJobBlacklistedTrackerJSPAccess
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|String
name|jtURL
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jobBlacklistedTrackersJSP
init|=
name|jtURL
operator|+
literal|"/jobblacklistedtrackers.jsp?jobid="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
decl_stmt|;
name|validateViewJob
argument_list|(
name|jobBlacklistedTrackersJSP
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|// validate access of jobfailures.jsp
DECL|method|validateJobFailuresJSPAccess ( org.apache.hadoop.mapreduce.JobID jobid, String jtURL)
specifier|private
name|void
name|validateJobFailuresJSPAccess
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|String
name|jtURL
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jobFailuresJSP
init|=
name|jtURL
operator|+
literal|"/jobfailures.jsp?jobid="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
decl_stmt|;
name|validateViewJob
argument_list|(
name|jobFailuresJSP
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|// validate access of jobconf.jsp
DECL|method|validateJobConfJSPAccess ( org.apache.hadoop.mapreduce.JobID jobid, String jtURL)
specifier|private
name|void
name|validateJobConfJSPAccess
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|String
name|jtURL
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jobConfJSP
init|=
name|jtURL
operator|+
literal|"/jobconf.jsp?jobid="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
decl_stmt|;
name|validateViewJob
argument_list|(
name|jobConfJSP
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|// validate access of jobtasks.jsp
DECL|method|validateJobTasksJSPAccess ( org.apache.hadoop.mapreduce.JobID jobid, String jtURL)
specifier|private
name|void
name|validateJobTasksJSPAccess
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|String
name|jtURL
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jobTasksJSP
init|=
name|jtURL
operator|+
literal|"/jobtasks.jsp?jobid="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
operator|+
literal|"&type=map&pagenum=1&state=running"
decl_stmt|;
name|validateViewJob
argument_list|(
name|jobTasksJSP
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|// validate access of TaskGraphServlet
DECL|method|validateTaskGraphServletAccess ( org.apache.hadoop.mapreduce.JobID jobid, String jtURL)
specifier|private
name|void
name|validateTaskGraphServletAccess
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|String
name|jtURL
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|taskGraphServlet
init|=
name|jtURL
operator|+
literal|"/taskgraph?type=map&jobid="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
decl_stmt|;
name|validateViewJob
argument_list|(
name|taskGraphServlet
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|taskGraphServlet
operator|=
name|jtURL
operator|+
literal|"/taskgraph?type=reduce&jobid="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
expr_stmt|;
name|validateViewJob
argument_list|(
name|taskGraphServlet
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|// validate access of jobdetails.jsp
DECL|method|validateJobDetailsJSPAccess ( org.apache.hadoop.mapreduce.JobID jobid, String jtURL)
specifier|private
name|void
name|validateJobDetailsJSPAccess
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|String
name|jtURL
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jobDetailsJSP
init|=
name|jtURL
operator|+
literal|"/jobdetails.jsp?jobid="
operator|+
name|jobid
operator|.
name|toString
argument_list|()
decl_stmt|;
name|validateViewJob
argument_list|(
name|jobDetailsJSP
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|// validate access of jobtracker.jsp
DECL|method|validateJobTrackerJSPAccess (String jtURL)
specifier|private
name|void
name|validateJobTrackerJSPAccess
parameter_list|(
name|String
name|jtURL
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jobTrackerJSP
init|=
name|jtURL
operator|+
literal|"/jobtracker.jsp?a=b"
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
argument_list|,
name|jobSubmitter
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
argument_list|,
name|viewColleague
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
argument_list|,
name|unauthorizedUser
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
argument_list|,
name|modifyColleague
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
argument_list|,
name|viewAndModifyColleague
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
argument_list|,
name|mrOwner
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
argument_list|,
name|qAdmin
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
argument_list|,
name|superGroupMember
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
argument_list|,
name|mrAdminUser
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|getHttpStatusCode
argument_list|(
name|jobTrackerJSP
argument_list|,
name|mrAdminGroupMember
argument_list|,
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

