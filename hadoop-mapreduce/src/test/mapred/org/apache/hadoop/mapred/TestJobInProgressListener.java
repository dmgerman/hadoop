begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatusChangeEvent
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TestNoJobSetupCleanup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|extensions
operator|.
name|TestSetup
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Test whether the JobInProgressListeners are informed as expected.  */
end_comment

begin_class
DECL|class|TestJobInProgressListener
specifier|public
class|class
name|TestJobInProgressListener
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJobInProgressListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
DECL|field|testDir
specifier|private
specifier|final
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"test-jip-listener-update"
argument_list|)
decl_stmt|;
DECL|field|mr
specifier|private
specifier|static
name|MiniMRCluster
name|mr
decl_stmt|;
DECL|field|jobtracker
specifier|private
specifier|static
name|JobTracker
name|jobtracker
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|JobConf
name|conf
decl_stmt|;
DECL|field|myScheduler
specifier|private
specifier|static
name|MyScheduler
name|myScheduler
decl_stmt|;
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSetup
name|setup
init|=
operator|new
name|TestSetup
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestJobInProgressListener
operator|.
name|class
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|JTConfig
operator|.
name|JT_TASK_SCHEDULER
argument_list|,
name|MyScheduler
operator|.
name|class
argument_list|,
name|TaskScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|jobtracker
operator|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
expr_stmt|;
name|myScheduler
operator|=
operator|(
name|MyScheduler
operator|)
name|jobtracker
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
name|conf
operator|=
name|mr
operator|.
name|createJobConf
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error in shutting down the MR cluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|jobtracker
operator|=
literal|null
expr_stmt|;
name|myScheduler
operator|.
name|terminate
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|setup
return|;
block|}
comment|/**    * This test case tests if external updates to JIP do not result into     * undesirable effects    * Test is as follows    *   - submit 2 jobs of normal priority. job1 is a waiting job which waits and    *     blocks the cluster    *   - change one parameter of job2 such that the job bumps up in the queue    *   - check if the queue looks ok    *       */
DECL|method|testJobQueueChanges ()
specifier|public
name|void
name|testJobQueueChanges
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing job queue changes"
argument_list|)
expr_stmt|;
comment|// stop the job initializer
name|myScheduler
operator|.
name|stopInitializer
argument_list|()
expr_stmt|;
name|JobQueueJobInProgressListener
name|myListener
init|=
operator|new
name|JobQueueJobInProgressListener
argument_list|()
decl_stmt|;
comment|// add the listener
name|jobtracker
operator|.
name|addJobInProgressListener
argument_list|(
name|myListener
argument_list|)
expr_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
name|Path
name|outputDir1
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"output1"
argument_list|)
decl_stmt|;
name|Path
name|outputDir2
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"output2"
argument_list|)
decl_stmt|;
name|RunningJob
name|rJob1
init|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outputDir1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running job "
operator|+
name|rJob1
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RunningJob
name|rJob2
init|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outputDir2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running job "
operator|+
name|rJob2
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// I. Check job-priority change
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing job priority changes"
argument_list|)
expr_stmt|;
comment|// bump up job2's priority
name|LOG
operator|.
name|info
argument_list|(
literal|"Increasing job2's priority to HIGH"
argument_list|)
expr_stmt|;
name|rJob2
operator|.
name|setJobPriority
argument_list|(
literal|"HIGH"
argument_list|)
expr_stmt|;
comment|// check if the queue is sane
name|assertTrue
argument_list|(
literal|"Priority change garbles the queue"
argument_list|,
name|myListener
operator|.
name|getJobQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|JobInProgress
index|[]
name|queue
init|=
name|myListener
operator|.
name|getJobQueue
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|JobInProgress
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// check if the bump has happened
name|assertTrue
argument_list|(
literal|"Priority change failed to bump up job2 in the queue"
argument_list|,
name|queue
index|[
literal|0
index|]
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|rJob2
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Priority change failed to bump down job1 in the queue"
argument_list|,
name|queue
index|[
literal|1
index|]
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|rJob1
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Priority change has garbled the queue"
argument_list|,
literal|2
argument_list|,
name|queue
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// II. Check start-time change
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing job start-time changes"
argument_list|)
expr_stmt|;
comment|// reset the priority which will make the order as
comment|//  - job1
comment|//  - job2
comment|// this will help in bumping job2 on start-time change
name|LOG
operator|.
name|info
argument_list|(
literal|"Increasing job2's priority to NORMAL"
argument_list|)
expr_stmt|;
name|rJob2
operator|.
name|setJobPriority
argument_list|(
literal|"NORMAL"
argument_list|)
expr_stmt|;
comment|// create the change event
name|JobInProgress
name|jip2
init|=
name|jobtracker
operator|.
name|getJob
argument_list|(
name|rJob2
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|JobInProgress
name|jip1
init|=
name|jobtracker
operator|.
name|getJob
argument_list|(
name|rJob1
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|JobStatus
name|prevStatus
init|=
operator|(
name|JobStatus
operator|)
name|jip2
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// change job2's start-time and the status
name|jip2
operator|.
name|startTime
operator|=
name|jip1
operator|.
name|startTime
operator|-
literal|1
expr_stmt|;
name|jip2
operator|.
name|status
operator|.
name|setStartTime
argument_list|(
name|jip2
operator|.
name|startTime
argument_list|)
expr_stmt|;
name|JobStatus
name|newStatus
init|=
operator|(
name|JobStatus
operator|)
name|jip2
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// inform the listener
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating the listener about job2's start-time change"
argument_list|)
expr_stmt|;
name|JobStatusChangeEvent
name|event
init|=
operator|new
name|JobStatusChangeEvent
argument_list|(
name|jip2
argument_list|,
name|EventType
operator|.
name|START_TIME_CHANGED
argument_list|,
name|prevStatus
argument_list|,
name|newStatus
argument_list|)
decl_stmt|;
name|myListener
operator|.
name|jobUpdated
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|// check if the queue is sane
name|assertTrue
argument_list|(
literal|"Start time change garbles the queue"
argument_list|,
name|myListener
operator|.
name|getJobQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|queue
operator|=
name|myListener
operator|.
name|getJobQueue
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|JobInProgress
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// check if the bump has happened
name|assertTrue
argument_list|(
literal|"Start time change failed to bump up job2 in the queue"
argument_list|,
name|queue
index|[
literal|0
index|]
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|rJob2
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Start time change failed to bump down job1 in the queue"
argument_list|,
name|queue
index|[
literal|1
index|]
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|rJob1
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Start time change has garbled the queue"
argument_list|,
literal|2
argument_list|,
name|queue
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check the queue status upon    *   - failed job    *   - killed job    *   - successful job    */
DECL|method|testJobCompletion ()
specifier|public
name|void
name|testJobCompletion
parameter_list|()
throws|throws
name|Exception
block|{
name|MyListener
name|mainListener
init|=
operator|new
name|MyListener
argument_list|()
decl_stmt|;
name|jobtracker
operator|.
name|addJobInProgressListener
argument_list|(
name|mainListener
argument_list|)
expr_stmt|;
comment|// stop the job initializer
name|myScheduler
operator|.
name|stopInitializer
argument_list|()
expr_stmt|;
comment|// check queued jobs
name|testQueuedJobKill
argument_list|(
name|conf
argument_list|,
name|mainListener
argument_list|)
expr_stmt|;
name|myScheduler
operator|.
name|startInitializer
argument_list|()
expr_stmt|;
comment|// check the queue state for job states
name|testFailedJob
argument_list|(
name|conf
argument_list|,
name|mainListener
argument_list|)
expr_stmt|;
name|testKilledJob
argument_list|(
name|conf
argument_list|,
name|mainListener
argument_list|)
expr_stmt|;
name|testSuccessfulJob
argument_list|(
name|conf
argument_list|,
name|mainListener
argument_list|)
expr_stmt|;
block|}
comment|// A listener that inits the tasks one at a time and also listens to the
comment|// events
DECL|class|MyListener
specifier|public
specifier|static
class|class
name|MyListener
extends|extends
name|JobInProgressListener
block|{
DECL|field|wjobs
specifier|private
name|List
argument_list|<
name|JobInProgress
argument_list|>
name|wjobs
init|=
operator|new
name|ArrayList
argument_list|<
name|JobInProgress
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|rjobs
specifier|private
name|List
argument_list|<
name|JobInProgress
argument_list|>
name|rjobs
init|=
operator|new
name|ArrayList
argument_list|<
name|JobInProgress
argument_list|>
argument_list|()
decl_stmt|;
comment|// list of job added to the wait queue
DECL|field|wjobsAdded
specifier|private
name|List
argument_list|<
name|JobID
argument_list|>
name|wjobsAdded
init|=
operator|new
name|ArrayList
argument_list|<
name|JobID
argument_list|>
argument_list|()
decl_stmt|;
comment|// list of job added to the running queue
DECL|field|rjobsAdded
specifier|private
name|List
argument_list|<
name|JobID
argument_list|>
name|rjobsAdded
init|=
operator|new
name|ArrayList
argument_list|<
name|JobID
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|contains (JobID id)
specifier|public
name|boolean
name|contains
parameter_list|(
name|JobID
name|id
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
operator|||
name|contains
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|contains (JobID id, boolean waiting)
specifier|public
name|boolean
name|contains
parameter_list|(
name|JobID
name|id
parameter_list|,
name|boolean
name|waiting
parameter_list|)
block|{
if|if
condition|(
operator|!
name|wjobsAdded
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Job "
operator|+
name|id
operator|+
literal|" not seen in waiting queue"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|waiting
condition|)
block|{
if|if
condition|(
operator|!
name|rjobsAdded
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Job "
operator|+
name|id
operator|+
literal|" not seen in run queue"
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|JobInProgress
argument_list|>
name|queue
init|=
name|waiting
condition|?
name|wjobs
else|:
name|rjobs
decl_stmt|;
for|for
control|(
name|JobInProgress
name|job
range|:
name|queue
control|)
block|{
if|if
condition|(
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|jobAdded (JobInProgress job)
specifier|public
name|void
name|jobAdded
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job "
operator|+
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" added"
argument_list|)
expr_stmt|;
name|wjobs
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|wjobsAdded
operator|.
name|add
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|jobRemoved (JobInProgress job)
specifier|public
name|void
name|jobRemoved
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job "
operator|+
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" removed"
argument_list|)
expr_stmt|;
name|wjobs
operator|.
name|remove
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|rjobs
operator|.
name|remove
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
DECL|method|jobUpdated (JobChangeEvent event)
specifier|public
name|void
name|jobUpdated
parameter_list|(
name|JobChangeEvent
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job "
operator|+
name|event
operator|.
name|getJobInProgress
argument_list|()
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" updated"
argument_list|)
expr_stmt|;
comment|// remove the job is the event is for a completed job
if|if
condition|(
name|event
operator|instanceof
name|JobStatusChangeEvent
condition|)
block|{
name|JobStatusChangeEvent
name|statusEvent
init|=
operator|(
name|JobStatusChangeEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|statusEvent
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|RUN_STATE_CHANGED
condition|)
block|{
comment|// check if the state changes from
comment|// RUNNING->COMPLETE(SUCCESS/KILLED/FAILED)
name|JobInProgress
name|jip
init|=
name|event
operator|.
name|getJobInProgress
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|jip
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|jip
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job "
operator|+
name|jobId
operator|+
literal|" deleted from the running queue"
argument_list|)
expr_stmt|;
if|if
condition|(
name|statusEvent
operator|.
name|getOldStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|PREP
condition|)
block|{
name|wjobs
operator|.
name|remove
argument_list|(
name|jip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rjobs
operator|.
name|remove
argument_list|(
name|jip
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// PREP->RUNNING
name|LOG
operator|.
name|info
argument_list|(
literal|"Job "
operator|+
name|jobId
operator|+
literal|" deleted from the waiting queue"
argument_list|)
expr_stmt|;
name|wjobs
operator|.
name|remove
argument_list|(
name|jip
argument_list|)
expr_stmt|;
name|rjobs
operator|.
name|add
argument_list|(
name|jip
argument_list|)
expr_stmt|;
name|rjobsAdded
operator|.
name|add
argument_list|(
name|jip
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testFailedJob (JobConf job, MyListener myListener)
specifier|private
name|void
name|testFailedJob
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|MyListener
name|myListener
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing job-fail"
argument_list|)
expr_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/jiplistenerfailjob/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/jiplistenerfailjob/output"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// submit a job that fails
name|RunningJob
name|rJob
init|=
name|UtilsForTests
operator|.
name|runJobFail
argument_list|(
name|job
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|rJob
operator|.
name|getID
argument_list|()
decl_stmt|;
comment|// check if the job failure was notified
name|assertFalse
argument_list|(
literal|"Missing event notification on failing a running job"
argument_list|,
name|myListener
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if failed
name|assertEquals
argument_list|(
literal|"Job failed!"
argument_list|,
name|JobStatus
operator|.
name|FAILED
argument_list|,
name|rJob
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testKilledJob (JobConf job, MyListener myListener)
specifier|private
name|void
name|testKilledJob
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|MyListener
name|myListener
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing job-kill"
argument_list|)
expr_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/jiplistenerkilljob/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/jiplistenerkilljob/output"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// submit and kill the job
name|RunningJob
name|rJob
init|=
name|UtilsForTests
operator|.
name|runJobKill
argument_list|(
name|job
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|rJob
operator|.
name|getID
argument_list|()
decl_stmt|;
comment|// check if the job failure was notified
name|assertFalse
argument_list|(
literal|"Missing event notification on killing a running job"
argument_list|,
name|myListener
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if killed
name|assertEquals
argument_list|(
literal|"Job failed!"
argument_list|,
name|JobStatus
operator|.
name|KILLED
argument_list|,
name|rJob
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSuccessfulJob (JobConf job, MyListener myListener)
specifier|private
name|void
name|testSuccessfulJob
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|MyListener
name|myListener
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing job-success"
argument_list|)
expr_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/jiplistenerjob/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/jiplistenerjob/output"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// submit the job
name|RunningJob
name|rJob
init|=
name|UtilsForTests
operator|.
name|runJobSucceed
argument_list|(
name|job
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
comment|// wait for the job to be successful
name|rJob
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
comment|// check if the job success was notified
name|assertFalse
argument_list|(
literal|"Missing event notification for a successful job"
argument_list|,
name|myListener
operator|.
name|contains
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if successful
name|assertEquals
argument_list|(
literal|"Job failed!"
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|rJob
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
comment|// test if 0-task jobs with setup-cleanup works fine
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing job with no task job with setup and cleanup"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumMapTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|outDir
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/jiplistenerjob/output-no-tasks"
argument_list|)
expr_stmt|;
comment|// submit the job
name|rJob
operator|=
name|UtilsForTests
operator|.
name|runJobSucceed
argument_list|(
name|job
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
comment|// wait for the job to be successful
name|rJob
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
comment|// check if the job success was notified
name|assertFalse
argument_list|(
literal|"Missing event notification for a successful job with no tasks"
argument_list|,
name|myListener
operator|.
name|contains
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if successful
name|assertEquals
argument_list|(
literal|"Job failed!"
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|rJob
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
comment|// test if jobs with no tasks (0 maps, 0 red) update the listener properly
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing job with no-set-cleanup no task"
argument_list|)
expr_stmt|;
name|outDir
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/jiplistenerjob/output-no-tasks-no-set"
argument_list|)
expr_stmt|;
name|Job
name|j
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|j
operator|.
name|setJobSetupCleanupNeeded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|j
operator|.
name|setOutputFormatClass
argument_list|(
name|TestNoJobSetupCleanup
operator|.
name|MyOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|j
operator|.
name|submit
argument_list|()
expr_stmt|;
name|j
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JobID
name|id
init|=
name|JobID
operator|.
name|downgrade
argument_list|(
name|j
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
comment|// check if the job is in the waiting queue
name|assertFalse
argument_list|(
literal|"Missing event notification on no-set-cleanup no task job"
argument_list|,
name|myListener
operator|.
name|contains
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the job is successful
name|assertEquals
argument_list|(
literal|"Job status doesnt reflect success"
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|rJob
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This scheduler never schedules any task as it doesnt init any task. So all    * the jobs are queued forever.    */
DECL|class|MyScheduler
specifier|public
specifier|static
class|class
name|MyScheduler
extends|extends
name|JobQueueTaskScheduler
block|{
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stopInitializer ()
name|void
name|stopInitializer
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Remove the eager task initializer
name|taskTrackerManager
operator|.
name|removeJobInProgressListener
argument_list|(
name|eagerTaskInitializationListener
argument_list|)
expr_stmt|;
comment|// terminate it
name|eagerTaskInitializationListener
operator|.
name|terminate
argument_list|()
expr_stmt|;
block|}
DECL|method|startInitializer ()
name|void
name|startInitializer
parameter_list|()
throws|throws
name|IOException
block|{
name|eagerTaskInitializationListener
operator|=
operator|new
name|EagerTaskInitializationListener
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|eagerTaskInitializationListener
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
comment|// start it
name|eagerTaskInitializationListener
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// add the eager task initializer
name|taskTrackerManager
operator|.
name|addJobInProgressListener
argument_list|(
name|eagerTaskInitializationListener
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testQueuedJobKill (JobConf conf, MyListener myListener)
specifier|private
name|void
name|testQueuedJobKill
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|MyListener
name|myListener
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing queued-job-kill"
argument_list|)
expr_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/jiplistenerqueuedjob/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/jiplistener1ueuedjob/output"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|IdentityMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|IdentityReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|RunningJob
name|rJob
init|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|rJob
operator|.
name|getID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Job : "
operator|+
name|id
operator|.
name|toString
argument_list|()
operator|+
literal|" submitted"
argument_list|)
expr_stmt|;
comment|// check if the job is in the waiting queue
name|assertTrue
argument_list|(
literal|"Missing event notification on submiting a job"
argument_list|,
name|myListener
operator|.
name|contains
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// kill the job
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing job : "
operator|+
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rJob
operator|.
name|killJob
argument_list|()
expr_stmt|;
comment|// check if the job is killed
name|assertEquals
argument_list|(
literal|"Job status doesnt reflect the kill-job action"
argument_list|,
name|JobStatus
operator|.
name|KILLED
argument_list|,
name|rJob
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the job is correctly moved
comment|// from the waiting list
name|assertFalse
argument_list|(
literal|"Missing event notification on killing a waiting job"
argument_list|,
name|myListener
operator|.
name|contains
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

