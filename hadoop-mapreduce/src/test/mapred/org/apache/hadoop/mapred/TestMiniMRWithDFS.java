begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|FileSystemCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test Mini Map-Reduce Cluster with Mini-DFS.  */
end_comment

begin_class
DECL|class|TestMiniMRWithDFS
specifier|public
class|class
name|TestMiniMRWithDFS
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMiniMRWithDFS
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|NUM_MAPS
specifier|static
specifier|final
name|int
name|NUM_MAPS
init|=
literal|10
decl_stmt|;
DECL|field|NUM_SAMPLES
specifier|static
specifier|final
name|int
name|NUM_SAMPLES
init|=
literal|100000
decl_stmt|;
DECL|class|TestResult
specifier|public
specifier|static
class|class
name|TestResult
block|{
DECL|field|output
specifier|public
name|String
name|output
decl_stmt|;
DECL|field|job
specifier|public
name|RunningJob
name|job
decl_stmt|;
DECL|method|TestResult (RunningJob job, String output)
name|TestResult
parameter_list|(
name|RunningJob
name|job
parameter_list|,
name|String
name|output
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
block|}
DECL|method|launchWordCount (JobConf conf, Path inDir, Path outDir, String input, int numMaps, int numReduces)
specifier|public
specifier|static
name|TestResult
name|launchWordCount
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|inDir
parameter_list|,
name|Path
name|outDir
parameter_list|,
name|String
name|input
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numReduces
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|inFs
init|=
name|inDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|outFs
init|=
name|outDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outFs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inFs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|inDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|{
name|DataOutputStream
name|file
init|=
name|inFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part-0"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setJobName
argument_list|(
literal|"wordcount"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// the keys are words (strings)
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// the values are counts (ints)
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|WordCount
operator|.
name|MapClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCombinerClass
argument_list|(
name|WordCount
operator|.
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|WordCount
operator|.
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
name|numMaps
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
name|numReduces
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|JobClient
operator|.
name|runJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
operator|new
name|TestResult
argument_list|(
name|job
argument_list|,
name|MapReduceTestUtil
operator|.
name|readOutput
argument_list|(
name|outDir
argument_list|,
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Make sure that there are exactly the directories that we expect to find.    *     *<br/>    *<br/>    *     * For e.g., if we want to check the existence of *only* the directories for    * user1's tasks job1-attempt1, job1-attempt2, job2-attempt1, we pass user1 as    * user, {job1, job1, job2, job3} as jobIds and {attempt1, attempt2, attempt1,    * attempt3} as taskDirs.    *     * @param mr the map-reduce cluster    * @param user the name of the job-owner    * @param jobIds the list of jobs    * @param taskDirs the task ids that should be present    */
DECL|method|checkTaskDirectories (MiniMRCluster mr, String user, String[] jobIds, String[] taskDirs)
specifier|static
name|void
name|checkTaskDirectories
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|,
name|String
name|user
parameter_list|,
name|String
index|[]
name|jobIds
parameter_list|,
name|String
index|[]
name|taskDirs
parameter_list|)
block|{
name|mr
operator|.
name|waitUntilIdle
argument_list|()
expr_stmt|;
name|int
name|trackers
init|=
name|mr
operator|.
name|getNumTaskTrackers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|observedJobDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|observedFilesInsideJobDir
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trackers
condition|;
operator|++
name|i
control|)
block|{
comment|// Verify that mapred-local-dir and it's direct contents are valid
name|File
name|localDir
init|=
operator|new
name|File
argument_list|(
name|mr
operator|.
name|getTaskTrackerLocalDir
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Local dir "
operator|+
name|localDir
operator|+
literal|" does not exist."
argument_list|,
name|localDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying contents of "
operator|+
name|MRConfig
operator|.
name|LOCAL_DIR
operator|+
literal|" "
operator|+
name|localDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify contents(user-dir) of tracker-sub-dir
name|File
name|trackerSubDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|SUBDIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|trackerSubDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// Verify contents of user-dir and populate the job-dirs/attempt-dirs
comment|// lists
name|File
name|userDir
init|=
operator|new
name|File
argument_list|(
name|trackerSubDir
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying contents of user-dir "
operator|+
name|userDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|verifyContents
argument_list|(
operator|new
name|String
index|[]
block|{
name|TaskTracker
operator|.
name|JOBCACHE
block|,
name|TaskTracker
operator|.
name|DISTCACHEDIR
block|}
argument_list|,
name|userDir
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|jobCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getJobCacheSubdir
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|jobDirs
init|=
name|jobCacheDir
operator|.
name|list
argument_list|()
decl_stmt|;
name|observedJobDirs
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|jobDirs
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|jobDir
range|:
name|jobDirs
control|)
block|{
name|String
index|[]
name|attemptDirs
init|=
operator|new
name|File
argument_list|(
name|jobCacheDir
argument_list|,
name|jobDir
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|observedFilesInsideJobDir
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|attemptDirs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Now verify that only expected job-dirs and attempt-dirs are present.
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying the list of job directories"
argument_list|)
expr_stmt|;
name|verifyContents
argument_list|(
name|jobIds
argument_list|,
name|observedJobDirs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|observedJobDirs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying the list of task directories"
argument_list|)
expr_stmt|;
comment|// All taskDirs should be present in the observed list. Other files like
comment|// job.xml etc may be present too, we are not checking them here.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|taskDirs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected task-directory "
operator|+
name|taskDirs
index|[
name|j
index|]
operator|+
literal|" is not present!"
argument_list|,
name|observedFilesInsideJobDir
operator|.
name|contains
argument_list|(
name|taskDirs
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check the list of expectedFiles against the list of observedFiles and make    * sure they both are the same. Duplicates can be present in either of the    * lists and all duplicate entries are treated as a single entity.    *     * @param expectedFiles    * @param observedFiles    */
DECL|method|verifyContents (String[] expectedFiles, String[] observedFiles)
specifier|private
specifier|static
name|void
name|verifyContents
parameter_list|(
name|String
index|[]
name|expectedFiles
parameter_list|,
name|String
index|[]
name|observedFiles
parameter_list|)
block|{
name|boolean
index|[]
name|foundExpectedFiles
init|=
operator|new
name|boolean
index|[
name|expectedFiles
operator|.
name|length
index|]
decl_stmt|;
name|boolean
index|[]
name|validObservedFiles
init|=
operator|new
name|boolean
index|[
name|observedFiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|observedFiles
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|expectedFiles
operator|.
name|length
condition|;
operator|++
name|k
control|)
block|{
if|if
condition|(
name|expectedFiles
index|[
name|k
index|]
operator|.
name|equals
argument_list|(
name|observedFiles
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|foundExpectedFiles
index|[
name|k
index|]
operator|=
literal|true
expr_stmt|;
name|validObservedFiles
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|foundExpectedFiles
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected file "
operator|+
name|expectedFiles
index|[
name|j
index|]
operator|+
literal|" not found"
argument_list|,
name|foundExpectedFiles
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|validObservedFiles
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected file "
operator|+
name|observedFiles
index|[
name|j
index|]
operator|+
literal|" found"
argument_list|,
name|validObservedFiles
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runPI (MiniMRCluster mr, JobConf jobconf)
specifier|public
specifier|static
name|void
name|runPI
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|,
name|JobConf
name|jobconf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"runPI"
argument_list|)
expr_stmt|;
name|double
name|estimate
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|QuasiMonteCarlo
operator|.
name|estimatePi
argument_list|(
name|NUM_MAPS
argument_list|,
name|NUM_SAMPLES
argument_list|,
name|jobconf
argument_list|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|error
init|=
name|Math
operator|.
name|abs
argument_list|(
name|Math
operator|.
name|PI
operator|-
name|estimate
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Error in PI estimation "
operator|+
name|error
operator|+
literal|" exceeds 0.01"
argument_list|,
operator|(
name|error
operator|<
literal|0.01
operator|)
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|checkTaskDirectories
argument_list|(
name|mr
argument_list|,
name|userName
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|runWordCount (MiniMRCluster mr, JobConf jobConf)
specifier|public
specifier|static
name|void
name|runWordCount
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"runWordCount"
argument_list|)
expr_stmt|;
comment|// Run a word count example
comment|// Keeping tasks that match this pattern
name|String
name|pattern
init|=
name|TaskAttemptID
operator|.
name|getTaskAttemptIDsPattern
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setKeepTaskFilesPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|TestResult
name|result
decl_stmt|;
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"./wc/input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"./wc/output"
argument_list|)
decl_stmt|;
name|String
name|input
init|=
literal|"The quick brown fox\nhas many silly\nred fox sox\n"
decl_stmt|;
name|result
operator|=
name|launchWordCount
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|input
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The\t1\nbrown\t1\nfox\t2\nhas\t1\nmany\t1\n"
operator|+
literal|"quick\t1\nred\t1\nsilly\t1\nsox\t1\n"
argument_list|,
name|result
operator|.
name|output
argument_list|)
expr_stmt|;
name|JobID
name|jobid
init|=
name|result
operator|.
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|taskid
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobid
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|checkTaskDirectories
argument_list|(
name|mr
argument_list|,
name|userName
argument_list|,
operator|new
name|String
index|[]
block|{
name|jobid
operator|.
name|toString
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|taskid
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
comment|// test with maps=0
name|jobConf
operator|=
name|mr
operator|.
name|createJobConf
argument_list|()
expr_stmt|;
name|input
operator|=
literal|"owen is oom"
expr_stmt|;
name|result
operator|=
name|launchWordCount
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|input
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"is\t1\noom\t1\nowen\t1\n"
argument_list|,
name|result
operator|.
name|output
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|result
operator|.
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|long
name|hdfsRead
init|=
name|counters
operator|.
name|findCounter
argument_list|(
literal|"HDFS"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|hdfsWrite
init|=
name|counters
operator|.
name|findCounter
argument_list|(
literal|"HDFS"
argument_list|,
name|FileSystemCounter
operator|.
name|BYTES_WRITTEN
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|rawSplitBytesRead
init|=
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|SPLIT_RAW_BYTES
argument_list|)
operator|.
name|getCounter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|output
operator|.
name|length
argument_list|()
argument_list|,
name|hdfsWrite
argument_list|)
expr_stmt|;
comment|// add the correction factor of 234 as the input split is also streamed
name|assertEquals
argument_list|(
name|input
operator|.
name|length
argument_list|()
operator|+
name|rawSplitBytesRead
argument_list|,
name|hdfsRead
argument_list|)
expr_stmt|;
comment|// Run a job with input and output going to localfs even though the
comment|// default fs is hdfs.
block|{
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
name|Path
name|localIn
init|=
name|localfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/local/in"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|localOut
init|=
name|localfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/local/out"
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|=
name|launchWordCount
argument_list|(
name|jobConf
argument_list|,
name|localIn
argument_list|,
name|localOut
argument_list|,
literal|"all your base belong to us"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all\t1\nbase\t1\nbelong\t1\nto\t1\nus\t1\nyour\t1\n"
argument_list|,
name|result
operator|.
name|output
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"outputs on localfs"
argument_list|,
name|localfs
operator|.
name|exists
argument_list|(
name|localOut
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testWithDFS ()
specifier|public
name|void
name|testWithDFS
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|taskTrackers
init|=
literal|4
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// make cleanup inline sothat validation of existence of these directories
comment|// can be done
name|mr
operator|.
name|setInlineCleanupThreads
argument_list|()
expr_stmt|;
name|runPI
argument_list|(
name|mr
argument_list|,
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
name|runWordCount
argument_list|(
name|mr
argument_list|,
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testWithDFSWithDefaultPort ()
specifier|public
name|void
name|testWithDFSWithDefaultPort
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|taskTrackers
init|=
literal|4
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// start a dfs with the default port number
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|NameNode
operator|.
name|DEFAULT_PORT
argument_list|,
name|conf
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|TestResult
name|result
decl_stmt|;
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"./wc/input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://"
operator|+
name|dfs
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNameNodeAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|NameNode
operator|.
name|DEFAULT_PORT
operator|+
literal|"/./wc/output"
argument_list|)
decl_stmt|;
name|String
name|input
init|=
literal|"The quick brown fox\nhas many silly\nred fox sox\n"
decl_stmt|;
name|result
operator|=
name|launchWordCount
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
name|input
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The\t1\nbrown\t1\nfox\t2\nhas\t1\nmany\t1\n"
operator|+
literal|"quick\t1\nred\t1\nsilly\t1\nsox\t1\n"
argument_list|,
name|result
operator|.
name|output
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|outDir2
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs:/test/wc/output2"
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
literal|"hdfs://localhost:"
operator|+
name|NameNode
operator|.
name|DEFAULT_PORT
argument_list|)
expr_stmt|;
name|result
operator|=
name|launchWordCount
argument_list|(
name|jobConf
argument_list|,
name|inDir
argument_list|,
name|outDir2
argument_list|,
name|input
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The\t1\nbrown\t1\nfox\t2\nhas\t1\nmany\t1\n"
operator|+
literal|"quick\t1\nred\t1\nsilly\t1\nsox\t1\n"
argument_list|,
name|result
operator|.
name|output
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|net
operator|.
name|BindException
name|be
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip the test this time because can not start namenode on port "
operator|+
name|NameNode
operator|.
name|DEFAULT_PORT
argument_list|,
name|be
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

