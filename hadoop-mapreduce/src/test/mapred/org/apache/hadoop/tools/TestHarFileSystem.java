begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|HadoopArchives
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|log
operator|.
name|Log
import|;
end_import

begin_comment
comment|/**  * test the har file system  * create a har filesystem  * run fs commands  * and then run a map reduce job  */
end_comment

begin_class
DECL|class|TestHarFileSystem
specifier|public
class|class
name|TestHarFileSystem
extends|extends
name|TestCase
block|{
DECL|field|inputPath
DECL|field|inputrelPath
specifier|private
name|Path
name|inputPath
decl_stmt|,
name|inputrelPath
decl_stmt|;
DECL|field|dfscluster
specifier|private
name|MiniDFSCluster
name|dfscluster
decl_stmt|;
DECL|field|mapred
specifier|private
name|MiniMRCluster
name|mapred
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|filea
DECL|field|fileb
DECL|field|filec
specifier|private
name|Path
name|filea
decl_stmt|,
name|fileb
decl_stmt|,
name|filec
decl_stmt|;
DECL|field|archivePath
specifier|private
name|Path
name|archivePath
decl_stmt|;
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|dfscluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dfscluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|mapred
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inputPath
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|inputrelPath
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|filea
operator|=
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|fileb
operator|=
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|filec
operator|=
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"c c"
argument_list|)
expr_stmt|;
name|archivePath
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
literal|"tmp"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|inputPath
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|filea
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"a"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|fileb
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"b"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|filec
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"c"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|mapred
operator|!=
literal|null
condition|)
block|{
name|mapred
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfscluster
operator|!=
literal|null
condition|)
block|{
name|dfscluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|class|TextMapperReducer
specifier|static
class|class
name|TextMapperReducer
implements|implements
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
implements|,
name|Reducer
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
comment|//do nothing
block|}
DECL|method|map (LongWritable key, Text value, OutputCollector<Text, Text> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|collect
argument_list|(
name|value
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do nothing
block|}
DECL|method|reduce (Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* check bytes in the har output files */
DECL|method|checkBytes (Path harPath, Configuration conf)
specifier|private
name|void
name|checkBytes
parameter_list|(
name|Path
name|harPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|harFilea
init|=
operator|new
name|Path
argument_list|(
name|harPath
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Path
name|harFileb
init|=
operator|new
name|Path
argument_list|(
name|harPath
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Path
name|harFilec
init|=
operator|new
name|Path
argument_list|(
name|harPath
argument_list|,
literal|"c c"
argument_list|)
decl_stmt|;
name|FileSystem
name|harFs
init|=
name|harFilea
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fin
init|=
name|harFs
operator|.
name|open
argument_list|(
name|harFilea
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|int
name|readBytes
init|=
name|fin
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"strings are equal "
argument_list|,
operator|(
name|b
index|[
literal|0
index|]
operator|==
literal|"a"
operator|.
name|getBytes
argument_list|()
index|[
literal|0
index|]
operator|)
argument_list|)
expr_stmt|;
name|fin
operator|=
name|harFs
operator|.
name|open
argument_list|(
name|harFileb
argument_list|)
expr_stmt|;
name|fin
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"strings are equal "
argument_list|,
operator|(
name|b
index|[
literal|0
index|]
operator|==
literal|"b"
operator|.
name|getBytes
argument_list|()
index|[
literal|0
index|]
operator|)
argument_list|)
expr_stmt|;
name|fin
operator|=
name|harFs
operator|.
name|open
argument_list|(
name|harFilec
argument_list|)
expr_stmt|;
name|fin
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"strings are equal "
argument_list|,
operator|(
name|b
index|[
literal|0
index|]
operator|==
literal|"c"
operator|.
name|getBytes
argument_list|()
index|[
literal|0
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkProperties (Path harPath, Configuration conf)
specifier|private
name|void
name|checkProperties
parameter_list|(
name|Path
name|harPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|harFilea
init|=
operator|new
name|Path
argument_list|(
name|harPath
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Path
name|harFileb
init|=
operator|new
name|Path
argument_list|(
name|harPath
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Path
name|harFilec
init|=
operator|new
name|Path
argument_list|(
name|harPath
argument_list|,
literal|"c c"
argument_list|)
decl_stmt|;
name|FileSystem
name|harFs
init|=
name|harFilea
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|nonharFilea
init|=
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Path
name|nonharFileb
init|=
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Path
name|nonharFilec
init|=
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"c c"
argument_list|)
decl_stmt|;
name|FileSystem
name|nonharFs
init|=
name|nonharFilea
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Modification times do not match for a"
argument_list|,
name|harFs
operator|.
name|getFileStatus
argument_list|(
name|harFilea
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|nonharFs
operator|.
name|getFileStatus
argument_list|(
name|nonharFilea
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Modification times do not match for b"
argument_list|,
name|harFs
operator|.
name|getFileStatus
argument_list|(
name|harFileb
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|nonharFs
operator|.
name|getFileStatus
argument_list|(
name|nonharFileb
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Modification times do not match for c"
argument_list|,
name|harFs
operator|.
name|getFileStatus
argument_list|(
name|harFilec
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|nonharFs
operator|.
name|getFileStatus
argument_list|(
name|nonharFilec
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * check if the block size of the part files is what we had specified    */
DECL|method|checkBlockSize (FileSystem fs, Path finalPath, long blockSize)
specifier|private
name|void
name|checkBlockSize
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|finalPath
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"part-*"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|statuses
control|)
block|{
name|assertTrue
argument_list|(
name|status
operator|.
name|getBlockSize
argument_list|()
operator|==
name|blockSize
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test archives with a -p option
DECL|method|testRelativeArchives ()
specifier|public
name|void
name|testRelativeArchives
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|archivePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|mapred
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|HadoopArchives
name|har
init|=
operator|new
name|HadoopArchives
argument_list|(
name|conf
argument_list|)
decl_stmt|;
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|6
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-archiveName"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"foo1.har"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"-p"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
name|fs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|4
index|]
operator|=
literal|"test"
expr_stmt|;
name|args
index|[
literal|5
index|]
operator|=
name|archivePath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|har
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"failed test"
argument_list|,
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Path
name|finalPath
init|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
literal|"foo1.har"
argument_list|)
decl_stmt|;
name|Path
name|fsPath
init|=
operator|new
name|Path
argument_list|(
name|inputPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
comment|// make it a har path
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
literal|"har://"
operator|+
name|filePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"_index"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"_masterindex"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/*check for existence of only 1 part file, since part file size == 2GB */
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"part-0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"part-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"part-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"_logs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|finalPath
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-ls"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|harPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|// fileb and filec
name|assertTrue
argument_list|(
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkBytes
argument_list|(
name|harPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkProperties
argument_list|(
name|harPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|/* check block size for path files */
name|checkBlockSize
argument_list|(
name|fs
argument_list|,
name|finalPath
argument_list|,
literal|512
operator|*
literal|1024
operator|*
literal|1024l
argument_list|)
expr_stmt|;
block|}
comment|/** now try with different block size and part file size **/
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|8
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-Dhar.block.size=512"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-Dhar.partfile.size=1"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"-archiveName"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
literal|"foo.har"
expr_stmt|;
name|args
index|[
literal|4
index|]
operator|=
literal|"-p"
expr_stmt|;
name|args
index|[
literal|5
index|]
operator|=
name|fs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|6
index|]
operator|=
literal|"test"
expr_stmt|;
name|args
index|[
literal|7
index|]
operator|=
name|archivePath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|har
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"failed test"
argument_list|,
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Path
name|finalPath
init|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
literal|"foo.har"
argument_list|)
decl_stmt|;
name|Path
name|fsPath
init|=
operator|new
name|Path
argument_list|(
name|inputPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
comment|// make it a har path
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
literal|"har://"
operator|+
name|filePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"_index"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"_masterindex"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/*check for existence of 3 part files, since part file size == 1 */
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"part-0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"part-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"part-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"_logs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|finalPath
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-ls"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|harPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|// fileb and filec
name|assertTrue
argument_list|(
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkBytes
argument_list|(
name|harPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkProperties
argument_list|(
name|harPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkBlockSize
argument_list|(
name|fs
argument_list|,
name|finalPath
argument_list|,
literal|512
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testArchivesWithMapred ()
specifier|public
name|void
name|testArchivesWithMapred
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|archivePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|mapred
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|HadoopArchives
name|har
init|=
operator|new
name|HadoopArchives
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
comment|//check for destination not specfied
name|args
index|[
literal|0
index|]
operator|=
literal|"-archiveName"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"foo.har"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"-p"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
literal|"/"
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|har
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|6
index|]
expr_stmt|;
comment|//check for wrong archiveName
name|args
index|[
literal|0
index|]
operator|=
literal|"-archiveName"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/d/foo.har"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"-p"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
literal|"/"
expr_stmt|;
name|args
index|[
literal|4
index|]
operator|=
name|inputrelPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|5
index|]
operator|=
name|archivePath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|har
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|//  se if dest is a file
name|args
index|[
literal|1
index|]
operator|=
literal|"foo.har"
expr_stmt|;
name|args
index|[
literal|5
index|]
operator|=
name|filec
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|har
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|//this is a valid run
name|args
index|[
literal|0
index|]
operator|=
literal|"-archiveName"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"foo.har"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"-p"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
literal|"/"
expr_stmt|;
name|args
index|[
literal|4
index|]
operator|=
name|inputrelPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|5
index|]
operator|=
name|archivePath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|har
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|//checl for the existenece of the archive
name|assertTrue
argument_list|(
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|///try running it again. it should not
comment|// override the directory
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|har
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Path
name|finalPath
init|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
literal|"foo.har"
argument_list|)
decl_stmt|;
name|Path
name|fsPath
init|=
operator|new
name|Path
argument_list|(
name|inputPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|relative
init|=
name|fsPath
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
name|relative
argument_list|)
decl_stmt|;
comment|//make it a har path
name|URI
name|uri
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
literal|"har://"
operator|+
literal|"hdfs-"
operator|+
name|uri
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|uri
operator|.
name|getPort
argument_list|()
operator|+
name|filePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"_index"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"_masterindex"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"_logs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//creation tested
comment|//check if the archive is same
comment|// do ls and cat on all the files
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-ls"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|harPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|// ls should work.
name|assertTrue
argument_list|(
operator|(
name|ret
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
comment|//now check for contents of filea
comment|// fileb and filec
name|Path
name|harFilea
init|=
operator|new
name|Path
argument_list|(
name|harPath
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Path
name|harFileb
init|=
operator|new
name|Path
argument_list|(
name|harPath
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Path
name|harFilec
init|=
operator|new
name|Path
argument_list|(
name|harPath
argument_list|,
literal|"c c"
argument_list|)
decl_stmt|;
name|FileSystem
name|harFs
init|=
name|harFilea
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fin
init|=
name|harFs
operator|.
name|open
argument_list|(
name|harFilea
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|int
name|readBytes
init|=
name|fin
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Empty read."
argument_list|,
name|readBytes
operator|>
literal|0
argument_list|)
expr_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"strings are equal "
argument_list|,
operator|(
name|b
index|[
literal|0
index|]
operator|==
literal|"a"
operator|.
name|getBytes
argument_list|()
index|[
literal|0
index|]
operator|)
argument_list|)
expr_stmt|;
name|fin
operator|=
name|harFs
operator|.
name|open
argument_list|(
name|harFileb
argument_list|)
expr_stmt|;
name|readBytes
operator|=
name|fin
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Empty read."
argument_list|,
name|readBytes
operator|>
literal|0
argument_list|)
expr_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"strings are equal "
argument_list|,
operator|(
name|b
index|[
literal|0
index|]
operator|==
literal|"b"
operator|.
name|getBytes
argument_list|()
index|[
literal|0
index|]
operator|)
argument_list|)
expr_stmt|;
name|fin
operator|=
name|harFs
operator|.
name|open
argument_list|(
name|harFilec
argument_list|)
expr_stmt|;
name|readBytes
operator|=
name|fin
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Empty read."
argument_list|,
name|readBytes
operator|>
literal|0
argument_list|)
expr_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"strings are equal "
argument_list|,
operator|(
name|b
index|[
literal|0
index|]
operator|==
literal|"c"
operator|.
name|getBytes
argument_list|()
index|[
literal|0
index|]
operator|)
argument_list|)
expr_stmt|;
comment|// ok all files match
comment|// run a map reduce job
name|FileSystem
name|fsHar
init|=
name|harPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|bla
init|=
name|fsHar
operator|.
name|listStatus
argument_list|(
name|harPath
argument_list|)
decl_stmt|;
name|Path
name|outdir
init|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
literal|"mapout"
argument_list|)
decl_stmt|;
name|JobConf
name|jobconf
init|=
name|mapred
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|jobconf
argument_list|,
name|harPath
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setOutputFormat
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jobconf
argument_list|,
name|outdir
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setMapperClass
argument_list|(
name|TextMapperReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setReducerClass
argument_list|(
name|TextMapperReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobconf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|jobconf
argument_list|)
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|outdir
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|outdir
argument_list|,
literal|"part*"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|reduceFile
init|=
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|reduceIn
init|=
name|fs
operator|.
name|open
argument_list|(
name|reduceFile
argument_list|)
decl_stmt|;
name|b
operator|=
operator|new
name|byte
index|[
literal|6
index|]
expr_stmt|;
name|readBytes
operator|=
name|reduceIn
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should read 6 bytes instead of "
operator|+
name|readBytes
operator|+
literal|"."
argument_list|,
name|readBytes
operator|==
literal|6
argument_list|)
expr_stmt|;
comment|//assuming all the 6 bytes were read.
name|Text
name|readTxt
init|=
operator|new
name|Text
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"a\nb\nc\n"
operator|.
name|equals
argument_list|(
name|readTxt
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"number of bytes left should be -1"
argument_list|,
name|reduceIn
operator|.
name|read
argument_list|(
name|b
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|reduceIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFileBlockLocations ()
specifier|public
name|void
name|testGetFileBlockLocations
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|archivePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|mapred
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|HadoopArchives
name|har
init|=
operator|new
name|HadoopArchives
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|8
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-Dhar.block.size=512"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-Dhar.partfile.size=1"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"-archiveName"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
literal|"foo bar.har"
expr_stmt|;
name|args
index|[
literal|4
index|]
operator|=
literal|"-p"
expr_stmt|;
name|args
index|[
literal|5
index|]
operator|=
name|fs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|6
index|]
operator|=
literal|"test"
expr_stmt|;
name|args
index|[
literal|7
index|]
operator|=
name|archivePath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|har
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"failed test"
argument_list|,
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Path
name|finalPath
init|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
literal|"foo bar.har"
argument_list|)
decl_stmt|;
name|Path
name|fsPath
init|=
operator|new
name|Path
argument_list|(
name|inputPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|Path
name|filea
init|=
operator|new
name|Path
argument_list|(
name|filePath
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
comment|// make it a har path
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
literal|"har://"
operator|+
name|filea
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|harFs
init|=
name|harPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|harFs
operator|.
name|listStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|statuses
control|)
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|harFs
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|lastOffset
init|=
literal|0
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Only one block location expected for files this small"
argument_list|,
literal|1
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Block location should start at offset 0"
argument_list|,
literal|0
argument_list|,
name|locations
index|[
literal|0
index|]
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSpaces ()
specifier|public
name|void
name|testSpaces
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|archivePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|mapred
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|HadoopArchives
name|har
init|=
operator|new
name|HadoopArchives
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|6
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-archiveName"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"foo bar.har"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"-p"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
name|fs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|4
index|]
operator|=
literal|"test"
expr_stmt|;
name|args
index|[
literal|5
index|]
operator|=
name|archivePath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|har
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"failed test"
argument_list|,
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Path
name|finalPath
init|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
literal|"foo bar.har"
argument_list|)
decl_stmt|;
name|Path
name|fsPath
init|=
operator|new
name|Path
argument_list|(
name|inputPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|finalPath
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
comment|// make it a har path
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
literal|"har://"
operator|+
name|filePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|harFs
init|=
name|harPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|harFs
operator|.
name|listStatus
argument_list|(
name|finalPath
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

