begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.pi.math
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
DECL|class|TestLongLong
specifier|public
class|class
name|TestLongLong
extends|extends
name|junit
operator|.
name|framework
operator|.
name|TestCase
block|{
DECL|field|RAN
specifier|static
specifier|final
name|Random
name|RAN
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|MASK
specifier|static
specifier|final
name|long
name|MASK
init|=
operator|(
literal|1L
operator|<<
operator|(
name|LongLong
operator|.
name|SIZE
operator|>>
literal|1
operator|)
operator|)
operator|-
literal|1
decl_stmt|;
DECL|method|nextPositiveLong ()
specifier|static
name|long
name|nextPositiveLong
parameter_list|()
block|{
return|return
name|RAN
operator|.
name|nextLong
argument_list|()
operator|&
name|MASK
return|;
block|}
DECL|method|verifyMultiplication (long a, long b)
specifier|static
name|void
name|verifyMultiplication
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
specifier|final
name|LongLong
name|ll
init|=
name|LongLong
operator|.
name|multiplication
argument_list|(
operator|new
name|LongLong
argument_list|()
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
specifier|final
name|BigInteger
name|bi
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|multiply
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|s
init|=
name|String
operator|.
name|format
argument_list|(
literal|"\na = %x\nb = %x\nll= "
operator|+
name|ll
operator|+
literal|"\nbi= "
operator|+
name|bi
operator|.
name|toString
argument_list|(
literal|16
argument_list|)
operator|+
literal|"\n"
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
comment|//System.out.println(s);
name|assertEquals
argument_list|(
name|s
argument_list|,
name|bi
argument_list|,
name|ll
operator|.
name|toBigInteger
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiplication ()
specifier|public
name|void
name|testMultiplication
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|a
init|=
name|nextPositiveLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|b
init|=
name|nextPositiveLong
argument_list|()
decl_stmt|;
name|verifyMultiplication
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|max
init|=
name|Long
operator|.
name|MAX_VALUE
operator|&
name|MASK
decl_stmt|;
name|verifyMultiplication
argument_list|(
name|max
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRightShift (long a, long b)
specifier|static
name|void
name|verifyRightShift
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
specifier|final
name|LongLong
name|ll
init|=
operator|new
name|LongLong
argument_list|()
operator|.
name|set
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
specifier|final
name|BigInteger
name|bi
init|=
name|ll
operator|.
name|toBigInteger
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
argument_list|<
name|LongLong
operator|.
name|SIZE
argument_list|>
operator|>
literal|1
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|result
init|=
name|ll
operator|.
name|shiftRight
argument_list|(
name|i
argument_list|)
operator|&
name|MASK
decl_stmt|;
specifier|final
name|long
name|expected
init|=
name|bi
operator|.
name|shiftRight
argument_list|(
name|i
argument_list|)
operator|.
name|longValue
argument_list|()
operator|&
name|MASK
decl_stmt|;
specifier|final
name|String
name|s
init|=
name|String
operator|.
name|format
argument_list|(
literal|"\na = %x\nb = %x\nll= "
operator|+
name|ll
operator|+
literal|"\nbi= "
operator|+
name|bi
operator|.
name|toString
argument_list|(
literal|16
argument_list|)
operator|+
literal|"\n"
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|s
init|=
name|String
operator|.
name|format
argument_list|(
literal|"\na = %x\nb = %x\nll= "
operator|+
name|ll
operator|+
literal|"\nbi= "
operator|+
name|bi
operator|.
name|toString
argument_list|(
literal|16
argument_list|)
operator|+
literal|"\n"
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
comment|//System.out.println(s);
name|assertEquals
argument_list|(
name|s
argument_list|,
name|bi
argument_list|,
name|ll
operator|.
name|toBigInteger
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRightShift ()
specifier|public
name|void
name|testRightShift
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|a
init|=
name|nextPositiveLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|b
init|=
name|nextPositiveLong
argument_list|()
decl_stmt|;
name|verifyMultiplication
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

