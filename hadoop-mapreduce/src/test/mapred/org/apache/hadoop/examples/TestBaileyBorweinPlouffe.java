begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_comment
comment|/** Tests for BaileyBorweinPlouffe */
end_comment

begin_class
DECL|class|TestBaileyBorweinPlouffe
specifier|public
class|class
name|TestBaileyBorweinPlouffe
extends|extends
name|junit
operator|.
name|framework
operator|.
name|TestCase
block|{
DECL|method|testMod ()
specifier|public
name|void
name|testMod
parameter_list|()
block|{
specifier|final
name|BigInteger
name|TWO
init|=
name|BigInteger
operator|.
name|ONE
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|n
init|=
literal|3
init|;
name|n
operator|<
literal|100
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|long
name|e
init|=
literal|1
init|;
name|e
operator|<
literal|100
condition|;
name|e
operator|++
control|)
block|{
specifier|final
name|long
name|r
init|=
name|TWO
operator|.
name|modPow
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|e
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|n
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"e="
operator|+
name|e
operator|+
literal|", n="
operator|+
name|n
argument_list|,
name|r
argument_list|,
name|BaileyBorweinPlouffe
operator|.
name|mod
argument_list|(
name|e
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testHexDigit ()
specifier|public
name|void
name|testHexDigit
parameter_list|()
block|{
specifier|final
name|long
index|[]
name|answers
init|=
block|{
literal|0x43F6
block|,
literal|0xA308
block|,
literal|0x29B7
block|,
literal|0x49F1
block|,
literal|0x8AC8
block|,
literal|0x35EA
block|}
decl_stmt|;
name|long
name|d
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|answers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"d="
operator|+
name|d
argument_list|,
name|answers
index|[
name|i
index|]
argument_list|,
name|BaileyBorweinPlouffe
operator|.
name|hexDigits
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|*=
literal|10
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0x243FL
argument_list|,
name|BaileyBorweinPlouffe
operator|.
name|hexDigits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

