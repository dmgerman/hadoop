begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.aggregate
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_class
DECL|class|AggregatorTests
specifier|public
class|class
name|AggregatorTests
extends|extends
name|ValueAggregatorBaseDescriptor
block|{
DECL|method|generateKeyValPairs (Object key, Object val)
specifier|public
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|generateKeyValPairs
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|retv
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|words
init|=
name|val
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|String
name|countType
decl_stmt|;
name|String
name|id
decl_stmt|;
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|e
decl_stmt|;
for|for
control|(
name|String
name|word
range|:
name|words
control|)
block|{
name|long
name|numVal
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|word
argument_list|)
decl_stmt|;
name|countType
operator|=
name|LONG_VALUE_SUM
expr_stmt|;
name|id
operator|=
literal|"count_"
operator|+
name|word
expr_stmt|;
name|e
operator|=
name|generateEntry
argument_list|(
name|countType
argument_list|,
name|id
argument_list|,
name|ONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|retv
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|countType
operator|=
name|LONG_VALUE_MAX
expr_stmt|;
name|id
operator|=
literal|"max"
expr_stmt|;
name|e
operator|=
name|generateEntry
argument_list|(
name|countType
argument_list|,
name|id
argument_list|,
operator|new
name|Text
argument_list|(
name|word
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|retv
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|countType
operator|=
name|LONG_VALUE_MIN
expr_stmt|;
name|id
operator|=
literal|"min"
expr_stmt|;
name|e
operator|=
name|generateEntry
argument_list|(
name|countType
argument_list|,
name|id
argument_list|,
operator|new
name|Text
argument_list|(
name|word
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|retv
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|countType
operator|=
name|STRING_VALUE_MAX
expr_stmt|;
name|id
operator|=
literal|"value_as_string_max"
expr_stmt|;
name|e
operator|=
name|generateEntry
argument_list|(
name|countType
argument_list|,
name|id
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
operator|+
name|numVal
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|retv
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|countType
operator|=
name|STRING_VALUE_MIN
expr_stmt|;
name|id
operator|=
literal|"value_as_string_min"
expr_stmt|;
name|e
operator|=
name|generateEntry
argument_list|(
name|countType
argument_list|,
name|id
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
operator|+
name|numVal
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|retv
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|countType
operator|=
name|UNIQ_VALUE_COUNT
expr_stmt|;
name|id
operator|=
literal|"uniq_count"
expr_stmt|;
name|e
operator|=
name|generateEntry
argument_list|(
name|countType
argument_list|,
name|id
argument_list|,
operator|new
name|Text
argument_list|(
name|word
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|retv
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|countType
operator|=
name|VALUE_HISTOGRAM
expr_stmt|;
name|id
operator|=
literal|"histogram"
expr_stmt|;
name|e
operator|=
name|generateEntry
argument_list|(
name|countType
argument_list|,
name|id
argument_list|,
operator|new
name|Text
argument_list|(
name|word
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|retv
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retv
return|;
block|}
block|}
end_class

end_unit

