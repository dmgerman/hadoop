begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestIntegerSplitter
specifier|public
class|class
name|TestIntegerSplitter
extends|extends
name|TestCase
block|{
DECL|method|toLongArray (List<Long> in)
specifier|private
name|long
index|[]
name|toLongArray
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|in
parameter_list|)
block|{
name|long
index|[]
name|out
init|=
operator|new
name|long
index|[
name|in
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
name|in
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|formatLongArray (long [] ar)
specifier|public
name|String
name|formatLongArray
parameter_list|(
name|long
index|[]
name|ar
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|long
name|val
range|:
name|ar
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|assertLongArrayEquals (long [] expected, long [] actual)
specifier|public
name|void
name|assertLongArrayEquals
parameter_list|(
name|long
index|[]
name|expected
parameter_list|,
name|long
index|[]
name|actual
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"Failure at position "
operator|+
name|i
operator|+
literal|"; got "
operator|+
name|actual
index|[
name|i
index|]
operator|+
literal|" instead of "
operator|+
name|expected
index|[
name|i
index|]
operator|+
literal|"; actual array is "
operator|+
name|formatLongArray
argument_list|(
name|actual
argument_list|)
argument_list|,
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|oob
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected array with "
operator|+
name|expected
operator|.
name|length
operator|+
literal|" elements; got "
operator|+
name|actual
operator|.
name|length
operator|+
literal|". Actual array is "
operator|+
name|formatLongArray
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|actual
operator|.
name|length
operator|>
name|expected
operator|.
name|length
condition|)
block|{
name|fail
argument_list|(
literal|"Actual array has "
operator|+
name|actual
operator|.
name|length
operator|+
literal|" elements; expected "
operator|+
name|expected
operator|.
name|length
operator|+
literal|". ACtual array is "
operator|+
name|formatLongArray
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEvenSplits ()
specifier|public
name|void
name|testEvenSplits
parameter_list|()
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|splits
init|=
operator|new
name|IntegerSplitter
argument_list|()
operator|.
name|split
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|long
index|[]
name|expected
init|=
block|{
literal|0
block|,
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|50
block|,
literal|60
block|,
literal|70
block|,
literal|80
block|,
literal|90
block|,
literal|100
block|}
decl_stmt|;
name|assertLongArrayEquals
argument_list|(
name|expected
argument_list|,
name|toLongArray
argument_list|(
name|splits
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOddSplits ()
specifier|public
name|void
name|testOddSplits
parameter_list|()
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|splits
init|=
operator|new
name|IntegerSplitter
argument_list|()
operator|.
name|split
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
literal|95
argument_list|)
decl_stmt|;
name|long
index|[]
name|expected
init|=
block|{
literal|0
block|,
literal|9
block|,
literal|18
block|,
literal|27
block|,
literal|36
block|,
literal|45
block|,
literal|54
block|,
literal|63
block|,
literal|72
block|,
literal|81
block|,
literal|90
block|,
literal|95
block|}
decl_stmt|;
name|assertLongArrayEquals
argument_list|(
name|expected
argument_list|,
name|toLongArray
argument_list|(
name|splits
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingletonSplit ()
specifier|public
name|void
name|testSingletonSplit
parameter_list|()
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|splits
init|=
operator|new
name|IntegerSplitter
argument_list|()
operator|.
name|split
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|expected
init|=
block|{
literal|5
block|,
literal|5
block|}
decl_stmt|;
name|assertLongArrayEquals
argument_list|(
name|expected
argument_list|,
name|toLongArray
argument_list|(
name|splits
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingletonSplit2 ()
specifier|public
name|void
name|testSingletonSplit2
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// Same test, but overly-high numSplits
name|List
argument_list|<
name|Long
argument_list|>
name|splits
init|=
operator|new
name|IntegerSplitter
argument_list|()
operator|.
name|split
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|expected
init|=
block|{
literal|5
block|,
literal|5
block|}
decl_stmt|;
name|assertLongArrayEquals
argument_list|(
name|expected
argument_list|,
name|toLongArray
argument_list|(
name|splits
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTooManySplits ()
specifier|public
name|void
name|testTooManySplits
parameter_list|()
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|splits
init|=
operator|new
name|IntegerSplitter
argument_list|()
operator|.
name|split
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|expected
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|}
decl_stmt|;
name|assertLongArrayEquals
argument_list|(
name|expected
argument_list|,
name|toLongArray
argument_list|(
name|splits
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

