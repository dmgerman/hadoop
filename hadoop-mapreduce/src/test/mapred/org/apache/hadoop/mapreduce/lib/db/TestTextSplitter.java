begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestTextSplitter
specifier|public
class|class
name|TestTextSplitter
extends|extends
name|TestCase
block|{
DECL|method|formatArray (Object [] ar)
specifier|public
name|String
name|formatArray
parameter_list|(
name|Object
index|[]
name|ar
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|val
range|:
name|ar
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|assertArrayEquals (Object [] expected, Object [] actual)
specifier|public
name|void
name|assertArrayEquals
parameter_list|(
name|Object
index|[]
name|expected
parameter_list|,
name|Object
index|[]
name|actual
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"Failure at position "
operator|+
name|i
operator|+
literal|"; got "
operator|+
name|actual
index|[
name|i
index|]
operator|+
literal|" instead of "
operator|+
name|expected
index|[
name|i
index|]
operator|+
literal|"; actual array is "
operator|+
name|formatArray
argument_list|(
name|actual
argument_list|)
argument_list|,
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|oob
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected array with "
operator|+
name|expected
operator|.
name|length
operator|+
literal|" elements; got "
operator|+
name|actual
operator|.
name|length
operator|+
literal|". Actual array is "
operator|+
name|formatArray
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|actual
operator|.
name|length
operator|>
name|expected
operator|.
name|length
condition|)
block|{
name|fail
argument_list|(
literal|"Actual array has "
operator|+
name|actual
operator|.
name|length
operator|+
literal|" elements; expected "
operator|+
name|expected
operator|.
name|length
operator|+
literal|". Actual array is "
operator|+
name|formatArray
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testStringConvertEmpty ()
specifier|public
name|void
name|testStringConvertEmpty
parameter_list|()
block|{
name|TextSplitter
name|splitter
init|=
operator|new
name|TextSplitter
argument_list|()
decl_stmt|;
name|BigDecimal
name|emptyBigDec
init|=
name|splitter
operator|.
name|stringToBigDecimal
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|,
name|emptyBigDec
argument_list|)
expr_stmt|;
block|}
DECL|method|testBigDecConvertEmpty ()
specifier|public
name|void
name|testBigDecConvertEmpty
parameter_list|()
block|{
name|TextSplitter
name|splitter
init|=
operator|new
name|TextSplitter
argument_list|()
decl_stmt|;
name|String
name|emptyStr
init|=
name|splitter
operator|.
name|bigDecimalToString
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|emptyStr
argument_list|)
expr_stmt|;
block|}
DECL|method|testConvertA ()
specifier|public
name|void
name|testConvertA
parameter_list|()
block|{
name|TextSplitter
name|splitter
init|=
operator|new
name|TextSplitter
argument_list|()
decl_stmt|;
name|String
name|out
init|=
name|splitter
operator|.
name|bigDecimalToString
argument_list|(
name|splitter
operator|.
name|stringToBigDecimal
argument_list|(
literal|"A"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|testConvertZ ()
specifier|public
name|void
name|testConvertZ
parameter_list|()
block|{
name|TextSplitter
name|splitter
init|=
operator|new
name|TextSplitter
argument_list|()
decl_stmt|;
name|String
name|out
init|=
name|splitter
operator|.
name|bigDecimalToString
argument_list|(
name|splitter
operator|.
name|stringToBigDecimal
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Z"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|testConvertThreeChars ()
specifier|public
name|void
name|testConvertThreeChars
parameter_list|()
block|{
name|TextSplitter
name|splitter
init|=
operator|new
name|TextSplitter
argument_list|()
decl_stmt|;
name|String
name|out
init|=
name|splitter
operator|.
name|bigDecimalToString
argument_list|(
name|splitter
operator|.
name|stringToBigDecimal
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|testConvertStr ()
specifier|public
name|void
name|testConvertStr
parameter_list|()
block|{
name|TextSplitter
name|splitter
init|=
operator|new
name|TextSplitter
argument_list|()
decl_stmt|;
name|String
name|out
init|=
name|splitter
operator|.
name|bigDecimalToString
argument_list|(
name|splitter
operator|.
name|stringToBigDecimal
argument_list|(
literal|"big str"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"big str"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|testConvertChomped ()
specifier|public
name|void
name|testConvertChomped
parameter_list|()
block|{
name|TextSplitter
name|splitter
init|=
operator|new
name|TextSplitter
argument_list|()
decl_stmt|;
name|String
name|out
init|=
name|splitter
operator|.
name|bigDecimalToString
argument_list|(
name|splitter
operator|.
name|stringToBigDecimal
argument_list|(
literal|"AVeryLongStringIndeed"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AVeryLon"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|testAlphabetSplit ()
specifier|public
name|void
name|testAlphabetSplit
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// This should give us 25 splits, one per letter.
name|TextSplitter
name|splitter
init|=
operator|new
name|TextSplitter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|splits
init|=
name|splitter
operator|.
name|split
argument_list|(
literal|25
argument_list|,
literal|"A"
argument_list|,
literal|"Z"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
index|[]
name|expected
init|=
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|,
literal|"D"
block|,
literal|"E"
block|,
literal|"F"
block|,
literal|"G"
block|,
literal|"H"
block|,
literal|"I"
block|,
literal|"J"
block|,
literal|"K"
block|,
literal|"L"
block|,
literal|"M"
block|,
literal|"N"
block|,
literal|"O"
block|,
literal|"P"
block|,
literal|"Q"
block|,
literal|"R"
block|,
literal|"S"
block|,
literal|"T"
block|,
literal|"U"
block|,
literal|"V"
block|,
literal|"W"
block|,
literal|"X"
block|,
literal|"Y"
block|,
literal|"Z"
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|splits
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommonPrefix ()
specifier|public
name|void
name|testCommonPrefix
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// Splits between 'Hand' and 'Hardy'
name|TextSplitter
name|splitter
init|=
operator|new
name|TextSplitter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|splits
init|=
name|splitter
operator|.
name|split
argument_list|(
literal|5
argument_list|,
literal|"nd"
argument_list|,
literal|"rdy"
argument_list|,
literal|"Ha"
argument_list|)
decl_stmt|;
comment|// Don't check for exact values in the middle, because the splitter generates some
comment|// ugly Unicode-isms. But do check that we get multiple splits and that it starts
comment|// and ends on the correct points.
name|assertEquals
argument_list|(
literal|"Hand"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hardy"
argument_list|,
name|splits
operator|.
name|get
argument_list|(
name|splits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

