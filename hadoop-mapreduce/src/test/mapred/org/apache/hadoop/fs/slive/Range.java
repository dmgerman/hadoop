begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Class that represents a numeric minimum and a maximum  *   * @param<T>  *          the type of number being used  */
end_comment

begin_class
DECL|class|Range
class|class
name|Range
parameter_list|<
name|T
extends|extends
name|Number
parameter_list|>
block|{
DECL|field|SEP
specifier|private
specifier|static
specifier|final
name|String
name|SEP
init|=
literal|","
decl_stmt|;
DECL|field|min
specifier|private
name|T
name|min
decl_stmt|;
DECL|field|max
specifier|private
name|T
name|max
decl_stmt|;
DECL|method|Range (T min, T max)
name|Range
parameter_list|(
name|T
name|min
parameter_list|,
name|T
name|max
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
comment|/**    * @return the minimum value    */
DECL|method|getLower ()
name|T
name|getLower
parameter_list|()
block|{
return|return
name|min
return|;
block|}
comment|/**    * @return the maximum value    */
DECL|method|getUpper ()
name|T
name|getUpper
parameter_list|()
block|{
return|return
name|max
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|min
operator|+
name|SEP
operator|+
name|max
return|;
block|}
comment|/**    * Gets a long number between two values    *     * @param rnd    * @param range    *     * @return long    */
DECL|method|betweenPositive (Random rnd, Range<Long> range)
specifier|static
name|long
name|betweenPositive
parameter_list|(
name|Random
name|rnd
parameter_list|,
name|Range
argument_list|<
name|Long
argument_list|>
name|range
parameter_list|)
block|{
if|if
condition|(
name|range
operator|.
name|getLower
argument_list|()
operator|.
name|equals
argument_list|(
name|range
operator|.
name|getUpper
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|range
operator|.
name|getLower
argument_list|()
return|;
block|}
name|long
name|nextRnd
init|=
name|rnd
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|long
name|normRange
init|=
operator|(
name|range
operator|.
name|getUpper
argument_list|()
operator|-
name|range
operator|.
name|getLower
argument_list|()
operator|+
literal|1
operator|)
decl_stmt|;
return|return
name|Math
operator|.
name|abs
argument_list|(
name|nextRnd
operator|%
name|normRange
argument_list|)
operator|+
name|range
operator|.
name|getLower
argument_list|()
return|;
block|}
block|}
end_class

end_unit

