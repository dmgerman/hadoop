begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|Gridmix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|GridMixConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|GridMixRunMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|UtilsForGridmix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Verify the Gridmix generated input if compression emulation turn on.  */
end_comment

begin_class
DECL|class|TestGridmixCompressedInputGeneration
specifier|public
class|class
name|TestGridmixCompressedInputGeneration
extends|extends
name|GridmixSystemTestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"TestGridmixCompressedInputGeneration.class"
argument_list|)
decl_stmt|;
comment|/**    * Generate input data and verify whether input files are compressed    * or not.    * @throws Exception - if an error occurs.    */
annotation|@
name|Test
DECL|method|testGridmixCompressionInputGeneration ()
specifier|public
name|void
name|testGridmixCompressionInputGeneration
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|inputSizeInMB
init|=
literal|1024
operator|*
literal|7
decl_stmt|;
specifier|final
name|String
index|[]
name|runtimeValues
init|=
block|{
literal|"LOADJOB"
block|,
name|SubmitterUserResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"STRESS"
block|,
name|inputSizeInMB
operator|+
literal|"m"
block|,
literal|"file:///dev/null"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|otherArgs
init|=
block|{
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_ENABLE
operator|+
literal|"=false"
block|,
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_COMPRESSION_ENABLE
operator|+
literal|"=true"
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verify the generated compressed input data."
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
literal|true
argument_list|,
name|inputSizeInMB
argument_list|,
name|runtimeValues
argument_list|,
name|otherArgs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Disable compression emulation and verify whether input files are     * compressed or not.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testGridmixInputGenerationWithoutCompressionEnable ()
specifier|public
name|void
name|testGridmixInputGenerationWithoutCompressionEnable
parameter_list|()
throws|throws
name|Exception
block|{
name|UtilsForGridmix
operator|.
name|cleanup
argument_list|(
name|gridmixDir
argument_list|,
name|rtClient
operator|.
name|getDaemonConf
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|inputSizeInMB
init|=
literal|1024
operator|*
literal|6
decl_stmt|;
specifier|final
name|String
index|[]
name|runtimeValues
init|=
block|{
literal|"LOADJOB"
block|,
name|SubmitterUserResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"STRESS"
block|,
name|inputSizeInMB
operator|+
literal|"m"
block|,
literal|"file:///dev/null"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|otherArgs
init|=
block|{
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_ENABLE
operator|+
literal|"=false"
block|,
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_COMPRESSION_ENABLE
operator|+
literal|"=false"
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verify the generated uncompressed input data."
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
literal|false
argument_list|,
name|inputSizeInMB
argument_list|,
name|runtimeValues
argument_list|,
name|otherArgs
argument_list|)
expr_stmt|;
block|}
DECL|method|runAndVerify (boolean isCompressed, long INPUT_SIZE, String [] runtimeValues, String [] otherArgs)
specifier|private
name|void
name|runAndVerify
parameter_list|(
name|boolean
name|isCompressed
parameter_list|,
name|long
name|INPUT_SIZE
parameter_list|,
name|String
index|[]
name|runtimeValues
parameter_list|,
name|String
index|[]
name|otherArgs
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
name|UtilsForGridmix
operator|.
name|runGridmixJob
argument_list|(
name|gridmixDir
argument_list|,
name|conf
argument_list|,
name|GridMixRunMode
operator|.
name|DATA_GENERATION
operator|.
name|getValue
argument_list|()
argument_list|,
name|runtimeValues
argument_list|,
name|otherArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Data generation has failed."
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|verifyJobStatus
argument_list|()
expr_stmt|;
name|verifyInputDataSize
argument_list|(
name|INPUT_SIZE
argument_list|)
expr_stmt|;
name|verifyInputFiles
argument_list|(
name|isCompressed
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyInputFiles (boolean isCompressed)
specifier|private
name|void
name|verifyInputFiles
parameter_list|(
name|boolean
name|isCompressed
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|inputFiles
init|=
name|getInputFiles
argument_list|(
name|conf
argument_list|,
name|Gridmix
operator|.
name|getGridmixInputDataPath
argument_list|(
name|gridmixDir
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|inputFile
range|:
name|inputFiles
control|)
block|{
name|boolean
name|fileStatus
init|=
operator|(
name|inputFile
operator|.
name|contains
argument_list|(
literal|".gz"
argument_list|)
operator|||
name|inputFile
operator|.
name|contains
argument_list|(
literal|".tgz"
argument_list|)
operator|)
condition|?
literal|true
else|:
literal|false
decl_stmt|;
if|if
condition|(
name|isCompressed
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Compressed input split file was not found."
argument_list|,
name|fileStatus
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Uncompressed input split file was not found."
argument_list|,
name|fileStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyInputDataSize (long INPUT_SIZE)
specifier|private
name|void
name|verifyInputDataSize
parameter_list|(
name|long
name|INPUT_SIZE
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|actDataSize
init|=
name|getInputDataSizeInMB
argument_list|(
name|conf
argument_list|,
name|Gridmix
operator|.
name|getGridmixInputDataPath
argument_list|(
name|gridmixDir
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|ratio
init|=
operator|(
operator|(
name|double
operator|)
name|actDataSize
operator|)
operator|/
name|INPUT_SIZE
decl_stmt|;
name|long
name|expDataSize
init|=
call|(
name|long
call|)
argument_list|(
name|INPUT_SIZE
operator|*
name|ratio
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Generated data has not matched with given size."
argument_list|,
name|expDataSize
argument_list|,
name|actDataSize
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyJobStatus ()
specifier|private
name|void
name|verifyJobStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|JobClient
name|jobClient
init|=
name|jtClient
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|jobClient
operator|.
name|getAllJobs
argument_list|()
operator|.
name|length
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verify the job status after completion of job..."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job has not succeeded."
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|jobClient
operator|.
name|getAllJobs
argument_list|()
index|[
name|len
operator|-
literal|1
index|]
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getInputDataSizeInMB (Configuration conf, Path inputDir)
specifier|private
name|long
name|getInputDataSizeInMB
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|inputDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|inputDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContentSummary
name|csmry
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|inputDir
argument_list|)
decl_stmt|;
name|long
name|dataSize
init|=
name|csmry
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|dataSize
operator|=
name|dataSize
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
expr_stmt|;
return|return
name|dataSize
return|;
block|}
DECL|method|getInputFiles (Configuration conf, Path inputDir)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getInputFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|inputDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|inputDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|listStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|inputDir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStat
range|:
name|listStatus
control|)
block|{
name|files
operator|.
name|add
argument_list|(
name|getInputFile
argument_list|(
name|fileStat
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
DECL|method|getInputFile (FileStatus fstatus, Configuration conf)
specifier|private
name|String
name|getInputFile
parameter_list|(
name|FileStatus
name|fstatus
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|fstatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|fileName
operator|=
name|fstatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|FileSystem
name|fs
init|=
name|fstatus
operator|.
name|getPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|listStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|fstatus
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStat
range|:
name|listStatus
control|)
block|{
return|return
name|getInputFile
argument_list|(
name|fileStat
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
return|return
name|fileName
return|;
block|}
block|}
end_class

end_unit

