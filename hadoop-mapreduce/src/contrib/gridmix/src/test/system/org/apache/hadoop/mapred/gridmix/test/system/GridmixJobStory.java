begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix.test.system
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ZombieJobProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ZombieJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Build the job stories with a given trace file.   */
end_comment

begin_class
DECL|class|GridmixJobStory
specifier|public
class|class
name|GridmixJobStory
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GridmixJobStory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|zombieJobs
specifier|private
name|Map
argument_list|<
name|JobID
argument_list|,
name|ZombieJob
argument_list|>
name|zombieJobs
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|GridmixJobStory (Path path, Configuration conf)
specifier|public
name|GridmixJobStory
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
try|try
block|{
name|zombieJobs
operator|=
name|buildJobStories
argument_list|()
expr_stmt|;
if|if
condition|(
name|zombieJobs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"No jobs found in a "
operator|+
literal|" given trace file."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error:"
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error:"
operator|+
name|npe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the zombie jobs as a map.    * @return the zombie jobs map.    */
DECL|method|getZombieJobs ()
specifier|public
name|Map
argument_list|<
name|JobID
argument_list|,
name|ZombieJob
argument_list|>
name|getZombieJobs
parameter_list|()
block|{
return|return
name|zombieJobs
return|;
block|}
comment|/**    * Get the zombie job of a given job id.    * @param jobId - gridmix job id.    * @return - the zombie job object.    */
DECL|method|getZombieJob (JobID jobId)
specifier|public
name|ZombieJob
name|getZombieJob
parameter_list|(
name|JobID
name|jobId
parameter_list|)
block|{
return|return
name|zombieJobs
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
return|;
block|}
DECL|method|buildJobStories ()
specifier|private
name|Map
argument_list|<
name|JobID
argument_list|,
name|ZombieJob
argument_list|>
name|buildJobStories
parameter_list|()
throws|throws
name|IOException
block|{
name|ZombieJobProducer
name|zjp
init|=
operator|new
name|ZombieJobProducer
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|JobID
argument_list|,
name|ZombieJob
argument_list|>
name|hm
init|=
operator|new
name|HashMap
argument_list|<
name|JobID
argument_list|,
name|ZombieJob
argument_list|>
argument_list|()
decl_stmt|;
name|ZombieJob
name|zj
init|=
name|zjp
operator|.
name|getNextJob
argument_list|()
decl_stmt|;
while|while
condition|(
name|zj
operator|!=
literal|null
condition|)
block|{
name|hm
operator|.
name|put
argument_list|(
name|zj
operator|.
name|getJobID
argument_list|()
argument_list|,
name|zj
argument_list|)
expr_stmt|;
name|zj
operator|=
name|zjp
operator|.
name|getNextJob
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hm
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|hm
return|;
block|}
block|}
block|}
end_class

end_unit

