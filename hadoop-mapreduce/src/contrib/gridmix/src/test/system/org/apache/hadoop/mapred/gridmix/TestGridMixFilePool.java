begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|MRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|FilePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|UtilsForGridmix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|GridMixRunMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|GridMixConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
DECL|class|TestGridMixFilePool
specifier|public
class|class
name|TestGridMixFilePool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestGridMixFilePool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MRCluster
name|cluster
decl_stmt|;
DECL|field|remoteClient
specifier|private
specifier|static
name|JTProtocol
name|remoteClient
decl_stmt|;
DECL|field|jtClient
specifier|private
specifier|static
name|JTClient
name|jtClient
decl_stmt|;
DECL|field|gridmixDir
specifier|private
specifier|static
name|Path
name|gridmixDir
decl_stmt|;
DECL|field|clusterSize
specifier|private
specifier|static
name|int
name|clusterSize
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|before ()
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|excludeExpList
init|=
block|{
literal|"java.net.ConnectException"
block|,
literal|"java.io.IOException"
block|}
decl_stmt|;
name|cluster
operator|=
name|MRCluster
operator|.
name|createCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setExcludeExpList
argument_list|(
name|excludeExpList
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|jtClient
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
expr_stmt|;
name|remoteClient
operator|=
name|jtClient
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|clusterSize
operator|=
name|cluster
operator|.
name|getTTClients
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|gridmixDir
operator|=
operator|new
name|Path
argument_list|(
literal|"herriot-gridmix"
argument_list|)
expr_stmt|;
name|UtilsForGridmix
operator|.
name|createDirs
argument_list|(
name|gridmixDir
argument_list|,
name|remoteClient
operator|.
name|getDaemonConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after ()
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|UtilsForGridmix
operator|.
name|cleanup
argument_list|(
name|gridmixDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilesCountAndSizesForSpecifiedFilePool ()
specifier|public
name|void
name|testFilesCountAndSizesForSpecifiedFilePool
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|remoteClient
operator|.
name|getDaemonConf
argument_list|()
expr_stmt|;
specifier|final
name|long
name|inputSizeInMB
init|=
name|clusterSize
operator|*
literal|200
decl_stmt|;
name|int
index|[]
name|fileSizesInMB
init|=
block|{
literal|50
block|,
literal|100
block|,
literal|400
block|,
literal|50
block|,
literal|300
block|,
literal|10
block|,
literal|60
block|,
literal|40
block|,
literal|20
block|,
literal|10
block|,
literal|500
block|}
decl_stmt|;
name|long
name|targetSize
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|final
name|int
name|expFileCount
init|=
name|clusterSize
operator|+
literal|4
decl_stmt|;
name|String
index|[]
name|runtimeValues
init|=
block|{
literal|"LOADJOB"
block|,
name|SubmitterUserResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"STRESS"
block|,
name|inputSizeInMB
operator|+
literal|"m"
block|,
literal|"file:///dev/null"
block|}
decl_stmt|;
name|String
index|[]
name|otherArgs
init|=
block|{
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_ENABLE
operator|+
literal|"=false"
block|,
literal|"-D"
block|,
name|GridmixJob
operator|.
name|GRIDMIX_HIGHRAM_EMULATION_ENABLE
operator|+
literal|"=false"
block|,
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_COMPRESSION_ENABLE
operator|+
literal|"=false"
block|}
decl_stmt|;
comment|// Generate the input data by using gridmix framework.
name|int
name|exitCode
init|=
name|UtilsForGridmix
operator|.
name|runGridmixJob
argument_list|(
name|gridmixDir
argument_list|,
name|conf
argument_list|,
name|GridMixRunMode
operator|.
name|DATA_GENERATION
operator|.
name|getValue
argument_list|()
argument_list|,
name|runtimeValues
argument_list|,
name|otherArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Data generation has failed."
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
comment|// Create the files without using gridmix input generation with
comment|// above mentioned sizes in a array.
name|createFiles
argument_list|(
operator|new
name|Path
argument_list|(
name|gridmixDir
argument_list|,
literal|"input"
argument_list|)
argument_list|,
name|fileSizesInMB
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FilePool
operator|.
name|GRIDMIX_MIN_FILE
argument_list|,
literal|100
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|FilePool
name|fpool
init|=
operator|new
name|FilePool
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|gridmixDir
argument_list|,
literal|"input"
argument_list|)
argument_list|)
decl_stmt|;
name|fpool
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|verifyFilesSizeAndCountForSpecifiedPool
argument_list|(
name|expFileCount
argument_list|,
name|targetSize
argument_list|,
name|fpool
argument_list|)
expr_stmt|;
block|}
DECL|method|createFiles (Path inputDir, int [] fileSizes)
specifier|private
name|void
name|createFiles
parameter_list|(
name|Path
name|inputDir
parameter_list|,
name|int
index|[]
name|fileSizes
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|size
range|:
name|fileSizes
control|)
block|{
name|UtilsForGridmix
operator|.
name|createFile
argument_list|(
name|size
argument_list|,
name|inputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyFilesSizeAndCountForSpecifiedPool (int expFileCount, long minFileSize, FilePool pool)
specifier|private
name|void
name|verifyFilesSizeAndCountForSpecifiedPool
parameter_list|(
name|int
name|expFileCount
parameter_list|,
name|long
name|minFileSize
parameter_list|,
name|FilePool
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|filesSizeInBytes
init|=
name|pool
operator|.
name|getInputFiles
argument_list|(
name|minFileSize
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|long
name|actFilesSizeInMB
init|=
name|filesSizeInBytes
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
decl_stmt|;
name|long
name|expFilesSizeInMB
init|=
operator|(
name|clusterSize
operator|*
literal|200
operator|)
operator|+
literal|1300
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Files Size has not matched for specified pool."
argument_list|,
name|expFilesSizeInMB
argument_list|,
name|actFilesSizeInMB
argument_list|)
expr_stmt|;
name|int
name|actFileCount
init|=
name|files
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File count has not matched."
argument_list|,
name|expFileCount
argument_list|,
name|actFileCount
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|fstat
range|:
name|files
control|)
block|{
name|String
name|fp
init|=
name|fstat
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|count
operator|=
name|count
operator|+
operator|(
operator|(
name|fp
operator|.
name|indexOf
argument_list|(
literal|"datafile_"
argument_list|)
operator|>
literal|0
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Total folders are not matched with cluster size"
argument_list|,
name|clusterSize
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

