begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vertica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_class
DECL|class|VerticaStreamingRecordWriter
specifier|public
class|class
name|VerticaStreamingRecordWriter
extends|extends
name|RecordWriter
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VerticaStreamingRecordWriter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|writerTable
name|String
name|writerTable
init|=
literal|null
decl_stmt|;
DECL|field|connection
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
DECL|field|statement
name|Statement
name|statement
init|=
literal|null
decl_stmt|;
comment|// com.vertica.PGStatement
DECL|field|copyStmt
name|String
name|copyStmt
init|=
literal|null
decl_stmt|;
comment|// Methods from com.vertica.PGStatement
DECL|field|startCopyIn
name|Method
name|startCopyIn
init|=
literal|null
decl_stmt|;
DECL|field|finishCopyIn
name|Method
name|finishCopyIn
init|=
literal|null
decl_stmt|;
DECL|field|addStreamToCopyIn
name|Method
name|addStreamToCopyIn
init|=
literal|null
decl_stmt|;
DECL|method|VerticaStreamingRecordWriter (Connection connection, String copyStmt, String writerTable)
specifier|public
name|VerticaStreamingRecordWriter
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|copyStmt
parameter_list|,
name|String
name|writerTable
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|copyStmt
operator|=
name|copyStmt
expr_stmt|;
name|this
operator|.
name|writerTable
operator|=
name|writerTable
expr_stmt|;
try|try
block|{
name|startCopyIn
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.vertica.PGStatement"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"startCopyIn"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|ByteArrayInputStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|finishCopyIn
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.vertica.PGStatement"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"finishCopyIn"
argument_list|)
expr_stmt|;
name|addStreamToCopyIn
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.vertica.PGStatement"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"addStreamToCopyIn"
argument_list|,
name|ByteArrayInputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ee
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Vertica Formatter requies the Vertica jdbc driver"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close (TaskAttemptContext context)
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|statement
operator|!=
literal|null
condition|)
block|{
name|finishCopyIn
operator|.
name|invoke
argument_list|(
name|statement
argument_list|)
expr_stmt|;
comment|// statement.finishCopyIn();
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (Text table, Text record)
specifier|public
name|void
name|write
parameter_list|(
name|Text
name|table
parameter_list|,
name|Text
name|record
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|table
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|writerTable
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Writing to different table "
operator|+
name|table
operator|.
name|toString
argument_list|()
operator|+
literal|". Expecting "
operator|+
name|writerTable
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"writing "
operator|+
name|record
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|record
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|statement
operator|==
literal|null
condition|)
block|{
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|startCopyIn
operator|.
name|invoke
argument_list|(
name|statement
argument_list|,
name|copyStmt
argument_list|,
name|bais
argument_list|)
expr_stmt|;
comment|// statement.startCopyIn(copyStmt,
comment|// bais);
block|}
else|else
name|addStreamToCopyIn
operator|.
name|invoke
argument_list|(
name|statement
argument_list|,
name|bais
argument_list|)
expr_stmt|;
comment|// statement.addStreamToCopyIn(bais);
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

