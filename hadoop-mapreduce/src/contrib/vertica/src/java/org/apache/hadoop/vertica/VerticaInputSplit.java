begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vertica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_comment
comment|/**  * Input split class for reading data from Vertica  *   */
end_comment

begin_class
DECL|class|VerticaInputSplit
specifier|public
class|class
name|VerticaInputSplit
extends|extends
name|InputSplit
implements|implements
name|Writable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VerticaInputSplit
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|stmt
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
DECL|field|connection
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
DECL|field|vtconfig
name|VerticaConfiguration
name|vtconfig
init|=
literal|null
decl_stmt|;
DECL|field|inputQuery
name|String
name|inputQuery
init|=
literal|null
decl_stmt|;
DECL|field|segmentParams
name|List
argument_list|<
name|Object
argument_list|>
name|segmentParams
init|=
literal|null
decl_stmt|;
DECL|field|start
name|long
name|start
init|=
literal|0
decl_stmt|;
DECL|field|end
name|long
name|end
init|=
literal|0
decl_stmt|;
comment|/** (@inheritDoc) */
DECL|method|VerticaInputSplit ()
specifier|public
name|VerticaInputSplit
parameter_list|()
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Input split default constructor"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the input query and a list of parameters to substitute when evaluating    * the query    *     * @param inputQuery    *          SQL query to run    * @param segmentParams    *          list of parameters to substitute into the query    * @param start    *          the logical starting record number    * @param end    *          the logical ending record number    */
DECL|method|VerticaInputSplit (String inputQuery, List<Object> segmentParams, long start, long end)
specifier|public
name|VerticaInputSplit
parameter_list|(
name|String
name|inputQuery
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|segmentParams
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Input split constructor with query and params"
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputQuery
operator|=
name|inputQuery
expr_stmt|;
name|this
operator|.
name|segmentParams
operator|=
name|segmentParams
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
comment|/** (@inheritDoc) */
DECL|method|configure (Configuration conf)
specifier|public
name|void
name|configure
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Input split configured"
argument_list|)
expr_stmt|;
name|vtconfig
operator|=
operator|new
name|VerticaConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|connection
operator|=
name|vtconfig
operator|.
name|getConnection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setTransactionIsolation
argument_list|(
name|Connection
operator|.
name|TRANSACTION_READ_COMMITTED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the parameters used for input query    *     */
DECL|method|getSegmentParams ()
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getSegmentParams
parameter_list|()
block|{
return|return
name|segmentParams
return|;
block|}
comment|/**    * Run the query that, when executed returns input for the mapper    *     * @throws Exception    */
DECL|method|executeQuery ()
specifier|public
name|ResultSet
name|executeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Input split execute query"
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|!=
literal|0
condition|)
name|inputQuery
operator|=
literal|"SELECT * FROM ( "
operator|+
name|inputQuery
operator|+
literal|" ) limited LIMIT ? OFFSET ?"
expr_stmt|;
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot execute query with no connection"
argument_list|)
throw|;
name|stmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|inputQuery
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|segmentParams
operator|!=
literal|null
condition|)
for|for
control|(
name|Object
name|param
range|:
name|segmentParams
control|)
name|stmt
operator|.
name|setObject
argument_list|(
name|i
operator|++
argument_list|,
name|param
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|!=
literal|0
condition|)
block|{
name|stmt
operator|.
name|setLong
argument_list|(
name|i
operator|++
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setLong
argument_list|(
name|i
operator|++
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
return|return
name|rs
return|;
block|}
comment|/** (@inheritDoc) */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return The index of the first row to select    */
DECL|method|getStart ()
specifier|public
name|long
name|getStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
comment|/**    * @return The index of the last row to select    */
DECL|method|getEnd ()
specifier|public
name|long
name|getEnd
parameter_list|()
block|{
return|return
name|end
return|;
block|}
comment|/**    * @return The total row count in this split    */
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO: figureout how to return length when there is no start and end
return|return
name|end
operator|-
name|start
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|String
index|[]
block|{}
return|;
block|}
comment|/** (@inheritDoc) */
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|vtconfig
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|inputQuery
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|long
name|paramCount
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramCount
operator|>
literal|0
condition|)
block|{
name|VerticaRecord
name|record
init|=
operator|new
name|VerticaRecord
argument_list|()
decl_stmt|;
name|record
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|segmentParams
operator|=
name|record
operator|.
name|getValues
argument_list|()
expr_stmt|;
block|}
name|start
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|end
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|inputQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|segmentParams
operator|!=
literal|null
operator|&&
name|segmentParams
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|segmentParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|VerticaRecord
name|record
init|=
operator|new
name|VerticaRecord
argument_list|(
name|segmentParams
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|record
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
name|out
operator|.
name|writeLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

