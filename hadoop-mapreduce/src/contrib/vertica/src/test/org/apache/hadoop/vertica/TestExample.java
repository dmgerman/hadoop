begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vertica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaRecord
import|;
end_import

begin_class
DECL|class|TestExample
specifier|public
class|class
name|TestExample
extends|extends
name|VerticaTestCase
implements|implements
name|Tool
block|{
DECL|method|TestExample (String name)
specifier|public
name|TestExample
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|class|Map
specifier|public
specifier|static
class|class
name|Map
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|VerticaRecord
argument_list|,
name|Text
argument_list|,
name|DoubleWritable
argument_list|>
block|{
DECL|method|map (LongWritable key, VerticaRecord value, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|VerticaRecord
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|record
init|=
name|value
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|Text
argument_list|(
operator|(
name|String
operator|)
name|record
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
operator|(
name|Long
operator|)
name|record
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Reduce
specifier|public
specifier|static
class|class
name|Reduce
extends|extends
name|Reducer
argument_list|<
name|Text
argument_list|,
name|DoubleWritable
argument_list|,
name|Text
argument_list|,
name|VerticaRecord
argument_list|>
block|{
DECL|field|record
name|VerticaRecord
name|record
init|=
literal|null
decl_stmt|;
DECL|method|setup (Context context)
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|record
operator|=
name|VerticaOutputFormat
operator|.
name|getValue
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|reduce (Text key, Iterable<DoubleWritable> values, Context context)
specifier|protected
name|void
name|reduce
parameter_list|(
name|Text
name|key
parameter_list|,
name|Iterable
argument_list|<
name|DoubleWritable
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|record
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No output record found"
argument_list|)
throw|;
block|}
name|record
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|125
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|'c'
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|3
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|4
argument_list|,
literal|234.526
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|5
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|6
argument_list|,
literal|"foobar string"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|7
argument_list|,
operator|new
name|byte
index|[
literal|10
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|Text
argument_list|(
literal|"mrtarget"
argument_list|)
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getJob ()
specifier|public
name|Job
name|getJob
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|conf
operator|=
name|job
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.job.tracker"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|TestExample
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"vertica test"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|VerticaRecord
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|VerticaInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|VerticaOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|DoubleWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|VerticaOutputFormat
operator|.
name|setOutput
argument_list|(
name|job
argument_list|,
literal|"mrtarget"
argument_list|,
literal|true
argument_list|,
literal|"a int"
argument_list|,
literal|"b boolean"
argument_list|,
literal|"c char(1)"
argument_list|,
literal|"d date"
argument_list|,
literal|"f float"
argument_list|,
literal|"t timestamp"
argument_list|,
literal|"v varchar"
argument_list|,
literal|"z varbinary"
argument_list|)
expr_stmt|;
name|VerticaConfiguration
operator|.
name|configureVertica
argument_list|(
name|conf
argument_list|,
operator|new
name|String
index|[]
block|{
name|AllTests
operator|.
name|getHostname
argument_list|()
block|}
argument_list|,
name|AllTests
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|AllTests
operator|.
name|getUsername
argument_list|()
argument_list|,
name|AllTests
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|method|testExample ()
specifier|public
name|void
name|testExample
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|AllTests
operator|.
name|isSetup
argument_list|()
condition|)
block|{
return|return;
block|}
name|Job
name|job
init|=
name|getJob
argument_list|()
decl_stmt|;
name|VerticaInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
literal|"select * from mrsource"
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|job
operator|=
name|getJob
argument_list|()
expr_stmt|;
name|VerticaInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
literal|"select * from mrsource where key = ?"
argument_list|,
literal|"select distinct key from mrsource"
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|job
operator|=
name|getJob
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|params
init|=
operator|new
name|HashSet
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{     }
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|param
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|param
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
name|VerticaInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
literal|"select * from mrsource where key = ?"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|job
operator|=
name|getJob
argument_list|()
expr_stmt|;
name|VerticaInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
literal|"select * from mrsource where key = ?"
argument_list|,
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|VerticaOutputFormat
operator|.
name|optimize
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] arg0)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|arg0
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration arg0)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|arg0
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
end_class

end_unit

