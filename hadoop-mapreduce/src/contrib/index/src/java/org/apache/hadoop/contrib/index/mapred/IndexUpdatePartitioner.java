begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Partitioner
import|;
end_import

begin_comment
comment|/**  * This partitioner class puts the values of the same key - in this case the  * same shard - in the same partition.  */
end_comment

begin_class
DECL|class|IndexUpdatePartitioner
specifier|public
class|class
name|IndexUpdatePartitioner
implements|implements
name|Partitioner
argument_list|<
name|Shard
argument_list|,
name|IntermediateForm
argument_list|>
block|{
DECL|field|shards
specifier|private
name|Shard
index|[]
name|shards
decl_stmt|;
DECL|field|map
specifier|private
name|Map
argument_list|<
name|Shard
argument_list|,
name|Integer
argument_list|>
name|map
decl_stmt|;
comment|/* (non-Javadoc)    * @see org.apache.hadoop.mapred.Partitioner#getPartition(java.lang.Object, java.lang.Object, int)    */
DECL|method|getPartition (Shard key, IntermediateForm value, int numPartitions)
specifier|public
name|int
name|getPartition
parameter_list|(
name|Shard
name|key
parameter_list|,
name|IntermediateForm
name|value
parameter_list|,
name|int
name|numPartitions
parameter_list|)
block|{
name|int
name|partition
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|partition
operator|<
name|numPartitions
condition|)
block|{
return|return
name|partition
return|;
block|}
else|else
block|{
return|return
name|numPartitions
operator|-
literal|1
return|;
block|}
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.mapred.JobConfigurable#configure(org.apache.hadoop.mapred.JobConf)    */
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|shards
operator|=
name|Shard
operator|.
name|getIndexShards
argument_list|(
operator|new
name|IndexUpdateConfiguration
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|Shard
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shards
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|shards
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

