begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.dfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|HadoopServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|jobs
operator|.
name|Job
import|;
end_import

begin_comment
comment|/**  * DFS Content representation of a HDFS location  */
end_comment

begin_class
DECL|class|DFSLocation
specifier|public
class|class
name|DFSLocation
implements|implements
name|DFSContent
block|{
DECL|field|provider
specifier|private
specifier|final
name|DFSContentProvider
name|provider
decl_stmt|;
DECL|field|location
specifier|private
specifier|final
name|HadoopServer
name|location
decl_stmt|;
DECL|field|rootFolder
specifier|private
name|DFSContent
name|rootFolder
init|=
literal|null
decl_stmt|;
DECL|method|DFSLocation (DFSContentProvider provider, HadoopServer server)
name|DFSLocation
parameter_list|(
name|DFSContentProvider
name|provider
parameter_list|,
name|HadoopServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|server
expr_stmt|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
operator|.
name|getLocationName
argument_list|()
return|;
block|}
comment|/*    * Implementation of DFSContent    */
comment|/* @inheritDoc */
DECL|method|getChildren ()
specifier|public
name|DFSContent
index|[]
name|getChildren
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|rootFolder
operator|==
literal|null
condition|)
block|{
comment|/*        * DfsFolder constructor might block as it contacts the NameNode: work        * asynchronously here or this will potentially freeze the UI        */
operator|new
name|Job
argument_list|(
literal|"Connecting to DFS "
operator|+
name|location
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|IStatus
name|run
parameter_list|(
name|IProgressMonitor
name|monitor
parameter_list|)
block|{
try|try
block|{
name|rootFolder
operator|=
operator|new
name|DFSFolder
argument_list|(
name|provider
argument_list|,
name|location
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|OK_STATUS
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|rootFolder
operator|=
operator|new
name|DFSMessage
argument_list|(
literal|"Error: "
operator|+
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|CANCEL_STATUS
return|;
block|}
finally|finally
block|{
comment|// Under all circumstances, update the UI
name|provider
operator|.
name|refresh
argument_list|(
name|DFSLocation
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|schedule
argument_list|()
expr_stmt|;
return|return
operator|new
name|DFSContent
index|[]
block|{
operator|new
name|DFSMessage
argument_list|(
literal|"Connecting to DFS "
operator|+
name|toString
argument_list|()
argument_list|)
block|}
return|;
block|}
return|return
operator|new
name|DFSContent
index|[]
block|{
name|this
operator|.
name|rootFolder
block|}
return|;
block|}
comment|/* @inheritDoc */
DECL|method|hasChildren ()
specifier|public
name|boolean
name|hasChildren
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/* @inheritDoc */
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|this
operator|.
name|rootFolder
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|provider
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/*    * Actions    */
comment|/**    * Refresh the location using a new connection    */
DECL|method|reconnect ()
specifier|public
name|void
name|reconnect
parameter_list|()
block|{
name|this
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

