begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.dfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|ImageLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|HadoopServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|servers
operator|.
name|ServerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ILabelProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ILabelProviderListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ITreeContentProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|StructuredViewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|Viewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|graphics
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Display
import|;
end_import

begin_comment
comment|/**  * Handles viewing of DFS locations  *<p>  *   * The content handled by this provider is a tree:  *   *<tt>  *<br>DFSLocationsRoot  *<br>\_HadoopServer  *<br>|  \_DfsFolder  *<br>|  |  \_DfsFile  *<br>|  \_DfsFolder  *<br>| ...  *<br>\_HadoopServer...  *</tt>  *   * The code should not block here: blocking operations need to be done  * asynchronously so as not to freeze the UI!  */
end_comment

begin_class
DECL|class|DFSContentProvider
specifier|public
class|class
name|DFSContentProvider
implements|implements
name|ITreeContentProvider
implements|,
name|ILabelProvider
block|{
comment|/**    * The viewer that displays this Tree content    */
DECL|field|viewer
specifier|private
name|Viewer
name|viewer
decl_stmt|;
DECL|field|sviewer
specifier|private
name|StructuredViewer
name|sviewer
decl_stmt|;
DECL|field|rootFolders
specifier|private
name|Map
argument_list|<
name|HadoopServer
argument_list|,
name|DFSContent
argument_list|>
name|rootFolders
init|=
operator|new
name|HashMap
argument_list|<
name|HadoopServer
argument_list|,
name|DFSContent
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Constructor: load resources (icons).    */
DECL|method|DFSContentProvider ()
specifier|public
name|DFSContentProvider
parameter_list|()
block|{   }
DECL|field|locationsRoot
specifier|private
specifier|final
name|DFSLocationsRoot
name|locationsRoot
init|=
operator|new
name|DFSLocationsRoot
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|/*    * ITreeContentProvider implementation    */
comment|/* @inheritDoc */
DECL|method|getChildren (Object parent)
specifier|public
name|Object
index|[]
name|getChildren
parameter_list|(
name|Object
name|parent
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|parent
operator|instanceof
name|DFSContent
operator|)
condition|)
return|return
literal|null
return|;
name|DFSContent
name|content
init|=
operator|(
name|DFSContent
operator|)
name|parent
decl_stmt|;
return|return
name|content
operator|.
name|getChildren
argument_list|()
return|;
block|}
DECL|method|test (Object parentElement)
specifier|public
name|Object
index|[]
name|test
parameter_list|(
name|Object
name|parentElement
parameter_list|)
block|{
if|if
condition|(
name|parentElement
operator|instanceof
name|DFSLocationsRoot
condition|)
block|{
return|return
name|ServerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|toArray
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|parentElement
operator|instanceof
name|HadoopServer
condition|)
block|{
specifier|final
name|HadoopServer
name|location
init|=
operator|(
name|HadoopServer
operator|)
name|parentElement
decl_stmt|;
name|Object
name|root
init|=
name|rootFolders
operator|.
name|get
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
return|return
operator|new
name|Object
index|[]
block|{
name|root
block|}
return|;
return|return
operator|new
name|Object
index|[]
block|{
literal|"Connecting to DFS..."
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|parentElement
operator|instanceof
name|DFSFolder
condition|)
block|{
name|DFSFolder
name|folder
init|=
operator|(
name|DFSFolder
operator|)
name|parentElement
decl_stmt|;
return|return
name|folder
operator|.
name|getChildren
argument_list|()
return|;
block|}
return|return
operator|new
name|Object
index|[]
block|{
literal|"<Unknown DFSContent>"
block|}
return|;
block|}
comment|/* @inheritDoc */
DECL|method|getParent (Object element)
specifier|public
name|Object
name|getParent
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|DFSPath
condition|)
block|{
return|return
operator|(
operator|(
name|DFSPath
operator|)
name|element
operator|)
operator|.
name|getParent
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|element
operator|instanceof
name|HadoopServer
condition|)
block|{
return|return
name|locationsRoot
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/* @inheritDoc */
DECL|method|hasChildren (Object element)
specifier|public
name|boolean
name|hasChildren
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|DFSContent
condition|)
block|{
name|DFSContent
name|content
init|=
operator|(
name|DFSContent
operator|)
name|element
decl_stmt|;
return|return
name|content
operator|.
name|hasChildren
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/*    * IStructureContentProvider implementation    */
comment|/* @inheritDoc */
DECL|method|getElements (final Object inputElement)
specifier|public
name|Object
index|[]
name|getElements
parameter_list|(
specifier|final
name|Object
name|inputElement
parameter_list|)
block|{
return|return
operator|new
name|Object
index|[]
block|{
name|locationsRoot
block|}
return|;
comment|// return ServerRegistry.getInstance().getServers().toArray();
block|}
comment|/*    * ILabelProvider implementation    */
comment|/* @inheritDoc */
DECL|method|getImage (Object element)
specifier|public
name|Image
name|getImage
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|DFSLocationsRoot
condition|)
return|return
name|ImageLibrary
operator|.
name|getImage
argument_list|(
literal|"dfs.browser.root.entry"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|element
operator|instanceof
name|DFSLocation
condition|)
return|return
name|ImageLibrary
operator|.
name|getImage
argument_list|(
literal|"dfs.browser.location.entry"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|element
operator|instanceof
name|DFSFolder
condition|)
return|return
name|ImageLibrary
operator|.
name|getImage
argument_list|(
literal|"dfs.browser.folder.entry"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|element
operator|instanceof
name|DFSFile
condition|)
return|return
name|ImageLibrary
operator|.
name|getImage
argument_list|(
literal|"dfs.browser.file.entry"
argument_list|)
return|;
return|return
literal|null
return|;
block|}
comment|/* @inheritDoc */
DECL|method|getText (Object element)
specifier|public
name|String
name|getText
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|DFSFile
condition|)
return|return
operator|(
operator|(
name|DFSFile
operator|)
name|element
operator|)
operator|.
name|toDetailedString
argument_list|()
return|;
return|return
name|element
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*    * IBaseLabelProvider implementation    */
comment|/* @inheritDoc */
DECL|method|addListener (ILabelProviderListener listener)
specifier|public
name|void
name|addListener
parameter_list|(
name|ILabelProviderListener
name|listener
parameter_list|)
block|{   }
comment|/* @inheritDoc */
DECL|method|removeListener (ILabelProviderListener listener)
specifier|public
name|void
name|removeListener
parameter_list|(
name|ILabelProviderListener
name|listener
parameter_list|)
block|{   }
comment|/* @inheritDoc */
DECL|method|isLabelProperty (Object element, String property)
specifier|public
name|boolean
name|isLabelProperty
parameter_list|(
name|Object
name|element
parameter_list|,
name|String
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/*    * IContentProvider implementation    */
comment|/* @inheritDoc */
DECL|method|dispose ()
specifier|public
name|void
name|dispose
parameter_list|()
block|{   }
comment|/* @inheritDoc */
DECL|method|inputChanged (Viewer viewer, Object oldInput, Object newInput)
specifier|public
name|void
name|inputChanged
parameter_list|(
name|Viewer
name|viewer
parameter_list|,
name|Object
name|oldInput
parameter_list|,
name|Object
name|newInput
parameter_list|)
block|{
name|this
operator|.
name|viewer
operator|=
name|viewer
expr_stmt|;
if|if
condition|(
operator|(
name|viewer
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|viewer
operator|instanceof
name|StructuredViewer
operator|)
condition|)
name|this
operator|.
name|sviewer
operator|=
operator|(
name|StructuredViewer
operator|)
name|viewer
expr_stmt|;
else|else
name|this
operator|.
name|sviewer
operator|=
literal|null
expr_stmt|;
block|}
comment|/*    * Miscellaneous    */
comment|/**    * Ask the viewer for this content to refresh    */
DECL|method|refresh ()
name|void
name|refresh
parameter_list|()
block|{
comment|// no display, nothing to update
if|if
condition|(
name|this
operator|.
name|viewer
operator|==
literal|null
condition|)
return|return;
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|asyncExec
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|DFSContentProvider
operator|.
name|this
operator|.
name|viewer
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ask the viewer to refresh a single element    *     * @param content what to refresh    */
DECL|method|refresh (final DFSContent content)
name|void
name|refresh
parameter_list|(
specifier|final
name|DFSContent
name|content
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|sviewer
operator|!=
literal|null
condition|)
block|{
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|asyncExec
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|DFSContentProvider
operator|.
name|this
operator|.
name|sviewer
operator|.
name|refresh
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getViewer ()
name|Viewer
name|getViewer
parameter_list|()
block|{
return|return
name|this
operator|.
name|viewer
return|;
block|}
block|}
end_class

end_unit

