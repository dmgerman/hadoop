begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.utils.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
operator|.
name|DataJoinMapperBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
operator|.
name|TaggedMapOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
operator|.
name|SampleTaggedMapOutput
import|;
end_import

begin_comment
comment|/**  * This is a subclass of DataJoinMapperBase that is used to  * demonstrate the functionality of INNER JOIN between 2 data  * sources (TAB separated text files) based on the first column.  */
end_comment

begin_class
DECL|class|SampleDataJoinMapper
specifier|public
class|class
name|SampleDataJoinMapper
extends|extends
name|DataJoinMapperBase
block|{
DECL|method|generateInputTag (String inputFile)
specifier|protected
name|Text
name|generateInputTag
parameter_list|(
name|String
name|inputFile
parameter_list|)
block|{
comment|// tag the row with input file name (data source)
return|return
operator|new
name|Text
argument_list|(
name|inputFile
argument_list|)
return|;
block|}
DECL|method|generateGroupKey (TaggedMapOutput aRecord)
specifier|protected
name|Text
name|generateGroupKey
parameter_list|(
name|TaggedMapOutput
name|aRecord
parameter_list|)
block|{
comment|// first column in the input tab separated files becomes the key (to perform the JOIN)
name|String
name|line
init|=
operator|(
operator|(
name|Text
operator|)
name|aRecord
operator|.
name|getData
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|groupKey
init|=
literal|""
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\t"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|groupKey
operator|=
name|tokens
index|[
literal|0
index|]
expr_stmt|;
return|return
operator|new
name|Text
argument_list|(
name|groupKey
argument_list|)
return|;
block|}
DECL|method|generateTaggedMapOutput (Object value)
specifier|protected
name|TaggedMapOutput
name|generateTaggedMapOutput
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|TaggedMapOutput
name|retv
init|=
operator|new
name|SampleTaggedMapOutput
argument_list|(
operator|(
name|Text
operator|)
name|value
argument_list|)
decl_stmt|;
name|retv
operator|.
name|setTag
argument_list|(
operator|new
name|Text
argument_list|(
name|this
operator|.
name|inputTag
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|retv
return|;
block|}
block|}
end_class

end_unit

