begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.utils.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_comment
comment|/**  * This abstract class serves as the base class for the mapper class of a data  * join job. This class expects its subclasses to implement methods for the  * following functionalities:  *   * 1. Compute the source tag of input values 2. Compute the map output value  * object 3. Compute the map output key object  *   * The source tag will be used by the reducer to determine from which source  * (which table in SQL terminology) a value comes. Computing the map output  * value object amounts to performing projecting/filtering work in a SQL  * statement (through the select/where clauses). Computing the map output key  * amounts to choosing the join key. This class provides the appropriate plugin  * points for the user defined subclasses to implement the appropriate logic.  *   */
end_comment

begin_class
DECL|class|DataJoinMapperBase
specifier|public
specifier|abstract
class|class
name|DataJoinMapperBase
extends|extends
name|JobBase
block|{
DECL|field|inputFile
specifier|protected
name|String
name|inputFile
init|=
literal|null
decl_stmt|;
DECL|field|job
specifier|protected
name|JobConf
name|job
init|=
literal|null
decl_stmt|;
DECL|field|inputTag
specifier|protected
name|Text
name|inputTag
init|=
literal|null
decl_stmt|;
DECL|field|reporter
specifier|protected
name|Reporter
name|reporter
init|=
literal|null
decl_stmt|;
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|inputFile
operator|=
name|job
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_INPUT_FILE
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputTag
operator|=
name|generateInputTag
argument_list|(
name|this
operator|.
name|inputFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Determine the source tag based on the input file name.    *     * @param inputFile    * @return the source tag computed from the given file name.    */
DECL|method|generateInputTag (String inputFile)
specifier|protected
specifier|abstract
name|Text
name|generateInputTag
parameter_list|(
name|String
name|inputFile
parameter_list|)
function_decl|;
comment|/**    * Generate a tagged map output value. The user code can also perform    * projection/filtering. If it decides to discard the input record when    * certain conditions are met,it can simply return a null.    *     * @param value    * @return an object of TaggedMapOutput computed from the given value.    */
DECL|method|generateTaggedMapOutput (Object value)
specifier|protected
specifier|abstract
name|TaggedMapOutput
name|generateTaggedMapOutput
parameter_list|(
name|Object
name|value
parameter_list|)
function_decl|;
comment|/**    * Generate a map output key. The user code can compute the key    * programmatically, not just selecting the values of some fields. In this    * sense, it is more general than the joining capabilities of SQL.    *     * @param aRecord    * @return the group key for the given record    */
DECL|method|generateGroupKey (TaggedMapOutput aRecord)
specifier|protected
specifier|abstract
name|Text
name|generateGroupKey
parameter_list|(
name|TaggedMapOutput
name|aRecord
parameter_list|)
function_decl|;
DECL|method|map (Object key, Object value, OutputCollector output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|reporter
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
name|addLongValue
argument_list|(
literal|"totalCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TaggedMapOutput
name|aRecord
init|=
name|generateTaggedMapOutput
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|aRecord
operator|==
literal|null
condition|)
block|{
name|addLongValue
argument_list|(
literal|"discardedCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|Text
name|groupKey
init|=
name|generateGroupKey
argument_list|(
name|aRecord
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupKey
operator|==
literal|null
condition|)
block|{
name|addLongValue
argument_list|(
literal|"nullGroupKeyCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|output
operator|.
name|collect
argument_list|(
name|groupKey
argument_list|,
name|aRecord
argument_list|)
expr_stmt|;
name|addLongValue
argument_list|(
literal|"collectedCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|reporter
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|reporter
operator|.
name|setStatus
argument_list|(
name|super
operator|.
name|getReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reduce (Object arg0, Iterator arg1, OutputCollector arg2, Reporter arg3)
specifier|public
name|void
name|reduce
parameter_list|(
name|Object
name|arg0
parameter_list|,
name|Iterator
name|arg1
parameter_list|,
name|OutputCollector
name|arg2
parameter_list|,
name|Reporter
name|arg3
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
end_class

end_unit

