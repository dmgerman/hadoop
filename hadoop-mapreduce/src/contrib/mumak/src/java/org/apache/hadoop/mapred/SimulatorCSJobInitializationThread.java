begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobInitializationPoller
operator|.
name|JobInitializationThread
import|;
end_import

begin_class
DECL|class|SimulatorCSJobInitializationThread
specifier|public
class|class
name|SimulatorCSJobInitializationThread
implements|implements
name|SimulatorEventListener
block|{
DECL|field|lastCalled
name|long
name|lastCalled
decl_stmt|;
DECL|field|taskScheduler
name|CapacityTaskScheduler
name|taskScheduler
decl_stmt|;
DECL|field|jobPoller
name|JobInitializationPoller
name|jobPoller
decl_stmt|;
DECL|field|queue
specifier|private
specifier|final
name|String
name|queue
decl_stmt|;
DECL|field|sleepInterval
specifier|final
name|long
name|sleepInterval
decl_stmt|;
comment|/** The log object to send our messages to; only used for debugging. */
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SimulatorCSJobInitializationThread
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SimulatorCSJobInitializationThread (TaskScheduler taskScheduler, String queue)
specifier|public
name|SimulatorCSJobInitializationThread
parameter_list|(
name|TaskScheduler
name|taskScheduler
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
name|this
operator|.
name|taskScheduler
operator|=
operator|(
name|CapacityTaskScheduler
operator|)
name|taskScheduler
expr_stmt|;
name|jobPoller
operator|=
name|this
operator|.
name|taskScheduler
operator|.
name|getInitializationPoller
argument_list|()
expr_stmt|;
name|sleepInterval
operator|=
name|jobPoller
operator|.
name|getSleepInterval
argument_list|()
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept (SimulatorEvent event)
specifier|public
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|accept
parameter_list|(
name|SimulatorEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|SimulatorThreadWakeUpEvent
name|e
decl_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|SimulatorThreadWakeUpEvent
condition|)
block|{
name|e
operator|=
operator|(
name|SimulatorThreadWakeUpEvent
operator|)
name|event
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Received an unexpected type of event in "
operator|+
literal|"SimThrdCapSchedJobInit"
argument_list|)
throw|;
block|}
name|jobPoller
operator|.
name|cleanUpInitializedJobsList
argument_list|()
expr_stmt|;
name|jobPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
name|JobInitializationThread
name|thread
init|=
name|jobPoller
operator|.
name|getThreadsToQueueMap
argument_list|()
operator|.
name|get
argument_list|(
name|this
operator|.
name|queue
argument_list|)
decl_stmt|;
name|thread
operator|.
name|initializeJobs
argument_list|()
expr_stmt|;
name|lastCalled
operator|=
name|e
operator|.
name|getTimeStamp
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|returnEvents
init|=
name|Collections
operator|.
expr|<
name|SimulatorEvent
operator|>
name|singletonList
argument_list|(
operator|new
name|SimulatorThreadWakeUpEvent
argument_list|(
name|this
argument_list|,
name|lastCalled
operator|+
name|sleepInterval
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|returnEvents
return|;
block|}
annotation|@
name|Override
DECL|method|init (long when)
specifier|public
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|init
parameter_list|(
name|long
name|when
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Collections
operator|.
expr|<
name|SimulatorEvent
operator|>
name|singletonList
argument_list|(
operator|new
name|SimulatorThreadWakeUpEvent
argument_list|(
name|this
argument_list|,
name|when
operator|+
name|sleepInterval
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

