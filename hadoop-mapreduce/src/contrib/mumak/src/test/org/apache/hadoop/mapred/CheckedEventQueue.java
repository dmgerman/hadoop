begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_comment
comment|/**  * An EventQueue that checks events against a list of expected events upon  * enqueueing. Also contains routines for creating expected HeartbeatEvents and  * all expected events related to running map or reduce tasks on a task tracker.  */
end_comment

begin_class
DECL|class|CheckedEventQueue
class|class
name|CheckedEventQueue
extends|extends
name|SimulatorEventQueue
block|{
comment|/**    * expected list of events to be returned from all EventListener.accept()    * called at time t, t is the key if no events are generated an empty list    * needs to be put there    *     * IMPORTANT: this is NOT the events to be delivered at time t from the event    * queue, it is the list events to be inserted into the event queue at time t    */
DECL|field|expectedEvents
specifier|private
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|>
name|expectedEvents
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// current simulation time
DECL|field|now
specifier|private
name|long
name|now
decl_stmt|;
DECL|field|simulationStartTime
specifier|private
name|long
name|simulationStartTime
decl_stmt|;
comment|/**    * We need the simulation start time so that we know the time of the first    * add().    *     * @param simulationStartTime    *          Simulation start time.    */
DECL|method|CheckedEventQueue (long simulationStartTime)
specifier|public
name|CheckedEventQueue
parameter_list|(
name|long
name|simulationStartTime
parameter_list|)
block|{
name|now
operator|=
name|simulationStartTime
expr_stmt|;
name|this
operator|.
name|simulationStartTime
operator|=
name|simulationStartTime
expr_stmt|;
block|}
DECL|method|check (SimulatorEvent event)
name|void
name|check
parameter_list|(
name|SimulatorEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|>
argument_list|>
name|it
init|=
name|expectedEvents
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|insertTime
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|insertTime
operator|<=
name|now
argument_list|)
expr_stmt|;
if|if
condition|(
name|insertTime
operator|<
name|now
condition|)
block|{
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|events
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|events
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"There are "
operator|+
name|events
operator|.
name|size
argument_list|()
operator|+
literal|" events at time "
operator|+
name|insertTime
operator|+
literal|" before "
operator|+
name|now
operator|+
literal|". First event: "
operator|+
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// insertTime == now
break|break;
block|}
block|}
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|expected
init|=
name|expectedEvents
operator|.
name|get
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SimulatorEvent
name|ee
range|:
name|expected
control|)
block|{
if|if
condition|(
name|isSameEvent
argument_list|(
name|ee
argument_list|,
name|event
argument_list|)
condition|)
block|{
name|expected
operator|.
name|remove
argument_list|(
name|ee
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected event to enqueue, now="
operator|+
name|now
operator|+
literal|", event="
operator|+
name|event
operator|+
literal|", expecting="
operator|+
name|expected
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
comment|/**    * We intercept the main routine of the real EventQueue and check the new    * event returned by accept() against the expectedEvents table    */
annotation|@
name|Override
DECL|method|add (SimulatorEvent event)
specifier|public
name|boolean
name|add
parameter_list|(
name|SimulatorEvent
name|event
parameter_list|)
block|{
name|check
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|add
argument_list|(
name|event
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addAll (Collection<? extends SimulatorEvent> events)
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|SimulatorEvent
argument_list|>
name|events
parameter_list|)
block|{
for|for
control|(
name|SimulatorEvent
name|event
range|:
name|events
control|)
block|{
name|check
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|addAll
argument_list|(
name|events
argument_list|)
return|;
block|}
comment|// We need to override get() to track the current simulation time
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|SimulatorEvent
name|get
parameter_list|()
block|{
name|SimulatorEvent
name|ret
init|=
name|super
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
name|now
operator|=
name|ret
operator|.
name|getTimeStamp
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Auxiliary function for populating the expectedEvents table If event is null    * then just marks that an accept happens at time 'when', and the list of new    * events is empty    */
DECL|method|addExpected (long when, SimulatorEvent event)
specifier|public
name|void
name|addExpected
parameter_list|(
name|long
name|when
parameter_list|,
name|SimulatorEvent
name|event
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|expected
init|=
name|expectedEvents
operator|.
name|get
argument_list|(
name|when
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|expected
operator|=
operator|new
name|ArrayList
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|()
expr_stmt|;
name|expectedEvents
operator|.
name|put
argument_list|(
name|when
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|expected
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|getLastCheckTime ()
specifier|public
name|long
name|getLastCheckTime
parameter_list|()
block|{
return|return
name|expectedEvents
operator|.
name|lastKey
argument_list|()
return|;
block|}
comment|// there should be an empty expected event list left for the last
comment|// time to check
DECL|method|checkMissingExpected ()
specifier|public
name|void
name|checkMissingExpected
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expectedEvents
operator|.
name|size
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|events
range|:
name|expectedEvents
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|events
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// fills in the expected events corresponding to the execution of a map task
DECL|method|expectMapTask (SimulatorTaskTracker taskTracker, TaskAttemptID taskId, long mapStart, long mapRuntime)
specifier|public
name|void
name|expectMapTask
parameter_list|(
name|SimulatorTaskTracker
name|taskTracker
parameter_list|,
name|TaskAttemptID
name|taskId
parameter_list|,
name|long
name|mapStart
parameter_list|,
name|long
name|mapRuntime
parameter_list|)
block|{
name|long
name|mapDone
init|=
name|mapStart
operator|+
name|mapRuntime
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
name|taskIdOldApi
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
operator|.
name|downgrade
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
name|MapTaskStatus
name|status
init|=
operator|new
name|MapTaskStatus
argument_list|(
name|taskIdOldApi
argument_list|,
literal|1.0f
argument_list|,
literal|1
argument_list|,
name|State
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Phase
operator|.
name|MAP
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|status
operator|.
name|setStartTime
argument_list|(
name|mapStart
argument_list|)
expr_stmt|;
name|status
operator|.
name|setFinishTime
argument_list|(
name|mapDone
argument_list|)
expr_stmt|;
name|TaskAttemptCompletionEvent
name|completionEvent
init|=
operator|new
name|TaskAttemptCompletionEvent
argument_list|(
name|taskTracker
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|addExpected
argument_list|(
name|mapStart
argument_list|,
name|completionEvent
argument_list|)
expr_stmt|;
block|}
comment|// fills in the expected events corresponding to the execution of a reduce
comment|// task
DECL|method|expectReduceTask (SimulatorTaskTracker taskTracker, TaskAttemptID taskId, long mapDone, long reduceRuntime)
specifier|public
name|void
name|expectReduceTask
parameter_list|(
name|SimulatorTaskTracker
name|taskTracker
parameter_list|,
name|TaskAttemptID
name|taskId
parameter_list|,
name|long
name|mapDone
parameter_list|,
name|long
name|reduceRuntime
parameter_list|)
block|{
name|long
name|reduceDone
init|=
name|mapDone
operator|+
name|reduceRuntime
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
name|taskIdOldApi
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
operator|.
name|downgrade
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
name|ReduceTaskStatus
name|status
init|=
operator|new
name|ReduceTaskStatus
argument_list|(
name|taskIdOldApi
argument_list|,
literal|1.0f
argument_list|,
literal|1
argument_list|,
name|State
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Phase
operator|.
name|REDUCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|status
operator|.
name|setStartTime
argument_list|(
name|mapDone
argument_list|)
expr_stmt|;
name|status
operator|.
name|setFinishTime
argument_list|(
name|reduceDone
argument_list|)
expr_stmt|;
name|TaskAttemptCompletionEvent
name|completionEvent
init|=
operator|new
name|TaskAttemptCompletionEvent
argument_list|(
name|taskTracker
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|addExpected
argument_list|(
name|mapDone
argument_list|,
name|completionEvent
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fills in the events corresponding to the self heartbeats numAccepts is the    * number of times accept() will be called, it must be>= 1    */
DECL|method|expectHeartbeats (SimulatorTaskTracker taskTracker, int numAccepts, int heartbeatInterval)
specifier|public
name|void
name|expectHeartbeats
parameter_list|(
name|SimulatorTaskTracker
name|taskTracker
parameter_list|,
name|int
name|numAccepts
parameter_list|,
name|int
name|heartbeatInterval
parameter_list|)
block|{
comment|// initial heartbeat
name|addExpected
argument_list|(
name|simulationStartTime
argument_list|,
operator|new
name|HeartbeatEvent
argument_list|(
name|taskTracker
argument_list|,
name|simulationStartTime
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|simulationTime
init|=
name|simulationStartTime
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAccepts
condition|;
name|i
operator|++
control|)
block|{
name|long
name|heartbeatTime
init|=
name|simulationTime
operator|+
name|heartbeatInterval
decl_stmt|;
name|HeartbeatEvent
name|he
init|=
operator|new
name|HeartbeatEvent
argument_list|(
name|taskTracker
argument_list|,
name|heartbeatTime
argument_list|)
decl_stmt|;
name|addExpected
argument_list|(
name|simulationTime
argument_list|,
name|he
argument_list|)
expr_stmt|;
name|simulationTime
operator|=
name|heartbeatTime
expr_stmt|;
block|}
block|}
comment|/**    * Returns true iff two events are the same. We did not use equals() because    * we may want to test for partial equality only, and we don't want to bother    * writing new hashCode()s either.    */
DECL|method|isSameEvent (SimulatorEvent event, SimulatorEvent otherEvent)
specifier|protected
name|boolean
name|isSameEvent
parameter_list|(
name|SimulatorEvent
name|event
parameter_list|,
name|SimulatorEvent
name|otherEvent
parameter_list|)
block|{
comment|// check for null reference
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|otherEvent
argument_list|)
expr_stmt|;
comment|// type check
if|if
condition|(
operator|!
name|event
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|otherEvent
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// compare significant fields
if|if
condition|(
name|event
operator|.
name|listener
operator|!=
name|otherEvent
operator|.
name|listener
operator|||
name|event
operator|.
name|timestamp
operator|!=
name|otherEvent
operator|.
name|timestamp
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptCompletionEvent
condition|)
block|{
name|TaskStatus
name|s
init|=
operator|(
operator|(
name|TaskAttemptCompletionEvent
operator|)
name|event
operator|)
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|TaskStatus
name|os
init|=
operator|(
operator|(
name|TaskAttemptCompletionEvent
operator|)
name|otherEvent
operator|)
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|getTaskID
argument_list|()
operator|.
name|equals
argument_list|(
name|os
operator|.
name|getTaskID
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

