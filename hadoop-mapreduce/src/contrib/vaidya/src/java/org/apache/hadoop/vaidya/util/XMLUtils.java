begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vaidya.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * Sample Utility class to work with DOM document  */
end_comment

begin_class
DECL|class|XMLUtils
specifier|public
class|class
name|XMLUtils
block|{
comment|/** Prints the specified node, then prints all of its children. */
DECL|method|printDOM (Node node)
specifier|public
specifier|static
name|void
name|printDOM
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|int
name|type
init|=
name|node
operator|.
name|getNodeType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
comment|// print the document element
case|case
name|Node
operator|.
name|DOCUMENT_NODE
case|:
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"<?xml version=\"1.0\" ?>"
argument_list|)
expr_stmt|;
name|printDOM
argument_list|(
operator|(
operator|(
name|Document
operator|)
name|node
operator|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// print element with attributes
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|NamedNodeMap
name|attrs
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|attr
init|=
name|attrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|attr
operator|.
name|getNodeName
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|"=\""
operator|+
name|attr
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
name|int
name|len
init|=
name|children
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
name|printDOM
argument_list|(
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// handle entity reference nodes
case|case
name|Node
operator|.
name|ENTITY_REFERENCE_NODE
case|:
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// print cdata sections
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"<![CDATA["
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"]]>"
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// print text
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// print processing instruction
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"<?"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|data
init|=
name|node
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"?>"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|type
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Get the value of the first (or only) element given its node name    */
DECL|method|getElementValue (String elementName, Element element)
specifier|public
specifier|static
name|String
name|getElementValue
parameter_list|(
name|String
name|elementName
parameter_list|,
name|Element
name|element
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
name|NodeList
name|childNodes
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
name|elementName
argument_list|)
decl_stmt|;
name|Element
name|cn
init|=
operator|(
name|Element
operator|)
name|childNodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|value
operator|=
name|cn
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|//value = childNodes.item(0).getNodeValue().trim();
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No element found with given name:"
operator|+
name|elementName
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|/**    * Parse the XML file and create Document    * @return Document    */
DECL|method|parse (InputStream fs)
specifier|public
specifier|static
name|Document
name|parse
parameter_list|(
name|InputStream
name|fs
parameter_list|)
block|{
name|Document
name|document
init|=
literal|null
decl_stmt|;
comment|// Initiate DocumentBuilderFactory
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// To get a validating parser
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// To get one that understands namespaces
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Get DocumentBuilder
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
comment|// Parse and load into memory the Document
comment|//document = builder.parse( new File(fileName));
name|document
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|fs
argument_list|)
expr_stmt|;
return|return
name|document
return|;
block|}
catch|catch
parameter_list|(
name|SAXParseException
name|spe
parameter_list|)
block|{
comment|// Error generated by the parser
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\n** Parsing error , line "
operator|+
name|spe
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|", uri "
operator|+
name|spe
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" "
operator|+
name|spe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Use the contained exception, if any
name|Exception
name|x
init|=
name|spe
decl_stmt|;
if|if
condition|(
name|spe
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
name|x
operator|=
name|spe
operator|.
name|getException
argument_list|()
expr_stmt|;
name|x
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|sxe
parameter_list|)
block|{
comment|// Error generated during parsing
name|Exception
name|x
init|=
name|sxe
decl_stmt|;
if|if
condition|(
name|sxe
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
name|x
operator|=
name|sxe
operator|.
name|getException
argument_list|()
expr_stmt|;
name|x
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|pce
parameter_list|)
block|{
comment|// Parser with specified options can't be built
name|pce
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// I/O error
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * This method writes a DOM document to a file    * @param filename    * @param document    */
DECL|method|writeXmlToFile (String filename, Document document)
specifier|public
specifier|static
name|void
name|writeXmlToFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|Document
name|document
parameter_list|)
block|{
try|try
block|{
comment|// Prepare the DOM document for writing
name|Source
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|)
decl_stmt|;
comment|// Prepare the output file
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// Write the DOM document to the file
comment|// Get Transformer
name|Transformer
name|xformer
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
comment|// Write to a file
name|xformer
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"TransformerConfigurationException: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"TransformerException: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Count Elements in Document by Tag Name    * @param tag    * @param document    * @return number elements by Tag Name    */
DECL|method|countByTagName (String tag, Document document)
specifier|public
specifier|static
name|int
name|countByTagName
parameter_list|(
name|String
name|tag
parameter_list|,
name|Document
name|document
parameter_list|)
block|{
name|NodeList
name|list
init|=
name|document
operator|.
name|getElementsByTagName
argument_list|(
name|tag
argument_list|)
decl_stmt|;
return|return
name|list
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
end_class

end_unit

