begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vaidya
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Runnable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|statistics
operator|.
name|job
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|statistics
operator|.
name|job
operator|.
name|JobStatisticsInterface
operator|.
name|JobKeys
import|;
end_import

begin_comment
comment|/*  * This is an abstract base class to be extended by each diagnostic test   * class. It implements Runnable interface so that if required multiple tests   * can be run in parallel.   */
end_comment

begin_class
DECL|class|DiagnosticTest
specifier|public
specifier|abstract
class|class
name|DiagnosticTest
implements|implements
name|Runnable
block|{
DECL|field|HIGHVAL
specifier|private
specifier|static
specifier|final
name|double
name|HIGHVAL
init|=
literal|0.99
decl_stmt|;
DECL|field|MEDIUMVAL
specifier|private
specifier|static
specifier|final
name|double
name|MEDIUMVAL
init|=
literal|0.66
decl_stmt|;
DECL|field|LOWVAL
specifier|private
specifier|static
specifier|final
name|double
name|LOWVAL
init|=
literal|0.33
decl_stmt|;
comment|/*    * Job statistics are passed to this class against which this diagnostic     * test is evaluated.    */
DECL|field|_jobExecutionStats
specifier|private
name|JobStatistics
name|_jobExecutionStats
decl_stmt|;
DECL|field|_testConfigElement
specifier|private
name|Element
name|_testConfigElement
decl_stmt|;
DECL|field|_impactLevel
specifier|private
name|double
name|_impactLevel
decl_stmt|;
DECL|field|_evaluated
specifier|private
name|boolean
name|_evaluated
decl_stmt|;
DECL|field|_testPassed
specifier|private
name|boolean
name|_testPassed
decl_stmt|;
comment|/*     * Checks if test is already evaluated against job execution statistics    * @return - true if test is already evaluated once.    */
DECL|method|isEvaluated ()
specifier|public
name|boolean
name|isEvaluated
parameter_list|()
block|{
return|return
name|_evaluated
return|;
block|}
comment|/*    * If impact level (returned by evaluate method) is less than success threshold     * then test is passed (NEGATIVE) else failed (POSITIVE) which inturn indicates the     * problem with job performance      */
DECL|method|istestPassed ()
specifier|public
name|boolean
name|istestPassed
parameter_list|()
block|{
return|return
name|this
operator|.
name|_testPassed
return|;
block|}
comment|/*    * Initialize the globals    */
DECL|method|initGlobals (JobStatistics jobExecutionStats, Element testConfigElement)
specifier|public
name|void
name|initGlobals
parameter_list|(
name|JobStatistics
name|jobExecutionStats
parameter_list|,
name|Element
name|testConfigElement
parameter_list|)
block|{
name|this
operator|.
name|_jobExecutionStats
operator|=
name|jobExecutionStats
expr_stmt|;
name|this
operator|.
name|_testConfigElement
operator|=
name|testConfigElement
expr_stmt|;
block|}
comment|/*    * Returns a prescription/advice (formated text) based on the evaluation of     * diagnostic test condition (evaluate method). Individual test should override     * and implement it. If the value returned is null then the prescription advice    * is printed as provided in the test config file.      */
DECL|method|getPrescription ()
specifier|public
specifier|abstract
name|String
name|getPrescription
parameter_list|()
function_decl|;
comment|/*    * This method prints any reference details to support the test result. Individual    * test needs to override and implement it and information printed is specific     * to individual test.     */
DECL|method|getReferenceDetails ()
specifier|public
specifier|abstract
name|String
name|getReferenceDetails
parameter_list|()
function_decl|;
comment|/*    * Evaluates diagnostic condition and returns impact level (value [0..1])    * Typically this method calculates the impact of a diagnosed condition on the job performance    * (Note: for boolean conditions it is either 0 or 1).    */
DECL|method|evaluate (JobStatistics jobExecutionStats)
specifier|public
specifier|abstract
name|double
name|evaluate
parameter_list|(
name|JobStatistics
name|jobExecutionStats
parameter_list|)
function_decl|;
comment|/*    * Get the Title information for this test as set in the test config file    */
DECL|method|getTitle ()
specifier|public
name|String
name|getTitle
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|XMLUtils
operator|.
name|getElementValue
argument_list|(
literal|"Title"
argument_list|,
name|this
operator|.
name|_testConfigElement
argument_list|)
return|;
block|}
comment|/*    * Get the Description information as set in the test config file.    */
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|XMLUtils
operator|.
name|getElementValue
argument_list|(
literal|"Description"
argument_list|,
name|this
operator|.
name|_testConfigElement
argument_list|)
return|;
block|}
comment|/*    * Get the Importance value as set in the test config file.    */
DECL|method|getImportance ()
specifier|public
name|double
name|getImportance
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|XMLUtils
operator|.
name|getElementValue
argument_list|(
literal|"Importance"
argument_list|,
name|this
operator|.
name|_testConfigElement
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"high"
argument_list|)
condition|)
block|{
return|return
name|HIGHVAL
return|;
block|}
elseif|else
if|if
condition|(
name|XMLUtils
operator|.
name|getElementValue
argument_list|(
literal|"Importance"
argument_list|,
name|this
operator|.
name|_testConfigElement
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"medium"
argument_list|)
condition|)
block|{
return|return
name|MEDIUMVAL
return|;
block|}
else|else
block|{
return|return
name|LOWVAL
return|;
block|}
block|}
comment|/*    * Returns the impact level of this test condition. This value is calculated and    * returned by evaluate method.    */
DECL|method|getImpactLevel ()
specifier|public
name|double
name|getImpactLevel
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isEvaluated
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Test has not been evaluated"
argument_list|)
throw|;
block|}
return|return
name|truncate
argument_list|(
name|this
operator|.
name|_impactLevel
argument_list|)
return|;
block|}
comment|/*     * Get the severity level as specified in the test config file.    */
DECL|method|getSeverityLevel ()
specifier|public
name|double
name|getSeverityLevel
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|truncate
argument_list|(
call|(
name|double
call|)
argument_list|(
name|getImportance
argument_list|()
operator|*
name|getImpactLevel
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/*    * Get Success Threshold as specified in the test config file.    */
DECL|method|getSuccessThreshold ()
specifier|public
name|double
name|getSuccessThreshold
parameter_list|()
throws|throws
name|Exception
block|{
name|double
name|x
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|XMLUtils
operator|.
name|getElementValue
argument_list|(
literal|"SuccessThreshold"
argument_list|,
name|this
operator|.
name|_testConfigElement
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|truncate
argument_list|(
name|x
argument_list|)
return|;
block|}
comment|/*    * Creates and returns the report element for this test based on the     * test evaluation results.    */
DECL|method|getReportElement (Document doc, Node parent, int i)
specifier|public
name|Element
name|getReportElement
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Node
name|parent
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
comment|/*       * If test is not evaluated yet then throw exception      */
if|if
condition|(
operator|!
name|this
operator|.
name|isEvaluated
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Test has not been evaluated"
argument_list|)
throw|;
block|}
comment|/*       * If i == 0, means first test, then print job information      * before it.     */
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|Node
name|reportElementx
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"JobInformationElement"
argument_list|)
decl_stmt|;
name|parent
operator|.
name|appendChild
argument_list|(
name|reportElementx
argument_list|)
expr_stmt|;
comment|// Insert JOBTRACKERID
name|Node
name|itemx
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"JobTrackerID"
argument_list|)
decl_stmt|;
name|reportElementx
operator|.
name|appendChild
argument_list|(
name|itemx
argument_list|)
expr_stmt|;
name|Node
name|valuex
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|this
operator|.
name|_jobExecutionStats
operator|.
name|getStringValue
argument_list|(
name|JobKeys
operator|.
name|JOBTRACKERID
argument_list|)
argument_list|)
decl_stmt|;
name|itemx
operator|.
name|appendChild
argument_list|(
name|valuex
argument_list|)
expr_stmt|;
comment|// Insert JOBNAME
name|itemx
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"JobName"
argument_list|)
expr_stmt|;
name|reportElementx
operator|.
name|appendChild
argument_list|(
name|itemx
argument_list|)
expr_stmt|;
name|valuex
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|this
operator|.
name|_jobExecutionStats
operator|.
name|getStringValue
argument_list|(
name|JobKeys
operator|.
name|JOBNAME
argument_list|)
argument_list|)
expr_stmt|;
name|itemx
operator|.
name|appendChild
argument_list|(
name|valuex
argument_list|)
expr_stmt|;
comment|// Insert JOBTYPE
name|itemx
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"JobType"
argument_list|)
expr_stmt|;
name|reportElementx
operator|.
name|appendChild
argument_list|(
name|itemx
argument_list|)
expr_stmt|;
name|valuex
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|this
operator|.
name|_jobExecutionStats
operator|.
name|getStringValue
argument_list|(
name|JobKeys
operator|.
name|JOBTYPE
argument_list|)
argument_list|)
expr_stmt|;
name|itemx
operator|.
name|appendChild
argument_list|(
name|valuex
argument_list|)
expr_stmt|;
comment|// Insert USER
name|itemx
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"User"
argument_list|)
expr_stmt|;
name|reportElementx
operator|.
name|appendChild
argument_list|(
name|itemx
argument_list|)
expr_stmt|;
name|valuex
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|this
operator|.
name|_jobExecutionStats
operator|.
name|getStringValue
argument_list|(
name|JobKeys
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|itemx
operator|.
name|appendChild
argument_list|(
name|valuex
argument_list|)
expr_stmt|;
comment|// Insert SUBMIT_TIME
name|itemx
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"SubmitTime"
argument_list|)
expr_stmt|;
name|reportElementx
operator|.
name|appendChild
argument_list|(
name|itemx
argument_list|)
expr_stmt|;
name|String
name|st1
init|=
operator|(
operator|new
name|Timestamp
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|this
operator|.
name|_jobExecutionStats
operator|.
name|getStringValue
argument_list|(
name|JobKeys
operator|.
name|SUBMIT_TIME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
name|valuex
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|st1
argument_list|)
expr_stmt|;
name|itemx
operator|.
name|appendChild
argument_list|(
name|valuex
argument_list|)
expr_stmt|;
comment|// Insert LAUNCH_TIME
name|itemx
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"LaunchTime"
argument_list|)
expr_stmt|;
name|reportElementx
operator|.
name|appendChild
argument_list|(
name|itemx
argument_list|)
expr_stmt|;
name|String
name|st2
init|=
operator|(
operator|new
name|Timestamp
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|this
operator|.
name|_jobExecutionStats
operator|.
name|getStringValue
argument_list|(
name|JobKeys
operator|.
name|LAUNCH_TIME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
name|valuex
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|st2
argument_list|)
expr_stmt|;
name|itemx
operator|.
name|appendChild
argument_list|(
name|valuex
argument_list|)
expr_stmt|;
comment|// Insert FINISH_TIME
name|itemx
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"FinishTime"
argument_list|)
expr_stmt|;
name|reportElementx
operator|.
name|appendChild
argument_list|(
name|itemx
argument_list|)
expr_stmt|;
name|String
name|st3
init|=
operator|(
operator|new
name|Timestamp
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|this
operator|.
name|_jobExecutionStats
operator|.
name|getStringValue
argument_list|(
name|JobKeys
operator|.
name|FINISH_TIME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
name|valuex
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|st3
argument_list|)
expr_stmt|;
name|itemx
operator|.
name|appendChild
argument_list|(
name|valuex
argument_list|)
expr_stmt|;
comment|// Insert STATUS
name|itemx
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"Status"
argument_list|)
expr_stmt|;
name|reportElementx
operator|.
name|appendChild
argument_list|(
name|itemx
argument_list|)
expr_stmt|;
name|valuex
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|this
operator|.
name|_jobExecutionStats
operator|.
name|getStringValue
argument_list|(
name|JobKeys
operator|.
name|STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|itemx
operator|.
name|appendChild
argument_list|(
name|valuex
argument_list|)
expr_stmt|;
block|}
comment|/*      * Construct and return the report element      */
comment|// Insert Child ReportElement
name|Node
name|reportElement
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"TestReportElement"
argument_list|)
decl_stmt|;
name|parent
operator|.
name|appendChild
argument_list|(
name|reportElement
argument_list|)
expr_stmt|;
comment|// Insert title
name|Node
name|item
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"TestTitle"
argument_list|)
decl_stmt|;
name|reportElement
operator|.
name|appendChild
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|Node
name|value
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|this
operator|.
name|getTitle
argument_list|()
argument_list|)
decl_stmt|;
name|item
operator|.
name|appendChild
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// Insert description
name|item
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"TestDescription"
argument_list|)
expr_stmt|;
name|reportElement
operator|.
name|appendChild
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|value
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|this
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|appendChild
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// Insert Importance
name|item
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"TestImportance"
argument_list|)
expr_stmt|;
name|reportElement
operator|.
name|appendChild
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|String
name|imp
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getImportance
argument_list|()
operator|==
name|HIGHVAL
condition|)
block|{
name|imp
operator|=
literal|"HIGH"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|getImportance
argument_list|()
operator|==
name|MEDIUMVAL
condition|)
block|{
name|imp
operator|=
literal|"MEDIUM"
expr_stmt|;
block|}
else|else
block|{
name|imp
operator|=
literal|"LOW"
expr_stmt|;
block|}
name|value
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|imp
argument_list|)
expr_stmt|;
name|item
operator|.
name|appendChild
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// Insert Importance
name|item
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"TestResult"
argument_list|)
expr_stmt|;
name|reportElement
operator|.
name|appendChild
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|_testPassed
condition|)
block|{
name|value
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
literal|"NEGATIVE(PASSED)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
literal|"POSITIVE(FAILED)"
argument_list|)
expr_stmt|;
block|}
name|item
operator|.
name|appendChild
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// TODO : if (!this._testPassed) {
comment|// Insert Severity
name|item
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"TestSeverity"
argument_list|)
expr_stmt|;
name|reportElement
operator|.
name|appendChild
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|value
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
literal|""
operator|+
name|this
operator|.
name|getSeverityLevel
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|appendChild
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// Insert Reference Details
name|item
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"ReferenceDetails"
argument_list|)
expr_stmt|;
name|reportElement
operator|.
name|appendChild
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|value
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
literal|""
operator|+
name|this
operator|.
name|getReferenceDetails
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|appendChild
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// Insert Prescription Advice
name|item
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"TestPrescription"
argument_list|)
expr_stmt|;
name|String
name|val
init|=
name|this
operator|.
name|getPrescription
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|XMLUtils
operator|.
name|getElementValue
argument_list|(
literal|"Prescription"
argument_list|,
name|this
operator|.
name|_testConfigElement
argument_list|)
expr_stmt|;
block|}
name|reportElement
operator|.
name|appendChild
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|value
operator|=
name|doc
operator|.
name|createTextNode
argument_list|(
literal|""
operator|+
name|val
argument_list|)
expr_stmt|;
name|item
operator|.
name|appendChild
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// }
return|return
operator|(
name|Element
operator|)
name|reportElement
return|;
block|}
comment|/*     * (non-Javadoc)    * @see java.lang.Runnable#run()    */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|/*      * Evaluate the test      */
name|this
operator|.
name|_impactLevel
operator|=
name|this
operator|.
name|evaluate
argument_list|(
name|this
operator|.
name|_jobExecutionStats
argument_list|)
expr_stmt|;
name|this
operator|.
name|_evaluated
operator|=
literal|true
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|_impactLevel
operator|>=
name|this
operator|.
name|getSuccessThreshold
argument_list|()
condition|)
block|{
name|this
operator|.
name|_testPassed
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|_testPassed
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Returns value of element of type long part of InputElement of diagnostic     * rule    */
DECL|method|getInputElementLongValue (String elementName, long defaultValue)
specifier|protected
name|long
name|getInputElementLongValue
parameter_list|(
name|String
name|elementName
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
name|Element
name|inputElement
init|=
call|(
name|Element
call|)
argument_list|(
name|this
operator|.
name|_testConfigElement
operator|.
name|getElementsByTagName
argument_list|(
literal|"InputElement"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|prs
init|=
literal|null
decl_stmt|;
name|long
name|value
decl_stmt|;
name|prs
operator|=
operator|(
name|Element
operator|)
name|inputElement
operator|.
name|getElementsByTagName
argument_list|(
name|elementName
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|prs
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|prs
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/*    * Returns value of element of type double part of InputElement of diagnostic rule    */
DECL|method|getInputElementDoubleValue (String elementName, double defaultValue)
specifier|protected
name|double
name|getInputElementDoubleValue
parameter_list|(
name|String
name|elementName
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
name|Element
name|inputElement
init|=
call|(
name|Element
call|)
argument_list|(
name|this
operator|.
name|_testConfigElement
operator|.
name|getElementsByTagName
argument_list|(
literal|"InputElement"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|prs
init|=
literal|null
decl_stmt|;
name|double
name|value
decl_stmt|;
name|prs
operator|=
operator|(
name|Element
operator|)
name|inputElement
operator|.
name|getElementsByTagName
argument_list|(
name|elementName
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|prs
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|prs
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/*    * Returns value of element of type String part of InputElement of diagnostic rule    */
DECL|method|getInputElementStringValue (String elementName, String defaultValue)
specifier|protected
name|String
name|getInputElementStringValue
parameter_list|(
name|String
name|elementName
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|Element
name|inputElement
init|=
call|(
name|Element
call|)
argument_list|(
name|this
operator|.
name|_testConfigElement
operator|.
name|getElementsByTagName
argument_list|(
literal|"InputElement"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|prs
init|=
literal|null
decl_stmt|;
name|String
name|value
decl_stmt|;
name|prs
operator|=
operator|(
name|Element
operator|)
name|inputElement
operator|.
name|getElementsByTagName
argument_list|(
name|elementName
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|prs
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|prs
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/*    * truncate doubles to 2 digit.    */
DECL|method|truncate (double x)
specifier|public
specifier|static
name|double
name|truncate
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|long
name|y
init|=
call|(
name|long
call|)
argument_list|(
name|x
operator|*
literal|100
argument_list|)
decl_stmt|;
return|return
operator|(
name|double
operator|)
name|y
operator|/
literal|100
return|;
block|}
block|}
end_class

end_unit

