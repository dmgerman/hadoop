begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|RaidDFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestRaidDfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_class
DECL|class|TestReedSolomonDecoder
specifier|public
class|class
name|TestReedSolomonDecoder
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.TestReedSolomonDecoder"
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR
specifier|final
specifier|static
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/contrib/raid/test/data"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|final
specifier|static
name|int
name|NUM_DATANODES
init|=
literal|3
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|dfs
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|fileSys
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
DECL|method|testDecoder ()
specifier|public
name|void
name|testDecoder
parameter_list|()
throws|throws
name|Exception
block|{
name|mySetup
argument_list|()
expr_stmt|;
name|int
name|stripeSize
init|=
literal|10
decl_stmt|;
name|int
name|paritySize
init|=
literal|4
decl_stmt|;
name|long
name|blockSize
init|=
literal|8192
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/user/raidtest/file1"
argument_list|)
decl_stmt|;
name|Path
name|recoveredFile1
init|=
operator|new
name|Path
argument_list|(
literal|"/user/raidtest/file1.recovered"
argument_list|)
decl_stmt|;
name|Path
name|parityFile1
init|=
operator|new
name|Path
argument_list|(
literal|"/rsraid/user/raidtest/file1"
argument_list|)
decl_stmt|;
name|long
name|crc1
init|=
name|TestRaidDfs
operator|.
name|createTestFilePartialLastBlock
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|FileStatus
name|file1Stat
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"raid.rsdecoder.bufsize"
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"raid.rsencoder.bufsize"
argument_list|,
literal|512
argument_list|)
expr_stmt|;
try|try
block|{
comment|// First encode the file.
name|ReedSolomonEncoder
name|encoder
init|=
operator|new
name|ReedSolomonEncoder
argument_list|(
name|conf
argument_list|,
name|stripeSize
argument_list|,
name|paritySize
argument_list|)
decl_stmt|;
name|short
name|parityRepl
init|=
literal|1
decl_stmt|;
name|encoder
operator|.
name|encodeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|fileSys
argument_list|,
name|parityFile1
argument_list|,
name|parityRepl
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
comment|// Ensure there are no corrupt files yet.
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
decl_stmt|;
name|String
index|[]
name|corruptFiles
init|=
name|RaidDFSUtil
operator|.
name|getCorruptFiles
argument_list|(
name|dfs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|corruptFiles
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Now corrupt the file.
name|long
name|corruptOffset
init|=
name|blockSize
operator|*
literal|5
decl_stmt|;
name|FileStatus
name|srcStat
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|LocatedBlocks
name|locations
init|=
name|RaidDFSUtil
operator|.
name|getBlockLocations
argument_list|(
name|dfs
argument_list|,
name|file1
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|0
argument_list|,
name|srcStat
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|corruptBlock
argument_list|(
name|locations
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|corruptBlock
argument_list|(
name|locations
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|TestBlockFixer
operator|.
name|reportCorruptBlocks
argument_list|(
name|dfs
argument_list|,
name|file1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|6
block|}
argument_list|,
name|srcStat
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure file is corrupted.
name|corruptFiles
operator|=
name|RaidDFSUtil
operator|.
name|getCorruptFiles
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corruptFiles
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corruptFiles
index|[
literal|0
index|]
argument_list|,
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fix the file.
name|ReedSolomonDecoder
name|decoder
init|=
operator|new
name|ReedSolomonDecoder
argument_list|(
name|conf
argument_list|,
name|stripeSize
argument_list|,
name|paritySize
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|decodeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|fileSys
argument_list|,
name|parityFile1
argument_list|,
name|corruptOffset
argument_list|,
name|recoveredFile1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TestRaidDfs
operator|.
name|validateFile
argument_list|(
name|fileSys
argument_list|,
name|recoveredFile1
argument_list|,
name|file1Stat
operator|.
name|getLen
argument_list|()
argument_list|,
name|crc1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|myTearDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|corruptBlock (ExtendedBlock block)
name|void
name|corruptBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"Could not corrupt block"
argument_list|,
name|dfs
operator|.
name|corruptBlockOnDataNodes
argument_list|(
name|block
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|mySetup ()
specifier|private
name|void
name|mySetup
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// Make sure data directory exists
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
comment|// make all deletions not go through Trash
name|conf
operator|.
name|set
argument_list|(
literal|"fs.shell.delete.classname"
argument_list|,
literal|"org.apache.hadoop.hdfs.DFSClient"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.permissions"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|String
name|namenode
init|=
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|)
expr_stmt|;
block|}
DECL|method|myTearDown ()
specifier|private
name|void
name|myTearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

