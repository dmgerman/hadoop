begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Math
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_comment
comment|/**  * Maintains information about one policy  */
end_comment

begin_class
DECL|class|PolicyInfo
specifier|public
class|class
name|PolicyInfo
implements|implements
name|Writable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.protocol.PolicyInfo"
argument_list|)
decl_stmt|;
DECL|field|dateFormat
specifier|protected
specifier|static
specifier|final
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
DECL|field|srcPath
specifier|private
name|Path
name|srcPath
decl_stmt|;
comment|// the specified src path
DECL|field|policyName
specifier|private
name|String
name|policyName
decl_stmt|;
comment|// name of policy
DECL|field|codeType
specifier|private
name|ErasureCodeType
name|codeType
decl_stmt|;
comment|// the erasure code used
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
comment|// A verbose description of this policy
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|// Hadoop configuration
DECL|field|properties
specifier|private
name|Properties
name|properties
decl_stmt|;
comment|// Policy-dependent properties
DECL|field|plock
specifier|private
name|ReentrantReadWriteLock
name|plock
decl_stmt|;
comment|// protects policy operations.
DECL|enum|ErasureCodeType
specifier|public
specifier|static
enum|enum
name|ErasureCodeType
block|{
DECL|enumConstant|XOR
DECL|enumConstant|RS
name|XOR
block|,
name|RS
block|;
DECL|method|fromString (String s)
specifier|public
specifier|static
name|ErasureCodeType
name|fromString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|XOR
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|XOR
return|;
block|}
if|if
condition|(
name|RS
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|RS
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Create the empty object    */
DECL|method|PolicyInfo ()
specifier|public
name|PolicyInfo
parameter_list|()
block|{
name|this
operator|.
name|conf
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|policyName
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|description
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|srcPath
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|this
operator|.
name|plock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create the metadata that describes a policy    */
DECL|method|PolicyInfo (String policyName, Configuration conf)
specifier|public
name|PolicyInfo
parameter_list|(
name|String
name|policyName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|policyName
operator|=
name|policyName
expr_stmt|;
name|this
operator|.
name|description
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|srcPath
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|this
operator|.
name|plock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Copy fields from another PolicyInfo    */
DECL|method|copyFrom (PolicyInfo other)
specifier|public
name|void
name|copyFrom
parameter_list|(
name|PolicyInfo
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|conf
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|conf
operator|=
name|other
operator|.
name|conf
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|policyName
operator|!=
literal|null
operator|&&
name|other
operator|.
name|policyName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|policyName
operator|=
name|other
operator|.
name|policyName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|description
operator|!=
literal|null
operator|&&
name|other
operator|.
name|description
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|description
operator|=
name|other
operator|.
name|description
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|codeType
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|codeType
operator|=
name|other
operator|.
name|codeType
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|srcPath
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|srcPath
operator|=
name|other
operator|.
name|srcPath
expr_stmt|;
block|}
for|for
control|(
name|Object
name|key
range|:
name|other
operator|.
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|skey
init|=
operator|(
name|String
operator|)
name|key
decl_stmt|;
name|this
operator|.
name|properties
operator|.
name|setProperty
argument_list|(
name|skey
argument_list|,
name|other
operator|.
name|properties
operator|.
name|getProperty
argument_list|(
name|skey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the input path on which this policy has to be applied    */
DECL|method|setSrcPath (String in)
specifier|public
name|void
name|setSrcPath
parameter_list|(
name|String
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|srcPath
operator|=
operator|new
name|Path
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|srcPath
operator|=
name|srcPath
operator|.
name|makeQualified
argument_list|(
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the erasure code type used in this policy    */
DECL|method|setErasureCode (String code)
specifier|public
name|void
name|setErasureCode
parameter_list|(
name|String
name|code
parameter_list|)
block|{
name|this
operator|.
name|codeType
operator|=
name|ErasureCodeType
operator|.
name|fromString
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the description of this policy.    */
DECL|method|setDescription (String des)
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|des
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|des
expr_stmt|;
block|}
comment|/**    * Sets an internal property.    * @param name property name.    * @param value property value.    */
DECL|method|setProperty (String name, String value)
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the value of an internal property.    * @param name property name.    */
DECL|method|getProperty (String name)
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|properties
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Get the name of this policy.    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|policyName
return|;
block|}
comment|/**    * Get the destination path of this policy.    */
DECL|method|getErasureCode ()
specifier|public
name|ErasureCodeType
name|getErasureCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|codeType
return|;
block|}
comment|/**    * Get the srcPath    */
DECL|method|getSrcPath ()
specifier|public
name|Path
name|getSrcPath
parameter_list|()
block|{
return|return
name|srcPath
return|;
block|}
comment|/**    * Get the expanded (unglobbed) forms of the srcPaths    */
DECL|method|getSrcPathExpanded ()
specifier|public
name|Path
index|[]
name|getSrcPathExpanded
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// globbing on srcPath
name|FileStatus
index|[]
name|gpaths
init|=
name|fs
operator|.
name|globStatus
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|gpaths
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Path
index|[]
name|values
init|=
operator|new
name|Path
index|[
name|gpaths
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gpaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
name|gpaths
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|p
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**    * Convert this policy into a printable form    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buff
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"Policy Name:\t"
operator|+
name|policyName
operator|+
literal|" --------------------\n"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"Source Path:\t"
operator|+
name|srcPath
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"Erasure Code:\t"
operator|+
name|codeType
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|properties
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|name
operator|+
literal|":\t"
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|description
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|description
operator|.
name|length
argument_list|()
argument_list|,
literal|80
argument_list|)
decl_stmt|;
name|String
name|sub
init|=
name|description
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|sub
operator|=
name|sub
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"Description:\t"
operator|+
name|sub
operator|+
literal|"...\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//////////////////////////////////////////////////
comment|// Writable
comment|//////////////////////////////////////////////////
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|PolicyInfo
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|PolicyInfo
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|srcPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|codeType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|properties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|properties
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|srcPath
operator|=
operator|new
name|Path
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|policyName
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|codeType
operator|=
name|ErasureCodeType
operator|.
name|fromString
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
name|in
operator|.
name|readInt
argument_list|()
init|;
name|n
operator|>
literal|0
condition|;
name|n
operator|--
control|)
block|{
name|String
name|name
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

