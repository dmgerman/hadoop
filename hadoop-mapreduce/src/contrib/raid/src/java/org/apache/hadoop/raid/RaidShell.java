begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|HarFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedRaidFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|RaidDFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|RaidProtocol
import|;
end_import

begin_comment
comment|/**  * A {@link RaidShell} that allows browsing configured raid policies.  */
end_comment

begin_class
DECL|class|RaidShell
specifier|public
class|class
name|RaidShell
extends|extends
name|Configured
implements|implements
name|Tool
block|{
static|static
block|{
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"hdfs-default.xml"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"hdfs-site.xml"
argument_list|)
expr_stmt|;
block|}
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.RaidShell"
argument_list|)
decl_stmt|;
DECL|field|raidnode
specifier|public
name|RaidProtocol
name|raidnode
decl_stmt|;
DECL|field|rpcRaidnode
name|RaidProtocol
name|rpcRaidnode
decl_stmt|;
DECL|field|ugi
specifier|private
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|field|clientRunning
specifier|volatile
name|boolean
name|clientRunning
init|=
literal|true
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Start RaidShell.    *<p>    * The RaidShell connects to the specified RaidNode and performs basic    * configuration options.    * @throws IOException    */
DECL|method|RaidShell (Configuration conf)
specifier|public
name|RaidShell
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|initializeRpc (Configuration conf, InetSocketAddress address)
name|void
name|initializeRpc
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcRaidnode
operator|=
name|createRPCRaidnode
argument_list|(
name|address
argument_list|,
name|conf
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|this
operator|.
name|raidnode
operator|=
name|createRaidnode
argument_list|(
name|rpcRaidnode
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeLocal (Configuration conf)
name|void
name|initializeLocal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
DECL|method|createRaidnode (Configuration conf)
specifier|public
specifier|static
name|RaidProtocol
name|createRaidnode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createRaidnode
argument_list|(
name|RaidNode
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|createRaidnode (InetSocketAddress raidNodeAddr, Configuration conf)
specifier|public
specifier|static
name|RaidProtocol
name|createRaidnode
parameter_list|(
name|InetSocketAddress
name|raidNodeAddr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createRaidnode
argument_list|(
name|createRPCRaidnode
argument_list|(
name|raidNodeAddr
argument_list|,
name|conf
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createRPCRaidnode (InetSocketAddress raidNodeAddr, Configuration conf, UserGroupInformation ugi)
specifier|private
specifier|static
name|RaidProtocol
name|createRPCRaidnode
parameter_list|(
name|InetSocketAddress
name|raidNodeAddr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RaidShell connecting to "
operator|+
name|raidNodeAddr
argument_list|)
expr_stmt|;
return|return
operator|(
name|RaidProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|RaidProtocol
operator|.
name|class
argument_list|,
name|RaidProtocol
operator|.
name|versionID
argument_list|,
name|raidNodeAddr
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getSocketFactory
argument_list|(
name|conf
argument_list|,
name|RaidProtocol
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createRaidnode (RaidProtocol rpcRaidnode)
specifier|private
specifier|static
name|RaidProtocol
name|createRaidnode
parameter_list|(
name|RaidProtocol
name|rpcRaidnode
parameter_list|)
throws|throws
name|IOException
block|{
name|RetryPolicy
name|createPolicy
init|=
name|RetryPolicies
operator|.
name|retryUpToMaximumCountWithFixedSleep
argument_list|(
literal|5
argument_list|,
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|remoteExceptionToPolicyMap
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|exceptionToPolicyMap
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
argument_list|()
decl_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|,
name|RetryPolicies
operator|.
name|retryByRemoteException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|remoteExceptionToPolicyMap
argument_list|)
argument_list|)
expr_stmt|;
name|RetryPolicy
name|methodPolicy
init|=
name|RetryPolicies
operator|.
name|retryByException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|exceptionToPolicyMap
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RetryPolicy
argument_list|>
name|methodNameToPolicyMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RetryPolicy
argument_list|>
argument_list|()
decl_stmt|;
name|methodNameToPolicyMap
operator|.
name|put
argument_list|(
literal|"create"
argument_list|,
name|methodPolicy
argument_list|)
expr_stmt|;
return|return
operator|(
name|RaidProtocol
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|RaidProtocol
operator|.
name|class
argument_list|,
name|rpcRaidnode
argument_list|,
name|methodNameToPolicyMap
argument_list|)
return|;
block|}
DECL|method|checkOpen ()
specifier|private
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|clientRunning
condition|)
block|{
name|IOException
name|result
init|=
operator|new
name|IOException
argument_list|(
literal|"RaidNode closed"
argument_list|)
decl_stmt|;
throw|throw
name|result
throw|;
block|}
block|}
comment|/**    * Close the connection to the raidNode.    */
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|clientRunning
condition|)
block|{
name|clientRunning
operator|=
literal|false
expr_stmt|;
name|RPC
operator|.
name|stopProxy
argument_list|(
name|rpcRaidnode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Displays format of commands.    */
DECL|method|printUsage (String cmd)
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|"Usage: java "
operator|+
name|RaidShell
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"-showConfig"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java RaidShell"
operator|+
literal|" [-showConfig]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-recover"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java RaidShell"
operator|+
literal|" [-recover srcPath1 corruptOffset]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-recoverBlocks"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java RaidShell"
operator|+
literal|" [-recoverBlocks path1 path2...]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java RaidShell"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-showConfig ]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-help [cmd]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-recover srcPath1 corruptOffset]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-recoverBlocks path1 path2...]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-fsck [path]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * run    */
DECL|method|run (String argv[])
specifier|public
name|int
name|run
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
comment|//
comment|// verify that we have enough command line parameters
comment|//
if|if
condition|(
literal|"-showConfig"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-recover"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-fsck"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|argv
operator|.
name|length
operator|<
literal|1
operator|)
operator|||
operator|(
name|argv
operator|.
name|length
operator|>
literal|2
operator|)
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
try|try
block|{
if|if
condition|(
literal|"-showConfig"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|initializeRpc
argument_list|(
name|conf
argument_list|,
name|RaidNode
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|showConfig
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-recover"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|initializeRpc
argument_list|(
name|conf
argument_list|,
name|RaidNode
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|recoverAndPrint
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-recoverBlocks"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|initializeLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|recoverBlocks
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-fsck"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// if there are no args, check the whole file system
name|exitCode
operator|=
name|fsck
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// argv.length == 2
comment|// otherwise, check the path passed
name|exitCode
operator|=
name|fsck
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": Unknown command"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|arge
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|arge
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
comment|//
comment|// This is a error returned by raidnode server. Print
comment|// out the first line of the error mesage, ignore the stack trace.
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//
comment|// IO exception encountered locally.
comment|//
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|re
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|re
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{     }
return|return
name|exitCode
return|;
block|}
comment|/**    * Apply operation specified by 'cmd' on all parameters    * starting from argv[startindex].    */
DECL|method|showConfig (String cmd, String argv[], int startindex)
specifier|private
name|int
name|showConfig
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
name|argv
index|[]
parameter_list|,
name|int
name|startindex
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
name|startindex
decl_stmt|;
name|PolicyList
index|[]
name|all
init|=
name|raidnode
operator|.
name|getAllPolicies
argument_list|()
decl_stmt|;
for|for
control|(
name|PolicyList
name|list
range|:
name|all
control|)
block|{
for|for
control|(
name|PolicyInfo
name|p
range|:
name|list
operator|.
name|getAll
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exitCode
return|;
block|}
comment|/**    * Recovers the specified path from the parity file    */
DECL|method|recover (String cmd, String argv[], int startindex)
specifier|public
name|Path
index|[]
name|recover
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
name|argv
index|[]
parameter_list|,
name|int
name|startindex
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
index|[]
name|paths
init|=
operator|new
name|Path
index|[
operator|(
name|argv
operator|.
name|length
operator|-
name|startindex
operator|)
operator|/
literal|2
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startindex
init|;
name|i
operator|<
name|argv
operator|.
name|length
condition|;
name|i
operator|=
name|i
operator|+
literal|2
control|)
block|{
name|String
name|path
init|=
name|argv
index|[
name|i
index|]
decl_stmt|;
name|long
name|corruptOffset
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|argv
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"RaidShell recoverFile for "
operator|+
name|path
operator|+
literal|" corruptOffset "
operator|+
name|corruptOffset
argument_list|)
expr_stmt|;
name|paths
index|[
name|j
index|]
operator|=
operator|new
name|Path
argument_list|(
name|raidnode
operator|.
name|recoverFile
argument_list|(
name|path
argument_list|,
name|corruptOffset
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Raidshell created recovery file "
operator|+
name|paths
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
DECL|method|recoverAndPrint (String cmd, String argv[], int startindex)
specifier|public
name|int
name|recoverAndPrint
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
name|argv
index|[]
parameter_list|,
name|int
name|startindex
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|recover
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|startindex
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
DECL|method|recoverBlocks (String[] args, int startIndex)
specifier|public
name|void
name|recoverBlocks
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|startIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recovering blocks for "
operator|+
operator|(
name|args
operator|.
name|length
operator|-
name|startIndex
operator|)
operator|+
literal|" files"
argument_list|)
expr_stmt|;
name|BlockFixer
operator|.
name|BlockFixerHelper
name|fixer
init|=
operator|new
name|BlockFixer
operator|.
name|BlockFixerHelper
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startIndex
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
name|fixer
operator|.
name|fixFile
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * checks whether a file has more than the allowable number of    * corrupt blocks and must therefore be considered corrupt    */
DECL|method|isFileCorrupt (final DistributedFileSystem dfs, final Path filePath)
specifier|private
name|boolean
name|isFileCorrupt
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// corruptBlocksPerStripe:
comment|// map stripe # -> # of corrupt blocks in that stripe (data + parity)
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|corruptBlocksPerStripe
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// read conf
specifier|final
name|int
name|stripeBlocks
init|=
name|RaidNode
operator|.
name|getStripeLength
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// figure out which blocks are missing/corrupted
specifier|final
name|FileStatus
name|fileStatus
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
name|fileStatus
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
specifier|final
name|long
name|fileLength
init|=
name|fileStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|long
name|fileLengthInBlocks
init|=
operator|(
name|fileLength
operator|/
name|blockSize
operator|)
operator|+
operator|(
operator|(
operator|(
name|fileLength
operator|%
name|blockSize
operator|)
operator|==
literal|0
operator|)
condition|?
literal|0L
else|:
literal|1L
operator|)
decl_stmt|;
specifier|final
name|long
name|fileStripes
init|=
operator|(
name|fileLengthInBlocks
operator|/
name|stripeBlocks
operator|)
operator|+
operator|(
operator|(
operator|(
name|fileLengthInBlocks
operator|%
name|stripeBlocks
operator|)
operator|==
literal|0
operator|)
condition|?
literal|0L
else|:
literal|1L
operator|)
decl_stmt|;
specifier|final
name|BlockLocation
index|[]
name|fileBlocks
init|=
name|dfs
operator|.
name|getFileBlockLocations
argument_list|(
name|fileStatus
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|)
decl_stmt|;
comment|// figure out which stripes these corrupted blocks belong to
for|for
control|(
name|BlockLocation
name|fileBlock
range|:
name|fileBlocks
control|)
block|{
name|int
name|blockNo
init|=
call|(
name|int
call|)
argument_list|(
name|fileBlock
operator|.
name|getOffset
argument_list|()
operator|/
name|blockSize
argument_list|)
decl_stmt|;
specifier|final
name|int
name|stripe
init|=
call|(
name|int
call|)
argument_list|(
name|blockNo
operator|/
name|stripeBlocks
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileBlock
operator|.
name|isCorrupt
argument_list|()
operator|||
operator|(
name|fileBlock
operator|.
name|getNames
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|fileBlock
operator|.
name|getLength
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|corruptBlocksPerStripe
operator|.
name|get
argument_list|(
name|stripe
argument_list|)
operator|==
literal|null
condition|)
block|{
name|corruptBlocksPerStripe
operator|.
name|put
argument_list|(
name|stripe
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|corruptBlocksPerStripe
operator|.
name|put
argument_list|(
name|stripe
argument_list|,
name|corruptBlocksPerStripe
operator|.
name|get
argument_list|(
name|stripe
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"file "
operator|+
name|filePath
operator|.
name|toString
argument_list|()
operator|+
literal|" corrupt in block "
operator|+
name|blockNo
operator|+
literal|"/"
operator|+
name|fileLengthInBlocks
operator|+
literal|", stripe "
operator|+
name|stripe
operator|+
literal|"/"
operator|+
name|fileStripes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"file "
operator|+
name|filePath
operator|.
name|toString
argument_list|()
operator|+
literal|" OK in block "
operator|+
name|blockNo
operator|+
literal|"/"
operator|+
name|fileLengthInBlocks
operator|+
literal|", stripe "
operator|+
name|stripe
operator|+
literal|"/"
operator|+
name|fileStripes
argument_list|)
expr_stmt|;
block|}
block|}
name|RaidInfo
name|raidInfo
init|=
name|getFileRaidInfo
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
comment|// now check parity blocks
if|if
condition|(
name|raidInfo
operator|.
name|raidType
operator|!=
name|RaidType
operator|.
name|NONE
condition|)
block|{
name|checkParityBlocks
argument_list|(
name|filePath
argument_list|,
name|corruptBlocksPerStripe
argument_list|,
name|blockSize
argument_list|,
name|fileStripes
argument_list|,
name|raidInfo
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|maxCorruptBlocksPerStripe
init|=
name|raidInfo
operator|.
name|parityBlocksPerStripe
decl_stmt|;
for|for
control|(
name|int
name|corruptBlocksInStripe
range|:
name|corruptBlocksPerStripe
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|corruptBlocksInStripe
operator|>
name|maxCorruptBlocksPerStripe
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * holds the type of raid used for a particular file    */
DECL|enum|RaidType
specifier|private
enum|enum
name|RaidType
block|{
DECL|enumConstant|XOR
name|XOR
block|,
DECL|enumConstant|RS
name|RS
block|,
DECL|enumConstant|NONE
name|NONE
block|}
comment|/**    * holds raid type and parity file pair    */
DECL|class|RaidInfo
specifier|private
class|class
name|RaidInfo
block|{
DECL|method|RaidInfo (final RaidType raidType, final RaidNode.ParityFilePair parityPair, final int parityBlocksPerStripe)
specifier|public
name|RaidInfo
parameter_list|(
specifier|final
name|RaidType
name|raidType
parameter_list|,
specifier|final
name|RaidNode
operator|.
name|ParityFilePair
name|parityPair
parameter_list|,
specifier|final
name|int
name|parityBlocksPerStripe
parameter_list|)
block|{
name|this
operator|.
name|raidType
operator|=
name|raidType
expr_stmt|;
name|this
operator|.
name|parityPair
operator|=
name|parityPair
expr_stmt|;
name|this
operator|.
name|parityBlocksPerStripe
operator|=
name|parityBlocksPerStripe
expr_stmt|;
block|}
DECL|field|raidType
specifier|public
specifier|final
name|RaidType
name|raidType
decl_stmt|;
DECL|field|parityPair
specifier|public
specifier|final
name|RaidNode
operator|.
name|ParityFilePair
name|parityPair
decl_stmt|;
DECL|field|parityBlocksPerStripe
specifier|public
specifier|final
name|int
name|parityBlocksPerStripe
decl_stmt|;
block|}
comment|/**    * returns the raid for a given file    */
DECL|method|getFileRaidInfo (final DistributedFileSystem dfs, final Path filePath)
specifier|private
name|RaidInfo
name|getFileRaidInfo
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// now look for the parity file
name|Path
name|destPath
init|=
literal|null
decl_stmt|;
name|RaidNode
operator|.
name|ParityFilePair
name|ppair
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// look for xor parity file first
name|destPath
operator|=
name|RaidNode
operator|.
name|xorDestinationPath
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ppair
operator|=
name|RaidNode
operator|.
name|getParityFile
argument_list|(
name|destPath
argument_list|,
name|filePath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignore
parameter_list|)
block|{     }
if|if
condition|(
name|ppair
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|RaidInfo
argument_list|(
name|RaidType
operator|.
name|XOR
argument_list|,
name|ppair
argument_list|,
literal|1
argument_list|)
return|;
block|}
else|else
block|{
comment|// failing that, look for rs parity file
try|try
block|{
name|destPath
operator|=
name|RaidNode
operator|.
name|rsDestinationPath
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ppair
operator|=
name|RaidNode
operator|.
name|getParityFile
argument_list|(
name|destPath
argument_list|,
name|filePath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignore
parameter_list|)
block|{       }
if|if
condition|(
name|ppair
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|RaidInfo
argument_list|(
name|RaidType
operator|.
name|RS
argument_list|,
name|ppair
argument_list|,
name|RaidNode
operator|.
name|rsParityLength
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RaidInfo
argument_list|(
name|RaidType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * gets the parity blocks corresponding to file    * returns the parity blocks in case of DFS    * and the part blocks containing parity blocks    * in case of HAR FS    */
DECL|method|getParityBlocks (final Path filePath, final long blockSize, final long fileStripes, final RaidInfo raidInfo)
specifier|private
name|BlockLocation
index|[]
name|getParityBlocks
parameter_list|(
specifier|final
name|Path
name|filePath
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|long
name|fileStripes
parameter_list|,
specifier|final
name|RaidInfo
name|raidInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|parityPathStr
init|=
name|raidInfo
operator|.
name|parityPair
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileSystem
name|parityFS
init|=
name|raidInfo
operator|.
name|parityPair
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// get parity file metadata
name|FileStatus
name|parityFileStatus
init|=
name|parityFS
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|parityPathStr
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|parityFileLength
init|=
name|parityFileStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
if|if
condition|(
name|parityFileLength
operator|!=
name|fileStripes
operator|*
name|raidInfo
operator|.
name|parityBlocksPerStripe
operator|*
name|blockSize
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected parity file of length"
operator|+
operator|(
name|fileStripes
operator|*
name|raidInfo
operator|.
name|parityBlocksPerStripe
operator|*
name|blockSize
operator|)
operator|+
literal|" but got parity file of length "
operator|+
name|parityFileLength
argument_list|)
throw|;
block|}
name|BlockLocation
index|[]
name|parityBlocks
init|=
name|parityFS
operator|.
name|getFileBlockLocations
argument_list|(
name|parityFileStatus
argument_list|,
literal|0L
argument_list|,
name|parityFileLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|parityFS
operator|instanceof
name|DistributedFileSystem
operator|||
name|parityFS
operator|instanceof
name|DistributedRaidFileSystem
condition|)
block|{
name|long
name|parityBlockSize
init|=
name|parityFileStatus
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|parityBlockSize
operator|!=
name|blockSize
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"file block size is "
operator|+
name|blockSize
operator|+
literal|" but parity file block size is "
operator|+
name|parityBlockSize
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|parityFS
operator|instanceof
name|HarFileSystem
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HAR FS found"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"parity file system is not of a supported type"
argument_list|)
expr_stmt|;
block|}
return|return
name|parityBlocks
return|;
block|}
comment|/**    * checks the parity blocks for a given file and modifies    * corruptBlocksPerStripe accordingly    */
DECL|method|checkParityBlocks (final Path filePath, final HashMap<Integer, Integer> corruptBlocksPerStripe, final long blockSize, final long fileStripes, final RaidInfo raidInfo)
specifier|private
name|void
name|checkParityBlocks
parameter_list|(
specifier|final
name|Path
name|filePath
parameter_list|,
specifier|final
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|corruptBlocksPerStripe
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|long
name|fileStripes
parameter_list|,
specifier|final
name|RaidInfo
name|raidInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the blocks of the parity file
comment|// because of har, multiple blocks may be returned as one container block
name|BlockLocation
index|[]
name|containerBlocks
init|=
name|getParityBlocks
argument_list|(
name|filePath
argument_list|,
name|blockSize
argument_list|,
name|fileStripes
argument_list|,
name|raidInfo
argument_list|)
decl_stmt|;
name|long
name|parityStripeLength
init|=
name|blockSize
operator|*
operator|(
operator|(
name|long
operator|)
name|raidInfo
operator|.
name|parityBlocksPerStripe
operator|)
decl_stmt|;
name|long
name|parityFileLength
init|=
name|parityStripeLength
operator|*
name|fileStripes
decl_stmt|;
name|long
name|parityBlocksFound
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|BlockLocation
name|cb
range|:
name|containerBlocks
control|)
block|{
if|if
condition|(
name|cb
operator|.
name|getLength
argument_list|()
operator|%
name|blockSize
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"container block size is not "
operator|+
literal|"multiple of parity block size"
argument_list|)
throw|;
block|}
name|int
name|blocksInContainer
init|=
call|(
name|int
call|)
argument_list|(
name|cb
operator|.
name|getLength
argument_list|()
operator|/
name|blockSize
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"found container with offset "
operator|+
name|cb
operator|.
name|getOffset
argument_list|()
operator|+
literal|", length "
operator|+
name|cb
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|offset
init|=
name|cb
operator|.
name|getOffset
argument_list|()
init|;
name|offset
operator|<
name|cb
operator|.
name|getOffset
argument_list|()
operator|+
name|cb
operator|.
name|getLength
argument_list|()
condition|;
name|offset
operator|+=
name|blockSize
control|)
block|{
name|long
name|block
init|=
name|offset
operator|/
name|blockSize
decl_stmt|;
name|int
name|stripe
init|=
call|(
name|int
call|)
argument_list|(
name|offset
operator|/
name|parityStripeLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|stripe
operator|<
literal|0
condition|)
block|{
comment|// before the beginning of the parity file
continue|continue;
block|}
if|if
condition|(
name|stripe
operator|>=
name|fileStripes
condition|)
block|{
comment|// past the end of the parity file
break|break;
block|}
name|parityBlocksFound
operator|++
expr_stmt|;
if|if
condition|(
name|cb
operator|.
name|isCorrupt
argument_list|()
operator|||
operator|(
name|cb
operator|.
name|getNames
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|cb
operator|.
name|getLength
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"parity file for "
operator|+
name|filePath
operator|.
name|toString
argument_list|()
operator|+
literal|" corrupt in block "
operator|+
name|block
operator|+
literal|", stripe "
operator|+
name|stripe
operator|+
literal|"/"
operator|+
name|fileStripes
argument_list|)
expr_stmt|;
if|if
condition|(
name|corruptBlocksPerStripe
operator|.
name|get
argument_list|(
name|stripe
argument_list|)
operator|==
literal|null
condition|)
block|{
name|corruptBlocksPerStripe
operator|.
name|put
argument_list|(
name|stripe
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|corruptBlocksPerStripe
operator|.
name|put
argument_list|(
name|stripe
argument_list|,
name|corruptBlocksPerStripe
operator|.
name|get
argument_list|(
name|stripe
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"parity file for "
operator|+
name|filePath
operator|.
name|toString
argument_list|()
operator|+
literal|" OK in block "
operator|+
name|block
operator|+
literal|", stripe "
operator|+
name|stripe
operator|+
literal|"/"
operator|+
name|fileStripes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|parityBlocksExpected
init|=
name|raidInfo
operator|.
name|parityBlocksPerStripe
operator|*
name|fileStripes
decl_stmt|;
if|if
condition|(
name|parityBlocksFound
operator|!=
name|parityBlocksExpected
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected "
operator|+
name|parityBlocksExpected
operator|+
literal|" parity blocks but got "
operator|+
name|parityBlocksFound
argument_list|)
throw|;
block|}
block|}
comment|/**    * checks the raided file system, prints a list of corrupt files to    * System.out and returns the number of corrupt files    */
DECL|method|fsck (final String path)
specifier|public
name|int
name|fsck
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
operator|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// if we got a raid fs, get the underlying fs
if|if
condition|(
name|fs
operator|instanceof
name|DistributedRaidFileSystem
condition|)
block|{
name|fs
operator|=
operator|(
operator|(
name|DistributedRaidFileSystem
operator|)
name|fs
operator|)
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
comment|// check that we have a distributed fs
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected DistributedFileSystem but got "
operator|+
name|fs
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
comment|// get conf settings
name|String
name|xorPrefix
init|=
name|RaidNode
operator|.
name|xorDestinationPath
argument_list|(
name|conf
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|rsPrefix
init|=
name|RaidNode
operator|.
name|rsDestinationPath
argument_list|(
name|conf
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xorPrefix
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|xorPrefix
operator|=
name|xorPrefix
operator|+
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rsPrefix
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|rsPrefix
operator|=
name|rsPrefix
operator|+
literal|"/"
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"prefixes: "
operator|+
name|xorPrefix
operator|+
literal|", "
operator|+
name|rsPrefix
argument_list|)
expr_stmt|;
comment|// get a list of corrupted files (not considering parity blocks just yet)
comment|// from the name node
comment|// these are the only files we need to consider:
comment|// if a file has no corrupted data blocks, it is OK even if some
comment|// of its parity blocks are corrupted, so no further checking is
comment|// necessary
specifier|final
name|String
index|[]
name|files
init|=
name|RaidDFSUtil
operator|.
name|getCorruptFiles
argument_list|(
name|dfs
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|corruptFileCandidates
init|=
operator|new
name|LinkedList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|f
range|:
name|files
control|)
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|f
argument_list|)
decl_stmt|;
comment|// if this file is a parity file
comment|// or if it does not start with the specified path,
comment|// ignore it
if|if
condition|(
operator|!
name|p
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|xorPrefix
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|rsPrefix
argument_list|)
operator|&&
name|p
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|corruptFileCandidates
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|// filter files marked for deletion
name|RaidUtils
operator|.
name|filterTrash
argument_list|(
name|conf
argument_list|,
name|corruptFileCandidates
argument_list|)
expr_stmt|;
name|int
name|numberOfCorruptFiles
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|corruptFileCandidate
range|:
name|corruptFileCandidates
control|)
block|{
if|if
condition|(
name|isFileCorrupt
argument_list|(
name|dfs
argument_list|,
name|corruptFileCandidate
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|corruptFileCandidate
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|numberOfCorruptFiles
operator|++
expr_stmt|;
block|}
block|}
return|return
name|numberOfCorruptFiles
return|;
block|}
comment|/**    * main() has some simple utility methods    */
DECL|method|main (String argv[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|RaidShell
name|shell
init|=
literal|null
decl_stmt|;
try|try
block|{
name|shell
operator|=
operator|new
name|RaidShell
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RPC
operator|.
name|VersionMismatch
name|v
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Version Mismatch between client and server"
operator|+
literal|"... command aborted."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bad connection to RaidNode or NameNode. command aborted."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

