begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_class
DECL|class|XOREncoder
specifier|public
class|class
name|XOREncoder
extends|extends
name|Encoder
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.XOREncoder"
argument_list|)
decl_stmt|;
DECL|method|XOREncoder ( Configuration conf, int stripeSize)
specifier|public
name|XOREncoder
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|stripeSize
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|stripeSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|encodeStripe ( InputStream[] blocks, long stripeStartOffset, long blockSize, OutputStream[] outs, Progressable reporter)
specifier|protected
name|void
name|encodeStripe
parameter_list|(
name|InputStream
index|[]
name|blocks
parameter_list|,
name|long
name|stripeStartOffset
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|OutputStream
index|[]
name|outs
parameter_list|,
name|Progressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Peforming XOR "
argument_list|)
expr_stmt|;
name|ParityInputStream
name|parityIn
init|=
operator|new
name|ParityInputStream
argument_list|(
name|blocks
argument_list|,
name|blockSize
argument_list|,
name|readBufs
index|[
literal|0
index|]
argument_list|,
name|writeBufs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
try|try
block|{
name|parityIn
operator|.
name|drain
argument_list|(
name|outs
index|[
literal|0
index|]
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|parityIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getParityTempPath ()
specifier|public
name|Path
name|getParityTempPath
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|RaidNode
operator|.
name|unraidTmpDirectory
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

