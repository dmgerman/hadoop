begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyInfo
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link RaidNode} that uses map reduce jobs to raid files.  */
end_comment

begin_class
DECL|class|DistRaidNode
specifier|public
class|class
name|DistRaidNode
extends|extends
name|RaidNode
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DistRaidNode
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Daemon thread to monitor raid job progress */
DECL|field|jobMonitor
name|JobMonitor
name|jobMonitor
init|=
literal|null
decl_stmt|;
DECL|field|jobMonitorThread
name|Daemon
name|jobMonitorThread
init|=
literal|null
decl_stmt|;
DECL|method|DistRaidNode (Configuration conf)
specifier|public
name|DistRaidNode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobMonitor
operator|=
operator|new
name|JobMonitor
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobMonitorThread
operator|=
operator|new
name|Daemon
argument_list|(
name|this
operator|.
name|jobMonitor
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobMonitorThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@inheritDocs}    */
annotation|@
name|Override
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
block|{
name|super
operator|.
name|join
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|jobMonitorThread
operator|!=
literal|null
condition|)
name|jobMonitorThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
comment|/**    * {@inheritDocs}    */
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|stopRequested
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|jobMonitor
operator|!=
literal|null
condition|)
name|jobMonitor
operator|.
name|running
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|jobMonitorThread
operator|!=
literal|null
condition|)
name|jobMonitorThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@inheritDocs}    */
annotation|@
name|Override
DECL|method|raidFiles (PolicyInfo info, List<FileStatus> paths)
name|void
name|raidFiles
parameter_list|(
name|PolicyInfo
name|info
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We already checked that no job for this policy is running
comment|// So we can start a new job.
name|DistRaid
name|dr
init|=
operator|new
name|DistRaid
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//add paths for distributed raiding
name|dr
operator|.
name|addRaidPaths
argument_list|(
name|info
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|boolean
name|started
init|=
name|dr
operator|.
name|startDistRaid
argument_list|()
decl_stmt|;
if|if
condition|(
name|started
condition|)
block|{
name|jobMonitor
operator|.
name|monitorJob
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|,
name|dr
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDocs}    */
annotation|@
name|Override
DECL|method|getRunningJobsForPolicy (String policyName)
name|int
name|getRunningJobsForPolicy
parameter_list|(
name|String
name|policyName
parameter_list|)
block|{
return|return
name|jobMonitor
operator|.
name|runningJobsCount
argument_list|(
name|policyName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

