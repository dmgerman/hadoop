begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyInfo
import|;
end_import

begin_class
DECL|class|RaidFilter
specifier|public
class|class
name|RaidFilter
block|{
DECL|class|Statistics
specifier|static
class|class
name|Statistics
block|{
DECL|field|numRaided
name|long
name|numRaided
init|=
literal|0
decl_stmt|;
DECL|field|numTooNew
name|long
name|numTooNew
init|=
literal|0
decl_stmt|;
DECL|field|sizeTooNew
name|long
name|sizeTooNew
init|=
literal|0
decl_stmt|;
DECL|field|numTooSmall
name|long
name|numTooSmall
init|=
literal|0
decl_stmt|;
DECL|field|sizeTooSmall
name|long
name|sizeTooSmall
init|=
literal|0
decl_stmt|;
DECL|method|aggregate (Statistics other)
specifier|public
name|void
name|aggregate
parameter_list|(
name|Statistics
name|other
parameter_list|)
block|{
name|this
operator|.
name|numRaided
operator|+=
name|other
operator|.
name|numRaided
expr_stmt|;
name|this
operator|.
name|numTooNew
operator|+=
name|other
operator|.
name|numTooNew
expr_stmt|;
name|this
operator|.
name|sizeTooNew
operator|+=
name|other
operator|.
name|sizeTooNew
expr_stmt|;
name|this
operator|.
name|numTooSmall
operator|+=
name|other
operator|.
name|numTooSmall
expr_stmt|;
name|this
operator|.
name|sizeTooSmall
operator|+=
name|other
operator|.
name|sizeTooSmall
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"numRaided = "
operator|+
name|numRaided
operator|+
literal|", numTooNew = "
operator|+
name|numTooNew
operator|+
literal|", sizeTooNew = "
operator|+
name|sizeTooNew
operator|+
literal|", numTooSmall = "
operator|+
name|numTooSmall
operator|+
literal|", sizeTooSmall = "
operator|+
name|sizeTooSmall
return|;
block|}
block|}
DECL|class|TimeBasedFilter
specifier|static
class|class
name|TimeBasedFilter
extends|extends
name|Configured
implements|implements
name|DirectoryTraversal
operator|.
name|FileFilter
block|{
DECL|field|targetRepl
name|int
name|targetRepl
decl_stmt|;
DECL|field|raidDestPrefix
name|Path
name|raidDestPrefix
decl_stmt|;
DECL|field|modTimePeriod
name|long
name|modTimePeriod
decl_stmt|;
DECL|field|startTime
name|long
name|startTime
decl_stmt|;
DECL|field|stats
name|Statistics
name|stats
init|=
operator|new
name|Statistics
argument_list|()
decl_stmt|;
DECL|field|currentSrcPath
name|String
name|currentSrcPath
init|=
literal|null
decl_stmt|;
DECL|field|modTimePeriods
name|long
index|[]
name|modTimePeriods
init|=
operator|new
name|long
index|[
literal|0
index|]
decl_stmt|;
DECL|field|otherSrcPaths
name|String
index|[]
name|otherSrcPaths
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
DECL|method|TimeBasedFilter (Configuration conf, Path destPrefix, int targetRepl, long startTime, long modTimePeriod)
name|TimeBasedFilter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|destPrefix
parameter_list|,
name|int
name|targetRepl
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|modTimePeriod
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|raidDestPrefix
operator|=
name|destPrefix
expr_stmt|;
name|this
operator|.
name|targetRepl
operator|=
name|targetRepl
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|modTimePeriod
operator|=
name|modTimePeriod
expr_stmt|;
block|}
DECL|method|TimeBasedFilter (Configuration conf, Path destPrefix, PolicyInfo info, List<PolicyInfo> allPolicies, long startTime, Statistics stats)
name|TimeBasedFilter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|destPrefix
parameter_list|,
name|PolicyInfo
name|info
parameter_list|,
name|List
argument_list|<
name|PolicyInfo
argument_list|>
name|allPolicies
parameter_list|,
name|long
name|startTime
parameter_list|,
name|Statistics
name|stats
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|raidDestPrefix
operator|=
name|destPrefix
expr_stmt|;
name|this
operator|.
name|targetRepl
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|info
operator|.
name|getProperty
argument_list|(
literal|"targetReplication"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|modTimePeriod
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|info
operator|.
name|getProperty
argument_list|(
literal|"modTimePeriod"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|currentSrcPath
operator|=
name|info
operator|.
name|getSrcPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|initializeOtherPaths
argument_list|(
name|allPolicies
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeOtherPaths (List<PolicyInfo> allPolicies)
specifier|private
name|void
name|initializeOtherPaths
parameter_list|(
name|List
argument_list|<
name|PolicyInfo
argument_list|>
name|allPolicies
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|PolicyInfo
argument_list|>
name|tmp
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyInfo
argument_list|>
argument_list|(
name|allPolicies
argument_list|)
decl_stmt|;
comment|// Remove all policies where srcPath<= currentSrcPath or
comment|// matchingPrefixLength is< length(currentSrcPath)
comment|// The policies remaining are the only ones that could better
comment|// select a file chosen by the current policy.
for|for
control|(
name|Iterator
argument_list|<
name|PolicyInfo
argument_list|>
name|it
init|=
name|tmp
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|src
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSrcPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|compareTo
argument_list|(
name|currentSrcPath
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|int
name|matchLen
init|=
name|matchingPrefixLength
argument_list|(
name|src
argument_list|,
name|currentSrcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchLen
operator|<
name|currentSrcPath
operator|.
name|length
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Sort in reverse lexicographic order.
name|Collections
operator|.
name|sort
argument_list|(
name|tmp
argument_list|,
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
return|return
literal|0
operator|-
operator|(
operator|(
name|PolicyInfo
operator|)
name|o1
operator|)
operator|.
name|getSrcPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|PolicyInfo
operator|)
name|o1
operator|)
operator|.
name|getSrcPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|otherSrcPaths
operator|=
operator|new
name|String
index|[
name|tmp
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|modTimePeriods
operator|=
operator|new
name|long
index|[
name|otherSrcPaths
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|otherSrcPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|otherSrcPaths
index|[
name|i
index|]
operator|=
name|tmp
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSrcPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|modTimePeriods
index|[
name|i
index|]
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|tmp
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"modTimePeriod"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|check (FileStatus f)
specifier|public
name|boolean
name|check
parameter_list|(
name|FileStatus
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|canChooseForCurrentPolicy
argument_list|(
name|f
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// If the source file has fewer than or equal to 2 blocks, then skip it.
name|long
name|blockSize
init|=
name|f
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
if|if
condition|(
literal|2
operator|*
name|blockSize
operator|>=
name|f
operator|.
name|getLen
argument_list|()
condition|)
block|{
name|stats
operator|.
name|numTooSmall
operator|++
expr_stmt|;
name|stats
operator|.
name|sizeTooSmall
operator|+=
name|f
operator|.
name|getLen
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|select
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Object
name|ppair
init|=
name|RaidNode
operator|.
name|getParityFile
argument_list|(
name|raidDestPrefix
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Is there is a valid parity file?
if|if
condition|(
name|ppair
operator|!=
literal|null
condition|)
block|{
comment|// Is the source at the target replication?
if|if
condition|(
name|f
operator|.
name|getReplication
argument_list|()
operator|!=
name|targetRepl
condition|)
block|{
comment|// Select the file so that its replication can be set.
name|select
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|.
name|numRaided
operator|++
expr_stmt|;
comment|// Nothing to do, don't select the file.
name|select
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No parity file.
if|if
condition|(
name|f
operator|.
name|getModificationTime
argument_list|()
operator|+
name|modTimePeriod
operator|<
name|startTime
condition|)
block|{
comment|// If the file is not too new, choose it for raiding.
name|select
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|select
operator|=
literal|false
expr_stmt|;
name|stats
operator|.
name|numTooNew
operator|++
expr_stmt|;
name|stats
operator|.
name|sizeTooNew
operator|+=
name|f
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|select
operator|=
literal|true
expr_stmt|;
comment|// destination file does not exist
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
comment|// If there is a problem with the har path, this will let us continue.
name|DirectoryTraversal
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while selecting "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|select
return|;
block|}
comment|/**      * Checks if a file can be chosen for the current policy.      */
DECL|method|canChooseForCurrentPolicy (FileStatus stat)
name|boolean
name|canChooseForCurrentPolicy
parameter_list|(
name|FileStatus
name|stat
parameter_list|)
block|{
name|boolean
name|choose
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|otherSrcPaths
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|fileStr
init|=
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// For a given string, find the best matching srcPath.
name|int
name|matchWithCurrent
init|=
name|matchingPrefixLength
argument_list|(
name|fileStr
argument_list|,
name|currentSrcPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|otherSrcPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// If the file is too new, move to the next.
if|if
condition|(
name|stat
operator|.
name|getModificationTime
argument_list|()
operator|>
name|startTime
operator|-
name|modTimePeriods
index|[
name|i
index|]
condition|)
block|{
continue|continue;
block|}
name|int
name|matchLen
init|=
name|matchingPrefixLength
argument_list|(
name|fileStr
argument_list|,
name|otherSrcPaths
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchLen
operator|>
literal|0
operator|&&
name|fileStr
operator|.
name|charAt
argument_list|(
name|matchLen
operator|-
literal|1
argument_list|)
operator|==
name|Path
operator|.
name|SEPARATOR_CHAR
condition|)
block|{
name|matchLen
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|matchLen
operator|>
name|matchWithCurrent
condition|)
block|{
name|choose
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|choose
return|;
block|}
DECL|method|matchingPrefixLength (final String s1, final String s2)
name|int
name|matchingPrefixLength
parameter_list|(
specifier|final
name|String
name|s1
parameter_list|,
specifier|final
name|String
name|s2
parameter_list|)
block|{
name|int
name|len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|s1
operator|.
name|length
argument_list|()
operator|&&
name|j
operator|<
name|s2
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|s1
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
name|s2
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
condition|)
block|{
name|len
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|len
return|;
block|}
block|}
DECL|class|PreferenceFilter
specifier|static
class|class
name|PreferenceFilter
extends|extends
name|Configured
implements|implements
name|DirectoryTraversal
operator|.
name|FileFilter
block|{
DECL|field|firstChoicePrefix
name|Path
name|firstChoicePrefix
decl_stmt|;
DECL|field|secondChoiceFilter
name|DirectoryTraversal
operator|.
name|FileFilter
name|secondChoiceFilter
decl_stmt|;
DECL|method|PreferenceFilter (Configuration conf, Path firstChoicePrefix, Path secondChoicePrefix, int targetRepl, long startTime, long modTimePeriod)
name|PreferenceFilter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|firstChoicePrefix
parameter_list|,
name|Path
name|secondChoicePrefix
parameter_list|,
name|int
name|targetRepl
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|modTimePeriod
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|firstChoicePrefix
operator|=
name|firstChoicePrefix
expr_stmt|;
name|this
operator|.
name|secondChoiceFilter
operator|=
operator|new
name|TimeBasedFilter
argument_list|(
name|conf
argument_list|,
name|secondChoicePrefix
argument_list|,
name|targetRepl
argument_list|,
name|startTime
argument_list|,
name|modTimePeriod
argument_list|)
expr_stmt|;
block|}
DECL|method|PreferenceFilter (Configuration conf, Path firstChoicePrefix, Path secondChoicePrefix, PolicyInfo info, List<PolicyInfo> allPolicies, long startTime, Statistics stats)
name|PreferenceFilter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|firstChoicePrefix
parameter_list|,
name|Path
name|secondChoicePrefix
parameter_list|,
name|PolicyInfo
name|info
parameter_list|,
name|List
argument_list|<
name|PolicyInfo
argument_list|>
name|allPolicies
parameter_list|,
name|long
name|startTime
parameter_list|,
name|Statistics
name|stats
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|firstChoicePrefix
operator|=
name|firstChoicePrefix
expr_stmt|;
name|this
operator|.
name|secondChoiceFilter
operator|=
operator|new
name|TimeBasedFilter
argument_list|(
name|conf
argument_list|,
name|secondChoicePrefix
argument_list|,
name|info
argument_list|,
name|allPolicies
argument_list|,
name|startTime
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
DECL|method|check (FileStatus f)
specifier|public
name|boolean
name|check
parameter_list|(
name|FileStatus
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|firstChoicePPair
init|=
name|RaidNode
operator|.
name|getParityFile
argument_list|(
name|firstChoicePrefix
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstChoicePPair
operator|==
literal|null
condition|)
block|{
comment|// The decision is upto the the second choice filter.
return|return
name|secondChoiceFilter
operator|.
name|check
argument_list|(
name|f
argument_list|)
return|;
block|}
else|else
block|{
comment|// There is already a parity file under the first choice path.
comment|// We dont want to choose this file.
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

