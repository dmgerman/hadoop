begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A {@link TaskSelector} implementation that wraps around the default  * {@link JobInProgress#obtainNewMapTask(TaskTrackerStatus, int)} and  * {@link JobInProgress#obtainNewReduceTask(TaskTrackerStatus, int)} methods  * in {@link JobInProgress}, using the default Hadoop locality and speculative  * threshold algorithms.  */
end_comment

begin_class
DECL|class|DefaultTaskSelector
specifier|public
class|class
name|DefaultTaskSelector
extends|extends
name|TaskSelector
block|{
annotation|@
name|Override
DECL|method|neededSpeculativeMaps (JobInProgress job)
specifier|public
name|int
name|neededSpeculativeMaps
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskInProgress
name|tip
range|:
name|job
operator|.
name|maps
control|)
block|{
if|if
condition|(
name|tip
operator|.
name|isRunning
argument_list|()
operator|&&
name|tip
operator|.
name|canBeSpeculated
argument_list|(
name|time
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|neededSpeculativeReduces (JobInProgress job)
specifier|public
name|int
name|neededSpeculativeReduces
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|double
name|avgProgress
init|=
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|reduceProgress
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskInProgress
name|tip
range|:
name|job
operator|.
name|reduces
control|)
block|{
if|if
condition|(
name|tip
operator|.
name|isRunning
argument_list|()
operator|&&
name|tip
operator|.
name|canBeSpeculated
argument_list|(
name|time
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|obtainNewMapTask (TaskTrackerStatus taskTracker, JobInProgress job, int localityLevel)
specifier|public
name|Task
name|obtainNewMapTask
parameter_list|(
name|TaskTrackerStatus
name|taskTracker
parameter_list|,
name|JobInProgress
name|job
parameter_list|,
name|int
name|localityLevel
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterStatus
name|clusterStatus
init|=
name|taskTrackerManager
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|int
name|numTaskTrackers
init|=
name|clusterStatus
operator|.
name|getTaskTrackers
argument_list|()
decl_stmt|;
return|return
name|job
operator|.
name|obtainNewMapTask
argument_list|(
name|taskTracker
argument_list|,
name|numTaskTrackers
argument_list|,
name|taskTrackerManager
operator|.
name|getNumberOfUniqueHosts
argument_list|()
argument_list|,
name|localityLevel
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|obtainNewReduceTask (TaskTrackerStatus taskTracker, JobInProgress job)
specifier|public
name|Task
name|obtainNewReduceTask
parameter_list|(
name|TaskTrackerStatus
name|taskTracker
parameter_list|,
name|JobInProgress
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterStatus
name|clusterStatus
init|=
name|taskTrackerManager
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|int
name|numTaskTrackers
init|=
name|clusterStatus
operator|.
name|getTaskTrackers
argument_list|()
decl_stmt|;
return|return
name|job
operator|.
name|obtainNewReduceTask
argument_list|(
name|taskTracker
argument_list|,
name|numTaskTrackers
argument_list|,
name|taskTrackerManager
operator|.
name|getNumberOfUniqueHosts
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

