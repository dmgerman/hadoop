begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FairScheduler
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Servlet for displaying fair scheduler information, installed at  * [job tracker URL]/scheduler when the {@link FairScheduler} is in use.  *   * The main features are viewing each job's task count and fair share,  * and admin controls to change job priorities and pools from the UI.  *   * There is also an "advanced" view for debugging that can be turned on by  * going to [job tracker URL]/scheduler?advanced.  */
end_comment

begin_class
DECL|class|FairSchedulerServlet
specifier|public
class|class
name|FairSchedulerServlet
extends|extends
name|HttpServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|9104070533067306659L
decl_stmt|;
DECL|field|DATE_FORMAT
specifier|private
specifier|static
specifier|final
name|DateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM dd, HH:mm"
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|private
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|jobTracker
specifier|private
name|JobTracker
name|jobTracker
decl_stmt|;
DECL|field|lastId
specifier|private
specifier|static
name|long
name|lastId
init|=
literal|0
decl_stmt|;
comment|// Used to generate unique element IDs
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|ServletContext
name|servletContext
init|=
name|this
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
name|this
operator|.
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|servletContext
operator|.
name|getAttribute
argument_list|(
literal|"scheduler"
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobTracker
operator|=
operator|(
name|JobTracker
operator|)
name|scheduler
operator|.
name|taskTrackerManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPost (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|doGet
argument_list|(
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
comment|// Same handler for both GET and POST
block|}
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
comment|// If the request has a set* param, handle that and redirect to the regular
comment|// view page so that the user won't resubmit the data if they hit refresh.
name|boolean
name|advancedView
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"advanced"
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|JSPUtil
operator|.
name|privateActionsAllowed
argument_list|(
name|jobTracker
operator|.
name|conf
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"setPool"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|runningJobs
init|=
name|getInitedJobs
argument_list|()
decl_stmt|;
name|PoolManager
name|poolMgr
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|scheduler
init|)
block|{
name|poolMgr
operator|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
expr_stmt|;
block|}
name|String
name|pool
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"setPool"
argument_list|)
decl_stmt|;
name|String
name|jobId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"jobid"
argument_list|)
decl_stmt|;
for|for
control|(
name|JobInProgress
name|job
range|:
name|runningJobs
control|)
block|{
if|if
condition|(
name|job
operator|.
name|getProfile
argument_list|()
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|scheduler
init|)
block|{
name|poolMgr
operator|.
name|setPool
argument_list|(
name|job
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|response
operator|.
name|sendRedirect
argument_list|(
literal|"/scheduler"
operator|+
operator|(
name|advancedView
condition|?
literal|"?advanced"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|JSPUtil
operator|.
name|privateActionsAllowed
argument_list|(
name|jobTracker
operator|.
name|conf
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"setPriority"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|runningJobs
init|=
name|getInitedJobs
argument_list|()
decl_stmt|;
name|JobPriority
name|priority
init|=
name|JobPriority
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"setPriority"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|jobId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"jobid"
argument_list|)
decl_stmt|;
for|for
control|(
name|JobInProgress
name|job
range|:
name|runningJobs
control|)
block|{
if|if
condition|(
name|job
operator|.
name|getProfile
argument_list|()
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
name|job
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|response
operator|.
name|sendRedirect
argument_list|(
literal|"/scheduler"
operator|+
operator|(
name|advancedView
condition|?
literal|"?advanced"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Print out the normal response
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
comment|// Because the client may read arbitrarily slow, and we hold locks while
comment|// the servlet outputs, we want to write to our own buffer which we know
comment|// won't block.
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|StringUtils
operator|.
name|simpleHostname
argument_list|(
name|jobTracker
operator|.
name|getJobTrackerMachine
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<html><head>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<title>%s Fair Scheduler Administration</title>\n"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<link rel=\"stylesheet\" type=\"text/css\" "
operator|+
literal|"href=\"/static/hadoop.css\">\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</head><body>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<h1><a href=\"/jobtracker.jsp\">%s</a> "
operator|+
literal|"Fair Scheduler Administration</h1>\n"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|showPools
argument_list|(
name|out
argument_list|,
name|advancedView
argument_list|)
expr_stmt|;
name|showJobs
argument_list|(
name|out
argument_list|,
name|advancedView
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</body></html>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Flush our buffer to the real servlet output
name|OutputStream
name|servletOut
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|baos
operator|.
name|writeTo
argument_list|(
name|servletOut
argument_list|)
expr_stmt|;
name|servletOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Print a view of pools to the given output writer.    */
DECL|method|showPools (PrintWriter out, boolean advancedView)
specifier|private
name|void
name|showPools
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|boolean
name|advancedView
parameter_list|)
block|{
synchronized|synchronized
init|(
name|scheduler
init|)
block|{
name|boolean
name|warnInverted
init|=
literal|false
decl_stmt|;
name|PoolManager
name|poolManager
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<h2>Pools</h2>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<table border=\"2\" cellpadding=\"5\" cellspacing=\"2\">\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<tr><th rowspan=2>Pool</th>"
operator|+
literal|"<th rowspan=2>Running Jobs</th>"
operator|+
literal|"<th colspan=4>Map Tasks</th>"
operator|+
literal|"<th colspan=4>Reduce Tasks</th>"
operator|+
literal|"<th rowspan=2>Scheduling Mode</th></tr>\n<tr>"
operator|+
literal|"<th>Min Share</th><th>Max Share</th><th>Running</th><th>Fair Share</th>"
operator|+
literal|"<th>Min Share</th><th>Max Share</th><th>Running</th><th>Fair Share</th></tr>\n"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pool
argument_list|>
name|pools
init|=
operator|new
name|ArrayList
argument_list|<
name|Pool
argument_list|>
argument_list|(
name|poolManager
operator|.
name|getPools
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|pools
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Pool
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Pool
name|p1
parameter_list|,
name|Pool
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|.
name|isDefaultPool
argument_list|()
condition|)
return|return
literal|1
return|;
elseif|else
if|if
condition|(
name|p2
operator|.
name|isDefaultPool
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
else|else
return|return
name|p1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|p2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Pool
name|pool
range|:
name|pools
control|)
block|{
name|String
name|name
init|=
name|pool
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|runningMaps
init|=
name|pool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getRunningTasks
argument_list|()
decl_stmt|;
name|int
name|runningReduces
init|=
name|pool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getRunningTasks
argument_list|()
decl_stmt|;
name|int
name|maxMaps
init|=
name|poolManager
operator|.
name|getMaxSlots
argument_list|(
name|name
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|int
name|maxReduces
init|=
name|poolManager
operator|.
name|getMaxSlots
argument_list|(
name|name
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
name|boolean
name|invertedMaps
init|=
name|poolManager
operator|.
name|invertedMinMax
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|boolean
name|invertedReduces
init|=
name|poolManager
operator|.
name|invertedMinMax
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|warnInverted
operator|=
name|warnInverted
operator|||
name|invertedMaps
operator|||
name|invertedReduces
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%s</td>"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%d</td>"
argument_list|,
name|pool
operator|.
name|getJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Map Tasks
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%d</td>"
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
name|name
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<td>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxMaps
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
name|maxMaps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|invertedMaps
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%d</td>"
argument_list|,
name|runningMaps
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%.1f</td>"
argument_list|,
name|pool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reduce Tasks
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%d</td>"
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
name|name
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<td>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxReduces
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
name|maxReduces
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|invertedReduces
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%d</td>"
argument_list|,
name|runningReduces
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%.1f</td>"
argument_list|,
name|pool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%s</td>"
argument_list|,
name|pool
operator|.
name|getSchedulingMode
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</tr>\n"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</table>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|warnInverted
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<p>* One or more pools have max share set lower than min share. Max share will be used and minimum will be treated as if set equal to max.</p>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Print a view of running jobs to the given output writer.    */
DECL|method|showJobs (PrintWriter out, boolean advancedView)
specifier|private
name|void
name|showJobs
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|boolean
name|advancedView
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<h2>Running Jobs</h2>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<table border=\"2\" cellpadding=\"5\" cellspacing=\"2\">\n"
argument_list|)
expr_stmt|;
name|int
name|colsPerTaskType
init|=
name|advancedView
condition|?
literal|4
else|:
literal|3
decl_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<tr><th rowspan=2>Submitted</th>"
operator|+
literal|"<th rowspan=2>JobID</th>"
operator|+
literal|"<th rowspan=2>User</th>"
operator|+
literal|"<th rowspan=2>Name</th>"
operator|+
literal|"<th rowspan=2>Pool</th>"
operator|+
literal|"<th rowspan=2>Priority</th>"
operator|+
literal|"<th colspan=%d>Map Tasks</th>"
operator|+
literal|"<th colspan=%d>Reduce Tasks</th>"
argument_list|,
name|colsPerTaskType
argument_list|,
name|colsPerTaskType
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</tr><tr>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<th>Finished</th><th>Running</th><th>Fair Share</th>"
operator|+
operator|(
name|advancedView
condition|?
literal|"<th>Weight</th>"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<th>Finished</th><th>Running</th><th>Fair Share</th>"
operator|+
operator|(
name|advancedView
condition|?
literal|"<th>Weight</th>"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</tr>\n"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|jobTracker
init|)
block|{
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|runningJobs
init|=
name|getInitedJobs
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|scheduler
init|)
block|{
for|for
control|(
name|JobInProgress
name|job
range|:
name|runningJobs
control|)
block|{
name|JobProfile
name|profile
init|=
name|job
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|JobInfo
name|info
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
comment|// Job finished, but let's show 0's for info
name|info
operator|=
operator|new
name|JobInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"<tr>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%s</td>\n"
argument_list|,
name|DATE_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|job
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td><a href=\"jobdetails.jsp?jobid=%s\">%s</a></td>"
argument_list|,
name|profile
operator|.
name|getJobID
argument_list|()
argument_list|,
name|profile
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%s</td>\n"
argument_list|,
name|profile
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%s</td>\n"
argument_list|,
name|profile
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|JSPUtil
operator|.
name|privateActionsAllowed
argument_list|(
name|jobTracker
operator|.
name|conf
argument_list|)
condition|)
block|{
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%s</td>\n"
argument_list|,
name|generateSelect
argument_list|(
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPoolNames
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPoolName
argument_list|(
name|job
argument_list|)
argument_list|,
literal|"/scheduler?setPool=<CHOICE>&jobid="
operator|+
name|profile
operator|.
name|getJobID
argument_list|()
operator|+
operator|(
name|advancedView
condition|?
literal|"&advanced"
else|:
literal|""
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%s</td>\n"
argument_list|,
name|generateSelect
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"VERY_LOW"
block|,
literal|"LOW"
block|,
literal|"NORMAL"
block|,
literal|"HIGH"
block|,
literal|"VERY_HIGH"
block|}
argument_list|)
argument_list|,
name|job
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/scheduler?setPriority=<CHOICE>&jobid="
operator|+
name|profile
operator|.
name|getJobID
argument_list|()
operator|+
operator|(
name|advancedView
condition|?
literal|"&advanced"
else|:
literal|""
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%s</td>\n"
argument_list|,
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPoolName
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%s</td>\n"
argument_list|,
name|job
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Pool
name|pool
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|String
name|mapShare
init|=
operator|(
name|pool
operator|.
name|getSchedulingMode
argument_list|()
operator|==
name|SchedulingMode
operator|.
name|FAIR
operator|)
condition|?
name|String
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
name|info
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
else|:
literal|"NA"
decl_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%d / %d</td><td>%d</td><td>%s</td>\n"
argument_list|,
name|job
operator|.
name|finishedMaps
argument_list|()
argument_list|,
name|job
operator|.
name|desiredMaps
argument_list|()
argument_list|,
name|info
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|,
name|mapShare
argument_list|)
expr_stmt|;
if|if
condition|(
name|advancedView
condition|)
block|{
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%.1f</td>\n"
argument_list|,
name|info
operator|.
name|mapSchedulable
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|reduceShare
init|=
operator|(
name|pool
operator|.
name|getSchedulingMode
argument_list|()
operator|==
name|SchedulingMode
operator|.
name|FAIR
operator|)
condition|?
name|String
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
name|info
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
else|:
literal|"NA"
decl_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%d / %d</td><td>%d</td><td>%s</td>\n"
argument_list|,
name|job
operator|.
name|finishedReduces
argument_list|()
argument_list|,
name|job
operator|.
name|desiredReduces
argument_list|()
argument_list|,
name|info
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|,
name|reduceShare
argument_list|)
expr_stmt|;
if|if
condition|(
name|advancedView
condition|)
block|{
name|out
operator|.
name|printf
argument_list|(
literal|"<td>%.1f</td>\n"
argument_list|,
name|info
operator|.
name|reduceSchedulable
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</tr>\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</table>\n"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generate a HTML select control with a given list of choices and a given    * option selected. When the selection is changed, take the user to the    *<code>submitUrl</code>. The<code>submitUrl</code> can be made to include    * the option selected -- the first occurrence of the substring    *<code>&lt;CHOICE&gt;</code> will be replaced by the option chosen.    */
DECL|method|generateSelect (Iterable<String> choices, String selectedChoice, String submitUrl)
specifier|private
name|String
name|generateSelect
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|choices
parameter_list|,
name|String
name|selectedChoice
parameter_list|,
name|String
name|submitUrl
parameter_list|)
block|{
name|StringBuilder
name|html
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|id
init|=
literal|"select"
operator|+
name|lastId
operator|++
decl_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"<select id=\""
operator|+
name|id
operator|+
literal|"\" name=\""
operator|+
name|id
operator|+
literal|"\" "
operator|+
literal|"onchange=\"window.location = '"
operator|+
name|submitUrl
operator|+
literal|"'.replace('<CHOICE>', document.getElementById('"
operator|+
name|id
operator|+
literal|"').value);\">\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|choice
range|:
name|choices
control|)
block|{
name|html
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<option value=\"%s\"%s>%s</option>\n"
argument_list|,
name|choice
argument_list|,
operator|(
name|choice
operator|.
name|equals
argument_list|(
name|selectedChoice
argument_list|)
condition|?
literal|" selected"
else|:
literal|""
operator|)
argument_list|,
name|choice
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|html
operator|.
name|append
argument_list|(
literal|"</select>\n"
argument_list|)
expr_stmt|;
return|return
name|html
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Obtained all initialized jobs    */
DECL|method|getInitedJobs ()
specifier|private
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|getInitedJobs
parameter_list|()
block|{
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|runningJobs
init|=
name|jobTracker
operator|.
name|getRunningJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JobInProgress
argument_list|>
name|it
init|=
name|runningJobs
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JobInProgress
name|job
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|job
operator|.
name|inited
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|runningJobs
return|;
block|}
block|}
end_class

end_unit

