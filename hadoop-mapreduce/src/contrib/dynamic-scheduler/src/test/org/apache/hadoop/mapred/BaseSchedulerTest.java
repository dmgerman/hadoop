begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Base class for various scheduler tests  */
end_comment

begin_class
DECL|class|BaseSchedulerTest
specifier|public
class|class
name|BaseSchedulerTest
extends|extends
name|TestCase
block|{
DECL|field|QUEUES
specifier|final
specifier|static
name|String
index|[]
name|QUEUES
init|=
operator|new
name|String
index|[]
block|{
literal|"queue1"
block|,
literal|"queue2"
block|}
decl_stmt|;
DECL|field|timer
specifier|protected
name|FakeDynamicTimer
name|timer
init|=
operator|new
name|FakeDynamicTimer
argument_list|()
decl_stmt|;
DECL|field|taskTracker
specifier|protected
name|FakeTaskTrackerManager
name|taskTracker
init|=
operator|new
name|FakeTaskTrackerManager
argument_list|()
decl_stmt|;
DECL|field|budgetFile
specifier|protected
name|String
name|budgetFile
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Create the test budget file    * @throws Exception    */
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|pathname
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/contrib/dynamic-scheduler/test/data"
argument_list|)
decl_stmt|;
name|String
name|testDir
init|=
operator|new
name|File
argument_list|(
name|pathname
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|budgetFile
operator|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"test-budget"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|testDir
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|budgetFile
argument_list|)
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PrioritySchedulerOptions
operator|.
name|DYNAMIC_SCHEDULER_ALLOC_INTERVAL
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PrioritySchedulerOptions
operator|.
name|DYNAMIC_SCHEDULER_BUDGET_FILE
argument_list|,
name|budgetFile
argument_list|)
expr_stmt|;
block|}
comment|/**     * deletes the test budget file     * @throws Exception     */
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|budgetFile
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|class|FakeTaskTrackerManager
specifier|static
class|class
name|FakeTaskTrackerManager
implements|implements
name|TaskTrackerManager
block|{
DECL|field|qm
name|FakeQueueManager
name|qm
init|=
operator|new
name|FakeQueueManager
argument_list|()
decl_stmt|;
DECL|method|FakeTaskTrackerManager ()
specifier|public
name|FakeTaskTrackerManager
parameter_list|()
block|{     }
DECL|method|addTaskTracker (String ttName)
specifier|public
name|void
name|addTaskTracker
parameter_list|(
name|String
name|ttName
parameter_list|)
block|{     }
DECL|method|getClusterStatus ()
specifier|public
name|ClusterStatus
name|getClusterStatus
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getNumberOfUniqueHosts ()
specifier|public
name|int
name|getNumberOfUniqueHosts
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|getNextHeartbeatInterval ()
specifier|public
name|int
name|getNextHeartbeatInterval
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|taskTrackers ()
specifier|public
name|Collection
argument_list|<
name|TaskTrackerStatus
argument_list|>
name|taskTrackers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|addJobInProgressListener (JobInProgressListener listener)
specifier|public
name|void
name|addJobInProgressListener
parameter_list|(
name|JobInProgressListener
name|listener
parameter_list|)
block|{     }
DECL|method|removeJobInProgressListener (JobInProgressListener listener)
specifier|public
name|void
name|removeJobInProgressListener
parameter_list|(
name|JobInProgressListener
name|listener
parameter_list|)
block|{     }
DECL|method|submitJob (JobInProgress job)
specifier|public
name|void
name|submitJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{     }
DECL|method|getTaskTracker (String trackerID)
specifier|public
name|TaskTrackerStatus
name|getTaskTracker
parameter_list|(
name|String
name|trackerID
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|killJob (JobID jobid)
specifier|public
name|void
name|killJob
parameter_list|(
name|JobID
name|jobid
parameter_list|)
throws|throws
name|IOException
block|{     }
DECL|method|getJob (JobID jobid)
specifier|public
name|JobInProgress
name|getJob
parameter_list|(
name|JobID
name|jobid
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|initJob (JobInProgress job)
specifier|public
name|void
name|initJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{     }
DECL|method|failJob (JobInProgress job)
specifier|public
name|void
name|failJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{     }
DECL|method|startTask (String taskTrackerName, final Task t)
specifier|public
name|void
name|startTask
parameter_list|(
name|String
name|taskTrackerName
parameter_list|,
specifier|final
name|Task
name|t
parameter_list|)
block|{     }
DECL|method|killTask (TaskAttemptID attemptId, boolean shouldFail)
specifier|public
name|boolean
name|killTask
parameter_list|(
name|TaskAttemptID
name|attemptId
parameter_list|,
name|boolean
name|shouldFail
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|method|addQueues (String[] arr)
name|void
name|addQueues
parameter_list|(
name|String
index|[]
name|arr
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|queues
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|arr
argument_list|)
argument_list|)
expr_stmt|;
name|qm
operator|.
name|setQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
block|}
DECL|method|getQueueManager ()
specifier|public
name|QueueManager
name|getQueueManager
parameter_list|()
block|{
return|return
name|qm
return|;
block|}
block|}
DECL|class|FakeDynamicTimer
specifier|static
class|class
name|FakeDynamicTimer
extends|extends
name|Timer
block|{
DECL|field|task
specifier|private
name|TimerTask
name|task
decl_stmt|;
DECL|method|scheduleAtFixedRate (TimerTask task, long delay, long period)
specifier|public
name|void
name|scheduleAtFixedRate
parameter_list|(
name|TimerTask
name|task
parameter_list|,
name|long
name|delay
parameter_list|,
name|long
name|period
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
DECL|method|runTask ()
specifier|public
name|void
name|runTask
parameter_list|()
block|{
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|FakeQueueManager
specifier|static
class|class
name|FakeQueueManager
extends|extends
name|QueueManager
block|{
DECL|field|queues
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|queues
init|=
literal|null
decl_stmt|;
DECL|method|FakeQueueManager ()
name|FakeQueueManager
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setQueues (Set<String> queues)
name|void
name|setQueues
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queues
parameter_list|)
block|{
name|this
operator|.
name|queues
operator|=
name|queues
expr_stmt|;
block|}
DECL|method|getLeafQueueNames ()
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|getLeafQueueNames
parameter_list|()
block|{
return|return
name|queues
return|;
block|}
block|}
block|}
end_class

end_unit

