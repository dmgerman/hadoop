begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Servlet for controlling queue allocations, installed at  * [job tracker URL]/scheduler when the {@link DynamicPriorityScheduler}   * is in use.  * operations supported:<br>  * price<br>  * time<br>  * info=queue_to_query (requires user or admin privilege><br>  * infos (requires admin privilege)<br>   * addBudget=budget_to_add,queue=queue_to_change   * (requires admin privilege)<br>  * setSpending=spending_to_set,queue=queue_to_change   * (requires user or admin privilege)<br>  * addQueue=queue_to_add (requires admin privilege)<br>  * removeQueue=queue_to_remove (requires admin privilege)<br>  */
end_comment

begin_class
DECL|class|DynamicPriorityServlet
specifier|public
class|class
name|DynamicPriorityServlet
extends|extends
name|HttpServlet
block|{
DECL|field|scheduler
specifier|private
name|DynamicPriorityScheduler
name|scheduler
decl_stmt|;
DECL|field|jobTracker
specifier|private
name|JobTracker
name|jobTracker
decl_stmt|;
DECL|field|auth
specifier|private
name|PriorityAuthorization
name|auth
decl_stmt|;
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|ServletContext
name|servletContext
init|=
name|getServletContext
argument_list|()
decl_stmt|;
name|scheduler
operator|=
operator|(
name|DynamicPriorityScheduler
operator|)
name|servletContext
operator|.
name|getAttribute
argument_list|(
literal|"scheduler"
argument_list|)
expr_stmt|;
name|jobTracker
operator|=
operator|(
name|JobTracker
operator|)
name|scheduler
operator|.
name|taskTrackerManager
expr_stmt|;
name|auth
operator|=
operator|new
name|PriorityAuthorization
argument_list|()
expr_stmt|;
name|auth
operator|.
name|init
argument_list|(
name|scheduler
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPost (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|doGet
argument_list|(
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
comment|// Same handler for both GET and POST
block|}
DECL|method|checkAdmin (int role, String query)
specifier|private
name|void
name|checkAdmin
parameter_list|(
name|int
name|role
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|role
operator|!=
name|PriorityAuthorization
operator|.
name|ADMIN
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ACCESS DENIED: "
operator|+
name|query
argument_list|)
throw|;
block|}
block|}
DECL|method|checkUser (int role, HttpServletRequest request, String queue, String query)
specifier|private
name|void
name|checkUser
parameter_list|(
name|int
name|role
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|role
operator|==
name|PriorityAuthorization
operator|.
name|ADMIN
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|role
operator|==
name|PriorityAuthorization
operator|.
name|USER
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"user"
argument_list|)
operator|.
name|equals
argument_list|(
name|queue
argument_list|)
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ACCESS DENIED: "
operator|+
name|query
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|String
name|query
init|=
name|request
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
name|int
name|role
init|=
name|auth
operator|.
name|authorize
argument_list|(
name|query
argument_list|,
name|request
operator|.
name|getHeader
argument_list|(
literal|"Authorization"
argument_list|)
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"timestamp"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|queue
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"queue"
argument_list|)
decl_stmt|;
name|String
name|info
init|=
literal|""
decl_stmt|;
comment|// admin
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"addQueue"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|checkAdmin
argument_list|(
name|role
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|queue
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"addQueue"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocations
operator|.
name|addQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|info
operator|=
name|scheduler
operator|.
name|allocations
operator|.
name|getInfo
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
comment|// admin
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"removeQueue"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|checkAdmin
argument_list|(
name|role
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|queue
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"removeQueue"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocations
operator|.
name|removeQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|info
operator|=
name|scheduler
operator|.
name|allocations
operator|.
name|getInfo
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
comment|// admin
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"addBudget"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|checkAdmin
argument_list|(
name|role
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|float
name|budget
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"addBudget"
argument_list|)
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|allocations
operator|.
name|addBudget
argument_list|(
name|queue
argument_list|,
name|budget
argument_list|)
expr_stmt|;
name|info
operator|=
name|scheduler
operator|.
name|allocations
operator|.
name|getInfo
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
comment|// user
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"setSpending"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|checkUser
argument_list|(
name|role
argument_list|,
name|request
argument_list|,
name|queue
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|float
name|spending
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"setSpending"
argument_list|)
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|allocations
operator|.
name|setSpending
argument_list|(
name|queue
argument_list|,
name|spending
argument_list|)
expr_stmt|;
name|info
operator|=
name|scheduler
operator|.
name|allocations
operator|.
name|getInfo
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
comment|// user
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"info"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|queue
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"info"
argument_list|)
expr_stmt|;
name|checkUser
argument_list|(
name|role
argument_list|,
name|request
argument_list|,
name|queue
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|info
operator|=
name|scheduler
operator|.
name|allocations
operator|.
name|getQueueInfo
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
comment|// admin
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"infos"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|checkAdmin
argument_list|(
name|role
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|info
operator|=
name|scheduler
operator|.
name|allocations
operator|.
name|getQueueInfos
argument_list|()
expr_stmt|;
block|}
comment|// all
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"price"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|Float
operator|.
name|toString
argument_list|(
name|scheduler
operator|.
name|allocations
operator|.
name|getPrice
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
literal|"<price>"
operator|+
name|info
operator|+
literal|"</price>\n"
expr_stmt|;
block|}
comment|// all
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"time"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
literal|"<start>"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|PriorityAuthorization
operator|.
name|START_TIME
argument_list|)
operator|+
literal|"</start>\n"
expr_stmt|;
name|info
operator|+=
literal|"<time>"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|+
literal|"</time>\n"
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
literal|""
expr_stmt|;
block|}
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|StringUtils
operator|.
name|simpleHostname
argument_list|(
name|jobTracker
operator|.
name|getJobTrackerMachine
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<QueueInfo>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"<host>%s</host>\n"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%s"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</QueueInfo>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

