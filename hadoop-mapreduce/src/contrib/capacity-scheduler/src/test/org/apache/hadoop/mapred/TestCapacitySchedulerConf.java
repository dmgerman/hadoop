begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_class
DECL|class|TestCapacitySchedulerConf
specifier|public
class|class
name|TestCapacitySchedulerConf
extends|extends
name|TestCase
block|{
DECL|field|testDataDir
specifier|private
specifier|static
name|String
name|testDataDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
decl_stmt|;
DECL|field|testConfFile
specifier|private
specifier|static
name|String
name|testConfFile
decl_stmt|;
comment|//private Map<String, String> defaultProperties;
DECL|field|testConf
specifier|private
name|CapacitySchedulerConf
name|testConf
decl_stmt|;
DECL|field|writer
specifier|private
name|PrintWriter
name|writer
decl_stmt|;
static|static
block|{
if|if
condition|(
name|testDataDir
operator|==
literal|null
condition|)
block|{
name|testDataDir
operator|=
literal|"."
expr_stmt|;
block|}
else|else
block|{
operator|new
name|File
argument_list|(
name|testDataDir
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|testConfFile
operator|=
operator|new
name|File
argument_list|(
name|testDataDir
argument_list|,
literal|"test-conf.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
DECL|method|TestCapacitySchedulerConf ()
specifier|public
name|TestCapacitySchedulerConf
parameter_list|()
block|{   }
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|openFile
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|confFile
init|=
operator|new
name|File
argument_list|(
name|testConfFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|confFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|confFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testInitializationPollerProperties ()
specifier|public
name|void
name|testInitializationPollerProperties
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * Test case to check properties of poller when no configuration file      * is present.      */
name|testConf
operator|=
operator|new
name|CapacitySchedulerConf
argument_list|()
expr_stmt|;
name|long
name|pollingInterval
init|=
name|testConf
operator|.
name|getSleepInterval
argument_list|()
decl_stmt|;
name|int
name|maxWorker
init|=
name|testConf
operator|.
name|getMaxWorkerThreads
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid polling interval "
argument_list|,
name|pollingInterval
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid working thread pool size"
argument_list|,
name|maxWorker
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|//test case for custom values configured for initialization
comment|//poller.
name|openFile
argument_list|()
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|writeProperty
argument_list|(
literal|"mapred.capacity-scheduler.init-worker-threads"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|writeProperty
argument_list|(
literal|"mapred.capacity-scheduler.init-poll-interval"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|testConf
operator|=
operator|new
name|CapacitySchedulerConf
argument_list|(
operator|new
name|Path
argument_list|(
name|testConfFile
argument_list|)
argument_list|)
expr_stmt|;
name|pollingInterval
operator|=
name|testConf
operator|.
name|getSleepInterval
argument_list|()
expr_stmt|;
name|maxWorker
operator|=
name|testConf
operator|.
name|getMaxWorkerThreads
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid polling interval "
argument_list|,
name|pollingInterval
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid working thread pool size"
argument_list|,
name|maxWorker
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Test case for invalid values configured for initialization
comment|//poller
name|openFile
argument_list|()
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|writeProperty
argument_list|(
literal|"mapred.capacity-scheduler.init-worker-threads"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|writeProperty
argument_list|(
literal|"mapred.capacity-scheduler.init-poll-interval"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|testConf
operator|=
operator|new
name|CapacitySchedulerConf
argument_list|(
operator|new
name|Path
argument_list|(
name|testConfFile
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|pollingInterval
operator|=
name|testConf
operator|.
name|getSleepInterval
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Polling interval configured is illegal"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{}
try|try
block|{
name|maxWorker
operator|=
name|testConf
operator|.
name|getMaxWorkerThreads
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Max worker thread configured is illegal"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{}
block|}
DECL|method|openFile ()
specifier|private
name|void
name|openFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|testDataDir
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|testDataDir
argument_list|)
decl_stmt|;
name|f
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|testConfFile
argument_list|)
decl_stmt|;
name|BufferedWriter
name|bw
init|=
operator|new
name|BufferedWriter
argument_list|(
name|fw
argument_list|)
decl_stmt|;
name|writer
operator|=
operator|new
name|PrintWriter
argument_list|(
name|bw
argument_list|)
expr_stmt|;
block|}
DECL|method|startConfig ()
specifier|private
name|void
name|startConfig
parameter_list|()
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<configuration>"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeProperty (String name, String value)
specifier|private
name|void
name|writeProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<property>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<name> "
operator|+
name|name
operator|+
literal|"</name>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<value>"
operator|+
name|value
operator|+
literal|"</value>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</property>"
argument_list|)
expr_stmt|;
block|}
DECL|method|endConfig ()
specifier|private
name|void
name|endConfig
parameter_list|()
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"</configuration>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testConfigurationValuesConversion ()
specifier|public
name|void
name|testConfigurationValuesConversion
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|prp
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|prp
operator|.
name|setProperty
argument_list|(
literal|"capacity"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|prp
operator|.
name|setProperty
argument_list|(
literal|"maximum-capacity"
argument_list|,
literal|"20.5"
argument_list|)
expr_stmt|;
name|prp
operator|.
name|setProperty
argument_list|(
literal|"supports-priority"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|prp
operator|.
name|setProperty
argument_list|(
literal|"minimum-user-limit-percent"
argument_list|,
literal|"23"
argument_list|)
expr_stmt|;
name|CapacitySchedulerConf
name|conf
init|=
operator|new
name|CapacitySchedulerConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setProperties
argument_list|(
literal|"default"
argument_list|,
name|prp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getCapacity
argument_list|(
literal|"default"
argument_list|)
operator|==
literal|10f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getMaxCapacity
argument_list|(
literal|"default"
argument_list|)
operator|==
literal|20.5f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|isPrioritySupported
argument_list|(
literal|"default"
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|conf
operator|.
name|getMinimumUserLimitPercent
argument_list|(
literal|"default"
argument_list|)
operator|==
literal|23
argument_list|)
expr_stmt|;
comment|//check for inproper stuff
name|prp
operator|.
name|setProperty
argument_list|(
literal|"capacity"
argument_list|,
literal|"h"
argument_list|)
expr_stmt|;
name|prp
operator|.
name|setProperty
argument_list|(
literal|"maximum-capacity"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
comment|//This is because h is invalid value.
name|assertTrue
argument_list|(
name|conf
operator|.
name|getCapacity
argument_list|(
literal|"default"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|conf
operator|.
name|getMaxCapacity
argument_list|(
literal|"default"
argument_list|)
operator|!=
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

