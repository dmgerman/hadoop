begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|CapacityTestUtils
operator|.
name|ControlledInitializationPoller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|CapacityTestUtils
operator|.
name|FakeJobInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|CapacityTestUtils
operator|.
name|FakeTaskTrackerManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|CapacityTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the Queue-Refresh feature.  */
end_comment

begin_class
DECL|class|TestRefreshOfQueues
specifier|public
class|class
name|TestRefreshOfQueues
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TestRefreshOfQueues
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|queueConfigPath
name|String
name|queueConfigPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.extraconf"
argument_list|,
literal|"build/test/extraconf"
argument_list|)
decl_stmt|;
DECL|field|queueConfigFile
name|File
name|queueConfigFile
init|=
operator|new
name|File
argument_list|(
name|queueConfigPath
argument_list|,
name|QueueManager
operator|.
name|QUEUE_CONF_FILE_NAME
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|private
name|CapacityTaskScheduler
name|scheduler
decl_stmt|;
DECL|field|taskTrackerManager
specifier|private
name|FakeTaskTrackerManager
name|taskTrackerManager
decl_stmt|;
comment|/**    * Remove the queueConfigFile once the test is done.    */
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|queueConfigFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|queueConfigFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Sets up the scheduler, TaskTrackerManager, QueueManager, initializer and    * starts the scheduler.    *     * @throws IOException    */
DECL|method|setupAndStartSchedulerFramework (int numTTs, int numMapsPerTT, int numReducesPerTT)
specifier|private
name|void
name|setupAndStartSchedulerFramework
parameter_list|(
name|int
name|numTTs
parameter_list|,
name|int
name|numMapsPerTT
parameter_list|,
name|int
name|numReducesPerTT
parameter_list|)
throws|throws
name|IOException
block|{
name|scheduler
operator|=
operator|new
name|CapacityTaskScheduler
argument_list|()
expr_stmt|;
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
name|numTTs
argument_list|,
name|numMapsPerTT
argument_list|,
name|numReducesPerTT
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setQueueManager
argument_list|(
operator|new
name|QueueManager
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setConf
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|ControlledInitializationPoller
name|controlledInitializationPoller
init|=
operator|new
name|ControlledInitializationPoller
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|,
name|taskTrackerManager
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|setInitializationPoller
argument_list|(
name|controlledInitializationPoller
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addJobInProgressListener
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Helper method that ensures TaskScheduler is locked before calling    * {@link QueueManager#refreshQueues(Configuration,     *    org.apache.hadoop.mapred.TaskScheduler.QueueRefresher)}.    */
DECL|method|refreshQueues (QueueManager qm, Configuration conf, TaskScheduler ts)
specifier|private
specifier|static
name|void
name|refreshQueues
parameter_list|(
name|QueueManager
name|qm
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|TaskScheduler
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|ts
init|)
block|{
name|qm
operator|.
name|refreshQueues
argument_list|(
name|conf
argument_list|,
name|ts
operator|.
name|getQueueRefresher
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testRefreshOfQueuesSanity ()
specifier|public
name|void
name|testRefreshOfQueuesSanity
parameter_list|()
throws|throws
name|Throwable
block|{
name|JobQueueInfo
index|[]
name|queues
init|=
name|TestQueueManagerRefresh
operator|.
name|getSimpleQueueHierarchy
argument_list|()
decl_stmt|;
name|Properties
index|[]
name|props
init|=
operator|new
name|Properties
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|props
index|[
name|i
index|]
operator|=
name|queues
index|[
name|i
index|]
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|props
index|[
name|i
index|]
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|props
index|[
name|i
index|]
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|MAX_CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|props
index|[
name|i
index|]
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|SUPPORTS_PRIORITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|props
index|[
name|i
index|]
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|MAXIMUM_INITIALIZED_JOBS_PER_USER_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|props
index|[
name|i
index|]
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|MINIMUM_USER_LIMIT_PERCENT_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// write the configuration file
name|QueueManagerTestUtils
operator|.
name|writeQueueConfigurationFile
argument_list|(
name|queueConfigFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|setupAndStartSchedulerFramework
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractQueue
argument_list|>
name|allQueues
init|=
name|getAllQueues
argument_list|(
name|scheduler
argument_list|)
decl_stmt|;
comment|// Verify the configuration.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|qName
init|=
name|queues
index|[
name|i
index|]
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Queue name : "
operator|+
name|qName
argument_list|)
expr_stmt|;
name|QueueSchedulingContext
name|qsc
init|=
name|allQueues
operator|.
name|get
argument_list|(
name|qName
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Context for queue "
operator|+
name|qName
operator|+
literal|" is : "
operator|+
name|qsc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|10
argument_list|,
name|qsc
operator|.
name|getCapacityPercent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|15
argument_list|,
name|qsc
operator|.
name|getMaxCapacityPercent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|qsc
operator|.
name|supportsPriorities
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|16
argument_list|,
name|qsc
operator|.
name|getUlMin
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// change configuration
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|props
index|[
name|i
index|]
operator|=
name|queues
index|[
name|i
index|]
operator|.
name|getProperties
argument_list|()
expr_stmt|;
name|props
index|[
name|i
index|]
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|props
index|[
name|i
index|]
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|MAX_CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|props
index|[
name|i
index|]
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|SUPPORTS_PRIORITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|props
index|[
name|i
index|]
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|MAXIMUM_INITIALIZED_JOBS_PER_USER_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|props
index|[
name|i
index|]
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|MINIMUM_USER_LIMIT_PERCENT_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Re-write the configuration file
name|QueueManagerTestUtils
operator|.
name|writeQueueConfigurationFile
argument_list|(
name|queueConfigFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
comment|// Now do scheduler refresh.
name|refreshQueues
argument_list|(
name|taskTrackerManager
operator|.
name|getQueueManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|allQueues
operator|=
name|getAllQueues
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|qName
init|=
name|queues
index|[
name|i
index|]
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Queue name : "
operator|+
name|qName
argument_list|)
expr_stmt|;
name|QueueSchedulingContext
name|qsc
init|=
name|allQueues
operator|.
name|get
argument_list|(
name|qName
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|qName
argument_list|,
name|qsc
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Context for queue "
operator|+
name|qName
operator|+
literal|" is : "
operator|+
name|qsc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|20
argument_list|,
name|qsc
operator|.
name|getCapacityPercent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|25
argument_list|,
name|qsc
operator|.
name|getMaxCapacityPercent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|qsc
operator|.
name|supportsPriorities
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testSuccessfulCapacityRefresh ()
specifier|public
name|void
name|testSuccessfulCapacityRefresh
parameter_list|()
throws|throws
name|Throwable
block|{
name|JobQueueInfo
index|[]
name|queues
init|=
name|TestQueueManagerRefresh
operator|.
name|getSimpleQueueHierarchy
argument_list|()
decl_stmt|;
name|queues
index|[
literal|0
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|queues
index|[
literal|1
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|queues
index|[
literal|2
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// write the configuration file
name|QueueManagerTestUtils
operator|.
name|writeQueueConfigurationFile
argument_list|(
name|queueConfigFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|setupAndStartSchedulerFramework
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|queues
index|[
literal|1
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|FakeJobInProgress
name|job2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|queues
index|[
literal|2
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
comment|//===========================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|killJob
argument_list|(
name|job1
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|killJob
argument_list|(
name|job2
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
comment|// change configuration
name|queues
index|[
literal|1
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
index|[
literal|2
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|75
argument_list|)
argument_list|)
expr_stmt|;
comment|// Re-write the configuration file
name|QueueManagerTestUtils
operator|.
name|writeQueueConfigurationFile
argument_list|(
name|queueConfigFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|refreshQueues
argument_list|(
name|taskTrackerManager
operator|.
name|getQueueManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|job1
operator|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|queues
index|[
literal|1
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|job2
operator|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
name|queues
index|[
literal|2
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0003_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0003_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0004_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0004_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0004_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0004_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0004_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0004_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify that the refresh of the scheduler fails when modified    * configuration overflows 100%    *     * @throws Throwable    */
annotation|@
name|Test
DECL|method|testFailingCapacityRefresh ()
specifier|public
name|void
name|testFailingCapacityRefresh
parameter_list|()
throws|throws
name|Throwable
block|{
name|JobQueueInfo
index|[]
name|queues
init|=
name|TestQueueManagerRefresh
operator|.
name|getSimpleQueueHierarchy
argument_list|()
decl_stmt|;
name|queues
index|[
literal|0
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|queues
index|[
literal|1
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|70
argument_list|)
argument_list|)
expr_stmt|;
name|queues
index|[
literal|2
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// write the configuration file
name|QueueManagerTestUtils
operator|.
name|writeQueueConfigurationFile
argument_list|(
name|queueConfigFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|setupAndStartSchedulerFramework
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Scheduler should have failed to start!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|QueueHierarchyBuilder
operator|.
name|TOTAL_CAPACITY_OVERFLOWN_MSG
argument_list|,
name|queues
index|[
literal|1
index|]
operator|.
name|getQueueName
argument_list|()
operator|+
literal|","
operator|+
name|queues
index|[
literal|2
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|120.0f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Rectify the properties and start the scheduler
name|queues
index|[
literal|1
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// write the configuration file
name|QueueManagerTestUtils
operator|.
name|writeQueueConfigurationFile
argument_list|(
name|queueConfigFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|setupAndStartSchedulerFramework
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Now change configuration.
name|queues
index|[
literal|1
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|35
argument_list|)
argument_list|)
expr_stmt|;
name|queues
index|[
literal|2
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|95
argument_list|)
argument_list|)
expr_stmt|;
comment|// Re-write the configuration file
name|QueueManagerTestUtils
operator|.
name|writeQueueConfigurationFile
argument_list|(
name|queueConfigFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|refreshQueues
argument_list|(
name|taskTrackerManager
operator|.
name|getQueueManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|QueueHierarchyBuilder
operator|.
name|TOTAL_CAPACITY_OVERFLOWN_MSG
argument_list|,
name|queues
index|[
literal|1
index|]
operator|.
name|getQueueName
argument_list|()
operator|+
literal|","
operator|+
name|queues
index|[
literal|2
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|130.0f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testRefreshUserLimits ()
specifier|public
name|void
name|testRefreshUserLimits
parameter_list|()
throws|throws
name|Throwable
block|{
name|JobQueueInfo
index|[]
name|queues
init|=
name|TestQueueManagerRefresh
operator|.
name|getSimpleQueueHierarchy
argument_list|()
decl_stmt|;
name|queues
index|[
literal|0
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|queues
index|[
literal|1
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|queues
index|[
literal|2
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|queues
index|[
literal|2
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|MINIMUM_USER_LIMIT_PERCENT_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// write the configuration file
name|QueueManagerTestUtils
operator|.
name|writeQueueConfigurationFile
argument_list|(
name|queueConfigFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|setupAndStartSchedulerFramework
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|queues
index|[
literal|2
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|FakeJobInProgress
name|job2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|queues
index|[
literal|2
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|"user2"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|taskTrackerManager
operator|.
name|getTaskTracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|killJob
argument_list|(
name|job1
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|killJob
argument_list|(
name|job2
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
comment|// change configuration
name|queues
index|[
literal|2
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|MINIMUM_USER_LIMIT_PERCENT_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// Re-write the configuration file
name|QueueManagerTestUtils
operator|.
name|writeQueueConfigurationFile
argument_list|(
name|queueConfigFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|refreshQueues
argument_list|(
name|taskTrackerManager
operator|.
name|getQueueManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|job1
operator|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|queues
index|[
literal|1
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|job2
operator|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|queues
index|[
literal|2
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0003_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0003_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0004_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0004_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a map of all {@link AbstractQueue}s.    *     * @param sched    * @return    */
DECL|method|getAllQueues ( CapacityTaskScheduler sched)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractQueue
argument_list|>
name|getAllQueues
parameter_list|(
name|CapacityTaskScheduler
name|sched
parameter_list|)
block|{
name|AbstractQueue
name|rootQueue
init|=
name|sched
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|AbstractQueue
argument_list|>
name|allQueues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AbstractQueue
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AbstractQueue
argument_list|>
name|allQueuesList
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractQueue
argument_list|>
argument_list|()
decl_stmt|;
name|allQueuesList
operator|.
name|addAll
argument_list|(
name|rootQueue
operator|.
name|getDescendentJobQueues
argument_list|()
argument_list|)
expr_stmt|;
name|allQueuesList
operator|.
name|addAll
argument_list|(
name|rootQueue
operator|.
name|getDescendantContainerQueues
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AbstractQueue
name|q
range|:
name|allQueuesList
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Putting in allQueues list "
operator|+
name|q
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|allQueues
operator|.
name|put
argument_list|(
name|q
operator|.
name|getName
argument_list|()
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
return|return
name|allQueues
return|;
block|}
block|}
end_class

end_unit

