begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|typedbytes
operator|.
name|TypedBytesWritable
import|;
end_import

begin_comment
comment|/**  * This class is used to resolve a string identifier into the required IO  * classes. By extending this class and pointing the property  *<tt>stream.io.identifier.resolver.class</tt> to this extension, additional  * IO classes can be added by external code.  */
end_comment

begin_class
DECL|class|IdentifierResolver
specifier|public
class|class
name|IdentifierResolver
block|{
comment|// note that the identifiers are case insensitive
DECL|field|TEXT_ID
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_ID
init|=
literal|"text"
decl_stmt|;
DECL|field|RAW_BYTES_ID
specifier|public
specifier|static
specifier|final
name|String
name|RAW_BYTES_ID
init|=
literal|"rawbytes"
decl_stmt|;
DECL|field|TYPED_BYTES_ID
specifier|public
specifier|static
specifier|final
name|String
name|TYPED_BYTES_ID
init|=
literal|"typedbytes"
decl_stmt|;
DECL|field|inputWriterClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|InputWriter
argument_list|>
name|inputWriterClass
init|=
literal|null
decl_stmt|;
DECL|field|outputReaderClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|OutputReader
argument_list|>
name|outputReaderClass
init|=
literal|null
decl_stmt|;
DECL|field|outputKeyClass
specifier|private
name|Class
name|outputKeyClass
init|=
literal|null
decl_stmt|;
DECL|field|outputValueClass
specifier|private
name|Class
name|outputValueClass
init|=
literal|null
decl_stmt|;
comment|/**    * Resolves a given identifier. This method has to be called before calling    * any of the getters.    */
DECL|method|resolve (String identifier)
specifier|public
name|void
name|resolve
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
if|if
condition|(
name|identifier
operator|.
name|equalsIgnoreCase
argument_list|(
name|RAW_BYTES_ID
argument_list|)
condition|)
block|{
name|setInputWriterClass
argument_list|(
name|RawBytesInputWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|setOutputReaderClass
argument_list|(
name|RawBytesOutputReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|setOutputValueClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|identifier
operator|.
name|equalsIgnoreCase
argument_list|(
name|TYPED_BYTES_ID
argument_list|)
condition|)
block|{
name|setInputWriterClass
argument_list|(
name|TypedBytesInputWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|setOutputReaderClass
argument_list|(
name|TypedBytesOutputReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|setOutputKeyClass
argument_list|(
name|TypedBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|setOutputValueClass
argument_list|(
name|TypedBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// assume TEXT_ID
name|setInputWriterClass
argument_list|(
name|TextInputWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|setOutputReaderClass
argument_list|(
name|TextOutputReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the resolved {@link InputWriter} class.    */
DECL|method|getInputWriterClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputWriter
argument_list|>
name|getInputWriterClass
parameter_list|()
block|{
return|return
name|inputWriterClass
return|;
block|}
comment|/**    * Returns the resolved {@link OutputReader} class.    */
DECL|method|getOutputReaderClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|OutputReader
argument_list|>
name|getOutputReaderClass
parameter_list|()
block|{
return|return
name|outputReaderClass
return|;
block|}
comment|/**    * Returns the resolved output key class.    */
DECL|method|getOutputKeyClass ()
specifier|public
name|Class
name|getOutputKeyClass
parameter_list|()
block|{
return|return
name|outputKeyClass
return|;
block|}
comment|/**    * Returns the resolved output value class.    */
DECL|method|getOutputValueClass ()
specifier|public
name|Class
name|getOutputValueClass
parameter_list|()
block|{
return|return
name|outputValueClass
return|;
block|}
comment|/**    * Sets the {@link InputWriter} class.    */
DECL|method|setInputWriterClass (Class<? extends InputWriter> inputWriterClass)
specifier|protected
name|void
name|setInputWriterClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|InputWriter
argument_list|>
name|inputWriterClass
parameter_list|)
block|{
name|this
operator|.
name|inputWriterClass
operator|=
name|inputWriterClass
expr_stmt|;
block|}
comment|/**    * Sets the {@link OutputReader} class.    */
DECL|method|setOutputReaderClass (Class<? extends OutputReader> outputReaderClass)
specifier|protected
name|void
name|setOutputReaderClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|OutputReader
argument_list|>
name|outputReaderClass
parameter_list|)
block|{
name|this
operator|.
name|outputReaderClass
operator|=
name|outputReaderClass
expr_stmt|;
block|}
comment|/**    * Sets the output key class class.    */
DECL|method|setOutputKeyClass (Class outputKeyClass)
specifier|protected
name|void
name|setOutputKeyClass
parameter_list|(
name|Class
name|outputKeyClass
parameter_list|)
block|{
name|this
operator|.
name|outputKeyClass
operator|=
name|outputKeyClass
expr_stmt|;
block|}
comment|/**    * Sets the output value class.    */
DECL|method|setOutputValueClass (Class outputValueClass)
specifier|protected
name|void
name|setOutputValueClass
parameter_list|(
name|Class
name|outputValueClass
parameter_list|)
block|{
name|this
operator|.
name|outputValueClass
operator|=
name|outputValueClass
expr_stmt|;
block|}
block|}
end_class

end_unit

