begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestStreamingCombiner
specifier|public
class|class
name|TestStreamingCombiner
extends|extends
name|TestStreaming
block|{
DECL|field|combine
specifier|protected
name|String
name|combine
init|=
name|UtilTest
operator|.
name|makeJavaCommand
argument_list|(
name|UniqApp
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
literal|""
block|}
argument_list|)
decl_stmt|;
DECL|method|TestStreamingCombiner ()
specifier|public
name|TestStreamingCombiner
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|genArgs ()
specifier|protected
name|String
index|[]
name|genArgs
parameter_list|()
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-combiner"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|combine
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|genArgs
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testCommandLine ()
specifier|public
name|void
name|testCommandLine
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|testCommandLine
argument_list|()
expr_stmt|;
comment|// validate combiner counters
name|String
name|counterGrp
init|=
literal|"org.apache.hadoop.mapred.Task$Counter"
decl_stmt|;
name|Counters
name|counters
init|=
name|job
operator|.
name|running_
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|counterGrp
argument_list|,
literal|"COMBINE_INPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|counterGrp
argument_list|,
literal|"COMBINE_OUTPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

