begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsSystemImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MockitoMaker
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestShuffleHandler
specifier|public
class|class
name|TestShuffleHandler
block|{
DECL|field|MiB
specifier|static
specifier|final
name|long
name|MiB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|method|testShuffleMetrics ()
annotation|@
name|Test
specifier|public
name|void
name|testShuffleMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|MetricsSystem
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|()
decl_stmt|;
name|ShuffleHandler
name|sh
init|=
operator|new
name|ShuffleHandler
argument_list|(
name|ms
argument_list|)
decl_stmt|;
name|ChannelFuture
name|cf
init|=
name|make
argument_list|(
name|stub
argument_list|(
name|ChannelFuture
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|from
operator|.
name|isSuccess
argument_list|()
argument_list|)
decl_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|shuffleConnections
operator|.
name|incr
argument_list|()
expr_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|shuffleOutputBytes
operator|.
name|incr
argument_list|(
literal|1
operator|*
name|MiB
argument_list|)
expr_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|shuffleConnections
operator|.
name|incr
argument_list|()
expr_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|shuffleOutputBytes
operator|.
name|incr
argument_list|(
literal|2
operator|*
name|MiB
argument_list|)
expr_stmt|;
name|checkShuffleMetrics
argument_list|(
name|ms
argument_list|,
literal|3
operator|*
name|MiB
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|operationComplete
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|sh
operator|.
name|metrics
operator|.
name|operationComplete
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|checkShuffleMetrics
argument_list|(
name|ms
argument_list|,
literal|3
operator|*
name|MiB
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|checkShuffleMetrics (MetricsSystem ms, long bytes, int failed, int succeeded, int connections)
specifier|static
name|void
name|checkShuffleMetrics
parameter_list|(
name|MetricsSystem
name|ms
parameter_list|,
name|long
name|bytes
parameter_list|,
name|int
name|failed
parameter_list|,
name|int
name|succeeded
parameter_list|,
name|int
name|connections
parameter_list|)
block|{
name|MetricsSource
name|source
init|=
name|ms
operator|.
name|getSource
argument_list|(
literal|"ShuffleMetrics"
argument_list|)
decl_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertCounter
argument_list|(
literal|"ShuffleOutputBytes"
argument_list|,
name|bytes
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"ShuffleOutputsFailed"
argument_list|,
name|failed
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"ShuffleOutputsOK"
argument_list|,
name|succeeded
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"ShuffleConnections"
argument_list|,
name|connections
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

