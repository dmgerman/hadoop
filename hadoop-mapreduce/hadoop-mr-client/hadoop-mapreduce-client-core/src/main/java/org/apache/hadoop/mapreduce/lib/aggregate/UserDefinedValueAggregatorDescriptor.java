begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.aggregate
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * This class implements a wrapper for a user defined value   * aggregator descriptor.  * It serves two functions: One is to create an object of   * ValueAggregatorDescriptor from the name of a user defined class  * that may be dynamically loaded. The other is to  * delegate invocations of generateKeyValPairs function to the created object.  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|UserDefinedValueAggregatorDescriptor
specifier|public
class|class
name|UserDefinedValueAggregatorDescriptor
implements|implements
name|ValueAggregatorDescriptor
block|{
DECL|field|className
specifier|private
name|String
name|className
decl_stmt|;
DECL|field|theAggregatorDescriptor
specifier|protected
name|ValueAggregatorDescriptor
name|theAggregatorDescriptor
init|=
literal|null
decl_stmt|;
DECL|field|argArray
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|argArray
init|=
operator|new
name|Class
index|[]
block|{}
decl_stmt|;
comment|/**    * Create an instance of the given class    * @param className the name of the class    * @return a dynamically created instance of the given class     */
DECL|method|createInstance (String className)
specifier|public
specifier|static
name|Object
name|createInstance
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|Object
name|retv
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|theFilterClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|meth
init|=
name|theFilterClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|argArray
argument_list|)
decl_stmt|;
name|meth
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|retv
operator|=
name|meth
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|retv
return|;
block|}
DECL|method|createAggregator (Configuration conf)
specifier|private
name|void
name|createAggregator
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|theAggregatorDescriptor
operator|==
literal|null
condition|)
block|{
name|theAggregatorDescriptor
operator|=
operator|(
name|ValueAggregatorDescriptor
operator|)
name|createInstance
argument_list|(
name|this
operator|.
name|className
argument_list|)
expr_stmt|;
name|theAggregatorDescriptor
operator|.
name|configure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *     * @param className the class name of the user defined descriptor class    * @param conf a configure object used for decriptor configuration    */
DECL|method|UserDefinedValueAggregatorDescriptor (String className, Configuration conf)
specifier|public
name|UserDefinedValueAggregatorDescriptor
parameter_list|(
name|String
name|className
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
name|this
operator|.
name|createAggregator
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    *   Generate a list of aggregation-id/value pairs for the given     *   key/value pairs by delegating the invocation to the real object.    *       * @param key    *          input key    * @param val    *          input value    * @return a list of aggregation id/value pairs. An aggregation id encodes an    *         aggregation type which is used to guide the way to aggregate the    *         value in the reduce/combiner phrase of an Aggregate based job.    */
DECL|method|generateKeyValPairs (Object key, Object val)
specifier|public
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|generateKeyValPairs
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|retv
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|theAggregatorDescriptor
operator|!=
literal|null
condition|)
block|{
name|retv
operator|=
name|this
operator|.
name|theAggregatorDescriptor
operator|.
name|generateKeyValPairs
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|retv
return|;
block|}
comment|/**    * @return the string representation of this object.    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"UserDefinedValueAggregatorDescriptor with class name:"
operator|+
literal|"\t"
operator|+
name|this
operator|.
name|className
return|;
block|}
comment|/**    *  Do nothing.    */
DECL|method|configure (Configuration conf)
specifier|public
name|void
name|configure
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{    }
block|}
end_class

end_unit

