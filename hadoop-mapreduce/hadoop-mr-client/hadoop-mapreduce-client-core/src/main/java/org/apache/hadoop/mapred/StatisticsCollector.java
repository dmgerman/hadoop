begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|StatisticsCollector
operator|.
name|Stat
operator|.
name|TimeStat
import|;
end_import

begin_comment
comment|/**  * Collects the statistics in time windows.  */
end_comment

begin_class
DECL|class|StatisticsCollector
class|class
name|StatisticsCollector
block|{
DECL|field|DEFAULT_PERIOD
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_PERIOD
init|=
literal|5
decl_stmt|;
specifier|static
specifier|final
name|TimeWindow
DECL|field|SINCE_START
name|SINCE_START
init|=
operator|new
name|TimeWindow
argument_list|(
literal|"Since Start"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|TimeWindow
DECL|field|LAST_WEEK
name|LAST_WEEK
init|=
operator|new
name|TimeWindow
argument_list|(
literal|"Last Week"
argument_list|,
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
argument_list|,
literal|60
operator|*
literal|60
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|TimeWindow
DECL|field|LAST_DAY
name|LAST_DAY
init|=
operator|new
name|TimeWindow
argument_list|(
literal|"Last Day"
argument_list|,
literal|24
operator|*
literal|60
operator|*
literal|60
argument_list|,
literal|60
operator|*
literal|60
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|TimeWindow
DECL|field|LAST_HOUR
name|LAST_HOUR
init|=
operator|new
name|TimeWindow
argument_list|(
literal|"Last Hour"
argument_list|,
literal|60
operator|*
literal|60
argument_list|,
literal|60
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|TimeWindow
DECL|field|LAST_MINUTE
name|LAST_MINUTE
init|=
operator|new
name|TimeWindow
argument_list|(
literal|"Last Minute"
argument_list|,
literal|60
argument_list|,
literal|10
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_COLLECT_WINDOWS
specifier|static
specifier|final
name|TimeWindow
index|[]
name|DEFAULT_COLLECT_WINDOWS
init|=
block|{
name|StatisticsCollector
operator|.
name|SINCE_START
block|,
name|StatisticsCollector
operator|.
name|LAST_DAY
block|,
name|StatisticsCollector
operator|.
name|LAST_HOUR
block|}
decl_stmt|;
DECL|field|period
specifier|private
specifier|final
name|int
name|period
decl_stmt|;
DECL|field|started
specifier|private
name|boolean
name|started
decl_stmt|;
DECL|field|updaters
specifier|private
specifier|final
name|Map
argument_list|<
name|TimeWindow
argument_list|,
name|StatUpdater
argument_list|>
name|updaters
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TimeWindow
argument_list|,
name|StatUpdater
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|statistics
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Stat
argument_list|>
name|statistics
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Stat
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|StatisticsCollector ()
name|StatisticsCollector
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_PERIOD
argument_list|)
expr_stmt|;
block|}
DECL|method|StatisticsCollector (int period)
name|StatisticsCollector
parameter_list|(
name|int
name|period
parameter_list|)
block|{
name|this
operator|.
name|period
operator|=
name|period
expr_stmt|;
block|}
DECL|method|start ()
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|started
condition|)
block|{
return|return;
block|}
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|(
literal|"Timer thread for monitoring "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TimerTask
name|task
init|=
operator|new
name|TimerTask
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|update
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|long
name|millis
init|=
name|period
operator|*
literal|1000
decl_stmt|;
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|task
argument_list|,
name|millis
argument_list|,
name|millis
argument_list|)
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|update ()
specifier|protected
specifier|synchronized
name|void
name|update
parameter_list|()
block|{
for|for
control|(
name|StatUpdater
name|c
range|:
name|updaters
operator|.
name|values
argument_list|()
control|)
block|{
name|c
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getUpdaters ()
name|Map
argument_list|<
name|TimeWindow
argument_list|,
name|StatUpdater
argument_list|>
name|getUpdaters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|updaters
argument_list|)
return|;
block|}
DECL|method|getStatistics ()
name|Map
argument_list|<
name|String
argument_list|,
name|Stat
argument_list|>
name|getStatistics
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|statistics
argument_list|)
return|;
block|}
DECL|method|createStat (String name)
specifier|synchronized
name|Stat
name|createStat
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|createStat
argument_list|(
name|name
argument_list|,
name|DEFAULT_COLLECT_WINDOWS
argument_list|)
return|;
block|}
DECL|method|createStat (String name, TimeWindow[] windows)
specifier|synchronized
name|Stat
name|createStat
parameter_list|(
name|String
name|name
parameter_list|,
name|TimeWindow
index|[]
name|windows
parameter_list|)
block|{
if|if
condition|(
name|statistics
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Stat with name "
operator|+
name|name
operator|+
literal|" is already defined"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|TimeWindow
argument_list|,
name|TimeStat
argument_list|>
name|timeStats
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TimeWindow
argument_list|,
name|TimeStat
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimeWindow
name|window
range|:
name|windows
control|)
block|{
name|StatUpdater
name|collector
init|=
name|updaters
operator|.
name|get
argument_list|(
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|collector
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|SINCE_START
operator|.
name|equals
argument_list|(
name|window
argument_list|)
condition|)
block|{
name|collector
operator|=
operator|new
name|StatUpdater
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|collector
operator|=
operator|new
name|TimeWindowStatUpdater
argument_list|(
name|window
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
name|updaters
operator|.
name|put
argument_list|(
name|window
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
name|TimeStat
name|timeStat
init|=
operator|new
name|TimeStat
argument_list|()
decl_stmt|;
name|collector
operator|.
name|addTimeStat
argument_list|(
name|name
argument_list|,
name|timeStat
argument_list|)
expr_stmt|;
name|timeStats
operator|.
name|put
argument_list|(
name|window
argument_list|,
name|timeStat
argument_list|)
expr_stmt|;
block|}
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|(
name|name
argument_list|,
name|timeStats
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|stat
argument_list|)
expr_stmt|;
return|return
name|stat
return|;
block|}
DECL|method|removeStat (String name)
specifier|synchronized
name|Stat
name|removeStat
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Stat
name|stat
init|=
name|statistics
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StatUpdater
name|collector
range|:
name|updaters
operator|.
name|values
argument_list|()
control|)
block|{
name|collector
operator|.
name|removeTimeStat
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stat
return|;
block|}
DECL|class|TimeWindow
specifier|static
class|class
name|TimeWindow
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|windowSize
specifier|final
name|int
name|windowSize
decl_stmt|;
DECL|field|updateGranularity
specifier|final
name|int
name|updateGranularity
decl_stmt|;
DECL|method|TimeWindow (String name, int windowSize, int updateGranularity)
name|TimeWindow
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|windowSize
parameter_list|,
name|int
name|updateGranularity
parameter_list|)
block|{
if|if
condition|(
name|updateGranularity
operator|>
name|windowSize
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid TimeWindow: updateGranularity> windowSize"
argument_list|)
throw|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|windowSize
operator|=
name|windowSize
expr_stmt|;
name|this
operator|.
name|updateGranularity
operator|=
name|updateGranularity
expr_stmt|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
operator|+
name|updateGranularity
operator|+
name|windowSize
return|;
block|}
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|final
name|TimeWindow
name|other
init|=
operator|(
name|TimeWindow
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|name
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|updateGranularity
operator|!=
name|other
operator|.
name|updateGranularity
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|windowSize
operator|!=
name|other
operator|.
name|windowSize
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|Stat
specifier|static
class|class
name|Stat
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|timeStats
specifier|private
name|Map
argument_list|<
name|TimeWindow
argument_list|,
name|TimeStat
argument_list|>
name|timeStats
decl_stmt|;
DECL|method|Stat (String name, Map<TimeWindow, TimeStat> timeStats)
specifier|private
name|Stat
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|TimeWindow
argument_list|,
name|TimeStat
argument_list|>
name|timeStats
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|timeStats
operator|=
name|timeStats
expr_stmt|;
block|}
DECL|method|inc (int incr)
specifier|public
specifier|synchronized
name|void
name|inc
parameter_list|(
name|int
name|incr
parameter_list|)
block|{
for|for
control|(
name|TimeStat
name|ts
range|:
name|timeStats
operator|.
name|values
argument_list|()
control|)
block|{
name|ts
operator|.
name|inc
argument_list|(
name|incr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|inc ()
specifier|public
specifier|synchronized
name|void
name|inc
parameter_list|()
block|{
name|inc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getValues ()
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|TimeWindow
argument_list|,
name|TimeStat
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|timeStats
argument_list|)
return|;
block|}
DECL|class|TimeStat
specifier|static
class|class
name|TimeStat
block|{
DECL|field|buckets
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Integer
argument_list|>
name|buckets
init|=
operator|new
name|LinkedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|value
specifier|private
name|int
name|value
decl_stmt|;
DECL|field|currentValue
specifier|private
name|int
name|currentValue
decl_stmt|;
DECL|method|getValue ()
specifier|public
specifier|synchronized
name|int
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|inc (int i)
specifier|private
specifier|synchronized
name|void
name|inc
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|currentValue
operator|+=
name|i
expr_stmt|;
block|}
DECL|method|addBucket ()
specifier|private
specifier|synchronized
name|void
name|addBucket
parameter_list|()
block|{
name|buckets
operator|.
name|addLast
argument_list|(
name|currentValue
argument_list|)
expr_stmt|;
name|setValueToCurrent
argument_list|()
expr_stmt|;
block|}
DECL|method|setValueToCurrent ()
specifier|private
specifier|synchronized
name|void
name|setValueToCurrent
parameter_list|()
block|{
name|value
operator|+=
name|currentValue
expr_stmt|;
name|currentValue
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|removeBucket ()
specifier|private
specifier|synchronized
name|void
name|removeBucket
parameter_list|()
block|{
name|int
name|removed
init|=
name|buckets
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|value
operator|-=
name|removed
expr_stmt|;
block|}
block|}
block|}
DECL|class|StatUpdater
specifier|private
specifier|static
class|class
name|StatUpdater
block|{
DECL|field|statToCollect
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TimeStat
argument_list|>
name|statToCollect
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimeStat
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addTimeStat (String name, TimeStat s)
specifier|synchronized
name|void
name|addTimeStat
parameter_list|(
name|String
name|name
parameter_list|,
name|TimeStat
name|s
parameter_list|)
block|{
name|statToCollect
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|removeTimeStat (String name)
specifier|synchronized
name|TimeStat
name|removeTimeStat
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|statToCollect
operator|.
name|remove
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|update ()
specifier|synchronized
name|void
name|update
parameter_list|()
block|{
for|for
control|(
name|TimeStat
name|stat
range|:
name|statToCollect
operator|.
name|values
argument_list|()
control|)
block|{
name|stat
operator|.
name|setValueToCurrent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Updates TimeWindow statistics in buckets.    *    */
DECL|class|TimeWindowStatUpdater
specifier|private
specifier|static
class|class
name|TimeWindowStatUpdater
extends|extends
name|StatUpdater
block|{
DECL|field|collectBuckets
specifier|final
name|int
name|collectBuckets
decl_stmt|;
DECL|field|updatesPerBucket
specifier|final
name|int
name|updatesPerBucket
decl_stmt|;
DECL|field|updates
specifier|private
name|int
name|updates
decl_stmt|;
DECL|field|buckets
specifier|private
name|int
name|buckets
decl_stmt|;
DECL|method|TimeWindowStatUpdater (TimeWindow w, int updatePeriod)
name|TimeWindowStatUpdater
parameter_list|(
name|TimeWindow
name|w
parameter_list|,
name|int
name|updatePeriod
parameter_list|)
block|{
if|if
condition|(
name|updatePeriod
operator|>
name|w
operator|.
name|updateGranularity
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid conf: updatePeriod> updateGranularity"
argument_list|)
throw|;
block|}
name|collectBuckets
operator|=
name|w
operator|.
name|windowSize
operator|/
name|w
operator|.
name|updateGranularity
expr_stmt|;
name|updatesPerBucket
operator|=
name|w
operator|.
name|updateGranularity
operator|/
name|updatePeriod
expr_stmt|;
block|}
DECL|method|update ()
specifier|synchronized
name|void
name|update
parameter_list|()
block|{
name|updates
operator|++
expr_stmt|;
if|if
condition|(
name|updates
operator|==
name|updatesPerBucket
condition|)
block|{
for|for
control|(
name|TimeStat
name|stat
range|:
name|statToCollect
operator|.
name|values
argument_list|()
control|)
block|{
name|stat
operator|.
name|addBucket
argument_list|()
expr_stmt|;
block|}
name|updates
operator|=
literal|0
expr_stmt|;
name|buckets
operator|++
expr_stmt|;
if|if
condition|(
name|buckets
operator|>
name|collectBuckets
condition|)
block|{
for|for
control|(
name|TimeStat
name|stat
range|:
name|statToCollect
operator|.
name|values
argument_list|()
control|)
block|{
name|stat
operator|.
name|removeBucket
argument_list|()
expr_stmt|;
block|}
name|buckets
operator|--
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

