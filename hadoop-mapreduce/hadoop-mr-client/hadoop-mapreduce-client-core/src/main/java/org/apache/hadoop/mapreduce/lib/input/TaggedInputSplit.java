begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|SerializationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * An {@link InputSplit} that tags another InputSplit with extra data for use  * by {@link DelegatingInputFormat}s and {@link DelegatingMapper}s.  */
end_comment

begin_class
DECL|class|TaggedInputSplit
class|class
name|TaggedInputSplit
extends|extends
name|InputSplit
implements|implements
name|Configurable
implements|,
name|Writable
block|{
DECL|field|inputSplitClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|InputSplit
argument_list|>
name|inputSplitClass
decl_stmt|;
DECL|field|inputSplit
specifier|private
name|InputSplit
name|inputSplit
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|inputFormatClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|mapperClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
name|mapperClass
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|TaggedInputSplit ()
specifier|public
name|TaggedInputSplit
parameter_list|()
block|{
comment|// Default constructor.
block|}
comment|/**    * Creates a new TaggedInputSplit.    *     * @param inputSplit The InputSplit to be tagged    * @param conf The configuration to use    * @param inputFormatClass The InputFormat class to use for this job    * @param mapperClass The Mapper class to use for this job    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|TaggedInputSplit (InputSplit inputSplit, Configuration conf, Class<? extends InputFormat> inputFormatClass, Class<? extends Mapper> mapperClass)
specifier|public
name|TaggedInputSplit
parameter_list|(
name|InputSplit
name|inputSplit
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
name|mapperClass
parameter_list|)
block|{
name|this
operator|.
name|inputSplitClass
operator|=
name|inputSplit
operator|.
name|getClass
argument_list|()
expr_stmt|;
name|this
operator|.
name|inputSplit
operator|=
name|inputSplit
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|inputFormatClass
operator|=
name|inputFormatClass
expr_stmt|;
name|this
operator|.
name|mapperClass
operator|=
name|mapperClass
expr_stmt|;
block|}
comment|/**    * Retrieves the original InputSplit.    *     * @return The InputSplit that was tagged    */
DECL|method|getInputSplit ()
specifier|public
name|InputSplit
name|getInputSplit
parameter_list|()
block|{
return|return
name|inputSplit
return|;
block|}
comment|/**    * Retrieves the InputFormat class to use for this split.    *     * @return The InputFormat class to use    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getInputFormatClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|getInputFormatClass
parameter_list|()
block|{
return|return
name|inputFormatClass
return|;
block|}
comment|/**    * Retrieves the Mapper class to use for this split.    *     * @return The Mapper class to use    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getMapperClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
name|getMapperClass
parameter_list|()
block|{
return|return
name|mapperClass
return|;
block|}
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|inputSplit
operator|.
name|getLength
argument_list|()
return|;
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|inputSplit
operator|.
name|getLocations
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|inputSplitClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|InputSplit
argument_list|>
operator|)
name|readClass
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|inputFormatClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
operator|)
name|readClass
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|mapperClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
operator|)
name|readClass
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|inputSplit
operator|=
operator|(
name|InputSplit
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|inputSplitClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|SerializationFactory
name|factory
init|=
operator|new
name|SerializationFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Deserializer
name|deserializer
init|=
name|factory
operator|.
name|getDeserializer
argument_list|(
name|inputSplitClass
argument_list|)
decl_stmt|;
name|deserializer
operator|.
name|open
argument_list|(
operator|(
name|DataInputStream
operator|)
name|in
argument_list|)
expr_stmt|;
name|inputSplit
operator|=
operator|(
name|InputSplit
operator|)
name|deserializer
operator|.
name|deserialize
argument_list|(
name|inputSplit
argument_list|)
expr_stmt|;
block|}
DECL|method|readClass (DataInput in)
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|readClass
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|conf
operator|.
name|getClassByName
argument_list|(
name|className
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"readObject can't find class"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|inputSplitClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|inputFormatClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|mapperClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SerializationFactory
name|factory
init|=
operator|new
name|SerializationFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Serializer
name|serializer
init|=
name|factory
operator|.
name|getSerializer
argument_list|(
name|inputSplitClass
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|open
argument_list|(
operator|(
name|DataOutputStream
operator|)
name|out
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|inputSplit
argument_list|)
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
block|}
end_class

end_unit

