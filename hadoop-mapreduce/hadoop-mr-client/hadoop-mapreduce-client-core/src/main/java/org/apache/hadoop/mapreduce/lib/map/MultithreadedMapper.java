begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.map
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|StatusReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|MapContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Multithreaded implementation for @link org.apache.hadoop.mapreduce.Mapper.  *<p>  * It can be used instead of the default implementation,  * @link org.apache.hadoop.mapred.MapRunner, when the Map operation is not CPU  * bound in order to improve throughput.  *<p>  * Mapper implementations using this MapRunnable must be thread-safe.  *<p>  * The Map-Reduce job has to be configured with the mapper to use via   * {@link #setMapperClass(Configuration, Class)} and  * the number of thread the thread-pool can use with the  * {@link #getNumberOfThreads(Configuration) method. The default  * value is 10 threads.  *<p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|MultithreadedMapper
specifier|public
class|class
name|MultithreadedMapper
parameter_list|<
name|K1
parameter_list|,
name|V1
parameter_list|,
name|K2
parameter_list|,
name|V2
parameter_list|>
extends|extends
name|Mapper
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MultithreadedMapper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NUM_THREADS
specifier|public
specifier|static
name|String
name|NUM_THREADS
init|=
literal|"mapreduce.mapper.multithreadedmapper.threads"
decl_stmt|;
DECL|field|MAP_CLASS
specifier|public
specifier|static
name|String
name|MAP_CLASS
init|=
literal|"mapreduce.mapper.multithreadedmapper.mapclass"
decl_stmt|;
DECL|field|mapClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
argument_list|>
name|mapClass
decl_stmt|;
DECL|field|outer
specifier|private
name|Context
name|outer
decl_stmt|;
DECL|field|runners
specifier|private
name|List
argument_list|<
name|MapRunner
argument_list|>
name|runners
decl_stmt|;
comment|/**    * The number of threads in the thread pool that will run the map function.    * @param job the job    * @return the number of threads    */
DECL|method|getNumberOfThreads (JobContext job)
specifier|public
specifier|static
name|int
name|getNumberOfThreads
parameter_list|(
name|JobContext
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|NUM_THREADS
argument_list|,
literal|10
argument_list|)
return|;
block|}
comment|/**    * Set the number of threads in the pool for running maps.    * @param job the job to modify    * @param threads the new number of threads    */
DECL|method|setNumberOfThreads (Job job, int threads)
specifier|public
specifier|static
name|void
name|setNumberOfThreads
parameter_list|(
name|Job
name|job
parameter_list|,
name|int
name|threads
parameter_list|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|NUM_THREADS
argument_list|,
name|threads
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the application's mapper class.    * @param<K1> the map's input key type    * @param<V1> the map's input value type    * @param<K2> the map's output key type    * @param<V2> the map's output value type    * @param job the job    * @return the mapper class to run    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|K1
parameter_list|,
name|V1
parameter_list|,
name|K2
parameter_list|,
name|V2
parameter_list|>
DECL|method|getMapperClass (JobContext job)
name|Class
argument_list|<
name|Mapper
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
argument_list|>
name|getMapperClass
parameter_list|(
name|JobContext
name|job
parameter_list|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|Mapper
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
argument_list|>
operator|)
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getClass
argument_list|(
name|MAP_CLASS
argument_list|,
name|Mapper
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Set the application's mapper class.    * @param<K1> the map input key type    * @param<V1> the map input value type    * @param<K2> the map output key type    * @param<V2> the map output value type    * @param job the job to modify    * @param cls the class to use as the mapper    */
specifier|public
specifier|static
parameter_list|<
name|K1
parameter_list|,
name|V1
parameter_list|,
name|K2
parameter_list|,
name|V2
parameter_list|>
DECL|method|setMapperClass (Job job, Class<? extends Mapper<K1,V1,K2,V2>> cls)
name|void
name|setMapperClass
parameter_list|(
name|Job
name|job
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|MultithreadedMapper
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't have recursive "
operator|+
literal|"MultithreadedMapper instances."
argument_list|)
throw|;
block|}
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
name|MAP_CLASS
argument_list|,
name|cls
argument_list|,
name|Mapper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run the application's maps using a thread pool.    */
annotation|@
name|Override
DECL|method|run (Context context)
specifier|public
name|void
name|run
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|outer
operator|=
name|context
expr_stmt|;
name|int
name|numberOfThreads
init|=
name|getNumberOfThreads
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|mapClass
operator|=
name|getMapperClass
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configuring multithread runner to use "
operator|+
name|numberOfThreads
operator|+
literal|" threads"
argument_list|)
expr_stmt|;
block|}
name|runners
operator|=
operator|new
name|ArrayList
argument_list|<
name|MapRunner
argument_list|>
argument_list|(
name|numberOfThreads
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
operator|++
name|i
control|)
block|{
name|MapRunner
name|thread
init|=
operator|new
name|MapRunner
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|runners
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
operator|++
name|i
control|)
block|{
name|MapRunner
name|thread
init|=
name|runners
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|Throwable
name|th
init|=
name|thread
operator|.
name|throwable
decl_stmt|;
if|if
condition|(
name|th
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|th
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|th
throw|;
block|}
elseif|else
if|if
condition|(
name|th
operator|instanceof
name|InterruptedException
condition|)
block|{
throw|throw
operator|(
name|InterruptedException
operator|)
name|th
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|class|SubMapRecordReader
specifier|private
class|class
name|SubMapRecordReader
extends|extends
name|RecordReader
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|>
block|{
DECL|field|key
specifier|private
name|K1
name|key
decl_stmt|;
DECL|field|value
specifier|private
name|V1
name|value
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (InputSplit split, TaskAttemptContext context )
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|conf
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextKeyValue ()
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|outer
init|)
block|{
if|if
condition|(
operator|!
name|outer
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|key
operator|=
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|outer
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|outer
operator|.
name|getCurrentKey
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|value
operator|=
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|conf
argument_list|,
name|outer
operator|.
name|getCurrentValue
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|getCurrentKey ()
specifier|public
name|K1
name|getCurrentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentValue ()
specifier|public
name|V1
name|getCurrentValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
DECL|class|SubMapRecordWriter
specifier|private
class|class
name|SubMapRecordWriter
extends|extends
name|RecordWriter
argument_list|<
name|K2
argument_list|,
name|V2
argument_list|>
block|{
annotation|@
name|Override
DECL|method|close (TaskAttemptContext context)
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{     }
annotation|@
name|Override
DECL|method|write (K2 key, V2 value)
specifier|public
name|void
name|write
parameter_list|(
name|K2
name|key
parameter_list|,
name|V2
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|outer
init|)
block|{
name|outer
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|SubMapStatusReporter
specifier|private
class|class
name|SubMapStatusReporter
extends|extends
name|StatusReporter
block|{
annotation|@
name|Override
DECL|method|getCounter (Enum<?> name)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|name
parameter_list|)
block|{
return|return
name|outer
operator|.
name|getCounter
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCounter (String group, String name)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|outer
operator|.
name|getCounter
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|progress ()
specifier|public
name|void
name|progress
parameter_list|()
block|{
name|outer
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setStatus (String status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|outer
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|outer
operator|.
name|getProgress
argument_list|()
return|;
block|}
block|}
DECL|class|MapRunner
specifier|private
class|class
name|MapRunner
extends|extends
name|Thread
block|{
DECL|field|mapper
specifier|private
name|Mapper
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
name|mapper
decl_stmt|;
DECL|field|subcontext
specifier|private
name|Context
name|subcontext
decl_stmt|;
DECL|field|throwable
specifier|private
name|Throwable
name|throwable
decl_stmt|;
DECL|field|reader
specifier|private
name|RecordReader
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|>
name|reader
init|=
operator|new
name|SubMapRecordReader
argument_list|()
decl_stmt|;
DECL|method|MapRunner (Context context)
name|MapRunner
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|mapper
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|mapClass
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|MapContext
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
name|mapContext
init|=
operator|new
name|MapContextImpl
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
argument_list|(
name|outer
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|outer
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|reader
argument_list|,
operator|new
name|SubMapRecordWriter
argument_list|()
argument_list|,
name|context
operator|.
name|getOutputCommitter
argument_list|()
argument_list|,
operator|new
name|SubMapStatusReporter
argument_list|()
argument_list|,
name|outer
operator|.
name|getInputSplit
argument_list|()
argument_list|)
decl_stmt|;
name|subcontext
operator|=
operator|new
name|WrappedMapper
argument_list|<
name|K1
argument_list|,
name|V1
argument_list|,
name|K2
argument_list|,
name|V2
argument_list|>
argument_list|()
operator|.
name|getMapContext
argument_list|(
name|mapContext
argument_list|)
expr_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|context
operator|.
name|getInputSplit
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|mapper
operator|.
name|run
argument_list|(
name|subcontext
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ie
parameter_list|)
block|{
name|throwable
operator|=
name|ie
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

