begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * This class provides an implementation of ResetableIterator. The  * implementation uses an {@link java.util.ArrayList} to store elements  * added to it, replaying them as requested.  * Prefer {@link StreamBackedIterator}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|ArrayListBackedIterator
specifier|public
class|class
name|ArrayListBackedIterator
parameter_list|<
name|X
extends|extends
name|Writable
parameter_list|>
implements|implements
name|ResetableIterator
argument_list|<
name|X
argument_list|>
block|{
DECL|field|iter
specifier|private
name|Iterator
argument_list|<
name|X
argument_list|>
name|iter
decl_stmt|;
DECL|field|data
specifier|private
name|ArrayList
argument_list|<
name|X
argument_list|>
name|data
decl_stmt|;
DECL|field|hold
specifier|private
name|X
name|hold
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|method|ArrayListBackedIterator ()
specifier|public
name|ArrayListBackedIterator
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|X
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ArrayListBackedIterator (ArrayList<X> data)
specifier|public
name|ArrayListBackedIterator
parameter_list|(
name|ArrayList
argument_list|<
name|X
argument_list|>
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|iter
operator|=
name|this
operator|.
name|data
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
DECL|method|next (X val)
specifier|public
name|boolean
name|next
parameter_list|(
name|X
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|conf
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|hold
condition|)
block|{
name|hold
operator|=
name|WritableUtils
operator|.
name|clone
argument_list|(
name|val
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|conf
argument_list|,
name|val
argument_list|,
name|hold
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|replay (X val)
specifier|public
name|boolean
name|replay
parameter_list|(
name|X
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|conf
argument_list|,
name|hold
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|iter
operator|=
name|data
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
DECL|method|add (X item)
specifier|public
name|void
name|add
parameter_list|(
name|X
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|.
name|add
argument_list|(
name|WritableUtils
operator|.
name|clone
argument_list|(
name|item
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|iter
operator|=
literal|null
expr_stmt|;
name|data
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|data
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

