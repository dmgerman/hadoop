begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|Utils
import|;
end_import

begin_comment
comment|/**  *   * utilities for generating kyes, hashes and verifying them for shuffle  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|SecureShuffleUtils
specifier|public
class|class
name|SecureShuffleUtils
block|{
DECL|field|HTTP_HEADER_URL_HASH
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_HEADER_URL_HASH
init|=
literal|"UrlHash"
decl_stmt|;
DECL|field|HTTP_HEADER_REPLY_URL_HASH
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_HEADER_REPLY_URL_HASH
init|=
literal|"ReplyHash"
decl_stmt|;
comment|/**    * Base64 encoded hash of msg    * @param msg    */
DECL|method|generateHash (byte[] msg, SecretKey key)
specifier|public
specifier|static
name|String
name|generateHash
parameter_list|(
name|byte
index|[]
name|msg
parameter_list|,
name|SecretKey
name|key
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|generateByteHash
argument_list|(
name|msg
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * calculate hash of msg    * @param msg    * @return    */
DECL|method|generateByteHash (byte[] msg, SecretKey key)
specifier|private
specifier|static
name|byte
index|[]
name|generateByteHash
parameter_list|(
name|byte
index|[]
name|msg
parameter_list|,
name|SecretKey
name|key
parameter_list|)
block|{
return|return
name|JobTokenSecretManager
operator|.
name|computeHash
argument_list|(
name|msg
argument_list|,
name|key
argument_list|)
return|;
block|}
comment|/**    * verify that hash equals to HMacHash(msg)    * @param newHash    * @return true if is the same    */
DECL|method|verifyHash (byte[] hash, byte[] msg, SecretKey key)
specifier|private
specifier|static
name|boolean
name|verifyHash
parameter_list|(
name|byte
index|[]
name|hash
parameter_list|,
name|byte
index|[]
name|msg
parameter_list|,
name|SecretKey
name|key
parameter_list|)
block|{
name|byte
index|[]
name|msg_hash
init|=
name|generateByteHash
argument_list|(
name|msg
argument_list|,
name|key
argument_list|)
decl_stmt|;
return|return
name|Utils
operator|.
name|compareBytes
argument_list|(
name|msg_hash
argument_list|,
literal|0
argument_list|,
name|msg_hash
operator|.
name|length
argument_list|,
name|hash
argument_list|,
literal|0
argument_list|,
name|hash
operator|.
name|length
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * Aux util to calculate hash of a String    * @param enc_str    * @param key    * @return Base64 encodedHash    * @throws IOException    */
DECL|method|hashFromString (String enc_str, SecretKey key)
specifier|public
specifier|static
name|String
name|hashFromString
parameter_list|(
name|String
name|enc_str
parameter_list|,
name|SecretKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|generateHash
argument_list|(
name|enc_str
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
return|;
block|}
comment|/**    * verify that base64Hash is same as HMacHash(msg)      * @param base64Hash (Base64 encoded hash)    * @param msg    * @throws IOException if not the same    */
DECL|method|verifyReply (String base64Hash, String msg, SecretKey key)
specifier|public
specifier|static
name|void
name|verifyReply
parameter_list|(
name|String
name|base64Hash
parameter_list|,
name|String
name|msg
parameter_list|,
name|SecretKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|hash
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|base64Hash
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|res
init|=
name|verifyHash
argument_list|(
name|hash
argument_list|,
name|msg
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|true
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Verification of the hashReply failed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Shuffle specific utils - build string for encoding from URL    * @param url    * @return string for encoding    */
DECL|method|buildMsgFrom (URL url)
specifier|public
specifier|static
name|String
name|buildMsgFrom
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
return|return
name|buildMsgFrom
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
name|url
operator|.
name|getQuery
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Shuffle specific utils - build string for encoding from URL    * @param request    * @return string for encoding    */
DECL|method|buildMsgFrom (HttpServletRequest request )
specifier|public
specifier|static
name|String
name|buildMsgFrom
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|buildMsgFrom
argument_list|(
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|request
operator|.
name|getLocalPort
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Shuffle specific utils - build string for encoding from URL    * @param uri_path    * @param uri_query    * @return string for encoding    */
DECL|method|buildMsgFrom (String uri_path, String uri_query, int port)
specifier|private
specifier|static
name|String
name|buildMsgFrom
parameter_list|(
name|String
name|uri_path
parameter_list|,
name|String
name|uri_query
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
operator|+
name|uri_path
operator|+
literal|"?"
operator|+
name|uri_query
return|;
block|}
comment|/**    * byte array to Hex String    * @param ba    * @return string with HEX value of the key    */
DECL|method|toHex (byte[] ba)
specifier|public
specifier|static
name|String
name|toHex
parameter_list|(
name|byte
index|[]
name|ba
parameter_list|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|ba
control|)
block|{
name|ps
operator|.
name|printf
argument_list|(
literal|"%x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|baos
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

