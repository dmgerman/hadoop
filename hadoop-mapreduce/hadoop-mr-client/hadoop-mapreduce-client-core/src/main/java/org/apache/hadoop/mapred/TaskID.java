begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_comment
comment|/**  * TaskID represents the immutable and unique identifier for   * a Map or Reduce Task. Each TaskID encompasses multiple attempts made to  * execute the Map or Reduce Task, each of which are uniquely indentified by  * their TaskAttemptID.  *   * TaskID consists of 3 parts. First part is the {@link JobID}, that this   * TaskInProgress belongs to. Second part of the TaskID is either 'm' or 'r'   * representing whether the task is a map task or a reduce task.   * And the third part is the task number.<br>   * An example TaskID is :   *<code>task_200707121733_0003_m_000005</code> , which represents the  * fifth map task in the third job running at the jobtracker   * started at<code>200707121733</code>.   *<p>  * Applications should never construct or parse TaskID strings  * , but rather use appropriate constructors or {@link #forName(String)}   * method.   *   * @see JobID  * @see TaskAttemptID  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|TaskID
specifier|public
class|class
name|TaskID
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
block|{
comment|/**    * Constructs a TaskID object from given {@link JobID}.      * @param jobId JobID that this tip belongs to     * @param isMap whether the tip is a map     * @param id the tip number    * @deprecated Use {@link #TaskID(String, int, TaskType, int)}    */
annotation|@
name|Deprecated
DECL|method|TaskID (org.apache.hadoop.mapreduce.JobID jobId, boolean isMap,int id)
specifier|public
name|TaskID
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobId
parameter_list|,
name|boolean
name|isMap
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|jobId
argument_list|,
name|isMap
condition|?
name|TaskType
operator|.
name|MAP
else|:
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a TaskInProgressId object from given parts.    * @param jtIdentifier jobTracker identifier    * @param jobId job number     * @param isMap whether the tip is a map     * @param id the tip number    * @deprecated Use {@link #TaskID(org.apache.hadoop.mapreduce.JobID, TaskType,    * int)}    */
annotation|@
name|Deprecated
DECL|method|TaskID (String jtIdentifier, int jobId, boolean isMap, int id)
specifier|public
name|TaskID
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|int
name|jobId
parameter_list|,
name|boolean
name|isMap
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|,
name|isMap
condition|?
name|TaskType
operator|.
name|MAP
else|:
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a TaskID object from given {@link JobID}.      * @param jobId JobID that this tip belongs to     * @param type the {@link TaskType}     * @param id the tip number    */
DECL|method|TaskID (org.apache.hadoop.mapreduce.JobID jobId, TaskType type,int id)
specifier|public
name|TaskID
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobId
parameter_list|,
name|TaskType
name|type
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|jobId
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a TaskInProgressId object from given parts.    * @param jtIdentifier jobTracker identifier    * @param jobId job number     * @param type the {@link TaskType}     * @param id the tip number    */
DECL|method|TaskID (String jtIdentifier, int jobId, TaskType type, int id)
specifier|public
name|TaskID
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|int
name|jobId
parameter_list|,
name|TaskType
name|type
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|JobID
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|)
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|TaskID ()
specifier|public
name|TaskID
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|JobID
argument_list|()
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Downgrade a new TaskID to an old one    * @param old a new or old TaskID    * @return either old or a new TaskID build to match old    */
DECL|method|downgrade (org.apache.hadoop.mapreduce.TaskID old)
specifier|public
specifier|static
name|TaskID
name|downgrade
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
name|old
parameter_list|)
block|{
if|if
condition|(
name|old
operator|instanceof
name|TaskID
condition|)
block|{
return|return
operator|(
name|TaskID
operator|)
name|old
return|;
block|}
else|else
block|{
return|return
operator|new
name|TaskID
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|old
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|,
name|old
operator|.
name|getTaskType
argument_list|()
argument_list|,
name|old
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Deprecated
DECL|method|read (DataInput in)
specifier|public
specifier|static
name|TaskID
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskID
name|tipId
init|=
operator|new
name|TaskID
argument_list|()
decl_stmt|;
name|tipId
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|tipId
return|;
block|}
DECL|method|getJobID ()
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
operator|(
name|JobID
operator|)
name|super
operator|.
name|getJobID
argument_list|()
return|;
block|}
comment|/**     * Returns a regex pattern which matches task IDs. Arguments can     * be given null, in which case that part of the regex will be generic.      * For example to obtain a regex matching<i>the first map task</i>     * of<i>any jobtracker</i>, of<i>any job</i>, we would use :    *<pre>     * TaskID.getTaskIDsPattern(null, null, true, 1);    *</pre>    * which will return :    *<pre> "task_[^_]*_[0-9]*_m_000001*"</pre>     * @param jtIdentifier jobTracker identifier, or null    * @param jobId job number, or null    * @param isMap whether the tip is a map, or null     * @param taskId taskId number, or null    * @return a regex pattern matching TaskIDs    * @deprecated Use {@link TaskID#getTaskIDsPattern(String, Integer, TaskType,    * Integer)}    */
annotation|@
name|Deprecated
DECL|method|getTaskIDsPattern (String jtIdentifier, Integer jobId , Boolean isMap, Integer taskId)
specifier|public
specifier|static
name|String
name|getTaskIDsPattern
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|Integer
name|jobId
parameter_list|,
name|Boolean
name|isMap
parameter_list|,
name|Integer
name|taskId
parameter_list|)
block|{
return|return
name|getTaskIDsPattern
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|,
name|isMap
condition|?
name|TaskType
operator|.
name|MAP
else|:
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|taskId
argument_list|)
return|;
block|}
comment|/**     * Returns a regex pattern which matches task IDs. Arguments can     * be given null, in which case that part of the regex will be generic.      * For example to obtain a regex matching<i>the first map task</i>     * of<i>any jobtracker</i>, of<i>any job</i>, we would use :    *<pre>     * TaskID.getTaskIDsPattern(null, null, true, 1);    *</pre>    * which will return :    *<pre> "task_[^_]*_[0-9]*_m_000001*"</pre>     * @param jtIdentifier jobTracker identifier, or null    * @param jobId job number, or null    * @param type the {@link TaskType}, or null     * @param taskId taskId number, or null    * @return a regex pattern matching TaskIDs    */
annotation|@
name|Deprecated
DECL|method|getTaskIDsPattern (String jtIdentifier, Integer jobId , TaskType type, Integer taskId)
specifier|public
specifier|static
name|String
name|getTaskIDsPattern
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|Integer
name|jobId
parameter_list|,
name|TaskType
name|type
parameter_list|,
name|Integer
name|taskId
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|TASK
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|getTaskIDsPatternWOPrefix
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|,
name|type
argument_list|,
name|taskId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Deprecated
DECL|method|getTaskIDsPatternWOPrefix (String jtIdentifier , Integer jobId, TaskType type, Integer taskId)
specifier|static
name|StringBuilder
name|getTaskIDsPatternWOPrefix
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|Integer
name|jobId
parameter_list|,
name|TaskType
name|type
parameter_list|,
name|Integer
name|taskId
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|JobID
operator|.
name|getJobIDsPatternWOPrefix
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|type
operator|!=
literal|null
condition|?
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
operator|.
name|getRepresentingCharacter
argument_list|(
name|type
argument_list|)
operator|)
else|:
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
operator|.
name|getAllTaskTypes
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|taskId
operator|!=
literal|null
condition|?
name|idFormat
operator|.
name|format
argument_list|(
name|taskId
argument_list|)
else|:
literal|"[0-9]*"
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|forName (String str )
specifier|public
specifier|static
name|TaskID
name|forName
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
operator|(
name|TaskID
operator|)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
operator|.
name|forName
argument_list|(
name|str
argument_list|)
return|;
block|}
block|}
end_class

end_unit

