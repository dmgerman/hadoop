begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.aggregate
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * This class implements a value aggregator that computes the   * histogram of a sequence of strings.  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|ValueHistogram
specifier|public
class|class
name|ValueHistogram
implements|implements
name|ValueAggregator
argument_list|<
name|String
argument_list|>
block|{
DECL|field|items
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|items
init|=
literal|null
decl_stmt|;
DECL|method|ValueHistogram ()
specifier|public
name|ValueHistogram
parameter_list|()
block|{
name|items
operator|=
operator|new
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * add the given val to the aggregator.    *     * @param val the value to be added. It is expected to be a string    * in the form of xxxx\tnum, meaning xxxx has num occurrences.    */
DECL|method|addNextValue (Object val)
specifier|public
name|void
name|addNextValue
parameter_list|(
name|Object
name|val
parameter_list|)
block|{
name|String
name|valCountStr
init|=
name|val
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|valCountStr
operator|.
name|lastIndexOf
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
name|String
name|valStr
init|=
name|valCountStr
decl_stmt|;
name|String
name|countStr
init|=
literal|"1"
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|valStr
operator|=
name|valCountStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|countStr
operator|=
name|valCountStr
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|Long
name|count
init|=
operator|(
name|Long
operator|)
name|this
operator|.
name|items
operator|.
name|get
argument_list|(
name|valStr
argument_list|)
decl_stmt|;
name|long
name|inc
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|countStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
name|inc
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
name|count
operator|.
name|longValue
argument_list|()
operator|+
name|inc
expr_stmt|;
block|}
name|items
operator|.
name|put
argument_list|(
name|valStr
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the string representation of this aggregator.    * It includes the following basic statistics of the histogram:    *    the number of unique values    *    the minimum value    *    the media value    *    the maximum value    *    the average value    *    the standard deviation    */
DECL|method|getReport ()
specifier|public
name|String
name|getReport
parameter_list|()
block|{
name|long
index|[]
name|counts
init|=
operator|new
name|long
index|[
name|items
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iter
init|=
name|items
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Long
name|count
init|=
operator|(
name|Long
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|counts
index|[
name|i
index|]
operator|=
name|count
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|i
operator|+=
literal|1
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|counts
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|counts
operator|.
name|length
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
name|long
name|acc
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|counts
operator|.
name|length
condition|)
block|{
name|long
name|nextVal
init|=
name|counts
index|[
name|i
index|]
decl_stmt|;
name|int
name|j
init|=
name|i
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|j
operator|<
name|counts
operator|.
name|length
operator|&&
name|counts
index|[
name|j
index|]
operator|==
name|nextVal
condition|)
block|{
name|j
operator|++
expr_stmt|;
block|}
name|acc
operator|+=
name|nextVal
operator|*
operator|(
name|j
operator|-
name|i
operator|)
expr_stmt|;
name|i
operator|=
name|j
expr_stmt|;
block|}
name|double
name|average
init|=
literal|0.0
decl_stmt|;
name|double
name|sd
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
name|counts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|counts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|counts
index|[
name|counts
operator|.
name|length
operator|/
literal|2
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|counts
index|[
name|counts
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|average
operator|=
name|acc
operator|*
literal|1.0
operator|/
name|counts
operator|.
name|length
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|average
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|counts
operator|.
name|length
condition|)
block|{
name|double
name|nextDiff
init|=
name|counts
index|[
name|i
index|]
operator|-
name|average
decl_stmt|;
name|sd
operator|+=
name|nextDiff
operator|*
name|nextDiff
expr_stmt|;
name|i
operator|+=
literal|1
expr_stmt|;
block|}
name|sd
operator|=
name|Math
operator|.
name|sqrt
argument_list|(
name|sd
operator|/
name|counts
operator|.
name|length
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|sd
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**     *     * @return a string representation of the list of value/frequence pairs of     * the histogram    */
DECL|method|getReportDetails ()
specifier|public
name|String
name|getReportDetails
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iter
init|=
name|items
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|en
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|en
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Long
name|count
init|=
operator|(
name|Long
operator|)
name|en
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|count
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    *  @return a list value/frequence pairs.    *  The return value is expected to be used by the reducer.    */
DECL|method|getCombinerOutput ()
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getCombinerOutput
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|retv
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iter
init|=
name|items
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|en
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|en
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Long
name|count
init|=
operator|(
name|Long
operator|)
name|en
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|retv
operator|.
name|add
argument_list|(
name|val
operator|.
name|toString
argument_list|()
operator|+
literal|"\t"
operator|+
name|count
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|retv
return|;
block|}
comment|/**     *     * @return a TreeMap representation of the histogram    */
DECL|method|getReportItems ()
specifier|public
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|getReportItems
parameter_list|()
block|{
return|return
name|items
return|;
block|}
comment|/**     * reset the aggregator    */
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|items
operator|=
operator|new
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

