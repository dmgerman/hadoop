begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * TaskAttemptID represents the immutable and unique identifier for   * a task attempt. Each task attempt is one particular instance of a Map or  * Reduce Task identified by its TaskID.   *   * TaskAttemptID consists of 2 parts. First part is the   * {@link TaskID}, that this TaskAttemptID belongs to.  * Second part is the task attempt number.<br>   * An example TaskAttemptID is :   *<code>attempt_200707121733_0003_m_000005_0</code> , which represents the  * zeroth task attempt for the fifth map task in the third job   * running at the jobtracker started at<code>200707121733</code>.  *<p>  * Applications should never construct or parse TaskAttemptID strings  * , but rather use appropriate constructors or {@link #forName(String)}   * method.   *   * @see JobID  * @see TaskID  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|TaskAttemptID
specifier|public
class|class
name|TaskAttemptID
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ID
block|{
DECL|field|ATTEMPT
specifier|protected
specifier|static
specifier|final
name|String
name|ATTEMPT
init|=
literal|"attempt"
decl_stmt|;
DECL|field|taskId
specifier|private
name|TaskID
name|taskId
decl_stmt|;
comment|/**    * Constructs a TaskAttemptID object from given {@link TaskID}.      * @param taskId TaskID that this task belongs to      * @param id the task attempt number    */
DECL|method|TaskAttemptID (TaskID taskId, int id)
specifier|public
name|TaskAttemptID
parameter_list|(
name|TaskID
name|taskId
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"taskId cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
block|}
comment|/**    * Constructs a TaskId object from given parts.    * @param jtIdentifier jobTracker identifier    * @param jobId job number     * @param type the TaskType     * @param taskId taskId number    * @param id the task attempt number    */
DECL|method|TaskAttemptID (String jtIdentifier, int jobId, TaskType type, int taskId, int id)
specifier|public
name|TaskAttemptID
parameter_list|(
name|String
name|jtIdentifier
parameter_list|,
name|int
name|jobId
parameter_list|,
name|TaskType
name|type
parameter_list|,
name|int
name|taskId
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
argument_list|,
name|type
argument_list|,
name|taskId
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|TaskAttemptID ()
specifier|public
name|TaskAttemptID
parameter_list|()
block|{
name|taskId
operator|=
operator|new
name|TaskID
argument_list|()
expr_stmt|;
block|}
comment|/** Returns the {@link JobID} object that this task attempt belongs to */
DECL|method|getJobID ()
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
name|taskId
operator|.
name|getJobID
argument_list|()
return|;
block|}
comment|/** Returns the {@link TaskID} object that this task attempt belongs to */
DECL|method|getTaskID ()
specifier|public
name|TaskID
name|getTaskID
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
comment|/**Returns the TaskType of the TaskAttemptID */
DECL|method|getTaskType ()
specifier|public
name|TaskType
name|getTaskType
parameter_list|()
block|{
return|return
name|taskId
operator|.
name|getTaskType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|TaskAttemptID
name|that
init|=
operator|(
name|TaskAttemptID
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|taskId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|taskId
argument_list|)
return|;
block|}
comment|/**    * Add the unique string to the StringBuilder    * @param builder the builder to append ot    * @return the builder that was passed in.    */
DECL|method|appendTo (StringBuilder builder)
specifier|protected
name|StringBuilder
name|appendTo
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
return|return
name|taskId
operator|.
name|appendTo
argument_list|(
name|builder
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|taskId
operator|.
name|hashCode
argument_list|()
operator|*
literal|5
operator|+
name|id
return|;
block|}
comment|/**Compare TaskIds by first tipIds, then by task numbers. */
annotation|@
name|Override
DECL|method|compareTo (ID o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ID
name|o
parameter_list|)
block|{
name|TaskAttemptID
name|that
init|=
operator|(
name|TaskAttemptID
operator|)
name|o
decl_stmt|;
name|int
name|tipComp
init|=
name|this
operator|.
name|taskId
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|taskId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tipComp
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|id
operator|-
name|that
operator|.
name|id
return|;
block|}
else|else
return|return
name|tipComp
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|appendTo
argument_list|(
operator|new
name|StringBuilder
argument_list|(
name|ATTEMPT
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Construct a TaskAttemptID object from given string     * @return constructed TaskAttemptID object or null if the given String is null    * @throws IllegalArgumentException if the given string is malformed    */
DECL|method|forName (String str )
specifier|public
specifier|static
name|TaskAttemptID
name|forName
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
name|String
index|[]
name|parts
init|=
name|str
operator|.
name|split
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|SEPARATOR
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|6
condition|)
block|{
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|ATTEMPT
argument_list|)
condition|)
block|{
name|String
name|type
init|=
name|parts
index|[
literal|3
index|]
decl_stmt|;
name|TaskType
name|t
init|=
name|TaskID
operator|.
name|getTaskType
argument_list|(
name|type
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|t
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|4
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|5
index|]
argument_list|)
argument_list|)
return|;
block|}
else|else
throw|throw
operator|new
name|Exception
argument_list|()
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//fall below
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TaskAttemptId string : "
operator|+
name|str
operator|+
literal|" is not properly formed"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

