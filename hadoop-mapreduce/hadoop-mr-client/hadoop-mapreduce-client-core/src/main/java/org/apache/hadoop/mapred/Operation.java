begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_comment
comment|/**  * Generic operation that maps to the dependent set of ACLs that drive the  * authorization of the operation.  */
end_comment

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|enum|Operation
specifier|public
enum|enum
name|Operation
block|{
DECL|enumConstant|VIEW_JOB_COUNTERS
name|VIEW_JOB_COUNTERS
parameter_list|(
name|QueueACL
operator|.
name|ADMINISTER_JOBS
parameter_list|,
name|JobACL
operator|.
name|VIEW_JOB
parameter_list|)
operator|,
DECL|enumConstant|VIEW_JOB_DETAILS
constructor|VIEW_JOB_DETAILS(QueueACL.ADMINISTER_JOBS
operator|,
constructor|JobACL.VIEW_JOB
block|)
enum|,
DECL|enumConstant|VIEW_TASK_LOGS
name|VIEW_TASK_LOGS
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_JOBS
argument_list|,
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
operator|,
DECL|enumConstant|KILL_JOB
name|KILL_JOB
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_JOBS
argument_list|,
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|)
operator|,
DECL|enumConstant|FAIL_TASK
name|FAIL_TASK
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_JOBS
argument_list|,
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|)
operator|,
DECL|enumConstant|KILL_TASK
name|KILL_TASK
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_JOBS
argument_list|,
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|)
operator|,
DECL|enumConstant|SET_JOB_PRIORITY
name|SET_JOB_PRIORITY
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_JOBS
argument_list|,
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|)
operator|,
DECL|enumConstant|SUBMIT_JOB
name|SUBMIT_JOB
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_JOB
argument_list|,
literal|null
argument_list|)
enum|;
end_enum

begin_decl_stmt
DECL|field|qACLNeeded
specifier|public
name|QueueACL
name|qACLNeeded
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|jobACLNeeded
specifier|public
name|JobACL
name|jobACLNeeded
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|Operation (QueueACL qACL, JobACL jobACL)
name|Operation
argument_list|(
name|QueueACL
name|qACL
argument_list|,
name|JobACL
name|jobACL
argument_list|)
block|{
name|this
operator|.
name|qACLNeeded
operator|=
name|qACL
block|;
name|this
operator|.
name|jobACLNeeded
operator|=
name|jobACL
block|;   }
end_expr_stmt

unit|}
end_unit

