begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.task.reduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BoundedByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFile
operator|.
name|Writer
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|InMemoryWriter
specifier|public
class|class
name|InMemoryWriter
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|Writer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|out
specifier|private
name|DataOutputStream
name|out
decl_stmt|;
DECL|method|InMemoryWriter (BoundedByteArrayOutputStream arrayStream)
specifier|public
name|InMemoryWriter
parameter_list|(
name|BoundedByteArrayOutputStream
name|arrayStream
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|out
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|IFileOutputStream
argument_list|(
name|arrayStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|append (K key, V value)
specifier|public
name|void
name|append
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"InMemoryWriter.append(K key, V value"
argument_list|)
throw|;
block|}
DECL|method|append (DataInputBuffer key, DataInputBuffer value)
specifier|public
name|void
name|append
parameter_list|(
name|DataInputBuffer
name|key
parameter_list|,
name|DataInputBuffer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|keyLength
init|=
name|key
operator|.
name|getLength
argument_list|()
operator|-
name|key
operator|.
name|getPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyLength
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Negative key-length not allowed: "
operator|+
name|keyLength
operator|+
literal|" for "
operator|+
name|key
argument_list|)
throw|;
block|}
name|int
name|valueLength
init|=
name|value
operator|.
name|getLength
argument_list|()
operator|-
name|value
operator|.
name|getPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueLength
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Negative value-length not allowed: "
operator|+
name|valueLength
operator|+
literal|" for "
operator|+
name|value
argument_list|)
throw|;
block|}
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|key
operator|.
name|getData
argument_list|()
argument_list|,
name|key
operator|.
name|getPosition
argument_list|()
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|value
operator|.
name|getData
argument_list|()
argument_list|,
name|value
operator|.
name|getPosition
argument_list|()
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Write EOF_MARKER for key/value length
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|IFile
operator|.
name|EOF_MARKER
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|IFile
operator|.
name|EOF_MARKER
argument_list|)
expr_stmt|;
comment|// Close the stream
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

