begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|MRClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FailTaskAttemptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetCountersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDiagnosticsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetJobReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskAttemptCompletionEventsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetTaskReportsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillJobRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillTaskAttemptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JHConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|jobhistory
operator|.
name|JobHistoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ApplicationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|SchedulerSecurityInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|ClientRMSecurityInfo
import|;
end_import

begin_class
DECL|class|ClientServiceDelegate
specifier|public
class|class
name|ClientServiceDelegate
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientServiceDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|currentAppId
specifier|private
name|ApplicationId
name|currentAppId
decl_stmt|;
DECL|field|currentAppState
specifier|private
name|ApplicationState
name|currentAppState
init|=
name|ApplicationState
operator|.
name|NEW
decl_stmt|;
DECL|field|rm
specifier|private
specifier|final
name|ResourceMgrDelegate
name|rm
decl_stmt|;
DECL|field|realProxy
specifier|private
name|MRClientProtocol
name|realProxy
init|=
literal|null
decl_stmt|;
DECL|field|serviceAddr
specifier|private
name|String
name|serviceAddr
init|=
literal|""
decl_stmt|;
DECL|field|serviceHttpAddr
specifier|private
name|String
name|serviceHttpAddr
init|=
literal|""
decl_stmt|;
DECL|field|recordFactory
specifier|private
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|ClientServiceDelegate (Configuration conf, ResourceMgrDelegate rm)
name|ClientServiceDelegate
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ResourceMgrDelegate
name|rm
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Cloning for modifying.
comment|// For faster redirects from AM to HS.
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
block|}
DECL|method|getProxy (JobID jobId)
specifier|private
name|MRClientProtocol
name|getProxy
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
return|return
name|getProxy
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|jobId
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getRefreshedProxy (JobID jobId)
specifier|private
name|MRClientProtocol
name|getRefreshedProxy
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
return|return
name|getProxy
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|jobId
argument_list|)
operator|.
name|getAppId
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getProxy (ApplicationId appId, boolean forceRefresh)
specifier|private
name|MRClientProtocol
name|getProxy
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|boolean
name|forceRefresh
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
if|if
condition|(
operator|!
name|appId
operator|.
name|equals
argument_list|(
name|currentAppId
argument_list|)
operator|||
name|forceRefresh
operator|||
name|realProxy
operator|==
literal|null
condition|)
block|{
name|currentAppId
operator|=
name|appId
expr_stmt|;
name|refreshProxy
argument_list|()
expr_stmt|;
block|}
return|return
name|realProxy
return|;
block|}
DECL|method|refreshProxy ()
specifier|private
name|void
name|refreshProxy
parameter_list|()
throws|throws
name|YarnRemoteException
block|{
comment|//TODO RM NPEs for unknown jobs. History may still be aware.
comment|// Possibly allow nulls through the PB tunnel, otherwise deal with an exception
comment|// and redirect to the history server.
name|ApplicationReport
name|application
init|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|currentAppId
argument_list|)
decl_stmt|;
while|while
condition|(
name|ApplicationState
operator|.
name|RUNNING
operator|.
name|equals
argument_list|(
name|application
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|application
operator|.
name|getHost
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|application
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"AM not assigned to Job. Waiting to get the AM ..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application state is "
operator|+
name|application
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|application
operator|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|currentAppId
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|serviceAddr
operator|=
name|application
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|application
operator|.
name|getRpcPort
argument_list|()
expr_stmt|;
name|serviceHttpAddr
operator|=
name|application
operator|.
name|getTrackingUrl
argument_list|()
expr_stmt|;
name|currentAppState
operator|=
name|application
operator|.
name|getState
argument_list|()
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|String
name|clientTokenEncoded
init|=
name|application
operator|.
name|getClientToken
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
name|clientToken
init|=
operator|new
name|Token
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|clientToken
operator|.
name|decodeFromUrlString
argument_list|(
name|clientTokenEncoded
argument_list|)
expr_stmt|;
name|clientToken
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
name|application
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|application
operator|.
name|getRpcPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|addToken
argument_list|(
name|clientToken
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to "
operator|+
name|serviceAddr
argument_list|)
expr_stmt|;
name|instantiateAMProxy
argument_list|(
name|serviceAddr
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//possibly
comment|//possibly the AM has crashed
comment|//there may be some time before AM is restarted
comment|//keep retrying by getting the address from RM
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not connect to "
operator|+
name|serviceAddr
operator|+
literal|". Waiting for getting the latest AM address..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{         }
name|application
operator|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|currentAppId
argument_list|)
expr_stmt|;
block|}
block|}
name|currentAppState
operator|=
name|application
operator|.
name|getState
argument_list|()
expr_stmt|;
comment|/** we just want to return if its allocating, so that we dont       * block on it. This is to be able to return job status       * on a allocating Application.      */
if|if
condition|(
name|currentAppState
operator|==
name|ApplicationState
operator|.
name|NEW
condition|)
block|{
name|realProxy
operator|=
literal|null
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|currentAppState
operator|==
name|ApplicationState
operator|.
name|SUCCEEDED
operator|||
name|currentAppState
operator|==
name|ApplicationState
operator|.
name|FAILED
operator|||
name|currentAppState
operator|==
name|ApplicationState
operator|.
name|KILLED
condition|)
block|{
name|serviceAddr
operator|=
name|conf
operator|.
name|get
argument_list|(
name|JHConfig
operator|.
name|HS_BIND_ADDRESS
argument_list|,
name|JHConfig
operator|.
name|DEFAULT_HS_BIND_ADDRESS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application state is completed. "
operator|+
literal|"Redirecting to job history server "
operator|+
name|serviceAddr
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceHttpAddr
operator|=
name|JobHistoryUtils
operator|.
name|getHistoryUrl
argument_list|(
name|conf
argument_list|,
name|currentAppId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get history url"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|serviceHttpAddr
operator|=
literal|"UNKNOWN"
expr_stmt|;
block|}
try|try
block|{
name|instantiateHistoryProxy
argument_list|(
name|serviceAddr
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|instantiateAMProxy (final String serviceAddr)
specifier|private
name|void
name|instantiateAMProxy
parameter_list|(
specifier|final
name|String
name|serviceAddr
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connecting to ApplicationMaster at: "
operator|+
name|serviceAddr
argument_list|)
expr_stmt|;
name|realProxy
operator|=
name|currentUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|MRClientProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MRClientProtocol
name|run
parameter_list|()
block|{
name|Configuration
name|myConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|myConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_SECURITY_INFO
argument_list|,
name|SchedulerSecurityInfo
operator|.
name|class
argument_list|,
name|SecurityInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
return|return
operator|(
name|MRClientProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|serviceAddr
argument_list|)
argument_list|,
name|myConf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connected to ApplicationMaster at: "
operator|+
name|serviceAddr
argument_list|)
expr_stmt|;
block|}
DECL|method|instantiateHistoryProxy (final String serviceAddr)
specifier|private
name|void
name|instantiateHistoryProxy
parameter_list|(
specifier|final
name|String
name|serviceAddr
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connecting to HistoryServer at: "
operator|+
name|serviceAddr
argument_list|)
expr_stmt|;
name|Configuration
name|myConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//TODO This should ideally be using it's own class (instead of ClientRMSecurityInfo)
name|myConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_SECURITY_INFO
argument_list|,
name|ClientRMSecurityInfo
operator|.
name|class
argument_list|,
name|SecurityInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
name|realProxy
operator|=
operator|(
name|MRClientProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|MRClientProtocol
operator|.
name|class
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|serviceAddr
argument_list|)
argument_list|,
name|myConf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connected to HistoryServer at: "
operator|+
name|serviceAddr
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobCounters (JobID arg0)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|getJobCounters
parameter_list|(
name|JobID
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobID
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|arg0
argument_list|)
decl_stmt|;
try|try
block|{
name|GetCountersRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetCountersRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setJobId
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
name|MRClientProtocol
name|protocol
init|=
name|getProxy
argument_list|(
name|arg0
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
comment|/* no AM to connect to, fake counters */
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
argument_list|()
return|;
block|}
return|return
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|protocol
operator|.
name|getCounters
argument_list|(
name|request
argument_list|)
operator|.
name|getCounters
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
comment|//thrown by remote server, no need to redirect
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failing to contact application master"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|GetCountersRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetCountersRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setJobId
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
name|MRClientProtocol
name|protocol
init|=
name|getRefreshedProxy
argument_list|(
name|arg0
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
comment|/* no History to connect to, fake counters */
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
argument_list|()
return|;
block|}
return|return
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|protocol
operator|.
name|getCounters
argument_list|(
name|request
argument_list|)
operator|.
name|getCounters
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
block|}
block|}
DECL|method|getJobHistoryDir ()
specifier|public
name|String
name|getJobHistoryDir
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|JobHistoryUtils
operator|.
name|getConfiguredHistoryServerDoneDirPrefix
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|getTaskCompletionEvents (JobID arg0, int arg1, int arg2)
specifier|public
name|TaskCompletionEvent
index|[]
name|getTaskCompletionEvents
parameter_list|(
name|JobID
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobID
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|arg0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
argument_list|>
name|list
init|=
literal|null
decl_stmt|;
name|GetTaskAttemptCompletionEventsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskAttemptCompletionEventsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|MRClientProtocol
name|protocol
decl_stmt|;
try|try
block|{
name|request
operator|.
name|setJobId
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setFromEventId
argument_list|(
name|arg1
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxEvents
argument_list|(
name|arg2
argument_list|)
expr_stmt|;
name|protocol
operator|=
name|getProxy
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
comment|/** This is hack to get around the issue of faking jobstatus while the AM        * is coming up.        */
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TaskCompletionEvent
index|[
literal|0
index|]
return|;
block|}
name|list
operator|=
name|getProxy
argument_list|(
name|arg0
argument_list|)
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
name|request
argument_list|)
operator|.
name|getCompletionEventList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
comment|//thrown by remote server, no need to redirect
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to contact application master "
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|request
operator|.
name|setJobId
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setFromEventId
argument_list|(
name|arg1
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxEvents
argument_list|(
name|arg2
argument_list|)
expr_stmt|;
name|protocol
operator|=
name|getRefreshedProxy
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TaskCompletionEvent
index|[
literal|0
index|]
return|;
block|}
name|list
operator|=
name|protocol
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
name|request
argument_list|)
operator|.
name|getCompletionEventList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
block|}
return|return
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getTaskDiagnostics (org.apache.hadoop.mapreduce.TaskAttemptID arg0)
specifier|public
name|String
index|[]
name|getTaskDiagnostics
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|arg0
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
name|attemptID
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|arg0
argument_list|)
decl_stmt|;
name|GetDiagnosticsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetDiagnosticsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|MRClientProtocol
name|protocol
decl_stmt|;
try|try
block|{
name|request
operator|.
name|setTaskAttemptId
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
name|protocol
operator|=
name|getProxy
argument_list|(
name|arg0
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
name|list
operator|=
name|getProxy
argument_list|(
name|arg0
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|getDiagnostics
argument_list|(
name|request
argument_list|)
operator|.
name|getDiagnosticsList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
comment|//thrown by remote server, no need to redirect
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to contact application master "
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|protocol
operator|=
name|getRefreshedProxy
argument_list|(
name|arg0
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
name|list
operator|=
name|protocol
operator|.
name|getDiagnostics
argument_list|(
name|request
argument_list|)
operator|.
name|getDiagnosticsList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
block|}
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|list
control|)
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
name|c
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|createFakeJobReport (ApplicationState state, org.apache.hadoop.mapreduce.v2.api.records.JobId jobId, String jobFile)
specifier|private
name|JobStatus
name|createFakeJobReport
parameter_list|(
name|ApplicationState
name|state
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobId
parameter_list|,
name|String
name|jobFile
parameter_list|)
block|{
name|JobReport
name|jobreport
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|JobReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobreport
operator|.
name|setCleanupProgress
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jobreport
operator|.
name|setFinishTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jobreport
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|jobreport
operator|.
name|setMapProgress
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|/** fix this, the start time should be fixed */
name|jobreport
operator|.
name|setStartTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jobreport
operator|.
name|setReduceProgress
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jobreport
operator|.
name|setSetupProgress
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentAppState
operator|==
name|ApplicationState
operator|.
name|NEW
condition|)
block|{
comment|/* the protocol wasnt instantiated because the applicaton wasnt launched        * return a fake report.        */
name|jobreport
operator|.
name|setJobState
argument_list|(
name|JobState
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentAppState
operator|==
name|ApplicationState
operator|.
name|SUBMITTED
condition|)
block|{
name|jobreport
operator|.
name|setJobState
argument_list|(
name|JobState
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentAppState
operator|==
name|ApplicationState
operator|.
name|KILLED
condition|)
block|{
name|jobreport
operator|.
name|setJobState
argument_list|(
name|JobState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentAppState
operator|==
name|ApplicationState
operator|.
name|FAILED
condition|)
block|{
name|jobreport
operator|.
name|setJobState
argument_list|(
name|JobState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
return|return
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|jobreport
argument_list|,
name|jobFile
argument_list|,
name|serviceHttpAddr
argument_list|)
return|;
block|}
DECL|method|getJobStatus (JobID oldJobID)
specifier|public
name|JobStatus
name|getJobStatus
parameter_list|(
name|JobID
name|oldJobID
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|YarnRemoteException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobID
argument_list|)
decl_stmt|;
name|String
name|stagingDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.apps.stagingDir"
argument_list|)
decl_stmt|;
name|String
name|jobFile
init|=
name|stagingDir
operator|+
literal|"/"
operator|+
name|jobId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|JobReport
name|report
init|=
literal|null
decl_stmt|;
name|MRClientProtocol
name|protocol
decl_stmt|;
name|GetJobReportRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetJobReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|request
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|protocol
operator|=
name|getProxy
argument_list|(
name|oldJobID
argument_list|)
expr_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
name|createFakeJobReport
argument_list|(
name|currentAppState
argument_list|,
name|jobId
argument_list|,
name|jobFile
argument_list|)
return|;
block|}
name|report
operator|=
name|getProxy
argument_list|(
name|oldJobID
argument_list|)
operator|.
name|getJobReport
argument_list|(
name|request
argument_list|)
operator|.
name|getJobReport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
comment|//thrown by remote server, no need to redirect
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|request
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|protocol
operator|=
name|getRefreshedProxy
argument_list|(
name|oldJobID
argument_list|)
expr_stmt|;
comment|/* this is possible if an application that was running is killed */
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
name|createFakeJobReport
argument_list|(
name|currentAppState
argument_list|,
name|jobId
argument_list|,
name|jobFile
argument_list|)
return|;
block|}
name|report
operator|=
name|protocol
operator|.
name|getJobReport
argument_list|(
name|request
argument_list|)
operator|.
name|getJobReport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
block|}
return|return
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|report
argument_list|,
name|jobFile
argument_list|,
name|serviceHttpAddr
argument_list|)
return|;
block|}
DECL|method|getTaskReports (JobID jobID, TaskType taskType)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
index|[]
name|getTaskReports
parameter_list|(
name|JobID
name|jobID
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|YarnRemoteException
block|{
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
argument_list|>
name|taskReports
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|nJobID
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
name|GetTaskReportsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetTaskReportsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|MRClientProtocol
name|protocol
init|=
literal|null
decl_stmt|;
try|try
block|{
name|request
operator|.
name|setJobId
argument_list|(
name|nJobID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTaskType
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|taskType
argument_list|)
argument_list|)
expr_stmt|;
name|protocol
operator|=
name|getProxy
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
index|[
literal|0
index|]
return|;
block|}
name|taskReports
operator|=
name|getProxy
argument_list|(
name|jobID
argument_list|)
operator|.
name|getTaskReports
argument_list|(
name|request
argument_list|)
operator|.
name|getTaskReportList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
comment|//thrown by remote server, no need to redirect
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to contact application master "
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|request
operator|.
name|setJobId
argument_list|(
name|nJobID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTaskType
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|taskType
argument_list|)
argument_list|)
expr_stmt|;
name|protocol
operator|=
name|getRefreshedProxy
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
index|[
literal|0
index|]
return|;
block|}
name|taskReports
operator|=
name|protocol
operator|.
name|getTaskReports
argument_list|(
name|request
argument_list|)
operator|.
name|getTaskReportList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
block|}
return|return
name|TypeConverter
operator|.
name|fromYarn
argument_list|(
name|taskReports
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|killTask (TaskAttemptID taskAttemptID, boolean fail)
specifier|public
name|boolean
name|killTask
parameter_list|(
name|TaskAttemptID
name|taskAttemptID
parameter_list|,
name|boolean
name|fail
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
name|attemptID
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|taskAttemptID
argument_list|)
decl_stmt|;
name|KillTaskAttemptRequest
name|killRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|KillTaskAttemptRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|FailTaskAttemptRequest
name|failRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|FailTaskAttemptRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|MRClientProtocol
name|protocol
init|=
name|getProxy
argument_list|(
name|taskAttemptID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
if|if
condition|(
name|fail
condition|)
block|{
name|failRequest
operator|.
name|setTaskAttemptId
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
name|getProxy
argument_list|(
name|taskAttemptID
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|failTaskAttempt
argument_list|(
name|failRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|killRequest
operator|.
name|setTaskAttemptId
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
name|getProxy
argument_list|(
name|taskAttemptID
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|killTaskAttempt
argument_list|(
name|killRequest
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
comment|//thrown by remote server, no need to redirect
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to contact application master "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|MRClientProtocol
name|proxy
init|=
name|getRefreshedProxy
argument_list|(
name|taskAttemptID
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
if|if
condition|(
name|fail
condition|)
block|{
name|failRequest
operator|.
name|setTaskAttemptId
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|failTaskAttempt
argument_list|(
name|failRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|killRequest
operator|.
name|setTaskAttemptId
argument_list|(
name|attemptID
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|killTaskAttempt
argument_list|(
name|killRequest
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|killJob (JobID oldJobID)
specifier|public
name|boolean
name|killJob
parameter_list|(
name|JobID
name|oldJobID
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
name|jobId
init|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|oldJobID
argument_list|)
decl_stmt|;
name|KillJobRequest
name|killRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|KillJobRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|MRClientProtocol
name|protocol
init|=
name|getProxy
argument_list|(
name|oldJobID
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|killRequest
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|protocol
operator|.
name|killJob
argument_list|(
name|killRequest
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
comment|//thrown by remote server, no need to redirect
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Not really requied - if this is always the history context.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to contact application master "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|MRClientProtocol
name|proxy
init|=
name|getRefreshedProxy
argument_list|(
name|oldJobID
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|killRequest
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|protocol
operator|.
name|killJob
argument_list|(
name|killRequest
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|yre
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|RPCUtil
operator|.
name|toString
argument_list|(
name|yre
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|yre
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

