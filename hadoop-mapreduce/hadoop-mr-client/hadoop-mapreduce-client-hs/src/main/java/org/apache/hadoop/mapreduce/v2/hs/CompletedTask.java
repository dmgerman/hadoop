begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.hs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|hs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_class
DECL|class|CompletedTask
specifier|public
class|class
name|CompletedTask
implements|implements
name|Task
block|{
DECL|field|type
specifier|private
specifier|final
name|TaskType
name|type
decl_stmt|;
DECL|field|counters
specifier|private
name|Counters
name|counters
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|finishTime
specifier|private
specifier|final
name|long
name|finishTime
decl_stmt|;
DECL|field|state
specifier|private
name|TaskState
name|state
decl_stmt|;
DECL|field|taskId
specifier|private
specifier|final
name|TaskId
name|taskId
decl_stmt|;
DECL|field|report
specifier|private
specifier|final
name|TaskReport
name|report
decl_stmt|;
DECL|field|attempts
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|attempts
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompletedTask
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|CompletedTask (TaskId taskId, TaskInfo taskInfo)
name|CompletedTask
parameter_list|(
name|TaskId
name|taskId
parameter_list|,
name|TaskInfo
name|taskInfo
parameter_list|)
block|{
comment|//TODO JobHistoryParser.handleTaskFailedAttempt should use state from the event.
name|LOG
operator|.
name|debug
argument_list|(
literal|"HandlingTaskId: ["
operator|+
name|taskId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|taskInfo
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|finishTime
operator|=
name|taskInfo
operator|.
name|getFinishTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|taskInfo
operator|.
name|getTaskType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskInfo
operator|.
name|getCounters
argument_list|()
operator|!=
literal|null
condition|)
name|this
operator|.
name|counters
operator|=
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|taskInfo
operator|.
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|state
operator|=
name|TaskState
operator|.
name|valueOf
argument_list|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|state
operator|=
name|TaskState
operator|.
name|KILLED
expr_stmt|;
block|}
name|report
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|TaskReport
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskAttemptInfo
name|attemptHistory
range|:
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|CompletedTaskAttempt
name|attempt
init|=
operator|new
name|CompletedTaskAttempt
argument_list|(
name|taskId
argument_list|,
name|attemptHistory
argument_list|)
decl_stmt|;
name|report
operator|.
name|addAllDiagnostics
argument_list|(
name|attempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO TMI?
name|attempts
operator|.
name|put
argument_list|(
name|attempt
operator|.
name|getID
argument_list|()
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
if|if
condition|(
name|attemptHistory
operator|.
name|getTaskStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|attemptHistory
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskState
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
name|report
operator|.
name|getSuccessfulAttempt
argument_list|()
operator|==
literal|null
condition|)
block|{
name|report
operator|.
name|setSuccessfulAttempt
argument_list|(
name|TypeConverter
operator|.
name|toYarn
argument_list|(
name|attemptHistory
operator|.
name|getAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|report
operator|.
name|setTaskId
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|report
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|report
operator|.
name|setFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTaskState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|report
operator|.
name|setProgress
argument_list|(
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setCounters
argument_list|(
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|addAllRunningAttempts
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptId
argument_list|>
argument_list|(
name|attempts
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|canCommit (TaskAttemptId taskAttemptID)
specifier|public
name|boolean
name|canCommit
parameter_list|(
name|TaskAttemptId
name|taskAttemptID
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getAttempt (TaskAttemptId attemptID)
specifier|public
name|TaskAttempt
name|getAttempt
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
return|return
name|attempts
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAttempts ()
specifier|public
name|Map
argument_list|<
name|TaskAttemptId
argument_list|,
name|TaskAttempt
argument_list|>
name|getAttempts
parameter_list|()
block|{
return|return
name|attempts
return|;
block|}
annotation|@
name|Override
DECL|method|getCounters ()
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
return|return
name|counters
return|;
block|}
annotation|@
name|Override
DECL|method|getID ()
specifier|public
name|TaskId
name|getID
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|1.0f
return|;
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|public
name|TaskReport
name|getReport
parameter_list|()
block|{
return|return
name|report
return|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|TaskType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|isFinished ()
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|TaskState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
block|}
end_class

end_unit

