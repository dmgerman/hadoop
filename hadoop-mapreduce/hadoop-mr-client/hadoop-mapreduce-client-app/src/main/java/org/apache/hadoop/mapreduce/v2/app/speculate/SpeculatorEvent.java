begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.speculate
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
operator|.
name|TaskAttemptStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AbstractEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_class
DECL|class|SpeculatorEvent
specifier|public
class|class
name|SpeculatorEvent
extends|extends
name|AbstractEvent
argument_list|<
name|Speculator
operator|.
name|EventType
argument_list|>
block|{
comment|// valid for ATTEMPT_STATUS_UPDATE
DECL|field|reportedStatus
specifier|private
name|TaskAttemptStatus
name|reportedStatus
decl_stmt|;
comment|// valid for TASK_CONTAINER_NEED_UPDATE
DECL|field|taskID
specifier|private
name|TaskId
name|taskID
decl_stmt|;
DECL|field|containersNeededChange
specifier|private
name|int
name|containersNeededChange
decl_stmt|;
comment|// valid for CREATE_JOB
DECL|field|jobID
specifier|private
name|JobId
name|jobID
decl_stmt|;
DECL|method|SpeculatorEvent (JobId jobID, long timestamp)
specifier|public
name|SpeculatorEvent
parameter_list|(
name|JobId
name|jobID
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|super
argument_list|(
name|Speculator
operator|.
name|EventType
operator|.
name|JOB_CREATE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobID
operator|=
name|jobID
expr_stmt|;
block|}
DECL|method|SpeculatorEvent (TaskAttemptStatus reportedStatus, long timestamp)
specifier|public
name|SpeculatorEvent
parameter_list|(
name|TaskAttemptStatus
name|reportedStatus
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|super
argument_list|(
name|Speculator
operator|.
name|EventType
operator|.
name|ATTEMPT_STATUS_UPDATE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|this
operator|.
name|reportedStatus
operator|=
name|reportedStatus
expr_stmt|;
block|}
DECL|method|SpeculatorEvent (TaskAttemptId attemptID, boolean flag, long timestamp)
specifier|public
name|SpeculatorEvent
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|,
name|boolean
name|flag
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|super
argument_list|(
name|Speculator
operator|.
name|EventType
operator|.
name|ATTEMPT_START
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|this
operator|.
name|reportedStatus
operator|=
operator|new
name|TaskAttemptStatus
argument_list|()
expr_stmt|;
name|this
operator|.
name|reportedStatus
operator|.
name|id
operator|=
name|attemptID
expr_stmt|;
name|this
operator|.
name|taskID
operator|=
name|attemptID
operator|.
name|getTaskId
argument_list|()
expr_stmt|;
block|}
comment|/*    * This c'tor creates a TASK_CONTAINER_NEED_UPDATE event .    * We send a +1 event when a task enters a state where it wants a container,    *  and a -1 event when it either gets one or withdraws the request.    * The per job sum of all these events is the number of containers requested    *  but not granted.  The intent is that we only do speculations when the    *  speculation wouldn't compete for containers with tasks which need    *  to be run.    */
DECL|method|SpeculatorEvent (TaskId taskID, int containersNeededChange)
specifier|public
name|SpeculatorEvent
parameter_list|(
name|TaskId
name|taskID
parameter_list|,
name|int
name|containersNeededChange
parameter_list|)
block|{
name|super
argument_list|(
name|Speculator
operator|.
name|EventType
operator|.
name|TASK_CONTAINER_NEED_UPDATE
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskID
operator|=
name|taskID
expr_stmt|;
name|this
operator|.
name|containersNeededChange
operator|=
name|containersNeededChange
expr_stmt|;
block|}
DECL|method|getReportedStatus ()
specifier|public
name|TaskAttemptStatus
name|getReportedStatus
parameter_list|()
block|{
return|return
name|reportedStatus
return|;
block|}
DECL|method|containersNeededChange ()
specifier|public
name|int
name|containersNeededChange
parameter_list|()
block|{
return|return
name|containersNeededChange
return|;
block|}
DECL|method|getTaskID ()
specifier|public
name|TaskId
name|getTaskID
parameter_list|()
block|{
return|return
name|taskID
return|;
block|}
DECL|method|getJobID ()
specifier|public
name|JobId
name|getJobID
parameter_list|()
block|{
return|return
name|jobID
return|;
block|}
block|}
end_class

end_unit

