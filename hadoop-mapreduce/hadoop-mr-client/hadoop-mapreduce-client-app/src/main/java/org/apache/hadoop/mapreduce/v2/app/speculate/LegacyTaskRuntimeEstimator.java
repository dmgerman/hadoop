begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.speculate
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|speculate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptStatusUpdateEvent
operator|.
name|TaskAttemptStatus
import|;
end_import

begin_class
DECL|class|LegacyTaskRuntimeEstimator
specifier|public
class|class
name|LegacyTaskRuntimeEstimator
extends|extends
name|StartEndTimesBase
block|{
DECL|field|attemptRuntimeEstimates
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskAttempt
argument_list|,
name|AtomicLong
argument_list|>
name|attemptRuntimeEstimates
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|TaskAttempt
argument_list|,
name|AtomicLong
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|attemptRuntimeEstimateVariances
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|TaskAttempt
argument_list|,
name|AtomicLong
argument_list|>
name|attemptRuntimeEstimateVariances
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|TaskAttempt
argument_list|,
name|AtomicLong
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|updateAttempt (TaskAttemptStatus status, long timestamp)
specifier|public
name|void
name|updateAttempt
parameter_list|(
name|TaskAttemptStatus
name|status
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|super
operator|.
name|updateAttempt
argument_list|(
name|status
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|TaskAttemptId
name|attemptID
init|=
name|status
operator|.
name|id
decl_stmt|;
name|TaskId
name|taskID
init|=
name|attemptID
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
name|JobId
name|jobID
init|=
name|taskID
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|context
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Task
name|task
init|=
name|job
operator|.
name|getTask
argument_list|(
name|taskID
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TaskAttempt
name|taskAttempt
init|=
name|task
operator|.
name|getAttempt
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskAttempt
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Long
name|boxedStart
init|=
name|startTimes
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|boxedStart
operator|==
literal|null
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|boxedStart
decl_stmt|;
comment|// We need to do two things.
comment|//  1: If this is a completion, we accumulate statistics in the superclass
comment|//  2: If this is not a completion, we learn more about it.
comment|// This is not a completion, but we're cooking.
comment|//
if|if
condition|(
name|taskAttempt
operator|.
name|getState
argument_list|()
operator|==
name|TaskAttemptState
operator|.
name|RUNNING
condition|)
block|{
comment|// See if this task is already in the registry
name|AtomicLong
name|estimateContainer
init|=
name|attemptRuntimeEstimates
operator|.
name|get
argument_list|(
name|taskAttempt
argument_list|)
decl_stmt|;
name|AtomicLong
name|estimateVarianceContainer
init|=
name|attemptRuntimeEstimateVariances
operator|.
name|get
argument_list|(
name|taskAttempt
argument_list|)
decl_stmt|;
if|if
condition|(
name|estimateContainer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|attemptRuntimeEstimates
operator|.
name|get
argument_list|(
name|taskAttempt
argument_list|)
operator|==
literal|null
condition|)
block|{
name|attemptRuntimeEstimates
operator|.
name|put
argument_list|(
name|taskAttempt
argument_list|,
operator|new
name|AtomicLong
argument_list|()
argument_list|)
expr_stmt|;
name|estimateContainer
operator|=
name|attemptRuntimeEstimates
operator|.
name|get
argument_list|(
name|taskAttempt
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|estimateVarianceContainer
operator|==
literal|null
condition|)
block|{
name|attemptRuntimeEstimateVariances
operator|.
name|putIfAbsent
argument_list|(
name|taskAttempt
argument_list|,
operator|new
name|AtomicLong
argument_list|()
argument_list|)
expr_stmt|;
name|estimateVarianceContainer
operator|=
name|attemptRuntimeEstimateVariances
operator|.
name|get
argument_list|(
name|taskAttempt
argument_list|)
expr_stmt|;
block|}
name|long
name|estimate
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|varianceEstimate
init|=
operator|-
literal|1
decl_stmt|;
comment|// This code assumes that we'll never consider starting a third
comment|//  speculative task attempt if two are already running for this task
if|if
condition|(
name|start
operator|>
literal|0
operator|&&
name|timestamp
operator|>
name|start
condition|)
block|{
name|estimate
operator|=
call|(
name|long
call|)
argument_list|(
operator|(
name|timestamp
operator|-
name|start
operator|)
operator|/
name|Math
operator|.
name|max
argument_list|(
literal|0.0001
argument_list|,
name|status
operator|.
name|progress
argument_list|)
argument_list|)
expr_stmt|;
name|varianceEstimate
operator|=
call|(
name|long
call|)
argument_list|(
name|estimate
operator|*
name|status
operator|.
name|progress
operator|/
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|estimateContainer
operator|!=
literal|null
condition|)
block|{
name|estimateContainer
operator|.
name|set
argument_list|(
name|estimate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|estimateVarianceContainer
operator|!=
literal|null
condition|)
block|{
name|estimateVarianceContainer
operator|.
name|set
argument_list|(
name|varianceEstimate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|storedPerAttemptValue (Map<TaskAttempt, AtomicLong> data, TaskAttemptId attemptID)
specifier|private
name|long
name|storedPerAttemptValue
parameter_list|(
name|Map
argument_list|<
name|TaskAttempt
argument_list|,
name|AtomicLong
argument_list|>
name|data
parameter_list|,
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
name|TaskId
name|taskID
init|=
name|attemptID
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
name|JobId
name|jobID
init|=
name|taskID
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|context
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|job
operator|.
name|getTask
argument_list|(
name|taskID
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1L
return|;
block|}
name|TaskAttempt
name|taskAttempt
init|=
name|task
operator|.
name|getAttempt
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskAttempt
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1L
return|;
block|}
name|AtomicLong
name|estimate
init|=
name|data
operator|.
name|get
argument_list|(
name|taskAttempt
argument_list|)
decl_stmt|;
return|return
name|estimate
operator|==
literal|null
condition|?
operator|-
literal|1L
else|:
name|estimate
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|estimatedRuntime (TaskAttemptId attemptID)
specifier|public
name|long
name|estimatedRuntime
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
return|return
name|storedPerAttemptValue
argument_list|(
name|attemptRuntimeEstimates
argument_list|,
name|attemptID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|runtimeEstimateVariance (TaskAttemptId attemptID)
specifier|public
name|long
name|runtimeEstimateVariance
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|)
block|{
return|return
name|storedPerAttemptValue
argument_list|(
name|attemptRuntimeEstimateVariances
argument_list|,
name|attemptID
argument_list|)
return|;
block|}
block|}
end_class

end_unit

