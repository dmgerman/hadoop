begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app.taskclean
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|taskclean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AbstractEvent
import|;
end_import

begin_comment
comment|/**  * This class encapsulates task cleanup event.  *  */
end_comment

begin_class
DECL|class|TaskCleanupEvent
specifier|public
class|class
name|TaskCleanupEvent
extends|extends
name|AbstractEvent
argument_list|<
name|TaskCleaner
operator|.
name|EventType
argument_list|>
block|{
DECL|field|attemptID
specifier|private
specifier|final
name|TaskAttemptId
name|attemptID
decl_stmt|;
DECL|field|committer
specifier|private
specifier|final
name|OutputCommitter
name|committer
decl_stmt|;
DECL|field|attemptContext
specifier|private
specifier|final
name|TaskAttemptContext
name|attemptContext
decl_stmt|;
DECL|method|TaskCleanupEvent (TaskAttemptId attemptID, OutputCommitter committer, TaskAttemptContext attemptContext)
specifier|public
name|TaskCleanupEvent
parameter_list|(
name|TaskAttemptId
name|attemptID
parameter_list|,
name|OutputCommitter
name|committer
parameter_list|,
name|TaskAttemptContext
name|attemptContext
parameter_list|)
block|{
name|super
argument_list|(
name|TaskCleaner
operator|.
name|EventType
operator|.
name|TASK_CLEAN
argument_list|)
expr_stmt|;
name|this
operator|.
name|attemptID
operator|=
name|attemptID
expr_stmt|;
name|this
operator|.
name|committer
operator|=
name|committer
expr_stmt|;
name|this
operator|.
name|attemptContext
operator|=
name|attemptContext
expr_stmt|;
block|}
DECL|method|getAttemptID ()
specifier|public
name|TaskAttemptId
name|getAttemptID
parameter_list|()
block|{
return|return
name|attemptID
return|;
block|}
DECL|method|getCommitter ()
specifier|public
name|OutputCommitter
name|getCommitter
parameter_list|()
block|{
return|return
name|committer
return|;
block|}
DECL|method|getAttemptContext ()
specifier|public
name|TaskAttemptContext
name|getAttemptContext
parameter_list|()
block|{
return|return
name|attemptContext
return|;
block|}
block|}
end_class

end_unit

