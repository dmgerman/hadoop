begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.v2.app
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|JobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptCompletionEventStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|api
operator|.
name|records
operator|.
name|TaskState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|TaskAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|JobTaskAttemptFetchFailureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|v2
operator|.
name|app
operator|.
name|job
operator|.
name|event
operator|.
name|TaskAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFetchFailure
specifier|public
class|class
name|TestFetchFailure
block|{
annotation|@
name|Test
DECL|method|testFetchFailure ()
specifier|public
name|void
name|testFetchFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|MRApp
name|app
init|=
operator|new
name|MRApp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// map -> reduce -> fetch-failure -> map retry is incompatible with
comment|// sequential, single-task-attempt approach in uber-AM, so disable:
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|JOB_UBERTASK_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|app
operator|.
name|submit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//all maps would be running
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num tasks not correct"
argument_list|,
literal|2
argument_list|,
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Task
argument_list|>
name|it
init|=
name|job
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Task
name|mapTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
name|reduceTask
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//wait for Task state move to RUNNING
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|mapAttempt1
init|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapAttempt1
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the map attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapAttempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for map success
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|TaskAttemptCompletionEvent
index|[]
name|events
init|=
name|job
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num completion events not correct"
argument_list|,
literal|1
argument_list|,
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for reduce to start running
name|app
operator|.
name|waitForState
argument_list|(
name|reduceTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TaskAttempt
name|reduceAttempt
init|=
name|reduceTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|reduceAttempt
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send 3 fetch failures from reduce to trigger map re execution
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt
argument_list|,
name|mapAttempt1
argument_list|)
expr_stmt|;
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt
argument_list|,
name|mapAttempt1
argument_list|)
expr_stmt|;
name|sendFetchFailure
argument_list|(
name|app
argument_list|,
name|reduceAttempt
argument_list|,
name|mapAttempt1
argument_list|)
expr_stmt|;
comment|//wait for map Task state move back to RUNNING
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//map attempt must have become FAILED
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Map TaskAttempt state not correct"
argument_list|,
name|TaskAttemptState
operator|.
name|FAILED
argument_list|,
name|mapAttempt1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num attempts in Map Task not correct"
argument_list|,
literal|2
argument_list|,
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|TaskAttempt
argument_list|>
name|atIt
init|=
name|mapTask
operator|.
name|getAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|atIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|TaskAttempt
name|mapAttempt2
init|=
name|atIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|mapAttempt2
argument_list|,
name|TaskAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//send the done signal to the second map attempt
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|mapAttempt2
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for map success
name|app
operator|.
name|waitForState
argument_list|(
name|mapTask
argument_list|,
name|TaskState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//send done to reduce
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|TaskAttemptEvent
argument_list|(
name|reduceAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskAttemptEventType
operator|.
name|TA_DONE
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|waitForState
argument_list|(
name|job
argument_list|,
name|JobState
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|//previous completion event now becomes obsolete
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|OBSOLETE
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|events
operator|=
name|job
operator|.
name|getTaskAttemptCompletionEvents
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Num completion events not correct"
argument_list|,
literal|4
argument_list|,
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event map attempt id not correct"
argument_list|,
name|mapAttempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event map attempt id not correct"
argument_list|,
name|mapAttempt1
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|1
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event map attempt id not correct"
argument_list|,
name|mapAttempt2
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|2
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event redude attempt id not correct"
argument_list|,
name|reduceAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|events
index|[
literal|3
index|]
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for map attempt1"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|OBSOLETE
argument_list|,
name|events
index|[
literal|0
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for map attempt1"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|FAILED
argument_list|,
name|events
index|[
literal|1
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for map attempt2"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|,
name|events
index|[
literal|2
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Event status not correct for reduce attempt1"
argument_list|,
name|TaskAttemptCompletionEventStatus
operator|.
name|SUCCEEDED
argument_list|,
name|events
index|[
literal|3
index|]
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|sendFetchFailure (MRApp app, TaskAttempt reduceAttempt, TaskAttempt mapAttempt)
specifier|private
name|void
name|sendFetchFailure
parameter_list|(
name|MRApp
name|app
parameter_list|,
name|TaskAttempt
name|reduceAttempt
parameter_list|,
name|TaskAttempt
name|mapAttempt
parameter_list|)
block|{
name|app
operator|.
name|getContext
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|JobTaskAttemptFetchFailureEvent
argument_list|(
name|reduceAttempt
operator|.
name|getID
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|TaskAttemptId
index|[]
block|{
name|mapAttempt
operator|.
name|getID
argument_list|()
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

