begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.maven.plugin.resourcegz
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|maven
operator|.
name|plugin
operator|.
name|resourcegz
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_comment
comment|/**  * ResourceGzMojo will gzip files.  * It is meant to be used for gzipping website resource files (e.g. .js, .css,  * etc).  It takes an input directory, output directory, and extensions to  * process and will generate the .gz files. Any additional directory structure  * beyond the input directory is preserved in the output directory.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"resource-gz"
argument_list|)
DECL|class|ResourceGzMojo
specifier|public
class|class
name|ResourceGzMojo
extends|extends
name|AbstractMojo
block|{
comment|/**    * The input directory.  Will be searched recursively and its directory    * structure will be maintaned in the outputDirectory.    */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"inputDirectory"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|inputDirectory
specifier|private
name|String
name|inputDirectory
decl_stmt|;
comment|/**    * The output directory.    */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"outputDirectory"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|outputDirectory
specifier|private
name|String
name|outputDirectory
decl_stmt|;
comment|/**    * A comma separated list of extensions to include.    */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"extensions"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|extensions
specifier|private
name|String
name|extensions
decl_stmt|;
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
try|try
block|{
name|Path
name|inputDir
init|=
operator|new
name|File
argument_list|(
name|inputDirectory
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|File
name|outputDir
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|extensions
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|exts
operator|.
name|replaceAll
argument_list|(
name|String
operator|::
name|trim
argument_list|)
expr_stmt|;
name|GZConsumer
name|cons
init|=
operator|new
name|GZConsumer
argument_list|(
name|inputDir
operator|.
name|toFile
argument_list|()
argument_list|,
name|outputDir
argument_list|)
decl_stmt|;
name|Files
operator|.
name|walk
argument_list|(
name|inputDir
argument_list|)
operator|.
name|filter
argument_list|(
name|path
lambda|->
block|{
for|for
control|(
name|String
name|ext
range|:
name|exts
control|)
block|{
if|if
condition|(
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"."
operator|+
name|ext
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
argument_list|)
operator|.
name|forEach
argument_list|(
name|cons
argument_list|)
expr_stmt|;
if|if
condition|(
name|cons
operator|.
name|getThrowable
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|cons
operator|.
name|getThrowable
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|cons
operator|.
name|getThrowable
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
DECL|class|GZConsumer
specifier|private
class|class
name|GZConsumer
implements|implements
name|Consumer
argument_list|<
name|Path
argument_list|>
block|{
DECL|field|inputDir
specifier|private
specifier|final
name|File
name|inputDir
decl_stmt|;
DECL|field|outputDir
specifier|private
specifier|final
name|File
name|outputDir
decl_stmt|;
DECL|field|throwable
specifier|private
name|Throwable
name|throwable
decl_stmt|;
DECL|method|GZConsumer (File inputDir, File outputDir)
specifier|public
name|GZConsumer
parameter_list|(
name|File
name|inputDir
parameter_list|,
name|File
name|outputDir
parameter_list|)
block|{
name|this
operator|.
name|inputDir
operator|=
name|inputDir
expr_stmt|;
name|this
operator|.
name|outputDir
operator|=
name|outputDir
expr_stmt|;
name|this
operator|.
name|throwable
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept (Path path)
specifier|public
name|void
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|throwable
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|outputDir
argument_list|,
name|path
operator|.
name|toFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
operator|.
name|replaceFirst
argument_list|(
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|inputDir
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|)
operator|+
literal|".gz"
argument_list|)
decl_stmt|;
if|if
condition|(
name|outFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
operator|||
name|outFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
try|try
init|(
name|GZIPOutputStream
name|os
init|=
operator|new
name|GZIPOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|)
init|;               BufferedReader is = Files.newBufferedReader(path)
block|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Compressing "
operator|+
name|path
operator|+
literal|" to "
operator|+
name|outFile
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Directory "
operator|+
name|outFile
operator|.
name|getParent
argument_list|()
operator|+
literal|" does not exist or was unable to be created"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|this
operator|.
name|throwable
operator|=
name|t
expr_stmt|;
block|}
block|}
DECL|method|getThrowable ()
specifier|public
name|Throwable
name|getThrowable
parameter_list|()
block|{
return|return
name|throwable
return|;
block|}
block|}
end_class

unit|}
end_unit

