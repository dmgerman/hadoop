begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.maven.plugin.paralleltests
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|maven
operator|.
name|plugin
operator|.
name|paralleltests
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_comment
comment|/**  * Goal which creates the parallel-test directories.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"parallel-tests-createdir"
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|GENERATE_TEST_RESOURCES
argument_list|)
DECL|class|CreateDirsMojo
specifier|public
class|class
name|CreateDirsMojo
extends|extends
name|AbstractMojo
block|{
comment|/**    * Location of the test.build.dir.    */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/test-dir"
argument_list|)
DECL|field|testBuildDir
specifier|private
name|File
name|testBuildDir
decl_stmt|;
comment|/**    * Location of the test.build.data.    */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/test-dir"
argument_list|)
DECL|field|testBuildData
specifier|private
name|File
name|testBuildData
decl_stmt|;
comment|/**    * Location of the test.build.data.    */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/tmp"
argument_list|)
DECL|field|hadoopTmpDir
specifier|private
name|File
name|hadoopTmpDir
decl_stmt|;
comment|/**    * Thread count.    */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${testsThreadCount}"
argument_list|)
DECL|field|testsThreadCount
specifier|private
name|String
name|testsThreadCount
decl_stmt|;
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|int
name|numDirs
init|=
name|getTestsThreadCount
argument_list|()
decl_stmt|;
name|mkParallelDirs
argument_list|(
name|testBuildDir
argument_list|,
name|numDirs
argument_list|)
expr_stmt|;
name|mkParallelDirs
argument_list|(
name|testBuildData
argument_list|,
name|numDirs
argument_list|)
expr_stmt|;
name|mkParallelDirs
argument_list|(
name|hadoopTmpDir
argument_list|,
name|numDirs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the real number of parallel threads.    * @return int number of threads    */
DECL|method|getTestsThreadCount ()
specifier|public
name|int
name|getTestsThreadCount
parameter_list|()
block|{
name|int
name|threadCount
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|testsThreadCount
operator|!=
literal|null
condition|)
block|{
name|String
name|trimProp
init|=
name|testsThreadCount
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|trimProp
operator|.
name|endsWith
argument_list|(
literal|"C"
argument_list|)
condition|)
block|{
name|double
name|multiplier
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|trimProp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|trimProp
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|calculated
init|=
name|multiplier
operator|*
operator|(
operator|(
name|double
operator|)
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|)
decl_stmt|;
name|threadCount
operator|=
name|calculated
operator|>
literal|0d
condition|?
name|Math
operator|.
name|max
argument_list|(
operator|(
name|int
operator|)
name|calculated
argument_list|,
literal|1
argument_list|)
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
name|threadCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|testsThreadCount
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|threadCount
return|;
block|}
DECL|method|mkParallelDirs (File testDir, int numDirs)
specifier|private
name|void
name|mkParallelDirs
parameter_list|(
name|File
name|testDir
parameter_list|,
name|int
name|numDirs
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numDirs
condition|;
name|i
operator|++
control|)
block|{
name|File
name|newDir
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Creating "
operator|+
name|newDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to create "
operator|+
name|newDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

