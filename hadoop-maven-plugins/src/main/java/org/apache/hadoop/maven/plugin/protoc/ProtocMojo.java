begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.maven.plugin.protoc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|maven
operator|.
name|plugin
operator|.
name|protoc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|maven
operator|.
name|plugin
operator|.
name|util
operator|.
name|Exec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|maven
operator|.
name|plugin
operator|.
name|util
operator|.
name|FileSetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|FileSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"protoc"
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|GENERATE_SOURCES
argument_list|)
DECL|class|ProtocMojo
specifier|public
class|class
name|ProtocMojo
extends|extends
name|AbstractMojo
block|{
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project}"
argument_list|)
DECL|field|project
specifier|private
name|MavenProject
name|project
decl_stmt|;
annotation|@
name|Parameter
DECL|field|imports
specifier|private
name|File
index|[]
name|imports
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/generated-sources/java"
argument_list|)
DECL|field|output
specifier|private
name|File
name|output
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|source
specifier|private
name|FileSet
name|source
decl_stmt|;
annotation|@
name|Parameter
DECL|field|protocCommand
specifier|private
name|String
name|protocCommand
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|protocVersion
specifier|private
name|String
name|protocVersion
decl_stmt|;
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
if|if
condition|(
name|protocCommand
operator|==
literal|null
operator|||
name|protocCommand
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|protocCommand
operator|=
literal|"protoc"
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|command
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|command
operator|.
name|add
argument_list|(
name|protocCommand
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"--version"
argument_list|)
expr_stmt|;
name|Exec
name|exec
init|=
operator|new
name|Exec
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|exec
operator|.
name|run
argument_list|(
name|command
argument_list|,
name|out
argument_list|)
operator|==
literal|127
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"protoc, not found at: "
operator|+
name|protocCommand
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"protoc failure"
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|out
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"stdout: "
operator|+
name|out
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"'protoc --version' did not return a version"
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|out
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|endsWith
argument_list|(
name|protocVersion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"protoc version is '"
operator|+
name|out
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"', expected version is '"
operator|+
name|protocVersion
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|output
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|output
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Could not create directory: "
operator|+
name|output
argument_list|)
throw|;
block|}
block|}
name|command
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
name|protocCommand
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"--java_out="
operator|+
name|output
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|imports
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|i
range|:
name|imports
control|)
block|{
name|command
operator|.
name|add
argument_list|(
literal|"-I"
operator|+
name|i
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|File
name|f
range|:
name|FileSetUtils
operator|.
name|convertFileSetToFiles
argument_list|(
name|source
argument_list|)
control|)
block|{
name|command
operator|.
name|add
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exec
operator|=
operator|new
name|Exec
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|exec
operator|.
name|run
argument_list|(
name|command
argument_list|,
name|out
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"protoc compiler error"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|out
control|)
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"protoc failure"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|project
operator|.
name|addCompileSourceRoot
argument_list|(
name|output
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

