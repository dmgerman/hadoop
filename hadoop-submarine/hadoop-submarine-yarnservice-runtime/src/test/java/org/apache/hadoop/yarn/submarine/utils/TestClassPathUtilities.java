begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|FileUtilitiesForTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * This class is to test {@link ClassPathUtilities}.  */
end_comment

begin_class
DECL|class|TestClassPathUtilities
specifier|public
class|class
name|TestClassPathUtilities
block|{
DECL|field|CLASSPATH_KEY
specifier|private
specifier|static
specifier|final
name|String
name|CLASSPATH_KEY
init|=
literal|"java.class.path"
decl_stmt|;
DECL|field|fileUtils
specifier|private
name|FileUtilitiesForTests
name|fileUtils
init|=
operator|new
name|FileUtilitiesForTests
argument_list|()
decl_stmt|;
DECL|field|originalClasspath
specifier|private
specifier|static
name|String
name|originalClasspath
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpClass ()
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
block|{
name|originalClasspath
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|CLASSPATH_KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|fileUtils
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
name|fileUtils
operator|.
name|teardown
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|CLASSPATH_KEY
argument_list|,
name|originalClasspath
argument_list|)
expr_stmt|;
block|}
DECL|method|addFileToClasspath (File file)
specifier|private
specifier|static
name|void
name|addFileToClasspath
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|String
name|newClasspath
init|=
name|originalClasspath
operator|+
literal|":"
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|CLASSPATH_KEY
argument_list|,
name|newClasspath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findFileNotInClasspath ()
specifier|public
name|void
name|findFileNotInClasspath
parameter_list|()
block|{
name|File
name|resultFile
init|=
name|ClassPathUtilities
operator|.
name|findFileOnClassPath
argument_list|(
literal|"bla"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|resultFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findFileOnClasspath ()
specifier|public
name|void
name|findFileOnClasspath
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|testFile
init|=
name|fileUtils
operator|.
name|createFileInTempDir
argument_list|(
literal|"testFile"
argument_list|)
decl_stmt|;
name|addFileToClasspath
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|File
name|resultFile
init|=
name|ClassPathUtilities
operator|.
name|findFileOnClassPath
argument_list|(
literal|"testFile"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resultFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|resultFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findDirectoryOnClasspath ()
specifier|public
name|void
name|findDirectoryOnClasspath
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|testDir
init|=
name|fileUtils
operator|.
name|createDirInTempDir
argument_list|(
literal|"testDir"
argument_list|)
decl_stmt|;
name|File
name|testFile
init|=
name|fileUtils
operator|.
name|createFileInDir
argument_list|(
name|testDir
argument_list|,
literal|"testFile"
argument_list|)
decl_stmt|;
name|addFileToClasspath
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|File
name|resultFile
init|=
name|ClassPathUtilities
operator|.
name|findFileOnClassPath
argument_list|(
literal|"testFile"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resultFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|resultFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

