begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice.command
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|MockClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|FileSystemOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|HadoopEnvironmentSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|command
operator|.
name|TensorBoardLaunchCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|command
operator|.
name|TensorFlowPsLaunchCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|command
operator|.
name|TensorFlowWorkerLaunchCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This class is an abstract base class for testing Tensorboard and TensorFlow  * launch commands.  */
end_comment

begin_class
DECL|class|AbstractLaunchCommandTestHelper
specifier|public
specifier|abstract
class|class
name|AbstractLaunchCommandTestHelper
block|{
DECL|field|taskType
specifier|private
name|TaskType
name|taskType
decl_stmt|;
DECL|field|useTaskTypeOverride
specifier|private
name|boolean
name|useTaskTypeOverride
decl_stmt|;
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|assertScriptContainsExportedEnvVar (List<String> fileContents, String varName)
specifier|private
name|void
name|assertScriptContainsExportedEnvVar
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fileContents
parameter_list|,
name|String
name|varName
parameter_list|)
block|{
name|String
name|expected
init|=
name|String
operator|.
name|format
argument_list|(
literal|"export %s="
argument_list|,
name|varName
argument_list|)
decl_stmt|;
name|assertScriptContainsLine
argument_list|(
name|fileContents
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|assertScriptContainsExportedEnvVarWithValue ( List<String> fileContents, String varName, String value)
specifier|public
specifier|static
name|void
name|assertScriptContainsExportedEnvVarWithValue
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fileContents
parameter_list|,
name|String
name|varName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|String
name|expected
init|=
name|String
operator|.
name|format
argument_list|(
literal|"export %s=%s"
argument_list|,
name|varName
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|assertScriptContainsLine
argument_list|(
name|fileContents
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|assertScriptContainsLine (List<String> fileContents, String expected)
specifier|public
specifier|static
name|void
name|assertScriptContainsLine
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fileContents
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"File does not contain expected line '%s'!"
operator|+
literal|" File contents: %s"
argument_list|,
name|expected
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|fileContents
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|message
argument_list|,
name|fileContents
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertScriptContainsLineWithRegex ( List<String> fileContents, String regex)
specifier|public
specifier|static
name|void
name|assertScriptContainsLineWithRegex
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fileContents
parameter_list|,
name|String
name|regex
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"File does not contain expected line '%s'!"
operator|+
literal|" File contents: %s"
argument_list|,
name|regex
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|fileContents
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|fileContents
control|)
block|{
if|if
condition|(
name|line
operator|.
name|matches
argument_list|(
name|regex
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|assertScriptDoesNotContainLine (List<String> fileContents, String expected)
specifier|public
specifier|static
name|void
name|assertScriptDoesNotContainLine
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fileContents
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"File contains unexpected line '%s'!"
operator|+
literal|" File contents: %s"
argument_list|,
name|expected
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|fileContents
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|message
argument_list|,
name|fileContents
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createLaunchCommandByTaskType (TaskType taskType, RunJobParameters params)
specifier|private
name|AbstractLaunchCommand
name|createLaunchCommandByTaskType
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|RunJobParameters
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|MockClientContext
name|mockClientContext
init|=
operator|new
name|MockClientContext
argument_list|()
decl_stmt|;
name|FileSystemOperations
name|fsOperations
init|=
operator|new
name|FileSystemOperations
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|HadoopEnvironmentSetup
name|hadoopEnvSetup
init|=
operator|new
name|HadoopEnvironmentSetup
argument_list|(
name|mockClientContext
argument_list|,
name|fsOperations
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|Configuration
name|yarnConfig
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
return|return
name|createLaunchCommandByTaskTypeInternal
argument_list|(
name|taskType
argument_list|,
name|params
argument_list|,
name|hadoopEnvSetup
argument_list|,
name|component
argument_list|,
name|yarnConfig
argument_list|)
return|;
block|}
DECL|method|createLaunchCommandByTaskTypeInternal ( TaskType taskType, RunJobParameters params, HadoopEnvironmentSetup hadoopEnvSetup, Component component, Configuration yarnConfig)
specifier|private
name|AbstractLaunchCommand
name|createLaunchCommandByTaskTypeInternal
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|RunJobParameters
name|params
parameter_list|,
name|HadoopEnvironmentSetup
name|hadoopEnvSetup
parameter_list|,
name|Component
name|component
parameter_list|,
name|Configuration
name|yarnConfig
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|TENSORBOARD
condition|)
block|{
return|return
operator|new
name|TensorBoardLaunchCommand
argument_list|(
name|hadoopEnvSetup
argument_list|,
name|getTaskType
argument_list|(
name|taskType
argument_list|)
argument_list|,
name|component
argument_list|,
name|params
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|WORKER
operator|||
name|taskType
operator|==
name|TaskType
operator|.
name|PRIMARY_WORKER
condition|)
block|{
return|return
operator|new
name|TensorFlowWorkerLaunchCommand
argument_list|(
name|hadoopEnvSetup
argument_list|,
name|getTaskType
argument_list|(
name|taskType
argument_list|)
argument_list|,
name|component
argument_list|,
name|params
argument_list|,
name|yarnConfig
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|PS
condition|)
block|{
return|return
operator|new
name|TensorFlowPsLaunchCommand
argument_list|(
name|hadoopEnvSetup
argument_list|,
name|getTaskType
argument_list|(
name|taskType
argument_list|)
argument_list|,
name|component
argument_list|,
name|params
argument_list|,
name|yarnConfig
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown taskType!"
argument_list|)
throw|;
block|}
DECL|method|overrideTaskType (TaskType taskType)
specifier|public
name|void
name|overrideTaskType
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
name|this
operator|.
name|taskType
operator|=
name|taskType
expr_stmt|;
name|this
operator|.
name|useTaskTypeOverride
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getTaskType (TaskType taskType)
specifier|private
name|TaskType
name|getTaskType
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
if|if
condition|(
name|useTaskTypeOverride
condition|)
block|{
return|return
name|this
operator|.
name|taskType
return|;
block|}
return|return
name|taskType
return|;
block|}
DECL|method|testHdfsRelatedEnvironmentIsUndefined (TaskType taskType, RunJobParameters params)
specifier|public
name|void
name|testHdfsRelatedEnvironmentIsUndefined
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|RunJobParameters
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|AbstractLaunchCommand
name|launchCommand
init|=
name|createLaunchCommandByTaskType
argument_list|(
name|taskType
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Failed to detect HDFS-related environments."
argument_list|)
expr_stmt|;
name|launchCommand
operator|.
name|generateLaunchScript
argument_list|()
expr_stmt|;
block|}
DECL|method|testHdfsRelatedEnvironmentIsDefined (TaskType taskType, RunJobParameters params)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|testHdfsRelatedEnvironmentIsDefined
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|RunJobParameters
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|AbstractLaunchCommand
name|launchCommand
init|=
name|createLaunchCommandByTaskType
argument_list|(
name|taskType
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|launchCommand
operator|.
name|generateLaunchScript
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|File
name|resultFile
init|=
operator|new
name|File
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resultFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fileContents
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|resultFile
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"#!/bin/bash"
argument_list|,
name|fileContents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptContainsExportedEnvVar
argument_list|(
name|fileContents
argument_list|,
literal|"HADOOP_HOME"
argument_list|)
expr_stmt|;
name|assertScriptContainsExportedEnvVar
argument_list|(
name|fileContents
argument_list|,
literal|"HADOOP_YARN_HOME"
argument_list|)
expr_stmt|;
name|assertScriptContainsExportedEnvVarWithValue
argument_list|(
name|fileContents
argument_list|,
literal|"HADOOP_HDFS_HOME"
argument_list|,
literal|"testHdfsHome"
argument_list|)
expr_stmt|;
name|assertScriptContainsExportedEnvVarWithValue
argument_list|(
name|fileContents
argument_list|,
literal|"HADOOP_COMMON_HOME"
argument_list|,
literal|"testHdfsHome"
argument_list|)
expr_stmt|;
name|assertScriptContainsExportedEnvVarWithValue
argument_list|(
name|fileContents
argument_list|,
literal|"HADOOP_CONF_DIR"
argument_list|,
literal|"$WORK_DIR"
argument_list|)
expr_stmt|;
name|assertScriptContainsExportedEnvVarWithValue
argument_list|(
name|fileContents
argument_list|,
literal|"JAVA_HOME"
argument_list|,
literal|"testJavaHome"
argument_list|)
expr_stmt|;
name|assertScriptContainsExportedEnvVarWithValue
argument_list|(
name|fileContents
argument_list|,
literal|"LD_LIBRARY_PATH"
argument_list|,
literal|"$LD_LIBRARY_PATH:$JAVA_HOME/lib/amd64/server"
argument_list|)
expr_stmt|;
name|assertScriptContainsExportedEnvVarWithValue
argument_list|(
name|fileContents
argument_list|,
literal|"CLASSPATH"
argument_list|,
literal|"`$HADOOP_HDFS_HOME/bin/hadoop classpath --glob`"
argument_list|)
expr_stmt|;
return|return
name|fileContents
return|;
block|}
block|}
end_class

end_unit

