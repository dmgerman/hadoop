begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.component
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|component
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|ServiceApiConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|Envs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|MockClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|FileSystemOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|command
operator|.
name|AbstractLaunchCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|command
operator|.
name|LaunchCommandFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * This class has some helper methods and fields  * in order to test TensorFlow-related Components easier.  */
end_comment

begin_class
DECL|class|ComponentTestCommons
specifier|public
class|class
name|ComponentTestCommons
block|{
DECL|field|userName
name|String
name|userName
decl_stmt|;
DECL|field|taskType
name|TaskType
name|taskType
decl_stmt|;
DECL|field|mockLaunchCommandFactory
name|LaunchCommandFactory
name|mockLaunchCommandFactory
decl_stmt|;
DECL|field|fsOperations
name|FileSystemOperations
name|fsOperations
decl_stmt|;
DECL|field|mockClientContext
name|MockClientContext
name|mockClientContext
decl_stmt|;
DECL|field|yarnConfig
name|Configuration
name|yarnConfig
decl_stmt|;
DECL|field|resource
name|Resource
name|resource
decl_stmt|;
DECL|method|ComponentTestCommons (TaskType taskType)
name|ComponentTestCommons
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
name|this
operator|.
name|taskType
operator|=
name|taskType
expr_stmt|;
block|}
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|userName
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4000
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|setupDependencies
argument_list|()
expr_stmt|;
block|}
DECL|method|setupDependencies ()
specifier|private
name|void
name|setupDependencies
parameter_list|()
throws|throws
name|IOException
block|{
name|fsOperations
operator|=
name|mock
argument_list|(
name|FileSystemOperations
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockClientContext
operator|=
operator|new
name|MockClientContext
argument_list|()
expr_stmt|;
name|mockLaunchCommandFactory
operator|=
name|mock
argument_list|(
name|LaunchCommandFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|AbstractLaunchCommand
name|mockLaunchCommand
init|=
name|mock
argument_list|(
name|AbstractLaunchCommand
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockLaunchCommand
operator|.
name|generateLaunchScript
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mockScript"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLaunchCommandFactory
operator|.
name|createLaunchCommand
argument_list|(
name|eq
argument_list|(
name|taskType
argument_list|)
argument_list|,
name|any
argument_list|(
name|Component
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockLaunchCommand
argument_list|)
expr_stmt|;
name|yarnConfig
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyCommonConfigEnvs (Component component)
name|void
name|verifyCommonConfigEnvs
parameter_list|(
name|Component
name|component
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ServiceApiConstants
operator|.
name|COMPONENT_ID
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
name|Envs
operator|.
name|TASK_INDEX_ENV
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|taskType
operator|.
name|name
argument_list|()
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
name|Envs
operator|.
name|TASK_TYPE_ENV
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyResources (Component component)
name|void
name|verifyResources
parameter_list|(
name|Component
name|component
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|component
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
name|int
operator|)
name|component
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4000
argument_list|,
operator|(
name|int
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
name|component
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

