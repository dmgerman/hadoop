begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|FileUtilitiesForTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|MockClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|FileSystemOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * This class is to test {@link KerberosPrincipalFactory}.  */
end_comment

begin_class
DECL|class|TestKerberosPrincipalFactory
specifier|public
class|class
name|TestKerberosPrincipalFactory
block|{
DECL|field|fileUtils
specifier|private
name|FileUtilitiesForTests
name|fileUtils
init|=
operator|new
name|FileUtilitiesForTests
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|fileUtils
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
name|fileUtils
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
DECL|method|createKeytabFile (String keytabFileName)
specifier|private
name|File
name|createKeytabFile
parameter_list|(
name|String
name|keytabFileName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fileUtils
operator|.
name|createFileInTempDir
argument_list|(
name|keytabFileName
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testCreatePrincipalEmptyPrincipalAndKeytab ()
specifier|public
name|void
name|testCreatePrincipalEmptyPrincipalAndKeytab
parameter_list|()
throws|throws
name|IOException
block|{
name|MockClientContext
name|mockClientContext
init|=
operator|new
name|MockClientContext
argument_list|()
decl_stmt|;
name|RunJobParameters
name|parameters
init|=
name|mock
argument_list|(
name|RunJobParameters
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|getKeytab
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|FileSystemOperations
name|fsOperations
init|=
operator|new
name|FileSystemOperations
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|KerberosPrincipal
name|result
init|=
name|KerberosPrincipalFactory
operator|.
name|create
argument_list|(
name|fsOperations
argument_list|,
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatePrincipalEmptyPrincipalString ()
specifier|public
name|void
name|testCreatePrincipalEmptyPrincipalString
parameter_list|()
throws|throws
name|IOException
block|{
name|MockClientContext
name|mockClientContext
init|=
operator|new
name|MockClientContext
argument_list|()
decl_stmt|;
name|RunJobParameters
name|parameters
init|=
name|mock
argument_list|(
name|RunJobParameters
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|getKeytab
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"keytab"
argument_list|)
expr_stmt|;
name|FileSystemOperations
name|fsOperations
init|=
operator|new
name|FileSystemOperations
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|KerberosPrincipal
name|result
init|=
name|KerberosPrincipalFactory
operator|.
name|create
argument_list|(
name|fsOperations
argument_list|,
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatePrincipalEmptyKeyTabString ()
specifier|public
name|void
name|testCreatePrincipalEmptyKeyTabString
parameter_list|()
throws|throws
name|IOException
block|{
name|MockClientContext
name|mockClientContext
init|=
operator|new
name|MockClientContext
argument_list|()
decl_stmt|;
name|RunJobParameters
name|parameters
init|=
name|mock
argument_list|(
name|RunJobParameters
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"principal"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|getKeytab
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|FileSystemOperations
name|fsOperations
init|=
operator|new
name|FileSystemOperations
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|KerberosPrincipal
name|result
init|=
name|KerberosPrincipalFactory
operator|.
name|create
argument_list|(
name|fsOperations
argument_list|,
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatePrincipalNonEmptyPrincipalAndKeytab ()
specifier|public
name|void
name|testCreatePrincipalNonEmptyPrincipalAndKeytab
parameter_list|()
throws|throws
name|IOException
block|{
name|MockClientContext
name|mockClientContext
init|=
operator|new
name|MockClientContext
argument_list|()
decl_stmt|;
name|RunJobParameters
name|parameters
init|=
name|mock
argument_list|(
name|RunJobParameters
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"principal"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|getKeytab
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"keytab"
argument_list|)
expr_stmt|;
name|FileSystemOperations
name|fsOperations
init|=
operator|new
name|FileSystemOperations
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|KerberosPrincipal
name|result
init|=
name|KerberosPrincipalFactory
operator|.
name|create
argument_list|(
name|fsOperations
argument_list|,
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file://keytab"
argument_list|,
name|result
operator|.
name|getKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"principal"
argument_list|,
name|result
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatePrincipalDistributedKeytab ()
specifier|public
name|void
name|testCreatePrincipalDistributedKeytab
parameter_list|()
throws|throws
name|IOException
block|{
name|MockClientContext
name|mockClientContext
init|=
operator|new
name|MockClientContext
argument_list|()
decl_stmt|;
name|String
name|jobname
init|=
literal|"testJobname"
decl_stmt|;
name|String
name|keytab
init|=
literal|"testKeytab"
decl_stmt|;
name|File
name|keytabFile
init|=
name|createKeytabFile
argument_list|(
name|keytab
argument_list|)
decl_stmt|;
name|RunJobParameters
name|parameters
init|=
name|mock
argument_list|(
name|RunJobParameters
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"principal"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|getKeytab
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|keytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobname
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parameters
operator|.
name|isDistributeKeytab
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FileSystemOperations
name|fsOperations
init|=
operator|new
name|FileSystemOperations
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|KerberosPrincipal
name|result
init|=
name|KerberosPrincipalFactory
operator|.
name|create
argument_list|(
name|fsOperations
argument_list|,
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|Path
name|stagingDir
init|=
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getJobStagingArea
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|expectedKeytabFilePath
init|=
name|FileUtilitiesForTests
operator|.
name|getFilename
argument_list|(
name|stagingDir
argument_list|,
name|keytab
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKeytabFilePath
argument_list|,
name|result
operator|.
name|getKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"principal"
argument_list|,
name|result
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

