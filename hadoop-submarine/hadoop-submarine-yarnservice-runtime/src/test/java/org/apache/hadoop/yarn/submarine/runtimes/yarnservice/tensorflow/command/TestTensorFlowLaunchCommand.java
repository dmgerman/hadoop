begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice.tensorflow.command
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|command
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|MockClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|FileSystemOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|HadoopEnvironmentSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|command
operator|.
name|AbstractLaunchCommandTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|HadoopEnvironmentSetup
operator|.
name|DOCKER_HADOOP_HDFS_HOME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|HadoopEnvironmentSetup
operator|.
name|DOCKER_JAVA_HOME
import|;
end_import

begin_comment
comment|/**  * This class is to test the implementors of {@link TensorFlowLaunchCommand}.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestTensorFlowLaunchCommand
specifier|public
class|class
name|TestTensorFlowLaunchCommand
extends|extends
name|AbstractLaunchCommandTestHelper
block|{
DECL|field|taskType
specifier|private
name|TaskType
name|taskType
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|TaskType
operator|.
name|WORKER
block|}
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|TaskType
operator|.
name|PS
block|}
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
DECL|method|TestTensorFlowLaunchCommand (TaskType taskType)
specifier|public
name|TestTensorFlowLaunchCommand
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
name|this
operator|.
name|taskType
operator|=
name|taskType
expr_stmt|;
block|}
DECL|method|assertScriptContainsLaunchCommand (List<String> fileContents, RunJobParameters params)
specifier|private
name|void
name|assertScriptContainsLaunchCommand
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fileContents
parameter_list|,
name|RunJobParameters
name|params
parameter_list|)
block|{
name|String
name|launchCommand
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|WORKER
condition|)
block|{
name|launchCommand
operator|=
name|params
operator|.
name|getWorkerLaunchCmd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|PS
condition|)
block|{
name|launchCommand
operator|=
name|params
operator|.
name|getPSLaunchCmd
argument_list|()
expr_stmt|;
block|}
name|assertScriptContainsLine
argument_list|(
name|fileContents
argument_list|,
name|launchCommand
argument_list|)
expr_stmt|;
block|}
DECL|method|setLaunchCommandToParams (RunJobParameters params)
specifier|private
name|void
name|setLaunchCommandToParams
parameter_list|(
name|RunJobParameters
name|params
parameter_list|)
block|{
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|WORKER
condition|)
block|{
name|params
operator|.
name|setWorkerLaunchCmd
argument_list|(
literal|"testWorkerLaunchCommand"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|PS
condition|)
block|{
name|params
operator|.
name|setPSLaunchCmd
argument_list|(
literal|"testPsLaunchCommand"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setLaunchCommandToParams (RunJobParameters params, String value)
specifier|private
name|void
name|setLaunchCommandToParams
parameter_list|(
name|RunJobParameters
name|params
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|WORKER
condition|)
block|{
name|params
operator|.
name|setWorkerLaunchCmd
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|PS
condition|)
block|{
name|params
operator|.
name|setPSLaunchCmd
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertTypeInJson (List<String> fileContents)
specifier|private
name|void
name|assertTypeInJson
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fileContents
parameter_list|)
block|{
name|String
name|expectedType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|WORKER
condition|)
block|{
name|expectedType
operator|=
literal|"worker"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|PS
condition|)
block|{
name|expectedType
operator|=
literal|"ps"
expr_stmt|;
block|}
name|assertScriptContainsLineWithRegex
argument_list|(
name|fileContents
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|".*type.*:"
operator|+
literal|".*%s.*"
argument_list|,
name|expectedType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createTensorFlowLaunchCommandObject ( HadoopEnvironmentSetup hadoopEnvSetup, Configuration yarnConfig, Component component, RunJobParameters params)
specifier|private
name|TensorFlowLaunchCommand
name|createTensorFlowLaunchCommandObject
parameter_list|(
name|HadoopEnvironmentSetup
name|hadoopEnvSetup
parameter_list|,
name|Configuration
name|yarnConfig
parameter_list|,
name|Component
name|component
parameter_list|,
name|RunJobParameters
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|WORKER
condition|)
block|{
return|return
operator|new
name|TensorFlowWorkerLaunchCommand
argument_list|(
name|hadoopEnvSetup
argument_list|,
name|taskType
argument_list|,
name|component
argument_list|,
name|params
argument_list|,
name|yarnConfig
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|PS
condition|)
block|{
return|return
operator|new
name|TensorFlowPsLaunchCommand
argument_list|(
name|hadoopEnvSetup
argument_list|,
name|taskType
argument_list|,
name|component
argument_list|,
name|params
argument_list|,
name|yarnConfig
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown tasktype!"
argument_list|)
throw|;
block|}
annotation|@
name|Test
DECL|method|testHdfsRelatedEnvironmentIsUndefined ()
specifier|public
name|void
name|testHdfsRelatedEnvironmentIsUndefined
parameter_list|()
throws|throws
name|IOException
block|{
name|RunJobParameters
name|params
init|=
operator|new
name|RunJobParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setInputPath
argument_list|(
literal|"hdfs://bla"
argument_list|)
expr_stmt|;
name|params
operator|.
name|setName
argument_list|(
literal|"testJobname"
argument_list|)
expr_stmt|;
name|setLaunchCommandToParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|testHdfsRelatedEnvironmentIsUndefined
argument_list|(
name|taskType
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHdfsRelatedEnvironmentIsDefined ()
specifier|public
name|void
name|testHdfsRelatedEnvironmentIsDefined
parameter_list|()
throws|throws
name|IOException
block|{
name|RunJobParameters
name|params
init|=
operator|new
name|RunJobParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setName
argument_list|(
literal|"testName"
argument_list|)
expr_stmt|;
name|params
operator|.
name|setInputPath
argument_list|(
literal|"hdfs://bla"
argument_list|)
expr_stmt|;
name|params
operator|.
name|setEnvars
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|DOCKER_HADOOP_HDFS_HOME
operator|+
literal|"="
operator|+
literal|"testHdfsHome"
argument_list|,
name|DOCKER_JAVA_HOME
operator|+
literal|"="
operator|+
literal|"testJavaHome"
argument_list|)
argument_list|)
expr_stmt|;
name|setLaunchCommandToParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fileContents
init|=
name|testHdfsRelatedEnvironmentIsDefined
argument_list|(
name|taskType
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|assertScriptContainsLaunchCommand
argument_list|(
name|fileContents
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|assertScriptDoesNotContainLine
argument_list|(
name|fileContents
argument_list|,
literal|"export TF_CONFIG="
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLaunchCommandIsNull ()
specifier|public
name|void
name|testLaunchCommandIsNull
parameter_list|()
throws|throws
name|IOException
block|{
name|MockClientContext
name|mockClientContext
init|=
operator|new
name|MockClientContext
argument_list|()
decl_stmt|;
name|FileSystemOperations
name|fsOperations
init|=
operator|new
name|FileSystemOperations
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|HadoopEnvironmentSetup
name|hadoopEnvSetup
init|=
operator|new
name|HadoopEnvironmentSetup
argument_list|(
name|mockClientContext
argument_list|,
name|fsOperations
argument_list|)
decl_stmt|;
name|Configuration
name|yarnConfig
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|RunJobParameters
name|params
init|=
operator|new
name|RunJobParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setName
argument_list|(
literal|"testName"
argument_list|)
expr_stmt|;
name|setLaunchCommandToParams
argument_list|(
name|params
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"LaunchCommand must not be null or empty"
argument_list|)
expr_stmt|;
name|TensorFlowLaunchCommand
name|launchCommand
init|=
name|createTensorFlowLaunchCommandObject
argument_list|(
name|hadoopEnvSetup
argument_list|,
name|yarnConfig
argument_list|,
name|component
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|launchCommand
operator|.
name|generateLaunchScript
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLaunchCommandIsEmpty ()
specifier|public
name|void
name|testLaunchCommandIsEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|MockClientContext
name|mockClientContext
init|=
operator|new
name|MockClientContext
argument_list|()
decl_stmt|;
name|FileSystemOperations
name|fsOperations
init|=
operator|new
name|FileSystemOperations
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|HadoopEnvironmentSetup
name|hadoopEnvSetup
init|=
operator|new
name|HadoopEnvironmentSetup
argument_list|(
name|mockClientContext
argument_list|,
name|fsOperations
argument_list|)
decl_stmt|;
name|Configuration
name|yarnConfig
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|RunJobParameters
name|params
init|=
operator|new
name|RunJobParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setName
argument_list|(
literal|"testName"
argument_list|)
expr_stmt|;
name|setLaunchCommandToParams
argument_list|(
name|params
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"LaunchCommand must not be null or empty"
argument_list|)
expr_stmt|;
name|TensorFlowLaunchCommand
name|launchCommand
init|=
name|createTensorFlowLaunchCommandObject
argument_list|(
name|hadoopEnvSetup
argument_list|,
name|yarnConfig
argument_list|,
name|component
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|launchCommand
operator|.
name|generateLaunchScript
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDistributedTrainingMissingTaskType ()
specifier|public
name|void
name|testDistributedTrainingMissingTaskType
parameter_list|()
throws|throws
name|IOException
block|{
name|overrideTaskType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|RunJobParameters
name|params
init|=
operator|new
name|RunJobParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setDistributed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|setName
argument_list|(
literal|"testName"
argument_list|)
expr_stmt|;
name|params
operator|.
name|setInputPath
argument_list|(
literal|"hdfs://bla"
argument_list|)
expr_stmt|;
name|params
operator|.
name|setEnvars
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|DOCKER_HADOOP_HDFS_HOME
operator|+
literal|"="
operator|+
literal|"testHdfsHome"
argument_list|,
name|DOCKER_JAVA_HOME
operator|+
literal|"="
operator|+
literal|"testJavaHome"
argument_list|)
argument_list|)
expr_stmt|;
name|setLaunchCommandToParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"TaskType must not be null"
argument_list|)
expr_stmt|;
name|testHdfsRelatedEnvironmentIsDefined
argument_list|(
name|taskType
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDistributedTrainingNumberOfWorkersAndPsIsZero ()
specifier|public
name|void
name|testDistributedTrainingNumberOfWorkersAndPsIsZero
parameter_list|()
throws|throws
name|IOException
block|{
name|RunJobParameters
name|params
init|=
operator|new
name|RunJobParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setDistributed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|setNumWorkers
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|params
operator|.
name|setNumPS
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|params
operator|.
name|setName
argument_list|(
literal|"testName"
argument_list|)
expr_stmt|;
name|params
operator|.
name|setInputPath
argument_list|(
literal|"hdfs://bla"
argument_list|)
expr_stmt|;
name|params
operator|.
name|setEnvars
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|DOCKER_HADOOP_HDFS_HOME
operator|+
literal|"="
operator|+
literal|"testHdfsHome"
argument_list|,
name|DOCKER_JAVA_HOME
operator|+
literal|"="
operator|+
literal|"testJavaHome"
argument_list|)
argument_list|)
expr_stmt|;
name|setLaunchCommandToParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fileContents
init|=
name|testHdfsRelatedEnvironmentIsDefined
argument_list|(
name|taskType
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|assertScriptDoesNotContainLine
argument_list|(
name|fileContents
argument_list|,
literal|"export TF_CONFIG="
argument_list|)
expr_stmt|;
name|assertScriptContainsLineWithRegex
argument_list|(
name|fileContents
argument_list|,
literal|".*worker.*:\\[\\].*"
argument_list|)
expr_stmt|;
name|assertScriptContainsLineWithRegex
argument_list|(
name|fileContents
argument_list|,
literal|".*ps.*:\\[\\].*"
argument_list|)
expr_stmt|;
name|assertTypeInJson
argument_list|(
name|fileContents
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDistributedTrainingNumberOfWorkersAndPsIsNonZero ()
specifier|public
name|void
name|testDistributedTrainingNumberOfWorkersAndPsIsNonZero
parameter_list|()
throws|throws
name|IOException
block|{
name|RunJobParameters
name|params
init|=
operator|new
name|RunJobParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setDistributed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|setNumWorkers
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|params
operator|.
name|setNumPS
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|params
operator|.
name|setName
argument_list|(
literal|"testName"
argument_list|)
expr_stmt|;
name|params
operator|.
name|setInputPath
argument_list|(
literal|"hdfs://bla"
argument_list|)
expr_stmt|;
name|params
operator|.
name|setEnvars
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|DOCKER_HADOOP_HDFS_HOME
operator|+
literal|"="
operator|+
literal|"testHdfsHome"
argument_list|,
name|DOCKER_JAVA_HOME
operator|+
literal|"="
operator|+
literal|"testJavaHome"
argument_list|)
argument_list|)
expr_stmt|;
name|setLaunchCommandToParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fileContents
init|=
name|testHdfsRelatedEnvironmentIsDefined
argument_list|(
name|taskType
argument_list|,
name|params
argument_list|)
decl_stmt|;
comment|//assert we have multiple PS and workers
name|assertScriptDoesNotContainLine
argument_list|(
name|fileContents
argument_list|,
literal|"export TF_CONFIG="
argument_list|)
expr_stmt|;
name|assertScriptContainsLineWithRegex
argument_list|(
name|fileContents
argument_list|,
literal|".*worker.*:\\[.*,.*\\].*"
argument_list|)
expr_stmt|;
name|assertScriptContainsLineWithRegex
argument_list|(
name|fileContents
argument_list|,
literal|".*ps.*:\\[.*,.*\\].*"
argument_list|)
expr_stmt|;
name|assertTypeInJson
argument_list|(
name|fileContents
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

