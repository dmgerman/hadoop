begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.yarnservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|TensorFlowRunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
operator|.
name|RunJobCli
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|MockClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|TensorFlowRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|JobSubmitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|StorageKeyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|SubmarineStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|ServiceSpecFileGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|ServiceWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|YarnServiceJobSubmitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|component
operator|.
name|TensorBoardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
operator|.
name|ZipUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|DEFAULT_CHECKPOINT_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|DEFAULT_DOCKER_IMAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|DEFAULT_INPUT_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|DEFAULT_PS_DOCKER_IMAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|DEFAULT_PS_LAUNCH_CMD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|DEFAULT_PS_RESOURCES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|DEFAULT_TENSORBOARD_DOCKER_IMAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|DEFAULT_TENSORBOARD_RESOURCES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|DEFAULT_WORKER_DOCKER_IMAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|DEFAULT_WORKER_LAUNCH_CMD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|DEFAULT_WORKER_RESOURCES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Class to test YarnService with the Run job CLI action.  */
end_comment

begin_class
DECL|class|TestYarnServiceRunJobCli
specifier|public
class|class
name|TestYarnServiceRunJobCli
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestYarnServiceRunJobCli
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|testCommons
specifier|private
name|TestYarnServiceRunJobCliCommons
name|testCommons
init|=
operator|new
name|TestYarnServiceRunJobCliCommons
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|testName
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|testCommons
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|testCommons
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrintHelp ()
specifier|public
name|void
name|testPrintHelp
parameter_list|()
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|runJobCli
operator|.
name|printUsages
argument_list|()
expr_stmt|;
block|}
DECL|method|getServiceWrapperFromJobSubmitter ( JobSubmitter jobSubmitter)
specifier|private
name|ServiceWrapper
name|getServiceWrapperFromJobSubmitter
parameter_list|(
name|JobSubmitter
name|jobSubmitter
parameter_list|)
block|{
return|return
operator|(
operator|(
name|YarnServiceJobSubmitter
operator|)
name|jobSubmitter
operator|)
operator|.
name|getServiceWrapper
argument_list|()
return|;
block|}
DECL|method|commonVerifyDistributedTrainingSpec (Service serviceSpec)
specifier|private
name|void
name|commonVerifyDistributedTrainingSpec
parameter_list|(
name|Service
name|serviceSpec
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TensorFlowRole
operator|.
name|WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TensorFlowRole
operator|.
name|PRIMARY_WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TensorFlowRole
operator|.
name|PS
operator|.
name|getComponentName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Component
name|primaryWorkerComp
init|=
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TensorFlowRole
operator|.
name|PRIMARY_WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|primaryWorkerComp
operator|.
name|getResource
argument_list|()
operator|.
name|calcMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|primaryWorkerComp
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Component
name|workerComp
init|=
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TensorFlowRole
operator|.
name|WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|workerComp
operator|.
name|getResource
argument_list|()
operator|.
name|calcMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|workerComp
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Component
name|psComp
init|=
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TensorFlowRole
operator|.
name|PS
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|psComp
operator|.
name|getResource
argument_list|()
operator|.
name|calcMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|psComp
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_WORKER_DOCKER_IMAGE
argument_list|,
name|workerComp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_PS_DOCKER_IMAGE
argument_list|,
name|psComp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyQuicklink (Service serviceSpec, Map<String, String> expectedQuicklinks)
specifier|private
name|void
name|verifyQuicklink
parameter_list|(
name|Service
name|serviceSpec
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedQuicklinks
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|actualQuicklinks
init|=
name|serviceSpec
operator|.
name|getQuicklinks
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualQuicklinks
operator|==
literal|null
operator|||
name|actualQuicklinks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|expectedQuicklinks
operator|==
literal|null
operator|||
name|expectedQuicklinks
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
name|expectedQuicklinks
operator|.
name|size
argument_list|()
argument_list|,
name|actualQuicklinks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedEntry
range|:
name|expectedQuicklinks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|actualQuicklinks
operator|.
name|containsKey
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// $USER could be changed in different environment. so replace $USER by
comment|// "user"
name|String
name|expectedValue
init|=
name|expectedEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|actualValue
init|=
name|actualQuicklinks
operator|.
name|get
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|actualValue
operator|=
name|actualValue
operator|.
name|replaceAll
argument_list|(
name|userName
argument_list|,
literal|"username"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|saveServiceSpecJsonToTempFile (Service service)
specifier|private
name|void
name|saveServiceSpecJsonToTempFile
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jsonFileName
init|=
name|ServiceSpecFileGenerator
operator|.
name|generateJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
comment|//    testCommons.getFileUtils().addTrackedFile(new File(jsonFileName));
name|LOG
operator|.
name|info
argument_list|(
literal|"Saved json file: "
operator|+
name|jsonFileName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForDistributedTraining ()
specifier|public
name|void
name|testBasicRunJobForDistributedTraining
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|params
init|=
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withInputPath
argument_list|(
name|DEFAULT_INPUT_PATH
argument_list|)
operator|.
name|withCheckpointPath
argument_list|(
name|DEFAULT_CHECKPOINT_PATH
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|3
argument_list|)
operator|.
name|withWorkerDockerImage
argument_list|(
name|DEFAULT_WORKER_DOCKER_IMAGE
argument_list|)
operator|.
name|withWorkerLaunchCommand
argument_list|(
name|DEFAULT_WORKER_LAUNCH_CMD
argument_list|)
operator|.
name|withWorkerResources
argument_list|(
name|DEFAULT_WORKER_RESOURCES
argument_list|)
operator|.
name|withNumberOfPs
argument_list|(
literal|2
argument_list|)
operator|.
name|withPsDockerImage
argument_list|(
name|DEFAULT_PS_DOCKER_IMAGE
argument_list|)
operator|.
name|withPsLaunchCommand
argument_list|(
name|DEFAULT_PS_LAUNCH_CMD
argument_list|)
operator|.
name|withPsResources
argument_list|(
name|DEFAULT_PS_RESOURCES
argument_list|)
operator|.
name|withVerbose
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|saveServiceSpecJsonToTempFile
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonVerifyDistributedTrainingSpec
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyQuicklink
argument_list|(
name|serviceSpec
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForDistributedTrainingWithTensorboard ()
specifier|public
name|void
name|testBasicRunJobForDistributedTrainingWithTensorboard
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|jobName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
index|[]
name|params
init|=
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|jobName
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withInputPath
argument_list|(
name|DEFAULT_INPUT_PATH
argument_list|)
operator|.
name|withCheckpointPath
argument_list|(
name|DEFAULT_CHECKPOINT_PATH
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|3
argument_list|)
operator|.
name|withWorkerDockerImage
argument_list|(
name|DEFAULT_WORKER_DOCKER_IMAGE
argument_list|)
operator|.
name|withWorkerLaunchCommand
argument_list|(
name|DEFAULT_WORKER_LAUNCH_CMD
argument_list|)
operator|.
name|withWorkerResources
argument_list|(
name|DEFAULT_WORKER_RESOURCES
argument_list|)
operator|.
name|withNumberOfPs
argument_list|(
literal|2
argument_list|)
operator|.
name|withPsDockerImage
argument_list|(
name|DEFAULT_PS_DOCKER_IMAGE
argument_list|)
operator|.
name|withPsLaunchCommand
argument_list|(
name|DEFAULT_PS_LAUNCH_CMD
argument_list|)
operator|.
name|withPsResources
argument_list|(
name|DEFAULT_PS_RESOURCES
argument_list|)
operator|.
name|withVerbose
argument_list|()
operator|.
name|withTensorboard
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|ServiceWrapper
name|serviceWrapper
init|=
name|getServiceWrapperFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|serviceSpec
init|=
name|serviceWrapper
operator|.
name|getService
argument_list|()
decl_stmt|;
name|saveServiceSpecJsonToTempFile
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonVerifyDistributedTrainingSpec
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceWrapper
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQuicklink
argument_list|(
name|serviceSpec
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|TensorBoardComponent
operator|.
name|TENSORBOARD_QUICKLINK_LABEL
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"http://tensorboard-0.%s.username.null:6006"
argument_list|,
name|jobName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForSingleNodeTraining ()
specifier|public
name|void
name|testBasicRunJobForSingleNodeTraining
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|params
init|=
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withInputPath
argument_list|(
name|DEFAULT_INPUT_PATH
argument_list|)
operator|.
name|withCheckpointPath
argument_list|(
name|DEFAULT_CHECKPOINT_PATH
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|1
argument_list|)
operator|.
name|withWorkerLaunchCommand
argument_list|(
name|DEFAULT_WORKER_LAUNCH_CMD
argument_list|)
operator|.
name|withWorkerResources
argument_list|(
name|DEFAULT_WORKER_RESOURCES
argument_list|)
operator|.
name|withVerbose
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|saveServiceSpecJsonToTempFile
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonTestSingleNodeTraining
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTensorboardOnlyService ()
specifier|public
name|void
name|testTensorboardOnlyService
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|params
init|=
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withInputPath
argument_list|(
name|DEFAULT_INPUT_PATH
argument_list|)
operator|.
name|withCheckpointPath
argument_list|(
name|DEFAULT_CHECKPOINT_PATH
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|0
argument_list|)
operator|.
name|withTensorboard
argument_list|()
operator|.
name|withVerbose
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|ServiceWrapper
name|serviceWrapper
init|=
name|getServiceWrapperFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|saveServiceSpecJsonToTempFile
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceWrapper
operator|.
name|getService
argument_list|()
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceWrapper
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTensorboardOnlyServiceWithCustomDockerImageAndCheckpointPath ()
specifier|public
name|void
name|testTensorboardOnlyServiceWithCustomDockerImageAndCheckpointPath
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|params
init|=
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withInputPath
argument_list|(
name|DEFAULT_INPUT_PATH
argument_list|)
operator|.
name|withCheckpointPath
argument_list|(
name|DEFAULT_CHECKPOINT_PATH
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|0
argument_list|)
operator|.
name|withTensorboard
argument_list|()
operator|.
name|withTensorboardResources
argument_list|(
name|DEFAULT_TENSORBOARD_RESOURCES
argument_list|)
operator|.
name|withTensorboardDockerImage
argument_list|(
name|DEFAULT_TENSORBOARD_DOCKER_IMAGE
argument_list|)
operator|.
name|withVerbose
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|ServiceWrapper
name|serviceWrapper
init|=
name|getServiceWrapperFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|saveServiceSpecJsonToTempFile
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceWrapper
operator|.
name|getService
argument_list|()
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceWrapper
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTensorboardOnlyServiceWithCustomizedDockerImageAndResource ()
specifier|public
name|void
name|testTensorboardOnlyServiceWithCustomizedDockerImageAndResource
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|jobName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
index|[]
name|params
init|=
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|jobName
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|0
argument_list|)
operator|.
name|withTensorboard
argument_list|()
operator|.
name|withTensorboardResources
argument_list|(
name|DEFAULT_TENSORBOARD_RESOURCES
argument_list|)
operator|.
name|withTensorboardDockerImage
argument_list|(
name|DEFAULT_TENSORBOARD_DOCKER_IMAGE
argument_list|)
operator|.
name|withVerbose
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|ServiceWrapper
name|serviceWrapper
init|=
name|getServiceWrapperFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|saveServiceSpecJsonToTempFile
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceWrapper
operator|.
name|getService
argument_list|()
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceWrapper
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQuicklink
argument_list|(
name|serviceWrapper
operator|.
name|getService
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|TensorBoardComponent
operator|.
name|TENSORBOARD_QUICKLINK_LABEL
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"http://tensorboard-0.%s.username.null:6006"
argument_list|,
name|jobName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|commonTestSingleNodeTraining (Service serviceSpec)
specifier|private
name|void
name|commonTestSingleNodeTraining
parameter_list|(
name|Service
name|serviceSpec
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TensorFlowRole
operator|.
name|PRIMARY_WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Component
name|primaryWorkerComp
init|=
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TensorFlowRole
operator|.
name|PRIMARY_WORKER
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|primaryWorkerComp
operator|.
name|getResource
argument_list|()
operator|.
name|calcMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|primaryWorkerComp
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTensorboardComponent (RunJobCli runJobCli, ServiceWrapper serviceWrapper, Resource resource)
specifier|private
name|void
name|verifyTensorboardComponent
parameter_list|(
name|RunJobCli
name|runJobCli
parameter_list|,
name|ServiceWrapper
name|serviceWrapper
parameter_list|,
name|Resource
name|resource
parameter_list|)
throws|throws
name|Exception
block|{
name|Service
name|serviceSpec
init|=
name|serviceWrapper
operator|.
name|getService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TensorFlowRole
operator|.
name|TENSORBOARD
operator|.
name|getComponentName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Component
name|tensorboardComp
init|=
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|TensorFlowRole
operator|.
name|TENSORBOARD
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tensorboardComp
operator|.
name|getNumberOfContainers
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|tensorboardComp
operator|.
name|getResource
argument_list|()
operator|.
name|calcMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|tensorboardComp
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"./run-TENSORBOARD.sh"
argument_list|,
name|tensorboardComp
operator|.
name|getLaunchCommand
argument_list|()
argument_list|)
expr_stmt|;
name|RunJobParameters
name|runJobParameters
init|=
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|RunJobParameters
operator|.
name|class
operator|+
literal|" must be an instance of "
operator|+
name|TensorFlowRunJobParameters
operator|.
name|class
argument_list|,
name|runJobParameters
operator|instanceof
name|TensorFlowRunJobParameters
argument_list|)
expr_stmt|;
name|TensorFlowRunJobParameters
name|tensorFlowParams
init|=
operator|(
name|TensorFlowRunJobParameters
operator|)
name|runJobParameters
decl_stmt|;
comment|// Check docker image
if|if
condition|(
name|tensorFlowParams
operator|.
name|getTensorboardDockerImage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|tensorFlowParams
operator|.
name|getTensorboardDockerImage
argument_list|()
argument_list|,
name|tensorboardComp
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|tensorboardComp
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|expectedLaunchScript
init|=
literal|"#!/bin/bash\n"
operator|+
literal|"echo \"CLASSPATH:$CLASSPATH\"\n"
operator|+
literal|"echo \"HADOOP_CONF_DIR:$HADOOP_CONF_DIR\"\n"
operator|+
literal|"echo \"HADOOP_TOKEN_FILE_LOCATION:"
operator|+
literal|"$HADOOP_TOKEN_FILE_LOCATION\"\n"
operator|+
literal|"echo \"JAVA_HOME:$JAVA_HOME\"\n"
operator|+
literal|"echo \"LD_LIBRARY_PATH:$LD_LIBRARY_PATH\"\n"
operator|+
literal|"echo \"HADOOP_HDFS_HOME:$HADOOP_HDFS_HOME\"\n"
operator|+
literal|"export LC_ALL=C&& tensorboard --logdir="
operator|+
name|runJobParameters
operator|.
name|getCheckpointPath
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
name|verifyLaunchScriptForComponent
argument_list|(
name|serviceWrapper
argument_list|,
name|TensorFlowRole
operator|.
name|TENSORBOARD
argument_list|,
name|expectedLaunchScript
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyLaunchScriptForComponent (ServiceWrapper serviceWrapper, TensorFlowRole taskType, String expectedLaunchScriptContent)
specifier|private
name|void
name|verifyLaunchScriptForComponent
parameter_list|(
name|ServiceWrapper
name|serviceWrapper
parameter_list|,
name|TensorFlowRole
name|taskType
parameter_list|,
name|String
name|expectedLaunchScriptContent
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|serviceWrapper
operator|.
name|getLocalLaunchCommandPathForComponent
argument_list|(
name|taskType
operator|.
name|getComponentName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encoded
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|scriptContent
init|=
operator|new
name|String
argument_list|(
name|encoded
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLaunchScriptContent
argument_list|,
name|scriptContent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForSingleNodeTrainingWithTensorboard ()
specifier|public
name|void
name|testBasicRunJobForSingleNodeTrainingWithTensorboard
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|params
init|=
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withInputPath
argument_list|(
name|DEFAULT_INPUT_PATH
argument_list|)
operator|.
name|withCheckpointPath
argument_list|(
name|DEFAULT_CHECKPOINT_PATH
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|1
argument_list|)
operator|.
name|withWorkerLaunchCommand
argument_list|(
name|DEFAULT_WORKER_LAUNCH_CMD
argument_list|)
operator|.
name|withWorkerResources
argument_list|(
name|DEFAULT_WORKER_RESOURCES
argument_list|)
operator|.
name|withTensorboard
argument_list|()
operator|.
name|withVerbose
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|ServiceWrapper
name|serviceWrapper
init|=
name|getServiceWrapperFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|serviceSpec
init|=
name|serviceWrapper
operator|.
name|getService
argument_list|()
decl_stmt|;
name|saveServiceSpecJsonToTempFile
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonTestSingleNodeTraining
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceWrapper
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForSingleNodeTrainingWithGeneratedCheckpoint ()
specifier|public
name|void
name|testBasicRunJobForSingleNodeTrainingWithGeneratedCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|params
init|=
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withInputPath
argument_list|(
name|DEFAULT_INPUT_PATH
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|1
argument_list|)
operator|.
name|withWorkerLaunchCommand
argument_list|(
name|DEFAULT_WORKER_LAUNCH_CMD
argument_list|)
operator|.
name|withWorkerResources
argument_list|(
name|DEFAULT_WORKER_RESOURCES
argument_list|)
operator|.
name|withTensorboard
argument_list|()
operator|.
name|withVerbose
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|ServiceWrapper
name|serviceWrapper
init|=
name|getServiceWrapperFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|serviceSpec
init|=
name|serviceWrapper
operator|.
name|getService
argument_list|()
decl_stmt|;
name|saveServiceSpecJsonToTempFile
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonTestSingleNodeTraining
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyTensorboardComponent
argument_list|(
name|runJobCli
argument_list|,
name|serviceWrapper
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParameterStorageForTrainingJob ()
specifier|public
name|void
name|testParameterStorageForTrainingJob
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|jobName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
index|[]
name|params
init|=
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|jobName
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withInputPath
argument_list|(
name|DEFAULT_INPUT_PATH
argument_list|)
operator|.
name|withCheckpointPath
argument_list|(
name|DEFAULT_CHECKPOINT_PATH
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|1
argument_list|)
operator|.
name|withWorkerLaunchCommand
argument_list|(
name|DEFAULT_WORKER_LAUNCH_CMD
argument_list|)
operator|.
name|withWorkerResources
argument_list|(
name|DEFAULT_WORKER_RESOURCES
argument_list|)
operator|.
name|withTensorboard
argument_list|()
operator|.
name|withVerbose
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|saveServiceSpecJsonToTempFile
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|SubmarineStorage
name|storage
init|=
name|mockClientContext
operator|.
name|getRuntimeFactory
argument_list|()
operator|.
name|getSubmarineStorage
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobInfo
init|=
name|storage
operator|.
name|getJobInfoByName
argument_list|(
name|jobName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobInfo
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jobInfo
operator|.
name|get
argument_list|(
name|StorageKeyConstants
operator|.
name|INPUT_PATH
argument_list|)
argument_list|,
name|DEFAULT_INPUT_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddQuicklinksWithoutTensorboard ()
specifier|public
name|void
name|testAddQuicklinksWithoutTensorboard
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|jobName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
index|[]
name|params
init|=
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|jobName
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withInputPath
argument_list|(
name|DEFAULT_INPUT_PATH
argument_list|)
operator|.
name|withCheckpointPath
argument_list|(
name|DEFAULT_CHECKPOINT_PATH
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|3
argument_list|)
operator|.
name|withWorkerDockerImage
argument_list|(
name|DEFAULT_WORKER_DOCKER_IMAGE
argument_list|)
operator|.
name|withWorkerLaunchCommand
argument_list|(
name|DEFAULT_WORKER_LAUNCH_CMD
argument_list|)
operator|.
name|withWorkerResources
argument_list|(
name|DEFAULT_WORKER_RESOURCES
argument_list|)
operator|.
name|withNumberOfPs
argument_list|(
literal|2
argument_list|)
operator|.
name|withPsDockerImage
argument_list|(
name|DEFAULT_PS_DOCKER_IMAGE
argument_list|)
operator|.
name|withPsLaunchCommand
argument_list|(
name|DEFAULT_PS_LAUNCH_CMD
argument_list|)
operator|.
name|withPsResources
argument_list|(
name|DEFAULT_PS_RESOURCES
argument_list|)
operator|.
name|withQuickLink
argument_list|(
literal|"AAA=http://master-0:8321"
argument_list|)
operator|.
name|withQuickLink
argument_list|(
literal|"BBB=http://worker-0:1234"
argument_list|)
operator|.
name|withVerbose
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|saveServiceSpecJsonToTempFile
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonVerifyDistributedTrainingSpec
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyQuicklink
argument_list|(
name|serviceSpec
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"AAA"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"http://master-0.%s.username.null:8321"
argument_list|,
name|jobName
argument_list|)
argument_list|,
literal|"BBB"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"http://worker-0.%s.username.null:1234"
argument_list|,
name|jobName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddQuicklinksWithTensorboard ()
specifier|public
name|void
name|testAddQuicklinksWithTensorboard
parameter_list|()
throws|throws
name|Exception
block|{
name|MockClientContext
name|mockClientContext
init|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|jobName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
index|[]
name|params
init|=
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|jobName
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withInputPath
argument_list|(
name|DEFAULT_INPUT_PATH
argument_list|)
operator|.
name|withCheckpointPath
argument_list|(
name|DEFAULT_CHECKPOINT_PATH
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|3
argument_list|)
operator|.
name|withWorkerDockerImage
argument_list|(
name|DEFAULT_WORKER_DOCKER_IMAGE
argument_list|)
operator|.
name|withWorkerLaunchCommand
argument_list|(
name|DEFAULT_WORKER_LAUNCH_CMD
argument_list|)
operator|.
name|withWorkerResources
argument_list|(
name|DEFAULT_WORKER_RESOURCES
argument_list|)
operator|.
name|withNumberOfPs
argument_list|(
literal|2
argument_list|)
operator|.
name|withPsDockerImage
argument_list|(
name|DEFAULT_PS_DOCKER_IMAGE
argument_list|)
operator|.
name|withPsLaunchCommand
argument_list|(
name|DEFAULT_PS_LAUNCH_CMD
argument_list|)
operator|.
name|withPsResources
argument_list|(
name|DEFAULT_PS_RESOURCES
argument_list|)
operator|.
name|withQuickLink
argument_list|(
literal|"AAA=http://master-0:8321"
argument_list|)
operator|.
name|withQuickLink
argument_list|(
literal|"BBB=http://worker-0:1234"
argument_list|)
operator|.
name|withTensorboard
argument_list|()
operator|.
name|withVerbose
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|saveServiceSpecJsonToTempFile
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|commonVerifyDistributedTrainingSpec
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
name|verifyQuicklink
argument_list|(
name|serviceSpec
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"AAA"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"http://master-0.%s.username.null:8321"
argument_list|,
name|jobName
argument_list|)
argument_list|,
literal|"BBB"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"http://worker-0.%s.username.null:1234"
argument_list|,
name|jobName
argument_list|)
argument_list|,
name|TensorBoardComponent
operator|.
name|TENSORBOARD_QUICKLINK_LABEL
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"http://tensorboard-0.%s.username.null:6006"
argument_list|,
name|jobName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test zip function.    * A dir "/user/yarn/mydir" has two files and one subdir    * */
annotation|@
name|Test
DECL|method|testYarnServiceSubmitterZipFunction ()
specifier|public
name|void
name|testYarnServiceSubmitterZipFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|localUrl
init|=
literal|"/user/yarn/mydir"
decl_stmt|;
name|String
name|localSubDirName
init|=
literal|"subdir1"
decl_stmt|;
comment|// create local file
name|File
name|localDir1
init|=
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createDirInTempDir
argument_list|(
name|localUrl
argument_list|)
decl_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|localDir1
argument_list|,
literal|"1.py"
argument_list|)
expr_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|localDir1
argument_list|,
literal|"2.py"
argument_list|)
expr_stmt|;
name|File
name|localSubDir
init|=
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createDirectory
argument_list|(
name|localDir1
argument_list|,
name|localSubDirName
argument_list|)
decl_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|localSubDir
argument_list|,
literal|"3.py"
argument_list|)
expr_stmt|;
name|String
name|tempDir
init|=
name|localDir1
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|zipFilePath
init|=
name|ZipUtilities
operator|.
name|zipDir
argument_list|(
name|localDir1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"mydir.zip"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|zipFile
init|=
operator|new
name|File
argument_list|(
name|zipFilePath
argument_list|)
decl_stmt|;
name|File
name|unzipTargetDir
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"unzipDir"
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|unZip
argument_list|(
name|zipFile
argument_list|,
name|unzipTargetDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|tempDir
operator|+
literal|"/unzipDir/1.py"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|tempDir
operator|+
literal|"/unzipDir/2.py"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|tempDir
operator|+
literal|"/unzipDir/subdir1"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|tempDir
operator|+
literal|"/unzipDir/subdir1/3.py"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

