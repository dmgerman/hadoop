begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice.command
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|HadoopEnvironmentSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|command
operator|.
name|TensorBoardLaunchCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|command
operator|.
name|TensorFlowPsLaunchCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|command
operator|.
name|TensorFlowWorkerLaunchCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_comment
comment|/**  * This class is to test the {@link LaunchCommandFactory}.  */
end_comment

begin_class
DECL|class|TestLaunchCommandFactory
specifier|public
class|class
name|TestLaunchCommandFactory
block|{
DECL|method|createLaunchCommandFactory ( RunJobParameters parameters)
specifier|private
name|LaunchCommandFactory
name|createLaunchCommandFactory
parameter_list|(
name|RunJobParameters
name|parameters
parameter_list|)
block|{
name|HadoopEnvironmentSetup
name|hadoopEnvSetup
init|=
name|mock
argument_list|(
name|HadoopEnvironmentSetup
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
name|mock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|LaunchCommandFactory
argument_list|(
name|hadoopEnvSetup
argument_list|,
name|parameters
argument_list|,
name|configuration
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|createLaunchCommandWorkerAndPrimaryWorker ()
specifier|public
name|void
name|createLaunchCommandWorkerAndPrimaryWorker
parameter_list|()
throws|throws
name|IOException
block|{
name|RunJobParameters
name|parameters
init|=
operator|new
name|RunJobParameters
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|setWorkerLaunchCmd
argument_list|(
literal|"testWorkerLaunchCommand"
argument_list|)
expr_stmt|;
name|LaunchCommandFactory
name|launchCommandFactory
init|=
name|createLaunchCommandFactory
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|Component
name|mockComponent
init|=
name|mock
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractLaunchCommand
name|launchCommand
init|=
name|launchCommandFactory
operator|.
name|createLaunchCommand
argument_list|(
name|TaskType
operator|.
name|PRIMARY_WORKER
argument_list|,
name|mockComponent
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|launchCommand
operator|instanceof
name|TensorFlowWorkerLaunchCommand
argument_list|)
expr_stmt|;
name|launchCommand
operator|=
name|launchCommandFactory
operator|.
name|createLaunchCommand
argument_list|(
name|TaskType
operator|.
name|WORKER
argument_list|,
name|mockComponent
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|launchCommand
operator|instanceof
name|TensorFlowWorkerLaunchCommand
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createLaunchCommandPs ()
specifier|public
name|void
name|createLaunchCommandPs
parameter_list|()
throws|throws
name|IOException
block|{
name|RunJobParameters
name|parameters
init|=
operator|new
name|RunJobParameters
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|setPSLaunchCmd
argument_list|(
literal|"testPSLaunchCommand"
argument_list|)
expr_stmt|;
name|LaunchCommandFactory
name|launchCommandFactory
init|=
name|createLaunchCommandFactory
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|Component
name|mockComponent
init|=
name|mock
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractLaunchCommand
name|launchCommand
init|=
name|launchCommandFactory
operator|.
name|createLaunchCommand
argument_list|(
name|TaskType
operator|.
name|PS
argument_list|,
name|mockComponent
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|launchCommand
operator|instanceof
name|TensorFlowPsLaunchCommand
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createLaunchCommandTensorboard ()
specifier|public
name|void
name|createLaunchCommandTensorboard
parameter_list|()
throws|throws
name|IOException
block|{
name|RunJobParameters
name|parameters
init|=
operator|new
name|RunJobParameters
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|setCheckpointPath
argument_list|(
literal|"testCheckpointPath"
argument_list|)
expr_stmt|;
name|LaunchCommandFactory
name|launchCommandFactory
init|=
name|createLaunchCommandFactory
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|Component
name|mockComponent
init|=
name|mock
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractLaunchCommand
name|launchCommand
init|=
name|launchCommandFactory
operator|.
name|createLaunchCommand
argument_list|(
name|TaskType
operator|.
name|TENSORBOARD
argument_list|,
name|mockComponent
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|launchCommand
operator|instanceof
name|TensorBoardLaunchCommand
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

