begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.yarnservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
operator|.
name|RunJobCli
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|MockClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|RemoteDirectoryManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|yarnservice
operator|.
name|TestYarnServiceRunJobCliCommons
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  * Class to test YarnService localization feature with the Run job CLI action.  */
end_comment

begin_class
DECL|class|TestYarnServiceRunJobCliLocalization
specifier|public
class|class
name|TestYarnServiceRunJobCliLocalization
block|{
DECL|field|ZIP_EXTENSION
specifier|private
specifier|static
specifier|final
name|String
name|ZIP_EXTENSION
init|=
literal|".zip"
decl_stmt|;
DECL|field|testCommons
specifier|private
name|TestYarnServiceRunJobCliCommons
name|testCommons
init|=
operator|new
name|TestYarnServiceRunJobCliCommons
argument_list|()
decl_stmt|;
DECL|field|mockClientContext
specifier|private
name|MockClientContext
name|mockClientContext
decl_stmt|;
DECL|field|spyRdm
specifier|private
name|RemoteDirectoryManager
name|spyRdm
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|testCommons
operator|.
name|setup
argument_list|()
expr_stmt|;
name|mockClientContext
operator|=
name|YarnServiceCliTestUtils
operator|.
name|getMockClientContext
argument_list|()
expr_stmt|;
name|spyRdm
operator|=
name|setupSpyRemoteDirManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|testCommons
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
DECL|method|createCommonParamsBuilder ()
specifier|private
name|ParamBuilderForTest
name|createCommonParamsBuilder
parameter_list|()
block|{
return|return
name|ParamBuilderForTest
operator|.
name|create
argument_list|()
operator|.
name|withFramework
argument_list|(
literal|"tensorflow"
argument_list|)
operator|.
name|withJobName
argument_list|(
name|DEFAULT_JOB_NAME
argument_list|)
operator|.
name|withDockerImage
argument_list|(
name|DEFAULT_DOCKER_IMAGE
argument_list|)
operator|.
name|withInputPath
argument_list|(
name|DEFAULT_INPUT_PATH
argument_list|)
operator|.
name|withCheckpointPath
argument_list|(
name|DEFAULT_CHECKPOINT_PATH
argument_list|)
operator|.
name|withNumberOfWorkers
argument_list|(
literal|3
argument_list|)
operator|.
name|withWorkerDockerImage
argument_list|(
name|DEFAULT_WORKER_DOCKER_IMAGE
argument_list|)
operator|.
name|withWorkerLaunchCommand
argument_list|(
name|DEFAULT_WORKER_LAUNCH_CMD
argument_list|)
operator|.
name|withWorkerResources
argument_list|(
name|DEFAULT_WORKER_RESOURCES
argument_list|)
operator|.
name|withNumberOfPs
argument_list|(
literal|2
argument_list|)
operator|.
name|withPsDockerImage
argument_list|(
name|DEFAULT_PS_DOCKER_IMAGE
argument_list|)
operator|.
name|withPsLaunchCommand
argument_list|(
name|DEFAULT_PS_LAUNCH_CMD
argument_list|)
operator|.
name|withPsResources
argument_list|(
name|DEFAULT_PS_RESOURCES
argument_list|)
operator|.
name|withVerbose
argument_list|()
return|;
block|}
DECL|method|assertFilesAreDeleted (File... files)
specifier|private
name|void
name|assertFilesAreDeleted
parameter_list|(
name|File
modifier|...
name|files
parameter_list|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|assertFalse
argument_list|(
literal|"File should be deleted: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupSpyRemoteDirManager ()
specifier|private
name|RemoteDirectoryManager
name|setupSpyRemoteDirManager
parameter_list|()
block|{
name|RemoteDirectoryManager
name|spyRdm
init|=
name|spy
argument_list|(
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|)
decl_stmt|;
name|mockClientContext
operator|.
name|setRemoteDirectoryMgr
argument_list|(
name|spyRdm
argument_list|)
expr_stmt|;
return|return
name|spyRdm
return|;
block|}
DECL|method|getStagingDir ()
specifier|private
name|Path
name|getStagingDir
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getJobStagingArea
argument_list|(
name|DEFAULT_JOB_NAME
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|createRunJobCliWithoutVerboseAssertion ()
specifier|private
name|RunJobCli
name|createRunJobCliWithoutVerboseAssertion
parameter_list|()
block|{
return|return
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
return|;
block|}
DECL|method|createRunJobCli ()
specifier|private
name|RunJobCli
name|createRunJobCli
parameter_list|()
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|runJobCli
return|;
block|}
DECL|method|getFilePath (String localUrl, Path stagingDir)
specifier|private
name|String
name|getFilePath
parameter_list|(
name|String
name|localUrl
parameter_list|,
name|Path
name|stagingDir
parameter_list|)
block|{
return|return
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|localUrl
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getFilePathWithSuffix (Path stagingDir, String localUrl, String suffix)
specifier|private
name|String
name|getFilePathWithSuffix
parameter_list|(
name|Path
name|stagingDir
parameter_list|,
name|String
name|localUrl
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
return|return
name|stagingDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|localUrl
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
name|suffix
return|;
block|}
DECL|method|assertConfigFile (ConfigFile expected, ConfigFile actual)
specifier|private
name|void
name|assertConfigFile
parameter_list|(
name|ConfigFile
name|expected
parameter_list|,
name|ConfigFile
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"ConfigFile does not equal to expected!"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNumberOfLocalizations (List<ConfigFile> files, int expected)
specifier|private
name|void
name|assertNumberOfLocalizations
parameter_list|(
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|files
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Number of localizations is not the expected!"
argument_list|,
name|expected
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRdmCopyToRemoteLocalCalls (int expectedCalls)
specifier|private
name|void
name|verifyRdmCopyToRemoteLocalCalls
parameter_list|(
name|int
name|expectedCalls
parameter_list|)
throws|throws
name|IOException
block|{
name|verify
argument_list|(
name|spyRdm
argument_list|,
name|times
argument_list|(
name|expectedCalls
argument_list|)
argument_list|)
operator|.
name|copyRemoteToLocal
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Basic test.    * In one hand, create local temp file/dir for hdfs URI in    * local staging dir.    * In the other hand, use MockRemoteDirectoryManager mock    * implementation when check FileStatus or exists of HDFS file/dir    * --localization hdfs:///user/yarn/script1.py:.    * --localization /temp/script2.py:./    * --localization /temp/script2.py:/opt/script.py    */
annotation|@
name|Test
DECL|method|testRunJobWithBasicLocalization ()
specifier|public
name|void
name|testRunJobWithBasicLocalization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteUrl
init|=
literal|"hdfs:///user/yarn/script1.py"
decl_stmt|;
name|String
name|containerLocal1
init|=
literal|"."
decl_stmt|;
name|String
name|localUrl
init|=
literal|"/temp/script2.py"
decl_stmt|;
name|String
name|containerLocal2
init|=
literal|"./"
decl_stmt|;
name|String
name|containerLocal3
init|=
literal|"/opt/script.py"
decl_stmt|;
comment|// Create local file, we need to put it under local temp dir
name|File
name|localFile1
init|=
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInTempDir
argument_list|(
name|localUrl
argument_list|)
decl_stmt|;
comment|// create remote file in local staging dir to simulate HDFS
name|Path
name|stagingDir
init|=
name|getStagingDir
argument_list|()
decl_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|stagingDir
argument_list|,
name|remoteUrl
argument_list|)
expr_stmt|;
name|String
index|[]
name|params
init|=
name|createCommonParamsBuilder
argument_list|()
operator|.
name|withLocalization
argument_list|(
name|remoteUrl
argument_list|,
name|containerLocal1
argument_list|)
operator|.
name|withLocalization
argument_list|(
name|localFile1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|containerLocal2
argument_list|)
operator|.
name|withLocalization
argument_list|(
name|localFile1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|containerLocal3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
name|createRunJobCli
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|assertNumberOfServiceComponents
argument_list|(
name|serviceSpec
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// No remote dir and HDFS file exists.
comment|// Ensure download never happened.
name|verifyRdmCopyToRemoteLocalCalls
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Ensure local original files are not deleted
name|assertTrue
argument_list|(
name|localFile1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|files
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
decl_stmt|;
name|assertNumberOfLocalizations
argument_list|(
name|files
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ConfigFile
name|expectedConfigFile
init|=
operator|new
name|ConfigFile
argument_list|()
decl_stmt|;
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|remoteUrl
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteUrl
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|=
operator|new
name|ConfigFile
argument_list|()
expr_stmt|;
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|getFilePath
argument_list|(
name|localUrl
argument_list|,
name|stagingDir
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|localUrl
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|=
operator|new
name|ConfigFile
argument_list|()
expr_stmt|;
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|getFilePath
argument_list|(
name|localUrl
argument_list|,
name|stagingDir
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|containerLocal3
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure env value is correct
name|String
name|env
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
literal|"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS"
argument_list|)
decl_stmt|;
name|String
name|expectedMounts
init|=
operator|new
name|Path
argument_list|(
name|containerLocal3
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|containerLocal3
operator|+
literal|":rw"
decl_stmt|;
name|assertTrue
argument_list|(
name|env
operator|.
name|contains
argument_list|(
name|expectedMounts
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNumberOfServiceComponents (Service serviceSpec, int expected)
specifier|private
name|void
name|assertNumberOfServiceComponents
parameter_list|(
name|Service
name|serviceSpec
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|serviceSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Non HDFS remote URI test.    * --localization https://a/b/1.patch:.    * --localization s3a://a/dir:/opt/mys3dir    */
annotation|@
name|Test
DECL|method|testRunJobWithNonHDFSRemoteLocalization ()
specifier|public
name|void
name|testRunJobWithNonHDFSRemoteLocalization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteUri1
init|=
literal|"https://a/b/1.patch"
decl_stmt|;
name|String
name|containerLocal1
init|=
literal|"."
decl_stmt|;
name|String
name|remoteUri2
init|=
literal|"s3a://a/s3dir"
decl_stmt|;
name|String
name|containerLocal2
init|=
literal|"/opt/mys3dir"
decl_stmt|;
comment|// create remote file in local staging dir to simulate HDFS
name|Path
name|stagingDir
init|=
name|getStagingDir
argument_list|()
decl_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|stagingDir
argument_list|,
name|remoteUri1
argument_list|)
expr_stmt|;
name|File
name|remoteDir1
init|=
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createDirectory
argument_list|(
name|stagingDir
argument_list|,
name|remoteUri2
argument_list|)
decl_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|remoteDir1
argument_list|,
literal|"afile"
argument_list|)
expr_stmt|;
name|String
name|suffix1
init|=
literal|"_"
operator|+
name|remoteDir1
operator|.
name|lastModified
argument_list|()
operator|+
literal|"-"
operator|+
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getRemoteFileSize
argument_list|(
name|remoteUri2
argument_list|)
decl_stmt|;
name|String
index|[]
name|params
init|=
name|createCommonParamsBuilder
argument_list|()
operator|.
name|withLocalization
argument_list|(
name|remoteUri1
argument_list|,
name|containerLocal1
argument_list|)
operator|.
name|withLocalization
argument_list|(
name|remoteUri2
argument_list|,
name|containerLocal2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
name|createRunJobCli
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|assertNumberOfServiceComponents
argument_list|(
name|serviceSpec
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Ensure download remote dir 2 times
name|verifyRdmCopyToRemoteLocalCalls
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Ensure downloaded temp files are deleted
name|assertFilesAreDeleted
argument_list|(
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|getTempFileWithName
argument_list|(
name|remoteUri1
argument_list|)
argument_list|,
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|getTempFileWithName
argument_list|(
name|remoteUri2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure zip file are deleted
name|assertFilesAreDeleted
argument_list|(
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|getTempFileWithName
argument_list|(
name|remoteUri2
operator|+
literal|"_"
operator|+
name|suffix1
operator|+
name|ZIP_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|files
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
decl_stmt|;
name|assertNumberOfLocalizations
argument_list|(
name|files
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ConfigFile
name|expectedConfigFile
init|=
operator|new
name|ConfigFile
argument_list|()
decl_stmt|;
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|getFilePath
argument_list|(
name|remoteUri1
argument_list|,
name|stagingDir
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteUri1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|=
operator|new
name|ConfigFile
argument_list|()
expr_stmt|;
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|getFilePathWithSuffix
argument_list|(
name|stagingDir
argument_list|,
name|remoteUri2
argument_list|,
name|suffix1
operator|+
name|ZIP_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|containerLocal2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure env value is correct
name|String
name|env
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
literal|"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS"
argument_list|)
decl_stmt|;
name|String
name|expectedMounts
init|=
operator|new
name|Path
argument_list|(
name|remoteUri2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|containerLocal2
operator|+
literal|":rw"
decl_stmt|;
name|assertTrue
argument_list|(
name|env
operator|.
name|contains
argument_list|(
name|expectedMounts
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test HDFS dir localization.    * --localization hdfs:///user/yarn/mydir:./mydir1    * --localization hdfs:///user/yarn/mydir2:/opt/dir2:rw    * --localization hdfs:///user/yarn/mydir:.    * --localization hdfs:///user/yarn/mydir2:./    */
annotation|@
name|Test
DECL|method|testRunJobWithHdfsDirLocalization ()
specifier|public
name|void
name|testRunJobWithHdfsDirLocalization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteUrl
init|=
literal|"hdfs:///user/yarn/mydir"
decl_stmt|;
name|String
name|containerPath
init|=
literal|"./mydir1"
decl_stmt|;
name|String
name|remoteUrl2
init|=
literal|"hdfs:///user/yarn/mydir2"
decl_stmt|;
name|String
name|containerPath2
init|=
literal|"/opt/dir2"
decl_stmt|;
name|String
name|containerPath3
init|=
literal|"."
decl_stmt|;
name|String
name|containerPath4
init|=
literal|"./"
decl_stmt|;
comment|// create remote file in local staging dir to simulate HDFS
name|Path
name|stagingDir
init|=
name|getStagingDir
argument_list|()
decl_stmt|;
name|File
name|remoteDir1
init|=
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createDirectory
argument_list|(
name|stagingDir
argument_list|,
name|remoteUrl
argument_list|)
decl_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|remoteDir1
argument_list|,
literal|"1.py"
argument_list|)
expr_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|remoteDir1
argument_list|,
literal|"2.py"
argument_list|)
expr_stmt|;
name|File
name|remoteDir2
init|=
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createDirectory
argument_list|(
name|stagingDir
argument_list|,
name|remoteUrl2
argument_list|)
decl_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|remoteDir2
argument_list|,
literal|"3.py"
argument_list|)
expr_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|remoteDir2
argument_list|,
literal|"4.py"
argument_list|)
expr_stmt|;
name|String
name|suffix1
init|=
literal|"_"
operator|+
name|remoteDir1
operator|.
name|lastModified
argument_list|()
operator|+
literal|"-"
operator|+
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getRemoteFileSize
argument_list|(
name|remoteUrl
argument_list|)
decl_stmt|;
name|String
name|suffix2
init|=
literal|"_"
operator|+
name|remoteDir2
operator|.
name|lastModified
argument_list|()
operator|+
literal|"-"
operator|+
name|mockClientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
operator|.
name|getRemoteFileSize
argument_list|(
name|remoteUrl2
argument_list|)
decl_stmt|;
name|String
index|[]
name|params
init|=
name|createCommonParamsBuilder
argument_list|()
operator|.
name|withLocalization
argument_list|(
name|remoteUrl
argument_list|,
name|containerPath
argument_list|)
operator|.
name|withLocalization
argument_list|(
name|remoteUrl2
argument_list|,
name|containerPath2
argument_list|)
operator|.
name|withLocalization
argument_list|(
name|remoteUrl
argument_list|,
name|containerPath3
argument_list|)
operator|.
name|withLocalization
argument_list|(
name|remoteUrl2
argument_list|,
name|containerPath4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
name|createRunJobCli
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|assertNumberOfServiceComponents
argument_list|(
name|serviceSpec
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Ensure download remote dir 4 times
name|verifyRdmCopyToRemoteLocalCalls
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// Ensure downloaded temp files are deleted
name|assertFilesAreDeleted
argument_list|(
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|getTempFileWithName
argument_list|(
name|remoteUrl
argument_list|)
argument_list|,
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|getTempFileWithName
argument_list|(
name|remoteUrl2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure zip file are deleted
name|assertFilesAreDeleted
argument_list|(
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|getTempFileWithName
argument_list|(
name|remoteUrl
operator|+
name|suffix1
operator|+
name|ZIP_EXTENSION
argument_list|)
argument_list|,
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|getTempFileWithName
argument_list|(
name|remoteUrl2
operator|+
name|suffix2
operator|+
name|ZIP_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure files will be localized
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|files
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
decl_stmt|;
name|assertNumberOfLocalizations
argument_list|(
name|files
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ConfigFile
name|expectedConfigFile
init|=
operator|new
name|ConfigFile
argument_list|()
decl_stmt|;
comment|// The hdfs dir should be download and compress and let YARN to uncompress
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|getFilePathWithSuffix
argument_list|(
name|stagingDir
argument_list|,
name|remoteUrl
argument_list|,
name|suffix1
operator|+
name|ZIP_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
comment|// Relative path in container, but not "." or "./". Use its own name
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|containerPath
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|=
operator|new
name|ConfigFile
argument_list|()
expr_stmt|;
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|getFilePathWithSuffix
argument_list|(
name|stagingDir
argument_list|,
name|remoteUrl2
argument_list|,
name|suffix2
operator|+
name|ZIP_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|containerPath2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|=
operator|new
name|ConfigFile
argument_list|()
expr_stmt|;
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|getFilePathWithSuffix
argument_list|(
name|stagingDir
argument_list|,
name|remoteUrl
argument_list|,
name|suffix1
operator|+
name|ZIP_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
comment|// Relative path in container ".", use remote path name
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteUrl
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|=
operator|new
name|ConfigFile
argument_list|()
expr_stmt|;
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|getFilePathWithSuffix
argument_list|(
name|stagingDir
argument_list|,
name|remoteUrl2
argument_list|,
name|suffix2
operator|+
name|ZIP_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
comment|// Relative path in container ".", use remote path name
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteUrl2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure mounts env value is correct. Add one mount string
name|String
name|env
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
literal|"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS"
argument_list|)
decl_stmt|;
name|String
name|expectedMounts
init|=
operator|new
name|Path
argument_list|(
name|containerPath2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|containerPath2
operator|+
literal|":rw"
decl_stmt|;
name|assertTrue
argument_list|(
name|env
operator|.
name|contains
argument_list|(
name|expectedMounts
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if file/dir to be localized whose size exceeds limit.    * Max 10MB in configuration, mock remote will    * always return file size 100MB.    * This configuration will fail the job which has remoteUri    * But don't impact local dir/file    *    * --localization https://a/b/1.patch:.    * --localization s3a://a/dir:/opt/mys3dir    * --localization /temp/script2.py:./    */
annotation|@
name|Test
DECL|method|testRunJobRemoteUriExceedLocalizationSize ()
specifier|public
name|void
name|testRunJobRemoteUriExceedLocalizationSize
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteUri1
init|=
literal|"https://a/b/1.patch"
decl_stmt|;
name|String
name|containerLocal1
init|=
literal|"."
decl_stmt|;
name|String
name|remoteUri2
init|=
literal|"s3a://a/s3dir"
decl_stmt|;
name|String
name|containerLocal2
init|=
literal|"/opt/mys3dir"
decl_stmt|;
name|String
name|localUri1
init|=
literal|"/temp/script2"
decl_stmt|;
name|String
name|containerLocal3
init|=
literal|"./"
decl_stmt|;
name|SubmarineConfiguration
name|submarineConf
init|=
operator|new
name|SubmarineConfiguration
argument_list|()
decl_stmt|;
comment|// Max 10MB, mock remote will always return file size 100MB.
name|submarineConf
operator|.
name|set
argument_list|(
name|SubmarineConfiguration
operator|.
name|LOCALIZATION_MAX_ALLOWED_FILE_SIZE_MB
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|mockClientContext
operator|.
name|setSubmarineConfig
argument_list|(
name|submarineConf
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
comment|// create remote file in local staging dir to simulate
name|Path
name|stagingDir
init|=
name|getStagingDir
argument_list|()
decl_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|stagingDir
argument_list|,
name|remoteUri1
argument_list|)
expr_stmt|;
name|File
name|remoteDir1
init|=
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createDirectory
argument_list|(
name|stagingDir
argument_list|,
name|remoteUri2
argument_list|)
decl_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|remoteDir1
argument_list|,
literal|"afile"
argument_list|)
expr_stmt|;
comment|// create local file, we need to put it under local temp dir
name|File
name|localFile1
init|=
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInTempDir
argument_list|(
name|localUri1
argument_list|)
decl_stmt|;
try|try
block|{
name|RunJobCli
name|runJobCli
init|=
name|createRunJobCli
argument_list|()
decl_stmt|;
name|String
index|[]
name|params
init|=
name|createCommonParamsBuilder
argument_list|()
operator|.
name|withLocalization
argument_list|(
name|remoteUri1
argument_list|,
name|containerLocal1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Shouldn't have exception because it's within file size limit
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// we should download because fail fast
name|verifyRdmCopyToRemoteLocalCalls
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|params
init|=
name|createCommonParamsBuilder
argument_list|()
operator|.
name|withLocalization
argument_list|(
name|remoteUri1
argument_list|,
name|containerLocal1
argument_list|)
operator|.
name|withLocalization
argument_list|(
name|remoteUri2
argument_list|,
name|containerLocal2
argument_list|)
operator|.
name|withLocalization
argument_list|(
name|localFile1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|containerLocal3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|spyRdm
argument_list|)
expr_stmt|;
name|RunJobCli
name|runJobCli
init|=
name|createRunJobCliWithoutVerboseAssertion
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"104857600 exceeds configured max size:10485760"
argument_list|)
argument_list|)
expr_stmt|;
comment|// we shouldn't do any download because fail fast
name|verifyRdmCopyToRemoteLocalCalls
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
index|[]
name|params
init|=
name|createCommonParamsBuilder
argument_list|()
operator|.
name|withLocalization
argument_list|(
name|localFile1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|containerLocal3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
name|createRunJobCliWithoutVerboseAssertion
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"104857600 exceeds configured max size:10485760"
argument_list|)
argument_list|)
expr_stmt|;
comment|// we shouldn't do any download because fail fast
name|verifyRdmCopyToRemoteLocalCalls
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test remote Uri doesn't exist.    * */
annotation|@
name|Test
DECL|method|testRunJobWithNonExistRemoteUri ()
specifier|public
name|void
name|testRunJobWithNonExistRemoteUri
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteUri1
init|=
literal|"hdfs:///a/b/1.patch"
decl_stmt|;
name|String
name|containerLocal1
init|=
literal|"."
decl_stmt|;
name|String
name|localUri1
init|=
literal|"/a/b/c"
decl_stmt|;
name|String
name|containerLocal2
init|=
literal|"./"
decl_stmt|;
try|try
block|{
name|String
index|[]
name|params
init|=
name|createCommonParamsBuilder
argument_list|()
operator|.
name|withLocalization
argument_list|(
name|remoteUri1
argument_list|,
name|containerLocal1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
name|createRunJobCli
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"doesn't exists"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
index|[]
name|params
init|=
name|createCommonParamsBuilder
argument_list|()
operator|.
name|withLocalization
argument_list|(
name|localUri1
argument_list|,
name|containerLocal2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
name|createRunJobCliWithoutVerboseAssertion
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"doesn't exists"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test local dir    * --localization /user/yarn/mydir:./mydir1    * --localization /user/yarn/mydir2:/opt/dir2:rw    * --localization /user/yarn/mydir2:.    */
annotation|@
name|Test
DECL|method|testRunJobWithLocalDirLocalization ()
specifier|public
name|void
name|testRunJobWithLocalDirLocalization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|localUrl
init|=
literal|"/user/yarn/mydir"
decl_stmt|;
name|String
name|containerPath
init|=
literal|"./mydir1"
decl_stmt|;
name|String
name|localUrl2
init|=
literal|"/user/yarn/mydir2"
decl_stmt|;
name|String
name|containerPath2
init|=
literal|"/opt/dir2"
decl_stmt|;
name|String
name|containerPath3
init|=
literal|"."
decl_stmt|;
comment|// create local file
name|File
name|localDir1
init|=
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createDirInTempDir
argument_list|(
name|localUrl
argument_list|)
decl_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|localDir1
argument_list|,
literal|"1.py"
argument_list|)
expr_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|localDir1
argument_list|,
literal|"2.py"
argument_list|)
expr_stmt|;
name|File
name|localDir2
init|=
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createDirInTempDir
argument_list|(
name|localUrl2
argument_list|)
decl_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|localDir2
argument_list|,
literal|"3.py"
argument_list|)
expr_stmt|;
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|createFileInDir
argument_list|(
name|localDir2
argument_list|,
literal|"4.py"
argument_list|)
expr_stmt|;
name|String
name|suffix1
init|=
literal|"_"
operator|+
name|localDir1
operator|.
name|lastModified
argument_list|()
operator|+
literal|"-"
operator|+
name|localDir1
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|suffix2
init|=
literal|"_"
operator|+
name|localDir2
operator|.
name|lastModified
argument_list|()
operator|+
literal|"-"
operator|+
name|localDir2
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
index|[]
name|params
init|=
name|createCommonParamsBuilder
argument_list|()
operator|.
name|withLocalization
argument_list|(
name|localDir1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|containerPath
argument_list|)
operator|.
name|withLocalization
argument_list|(
name|localDir2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|containerPath2
argument_list|)
operator|.
name|withLocalization
argument_list|(
name|localDir2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|containerPath3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
name|createRunJobCli
argument_list|()
decl_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Service
name|serviceSpec
init|=
name|testCommons
operator|.
name|getServiceSpecFromJobSubmitter
argument_list|(
name|runJobCli
operator|.
name|getJobSubmitter
argument_list|()
argument_list|)
decl_stmt|;
name|assertNumberOfServiceComponents
argument_list|(
name|serviceSpec
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// we shouldn't do any download
name|verifyRdmCopyToRemoteLocalCalls
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Ensure local original files are not deleted
name|assertTrue
argument_list|(
name|localDir1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localDir2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure zip file are deleted
name|assertFalse
argument_list|(
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|getTempFileWithName
argument_list|(
name|localUrl
operator|+
name|suffix1
operator|+
name|ZIP_EXTENSION
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testCommons
operator|.
name|getFileUtils
argument_list|()
operator|.
name|getTempFileWithName
argument_list|(
name|localUrl2
operator|+
name|suffix2
operator|+
name|ZIP_EXTENSION
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure dirs will be zipped and localized
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|files
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
decl_stmt|;
name|assertNumberOfLocalizations
argument_list|(
name|files
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Path
name|stagingDir
init|=
name|getStagingDir
argument_list|()
decl_stmt|;
name|ConfigFile
name|expectedConfigFile
init|=
operator|new
name|ConfigFile
argument_list|()
decl_stmt|;
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|getFilePathWithSuffix
argument_list|(
name|stagingDir
argument_list|,
name|localUrl
argument_list|,
name|suffix1
operator|+
name|ZIP_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|containerPath
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|=
operator|new
name|ConfigFile
argument_list|()
expr_stmt|;
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|getFilePathWithSuffix
argument_list|(
name|stagingDir
argument_list|,
name|localUrl2
argument_list|,
name|suffix2
operator|+
name|ZIP_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|containerPath2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|=
operator|new
name|ConfigFile
argument_list|()
expr_stmt|;
name|expectedConfigFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setSrcFile
argument_list|(
name|getFilePathWithSuffix
argument_list|(
name|stagingDir
argument_list|,
name|localUrl2
argument_list|,
name|suffix2
operator|+
name|ZIP_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|expectedConfigFile
operator|.
name|setDestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|localUrl2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertConfigFile
argument_list|(
name|expectedConfigFile
argument_list|,
name|files
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure mounts env value is correct
name|String
name|env
init|=
name|serviceSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
literal|"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS"
argument_list|)
decl_stmt|;
name|String
name|expectedMounts
init|=
operator|new
name|Path
argument_list|(
name|containerPath2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|containerPath2
operator|+
literal|":rw"
decl_stmt|;
name|assertTrue
argument_list|(
name|env
operator|.
name|contains
argument_list|(
name|expectedMounts
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

