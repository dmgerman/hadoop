begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Class to test the {@link ServiceWrapper}.  */
end_comment

begin_class
DECL|class|TestServiceWrapper
specifier|public
class|class
name|TestServiceWrapper
block|{
DECL|method|createMockAbstractComponent (Component mockComponent, String componentName, String localScriptFile)
specifier|private
name|AbstractComponent
name|createMockAbstractComponent
parameter_list|(
name|Component
name|mockComponent
parameter_list|,
name|String
name|componentName
parameter_list|,
name|String
name|localScriptFile
parameter_list|)
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|mockComponent
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|componentName
argument_list|)
expr_stmt|;
name|AbstractComponent
name|mockAbstractComponent
init|=
name|mock
argument_list|(
name|AbstractComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockAbstractComponent
operator|.
name|createComponent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockComponent
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAbstractComponent
operator|.
name|getLocalScriptFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localScriptFile
argument_list|)
expr_stmt|;
return|return
name|mockAbstractComponent
return|;
block|}
annotation|@
name|Test
DECL|method|testWithSingleComponent ()
specifier|public
name|void
name|testWithSingleComponent
parameter_list|()
throws|throws
name|IOException
block|{
name|Service
name|mockService
init|=
name|mock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceWrapper
name|serviceWrapper
init|=
operator|new
name|ServiceWrapper
argument_list|(
name|mockService
argument_list|)
decl_stmt|;
name|Component
name|mockComponent
init|=
name|mock
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractComponent
name|mockAbstractComponent
init|=
name|createMockAbstractComponent
argument_list|(
name|mockComponent
argument_list|,
literal|"testComponent"
argument_list|,
literal|"testLocalScriptFile"
argument_list|)
decl_stmt|;
name|serviceWrapper
operator|.
name|addComponent
argument_list|(
name|mockAbstractComponent
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockService
argument_list|)
operator|.
name|addComponent
argument_list|(
name|eq
argument_list|(
name|mockComponent
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|launchCommand
init|=
name|serviceWrapper
operator|.
name|getLocalLaunchCommandPathForComponent
argument_list|(
literal|"testComponent"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testLocalScriptFile"
argument_list|,
name|launchCommand
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithMultipleComponent ()
specifier|public
name|void
name|testWithMultipleComponent
parameter_list|()
throws|throws
name|IOException
block|{
name|Service
name|mockService
init|=
name|mock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceWrapper
name|serviceWrapper
init|=
operator|new
name|ServiceWrapper
argument_list|(
name|mockService
argument_list|)
decl_stmt|;
name|Component
name|mockComponent1
init|=
name|mock
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractComponent
name|mockAbstractComponent1
init|=
name|createMockAbstractComponent
argument_list|(
name|mockComponent1
argument_list|,
literal|"testComponent1"
argument_list|,
literal|"testLocalScriptFile1"
argument_list|)
decl_stmt|;
name|Component
name|mockComponent2
init|=
name|mock
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractComponent
name|mockAbstractComponent2
init|=
name|createMockAbstractComponent
argument_list|(
name|mockComponent2
argument_list|,
literal|"testComponent2"
argument_list|,
literal|"testLocalScriptFile2"
argument_list|)
decl_stmt|;
name|serviceWrapper
operator|.
name|addComponent
argument_list|(
name|mockAbstractComponent1
argument_list|)
expr_stmt|;
name|serviceWrapper
operator|.
name|addComponent
argument_list|(
name|mockAbstractComponent2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockService
argument_list|)
operator|.
name|addComponent
argument_list|(
name|eq
argument_list|(
name|mockComponent1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockService
argument_list|)
operator|.
name|addComponent
argument_list|(
name|eq
argument_list|(
name|mockComponent2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|launchCommand1
init|=
name|serviceWrapper
operator|.
name|getLocalLaunchCommandPathForComponent
argument_list|(
literal|"testComponent1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testLocalScriptFile1"
argument_list|,
name|launchCommand1
argument_list|)
expr_stmt|;
name|String
name|launchCommand2
init|=
name|serviceWrapper
operator|.
name|getLocalLaunchCommandPathForComponent
argument_list|(
literal|"testComponent2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testLocalScriptFile2"
argument_list|,
name|launchCommand2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

