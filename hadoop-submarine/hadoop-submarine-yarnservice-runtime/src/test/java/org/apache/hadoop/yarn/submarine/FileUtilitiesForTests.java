begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * File utilities for tests.  * Provides methods that can create, delete files or directories  * in a temp directory, or any specified directory.  */
end_comment

begin_class
DECL|class|FileUtilitiesForTests
specifier|public
class|class
name|FileUtilitiesForTests
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileUtilitiesForTests
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tempDir
specifier|private
name|String
name|tempDir
decl_stmt|;
DECL|field|cleanupFiles
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|cleanupFiles
decl_stmt|;
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|cleanupFiles
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|tempDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
expr_stmt|;
block|}
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"About to clean up files: "
operator|+
name|cleanupFiles
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dirs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|cleanupFile
range|:
name|cleanupFiles
control|)
block|{
if|if
condition|(
name|cleanupFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|cleanupFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deleteFile
argument_list|(
name|cleanupFile
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|File
name|dir
range|:
name|dirs
control|)
block|{
name|deleteFile
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFileInTempDir (String filename)
specifier|public
name|File
name|createFileInTempDir
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
DECL|method|createDirInTempDir (String dirName)
specifier|public
name|File
name|createDirInTempDir
parameter_list|(
name|String
name|dirName
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
operator|new
name|Path
argument_list|(
name|dirName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|createDirectory
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
DECL|method|createFileInDir (Path dir, String filename)
specifier|public
name|File
name|createFileInDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dirTmp
init|=
operator|new
name|File
argument_list|(
name|dir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dirTmp
operator|.
name|exists
argument_list|()
condition|)
block|{
name|createDirectory
argument_list|(
name|dirTmp
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
DECL|method|createFileInDir (File dir, String filename)
specifier|public
name|File
name|createFileInDir
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|createDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
DECL|method|createDirectory (Path parent, String dirname)
specifier|public
name|File
name|createDirectory
parameter_list|(
name|Path
name|parent
parameter_list|,
name|String
name|dirname
parameter_list|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|parent
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|dirname
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|createDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|dir
return|;
block|}
DECL|method|createDirectory (File parent, String dirname)
specifier|public
name|File
name|createDirectory
parameter_list|(
name|File
name|parent
parameter_list|,
name|String
name|dirname
parameter_list|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|dirname
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|createDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|dir
return|;
block|}
DECL|method|createDirectory (File dir)
specifier|private
name|void
name|createDirectory
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|boolean
name|result
init|=
name|dir
operator|.
name|mkdir
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to create directory "
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Directory does not exist: "
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cleanupFiles
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (File file)
specifier|private
name|void
name|createFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
name|file
operator|.
name|createNewFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to create file "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File does not exist: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cleanupFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteFile (File file)
specifier|private
specifier|static
name|void
name|deleteFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing directory: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing file: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|file
operator|.
name|delete
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Deletion of file "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" was not successful!"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTempFileWithName (String filename)
specifier|public
name|File
name|getTempFileWithName
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|tempDir
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getFilename (Path parent, String filename)
specifier|public
specifier|static
name|File
name|getFilename
parameter_list|(
name|Path
name|parent
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|parent
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

