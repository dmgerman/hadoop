begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice.command
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|HadoopEnvironmentSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|command
operator|.
name|TensorBoardLaunchCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|command
operator|.
name|TensorFlowPsLaunchCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|command
operator|.
name|TensorFlowWorkerLaunchCommand
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Simple factory to create instances of {@link AbstractLaunchCommand}  * based on the {@link TaskType}.  * All dependencies are passed to this factory that could be required  * by any implementor of {@link AbstractLaunchCommand}.  */
end_comment

begin_class
DECL|class|LaunchCommandFactory
specifier|public
class|class
name|LaunchCommandFactory
block|{
DECL|field|hadoopEnvSetup
specifier|private
specifier|final
name|HadoopEnvironmentSetup
name|hadoopEnvSetup
decl_stmt|;
DECL|field|parameters
specifier|private
specifier|final
name|RunJobParameters
name|parameters
decl_stmt|;
DECL|field|yarnConfig
specifier|private
specifier|final
name|Configuration
name|yarnConfig
decl_stmt|;
DECL|method|LaunchCommandFactory (HadoopEnvironmentSetup hadoopEnvSetup, RunJobParameters parameters, Configuration yarnConfig)
specifier|public
name|LaunchCommandFactory
parameter_list|(
name|HadoopEnvironmentSetup
name|hadoopEnvSetup
parameter_list|,
name|RunJobParameters
name|parameters
parameter_list|,
name|Configuration
name|yarnConfig
parameter_list|)
block|{
name|this
operator|.
name|hadoopEnvSetup
operator|=
name|hadoopEnvSetup
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|this
operator|.
name|yarnConfig
operator|=
name|yarnConfig
expr_stmt|;
block|}
DECL|method|createLaunchCommand (TaskType taskType, Component component)
specifier|public
name|AbstractLaunchCommand
name|createLaunchCommand
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|Component
name|component
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|taskType
argument_list|,
literal|"TaskType must not be null!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|WORKER
operator|||
name|taskType
operator|==
name|TaskType
operator|.
name|PRIMARY_WORKER
condition|)
block|{
return|return
operator|new
name|TensorFlowWorkerLaunchCommand
argument_list|(
name|hadoopEnvSetup
argument_list|,
name|taskType
argument_list|,
name|component
argument_list|,
name|parameters
argument_list|,
name|yarnConfig
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|PS
condition|)
block|{
return|return
operator|new
name|TensorFlowPsLaunchCommand
argument_list|(
name|hadoopEnvSetup
argument_list|,
name|taskType
argument_list|,
name|component
argument_list|,
name|parameters
argument_list|,
name|yarnConfig
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|TENSORBOARD
condition|)
block|{
return|return
operator|new
name|TensorBoardLaunchCommand
argument_list|(
name|hadoopEnvSetup
argument_list|,
name|taskType
argument_list|,
name|component
argument_list|,
name|parameters
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown task type: "
operator|+
name|taskType
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

